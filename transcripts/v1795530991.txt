da bin ich wieder ich habe mir gedacht wir machen aber was gescheites dachte
wir machen noch mal was was was gestern war was gestern nicht so gut geklappt
hat ich habe mich heute den tag über ein bisschen schlau gemacht wie das ordentlich
funktionierten heute zeige ich euch wie es richtig geht
hoffe ich zumindest das sind die force warum geht mir twitch eigentlich so
offen sagt mit diesem kack ein ob ab wo geht's weg excellent es ist es aber zu
dunkel wie kriegen wir das wie kriegen wir die
seite wieder normal hell jetzt kann man auch nichts anklicken
ziemlicher sack ok fahrer das series max wo bist du ich brauche hier html
pfeiffert kenntnisse ich habe keine ahnung
section
layout geht es ist alles gleich dunkel also muss es ja irgendwas damit zu tun
hat etwas mit der section ok ok wir fixen den twitch eintritt schnell
background chatroom mit ahnung die gehen wir auf den keks man tutsch muss
wird doch wieder in kopf im incognito typ machen dann gehen wir hier in die
in kocken mit top tاشmann fahrer da hat man die s obstruction src-suggestion
incognito tab machen dann gehen wir hier in die src-suggestion infokarten mit
j嘉igen die arendet die die versorgung ich glaube ich habe mich hier nicht an den
FFZ-Control-Zentrum.
Jetzt ist der ganze Klammler wieder auf Deutsch.
Moment, Moment.
Ich brauch den Song nochmal.
Geht nur zwei Minuten.
So, sichern, wiederherstellen,
Sicherung wiederherstellen, Downloads,
FFZ-Import.
Yes.
Exzellent.
Ja, Twitch möchte,
dass ich mich anmelde.
Pepega Twitch.
Arch, by the way.
Also,
wir machen heute tatsächlich was Sinnvolles.
Und zwar,
folgendes.
Ich könnte mir vorstellen, ein paar von euch
waren gestern im Stream dabei,
wo wir uns ein bisschen mit
Terraform und Google Cloud abgequält haben.
Ich hab heute den Tag
nach dem Stream ein bisschen genutzt.
Ich hab so heute Mittag mir das Ganze angeschaut,
mal für so drei, vier Stunden.
Und ich glaube, ich blick jetzt
ganz gut durch. Ich will mir allerdings nicht
die Loreban hier alleine geben.
Ich habe auch ganz gute,
gute Tutorials gefunden dazu,
was Google Cloud und Terraform angeht.
Manche Sachen sind tatsächlich nicht so ganz klar.
Zum Beispiel, wie man, wie man
Ressourcen miteinander linkt. Also zum Beispiel,
wenn man eine VM anlegt,
wie man dem ein ordentliches
Netzwerkinterface gibt und, und ohne
das immer wieder von Hand angeben zu müssen.
Das ist alles nicht so logisch
auf den ersten Blick, aber gut, man.
Ja, was ist das schon, ne?
Ich mach ganz klar schon, dass der
der hier, das ist ja einfach
irgendwie ein Hokubat, keine Ahnung,
ich Hold, auch nicht so viel.
Ich war, ich war ein bisschen
wupp, wupp, wupp, an wieder.
Wie was auch noch
massiv nice ist
der hier.
Also noch Kontakt zu Dr Kabum.
Lange her.
Also, das letzte Mal
hat. Ich glaube, hatte er irgendwann letztes Jahr angefangen,
hier an versucht anzurufen da habe ich nicht gesehen dass er angerufen hat hat
er sms geschrieben hat er nichts mal geschrieben
also ne ne lange nicht mehr lange nicht mehr
ja ich quäle euch jetzt nicht mit 18 minuten 8 mit musik ein bisschen ein
bisschen muss ich mal laufen lassen genau also ihr erinnert euch vielleicht
noch an das was wir gestern gemacht haben wir haben versucht hier ein paar
sachen über terraform in der google cloud zu provisionieren
und ich mache das mal wieder auf und wir werden heute etwas ähnliches machen
allerdings heute zeige ich euch wie man es richtig macht so wo sind wir hier
stehen geblieben gestern sollte ich nicht irgendwo in der history was haben
open recent moment haben wir da gar nichts angelegt
hä
moment wo war man denn cd cd repos
aber da gestern gar nichts angelegt müssen wir doch haben wird jetzt total
verbreitet wo haben wir es denn ich glaube ich habe das wieder gelöscht
kann das sein ich habe ich habe das wieder ich habe das wieder
weggeschmissen ich habe das wieder weggeschmissen ok alles klar
ich werde auch nicht schlimm weil wir brauchen es heute nicht und weil ich so
konfident bin heute dass das was wird erinnert mich an das was ich gesagt
habe am ende des teams packe ich das ganze sogar in den disco wenn ihr wollt
was wir heute machen dazu euch das angucken können soll ich wir fangen erst
mal an oder wir fangen erst mal an bevor ich überfeuung mache ich glaube ich glaube
will die zeit anybody else o thoughts bobyc green hat bei uppermost dann habe ich
noch mal kein werdenso Tennille Aww setup Collection Ads sehr gut ferntritt
nowadays und genau sodann also gewesen derPartyопartners ist das ist schon buried the
Ich glaube, wir gucken erst mal, wie weit wir kommen.
Boss-Champ.
Wir gucken erst mal, wie weit wir kommen.
Wir können ja schon mal ein Repo anlegen.
MKDeer.
Tja, wie nennen wir den Krempel denn?
Komm, hier.
Terraform?
Oder sollen wir es mal...
Nennen wir es mal so.
Weil das ist im Endeffekt das, was wir machen.
So, ich mache jetzt mal ein bisschen andere Musik an.
Lass mal gucken, was haben wir denn hier?
Epic Chill-Step-Collection.
Das ist so richtig aus MW2-Zeiten sowas.
Wer sowas da noch gehört hat.
Ich meine, das gibt sich heute keiner mehr.
Das ist nicht mehr im Trend.
Wupp, wupp, wupp, wupp, wupp, wupp.
Egal.
Es chillt.
Ob es nicht zu laut...
Ja, passt.
Ja, müsste eigentlich gehen.
Haftbefehl.
Hey, ich würde ja...
Ab und zu mal gescheite Musik spielen.
Was nicht jetzt unbedingt Haftbefehl wäre.
Wenn ich nicht Monkartos-Probleme bekommen würde auf Twitch.
Ich könnte...
Ich könnte...
Ein extra...
So ein...
So ein...
Watt...
Audiospuraustausch-Ding machen.
Na gut, wie dem auch sei.
Also, wir werden heute Folgendes machen, Leute.
Ich sag's euch.
Wir werden das heute ganz ordentlich machen.
Und zwar...
Wir gehen in die Google Cloud.
Dort werden wir mit Terraform...
Wir legen uns auch ein neues Projekt...
Und dann, dass wir sehen, dass das alles reproduzierbar mit Terraform funktioniert.
Wir legen heute eine Jump vor allem an, um in die privaten Netze auf der Google Cloud zu kommen.
Wir konfigurieren den Google Provider in Terraform.
Wir legen ein Netzwerk an.
Wir legen ein Subnet an.
Wir legen einen Router an.
Wir legen NAT-Regeln an, dass man nach außen kommt.
Wir legen Firewall-Regeln an, dass man per SSH reinkommt.
Wir legen ein Kubernetes-Cluster an.
Wir legen Kubernetes...
Eine...
Audiospur mit den Weisheiten von Homelander.
Was?
Nee, ich brauch irgendwas ohne...
Ohne Gerede.
Äh...
Ein Kubernetes-Cluster mit einem extra Kubernetes-Cluster-Node-Pool.
Und...
Mal gucken, wie weit wir kommen.
Ja?
Und das Ziel ist, dass das alles auf Knopfdruck in einem neuen Google Cloud Projekt aufgebaut werden kann per Terraform.
Und kein Rumgeclicke im Webinterface.
Das heißt...
Damit wir jetzt...
Login...
GCP...
Damit wir das auch ordentlich machen können.
Klar, das schaffen wir.
Und alles easy schaffen wir das heute im Stream.
Leute, ihr vergesst eine Sache.
Es ist immer ein Unterschied.
Und das müsst ihr...
Müsst ihr...
Müsst ihr, ja...
Soll ich sagen, zugeben, dass das so ist.
Es ist ein Unterschied, ob ich im Stream selbst Sachen neu ausprobiere...
Oder mir das vorher angeguckt hab.
Wenn ich mir das vorher angeguckt hab, geht das in der Regel deutlich strukturierter und schneller, als wenn ich keine Ahnung hab.
Ja?
Also immer, wenn ich mir neue Sachen anguck, ist das planlos.
Und wenn ich Sachen mach, die ich mir vorher schon angeguckt hab, dann geht das meistens relativ schnell.
Doch, Kansa.
Nein, ich...
Ich weiß es nicht genau.
Also ich zeige euch heute, wie es richtig geht.
Terraform mit Google Cloud.
Denn wie gesagt, ich hab mich schlau gemacht.
Ich hab auf Stream das Ganze mir noch ein bisschen angeschaut am Mittag.
Und im Stream zeige ich das jetzt und wir verfeinern das ein bisschen zusammen.
Ich glaube, es ist die bessere Variante, wenn ich mich vorher ein bisschen schlau mache.
Und wir das dann im Stream zusammen verfeinern.
Wie gesagt, ich will auch nicht so sehr die fremden Lorbeeren ernten.
Ich hab mir ein Video dazu angeguckt heute.
Was sehr hilfreich war.
Nämlich so ein paar Kniffe, wie man ordentlich ein Kubernetes-Cluster anlegt.
Und zwar hab ich mir angeguckt auf YouTube GKE Terraform.
Das hab ich einfach mal eingegeben und hab ein ziemlich gutes Tutorial gefunden.
Ich glaube, das hier...
Das heißt, inspiriert von dem, was er da gemacht hat.
Ich hab das ein bisschen angepasst für das, was ich brauche.
Ein paar Sachen mach ich nicht.
Also zum Beispiel diese ganzen extra Accounts, die er angelegt hat.
Also wie gesagt, ich will jetzt nicht gar so sehr fremde Lorbeeren ernten.
Wir machen das auch in einer anderen Zone und sowas.
Und Logging und so Gezeug machen wir auch nicht an.
Aber da hab ich mich heute ein bisschen schlau gemacht.
Und mir auch die Examples von ihm angeguckt.
Und das auch schon mal so aufgebaut, wie ich es denn brauche.
Weil es ist tatsächlich gar nicht so einfach, da durchzublicken.
Oh fuck, ich bin nicht mal eingeloggt.
Okay, Zack.
Ihr seid...
Wir sind gleich...
Hier gibt es gleich wieder was zu sehen.
Clipboard ausschalten.
Sekunde.
Ich muss mal kurz mein Passwort und Mail copy.
Hey, die Mail ist nicht schlimm.
Die Mail hab ich schon geleakt.
Aber das Passwort will ich nicht unbedingt leaken, ehrlich zu sein.
Ihr seid schon drin.
Nice.
Nichts anderes hab ich von euch erwartet, Chat.
Nichts anderes.
Ihr seid einfach die geilsten Hackermans überhaupt.
Da kann man einfach nichts machen gegen euch.
Coursen los.
Best Practice Passwort 1, 2, 3, 4, 5, 6.
Wenn schon.
So.
Ich bin wieder da.
Und ihr seid hoffentlich auch wieder da.
Und zwar, ich bin eingeloggt in der Google Cloud.
Zack.
Ne, da.
Zack.
So.
Wir haben hier ein Projekt mit dem tollen Name Kekkel.
Da werden wir heute nichts drin machen.
Und ich probiere es nochmal mit dem Dark Reader.
Aber ich fürchte...
Es ist einfach schon komplett...
Procken.
Es ist so procken, dass ich es noch nicht mal mehr einschalten kann mittlerweile.
Gibt es irgendeine sinnvolle Alternative zum Dark Reader?
Ja.
Wo liegen die Skripts?
Ähm, ich glaube...
Lass mal gucken, ob die überhaupt irgendwo liegen.
Wo bloß Dot Files?
Die könnten hier irgendwo liegen.
Repos?
Skripts?
Shortcuts?
Hier liegen die.
Hier liegen die.
Aber nicht alle.
Die meisten davon gehen übrigens auch gar nicht.
Äh, das ist zum Beispiel leer.
Hier, äh, Fenster zum Killen.
Und das zum Clipboard Togglen ist da drinnen.
Ansonsten glaube ich, wird da gar nichts, wird da gar nichts verwendet.
Ja, also, wir haben hier ein Projekt mit dem viel verheißenen Titel Kekkel.
Das werden wir nicht verwenden, weil ich wollte euch ja zeigen, wie man das macht, wenn man ein komplett neues Projekt in der Google Cloud anlegt.
Also, dass ich gar nichts jetzt hier von dem vielleicht verwenden könnte, was ich im Vorfeld schon gemacht habe.
Also, dass ich gar nichts jetzt hier von dem vielleicht verwenden könnte, was ich im Vorfeld schon gemacht habe.
Also, dass ich gar nichts jetzt schon gemacht habe.
Dass das alles schön über Terraform professioniert wird.
Wir machen das Ganze mal auf.
In einem extra Fenster.
Das heißt, wir legen jetzt ein neues Projekt an.
Äh, Newprojectghat.
Ich brauche tollen Namen dafür.
Wir nennen es nicht Myproject94176.
Äh, 1474.
Sondern, wir brauchen mal was.
Wer ist denn gerade?
Gibt's eine Möglichkeit, das rauszubekommen?
Wer ist der am längsten
subscribte Zuschauer?
Wer ist denn gerade?
Wer ist der am längsten subscribte Zuschauer?
Wer ist denn gerade?
der gerade da ist.
Wahrscheinlich der Serious Max oder sowas.
Da gibt es ja teilweise Leute, die sind schon ewig dabei.
31 Monate.
Was ist später?
Ich bin mir nicht sicher, ob man sich das auflisten kann.
Okay, Name ist
im Prinzip Projekt Champ.
Flamongo, danke schön für den Sub.
Ja, komm. Projekt.
Sei es einfach Projekt.
Nee.
Es heißt, komm, wir machen es gerne.
Wir machen es so wie gestern. Wir nennen es einfach Stream.
Ja, gut.
Und keine Organisation.
Projekt ID. Edit.
Man kann hier...
Es muss, glaube ich...
Ich bin mir nicht sicher.
Ich glaube, die Projekt ID
muss Unix sein.
Weltweit.
Bin ich mir nicht ganz sicher. Ich glaube schon.
Ich glaube, die muss Unix sein, weltweit.
Also im Prinzip können wir sowas machen, wie hier...
Wenn man das hier gleich nennen will.
Projekt ID und Projekt Name.
Könnte man sich jetzt irgendwie was ausdenken.
Hier. Kekkel Stream.
So, und jetzt gucken wir mal, ob das von irgendjemand anderes genommen hat.
Hey, Kekkel Stream ist available.
Als Projekt. Nice.
Dann sind wir mal so. Kekkel Stream 1.
Massive.
Massive ID.
Besser kann es nicht heißen, das Projekt.
So, bla bla bla.
Ihr seht, ich habe im Vorfeld schon ein bisschen ausprobiert.
Zack.
Zack.
Kekkel Stream 1.
Kekkel Stream 1.
Da sind wir.
So, neues Projekt.
Es ist noch nichts enabled.
Keine VM API eingeschaltet, wie ihr sehen werdet.
So wie das halt ist, wenn man ein neues Projekt anlegt.
Keine Kubernetes Workloads, sonst was eingeschaltet.
Nichts.
Das werden wir jetzt alles zusammen konfigurieren über Terraform.
Und wie gesagt, ich habe mich ein bisschen inspirieren lassen von dem,
wie der Typ das im Video gemacht hat.
Ich fand, das ist eigentlich eine ganz sinnige Geschichte.
Der hat die Dateien durchgebracht.
Der hat die Dateien durchgebracht.
Der hat die Dateien durchnummeriert.
Es ist zwar für Terraform letztendlich egal, wie die Dateien heißen.
Weil Terraform wurstet alle Dateien zusammen in quasi ein großes globales Ding und applyt das dann.
Aber es ist zum Strukturierten, zum Denken, dass man nichts vergisst.
Gar nicht verkehrt.
Wir fangen an mit einem Jump Host als VM.
Wir machen weiter mit einem, so was in der Richtung.
Ja.
Also das werden wir jetzt auch machen.
Chat, bevor wir anfangen, soll ich euch nochmal kurz erklären, was Terraform ist.
Bevor wir jetzt Terraform machen, für alle, die nicht wissen, was Terraform ist,
soll ich euch nochmal erklären, was Terraform ist.
Postchamp.
Erdeformen.
Ja, genau.
Das ist es.
Wir formen die Erde.
Klimawandel ist nicht mehr.
Wir haben das alles umgeformt.
Easy.
Welt gerettet.
Wubbler Stream 5 hat.
Ist wie bei Chat-GPT.
Hätte auch keiner Chat-GPT erfinden müssen, wenn sie allen Wubbler Stream Chat gekannt hätten.
Also ich erkläre euch kurz.
Was Terraform ist.
Wir gucken mal, was Terraform selbst dazu sagt.
Terraform.
Terraform bei Haschikorb.
Ich weiß immer noch nicht, wie man die richtig ausspricht.
Das übrigens der Vagrant Erfinder, der das gegründet hat.
2014 oder so was in der Richtung.
Zumindest Terraform sagt über sich selbst.
Vergesst das.
Vergesst das mal mit Cloud.
Es ist bescheuert, dass hier das Terraform ist ein Open Source Infrastructure as Code Software Tool,
that enables you to safely.
Prüft.
Ha.
Okay.
Das ist.
Wenn du nicht weißt, was es macht, weißt du es danach auch nicht.
Oder wenn du keine Ahnung hast, was es machen soll, hast du ja auch keine Ahnung danach.
Also Terraform ist ein Tool, was verschiedene Cloud Provider unterstützt und wo man quasi.
Reproduzierbar Cloud Infrastruktur mit aufbauen kann.
Jeder Cloud Provider hat ja so seine, seine Besonderheiten, wie man Sachen anlegt.
AWS, Azure, Google, das abstrahiert Terraform ein bisschen, wobei man sagen muss, man konfiguriert Terraform schon unterschiedlich, je nach Cloud Provider.
Aber der Vorteil ist, es gibt zwei Varianten, wie man das Ganze machen kann.
Mal angenommen, ich möchte in der Cloud zehn, zehn VMS anlegen, zehn virtuelle Maschinen und das ist jetzt ein simples Beispiel, gebe ich zu.
So, da gibt es jetzt die Möglichkeit.
Ich gehe ins Web Interface, zum Beispiel bei Google.
Gehe auf Computer.
Compute Engine, vor allem Instance, klicke auf Create.
Ja, ich gehe noch mal kurz in das andere Projekt rein.
Dann könnt ihr es, könnt ihr es sehen.
So, die habe ich die disabled.
Ich kann nur wieder na geil, ich gehe hier rein, ich aktiviere die API, ich klicke auf Create vor M und das mache ich zehnmal von Hand.
Dann habe ich das nächste Projekt, da klicke ich das gut, gut, gut, dass wir neues Projekt angelegt haben.
Ich habe keine Ahnung, was mein Projekt verkehrt ist, aber okay.
Das ist Google Cloud Sache.
Das muss man manchmal nicht so, muss man manchmal nicht so hinterfragen.
So, und dann würde ich dann meine zehn VMS durchklicken und immer und immer wieder.
Oder ich definiere Act.
Ja, genau bestimmt.
Oder ich definiere diese zehn VMS in Terraform oder kann ich immer wieder das gleiche Terraform Pfeil laufen?
Lass uns kommen am Ende die zehn VMS raus.
Und das Schöne an Terraform ist, ihr werdet es gleich sehen, wenn ich es benutze für alle, die es noch nicht kennen, was es genau macht.
Und das Schöne an Terraform ist, ich kann mit Terraform auch die Infrastruktur, die ich jetzt hier habe, auch aufbauen.
Und das Schöne an Terraform ist, ich kann mit Terraform auch die Infrastruktur, die ich jetzt hier habe, auch aufbauen.
Und das Schöne an Terraform ist, ich kann mit Terraform auch die Infrastruktur, die ich angelegt habe, einfach wieder rückgängig machen.
Also wenn ich die zehn VMS wieder entfernen will, muss ich die auch nicht wieder löschen im Web Interface und dann sage einfach Terraform Destroy und es ist wieder weg.
Also es ist, um reproduzierbar Cloud Infrastruktur aufzubauen oder eben zu professionieren, wie das, wie das die coolen Leute sagen.
Und das Stichwort, was man kennen muss, weil man im Vorstellungsgespräch glänzen will, ist IAC.
Das heißt Infrastructure as Code.
Die coolen Leute sprechen das schon gar nicht mehr Infrastructure as Code aus, sondern IAC.
Also wenn ihr alle normalen, die noch normal ticken im Hirn verwirren wollt, dann sagt ihr, ich kenne mich auch mit IAC Tools aus.
Da weiß auch, da weiß auf den ersten Moment immer keiner, was gemeint ist, auch wenn es alle coolen Leute mit IAC abkürzen.
Infrastructure as Code.
Also sprich IAC.
Nicht IAC.
IAC.
So, genau.
Falls du fragen willst, was der entspricht.
Ja, ich wusste, dass du das fragen willst.
Mein Chat hat nämlich noch gar nicht geladen.
Ich wusste, dass du das fragen willst.
Das ist eines der meistgestellten Fragen überhaupt, wenn es um das Thema Terraform geht.
Was ist der Unterschied zwischen Ansible und Terraform?
Die beiden Tools haben gar nicht so viel miteinander gemein, wie es auf den ersten Blick aussehen mag.
Terraform.
Also es gibt gewisse Überschneidungen, aber sagen wir mal so 80% Terraform, 80% Ansible und 20% Überschneidung vielleicht, wenn es hoch kommt.
Also Terraform ist ein Tool, mit dem man Infrastruktur anlegt.
Zum Beispiel professioniere mir ein Kubernetes Cluster in Google Cloud, lege mir in Azure 10 VMs an, erstelle mir bei AWS eine Datenbank und irgendwie lasse 5 Container Images laufen.
Das mache ich in Terraform.
Hier, lege mir Storage Buckets an und sowas.
Also ich definiere in Terraform meine Infrastruktur und lasse Terraform die Infrastruktur managen, anlegen, ändern und löschen.
Terraform hat auch ein Lokal.
Terraform hat auch einen lokalen State, also sprich Terraform merkt sich, was es gemacht hat und erkennt Änderungen.
Wenn irgendjemand von Hand dran rumgespielt hat, kann man das Ganze wieder überbügeln.
Also Terraform ist zum Anlegen der Infrastruktur.
Ansible ist zum Konfigurieren von VMs zum Beispiel.
Ansible ist zum Konfigurieren, Terraform ist zum Anlegen.
Zum Beispiel mit Terraform würdest du 10 VMs erzeugen in der Cloud.
Und mit Ansible würdest du dann die 10 VMs, wenn das notwendig ist,
im Detail Linux-seitig konfigurieren.
Meistens braucht man das aber, wenn man es gescheit macht, mittlerweile gar nicht mehr,
weil in der idealen Welt sollte Cloud-Infrastruktur möglichst stateless sein,
was es natürlich im praktischen Anwendungsfall auch nicht ist, aber in der Theorie.
Also am besten ist, du brauchst gar kein Ansible mehr.
Wenn du komplexere Konfigurationen machen willst, dann ist Ansible immer noch das Beste,
weil mit Terraform kannst du deine angelegten VMs nicht konfigurieren.
Das höchste der Gefühle in Terraform ist ein Cloud-Init-File und in dem Cloud-Init-File Custom Bash Scripts,
was natürlich irgendwie ein bisschen laggt versus Ansible.
Dafür ist Infrastruktur professioniert um Längen besser in Terraform allein schon wegen State-Tracking,
was Ansible nicht macht.
Ja, so könnte man es vielleicht umschreiben.
Ja.
Ja Helix, hat man verstanden, denke ich, oder?
Also es sind zwei unterschiedliche Funktionen.
Es gibt unterschiedliche Tools für unterschiedliche Anwendungsgebiete,
wenn sie auch ein bisschen Überschneidungen haben.
Gut, also da würde ich sagen, fangen wir an.
Wir haben, ups, da wollte ich jetzt nicht hin.
Wir haben ein neues leeres Projekt.
Das heißt, das allererste, was man machen muss, wenn man Sachen in der Google Cloud über Terraform anlegt,
ist den Google Provider konfigurieren.
Das machen wir folgendermaßen.
Wir legen die Datei an.
Ich lasse mich jetzt mal inspirieren von dem Video, was ich heute geguckt habe.
Der hat die Dinger nämlich auch so benannt.
Also das erste, was wir anlegen.
Ist Config für unsere Cloud.
So globale Config.
So, und das nennen wir jetzt mal Provider.Terraform.
So, da gibt man zum Beispiel so Sachen an, wie Projekt-ID, Region, Zone,
dass man überhaupt Google Cloud verwenden will.
Und eine Sache, die werde ich jetzt schreiben ins Terraform-File.
Aber dann müssen wir, bevor wir anfangen, eine Sache im Webinterface von Hand machen.
Und ihr werdet auch gleich sehen, warum.
Weil das ist so ein kleines Henne-Ei-Problem.
Wir werden nämlich heute auch unseren Terraform-State sinnvoll managen.
Okay, also wir legen eine Variable an.
Variable heißt hier Project-ID.
Übrigens, das habe ich übernommen aus der Sache gestern.
Description, Project-ID.
Dann kopieren wir uns das Ganze noch ein paar Mal.
Also, wir brauchen die Projekt-ID.
Wir brauchen die Region.
Und wir brauchen die Zone.
Wir sind faul.
So.
Und ID kommt weg.
Das ist nur eine Variable, da steht aktuell noch nichts drin.
Wenn man Default-Value reinschreiben will, kann man das Ganze so machen.
Wollen wir aber nicht.
Wollen wir aber nicht.
Jetzt müssen wir den Google Provider konfigurieren.
Das ist auch relativ easy.
Da sagen wir Provider.
Google.
Wir wollen die Google Cloud verwenden.
Und jetzt müssen wir angeben, auf welches...
Übrigens, gebt nicht so viel auf...
Gebt nicht so viel auf dieses Terraform-Auto-Complete.
Das ist ziemlicher Rotz.
Habe ich mittlerweile auch schon mitgekriegt.
So.
Var.
Project-ID.
Und Region wollen wir verwenden.
Region.
Jetzt müssen wir natürlich noch das Ganze füllen mit Variablen.
Es gibt zwei Varianten.
Ich zeige euch mal, was passiert, wenn ich das Ganze jetzt...
Wenn ich das Ganze laufen lasse.
Terraform-Init.
Terraform-Apply.
Dann fragt er mich nämlich, ey, was soll ich denn benutzen?
Aber ich will das ja nicht jedes Mal von Hand angeben.
Ja, das ist immer...
Das ist relativ pepega.
Also ich müsste jetzt quasi bei jedem Start Projekt-ID und solche Geschichten von Hand angeben.
Will ich nicht.
Deswegen brechen wir aber ab.
Und machen das folgendermaßen.
Wir legen ein...
Das kann ich aber nicht merken.
Terraform-TF war es.
Heißt es, glaube ich, an.
Ein File mit Variablen drin.
Ich muss mal kurz spicken.
Wie man das...
Ja, okay. Easy.
So machen wir das.
Okay.
Genau.
Also in das Variablen-File schreiben wir jetzt rein, was wir für diesen speziellen Fall denn verwenden wollen.
Wir haben eine Projekt-ID, die sich KekkelStream1 nennt.
Wir benutzen die Region Europe-West-3, was für Frankfurt steht.
Also das hier kann man ja auch schreiben, das ist Frankfurt.
Und das hier ist auch Frankfurt, ja.
Also der Unterschied zwischen der Region und der Zone ist, eine Zone ist quasi eine Unter-Unterregion.
Es gibt quasi die...
Die Google-Geschichte in Frankfurt gibt es...
Europe-West-A, Europe-West-3-B, Europe-West-3-C.
Moin, Michael.
50 Trillionen.
Hast du eine Null mehr mittlerweile im Namen?
Das sieht irgendwie anders aus.
Das ist nicht mal normal.
Da stimmt irgendwas mit deinen Nullen nicht heute.
Hast du nicht?
Hast du eine Null weniger vielleicht?
So.
Also jetzt können wir hier angeben, wo wir unsere Sachen aufbauen wollen.
Wohlgemerkt, aktuell macht das Ganze noch gar nichts.
Wir füllen einfach diese Variablen.
Das hat den Vorteil, mal angenommen, ich möchte jetzt in einem anderen Projekt exakt das gleiche aufbauen.
Dann würde ich einfach die Variablen anpassen und das laufen lassen.
Und schon hätte ich in einem neuen Projekt auch alle Ressourcen professioniert, die ich hier drinnen anlege.
Das ist jetzt im Prinzip Vorarbeit, die wir machen müssen.
Wie kriege ich raus, welche Stadt welche Regionsnamen hat?
Einfach googeln.
Nicht AWS.
Einfach googeln.
Guck, da steht hier.
Frankfurt.
Ich muss Darkreader anmachen.
Ich drehe am Rad ohne Darkreader.
Ist mir einfach zu hell.
So, also da steht hier.
Guck, wenn du jetzt nach Frankfurt suchst.
Da siehst du hier, West ist Frankfurt.
Und das andere, die anderen sind London.
Und dann gibt es noch Italien.
Dann gibt es noch Belgien.
Dann gibt es, was haben wir hier, Spanien, Madrid.
Ah, ne, das ist schon South West.
Okay, ja, Europe West gibt es sonst nicht.
Ah, ne, hier.
Es gibt noch Niederlande.
Und dann haben wir noch Zürich in der Schweiz.
Milan, Paris.
Ja, also die Sachen gibt es wohl anscheinend.
Kannst du offiziell gucken bei denen in der Tabelle, was das oder was liegt.
So, und eine Sache, das habe ich gestern ja auch schon gesagt.
Man muss bei Google ein bisschen vorsichtig sein.
Wann man Regionen und wann man Zonen nimmt.
Es kommt manchmal vor, wie gesagt, genau das gleiche.
Erklärst du auch ein bisschen was zu Terraform, wie das so funktioniert?
Ja, mache ich, mache ich.
Zumindest beim Anlegen von den Ressourcen.
Aktuell haben wir noch nichts gemacht.
Es gibt manchmal bei Google, dem Provider hier, also bei dem Terraform Provider von Google.
Gibt es manchmal die Einstellung, dass man angeben kann, Location.
So, und bei Location kann man entweder eine Region oder eine Zone eintragen.
Der Unterschied ist, wenn ich eine Zone eintrage, dann wird die Ressource nur einmal aufgebaut.
Nämlich genau da.
Wenn ich eine Region eintrage, wird sie dreimal aufgebaut.
Nämlich in West 3a, West 3b, West 3c.
Was cool sein kann, was aber auch ins Geld geht.
Das heißt, da muss ich schon überlegen, was schreibt man bei Location rein.
Wir werden heute ein Google Kubernetes Cluster unter anderem aufbauen.
Und da geben wir auch nur die Zone an und nicht die Region.
Weil ich habe ein Google Cloud Demo Account für den Stream.
Und da hat man ein Storage Limit von 250 GB SSD.
Und wenn ich das zu groß aufbaue, dann funktioniert es einfach nicht.
Deswegen muss man halt gucken.
Okay, also fangen wir mal an.
Das ist jetzt hier so bloß vorgeplänkelt.
Eine Sache machen wir jetzt.
Und da kann ich euch nur wärmstens empfehlen, sowas oder so ähnlich auch zu machen.
Denn Terraform merkt sich was an.
Merkt sich was es aufgebaut hat.
Also wenn ich mit Terraform eine VM aufbaue, die den Namen Blub hat und die ID 1.
Dann merkt sich Terraform, dass es die aufgebaut hat.
Und ich kann die mit Terraform auch einfach wieder löschen.
Und wenn jetzt jemand anderes herkommt und an der VM rumschraubt, im Web Interface zum Beispiel.
Und ich dann Terraform ausführe, dann merkt das Terraform, dass der State von ihm anders ist, als der State wie er in der Cloud ist.
Und kann das korrigieren.
Also Terraform merkt sich, was es gemacht hat.
Jetzt ist die Sache nur die, irgendwo muss Terraform sich ja speichern, diesen State, was es gemacht hat.
So, wenn man es einfach nur normal ausführt, ohne was zu definieren, dann gibt es ein, ich glaube man sieht es ja auch schon irgendwo.
Dann gibt es einen Terraform, lokalen Terraform State.
Bei mir lokal auf der Festplatte.
Das ist meistens nicht so sinnvoll, wenn man das mit mehreren Leuten benutzt.
Gibt es eine Sache, die kann ich euch empfehlen, das so zu machen.
Und zwar das Ganze in einem Storage Bucket zu speichern in der Cloud.
Dann müsst ihr euch auch keine Gedanken machen über Logs von Filesystemen oder sonst was.
Sondern ihr speichert es einfach in der Cloud.
Das ist natürlich so ein kleines Henne-Ei-Problem, wenn ich den Terraform State in der Cloud speichern will, aber meine Cloud mit Terraform professionieren will.
Das heißt, das Storage Bucket, das muss ich einmal initial von Hand anlegen.
Oder mit einem anderen Terraform Projekt.
Weil ich kann nicht das Projekt, den State managen und gleichzeitig das Bucket für den State anlegen.
Innerhalb dieses Terraforms.
Environments.
Ist logisch, oder?
Ich meine, er kann ja schlecht sein State speichern, bevor er das angelegt hat.
Er kann sich anlegen, bevor er sein State speichert.
Terraform Init.
Genau, also man macht ein anderes Terraform Projekt.
Oder wie wir es jetzt hier in dem Fall von uns machen.
Oder wie wir es jetzt hier in dem Fall von uns machen.
Oder wie wir es jetzt hier in dem Fall von uns machen.
Wir machen das von Hand.
Also wir gehen jetzt nach Cloud Storage.
Kann sein, dass wir das noch enablen müssen.
Nee, müssen wir nicht.
Create.
Da ist der Sound schon vorbei.
Einfach kein Sound drin.
Nice.
Wir legen jetzt ein Storage Bucket an.
Das nennen wir jetzt einfach.
Wie habe ich unser Projekt genannt?
Kegel Stream 1.
Kegel Stream 1 Tools.
Kegel Stream 1 Tools.
Continue.
Region.
Legen wir auch Europe.
West.
Frankfurt an.
Standard.
Uniform.
Und jetzt.
Create.
Public Access gibt es nicht.
So.
Und jetzt müssen wir noch eine Sache machen.
Die oft.
Zur Verwirrung führt.
Wenn man ein neues Projekt anlegt.
Dann.
Login.
Dann muss man sich nochmal neu einloggen.
Oder man macht nochmal einen G-Cloud Init.
Das geht auch.
Man muss sich nochmal neu einloggen.
Ich glaube man kann dann angeben.
Project oder sowas.
Ja.
Und wir loggen uns hierfür an.
Ja bei mir macht der den Fall.
Ja GCP Test Account.
Allow.
Weil ansonsten hat man nachher Probleme.
Dass man manchmal keine Berechtigung hat.
Wenn man sich nicht explizit für das neue Projekt.
Nochmal mit dem Google Tool eingeloggt hat.
So.
Aber jetzt sollte eigentlich alles funktionieren.
So.
Wir haben unser Storage Bucket angelegt.
Was eigentlich jetzt hier stehen sollte.
Ah ne.
Ich bin schon drinne.
So.
Also wir haben hier unser Storage Bucket.
Und dementsprechend können wir Terraform jetzt sagen.
Das ist wieder.
Darkreader schon wieder richtig am abspacken.
Guckt es euch mal an.
Dreckstool alter.
Habt ihr mal ne gute Alternative zu Darkreader?
So und.
Jetzt müssen wir Terraform sagen.
Das es den State da speichern soll.
Und das macht man.
Backend.
Backend GCS.
Fragt mich nicht wofür GCS steht.
Google Cloud Storage wahrscheinlich.
So Bucket.
Und jetzt kann man.
Um das noch besser zu strukturieren.
Kann man ihm noch sagen.
Dass er einen Prefix angeben soll.
Ein Prefix ist quasi ein Ordner.
Da kann man jetzt entweder sowas machen.
Wie Terraform State.
Oder man könnte sowas machen wie Terraform Dev State.
Wenn man mehrere Environments hat.
Wir machen einfach mal nur Terraform State.
Und applyen das mal.
Und gucken ob das alles funktioniert.
Wie gesagt es passiert noch nichts.
Weil wir haben noch gar keine Ressourcen definiert.
Aber wir gucken mal.
Also init.
Erstmal.
Apply.
Hat applied.
Hat funktioniert. Nice.
Das heißt wir sollten jetzt in diesen Tools.
Falls Terraform schon was reingeschrieben hat.
Einen Terraform Ordner haben.
Mit unserem State drinne.
Und jetzt brauchen wir die Buckets nicht mehr.
Hat sich erledigt.
Warum ich das nicht von AI generieren lassen.
Weil mein Chat.
Mein Chat ist einfach mehr Fifed als AI.
Ich mach Chat Driven Development.
Das hat bessere Ergebnisse als Chat GPT.
Gut.
Und jetzt können wir anfangen unsere Ressourcen anzulegen.
Das erste was wir anlegen müssen.
Damit wir unser Google Projekt ordentlich konfigurieren können.
Ist.
Also aktuell sieht man noch nichts.
Und zur Zeit ist noch nichts passiert.
Er hat nichts angelegt.
Er hat im Prinzip einfach nur sein State Initial einmal gesynkt.
So das erste was wir brauchen ist.
Ein Netzwerk.
So.
1-VPC.Terraform
Es heißt VPC.
Virtual Private Connection oder Cloud.
Weiß gar nicht wofür das steht.
Es ist im Prinzip ein Netzwerk.
Virtual Private Cloud.
So rum.
Da kann man Netzwerke angeben.
Was man anlegen möchte in der Google Cloud.
Es gibt eine Sache.
Die copy paste ich mir jetzt mal.
Die habe ich straight geklaut.
Aus dem Tutorial Video.
Was ich heute geguckt habe.
Wie gesagt habe ich das Video ja gezeigt.
Könnt ihr euch auch mal angucken.
Und zwar.
Wenn man ein neues Projekt anlegt.
Muss man ja erstmal.
Alle APIs aktivieren.
Zum Beispiel wenn ich jetzt aktuell hier reingehe.
Und sage Compute Engine 4M Instances.
Sagt er mir.
Ja ne.
Nichts 4M Instances.
Ist nichts mit 4Ms.
Du musst erstmal die Storage.
Die Compute Engine API aktivieren.
Kennt jemand eine gute.
Dark Reader Alternative.
Ist richtig mies.
Ähm.
Firefox Allow.
Add-on on Themes.
Ne das brauche ich ja nicht.
Ne Chrome hat das auch nur.
Für Webseiten die das unterstützen.
Haben wir hier.
Ah super.
Dark Reader hat auch verschiedene Modi.
Ok welchen Modi soll ich verwenden.
Das meine Google Cloud Seite nicht immer abscheißt.
Was in Chrome.
Ok.
Ich bin jetzt zwar nicht eingeloggt. Aber sagt mal.
Wo.
Wo kann man hier in Chrome.
Geh mal auf den Reiter More.
Hier.
Und dann.
Auto Dark Mode for Web Content.
Moment warum ist denn das hier Dark.
Überhaupt gerade schon.
Ah weil ich auch einen Dark Reader anhabe.
Dark Mode.
Enable.
Relaunch.
Ach geht das jetzt.
Ja dann machen wir das.
Dann machen wir das doch einfach in Chrome.
Warum kann das.
Warum kann das Chrome.
Und warum kann das Firefox nicht.
Warum kann das nur Chrome.
Was ist das.
Was ist das.
Was ist da los.
Ist besser.
Ok nice.
Ja dann machen wir das doch so.
Dann haben wir überhaupt keine Probleme mehr.
Also wo bin ich stehen geblieben.
Manche Sachen seht ihr ja hier.
Muss man erst aktivieren.
Das sind ja nur Sternchen was man eingibt.
Und wenn ja was ich geleakt habe.
Was habe ich eingetippt.
Was habe ich eingetippt.
So also.
Wenn man ein Projekt neu anlegt.
Das ist eine Playlist hier.
2015.
Epic Chillstep Collection.
Wurst 1 2 3 scheiße liegt.
Wenn man ein neues Projekt anlegt.
Dann sind ja manche Sachen nicht aktiviert.
So und das habe ich ja direkt straight aus dem Tutorial Video gerippt.
Man kann die Dinger so einschalten.
Das heißt.
Wenn ich jetzt mein Terraform State applye.
Dann schaltet das erstmal die APIs ein.
Was man machen muss.
In dem neu angelegten Projekt.
Bevor man eben diese APIs verwenden kann.
Ist eigentlich logisch.
Warum wir das hier rein machen.
Vielleicht sollten wir das ja auch hier gar nicht rein machen.
Sondern eigentlich.
Gehört das doch eher noch in Provider oder.
APIs einschalten.
Würde ich mal sagen.
So also.
Jetzt legen wir ein Netzwerk an in der Google Cloud.
Ist auch nicht sonderlich kompliziert.
Wir müssen sagen.
Google Compute Network.
Man darf kein Enter drücken.
Weil Visual Studio Code wieder rumbuckt.
Jetzt kann man so ein Name ausdenken.
Dafür.
Wie nennen wir unser Netzwerk.
Default ist übrigens schon belegt.
Man kann sein Netzwerk nicht Default nennen.
Wir können es.
Global oder so.
Keckel Network.
Beste.
So.
Da kann man dann so Sachen angeben.
Wie zum Beispiel Name.
Was man nicht wirklich angeben muss an der Stelle.
Glaube ich das nicht das Pflichtigste.
So.
Jetzt wird es ein bisschen spannender.
Was man für sein Netzwerk angeben kann.
Routing Mode.
Regional.
Also wir brauchen das.
Wir brauchen das nicht irgendwie.
Sonst wo.
Ich will nicht von Europa in die USA.
Oder sonst was mit dem Netzwerk.
Wenn ich jetzt die Region ausnutze.
Dann wäre das so schon mal ganz sinnvoll.
Routing Mode Regional.
Dann wollen wir Auto Create Subnets.
Das soll auf False gehen.
Also sprich.
Ich will alle Subnetze auch gefälligst von Hand anlegen.
Und dann kann man sagen.
Delete.
Delete Default Roots on Create.
Und das machen wir auch False.
Weil.
Das ist tatsächlich eine wichtige Geschichte.
Kann man Terraform auch lokal ausprobieren.
Zum Lernen.
Ja.
Aber es bietet sich an.
Sich einen Test Cloud Account zu machen.
Um da ein bisschen rumzubasteln.
Ich meine.
Das ist ja lokal bei mir hier.
Ich professioniere halt Cloud Sachen.
Du kannst auch KVM und sowas professionieren.
Aber.
So wirklich cool ist Terraform eigentlich nur für Cloud Anbieter.
Das heißt.
Du kannst dir irgendeinen Probe Account machen.
Bei irgendeinem Cloud Anbieter.
Und damit rumspielen.
Das heißt.
Du kannst dir drei Kursen empfehlen.
Weil man da eben mehr Möglichkeiten hat.
Weil die mehr anbieten.
Da kann man auch beispielsweise mal Managed Datenbank drüber anlegen.
Und solche Geschichten.
So.
Aber das hier ist wichtig.
Das würde ich tatsächlich auf False setzen.
Denn.
Sonst löscht er die Route.
Womit man ins Internet kommt.
Also das Netzwerk hat nach dem Erstellen.
Eine Default Route.
Packages.
Package Updates.
Und.
Naja.
Die will ich ja nicht löschen.
Die soll ja gefällig da bleiben.
So.
Und jetzt können wir noch was machen.
Das ist auch übrigens straight aus dem Tutorial Video gerippt.
Depends on.
Ich vermute mal das man das nicht braucht.
Aber er hat das trotzdem gemacht.
Und ich mach das jetzt an der Stelle auch.
Weil.
Das kann nur einmal Autocomplete.
Und so Container.
So.
Das soll er erst machen.
Nachdem die ganzen APIs aktiviert wurden.
Da wäre ich ohne das Tutorial Video gar nicht drauf gekommen.
Also das ist auch schon mal sinnvoll so.
Also.
Depends on.
Dass er das erst macht.
Nachdem das hier durch ist.
Danach müssen wir uns um Abhängigkeiten und so erstmal keine Gedanken machen.
So was er jetzt macht ist.
Er erstellt ein Netzwerk.
So ziemlich alles fehlt.
Was ein Netzwerk ausmacht.
Zum Beispiel IPs.
Subnetze.
Gateways und sowas in der Richtung.
Das gibt man an der Stelle noch gar nicht an.
Das ist quasi nur der Container.
Für weitere Netzwerke.
Den man hier anlegt.
Wenn man jetzt wirklich richtige Netze anlegen will.
Dann macht man das.
Mit Subnetz.
Also legen wir eine neue Datei an.
New File 2.
Subnet.
.tf
Und da gibt man jetzt ein.
Jetzt wollen wir kein Google Compute Network haben.
Jetzt wollen wir ein Google Compute.
Subnet haben.
Alter.
Wie das nicht funktioniert mit dem Enter drücken.
So und das kriegt den Namen.
Brauchen wir doch mal.
Das schwierigste sind Dinger zu benamen.
Muss man eine Kreditkarte hinterlegen.
Für einen Free Account.
Ja musst du.
Aber der Free Account.
Der ist hart gecapt.
Auf 300 Dollar.
Und du musst explizit es danach aktivieren.
Das Abbuchung startet.
Wie gesagt es macht keinen großen Unterschied.
Wo das ausbricht.
Ich glaube Google hat 300 Dollar.
Gratis.
Pro Trial.
Ich glaube Azure hat 200 Euro.
Gratis Trial.
Und ich weiß nicht was AWS hat.
Wir brauchen einen guten Namen für das Netz.
Ähm.
Global genannt.
Internal.
Ja.
Mir fällt gerade nichts anderes ein.
So. Internal.
Global und Internal.
Die Bezeichnung ist eigentlich ziemlich.
Ziemlich pepega von mir.
Gerade kann sich keiner was darunter vorstellen.
Und da muss man jetzt Sachen angeben.
Wie zum Beispiel.
Subnet Ranges und sowas.
Also kann man dem Ding nochmal einen Namen geben.
Internal Network.
Internal soll das ganze Ding heißen.
Und jetzt muss man angeben.
Eine IP Sidder Range.
Chat. Wer hat in der Berufsschule aufgepasst?
Für was steht das ganze?
Nicht googeln.
Wer weiß es.
Classless.
Classless.
Einmal please vervollständigen Chat.
Classless Inter Domain Routing.
Excellent.
Feifert.
Habt ihr gegoogelt oder habt ihr es gewusst?
Seid mal ehrlich.
Jetzt sind sie alle ruhig.
Ihr habt alle gegoogelt.
Exposed.
Exposed.
CCNA.
Ja gut dann weißt du das.
Classless Inter Domain Routing.
Und da gibt man jetzt so die altbekannten Dinge an.
Zum Beispiel 10.10.0
Slash 24.
Zum Beispiel.
Man könnte auch Slash 8 oder irgendwie sowas angeben.
Aber Slash 24.
Slash 24 sollte uns an der Stelle erstmal ausreichen.
Jetzt geben wir eine Region an.
Und an der Stelle.
Geben wir jetzt auch wirklich eine Region an.
Denn das Netzwerk ist regionübergreifend.
Also alle
Zonen in dieser Region funktionieren mit diesem Netzwerk.
Wir geben eine Region an.
Dann muss man noch ein übergeordnetes
quasi Netzwerk
Container oder wie auch immer man es nennen soll.
Also das hier was wir hier angelegt haben.
Angeben.
Und das kann man jetzt referenzieren an der Stelle.
Und zwar kann man jetzt sagen Google
Compute Network Global.
Das ist das was wir vorher angelegt haben.
Das bietet er mir in der Autovervollständigung schon an.
Dann kann man noch angeben.
Kann ich übrigens auch mal.
Ich glaube hier muss man noch ID machen.
ID oder
Self.
Ich bin mir nicht ganz sicher ob es so auch funktioniert.
Das ist nämlich auch so eine Feinheit.
Die ich heute gelernt habe.
Jedes oder das meiste dieser
Google Cloud Ressourcen.
Die haben ein Attribut.
Das nennt sich Self Link.
Und die können bei anderen Ressourcen hinzufügen.
Das automatisch Abhängigkeiten
definiert werden.
Also sprich wenn ich das hier hinzufüge.
Das bedeutet das Terraform weiß.
Das hier muss zuerst angelegt werden.
Bevor das hier angelegt wird.
Und das geht mit
dieser Self Link Geschichte.
Mal gucken ob das an der Stelle auch
funktioniert.
Ok dann müssen wir noch folgendes angeben.
Private IP Access gleich.
True.
Man kann übrigens hovern.
Und dann gibt es Hilfe angezeigt.
Ja wollen wir.
Wir wollen von der Google APIs.
Wir wollen ja von VMs beispielsweise
unser Kubernetes Cluster drauf kommen.
Und jetzt was was ich so ohne das Tutorial
was ich geguckt hätte im Leben nicht
rausgefunden hätte.
Wie gesagt ich rede von diesem.
Ich habe mir dieses Tutorial Video
heute Mittag angeguckt.
Das hier vom Anton.
Er hat es wirklich gut erklärt.
Sonst hätte ich das jetzt an der Stelle
beispielsweise gar nicht gecheckt.
Das man das machen muss.
Und zwar ist es jetzt so.
Wir applyen das mal.
Ich zeige euch jetzt erstmal.
Sehr gute Tutorials.
Oh ne Leute.
Fuck Alter ich kriege jetzt gerade wieder Bauchweh.
Da habe ich jetzt ja gar keinen Bock drauf.
Ich habe heute Abend noch 2 Stück Pizza gefuttert.
Nicht schon wieder Stream wo ich kacken gehen muss
zwischendurch.
Ich will euch mal die Vorzüge von Terraform zeigen.
Also apply.
Terraform apply.
Jetzt sagt er mir okay.
Was würde er anlegen.
Er legt
ein Compute Network an.
Er legt ein Subnet an mit dieser
IP Range und überhaupt passt.
Jetzt kann ich sagen. Yes. Jawoll.
Legt den Shit an und gut ist.
Mach ich jetzt.
Und das dauert jetzt kurz.
Das dauert jetzt kurz.
So ein paar Sekunden.
So 20-30 Sekunden oder so.
Oh Leute ich habe Bauchweh.
Fuck man von 2 Stück Pizza.
Kann doch gar nicht sein Alter.
Deswegen gehe ich in Frankfurt auch nichts mehr essen.
Weil ich habe übelste.
Ich vertrage vieles nicht mehr.
Ich muss mal kurz aufs Klo.
Fuck.
So Leute.
Wir müssen morgen weiter machen.
Zum Glück haben wir noch gar nicht richtig angefangen.
Ich werde wahrscheinlich morgen Mittag.
Wenn wir das ganze fertig machen.
Ja.
Wir sehen uns bis dann.
