Jetzt stell dir vor, du hast, was, Moment, das muss ich mal, was, und jetzt stell dir vor, du hast den BWL-Unterricht nicht, weil keine Lehrer da sind, musst es im November zur Abschlussprüfung, aber wer, ja, das ist, was in der Abschlussprüfung an BWL drankommt, ist easy, easy as fuck hier, so ist das.
Easy as fuck, easy, easy as fuck.
Das ist irgendein Erotik-Unternehmen in Frankfurt, die haben, ähm, so Webcam-Porn-Seiten und, und, äh, ähm, Hotelverm, äh, Zimmervermietung und, äh, frag mich nicht, was die alles haben.
Übelster Kackladen, also, also, geil, also, der echte Proxy, geil mag das sein, allerdings nicht dort zu arbeiten.
Also, was die erzählt hat in der Berufsschule, muss das wirklich der allergrößte Mistladen sein.
Ja.
Ne, ne, das muss übelst ausbrechen.
Das muss ein Ausbeutungsladen sein, wo keiner gerne arbeitet.
Also, das, äh, geht da auf gar keinen Fall hin, ich hab da nur Schlechtes gehört, also, ich kenn einen, der hat da eine Praktikierung gemacht, der fand's grausam, ich kenn einen aus der Berufsschule, der fand's grausam, und mein jetziger Azubi, oder unser jetziger Azubi, der hat auch zwei Leute in der Berufsschule, die dort arbeiten, die finden's auch übelst kacke.
Also, kann einfach nur Müll sein, ja.
Ist das nicht voll spannend?
Ich glaube nicht, dass du für solche Sachen dort zuständig bist, was du dir so vorstellst, sondern für ganz normales IT-Zeug nur...
Dass dir halt die Arbeit, dass sich die Arbeit abfuckt.
Und die Leute, und dein Chef, und alles.
Also, was man da so hört, ist grausam.
Also, hier würde ich auf gar keinen Fall hingehen.
Wir können ja mal suchen.
Wir können ja mal gucken.
Wir können ja mal gucken, was die sagen.
Wir können ja mal gucken, was die sagen.
Also, was schreiben die denn?
Wie gesagt, geht da nicht hin.
Ähm, ich hab nur Schlechtes gehört über den Laden bisher.
Ausnahmslos nur Schlechtes.
Nichts, nirgends wo war's Gutes.
Äh, wie steht da nicht der Name?
Der Name von denen dabei?
Was schreiben die denn hier?
Für unseren Standort suchen wir für 2020 Auszubildende.
Naja.
Als Full-Surface.
Full-Surface.
Okay, das ist bei einem Erotik-Laden jetzt die Frage, was die darunter verstehen, ja?
Au, der Tainzer geht wieder ab hier.
Fünf Stufe-1-Abos hat er verschenkt.
Der Chat, der Kopf explodiert, Leute, im Chat.
Ähm, wer hat denn, wer hat denn was gekriegt?
Prali99, Gpat1HD, Solea von Astora.
Das hört sich irgendwie so...
Der Name, ich weiß nicht...
So...
Solea von Astora, das hört sich irgendwie so griechisch, griechisch-philosophisch-Big-Brain-mäßig an.
Ja, also, exzellent hört sich das an.
Aber da bist du ja hier, richtig.
Der Crazy, Emoikal und Foxditzen.
Nice.
Dankeschön für die Subs.
Also, was verstehen die da drunter?
Als Full-Surface-Werbe- und Medienagentur mit Stahl...
Full-Surface, okay, das...
Wenn man weiß, was der Laden macht, dann...
Stellst du irgendwie Full-Surface irgendwie ein bisschen anders dar.
Ja.
Ähm.
Ich muss halt kurz schnell schauen.
Oh, der Scam-Trend ist am Start.
Oh, Moment mal.
Leute, ich hab den Chat aus Versehen zugemacht.
Das geht ja nett.
Irgendwas übersehen?
Nee, der Michael50Billioner hat abonniert, das hab ich schon gesehen.
Vollkorn-Mischbrot hat auch sieben Monate abonniert.
Hab ich jetzt nicht...
Hab ich, weiß ich nicht, ob ich schon gesagt hab.
Dankeschön für das, für den Sub.
So, also.
Ähm, da bla bla bla.
Im Bereich Print- und Online-Medien.
Wie gesagt, das ist irgendwie so ein Erotik-Laden.
Wir entwickeln individuell bla bla bla bla bla bla bla bla.
Okay, da steht jetzt nichts Großartiges.
Ich weiß halt, dass der Laden, dass ich von keinem was Gutes bisher gehört habe.
Und dass das irgendein komischer Frankfurter Erotik-Laden ist.
Äh, alles, alles Müll.
So, Moment, jetzt hab ich ja aus Versehen zugemacht.
Was haben, gibt's denn ein paar gescheite Läden, die was haben?
Hab ich noch nie gehört.
Hab ich noch nie gehört.
Hab ich auch noch nicht gehört.
Äh, die ist irgendwo bei uns um die Ecke.
Ähm, keine Ahnung, ob das was taugt.
Wie wär's, wie wär's mal nach Entfernung zu sortieren?
Null.
Provadis.
Von denen hab ich schon mal was gehört.
Keine Ahnung.
Keine Ahnung.
Keine Ahnung, ob die was taugen.
Oh, bei der VFG.
Bei der VFG.
Oh, exzellent.
Das sind die, die, die, äh, U-Bahn und Straßenbahn in Frankfurt macht.
Gibt's da nicht so, äh, ja, ja, wie heißt das?
Kununu oder so, ne?
RTO.
Okay, da gibt's, da gibt's ein paar.
Die scheinen da richtig gut zu sein.
Weiterempfehlung, 28%.
Oh, äh, okay, okay, bla bla bla.
Ah, das...
Ah, die sind ja gar nicht so...
Ah, hier.
Der hat, der war hier wenigstens wirklich am Start.
Flexibel.
Schlecht, Respekt, weniger, schlechter.
Also, das deckt sich exakt mit dem, was ich von den Leuten gehört hab, die dort, die dort, die dort arbeiten.
Äh, mach bitte Position aus, super.
Wo geht denn das?
Hier?
Okay.
Ja, die meisten, der findet's übel schlecht.
Aber, ich sag mal, es wäre schlecht.
Also, wie gesagt, ich hab nichts Gutes bisher davon gehört, ja?
Alle, allen, mit denen ich Kontakt hatte, die da gearbeitet haben, fanden's richtig mies.
Also, wenn das schon das einzige Gute ist, Gehalt kommt pünktlich an.
Das ist halt wirklich das Mindeste, ne?
Schlecht finde ich, kann ich gar nicht alles aufzählen.
Am besten alles ändern, was geht, okay.
Die Arbeitsatmosphäre ist...
Ja, das haben auch alle gesagt, die ich, äh, kenne, die dort gearbeitet haben.
Inoffiziell zu spielen.
Ja, das ist, das geht...
Das ist auch teilweise schlimm in manchen Läden.
So dieses, offiziell ist es so und so, weil wir uns nicht angesetzliche Vorgaben halten, aber in dir, inoffiziell wird erwartet, dass bla bla bla.
Äh.
Wir sind ja nicht in Japan, wo du nicht vom Chef aus dem Büro gehen darfst.
Wobei ich keine Ahnung hab, ob das wirklich so ist, ne?
Ich sag, ich, das...
Wird immer so gesagt, keine Ahnung, ob das stimmt.
Nicht alles ist schlecht, dafür aber sehr vieles.
Was ein Punkt wäre, zum Beispiel, dass man sich einmal im Mund über ein Ticket an unseren Vorgesetzten wenden kann und...
Diesem dann die aktuellen Probleme melden kann.
Moment, Moment.
Du kannst, du musst ein Ticket bei deinem Chef aufmachen, dass du mit ihm über aktuelle Probleme reden darfst?
Das ist gut?
Was?
Ich weiß es nicht.
Ich weiß es nicht.
Eigentlich sollte man bei seinen, bei Problemen, äh, wenn der jetzt grad im Haus ist oder nicht grad irgendwie jederzeit zu seinem Chef gehen können.
Was ist das für ein Pluspunkt, Alter?
Hier sind fast alle, mach keine Lust, bla bla.
Okay.
Bla bla bla bla.
Bla bla bla.
Bla bla bla.
Bla bla bla.
Bla bla bla.
Bla bla bla.
Bla bla bla.
Bla bla bla.
Bla bla bla.
Bla bla bla.
Bla bla bla.
Bla bla bla.
Bla bla bla.
Bla bla bla.
Bla bla bla.
Bla bla bla.
Bla bla bla.
Bla bla bla.
Bla bla bla.
Bla bla bla.
Github-Issue aufmachen, genau, erstklassig Arbeitgeber zu sein.
Also, wie gesagt, geht da nicht hin.
Äh, VFG ist wahrscheinlich gar nicht, äh, VGF ist wahrscheinlich gar nicht so übel.
Die haben, die machen hier aber auch gar keine, die fackeln aber auch nicht lange hier, ne?
Die fackeln auch nicht lange.
Gewünschte Vorqualifikation, Office.
Okay, erweiterte Fremdsprachenkenntnisse.
Kein Problem.
Ich hab mir die Rede vom Oettinger angehört.
Ich kann jetzt sagen, we are all sitting in one boat.
Das reicht.
Genug Folgen.
Genug Fremdsprachenkenntnisse.
Oh, die Bahn.
Die Bahn sucht auch Leute.
Die haben mich sogar mal eingeladen.
Aber ich hab mich nie wieder gemeldet.
Also, nicht, äh, nicht, nicht, nicht, nicht zur Ausbildung eingeladen, ne?
Also, so eingeladen.
Und ich bin da nie hin.
Hab mich nie gemeldet.
Okay, Stadt Frankfurt am Main.
Nope.
Okay.
Die Messe sucht auch Leute.
Zumindest anscheinend gibt's da wirklich genug.
Ich wollte mir jetzt gar nicht die Fachinformatikerausbildung angucken, so wirklich.
Ich weiß nicht, wie ich da, wie ich, wie ich da, ah, ah, ah, C++, ah, ah, C, Moment.
Ich guck mir lieber die Fachinformatikerausbildung an, bevor ich mir irgendwas angucke, was mit C++ zu tun hat.
Das müssen wir uns jetzt gleich schon oft genug angucken.
Ähm, ihr seht's ja oben rechts wieder, ne?
Ihr seht's ja hier, da.
Ah, ja, ja, Display ist am Start.
Wegen dem, wegen dem DB-Video.
Äh, wahrscheinlich wegen dem Video und wahrscheinlich, weil ich immer so übelst rumflame auf Twitter.
Ähm, da hat mich einer eingeladen, ob ich nicht mal meine Kritikpunkte da irgendwie, da irgendwie, ob ich da mal irgendwie dran bitte.
Ach, keine Ahnung, frag mich nicht.
Die haben so einen Turm, so ein Innovationsgebäude irgendwie in Frankfurt und so.
Nee.
C++ hat einen Options-Type.
Ja, ich hab mich notgedrungen die letzten Tage ein bisschen, ein bisschen mehr noch mit C++ beschäftigt.
Und C++ hat tatsächlich relativ vieles, wo man gar nicht denkt, dass es das hat.
Aber es ist übelst, also es ist nicht.
Übelst, es ist mega beschissen integriert zum größten Teil.
Und, also richtig beschissen zum größten Teil.
Ich krieg's Anfälle.
Was ich auch, das ist auch so ein Ding, was ich C++ nicht verstehe, ist, die haben, für vieles haben die, äh, äh, Typensträhne.
Ja, zum Beispiel, dass man nicht mehr mit irgendwelchen RAW-Pointern rumhantieren muss, haben die sowas hier drin.
Wär ja wunderbar, aber dann haben die, anstatt ordentlicher Constructor für diese Klassen, haben die dann sowas drin.
Hä?
Warum machen wir, und, und, allein schon, wer, wer, der noch irgendwie bei Verstand ist, ja, erkennt denn jetzt auf den ersten Blick, aus dieser Typdefinition, was man da für Argumente reinstecken darf, oder?
Was, was ist das hier?
Ich mein, ich erkenn's mittlerweile, ja.
Das hier ist, das ist Template-Parameter 1, das ist Template-Parameter 2, und davon kannst du so viel, wie du willst, angeben.
Aber kann man den Scheiß nicht mal ordentlich benennen?
Ich mein, so schwer kann das doch nicht sein.
Den Kram mal irgendwie den Namen zu geben, wo man was mit anfangen kann.
Aber es ist halt, es ist halt echt, echt grausam.
Also, ich werd euch mal kurz sagen, was wir heute vorhaben.
Ich weiß nicht genau, wie weit wir kommen, und ich weiß auch gar nicht, ob's genau, ob's klappt.
Ich hab im Vorfeld, also, auch wenn ich jetzt ein bisschen ahnungslos tu, äh, dem Entertainment-Faktor, äh, zuliebe, ja, ich hab mir das im Vorfeld schon ein bisschen angeguckt.
Wieso ist es erst 13.30 Uhr?
Du meinst auf, ist es da echt nur 13.30 Uhr erst?
Ah, weil die Zeitzone nicht stimmt.
Die Zeitzone stimmt nicht.
Wahrscheinlich hab ich die falsche Zeitzone angegeben.
In meinem, ajaja, NTP-Gedöns.
Wahrscheinlich ist es die falsche Zeitzone.
Kann man gleich mal gucken. Ich denk, ich denk mal, es ist die falsche Zeitzone.
Ja.
Äh, NTP.
Ist das die, das ist nicht die richtige Zeitzone, oder?
CET-1, CST-2?
CET-2?
Das ist, das ist nicht die richtige, oder?
Was haben wir denn jetzt gerade?
Wir haben Plus, wir sind, äh, wir sind, ähm, CET-Plus-1 und im Sommer Plus-2, oder wie, ne, wie sind wir?
Sommer, Summertime ist Plus-2 und Winterzeit ist Plus-1, oder?
Gut. Upload.
Gucken wir mal, ob es jetzt stimmt.
Machen wir das gleich mal richtig.
Nicht, dass uns, nicht, dass die Uhrzeit jetzt irgendwie uns was bringen wird, ne.
Schauen wir mal, ob das jetzt richtig ist.
Oh.
Ja, huge, massive Upload-Speed.
Zum Glück müssen wir für die meisten Sachen gar nicht direkt uploaden, sondern können vieles runterprogrammieren, ohne dass wir das, äh, uploaden müssen.
Wir müssen bloß ab und zu mal uploaden, zwischendurch, um zu gucken.
Excellent.
Eine IP haben wir gekriegt.
Und, stimmt's?
Ich seh's in der Vorschau nicht.
Äh, okay, NTP hat sich noch nix geholt.
Also, der, der muss erst mal zum NTP sich ne Zeit holen.
Ja, 70.
Wer, BigBrainChat, warum ist das erst der erste, 1970?
70?
Ich weiß, der Chat ist...
BigBrain, der weiß das.
Oder warum war das?
Unix-Time, richtig.
Erst der erste, 1970, ist, äh, geht die Unix-Zeitrechnung los.
Und nachdem sehr viele Netzwerksachen irgendwelche Unix-Forks sind, also auch, auch, ähm, Dings, Windows hat auch sau viel von BSD übernommen.
Deswegen ist das, äh, unter vielen Betriebssystemen so.
Aber jetzt hat er sich per NTP Zeit geholt.
Und jetzt haben wir auch, äh, 13.33.
Ja!
Gut!
Gut!
Hat nicht so ganz funktioniert, würd ich sagen.
Hat nicht so ganz funktioniert.
Ähm, okay, wir ignorieren das mal.
Ich lass das mal hier stehen.
Wir ignorieren das.
Keine Ahnung.
Ich geb mal die Build-Time aus, ob der jetzt auch wirklich alles, alles abgeloadet und gepusht hat.
Nicht, dass der jetzt vielleicht kaputt ist oder so.
Ich, ich mag...
Man weiß ja nicht, ne.
Aber das ist eigentlich falsch, ne.
Minus 1.
Was auch immer.
So.
Das ist eigentlich nicht, was wir heute machen wollen.
Also, die Uhrzeit von diesem Display ist eigentlich erst mal vollkommen egal.
Heute machen wir was, äh, relativ kompliziertes.
Was haben wir für eine Build-Time?
15.84.
Das ist eigentlich recht korrekt.
Aber auf dem Display stimmt's nicht.
Ja gut, das ist ja auch statisch.
Also, ihr werdet vielleicht feststellen, im Vergleich zum letzten Projekt.
Das letzte Projekt war ja, was wir hatten.
Dass, ähm, das Display funktioniert und dass man ein Firmware-Update übers WLAN machen kann.
Das Gerät oben.
15.84, äh, 15.34 hab ich 84 gesagt.
Aber man darf da nicht so genau hinhören, was ich immer erzähle.
So, ähm, im Vergleich zum letzten Projekt, seht ihr, sieht das ein bissl anders aus heute.
Äh, ich hab die, ich hab ein paar Sachen hier oben nach, nach Lips geschoben.
Und es ist kein Arduino-Projekt mehr.
Es ist, äh, ich kauf's in der Playstation 5 wahrscheinlich erst mal nicht, ne.
Hat das Display Touch?
Ne.
Aber es hat zwei Knöpfe.
Es hat links und rechts zwei Knöpfe.
Die kann man verwenden.
Ich kann, ich will jetzt nicht aufstehen und das reinschieben.
Ich zeige euch mal ein Bild davon.
Das hat zwei Knöpfe, die man, äh, programmieren kann, was die machen sollen.
Aber es ist kein Touch.
Das hast du ja auch gemacht, das ist klein.
Das ist ein 1, frag mich, 1,6 Zoll oder irgendwas.
Ne, 1,14 Zoll Display.
Was willst du denn da touchen?
Brauchst du, brauchst du, äh, erst mal, musst du erst mal deinen Finger irgendwie in die Presse stecken, dass er so klein wird, dass du ihn da touchen kannst drauf.
Link?
Äh, hier, hier.
TT Go T-Display heißt das Ding.
Das, was für ein Display da drauf ist, da ist ein IPS ST7789V drauf.
Oder irgendein Stylus benutzen.
Aber Touch ist da drauf nicht so sinnvoll.
Kriegst du da auf Doom zum Laufen?
Ganz ehrlich, keine Ahnung, ob irgendjemand schon versucht hat, Doom auf dem ESP32 zu portieren.
Anscheinend.
Anscheinend.
Geht euch YouTube auch so auf den Sack in letzter Zeit mit diesem Popup?
Das kam nie.
Das kam nie.
Das kommt, seit einer Woche kommt das.
Das ist so nervig.
Ich frag mich, wann die ganzen Popup-Blocker das endlich hinkriegen.
Das muss weg.
Das nervt.
Das ist wirklich extrem, massiv nervig.
YouTube Wide Seam, oh je, nee, das geht ja nicht.
Äh, warte mal, wo stellt man das überhaupt um?
Hier, da.
Dark Seam.
Excellent.
Ähm, ich hab, äh, Lenszeros schreibt, ich hab keine Ahnung vom Programmieren, geschweige denn von dem, was abgeht.
Aber ich höre trotzdem zu, nur wegen Max.
Das ist schön, vielleicht ist ja trotzdem was für dich bei.
Heute, heute ist ein bisschen komplizierter.
Ähm, genau, also anscheinend sind schon Leute auf die Idee gekommen und haben Doom laufen lassen auf nem ESP32.
Also ja, das scheint zu gehen.
Sieht, sieht ein bisschen abenteuerlich aus, aber ja, es scheint zu funktionieren.
Mein Doom läuft ja nun mittlerweile echt überall drauf.
Auf, auf Druckern.
Wahrscheinlich läuft das sogar, wenn ich ein Display anschließen könnte auf meinem Klo.
Ähm, hsjohi, neun Monate.
Dankeschön für den Sub.
Soosmyname sagt, so ein Russe, also du meinst so ein Kekomrit, ähm, hat auch mal alte RAM-DIMMs an nem Arduino angeschlossener Linux mit Bash über ein paar Stunden geboot.
Tja, also, es gibt ja, es gibt ja nen x86-Arduino, wo man Linux drauflaufen lassen kann.
Hast du noch Kontakt mit dem Friseur?
Ja, klar, ab und zu.
Und wenn du jetzt fragst, mit dem Kambum?
Ja, mit dem Kambum auch.
Mit dem war ich vor drei Wochen oder so Sushi futtern in Frankfurt.
So, also, was wir heute machen ist, als erstes muss ich mal sagen, das Projekt sieht ein bisschen anders aus.
Äh, Doom auf dem Schwangerschaftsset, das hab ich noch nicht gesehen, aber ich hab gelesen, dass es das gibt.
Ähm, das Projekt sieht ein bisschen anders aus und zwar, ich hab, ich hab geupdatet.
Erstens ist das Platform IO5.0 jetzt, also das allerneueste, was es gibt.
Und das ist kein normales Arduino-Projekt mehr.
Ja.
Das ist ein, ähm, ich kanns mal zeigen.
Das ist ein, äh, ESP-IDF-Projekt mit Arduino als Modul.
Das hat ein paar Vorteile, zum Beispiel, dass die Tools neuer sind.
Dass man C++17 verwenden kann, ohne dass man sich ein Bein ausreißen muss.
Und auch die eingebauten Libraries sind ein bisschen neuer.
Das ist ganz, das ist ganz praktisch.
Das Schöne an Platform IO ist ja, man kann den ganzen Kram so, so konfigurieren über den, über dieses INI-File.
Warum auch immer es jetzt nicht unbedingt ein INI-File sein musste, weiß ich auch nicht.
Ähm, und dann läuft das auch.
So.
Und ich hab noch was.
Ich hab ein Custom-Bild-Script, was läuft, wenn man, wenn man ein Bild macht.
Und zwar, was das Custom-Bild-Script macht, ist, ich zeig's euch mal.
Moment, wo ist es?
Hier.
Äh, ob man sowas wie imGUI zum Laufen bekommt.
Da weiß ich nicht, was es unten drunter macht.
Kann, kann ich mir durchaus vorstellen.
Es gibt ja ein paar Grafik-Libraries für den ESP32.
Weiß ich.
Also, das ist wahrscheinlich gar nicht so weit weg von.
So.
Das Version-File schreibt nämlich einfach Bild-Number.
Wir sind grad bei, ich hab das aus einem anderen Projekt kopiert, ja.
Wir sind grad bei Compile, äh, Bild-Vorgang 1898.
Und da schreibt ihr auch die Zeit rein.
Das ist ganz nützlich.
Da kann ich mir unten nämlich ausgeben lassen, sprich, welche Version das ist und wann ich das Ganze gebaut hab.
Da weiß ich, wie aktuell die Kisten ungefähr sind.
Und das ist so ein Mini, ein Mini-Python-Script, was das macht.
Das zählt einfach den ganzen Kram hoch pro, geh fort, dafür brauch ich keine Extension, äh, pro Compile-Folge.
Also sprich, wenn ich jetzt Bild mache, dann, dann werdet ihr gleich sehen, dann ist es dann eine Versionsnummer höher.
Das ist zum Debuggen wirklich nützlich.
So, guckt jetzt, es ist 1899.
Wir sind, wenn wir noch ein bisschen machen, sind wir bei der aktuellen Windows-Version angekommen heute irgendwann noch.
So, ich hab jetzt übrigens, ich hab jetzt übrigens geupdatet.
So, ähm, genau.
Und das ist jetzt ein ESP-EDF-Projekt mit Arduino als Modul.
Das heißt, man kann da, ähm, ein paar Sachen mehr konfigurieren und hat neuere Tools und einen neueren C++-Standard.
Das ist ganz praktisch, ja.
So, soweit, so gut.
So, und was ich hier sonst noch drinnen liegen hab, ist eigentlich mehr oder weniger das.
Auch, ähm, das ist die, das ist das, die Display-Klasse, die wir das letzte Mal gebastelt haben, die oben, oben rechts jetzt hier, was ihr hier seht.
Auf dem Display das ganze Zeug anzeigt.
Dann hab ich paar, paar Helper-Sachen am Start zum Pfeileinlesen und sowas.
Ist mittlerweile, ist mittlerweile übelst lang.
Ich zeig's euch mal.
Guck mal hier.
Weil C++ halt nun mal so sackt, muss man halt viel Zeug selbst machen.
500 Zeilen Helper-Gedöns.
Guck mal, ein paar Dinger sind sogar so, sind sogar so, ähm, so ordentlich gemacht, dass ich sogar einen Kommentartext oben dran gemacht hab.
Ja, warum die Uhrzeit nicht stimmt, ist wirklich fraglich.
Weiß ich nicht, weiß ich nicht, warum die Uhrzeit nicht stimmt.
Ich würd eigentlich sagen, die Uhrzeit ist, ist, ist richtig eingestellt hier.
Also, das, das stimmt nicht, aber, hm.
Ja, und ich hab mich hier teilweise übelst ausgelassen, ne, mit, ähm, ach ja, übrigens, ich hab's, ich hab sogar was eingebaut, dass man, dass man pingen kann und sowas.
Das eigentlich, das ist wirklich ganz nützlich.
Also, wie gesagt, ich hab da ein paar Sachen selbst gebastelt, weil die mir halt einfach in C++ gefehlt haben, ja.
Zum Beispiel, dass man den internen Temperatursensor vom ESP verwenden kann.
Dass man einfach mal filtern kann.
Wieso CST-2, ich weiß, das ist verkehrt, aber auch wenn ich's ändere, ändert sich nix.
Ich bräuchte, warte mal, gibt's das nicht ne Seite, wo man CZ-Infos-Generator machen kann?
So, falls da irgendwie einer, Time Zone Generator, Time Zone String Generator, ich weiß nicht, wie der Kram richtig heißt.
Ne, ja, sowas hier brauch ich, ups.
Sowas hier brauch ich.
Da gibt es irgendwo Generator für und ich hab vergessen, wo.
Aus irgendeinem Generator hab ich mir mal diesen Date-Time-String hier auch rausgeholt.
Aber ich weiß beim besten Willen nicht, warum das jetzt hier nicht stimmt.
Also, ich mein, das ist falsch, aber wenn ich das update, stimmt's auch nicht, ne.
Wir hatten immer eben gemacht, plus 1 und plus 2 und dann hab ich wieder abgeloadet, aber da ging's auch nicht.
Ja, ähm, weil ich sagen wollte, ich hab mir da so ein paar Sachen eingebaut.
Zum Beispiel, dass man nen Container filtern kann, ob's Elemente hat, ob's Elemente hat, die auf was matchen.
Ich hab mir im Prinzip, wenn man ehrlich ist, C++ ein bisschen mehr VC-Sharp gemacht.
Mit so ein paar Sachen, die hier drin sind.
Ja, dass du Arduino-String zu C++-String und C++-String zu Arduino-String machen kannst.
Ein paar kleine Sachen, nix großartiges, also man wird auch so alles verstehen.
So, was macht die Uhrzeit jetzt?
Ne, stimmt immer noch nicht.
Ich brauch so einen komischen Generator, TZ-Info.
Wie, wie, wie erstellt man sowas?
Kannst du auch to upper und to lower?
Ja, kann ich, kann ich.
Kann ich, pass mal auf, kann ich.
Hab ich extra eingebaut, weil mir das immer übelst auf den Sack geht, dass T++ sowas nicht hat.
Kann ich.
Hallo?
Äh, Autocompletion, please, come on, bra.
Also ja, hab ich.
Kann ich dir zeigen, da.
Da.
Kann ich, aber ich, warum mag denn der nicht?
Warum geht mein Autocomplete grad nicht?
Oh, plus plus.
Ah, jetzt geht's, jetzt geht's aus Gründen, die sich mir nicht erschließen, guck.
String to lower, String to, hab ich eingebaut, ja.
Kriegt übrigens C++ in 20, äh, in C++20 kriegt's das angeblich.
Äh, moin Max, wie ist deine Meinung zu den neuen Konsolen?
Konnte leider bei dem Chaos keine PS5 vorbestellen.
Würdest du die günstige Variante kaufen?
Ähm, ich lad mir den Kram eh nur noch runter, ich würd mir die ohne Laufwerk kaufen.
Aber ich hab's nicht, nicht verfolgt.
Und auch, ich hab mir auch den, die letzte, letzte Vorstellung nicht angeguckt.
Weiß ich gar nicht, keine Ahnung.
Tja, also falls irgendwie einer so nen Time Zone Generator, kann das sein, dass ich das gar nicht richtig setze?
Doch, tzinfo.
Für was ist die 1 da hinten dran?
Override.
Wie, wie generiert man sowas?
Da ist doch sowas hier.
Europe, Berlin.
Okay, ich hab's richtige, guck mal, ich hab's richtige.
CET-1, was auch immer.
Aber, äh, es funktioniert nicht.
Hab ich den richtigen NTP-Server?
Vielleicht, vielleicht hab ich den falschen NTP-Server gesetzt.
Also anscheinend muss man hier tatsächlich ein Minus dazwischen machen?
Ne, der NTP-Server stimmt.
Ne, der NTP-Server ist falsch!
Guck mal, was für ne IP hab ich?
Was, was, was für ne IP hab ich?
Aha, das ist der falsche NTP-Server.
Deswegen geht das nicht.
Der kommt nicht zum NTP-Server hin.
Würde ich mal vermuten.
Wobei, doch, der muss zum NTP-Server kommen.
Sonst hätte er die Zeit ja nicht abrufen können.
Naja, gut.
Ich kann ihn mal.
Ich weiß es gar nicht. Ist es 1.1?
Ich weiß gar nicht, was mein Gateway ist.
Probieren wir es mal so aus. Vielleicht geht die Zeit jetzt.
Aber, wir halten uns da nicht, nicht so...
Doch, wir sind GMT plus 2.
Aber, anscheinend gibt's hier keine Plusse, sondern nur Minusse.
Frag mich nicht.
Es ist aber auch wurscht. Das, das krieg ich easy gefixt.
Wir wollen heute nämlich was ganz anderes zu machen.
Schon so früh zuhause?
Nee, ich hab heute frei.
Morgen auch, übermorgen auch und am Montag auch.
Legion 14982 Monate.
Dankeschön.
Excellent Subscription.
Big Brain.
So, wie sieht's jetzt aus?
Nein.
1357.
Scheiß drauf.
Kein Bock.
Das machen wir jetzt nicht.
Wir lassen das jetzt so.
Ich mach da jetzt nichts, sonst brauch ich ewig, bis NTP geht.
Und in Wirklichkeit...
So, und in Wirklichkeit ist es sinnlos.
Wollen wir gar nicht machen.
Also.
Was wir heute machen ist folgendes.
Ähm.
So.
Ey.
Irgendwie Nase gelaufen grad.
Also.
Was wir heute machen ist folgendes.
Ähm.
Wir haben das letzte Mal programmiert, dass das Display funktioniert.
Und, dass man Firmware-Update hochladen kann hier dran.
Äh.
Ich weiß, dass das funktioniert.
Dass man, ähm.
Standard-Transformen und Gedöns machen kann.
Aber.
Ähm.
Mich nervt, dass das so kompliziert ist.
Deswegen hab ich wieder was eigenes gebastelt.
Ne.
Ich mein.
Man könnt.
In die Standard-String-Klasse sowas einbauen.
So ein paar Basic-Sachen.
Ja.
So.
To-Upper.
To-Lower.
Trim-Left.
Trim-Right.
Äh.
Replace.
Äh.
Und sonst was.
Teilweise haben sie es drin.
Ich hol mir ne 3090.
Ja.
Sobald es das gibt.
Also.
Das hier haben wir gebastelt, dass das hier funktioniert.
Das letzte Mal im Stream.
Äh.
So.
From scratch.
Ich hab jetzt das Projekt konvertiert von einem reinen Arduino-Projekt zu einem ESP-EDF
mit Arduino-Projekt.
Dass wir ein bisschen neuere Tools haben.
Und.
Ähm.
Eine Sache, die ja übelst nervig war, für mich auch, die letzten Streams, wo wir gebastelt
haben, ist, dass die ganzen Web-Server alle irgendwie sacken.
Also.
Ich möchte ja nen Web-Server haben, der HTTPS kann.
Für Firmware-Upload.
Ja.
Und.
Ähm.
Also.
Hauptsächlich weil's geht.
Ja.
Nicht weil ich denke, dass irgendwie einer meine Firmware mitschneidet oder so.
Was auch nicht schlimm wär.
Da gibt's ja eh nix kompliziertes, äh, nix tolles drin.
Ähm.
Aber ich.
Ich zeige euch einfach, wenn Firmware-Update über HTTPS ist.
Und außerdem lernt man da ein bisschen was bei.
Und eine Sache, die ich auch, äh, schon ne ganze Weile machen will, ist, dass man sich
Logs, die Logs hier unten, auch über ne HTTP-Verbindung schicken lassen kann.
So.
Und die ganzen Web-Server, die's so gibt, finde ich, äh, ziemlich, ziemlicher Mist.
Der eingebaute Web-Server von ESP ist, äh, ganz merkwürdig.
Der ist rein Single-Core und bleibt laufend hängen.
Dann gibt's nen anderen, der auch noch HTTPS kann.
Der bleibt.
Wenn man die Verbindung abbricht, hängen.
Deswegen hab ich gedacht, wir probieren mal nen Mini, wirklich nen Mini-Web-Server, was
ganz kleines.
Also einer, der quasi nur Get und Post kann und sonst nix.
Get, Post und, ähm, dann auch nur quasi Index-HTML ausliefern oder sowas und n Post-Firmware-Update
machen.
Weil unter slash Logs halt die, die Logs hier rausbekommen.
Äh, nen eigenen Web-Server zu basteln.
Allerdings soll der.
Ähm.
HTTPS können.
Ich hab mir im Vorfeld schon mal angeguckt, wie das funktioniert.
Es gibt da, es gibt hier nen Beispiel-Projekt und zwar, ähm, äh, warte mal, Github, das
müssen wir uns heute angucken.
Examples haben die hier irgendwo oder Programs.
Irgendwo haben die hier nen Server-Example.
Genau.
So.
Es sieht mega kryptisch aus, fand ich auch am Anfang, aber es ist, es ist gar nicht so
kompliziert.
Ähm.
Der ESP32 benutzt das hier als Libraries für TLS oder für SSL.
So, und was wir machen müssen, ist eigentlich nur dieses Beispiel hier in ein bisschen,
ein bisschen schöner übersetzen.
So, dass es auf dem ESP32 auch ordentlich funktioniert.
Und dann sollten wir ne verschlüsselte Verbindung vom Browser zum, zur, zu dieser Kiste machen.
So.
So.
So.
Dass wir, dass wir jetzt so eine Liste aufbauen können, also ne, ne wir müssen die Liste
hier aufbauen, also ne was haben wir hier, äh, was sind hier die Bösen oder die Bösen,
die wir bei der Liste hier haben?
Ne, wir müssen, wir müssen das hier öffnen.
Also hier gehts in der normalen Weise so, also, jetzt sind wir gerade in der normalen
Weise, äh, wie gesagt, in der normalen Weise, aber wir können dein��unde, die wir machen,
nicht mehr aufbauen.
Wir können die Liste, äh, die Liste öffnen, und schon haben wir, wir haben das hier, die
Liste öffnen und dann können wir mit dem aufbauen.
Wir können also die Liste, äh, diese Liste öffnen, wie gesagt, in der normalen Weise,
Webseite ausliefern.
Aber das probieren wir jetzt mal. Wie gesagt, ich habe im Vorfall schon ein bisschen
geguckt, wie das Ganze funktioniert.
Mich stört es ehrlich gesagt, dass
die Zeit falsch ist.
Aber da können wir jetzt nichts machen.
Ja, der habe ich jetzt auch
keinen Bock.
Großartig dran rum zu
wursten, bis das funktioniert.
Vielleicht sollten wir mal
den NTP-Server
setzen.
Ich habe eine Idee.
Wir setzen mal den NTP-Server
Oh ne, ich muss
EGIT
Settings
Ich muss on save einschalten.
Save
Formatting
Format File on save.
Ohne kriege ich Zustände.
Ah, jetzt. So ist es viel besser.
Wir setzen mal den NTP-Server
nachdem
das WLAN ab ist.
Okay. C++
Hallo?
What the fuck?
Ich habe zwei Zeilen verschoben.
Was ist dein Problem?
The fuck?
Was ist denn jetzt?
What the fuck?
Das hat sich überhaupt nichts geändert.
Also, will mich diese...
Was?
Was zum Teufel geht ab?
Was ist denn jetzt los?
Habe ich irgendwas kaputt gemacht?
What?
Äh.
Hä?
Okay, ich bin absolut planlos.
Was hat der denn jetzt für Schmerzen?
What the fuck?
Das ist so typisch
C++-Kram.
Du hast nichts geändert. Du kompilierst einfach nochmal.
Bam. Geht nicht mehr.
So, also. Was hat der denn für Probleme
jetzt auf einmal? Guck mal hier, der meckert
über die...
Das ist irgendwie Option... Option... Ach, Moment.
Ah.
Yes.
Ich habe nichts gesagt. Ich bin im falschen Fenster.
Ich... Ne, bin ich nicht.
Ich bin im richtigen... Äh, Moment.
Ey, Moment.
Ich war im falschen Fenster.
Was ist das Richtige davon?
Das ist das Falsche.
Das ist das Richtige.
Ha? Ah ja, gut.
Ich war nur im falschen Projekt. Ich war im falschen Editor.
Also, wir programmieren. Wir probieren heute einen Webserver zu bauen.
Einen Mini. Einen wirklichen Mini. Mini. Klein.
Der nur ein bisschen statisches
HTML ausliefern kann. Allerdings...
Also, ein Webserver,
der statisches HTML ausliefern kann,
ESP32. Allerdings, der... der... der auch
SSL können soll.
Stimmt jetzt die Uhrzeit wenigstens?
Ne, immer noch verkehrt.
Ok, wunderbar. Ne, RTX nicht schon vorbestellt.
Ich bestelle mir wenn überhaupt eine 3090.
So, wo bin ich jetzt stehen geblieben?
Genau. Also, das ist das Beispiel hierfür.
Für die eingebauten SSL-Dinger vom ESP32.
Und wir bauen einfach mal das, ähm, nach.
Das Example und gucken, gucken, wie weit wir kommen.
Ja.
Also.
Müssen wir mal gucken, ob wir irgendwas aufräumen müssen.
Aber ich glaube, das passt.
So.
Also, wie fangen wir das am besten an?
Wir machen hier ein neues File.
Das nennen wir...
Ähm...
Wie nennen wir das?
Ich hab doch gerade gesagt, das wird ein Mini...
Das wird ein Mini-Webserver.
Dann nennen wir das Ding...
Miniserve.
Top.
Ähm, so.
Und da brauchen wir eine Klasse drin.
Wir machen das mal der... der... der C++-Way.
Ja.
Äh, da brauchen wir eine Klasse drin.
Vielleicht...
Vielleicht soll ich...
Vielleicht soll ich es nicht...
Vielleicht...
Vielleicht soll ich einfach erst mal ganz billig das Example nachbauen.
Und gucken, ob es funktioniert, bevor ich da irgendeine Klasse draus baue.
Wollen wir gleich hier uns die volle C++-Objektorientierungsladung geben?
Oder wollen wir erst mal das... das Example nachbauen, so wie es hier drin steht?
Nee, komm.
Wir geben...
Wir machen das gleich richtig.
Easy.
Ist gar kein Problem.
Alles klar.
Also...
Wie gesagt, ich habe es mir im Vorfeld schon ein bisschen angeguckt.
Also, ich weiß, dass dieses Example funktioniert.
Das habe ich schon ausprobiert.
Das geht.
Also, prinzipiell geht das.
Muss ich das jetzt nicht nochmal machen.
So, also, wenn wir uns...
Das ist übrigens auch so ein komisches C++-Feature.
Was ich sehr merkwürdig finde.
Warum...
Vielleicht hat da einer von euch irgendeine Erklärung dazu.
Warum kann ich sowas hier machen?
Also, das ist...
Das ist ja eine Vermischung von allem möglichen.
Also, das hier legt die Klasse Minisurf an.
Und das hier legt im gleichen Zuge eine globale Variable vom Typ Minisurf an, die Minisurf
heißt.
Was heißt, ich habe hier eine Instanz von der Minisurf-Klasse unter Minis...
Also, das muss ich erst mal importieren.
Warum geht sowas überhaupt?
Wo ist der Sinn davon?
Das leuchtet mir nämlich überhaupt nicht ein.
Wo machen wir denn hier mal den Include?
Also, ich meine, wozu ist das gut?
Das checke ich null.
Ja.
Eigentlich sollte ich jetzt was haben, was so...
Achso.
Dann sollte ich vielleicht mal...
Vielleicht muss ich es anders schreiben.
Ah, da ist er.
Ja.
Also, den Sinn verstehe ich nicht davon.
Weil ich könnte auch einfach...
Geht mit Structo und Union NC auch?
Ja.
Aber ich verstehe gerade hier den Sinn von nicht.
Ehrlich gesagt.
Aber da bin ich wahrscheinlich zu low brain.
Weil ich könnte genauso gut danach hingehen und sagen...
So.
Ist genau das Gleiche.
Aber...
Viel klarer getrennt, was was ist.
Also, wo ist da jetzt der Unterschied?
Also, warum brauche ich das überhaupt?
Aber wahrscheinlich checke ich es nicht.
So.
Und falls es für den Fall sein sollte, dass ich keine Klasse mehr von diesem Typ anlegen
können darf.
Ja.
Dann kann ich das aber auch anders machen.
Dann kann ich hier den Constructor private machen und mache mir eine public create Methode
oder sowas.
Was ich viel sauberer finde, als irgendwie Klassendeklaration und das Initialisieren irgendwie
so komisch zu vermischen.
Aber war es nicht.
Ne?
Da war es nicht genau.
Übrigens eine Sache müssen wir machen, weil das uns mega rumspackt.
Muss das inline machen.
Weil ich habe eine Sache gelernt in meiner letzten Zeit, wo ich mich mit C++ beschäftigt
habe, ist.
Entweder man ist ultra pingelig zwischen der Trennung zwischen Header und C++-File.
Oder.
Wenn einem das auf den Keks geht.
Dass man im Jahr 2020 noch sowas wie Header und C++-Files überhaupt trennen muss.
Kann man einfach alles in Header schreiben.
Dann muss man aber davor schreiben inline.
Weil er ansonsten Fehler schmeißt, dass das Duplicate Definition und alles geht kaputt.
Sonst.
Ja.
Na gut.
Das kann ich jetzt nicht so nennen.
Weil das gibt es ja schon.
Ne?
Ist ja auch egal.
So.
Also.
Wunderbar.
Haben wir den jetzt.
Gut.
Also.
Was braucht.
Was braucht so einen Webserver als Public Methode?
Verwende einfach einen Header Guard.
Funktioniert nicht.
Funktioniert nicht.
Musste ich auch lernen.
Also.
Man kann sowas hier machen.
Funktioniert nicht.
Funktioniert nur.
Solange die Dateien zusammenkompiliert werden.
Also.
Zum Beispiel.
Wenn ich jetzt hier eine Lib habe.
Da eine Lib.
Und da mein Mainprogramm.
Und ich include jetzt quasi das hier und das hier.
Dann sagt er Duplicate Definition.
Egal ob man sagt Header nur einmal oder nicht.
Ja.
Genau.
Die ganzen Libraries die komplett im Header File sind.
Die verwenden alle Inline.
Der einzige Fall den ich jetzt gefunden habe.
Wo man das nicht machen kann ist.
Wenn man Sachen verstecken will.
Also wenn man beispielsweise hier was includen will.
Was man nicht in Main includen will.
Weil ansonsten ist ja.
Ist ja das quasi.
Geht include komplett durch.
Also wenn ich hier was include.
Und dieses dann hier include.
Include dann das was ich hier include.
Auch noch da rein.
So.
Warum schreibst Du eigentlich C++?
Tja.
Weil es nicht anders geht.
Du musst.
Für ein ESP32 gibt es nur C++ als Variante.
Du hast noch die theoretische Möglichkeit.
Also es gibt noch weitere Varianten.
Wenn man es unbedingt will.
Du kannst ein ESP32 in Micro Python programmieren.
Da hat das halt aber ganz andere Probleme.
In Lua.
Dafür gibt es kaum was.
Es gibt eine Rust.
Eine Rust Preview Build.
Was auch nicht richtig funktioniert.
Und es gibt sogar eine .NET Implementierung.
Die auf dem ESP32 funktioniert.
Dafür gibt es aber auch kaum Libraries.
Ja.
Also die einzig sinnvolle Variante ist halt leider.
Dass man das in C++ programmiert.
Ja.
Ja.
C++.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
C++20 mit Modules.
Könnte die erste Version werden die haeltstens benutzbar wird.
Wobei.
Ich letzten schon wieder gesehen habe.
Dass sie Sachen.
Die andere Sprachen seit 15 Jahren haben.
Und die sehr sinnvoll wouldn.
Für C++.
Schon wieder nicht machen werden.
Oder vielleicht nicht machen werden oder sowas.
Es gibt zum Beispiel für C++.
Also ich muss das erst sagen.
Es gibt in C Sharp.
Da war eine der ersten Sprachen würde ich glauben sowas hatte.
Also der eine der groesseren objektorientierten Sprachen die sowas hatte oder war hatte die
möglichkeit dass man klassen erweitert ohne dass man sie vererbt also zum
beispiel wenn ich jetzt hier den arduino string anlege so und das ding
hat halt nur eine gewisse anzahl an methoden was man damit machen kann so
und sagen wir mal ich möchte jetzt neben diesen to chart to double to into
float noch ein to q chat haben so und ich kann die klasse nicht erweitern das
funktioniert nicht das einzige was ich machen kann ist ich kann die klasse
erben und eine neue klasse bauen wo ich dann to to q chat was bastele so in
c sharp gibt es sowas wie extension methods das heißt ich kann statisch was
programmieren was dann hier als erweiterung angezeigt wird ohne dass ich
eine subklasse ableiten muss das ist für kleine sachen wie beispielsweise string
externe ist das unglaublich praktisch und sorgt dafür dass man viel weniger
klassen braucht und viel weniger
klassen braucht und viel weniger
akkur mover war wo was ist und das wollten sie in c++
die tür w earrings zu betten 17
hier secret
hier drin G drm
als abendISS
mal wollen sie es so, mal wollen sie es so
also ja, C++ halt
so, also was wir brauchen ist
für den Webserver, erstmal brauchen wir sowas wie
Start
ne
wir machen das in eigenes C++
wir sind mal so nett
äh, Void, Start
so
wenn man das auch noch richtig schreiben könnte
so, ähm
da braucht man sowas wie einen Port
ne, 8
ne, äh, Moment, wie heißt das Ding nochmal
äh, int 8
uint 8, ähm
uint, ne 16 brauchen wir
uint
warum ist das nicht drinne, was muss ich
da importen für, was muss man
da importen, dass das, erstmal
erstmal Arduino inkluden
das brauchen wir eh, kommen wir eh nicht drum rum
uint 16
haben wir es doch, oder
uint
8 haben wir
haben wir auch 16
16
Port
ja, ich hab meine Zweifel, dass Modules und so richtig funktionieren werden in C++
weil eigentlich fast nichts in C++ so funktioniert
wie man das erwartet
das ist ja grad der Witz
die haben relativ viel eingebaut auch die letzten Jahre
aber es ist einfach so
wir und an jeder Stelle anders
dass man nicht, dass man nicht durchblickt
ähm, to happen
äh, to happen
äh, to happen
wobei Happen, kennt ihr Happen?
Happen, das war früher so ein Eis
Riesen Happen
pff
heißt heute Big Sandwich
weiß nicht, wie ich da gerade drauf komme
so, also
ähm, to happen fragt
hey, wenn ich nach circa 200 Stunden Java-Programmieren irgendwie Lust, Motivation verloren habe
würdest du sagen, dass nichts für mich
das ist kein Wunder, das ist ja auch Java
ähm
es kommt, es kommt drauf an
was sich da dran nervt
wenn es Java ist, probier mal eine andere Programmiersprache
probier mal was ordentliches
hehehe
wenn du was ähnliches wie Java willst
probier mal .NET Core
ich find .NET Core viel angenehmer an den meisten Stellen
ähm, oder aber
wenn es dir gar nichts ist und dir was dynamisches angucken willst
guck dir mal
äh, vielleicht sogar Frontend-Sachen mit JavaScript
HTML, CSS, JavaScript an
wenn das eher was ist, wenn du so visuell
was sehen möchtest, was passiert
generell finde ich zum Einstieg
die Kombination JavaScript, HTML, CSS
mittlerweile fast das Beste
es kommt ja, die Frage kommt ja fast jedes Mal
ähm
was ich empfehlen würde zum Einstieg
und ich sag dann immer
ja, wenn du das machen willst, nimm das
wenn du Windows Desktop machen willst, nimm das
ich, mittlerweile muss ich fast sagen
ich hab da meine, ich hab da meine Meinung ein bisschen geändert
ich denke, dass das Beste zum Einstieg
tatsächlich mittlerweile CSS, HTML, JavaScript ist
weil, man kommt eh nicht dran vorbei
egal ob du später Frontend-Sachen machst
ob du Backend-Sachen machst oder sonst was
bisschen HTML, JavaScript, CSS
was anderes kannst, du kommst nie dran vorbei
bisschen was musst du damit immer machen
bisschen dich damit auskennen
und zum Einstieg ist das halt ganz cool
weil du siehst, was passiert
wenn man mit irgendwelchen Kommandozeilen-Tool
oder sonst was anfängt
dann ist das so unspektakulär
ja, aber wenn man ne Webseite macht
wo dann auch dynamisch was passiert
wo sich dann vielleicht, äh, auch, äh
irgendwie was reagiert, wenn ich was anschaue
anklick und so
dann ist das, glaube ich, motivierender
für den Einsteiger, als wenn er sich irgendwelche
Kommandozeilen-Dinger anguckt
ja, ok, also, wir brauchen einen Port
und ich hab gedacht, wir sind mal, wir sind mal
ganz, ganz mutig
wir sind ganz mutig und implementieren auch noch
Basic Auth
ich hab Basic Auth noch nie implementiert
ich weiß nicht, wie das funktioniert
ich weiß es theoretisch
ähm, ich weiß, dass Basic-Authentifizierung
im Browser, das ist quasi
Username, Passwort, Base64 encoded
das ist Big-Brain-Kryptographie
wobei es soll ja gar nicht, gar nicht, äh
verschlüsselt sein
also Basic-Auth müssten wir eigentlich
müssten, müssten wir eigentlich hinkriegen
wenn der Rest funktioniert
Basic-Auth machst du
steht, steht nen, steht nen Header drinnen
im Request und der ist Base64 encoded
Username, Passwort, also
ja
deswegen auch übrigens wichtig, dass man das über HTTPS macht
so
dann brauchen wir noch ein paar Variablen
nämlich halt mein Passwort
und mein
User
und mein
Port
ne, Port brauchen wir nicht
gut, und jetzt schauen wir mal
das ist ne Sache, die mach ich fast nie
ähm, jetzt machen wir nämlich ein C++-File
weil ich hab im Vorfeld schon rausbekommen
ja, du hast recht, Herving
ich hab's ja auch schon gesagt
das hat ja mit Verschlüsselung eigentlich gar nichts zu tun
ähm
ich hab nämlich im Vorfeld schon rausbekommen
wir kommen rein mit Header-Only nicht hin
denn
wir müssen hier dieses ganze
TLS-Zeug includen
und wenn man das TLS-Zeug includet
geht das WLAN in Main kaputt
weil das irgendwelche Sachen umdefiniert
was halt, was halt Fail ist
so
das heißt
dadurch, dass ich hier das include
und ich hier TLS-Zeug include
includet er ja das hier
und hier an der Stelle dann auch das TLS-Zeug
und dadurch, dass das TLS-Zeug includet wird
bevor ich mein WiFi anlege
geht das WLAN kaputt
hat man das jetzt verstanden?
also wenn ich irgendwelche Header importiere
die was mit Netzwerksachen zu tun haben
bevor ich WLAN starte
geht das WLAN kaputt
deswegen muss ich dafür sorgen
dass das hier nicht included wird
das ist halt Fail, ja
so
und die einzige Variante wie man das machen kann
soweit ich rausbekommen hab ist
ähm, man muss ein C++-File anlegen
was genauso heißt wie das hier
und dann versteckt er alles
was man mit einem C++-File macht
vor dem Rest
ist halt ein bisschen doof
wenn man halt eine Sprache hat
die keine ordentlichen Exports-Module
oder irgendwas hat
wo sowas standardmäßig schon geht
und wo man sich auch mit Header
und irgendwelchen C++-Files rumärgern muss
also machen wir mal sowas hier
das hab ich noch nie gemacht
ich muss mal gucken ob das funktioniert
so, ähm
und wie
und wie geht das jetzt?
sag ich jetzt hier include
header
so
und dann
legt man
Moment, wie ging das?
so, ne
jetzt muss man nämlich den ganzen Kram nochmal schreiben
allerdings dann nicht mit einer Cluster dazwischen
weil, weil, weil
so ging das, ne
so, und jetzt bilden wir das Ganze mal
und gucken ob es funktioniert
ok, er muss erstmal wieder das ganze Ding neu bilden
mach mal
du programmierst ein Linux-File
korrekt
äh, wenn dich die Config interessiert
leider nicht auf dem ganz aktuellen Stand
ich muss mal wieder pushen
ich hab so ne Mini-Config
hab ich mal hier auf GitHub hochgeladen
kannst du dir die Config angucken
und da muss ich
ich hab ja äh, mein Notebook auf der Arbeit neu installiert
vor ein paar Tagen
und da hab ich genau die gleiche Config hier verwendet
und ich war begeistert wie gut das funktioniert
einfach Config
also
ich verwende das hierfür
also das ist ein Config Manager
Config File Manager
ähm, das kann ich vielleicht mal im Stream zeigen
aber nicht jetzt
ähm, da sagt man einfach nur mit diesem Config Manager
clone dieses Repo und verlinkt mir die ganzen Dateien
und ähm, dann legt er dir, dann clont er das Repo
verlinkt alle Dateien an die richtigen Stelle wo sie sein müssen
und ich hab mein Notebook neu gemacht
äh, mein, mein, mein, äh, Config File Repo geklont
und ein paar Pakete nachinstalliert
und instant war mein Notebook auf der Arbeit exakt so eingerichtet wie die VM daheim
richtig gut
äh, to happen, das ist kein Problem
du musst das nicht studiert haben
also ich hab den Kram auch nicht studiert
ich hab den Kram mal, ich hab mal ne Ausbildung gemacht
vor Urzeiten
aber das wichtigste ehrlich gesagt ist
dass man sich dafür interessiert
und wenn man sich für nen Bereich interessiert
wird man auch immer besser in diesem Bereich
und umso besser man in einem Bereich ist
umso größer sind die Chancen
dass man in diesem Bereich auch arbeiten kann
und umso besser wird man wieder
also es hat schon seine Vorteile
äh, wenn man
da hartnäckig halt
ist bei ner Sache die einen interessiert
es können die unterschiedlichsten Dinger sein
also ich mein
es muss nicht jeder JavaScript CSS HTML mögen
es muss auch nicht jeder
äh, Java Zeug mögen
nicht jeder Python AI Gedöns mögen
äh, oder irgendwelche .NET Geschichten oder sonst was
es hat jeder, es hat jeder ganz unterschiedliche Sachen
ähm, manch einer mag vielleicht irgendwelche Datenbank Design Geschichten
ja
manch einer mag halt vielleicht bisschen mehr die Design Ecke
also es gibt ja da tausend, tausend
äh, Richtungen was man machen kann
und wenn man das kann
wird man gebraucht
ja es gibt Leute die mögen, die mögen FORTRAN
ja es gibt auch Leute die mögen COBOL
mit mir hat einer ne Ausbildung gemacht
die äh, hat
ist jetzt im Bereich IBM Großrechner
und macht COBOL
im Jahr 2020, muss man sich mal vorstellen
aber die fand das toll
also wir müssen mal anfangen, sonst wird das ganze nix, ne
also
wo haben wir denn jetzt das Beispiel?
was, was für, was für Headers brauchen wir denn?
das hier alles, zack
alles mal includen, alles mal includen
so und das Problem ist jetzt
wenn ich das hier, hier include
ich zeig's euch einfach mal
dass ihr mir das auch glaubt
wenn ich das hier, hier include an der Stelle
und hochlade
auf den ESP
dann geht mein WLAN nicht mehr
werdet ihr gleich, werdet ihr gleich sehen
und selbst wenn's geht
ich weiß, dass es später nicht geht, weil ich hab's schon ausprobiert
oh, huge Upload, massive
zum Glück müssen wir das nicht so oft machen
äh, wie wechselst du die, äh
oh, äh, okay
ja
das hat funktioniert, das WLAN geht
aber das liegt bestimmt auch daran, weil ich hier nicht drauf zugreife
ich hab's, ich hab's ausprobiert im Vorfeld
und es ging nicht, es ging, es ging nicht
deswegen mach ich das jetzt mal
mach ich das jetzt hier mal wirklich mal weiter
weil ich weiß, dass früher oder später
wir machen einfach mal weiter, wir machen hier einfach mal so weiter
wenn's kaputt geht, kann ich's ja immer noch
kann ich's ja immer noch ändern
ähm, hier übrigens, das ist eine gute Frage
vom, wo ist es denn?
hä?
genau, das hier, was der Plopsbrusher geschrieben hat
also, es gibt wirklich so viele Bereiche, wo man was machen kann
also mal grundsätzlich gesagt
ähm, alles das, was ich jetzt aufgezählt hab
waren ja eigentlich nur, ähm
unter, unter, ähm
Punkte, es gibt ja noch komplett andere Bereiche
zum Beispiel das, was ich, was wir jetzt hier machen
fällt ja schon so ein bisschen in den Embedded-Bereich
also irgendwelche Microcontroller und, und so weiter
also irgendwelche Microcontroller und, und so weiter
und Kleinst...
Dinger, ja?
ähm, das ist nochmal ein ganz anderer Bereich für sich
dann gibt es irgendwelche Industriesteuerungssachen
und es gibt so viele Bereiche
und so viele unterschiedliche Gebiete
also man findet da was, was einem gefällt
sofern man sich dafür interessiert
und bei mir ist es so, ähm
ich hab gemerkt, ich mag das halt nicht so, wenn ich
am Stück immer die gleichen Sachen mach
zum Beispiel, wenn ich in einem Monat an einem Programm rumbastel
zum Beispiel, wenn ich in einem Monat an einem Programm rumbastel
dann hab ich dann irgendwann keinen Bock mehr drauf
und wenn ich dann nochmal einen Monat weiter dran rumbastel
dann fass ich es nie wieder an
das ist halt doof
deswegen hab ich immer so zwei, drei Sachen, wo ich dran rumbasteln kann
also sprich, wenn mir jetzt hier dieses Microcontroller
ähm, ESP32 C++ gebastelt auf den Keks geht
dann bastel ich weiter an meiner, ähm, Webcam
äh, nicht Webcam
nicht, nicht Webcam, äh
SecurityCam
äh, Sicherheits- also Überwachungscam
äh, Sicherheits- also Überwachungscam
Browser
ähm
Übersicht
ähm
Also meine Sicherheitskamera-Streaming-Sache
Also meine Sicherheitskamera-Streaming-Sache
mit Go
und das sind dann zwei komplett unterschiedliche Sachen
das hier ist jetzt reines, ekliges, abartiges C++
das hier ist jetzt reines, ekliges, abartiges C++
und das andere ist eine Mischung aus Go und C-Sharp
hast du dir eigentlich eine neue CAM bestellt, ja, genau die gleiche wie das letzte Mal
und ich hoffe die geht jetzt nicht kaputt weil ich hab sie bei Amazon umgetauscht
äh, wie wechselst du den Desktop ohne die VRM erst detachen zu mischen
äh, wie wechselst du den Desktop ohne die VRM erst detachen zu mischen
die tätschen zum ich die tätsche ich die tätsche nur schnell ich klicke ich sag
control alt und direkt danach control mit windows links und dann wieder rechts
und reinklicken ich die tätsche ich die tätsche nur schnell ich habe mir ein
makro gebaut für die für die für die maus hier kann man kannst du dir gut mit
mit der logitech software irgendwas anderen bauen dass du mit den seiten
tasten der maus das machen kannst ja angela ist ja auch zum kotzen
angela ist so ein over engineer das enterprise ding damit bin ich nie ich
will nicht sagen dass schlecht ist aber damit bin ich nie warm geworden
dann bin ich eigentlich schon am start eine stunde wir haben noch erst noch
keine zeile richtig programmiert exzellent so wie immer also so wir
legen jetzt jetzt hier mal an dass das nicht nicht kaputt geht wo ist man set
up muss man sehr ab jetzt man selber
start start port 4 4 3 3 user exzellent admin passwort 1 2 3 4 5 6 so heilig
secure und nur hier gesehen das passwort wenn sonst keiner sondern implementiert
fangen wir mal an also gucken wir uns mal das beispiel an den kram haben wir
inkludiert http response das ist so wäre es noch nicht gesehen hat so sieht eine
webseite aus wenn man die abruft
im klartext logitech lua ja das ist leider nur aber man kann das auch mit
diesem makro editor machen man muss das nicht direkt in lua machen so sieht eine
webseite eine billige webseite aus wenn man sie per http geschickt kriegt das
ist die antwort http status code 1 0 ok und dann gibt es content type text html
und jeder http requests nicht ja request auch und response auch die einzelnen
sachen enden immer mit http response die einzelnen sachen enden immer mit
http response die einzelnen sachen enden immer mit
http response die einzelnen sachen enden immer mit einem carriage return newThank you
decks Desde
neland
trailar
so was meinst du was was ist denn so die
Richtung, was dir gefällt und dann habe ich den Leuten was
empfohlen. Mittlerweile bin
ich anderer Ansicht. Das Beste
zum Einsteigen ist, wenn
man nicht schon ganz konkrete
Vorstellungen hat, was man machen will. Also wenn du
jetzt sagst, hey, ich würde
gerne irgendwelche Microcontroller programmieren
oder ich würde gerne Windows Desktop Software
machen oder was auch immer.
Also wenn du noch keine genauen Vorstellungen hast,
dann ist das Beste meiner Meinung
nach aktuell, man fängt mit
dem Standardgespann
aus JavaScript, HTML und CSS
an. Einfach, weil
man sieht, was passiert.
Und weil man an
Frontend-Geschiss
eh nicht vorbeikommt.
Also ein bisschen HTML, JavaScript,
CSS muss man immer machen. Immer.
Guck dir mal, ich bastel, ich versuche
hier einen Web-Server zu basteln, der
statisches HTML ausliefert.
So, das HTML
muss doch aber irgendwas machen.
Du hast im Endeffekt ein bisschen HTML und ein bisschen
JavaScript da drin, dass die Seite dann funktioniert,
die ich übrigens nicht inline hier in mein
C++-Dokument schreiben würde.
Brauchst du dann wieder. Also du kommst
im Prinzip nicht drum herum.
Deswegen bin ich der Meinung,
das Beste, was man machen kann, erstmal zum Einstieg ist
JavaScript, HTML, CSS.
So, also, fangen wir mal an.
Dieses Beispiel
das habe ich ausprobiert,
das funktioniert. So, Start.
Also, bleib mal.
Ich kopiere mir das gerade mal und wir schmeißen mal raus, was wir
nicht brauchen. So,
also, komischer
Name für ein SSL-Server brauchen wir
schon mal nicht. Moment.
Ich mach mal kurz auf der anderen Seite was auf,
dass ich das im zweiten Monitor abgucken kann.
Da muss ich nicht ganz so viel
hin und her switchen.
Oh, wo ist es?
Okay.
So, genau. Also, wir müssen
das Ganze starten. Als erstes
müssen wir noch sagen, dass
ups. So, das
Passwort, was hier übergeben wird, speichern
wir hier oben im Passwort drin.
Und der User, der hier übergeben wird, speichern wir
den User, dass wir da später Basic-Auth mitmachen
können. Und dann legen wir mal
unseren Server an. Also,
äh,
NetContext, Listen,
das werden wir
wahrscheinlich brauchen.
Wobei, ich tue jetzt mal nicht so, als hätte
ich keine Ahnung. Wie gesagt, ich habe das schon ein bisschen ausprobiert.
Die Client-Geschichte brauchen wir
nicht und den Kram können wir auch wegschmeißen.
Ähm, so. Also, was das
hier macht, äh, nur mal
kurz zur Erklärung.
Äh, EmberTLS,
ist eine, äh, TLS
oder SSL,
HTTPS, wie auch immer man das nennen mag,
äh, Implementierung für
Microcontroller, also für so, so Krams.
Ähm,
ihr kennt wahrscheinlich
eher OpenSSL.
OpenSSL ist die fette Variante,
die so ziemlich 90% allen
verschlüsselten Traffic im Internet, äh,
abhandelt. Das ist so
der Standard schlechthin. Gibt's ein paar Forks
von, was gibt's in der OpenSSL, LibreSSL
und, und FreeSSL,
und, und, ach, alle möglichen Dinger.
Die haben sich ja wieder geforkt bis zum Gegner, äh,
gegabelt bis, bis zum Gegner nicht mehr.
Ähm, zumindest OpenSSL
ist eigentlich so mit, mit das bekannteste.
Ja, also sprich, wenn ihr, äh,
irgendwelche Software
verwendet, die
HTTPS verwendet, da ist
garantiert das meiste OpenSSL
von.
Ich bin mir gar nicht sicher, was Microsoft macht.
Microsoft hat unter Windows wahrscheinlich was eigenes.
Allerdings, äh, auf
der Webserver-Seite, also sprich, wenn ihr was
abruft, ist das zu
90 Prozent, wenn, wenn nicht, wenn nicht
sogar zu 95 Prozent OpenSSL.
Und EmberTLS ist quasi
sowas ähnliches wie OpenSSL,
bloß ein bisschen ressourcensparender
für hier kleine, kleine Microcontroller.
So, deswegen müssen wir das
ganze EmberTLS-Zeug
importieren, dass das funktioniert.
So, ähm,
was man jetzt machen muss, ist, die Initialisierung
ist ein bisschen eklig.
Ähm, deswegen copy-paste ich jetzt auch zum
größten Teil das Beispiel und gut ist.
Ja, man muss hier irgendwelche Kontexte
anlegen, man muss hier irgendwie, braucht,
muss, muss jetzt eigentlich nicht
sonderlich großartig interessieren, weil ich hab's im Vorfeld
schon ausprobiert, das ist alles richtig so und das
klappt. Ich hab nämlich, äh,
im Vorfeld schon ein bisschen gebastelt und
hab mir grad auf dem zweiten Bildschirm das
Beispiel aufgemacht, was ich schon ein bisschen gebastelt
hab. Da muss ich jetzt nicht komplett planlos hier rum
tippen. Übrigens, eine Sache,
die mir gerade auffällt,
ähm, das will ich gar nicht so,
nämlich, config,
config-setting,
ich will, ähm,
Tabs, ich will zwei Tabs, nicht vier,
Editor-Tabs, zwei.
Ja.
Äh,
Spaces, äh,
wie sag ich dem denn jetzt, dass er reformattet,
dass er die Spaces neu einrückt,
wie sag ich ihm das denn jetzt? Ähm,
äh, einfach mal
zumachen, vier Spaces,
äh,
äh, ja,
wie sag ich dem jetzt, dass ich zwei Spaces haben will?
Wer kann denn vier Spaces?
Das ist wie das Code, ja.
Ich will zwei Spaces.
Ich hab's doch hier jetzt auch schon
eingestellt. Ah, Moment,
Tab-Size, lul, ich hab das falsche
in dem Moment. Ne, doch, ist doch richtig.
Indent,
was rechts unten,
hab ich doch grad schon.
Ja, ja, aber wie stell ich das um?
Aber wie stell ich das um?
Okay, wie, wie, wie reformate
ich das? Format?
Was, was klickt dort auf
Using Spaces?
Ah,
ah, ah, ja,
okay, easy. Das hätte ich jetzt ewig
gesucht, bis ich das gefunden hätte, ey.
Okay, ähm,
wie gesagt, ich tipp das jetzt aus meinem
eingebastelten Beispiel ein bisschen ab.
Übrigens, wir können an der Stelle hier ein neues
C++-Feature verwenden, was
wieder auf die absolut
un-, also abwegigste Art und Weise
überhaupt implementiert wurde,
nämlich,
man kann jetzt
das hier machen, das ist neu,
das war, ich glaub, C++14
oder so, ähm,
wenn man, also,
okay, ich flame
jetzt nicht C++, warum sie das so gemacht haben, ja,
aber was das macht, ist folgendes,
wenn man hier einen Parameter
übergibt
und man den Parameter nirgendswo
anders mehr verwendet, dann,
Moment, das sind
Tabs, lul,
äh, und wenn man den Parameter nirgendswo
anders verwendet,
dann kann man dem-, kann man hiermit quasi dem-,
ich sag mal, keine Ahnung, wie es unter der Haube funktioniert,
ich sag jetzt mal dem Compiler sagen, dass
er quasi den-, diesen-, diese
Variable hier nicht kopieren
muss, von da nach da, sondern
quasi einfach umlinken kann
intern, quasi verschieben kann.
Also sprich, weil ich
weiß, dass das hier unten nicht mehr verwendet wird,
kann ich einfach sagen, anstatt, dass du
jetzt User von hier
nach User hier oben kopierst,
kannst du einfach quasi das, den Speicher,
Bereich umlinken. Du kannst einfach
das User da drauf zeigen lassen.
Ja,
ne, ja,
exakt.
Aber vor allem,
warum denn so,
Standard Move, ich mein, äh, Rust
macht das übrigens auch so,
allerdings nicht mit Standard Move,
Rust hat quasi
das, ähm,
eingebaut, dass man solche Sachen
hier machen kann, und
dann ist das relativ offensichtlich,
wie man es benutzen muss, also das benutzt man
dann immer gleich, und hier haben sie sich
gedacht, ach nee, wir bauen irgendwie im Standard-Namespray
so eine Magic-Methode ein, die
das macht. Typisch T...
Moment, Leute.
Muss mal kurz
Timon, so, weiter geht's. Also,
ähm, das ist jetzt, äh,
ergeblich viel mehr und krassere
Performance und so, nicht, dass wir das bräuchten,
aber das ist jetzt ein neues T++-Feature, also können wir's mal
verwenden. Gut, weiter geht's. Ähm,
was wir jetzt brauchen,
ist, einmal eine, ähm,
einen EmbedTLS-Net-Kontext.
Das ist quasi
der Port,
an dem der Server
später lauscht, wenn man's so will.
Was wird hier gebastelt? Ein Webserver,
also ein, äh,
SSL-fähiger Webserver,
der auf einem ESP32
läuft, und alle ESP32-
Kerne verwendet, also quasi
maximal vier Threads, weil dann der RAM all ist
mit SSL, oder vier, fünf,
fünf. Maximal fünf Verbindungen
gleichzeitig hab ich ausprobiert, vorhin
schafft er, weil dann ist der RAM
all. SSL braucht halt
ein bisschen mehr Speicher als normales HTTP.
Ja, 14, die, die
Uhrzeit ist falsch, der NTP-Server
macht komische Dinger und meine Zeitzonen-Settings
sind fail. Vielleicht ist
das aber einfach nur ein Reprodcast.
Oh Mann.
Ich hab einfach nur
Chat overlaid. Man weiß es nicht.
Man weiß es nicht.
Also das hier ist quasi
der Port, an dem der Server
lauscht, also quasi bei uns
443.
So. Ähm,
so. Das, äh, legen wir jetzt
an. Dann muss man
sagen, äh,
embed tls
net init,
und dann muss man den Kram hier
übergeben, weil,
weil c und c++,
so, und, ähm,
nachdem wir den
Kram nicht,
also diese Variable hier nicht
nur einmal brauchen, sondern
die komplette Zeit, während wir
den Server laufen haben,
kopieren wir die mal hier weg
und kopieren die in die Klasse
rein, nämlich da oben hin.
Da.
Da kopieren wir das jetzt hin.
Dann funktioniert das nämlich auch. Ähm,
und jetzt können wir gucken, dass
das Ding an dem Port lauscht. Da brauchen wir jetzt
embed tls
ssl config
init,
und damit das funktioniert, müssen wir die jetzt erstmal
ne standard config, also erstmal ne config
anlesen, wie er die, also,
was er alles einstellen soll an dem System.
Und das muss ich jetzt mal kurz
abgucken. Copy-paste
mir das jetzt nämlich einfach.
Lul.
Copy-paste mir das jetzt einfach, dann muss ich den Kram nämlich
nicht nochmal tippen. So. Den ganzen
Mist brauchen wir jetzt gleich. So, also
wir müssen ne ssl config anlegen.
Ups, wenn ich das jetzt richtig machen würde.
Ähm,
da können wir dann später so Sachen konfigurieren,
wie welcher timeout
bei connections und sowas in der Richtung. Also
sprich, ab wann bricht der connections
ab, wenn keine Daten mehr kommen und sowas.
Ist ganz nützlich, weil ich glaub da standard,
also nagelt mich jetzt nicht drauf fest.
Ich bin mir da jetzt nicht ganz
sicher. Also wie gesagt,
nagelt mich nicht drauf fest. Ich glaub
standard http
timeout sind glaub ich 5 Minuten.
Oder 15 Minuten.
Ehrlich gesagt weiß ich aus dem Kopf
was. Ok, request hat 30 Minuten.
Äh, was ist, was ist default?
5 Minuten?
Keine Ahnung. Zumindest zu lang.
Zumindest zu lang, weil
wie gesagt, das Ding hat nicht
viel RAM. Ich glaub, ich glaub man hat
ungefähr
80 GB oder so
zur Verfügung.
Ähm, und
ach Moment, ich verwechsel
das gerade. Der PC, der TCP
timeout ist 5 Minuten, ne?
Bei http, keine Ahnung ehrlich gesagt. Ist ja auch
wurscht. Ähm,
bei, man hat hier nicht so viel RAM.
Das heißt, jede Connection,
die offen ist, ist eine Connection zu viel.
Also jede Connection, die offen ist,
und, äh, 80, äh, 80
KB, nicht 80 GB.
80 GB wär ja Pockers.
Da hätten sie neue RAM Chips hier.
Der 80 GB RAM Chip ist hier.
Seht ihr? Eindeutig.
Ähm,
80 KB, 80 KB RAM
meistens zur Verfügung. Das heißt, jede
Connection, die offen ist und nichts macht, ist
eine Connection zu viel.
Also, ähm, jetzt müssen wir dem erstmal
sagen, an welchem Port erlauschen soll.
Ich copy-paste
übrigens mal den anderen Kram hier auch.
Das ist einfacher. Da müssen wir uns
das nicht angucken. Das ist Initialisierungskram.
Der legt hier Speicherplatz
an, wo man ein Zertifikat drin speichern kann.
Dann, wo man ein Private Key
drin speichern kann. Dann irgendwelche Random
Generator und sowas.
Ich hab keine Ahnung, was es genau macht.
Ich weiß nur, dass es funktioniert und man muss es machen, weil
wenn man es nicht macht, dann funktioniert's nicht.
So, ähm,
und was wir auch noch brauchen ist, wir müssen
den Key einlesen. Und wie ihr hier seht, ich hab
hier ein Zertifikat und
einen, äh, Private Key.
Den müssen wir einlesen,
weil den brauchen wir jetzt.
Denn irgendwie muss der
Server ja HTTPS
SSL Verschlüsselung machen. Dazu brauchst du ein Zertifikat
und dazu brauchst du ein Private Key, dass
das Ganze funktioniert.
Ähm, jo.
Deswegen sagen wir,
wir brauchen noch ein paar Variablen,
für unsere Keys.
Und, äh, da machen wir hier sowas wie
ein
Standard Vektor. Wir sind ja hier
in C++.
Äh, Uint.
Alter, komm, Visual Studio
Code. Gib alles.
Wir brauchen das so lang. Übrigens, ich, äh,
wollte mal in nächster Zeit
CLion ausprobieren.
Können wir eigentlich auch mal im Stream angucken.
Weil das Chatbrains Zeug ist
ziemlich gut. Also alles,
was ich bisher verwendet hab.
.NET ist top. Rider für .NET
ist top. Ähm,
ich muss sagen,
PHP, nee, äh, WebStorm
hab ich nicht so viel mitgemacht.
Hat mir jetzt nicht so extrem gut
gefallen. Aber, ähm,
PyCharm ist ziemlich
gut. Und RubyMine
war früher auch ziemlich gut. Also, die machen,
die machen wirklich gutes Zeug. Und
die haben jetzt seit einer Weile, das ist schon ein bisschen her,
auch eine C++
C IDE.
Ähm, ich find die C++
Unterstützung in Visual Studio Code
sehr hakelig. Das funktioniert,
aber ihr seht's, das ist teilweise richtig langsam.
Guck mal hier, ich hab hier grad Uint.
Seht ihr? Also, das ist, das ist
nicht so,
nicht so snappy oder so, wie man das auch immer
nennen mag, ja. So, also
wir brauchen, wir brauchen Speicher für unseren Key
und wir brauchen Speicher
für unser, für unser Zertifikat.
Ähm,
weil ohne funktioniert das ganze TLS
SSL Zeug nicht. Das müssen wir jetzt
einlesen. Da können wir einen von meinen Big Brain
Helper Methoden verwenden, nämlich
ReadFileFromSpiffs.
Normalerweise macht man das so.
Äh,
Open, aber ich kann, ich kann euch einfach
die Methode zeigen, dass man sieht, was er unter der Haube macht.
Ignoriert mal, dass das irgendwelche Templates sind.
Ignoriert mal dieses eklige Zeug hier unten drunter.
Das hab ich nur gemacht, weil C++
wieder nicht das macht, was ich gerne hätte.
Ähm, normalerweise
ist, äh, so. Öffnet man Dateien.
Vom Flash,
vom Flash-Speicher, vom ESP32.
Äh, Flash-Speicher. Ich weiß, dass das
seit gestern, äh,
oder vorgestern C++
1.0 ist im Visual Studio Code.
Allerdings die, also die C++-Extension
besser geworden ist sie dadurch auch nicht.
So macht man das normalerweise. Also sprich,
man sagt Spiffs Open,
dann gibt man einen Fad an, also zum Beispiel
sowas hier, ne?
Slash, Index, HTML.
Haben wir hier auch? Ne, haben wir gar nicht drin.
Äh, sowas hier zum Beispiel.
Cert.
Spiffs Fade fangen immer mit einem Slash an.
Linux, Unix-Style. Ähm,
dann kriegt man die File Size, dann braucht man einen Buffer,
liest das ein und schließt das File wieder.
So, äh,
ist das gedacht zu verwenden.
Ähm, oh.
Der rückt Dinger komisch ein für mich.
Meinetwegen, solange er nicht wieder kaputt geht.
Und ich hab versucht, ich muss mal, das ist das erste Mal,
dass ich jetzt gucken kann, ob das funktioniert.
Weil ich hab da vorher noch ein bisschen dran rumgebastelt.
Ich hab gedacht, ich bin jetzt mal ganz besonders,
äh, Massive Brained.
Und zwar, ich hab mir versucht,
ein Template zu bauen, was folgendes macht.
Das ist wieder typische C++-Eigenheit.
Das geht sonst in keiner anderen Sprache,
aber in keiner anderen Sprache braucht man das auch.
Ähm,
ne, der Fade ist immer Slash
und dann Dateiname. Also Slash,
Cert, der. Man kann, wenn man einen Ordner hat,
wenn man einen Ordner hat, ist es Slash, Ordnername,
Slash, sonst was.
Ähm, ich hab hier folgendes
probiert, deswegen sieht das auch so eklig mit
Template aus. Ähm,
ich wollte,
wenn man, übrigens das können wir wegschmeißen
da hinten, das war, hab ich ausprobiert,
wenn man, das ist jetzt wieder
C++ Deluxe, ja.
Also, wenn man sagt,
man möchte die Dateien
als Bytes haben,
dann macht er einen Vektor
mit Bytes. Wenn man sagt,
man möchte die Datei einlesen
als Arduino-String,
dann gibt er den Arduino-String zurück
und wenn man sagt, man möchte ihn als C++-String
haben, dann gibt er den C++-String zurück.
Dass das als Template überhaupt
funktioniert, ist an sich
schon mal wir.
Komplett unverständlich, warum das funktioniert.
Also ich weiß, dass es,
wie man es machen muss in C++, es ergibt für mich
nur keinen Sinn, warum das geht.
Weil hier geb ich einen Vektor-Typ zurück
und hier geb ich ein einfacher, also hier geb ich
ein Objekt, also hier geb ich ein Container zurück
mit Elementen drinne und
hier geb ich quasi ein Objekt zurück.
Warum ich quasi,
warum das Syntakt, also keine Ahnung
warum das geht, aber es funktioniert.
Jetzt kann ich hier nämlich sowas einlesen
und jetzt kommt der Moment der Wahrheit,
ob das funktioniert, was ich da programmiert habe.
Also wir lesen jetzt mal meinen,
den da ein,
cert.der
lesen wir ein
und key.der
und was der jetzt einliest ist
ein
ich krieg einen Vektor, also quasi
einen Array zurück mit den einzelnen
Bytes, also
quasi einen Array mit den
Vektor mit den Bytes von dieser
Datei. Der Zertifikat
ist nie müde. Der Key
ist auch immer von dem Chef im Büro.
So und jetzt können wir uns das ganze hier oben
reinschreiben, also KeyBuffer
äh, ups, falsch rum. KeyBuffer
gleich das und
ThirdBuffer ist das.
Also alles was wir jetzt gemacht haben
ist das Zertifikat
vom Flash lesen und
in ThirdBuffer schreiben und
den Key einlesen vom Flash
und in KeyBuffer schreiben.
Der Key
encryptet immer schweißfrei.
Der ist gut.
So, weiter
weiter im Text.
Jetzt können wir nämlich gucken
ob der Server an sich tut.
Also die wichtigsten Sachen haben wir
jetzt. Wir haben komisches
SSL Zeug initialisiert.
Wir haben Private Key und Zertifikat
eingelesen. Als nächstes
können wir folgendes machen.
Kann ich mir auch copy-pasten aus meinem
Test. So.
Als nächstes können wir folgendes machen.
Wir müssen jetzt nämlich gucken ob das Zertifikat
gültig ist. Heute Cold War.
Ich hab kein Beta Key.
Ich hab mich auch null drum gekümmert um Beta Key.
Ich hab das auch überhaupt nicht verfolgt die letzten Tage.
Ich hab 10 Tage am Stück jetzt gearbeitet.
Ich hab nichts mitgekriegt was das angeht.
Echt?
Ist Open Alpha?
Echt jetzt? Excellent.
Geht das auf dem PC?
PC?
Ach PS4 only.
Was ist denn hier Sony?
Was ist denn hier los?
Ne PS4 spiele ich nicht. Ganz ehrlich
ich kann mit dem PS4 Controller nicht umgehen.
Ich krieg es nicht gebacken.
Ich bin schon mit dem Xbox Controller komplett außer Übung.
Aber wenn ich am PS4 oder wisst ihr was ich machen kann?
Ich kann meinen Cheat auspacken.
Ich hab ja so ein
so ein Maus zu
den verwende ich normalerweise nicht weil es
im Prinzip einfach Cheaten ist.
Aber ich hab so einen Converter
so ein Maus zu Tastatur
Converter den könnte ich verwenden.
Ob man mit Visual Studio Code auch Remote
mit SSR beim Kunden arbeiten kann? Ja klar.
Du kannst
Ramedes ich zeig dir mal was.
Falls du das nicht schon kennst.
Was für dich
sehr praktisch sein könnte und zwar
Ich muss mal einen SSH Server starten
dass ich dir das zeigen kann.
So
Ich starte mal kurz den SSH Server.
Systemctl
Start sshd
Ich weiß gar nicht ob ich das jetzt sehe. Hab ich.
Also ssh localhost
Yes alles klar.
Also ich verbinde mich jetzt mal
per SSH auf meinen
auf meinen lokalen Rechner.
Aber das ist egal.
Das könnte auch ein Remote Rechner sein.
Das ist vollkommen egal.
Also was man machen kann ist
man kann mit jedem
man kann mit jedem Editor mit allem
Remote per SSH arbeiten.
Weil es gibt so was schönes.
Das nennt sich SSHFS.
Und SSHFS funktioniert folgendermaßen.
Also wir gehen jetzt mal von aus.
Ich hab irgendwo Remote einen Server stehen
auf dem ich was editieren möchte.
Da kann ich nämlich einfach sagen
SSHFS. Ich hoffe ich habe es überhaupt installiert.
Ne ich muss mal kurz installieren.
Oh was ist denn hier los?
Oh ich muss glaube ich mal wieder updaten.
So aber SSHFS
ist es installiert.
Ist übrigens
Hat nicht installiert oder?
Na toll ok.
Ich muss mal schnell updaten.
Ja aber wie gesagt ich zeig dir
das gleich das ist äußerst praktisch.
Da kannst du nämlich einfach
nen Ordner auf nem Remote Server
benutzen wie als wäre er bei dir lokal.
Das heißt du musst gar nicht
Visual Studio SSH beibringen
und du musst auch deinem Vim oder deinem Emacs
oder deinem Atom oder deinem Visual Studio
kein ähm
ach du große Scheiße was will der denn
ach du will der denn alles updaten?
ähm
musst du nicht beibringen du machst einfach SSHFS
und dann hast du den Remote Ordner
lokal bei dir.
Solange der jetzt Update macht
zeig ich dir jetzt irgendwie ein Beispiel.
Genau
das ist viel zu übertrieben was die hier machen.
So ein bisschen sowas wie NFS
ja das ist total
einfach genau hier ist ein schönes Beispiel.
Du sagst einfach
SSH
SSHFS Username
AdServer Doppelpunkt und dann
in dem Fall ist das Heimatverzeichnis
ähm und dann den Ordner
wo du es rein mounten willst.
So und das heißt am Ende hast du dann nen Ordner
von Remote lokal gemountet
und in diesem lokalen Ordner kannst du dann mit jedem
Editor drin rumwursten wie du willst
und der synkt das dann
auf den Remote Server.
Ich zeig es dir auch gleich wenn er irgendwann mal geupdatet hat.
Übrigens wisst ihr
wie kacke Betriebssystem
Updates über LTE sind?
Ich musste auf der Arbeit
als ich auf der Arbeit war und wie gesagt wir hatten da ziemlich viele Ausfälle
und der Netzwerk war auch im Arsch teilweise
ich musste nen
Update machen so ungefähr
so ungefähr so ein Update wie hier über LTE
LTE mitten in Frankfurt
über nen WLAN Hotspot den ich mit meinem Handy
aufgemacht hab
das hat keine Ahnung 3 Stunden gedauert
oder so
Ewig
das hat gar nicht mehr aufgehört
also wenn das hier fertig ist dann zeige ich es dir
so und jetzt können wir
wir starten jetzt zumindest mal nebenbei
den äh http Server
so ähm
also wo sind wir stehen geblieben ich warte hier noch bis das Update durch ist
dann zeige ich dir das mit SSHFS weil das ist
eines der praktischsten und einfachsten
Tools die es gibt und
die lösen so viele Probleme
also an SSHFS sollte man immer so
als erstes denken wenn man Remote Sachen
bearbeiten muss größere Sachen
Remote bearbeiten muss
und gerne die Sachen verwenden möchten die man lokal
hat äh stell dir vor du musst
eine Router Config über 2G
das ist kein Problem Router Config ist ja
nur Text und nicht groß ja
selbst so ne riesen Cisco was auch immer
Config ist vielleicht was weiß ich
50 KB
doch kein Ding
dauert trotzdem ne halbe Stunde pff was ist denn da
drin Router Config mit Binares
oder
der updatet ja wirklich 3 Stunden
so also was kommen wir mal zurück
zum Web Server
ähm was wir jetzt als nächstes
checken müssen ist ob das Zertifikat
funktioniert
also sprich ob man das Zertifikat parsen kann
also ich hab jetzt hier
das Zertifikat und den Key eingelesen
und es könnte ja sein das sie im falschen Format sind
deswegen muss ich jetzt erstmal sagen ok
parse mal das Zertifikat
und schreib dann
deine interne Geschichte
was auch immer du mit dem Zertifikat machst
hier in diese Variable weil wir müssen ja davon
also wir müssen ja aufpassen
dass die Variablen nicht aus dem Scope
rausgehen C und C++
machen das so wenn man Variablen
anlegt und die Funktion wird verlassen
dann werden die wieder gelöscht
es sei denn man hat vorher gesagt man will das nicht
ähm
das ist übrigens auch das wo die meisten
Memory Leaks herkommen
also wenn man sagt ok
so gibt es keine Memory Leaks
also wenn ich Variablen nur so anlege
dass sie automatisch wieder
aufgeräumt werden
sobald die Funktion beendet wird
kann es logischerweise keine Memory Leaks geben
ja aber ähm
nachdem man ja auch Variablen
braucht die es länger gibt als
die Funktion
ähm muss man
dem halt auch dann sagen hey
ich brauch das länger und da kommen halt auch die meisten
Memory Leaks her
genau also der Parse jetzt ist jetzt
ein Zertifikat der passt in Private Key
und schreibt es hier einmal nach Key
und einmal nach Cert
jetzt muss man irgendwelche Magic Sachen machen
die kopiere ich mir auch aus dem Example hier jetzt
das ist 1 zu 1 aus dem
Example von dem
äh ich habe keine Ahnung was es macht
Magic braucht man sonst geht es nicht
und ähm
jetzt kann man gucken dass man Verbindungen annehmen kann
wenn ich jetzt nicht nur irgendwas vergessen habe
doch aha ich habe das
Leute ich habe das wichtigste vergessen ich habe mich
da sind jetzt auch 2 Sachen die aus dem Beispiel
kommen und zwar
man muss ihm ja sagen an welchem Port
an welchem Port man den Server betreiben
will den Port übergeben wir hier Port 443
ist das bei uns so und nachdem wir
das gemacht haben können wir auch gleich mal gucken ob es funktioniert
ähm man sagt jetzt ähm
embed TLS
es fängt übrigens alles
alles so an
net bind und da muss man
ihm jetzt sagen welchen Port
da muss man erstmal den Kontext übergeben
das ist das da
das ist das was wir hier oben angelegt haben
das nennen sie
das nennen sie irgendwie intern immer
Kontext Kontext ist so eines der
aussagelosesten
äh Worte überhaupt
äh
ist das ein Self Science
ja das ist komplett selbst generiert
ja ja äh es ist
glaube ich von der CA
KEKW für den äh Benutzer
LULW ausgestellt das Zertifikat
können wir gleich mal im Browser gucken was das Zertifikat macht
meint oh Update fertig
ok SSH
SSHFS also
zeig ich das mal
falls ich jetzt installieren darf
jo Kekl
hoffentlich geht das jetzt
weil ich hab ein Kernel Update hier drinnen gehabt
und ich vielleicht muss ich neu starten vorher
müssen wir mal schauen also SSHFS
wir machen mal einen Mount Punkt
ähm nennen wir mal Remote
so und jetzt verbinden wir uns
ich nehme jetzt mal nicht
Localhost weil das viele Leute immer verwirrt
wenn man in einem Beispiel Localhost verwendet
es ist zwar vollkommen egal
ob der Endpunkt Localhost ist oder ein
Remote Server aber viele Leute sind immer verwirrt
wenn man Localhost verwendet deswegen verwenden
wir jetzt mal eine eine IP
so jetzt sage ich SSHFS
und zwar möchte ich
den Ordner dort
nehmen wir mal den Ordner warte ich habe Comments in der
Schelle ausgeschaltet fuck
äh wir nehmen jetzt mal den Ordner in dem wir
gerade hier äh am Programmieren sind
so Plattformen oh Project
Web Server
so also
das ist der Ordner Remote auf dem
auf dem Remote Server
jetzt sage ich SSHFS
äh auf diesem Server
dieses Verzeichnis möchte
ich Mounten lokal bei mir
auf Remote
ok ich muss Rebooten
Kernel Update gemacht dann gehts nicht
äh dann ist die Webseite aber im Browser
untrusted wenn du selbst sein Zertifikat
verwendest korrekt aber das ist ja nicht wild
ich meine das ist ein Dashboard für mein
ESP32 der bei mir rumhängt
für Firmware Update zu machen klar ist das
untrusted ich könnte mir in der letzten ein Crypt
Zertifikat ausstellen lassen
aber wozu dann muss ich
das alle 3 Monate erneuern
was haben wir heute für Hintergrund
ah jede Menge Schafe
alles klar
äh Firefox
so äh wer manchmal
übrigens Probleme hat wenn so Sachen wie SSHFS
nicht gehen äh wenn ihr vorher ein
Kernel Update gemacht habt dann muss das
äh müsst ihr neu starten
äh ja Moment und jetzt muss ich
muss ich SSH neu starten
so wunderbar
so also
SSHFS Remote Server Verzeichnis
wird gemountet auf
lokales
Verzeichnis
zack und ihr seht
jetzt gehe ich in mein lokales Verzeichnis
und ich hab dort alle Dateien vom
Remote Server drin das heißt ich kann
hier drinnen jetzt
Dateien editieren
wie lokal
hier speichern
und das synkt mir das quasi rüber auf
den Remote Server das heißt
ich kann alle Tools verwenden ich muss das
Ding übrigens anmounten danach wieder wenn ich fertig bin
ähm das heißt ich kann
alle Sachen und ihr seht jetzt ist das Verzeichnis wieder leer
das heißt ich kann alle Tools verwenden
die ich lokal habe
zum editieren obwohl die Dateien
auf dem Remote Server liegen
und wie gesagt lasst euch
jetzt nicht dafür verwirren dass ich das hier
alles quasi von meiner VM mich
über meine VM in meine VM PSSH
ähm
also
verbunden hab
ähm es funktioniert aber im Remote Server
ja du kannst die eigene
CA du kannst die eigene CA im
Browser hinterlegen ja das geht
kannst du machen
kannst du LL statt LS
LA äh ich glaube das habe ich gar nicht
angelegt doch habe ich angelegt
äh LL gibt es ja nicht LL ist nur ein Alias
der bei manchen Sachen
mitgeliefert wird ich habe mir aber
mittlerweile den hier angewöhnt
ähm übrigens das ist kein LS aber
funktioniert bei LS genauso
weil ähm also
LS das macht folgendes
also list all
reverse time
und mit
ne warte mal ist das human readable
ich glaube das ist human readable size genau
also sprich der listet
alle Dateien auf in umgedrehter Reihenfolge
nach dem Änderungsdatum
nach dem Änderungsdatum
und das hier ist dass er
die Dateigröße in ordentlichen
ähm
Einheiten anzeigt
und nicht alles in Bytes
ja was für ne Statusbar benutzt
du das ist ähm
I3
I3 Status Rust ist das
warum auch immer es nicht installiert ist
ah weil ich ein outdated
Paket verwende ok
ähm die Config
dafür gibt es übrigens hier
wenn du es genau wissen willst hier da
äh
irgendwo hier
die Config drin da
ist nicht sonderlich viel
aber wichtig das man Emojis verwendet
exzellent
so sieht es mit SSHFS aus das ist eines der
praktischsten Tools überhaupt
ähm mal kurz schauen ob ich irgendwas
ich kann ja mein Chat noch immer nicht scrollen
auf einem anderen Bildschirm
oh hier
ja gut
aber das ist doch egal
äh
also bei einem normalen
nicht aber bei einem esp 32 daheim im netzwerk ist das egal und übrigens die
meisten iot geräte haben ungültige zertifikate
du musst es nicht anbauten aber ich anbaut es immer der flascht und sind
normalerweise auch so also muss es nicht unbedingt anbauten habe ich anbaut das
immer allein schon dass ich nicht aus versehen was drin ender remote auf dem
server also ich habe mal in meiner ausbildung den fehler gemacht ich habe
meinen ssh remote gemountet und habe dann dateien gelöscht in meinem
heimatverzeichnis recursive in meinem heimatverzeichnis dateien gelöscht und
der ssh mount war halt da auch unten drunter
aber ich hatte glück das ding ist schlau genug und löscht nicht auf ssh mounds
aber das kann man relativ einfach passieren also sprich wenn unser ver
gemountet hast über ssh fs und du löscht dann was aus versehen dann geht es halt
mit pech
auch direkt über ssh fs drüber also ich würde es immer anbauten wenn ich fertig
bin gerade wenn es ein produktiver server ist ist immer doof wenn man das
aus wenn man dann aus versehen irgendwas irgendwas kaputt macht also mal wieder
hier den editor auf machen wir weiter aber wie gesagt man muss es nicht
anbauten also wenn du es vergisst zu anbauten ist es nicht schlecht ist es
nicht schlimm
please don't klau alles klar ich glaube sie nicht ich war ab
reload
ja leider c++ monk monka s darf ich jetzt monitor aufmachen von meinem
controller sehr gut also wo sind wir stehen geblieben
wir wollten jetzt test ob der server funktioniert wir wollen jetzt gucken ob
der ob der ob das aber prinzipiell funktioniert und zwar muss man jetzt
sagen ein welchem port er lauschen soll also sprich mit net bunt und einem port
kann man ihm sagen woran er lauschen soll also sagen jetzt mal hier port ip ip ist ist egal es gibt im parkart
kann man ihm sagen woran er lauschen soll also wir sagen jetzt mal hier port ip ip
Nee, IP ist egal.
Wir haben nur ein Interface.
Port 4433.
Da sieht man auch schon wieder mal eine komische Sache.
Die wollen den Port unbedingt als String.
Okay, meinetwegen.
Können wir machen.
Port 443.
Und Protokoll.
Das ist tatsächlich relativ wichtig, dass man das angibt.
Weil, ja sonst, sonst funktioniert es halt einfach nicht.
Wenn man das nicht angibt.
So, da muss man eben sagen.
Embed, TLS, Underscore, Net, Proto, TCP.
So.
Und jetzt lauscht der Server an Port 443.
Und das können wir auch gleich ausprobieren, ob das funktioniert.
Wir verbinden uns dann nämlich einfach mal per OpenSSL hin.
Und gucken, ob wir da irgendwie eine Art Antwort bekommen.
So, und jetzt muss man noch ein bisschen Magic hintendran machen.
Das copy-paste ich aus dem Example wieder.
Weil man das einfach machen muss, dass es funktioniert.
Man muss die, ähm, den Random Generator muss man seeden und anwerfen und so.
Und draufgeschissen, ob das funktioniert.
So, und jetzt können wir das Ganze mal speichern und hochladen.
Und gucken, ob es jetzt funktioniert.
Upload.
Oh.
Has not been declared.
Äh, achso, ja, logisch.
Wow.
Okay, alles klar.
What the fuck?
Was zum Geier ist jetzt schon wieder los, C++?
Alter, wo ist denn jetzt dein Problem schon wieder?
Oh man.
Download, update.
Was hat er denn jetzt für Schmerzen?
Hm.
Äh, äh, äh, äh, äh, äh.
Warum kann, äh, äh, äh, äh, äh, äh.
Warum kann, äh, äh, äh, äh, äh.
Warum kann, äh, äh, äh, äh.
Warum kann, äh, äh, äh, äh.
Warum schaffen die es eigentlich nicht, ordentliche Fehlermeldungen zu geben?
What?
Was hast du für Schmerzen?
Wrong number of arguments?
Ja, wo ist das Problem?
Also, ich kann mir vorstellen, wo das Problem ist.
Ich glaube, weil ich hier nicht aufgepasst hab.
Wartet mal.
Weil ich nicht aufgepasst hab.
Als ich hier mein Template angelegt hab.
Das war.
Wo ist mein komisches Template?
Ne, passt. Inline.
Eigentlich alles richtig.
Tja, ich weiß nicht, was er für Schmerzen hat.
Ach Gott.
Okay, also, der mag nicht.
Der mag nicht, weil ich den Kram hier include.
So, gut.
Ähm.
Aus irgendwelchen Gründen darf ich das hier nicht include.
Alles klar.
Wenn ich das hier nicht include, dann geht's.
Allerdings kann ich dann die Sache nicht verwenden.
Was auch ziemlich toll ist, ja.
Exzellent.
Redefinition.
Okay.
Okay.
Okay.
Okay.
Okay.
Das ist, das ist der Kram, den ich meine, wenn du das nicht im C++-File machst,
spackt er irgendwie, spackt er irgendwie rum.
Ich weiß nicht genau, was er jetzt für Schmerzen hat, ehrlich gesagt.
Also, warum er da jetzt rummeckert.
Aber wir machen das jetzt einfach in C++-File.
Ist gut.
Was?
Before Numero?
What?
What is happening?
Hä?
Okay.
Ähm.
Redefinition of Template Bool.
Ist ja was.
Wir ignorieren das jetzt, machen das jetzt so, Copy-Paste das jetzt da rüber und alles ist gut.
Da geht's nämlich.
Ähm.
Zack.
Naja.
Start.
Weil, keine Ahnung, was der, was der da im Detail für, für Probleme wieder hat.
Aber wir machen jetzt einfach so.
Und dann machen wir so.
Und jetzt funktioniert's.
Zack.
Äh.
Das passt.
Das passt.
Und das da.
Machen wir auch hier raus.
Und kopieren das da rüber rein.
Und dann funktioniert's.
Und ich weiß nicht genau warum, aber es funktioniert.
Äh.
Oder auch nicht.
What?
Äh.
Ach, ist das geil.
Excellent.
Aber wahrlich.
Excellent ist das.
Excellent.
Huh?
Huh?
Guck mal da.
What?
What?
Achso.
What?
Muss ich auch includen?
Mach ich.
Mach ich.
Ich, ich, ich, ich, ich include.
Ich include alles.
Ich include alles, was du willst.
Mir egal.
Include.
Elpo.
Ah.
Und jetzt?
Ha.
Come on Bruh.
Gib's mir.
Mach.
Aaaaah!
Wo ist das Problem Alter?
Der Scheiß funktioniert doch im anderen Projekt eins zu eins.
Was hab ich denn jetzt vergessen?
Irgendwie.
Ach媽.
Ich bin immer wieder begeistert, wie schön das Ganze funktioniert.
Titan Toaster, mein Beileid.
Was ist dein Problem?
Was ist dein Problem, C++, jetzt?
Was magst du nicht?
Ich kopiere mir jetzt einfach mal den Kram rüber aus meinem Testprojekt, wo das alles funktioniert hat, wohlgemerkt noch.
Das können wir drin lassen.
Gut.
Alter, ich habe das 1 zu 1 aus meinem Testprojekt kopiert.
Ah, Moment, was hat der hier für Schmerzen?
Was hat er da jetzt für Probleme?
Standard, okay, okay, okay.
Okay.
Ich kopiere es mir nochmal.
Das ist das, was ich in meinem Testprojekt habe.
Äh.
Äh, geht das jetzt?
Warum geht das jetzt?
Hä?
Moment.
Ich habe meinen Logger eingebunden, oder ansonsten geht es nicht?
Ah.
Ja, natürlich geht das nicht.
Logger war nicht da.
Ja, natürlich, dann kann das ja auch nicht funktionieren.
Alter, bin ich blöd.
Okay, dann probieren wir das doch mal ohne Header.
Dann probieren wir das doch mal alles im Header-File zu machen.
Weil ich bin wirklich gespannt, ob das alles, ob das funktioniert, wenn ich das alles im Header-File mache.
Ich habe nämlich in meinem Test das Problem,
dass dann WLAN nicht ging.
Werd?
Ah, jetzt ist Helper nicht drin, okay.
Ja, so ein ordentliches Modulsystem hätte doch was, oder?
So.
Uint8, ja, das geht gleich weg.
Was halt auch legendär ist an C++, sind die hilfreichen Fehlermeldungen.
Erstmal irgendwo ein Komma vergessen und hier 30.000 Zeilen.
Übrigens wisst ihr, was meine Lieblings, meine Lieblings, ähm,
C++, Moment, ich muss mal kurz raussuchen,
weil ich weiß gar nicht mehr genau aus dem Kopf, wie es funktioniert,
was meine Lieblings-C++-Fehlermeldungs-, äh, Generierungstaktik ist.
Moment, ich zeig's euch.
Ja, passt mal auf.
Also, wenn ihr mal unendlich viele C++-Fehler sehen wollt, dann müsst ihr das hier machen.
Sieht nicht so böse aus, oder?
Also, sieht nicht so, sieht nicht so böse aus.
Oh, mittlerweile erkennt er das sogar.
Oh!
Er erkennt das, okay, gut, gut, ich hab nix gesagt.
Achso, Moment.
Ah, ne, ne.
Wart.
Ne.
Moment, wie ging das aber?
Wie ging...
Wart.
Moment.
Wie, wie, wie war...
Ist ein Schlüsselwort?
Okay, okay, okay.
Ähm, dann geht das gar nicht mehr.
Dann geht das gar nicht mehr.
Ähm...
Das ist ja cool.
Das haben...
Okay, das haben sie mittlerweile auch mitgekriegt, dass das, äh, dass das ein Fehler ist.
Guckt's euch mal an.
Ja.
Weil ein Vergleich verkehrt ist.
Aber ich bin begeistert.
Die letzte Version von den, äh, C++-Tools in Visual Studio hat das noch nicht als Fehler angezeigt.
Da wusstest du gar nicht, was Sache ist, warum es kaputt geht.
Aber es ist, es ist schon ein bisschen merkwürdig, ne?
Warum darf man...
Das ist auch so eine inkonsistente Geschichte von C++.
Warum darf ich...
Also, ich...
Das ist rhetorisch gefragt.
Ich weiß, warum ich darf, weil die, äh, weil die hier Equals überladen haben.
Aber, äh, warum ist das, warum ist das überhaupt so?
Und warum ist das im Standard so, im Standard-Library?
Warum darf ich einen Null-Pointer einem Standard-String zuweisen, aber warum darf ich dann wiederum diese, diesen Standard-String nicht checken, ob er Null ist?
Ergibt erstmal keinen Sinn, ne?
Äh, wie so vieles in C++ ergibt das keinen Sinn.
Ähm, das liegt daran, weil der gar kein, weil das gar kein Null-Pointer ist, weil der, wenn er einen Null-Pointer kriegt, einfach einen leeren String draus macht.
Also, die haben, die haben das hier überladen.
Also, es kann sein, dass es nicht hundertprozentig stimmt.
Ich hab mir die Implementierung jetzt nicht genau angeguckt.
Aber, soweit ich das verstanden habe, die haben diesen Assign-Operator überladen.
Und wenn sie einen Null-Pointer bekommen, machen sie einfach daraus das hier.
Magic.
Machen sie daraus.
Ah, das funktioniert jetzt ja.
Äh, Moment, warum funktioniert das nicht?
Das ist Mist.
Das muss funktionieren.
Der Vergleich.
Aber, also, das hier ist das gleiche wie das hier.
Es ist halt einfach wir.
Warum macht es Magic da unten drunter?
Warum? Weshalb?
Es ergibt für mich keinerlei Sinn.
Wenn man, wenn man das nicht gegen Null-Pointer checken kann.
Okay.
Dann ist es halt ein Typ, der nie Null sein darf.
Ist in Ordnung.
Aber dann sollte man auch nicht equals Null-Pointer sagen können.
Sondern einfach, dann gibt es Error, wenn man Null-Pointer zuweist.
Oder am besten Compiler-Error.
Type cannot be null.
Irgendwas halbwegs, wie sie immer sagen.
Irgendwie sowas, was halt sane ist.
Was halt irgendwie noch, das heißt insane auf Deutsch, noch, noch bei Verstand ist.
Irgendwie.
Gesund.
Gesund.
Ja, was halt noch gesund ist.
Und nicht so Magic-Dinger.
So, wir waren hier aber gerade bei unserem Web-Server.
Und jetzt gucken wir mal, ob das funktioniert.
Ich uploade, ich uploade, nee, habe ich gerade abgeloadet?
Ich uploade mal.
Auf unseren ESP.
Und dann checken wir mal, ob das funktioniert.
Oh, huge upload speed.
Huge upload speed.
Ich reg mich nicht auf wegen Visual Studio Code.
Das ist tatsächlich ganz gut.
Ich reg mich auf wegen C++.
Weil vieles davon, keine Visual Studio Code, nix.
Da ist C++ dran schuld.
Äh, Johnson, in dem Fall ist es ganz einfach.
Wenn du das für so einen Microcontroller machen willst.
Installier dir Platform.io und es macht alles für dich.
Komplett vorkonfiguriert.
Okay, also Telnet.
Oh, wir haben was vergessen.
Das geht noch gar nicht.
Telnet, was haben wir für eine IP gekriegt?
Ja.
IP 443.
Äh, geht übrigens nicht.
Oh, guck mal da.
Wir haben eine Verbindung zum Server.
Ha, hat funktioniert.
Gut, mehr funktioniert nichts, weil ich rufe ja nirgends ab.
Also, ihr seht, der Server läuft.
Port 443.
Da.
Connected to.
Was wir jetzt auch machen können, ist ein Curl.
Aber das wird jetzt schon mal nicht.
Also, da passiert jetzt nix.
Kann ich euch gleich sagen.
Das mag nix.
Weil das macht ja noch auf der Ebene nix.
Der kann sich connecten und kann was hinschicken.
Das ist aber alles.
Mehr kann er nicht.
Weil es kommt ja nix zurück.
Also, was wir jetzt gemacht haben ist,
einen Server gestartet, der auf Port 443 läuft.
Kein HTTPS, kein sonst was, nix gerade.
Wenn ich versuche, mich auf HTTPS zu connecten,
dann sagt er hier, okay, Verbindung ist connected.
Und jetzt versucht er, einen SSL-Handshake zu machen,
der noch nicht funktionieren kann,
weil wir haben ja noch nix gemacht,
außer eben den Server zu starten auf Port 443.
Also, der macht keinen SSL-Handshake,
kein Zertifikat-Austausch oder irgendwas.
Also, Johnson, wenn du keinen Microcontroller programmierst,
habe ich das noch nie gemacht.
Die einfachste Variante ist vielleicht dann wirklich
sowas wie das hier mal in der Trial-Version auszuprobieren,
ob das nicht einfach alles schon gut einrichtet.
Keine Ahnung.
Das Problem an C++ und diesem ganzen Uralt liegt daran,
dass halt viele Tools teilweise richtig uralt sind
und das Setup eklig ist.
Dazu kommt, dass C++ keine eingebauten Module
und Package-Manager hat.
Also, das heißt, du musst dir auch irgendwelche
Header-Files rumkopieren oder was nicht Offizielles verwenden.
Das macht es alles in der Handhabung nicht schön.
Also, wenn du einfach nur anfangen willst zu programmieren,
ohne dass es jetzt C++ sein muss,
würde ich was anderes nehmen als C++.
C++ ist an vielen Stellen einfach nur blanke Zumutung.
Wenn man da ein bisschen was Neues gewöhnt ist.
Oder muss es C++ sein?
Also, wenn es C++ sein muss,
ja, dann kommst du nicht drum herum dann.
Gut, aber was man jetzt sieht, ist, Server läuft
und wir können uns zum Server verbinden.
SSL funktioniert noch nicht.
So, das ist das Nächste, was wir jetzt machen.
Jetzt gucken wir, dass irgendwie SSL funktioniert.
By the way, das hat übrigens in meinem Test nicht funktioniert.
Da ging mein WLAN nicht mehr, wenn ich den Kram hier so eingestellt habe.
Also, so ist mir das ja sogar noch viel lieber,
wenn ich das alles im Header-File schreiben kann.
So, das Nächste ist, was wir jetzt machen müssen.
Also, Verbindung zu diesem Server geht.
Hallo, Kengin.
So, übrigens, ich zeige euch nochmal was.
Ich habe mir nämlich was gebastelt.
Die wollen ja hier aus irgendwelchen unerfindlichen Gründen
den Port als String haben.
Und wir übergeben den Port aber,
wie ich es persönlich für sinnvoll erhalte,
als int.
Weil ein Port ist halt einfach eine Zahl.
Und wir übergeben es auch nur als int 16,
weil, wie viel passt in den unsigned int 16 rein, Leute?
Big Brain Chat.
Wie viel passt da rein?
Unsigned, unsigned.
Wohlgemerkt.
64k, ja, genau.
Ja.
So in Dezimal.
Ich will da auf was bestimmtes rauf.
Deswegen muss jetzt einer die richtige Sache sagen.
Ja, okay, der Hörwing sagt schon, genau.
Flintstone sagt 65.536, exakt.
Und wer in Netzwerktechnik aufgepasst hat, weiß,
dass es auch 65.535 Ports gibt.
Das heißt, in dem Fall bietet sich das einfach an,
ein unsigned int 16 zu nehmen.
Weil hier passen exakt so viele Zahlen rein,
wie es Ports gibt.
Und 0.
Mal draufgeschissen auf 0.
Ist jetzt erstmal egal.
Ihr findet immer irgendwas, was ihr nehmt.
Doch, Port 0 gibt es tatsächlich.
Es gibt tatsächlich Port 0.
Port 0 ist reserviert.
Haben sie sich gedacht,
ne, mit so einem Plötzchen fangen wir erst gar nicht an.
Aber den gibt es theoretisch natürlich, ja.
Weil es auch ein unsigned int 16 Nummer ist.
Man könnte wahrscheinlich wirklich was auf Port 0 laufen lassen.
Habe ich noch nie probiert, ob das funktioniert.
Probieren wir mal aus.
Wir haben mal root.
Guck mal, was auf Port 0.
netcat minus listen.
Ähm.
Äh, äh.
Moment, äh.
Wie ist meine IP?
Wobei, für listen braucht man gar keine IP, ne?
Port 0.
Okay.
Hört der jetzt wirklich auf Port 0?
Äh, Moment.
Ich mach das, ich mach das glaube ich falsch.
Ich glaube, man musste,
das kam mit netcat-Geschichten nie aus dem Kopf.
Ach, minus p, genau.
Ja, ja, ja.
Nee, war das minus?
Bin ich jetzt blöd?
Wie, das ging doch so.
Und jetzt ist das die IP weglassen, ne?
Okay.
Gucken wir mal, ob man auf Port 0 lauschen kann.
Nee, das mag er nicht.
Dann wählt er random einen Port aus.
Also, man kann auf Port 666 lauschen.
Dann lauscht er auf Port 6666.
Aber, ähm, auf Port 0 darf man nicht lauschen.
Dann sucht er sich random einen aus, wie es aussieht.
Na gut.
Darf man auf Port 1 lauschen?
Auf Port 1 darf man lauschen.
Auf Port 0 darf man nicht lauschen.
Ja, wahrscheinlich ist es besser.
Hätte das sein können.
Habe ich noch nie ausprobiert.
Der Chat, der Chat bringt mich immer auf so Ideen.
Guck mal hier.
Chat.
Chat.
Chat.
Chat.
Chat.
Chat.
Chat.
Chat.
Chat.
Das ist gut, wenn du einen random Port brauchst.
Ja, ganz ehrlich habe ich mir noch nie Gedanken darüber gemacht.
Aber, ähm, ist gut zu wissen.
Man lernt ja nie aus, was das angeht.
Also, wir haben jetzt einen Server gestartet auf Port 443.
Die wollen das hier ja irgendwie als String haben.
So.
Als character, farklı, C-String-character-Array mit 0 hintendran.
Und zwar, ihr seht ja, ich habe hier diese Format-L어� оперiert, dass ich eine objective
diese Format-Library drin, die ist übrigens die einzige C++-Library, die ich wirklich gerne verwende,
weil damit kann man seine Strings so formatieren, wie man das beispielsweise aus Python kennt
oder ein bisschen teilweise, wie man es jetzt aus dem neuen Format-String aus C-Sharp kennt.
Also man muss sich nicht mehr mit Printf rumärgern, man kann sowas machen.
fmt format answer und dann kannst du hier den Kram reinschreiben.
Also ein bisschen wie Printf, allerdings deutlich besser als Printf, kann mehr Typen, hat mehr Format-Optionen,
kann eigene Typen formatieren.
Nicht nur wie Printf, was irgendwie nur eine Handvoll Sachen kann.
Named Arguments, das was C++ schon lange fehlt.
Übrigens auch so ein Thema in C++, was ich übelst beschissen finde.
C++ hat...
Kannst dich auch formatieren, muss man ausprobieren.
Es kann so viele Sachen machen, dass es auch dein Hirn formatiert wahrscheinlich.
C++ hat...
C++ hat ja sowas wie Default Arguments.
Also ich kann jetzt sagen, keine Ahnung, mein Standard-Passwort ist blub.
Das heißt, wenn ich diese Funktion aufrufe und nicht pw übergebe, dann setzt er pw auf blub.
Also es hat Default Arguments.
Allerdings, irgendwie hat sich einer im C++-Gremium gedacht, wir machen Default Arguments ohne Named Arguments.
Was heißt...
So.
Was zum Beispiel heißt, wenn ich jetzt sowas hier habe, dann muss ich immer alles angeben.
In einer normalen Sprache könnte man...
Ich mach da mal eine Funktion draus, da kann ich euch das besser zeigen.
Also.
So.
Wir haben jetzt hier die Funktion Start.
So, die Funktion Start kann ich folgendermaßen aufrufen.
So.
So.
Das war's.
Was hat er für Schmerzen?
Stimmt.
So.
Was da jetzt passiert ist, der ruft die Funktion auf mit diesem Port und nimmt für User...
Und für Passwort das Default Argument, was ich hinten angegeben habe.
Das ist ja schon mal gut, dass die sowas eingebaut haben in C++.
Aber was es jetzt Fail macht ist, dass C++ keine Named Arguments hat.
Das bedeutet, mal angenommen, ich möchte jetzt nicht User setzen, sondern nur Passwort setzen, dann geht das nicht.
Also wenn ich sowas hier machen möchte wie...
Gleich 0, das geht nicht.
Das gibt's nicht.
Das kann das nicht.
Also ich muss immer sagen...
Ich muss immer sagen...
Neuer User, neues Passwort.
Ich kann da keine Named Arguments...
Also ich weiß nicht, wie man auf die Idee kommt, Default Arguments einzuführen, allerdings nicht zeitgleich Named Arguments.
Verstehe ich nicht.
Das eine braucht das andere irgendwie.
Und in dem Fall ist es ja noch relativ sinnvoll, wenn man das Passwort ändert, dass man auch den Username ändert.
Aber überlegt euch mal, ihr habt jetzt irgendeine Funktion, die was vom Dateisystem liest.
Sowas hier nach dem Motto File Name, keine Ahnung, Size, Mode, keine Ahnung, Blocking, irgendwas.
So, ihr habt irgendwas langes.
So und es wurde im Prinzip für alles Default Sachen definiert.
Und die Default Sachen sind gut.
Und ihr wollt bloß sagen, okay, ich will es nicht Blocking, sondern ich will es asynchron haben.
Dann könnt ihr nicht einfach sagen, okay, wir machen jetzt hier Datei, Datei Index, HTML und sagen jetzt Blocking gleich False.
So wäre das in jeder sinnvollen Programmiersprache gelöst worden.
Also gelöst wäre das in jeder sinnvollen Programmiersprache gelöst.
Oder so oder so, irgendwie so.
Ihr wisst, was ich meine.
Aber das geht nicht, weil C++, ich gedacht habe, nein, Named Arguments brauchen wir nicht.
Und das heißt, wenn ich diese Funktion hier aufrufen will und möchte nur das hier hinten ändern, alles andere ist okay, muss ich das jedes Mal so machen.
Und gucken, dass ich auch ja nicht das Falsche vergesse, dass das Falsche mache.
Total hängen geblieben.
Dazu kommt noch das Problem, bei langen Funktionsaufrufen ist es so, dass man sieht hier an dieser Funktion nicht, was was ist.
Also man hat keine Ahnung.
Dass hier File Name ist, dass das hier Size ist, dass das hier Mode ist und das hier Blocking oder nicht, hat man nicht.
Mit Named Arguments hättest du das.
Weil dann würde es jetzt beispielsweise reinschreiben, okay, ich will den Mode ändern, ich will sagen Mode gleich Read.
Das wird dann funktionieren, aber nein, in C++ ist das Ganze nicht.
Es gibt so einen Antrag dafür, glaube ich, im C++ Standard, aber sowas kommt nie.
Man muss sagen, ordentliche Programmiersprache.
Wie sagen wir, mach sie Sharp oder sowas.
Javascript kann das übrigens, glaub mittlerweile auch, also wenn Javascript was schon kann, ordentliche Programmiersprache, sowas wie C Sharp heißt und sonst was, die können das seit, puff, zehn Jahren oder so.
Wenn man Null übergibt, nein, wenn man Null übergibt, ist das, du hast ein Parameter gesetzt.
Du musst es höchstens weglassen.
Oder aber, wenn du das Default behalten willst, musst du explizit, mal angenommen, du willst das Default behalten, ja, und du willst nur Blocking ändern.
Du musst explizit das angeben, was du oben schon mal geschrieben hast, nur um hier dann Faults reinzustecken.
Ups, richtig peng geblieben.
Äh, äh, Dings, äh, C Sharp kann das, Ruby kann, also das können die meisten Programmiersprachen, C++ hat es bis heute nicht geschafft.
Ist halt C++, ne.
So, also wir haben den Server gestartet, Server läuft auf Port 443.
Wunderbar.
Ah, also.
Normalerweise läuft er da. Jetzt ist er gerade abgeschaltet.
Oder abgekackt, irgendwie.
Aber, der läuft auf Port 443.
Und, ähm, ich habe euch ja gerade diese Formatlib gezeigt.
Du kannst es mit Function Overloading, ja, das ist ein gutes Beispiel, das kann ich auch nochmal zeigen.
Du kannst es mit Function Overloading, äh, teilweise machen, aber, ich meine, ganz ehrlich, es wird, es wird noch eklig, ja.
Äh, es wird noch eklig.
Du kannst das natürlich mit Overloading machen.
Also du kannst sowas hier machen.
Aber da sieht man auch schon gleich, dass das irgendwie eine merkwürdige Idee ist, ne.
Also du kannst natürlich sowas hier machen.
Aber das, das, das ändert auch nichts daran, dass du nicht einfach mal das letzte Argument ändern kannst, ne.
Du kannst natürlich sowas hier machen.
Das wird funktionieren, aber da kannst du auch nicht das letzte Argument ändern.
Was du machen kannst ist, äh, jede nur erdenkliche Kombination einen Overload erstellen.
Aber das heißt, du brauchst dann schon für ne, für ne, äh, sagen wir mal, für ne Funktion wie Read mit, mit ein paar Parametern, die fünf, die fünf Parameter bekommt.
Da bräuchtest du ja schon allein schon.
Hab ich nicht.
Was ich?
Keine Ahnung.
40 Overloads oder so.
Und dann kommen die Big Brain Leute wieder an den Start und basteln dann für C++ irgendwie nen, äh, Pre-Prozessor-Ding, was das für dich macht im Zweifelsfall noch.
Am besten sowas einfach in die Sprache einbauen, dann ist es auch, äh, benutzbar.
So.
Also, so.
Der Server läuft auf Port 443.
Ich kann euch jetzt mal die, die, äh, was zeigen von dieser Formatlib, was wirklich praktisch ist.
Ähm, okay.
In, in dem Fall ist es jetzt, ehrlich gesagt, ziemlich, ziemlich, äh, ziemlich low brain.
Aber unterm Strich, was wir jetzt machen müssen, ist, nen U16 in zu nem String zu konvertieren.
Da gibt's bestimmt eingebaute Methoden, aber, ähm, wir können das mit der Formatlibrary machen.
Ich hab mir da so ne kleine, so ne kleine Wrapper-Funktion drum gebastelt, die nen C++-String draus macht.
Äh, die nen Arduino, äh, String da draus macht.
Ist im Prinzip unter der Haube immer noch jedes gleiche wie die Formatlibrary.
Äh, und das sagen wir jetzt hier, äh, nicht da.
Format, ähm, Zahl, zack, Port.
So.
Und weil's all this is, müssen wir so sagen.
So.
Und jetzt wandelt er den, wenn ich's richtig gemacht hab, jetzt wandelt er die Zahl in ein String um.
Ich weiß ehrlich gesagt nicht, was die empfohlene Variante ist in C++.
Also die, eine robuste Variante, wie man ein Int in einen String umwandelt.
Keine Ahnung, was es da eingebautes gibt.
In .NET würde ich's übrigens genauso machen, ne?
Also in .NET würde ich auch, würde ich auch sagen, äh, var, blub gleich, ähm, äh, Moment.
Jetzt steh ich aufm Schlauch. Wie sieht's in C Sharp nochmal aus?
Moment, wie sagt das jetzt in C Sharp nochmal aus?
Ach hier, ja, Port. So.
So wird man, so, so wird's in C Sharp aussehen.
Hier setzt er den Port ein, ist noch ein bisschen kürzer als das hier.
Hier setzt er den Port ein, schon hast du die Zahl als String. Easy.
Hast du irgendwelche aktiven Haskell-Projekte?
Nein.
Genau. Und du könntest natürlich in C Sharp, da hab ich gar nicht dran gedacht, du könntest machen Port to String.
Ja, das wär die einfachste Variante, richtig.
Aber sowas gibt's in C++ selbstverständlich nicht. Wo kommen wir denn da hin?
Äh, Jungfels, Moin.
Schön, dass du am Start bist.
Excellent.
Chat-IQ steigt wieder ins Unermessliche hier.
Ich seh's schon.
Gut, jetzt haben wir einen Serverlaufen auf Port 443.
Und jetzt kommt die eigentliche Big-Brain-Variante, was ich vorhab.
Nämlich, dass das ganze Multithreaded funktioniert.
Weil, man darf nicht vergessen, wir machen das hier auf einem, auf einem, äh, ESP32-Board.
Und zwar auf dem hier.
Und der ESP32 hat zwei Kerne.
Um genau zu sein, hat er drei.
Aber der dritte ist jetzt erstmal egal, den kann man dafür nicht verwenden.
Ähm.
Der ESP32 hat zwei Kerne mit jeweils 240 MHz.
Also das ist für so ein kleines Scheißding, was in der billigsten Ausführung 2,50 Euro kostet, doch ziemlich ordentlich.
Und dementsprechend kann man auch den, äh, Webserver multithreaded machen.
Das heißt, pro Connection machen wir den eigenen Thread auf und lassen den unabhängig voneinander laufen.
Das hat den Vorteil, dass man zum Beispiel...
Ähm.
Logs dumpen kann über HTTP.
Gleichzeitig, äh, aber auch noch den Webserver verwenden kann.
Für zum Beispiel ein Dashboard.
Das geht normalerweise nicht gescheit, ansonsten muss eins immer warten.
Und gerade für Logs ist das doof.
Weil Logs will man möglichst zeitnah sehen.
Und spätestens wenn die Kiste rebooted hat, sind die Logs eh weg.
Und zum Beispiel, wenn man ein Update hochlädt.
Möchte man gerne schon auf einer zweiten Verbindung sehen können.
Okay, wenn man irgendwas debuggen will, okay, was für Logs kommen da eigentlich, ja?
Und das ist ja das, was ich schon seit einer Weile probiere, einen Server zu basteln.
Oder einen Webserver zu basteln oder zu verwenden, falls es fertige Sachen gibt.
Über den ich ordentlich Updates machen kann.
Über WLAN, der HTTPS kann.
Über den ich Updates machen kann, über das WLAN.
Firmware-Updates über das WLAN machen kann halt.
Auf dem Controller.
Und nebenbei mir auch noch die Logs über HTTP anzeigen lassen kann.
Also sprich hier die serielle Ausgabe.
An sich eigentlich kein Problem, aber die ganzen Server, die ich gefunden habe, taugen irgendwie nix.
Meiner wird nicht wirklich besser werden, kann ich euch gleich sagen.
Aber meiner wird wahrscheinlich das machen, was ich will und sonst nix.
Wo hast du es gekauft? Bei Banggood habe ich es gekauft.
Banggood.
Ist keine Porn-Seite, ist eine China-Shop-Seite.
Banggood.
Gibt es glaube ich sogar gerade im Angebot.
Dieser Shop hat eigentlich exzellente Bewertung.
Banggood. 1,9 Sterne.
Itigo T-Display.
Der ist aber nicht schlecht, hab das schon oft bestellt.
Der D1 Mini ist gut, aber das ist kein ESP32, das ist ein ESP8266.
Das ist 80 MHz Single-Core.
Ist ne Nummer schwächer.
So, also aktuell gibt es die im Angebot hier auf Banggood.
Und sogar aus UK, glaube ich.
Aber dann ein bisschen zu teuer.
Gut.
China-Shop.
6,99 Dollar.
Das ist halt ein komplett fertiges Kit.
Also sprich das Board mit den Pins und halt dem Display.
Corona kommt gleich mit.
Ja, das ist ein bisschen und das ist, guck mal, das ist 14 Tage unterwegs.
Da musst du dir keine Gedanken machen.
Da bestellt man sich gleich mal 10 Stück.
Wenn man damit öfters was machen will.
Oder 5, sag mal 5 Stück.
5 Stück kann man bestellen.
Und dann bezahlst du im Endeffekt aus China gerade mal 34,95 Euro inklusive Versand für ein komplettes Board mit Display.
Da kannst du dich nicht beschweren.
Wenn du was einfacheres brauchst, wenn du nicht unbedingt ein Board mit Display haben willst oder sowas.
ESP32 gibt es dort für unter 3 Dollar.
Das Stück.
Kleine andere Module.
Aber ich finde das hier gerade gut.
Stromverbrauch mit Display.
Machst mich hier was.
Keine Ahnung.
0,1 Watt.
Weiß ich nicht.
Wenig.
Sehr wenig.
0,1 Watt.
0, was?
Keine Ahnung.
Nicht viel auf jeden Fall.
Das Ding.
Man hat so im Durchschnitt irgendwie bei 5 Volt zieht das irgendwie so 150 Milliampere oder so.
Kannst du dir ausrechnen.
5 mal 0,15.
So.
Also.
Brauch volle Pulle.
Beim WLAN senden mit Display an ungefähr 0,75 Watt.
In Wirklichkeit ist es wahrscheinlich ein dicke mehr.
Aber.
Also.
Die brauchen nicht wirklich viel.
Gibt es die Dinger auch mit Relays?
Klar.
Das Schöne daran ist ja, dass du massig viele, zumindest beim ESP32, GPIO Pins hast.
Da kannst du anschließen was du willst.
Da kaufst du dir noch einen 50 Cent Relay dabei und alles ist gut.
Bei dem hier hast du einen Ticken weniger GPIO Pins.
Aber immer noch genug wie du siehst.
Weil das Display braucht ja auch ein paar GPIO Pins.
Insane.
Stufe 1.
Dankeschön.
Big Brain Subscription.
Aber wenn du dir mal so einen anderen ESP32 anschaust.
Zum Beispiel den hier.
So ein NodeMCU.
Da siehst du.
Du hast.
Hier.
Du hast massig GPIOs.
Und da kannst du ohne Probleme so viele Relays anschließen.
So viele Relays brauchst du nicht.
Ja.
Also.
Damit kann man eigentlich nicht viel falsch machen.
Und am besten.
Das ist so mein Universal Tipp.
Wenn es um so.
Wenn es um so Controller bestellen geht.
Am besten.
Wenn ihr irgendwie mal so auf Banggood seid.
Und euch irgendwas raushaut.
Oder auf AliExpress geht.
Geht übrigens genauso.
Ähm.
Wenn ihr da gerade seid.
Und euch irgendwas raussucht.
Also sagen wir jetzt mal.
Ihr nehmt hier irgendwie den.
Irgendwie.
NodeMCU oder so.
Das sind eigentlich auch relativ beliebte.
Beliebte Boards.
Sagen wir mal.
Ihr wollt jetzt das da haben.
So.
Ähm.
Und das Ganze irgendwie fünfmal.
Nehmt das mehr als einmal.
Nehmt.
Nehmt das.
Die haben WiFi.
Die haben Bluetooth.
Die.
Also die Dinger haben wirklich.
Die haben alles drauf gepostet.
Die haben alles drauf gepostet.
Die haben alles drauf gepostet.
Die haben alles drauf gepostet.
Die haben alles drauf gepostet.
Die haben alles drauf gepostet.
Wrapackt.
Was irgendwie geht.
Du hast.
Ähhh.
WLAN.
Allerdings 2.4.
gears.
WLAN Ich glaube die.
Neuenen.
P22 könnten S2.
Die accused.
clinical Smartphone Sakura vadid werd honorsicherer cine-sc стороны übrig.
Ja die neuen haben glaub fünf.
Die sind nicht wirklich neu.
Das ist eine andere Produkte.
Also Ost dazu teilen.
32 Es 2.
Das ist nicht wirklich neue.
Es ist damit soll eine Produkte wie beispielsweise auch eine CPU und so was.
Also Leincome von der Leistungsfähigkeit spending.
Es længste espera.
sp 32 immer noch am besten von denen die haben alles mögliche darauf was du hast
wlan du hast bluetooth low energy bluetooth 2 cpu kerne mit jeweils 240
megahertz im dritten low power cpu kern mit 8 megahertz also features dass das
gedöns hat wirklich also die haben da die haben echt alle register gezogen was
da drauf ist genau also zwei dual core dual core cpu 240 megahertz was echt
vieles die haben sie nicht drauf sie kann es aber vielleicht mit irgendeinem
schild nach nach russ das habe ich mir noch da habe ich noch nie geguckt ob es
da nicht irgendwelche zusätzlichen sachen gibt keine ahnung ob es da
irgendwelche sikbi sachen gibt keine ahnung weiß nicht wie p3 habe ich noch
nicht daheim sorgen du hast wie gesagt zwei
20 32 cpu 240 megahertz was ziemlich ziemlich schnell ist so die arduino sind
kacken da richtig dagegen ab du hast ein low power prozessor und der dritte was
quasi drei cpus der low power prozessor der hat zwar nur 8 megahertz aber das
trickreiche daran ist haben übrigens auch programmiert in einem stream von
vor zwei jahren oder so schon ewig her du kannst wenn du den sensor dran hast
an diesem teil da kannst du mit dem low power prozessor diesen sensor abfragen
und erst dann kannst du mit dem low power prozessor diesen sensor abfragen und
erst dann kannst du mit dem low power prozessor diesen sensor abfragen und
erst wenn der sensor wird sich ändert und du darauf reagieren möchtest kannst du
erst wenn der sensor wird sich ändert und du darauf reagieren möchtest kannst du
quasi mit dem low power prozessor dann eigentlich die eigentliche cpu starten
quasi mit dem low power prozessor dann eigentlich die eigentliche cpu starten
das spart halt ungemein strom also du fragst deinen sensor quasi low power ab
das spart halt ungemein strom also du fragst deinen sensor quasi low power ab
und sagen wir mal sagen wir mal du hast irgendwie einen temperatursensor in
und sagen wir mal sagen wir mal du hast irgendwie einen temperatursensor in
deinem fischteich oder soja und du möchtest eine warnung bekommen wenn der
deinem fischteich oder soja und du möchtest eine warnung bekommen wenn der
fischteich unter zehn grad wird weil du weißt okay vielleicht unter fünf
grad da ist gefriert du möchtest abdecken sondern fragst du deinen sensor ab mit dem
low power prozessor die cpu kerne sleep wlan sleep bluetooth lieb alles alles lieb und sobald
der low power prozessor und ein alter fragt keine ahnung der fragt dann alle zwei minuten fragt er
nein oder alle halbe stunde reicht ja alle halbe stunde fragt er deinen sensor ab und sobald der
sensor sagt a 5 grad dann wächst du mit diesem ultra low power prozessor eben dein seiner haupt
cpu und dort verbinden sich dann im wlan und senden die nachricht fischteig temperatur unter
5 grad oder was auch immer der spart spart strom wenn man wenn man mit esp 32 was machen möchte
weil hier gerade jemand fragt wie schließt man die am besten an strom an usb einfach usb kabel
dran und gut ist es gibt die möglichkeit über batterie allerdings muss man das richtige bord
dafür nehmen die meisten developer boards also sprich boards wo alles schon online
drauf ist und usb anschluss und alles hat sind nicht so stromsparend dass man sie gut
an den akku anschließen könnte die sind zwar stromsparend aber um einer batterie oder einem
akku zu laufen musst du halt schon ziemlich stromsparend sein dass das über den sinnvollen
zeitraum läuft und es gibt es gibt dafür ein paar ganz gute boards zum beispiel das ist der
erste der mir einfällt der ist ein bisschen teurer 22 ist deutlich zu teuer
gibt es das board das hat halt eine richtig richtig geringen idle idle verbrauch und das
eignet sich auch das kannst du dann auch mit einem 1200 milliampere milliamperestunden akku
kannst du noch zwei jahre laufen lassen du brauchst aber halten low power board dass
das gut funktioniert ansonsten einfach usb usb und gut ist so du hast nicht so viel und nicht
so viele waren wo man wirklich für viel am stück verwenden kann von trick board trick
board ist aber fail in dem sinn weil es trickst das trick board ist nicht wirklich low power das
trick board hat einen timer was quasi alles abschaltet und den timer ab und zu aufweckt
den kern und irgendwie glaubt einen timer eine uhrzeit checkt oder so und das trick board ist
esp 266 kein sp 32 du kannst den strom auch über pins anschließen das geht auch also wenn du eine
dann kannst du die also besser gesagt akku dann kannst du die auch an die pins anschließen manche
boards haben dafür schon einen passenden akku anschluss da guckt der hier zum beispiel der
hat so einen passenden akku anschluss für so eine für so einen sind diese normalen akku form faktor
da es gibt viele boards muss man einfach gucken was man machen will welche man braucht nur mal
kurz hier drüber zu gehen was das ding noch für features hat wie gesagt im vergleich zu den
ich meine wir reden hier von 520 kilobyte ram oder um genau zu ein kimi bei dh und für alle die
das jetzt ganz genau wissen wollte es nicht viel als man als damit kann es keine allzu großen
sprüge machen du bekommst dafür wlan bluetooth beides relativ neu ist gerade wieder nicht super
neu aber relativ neu du hast analog digital convertor digitaler konverter
Touch-Sensor, SPI, was ist denn, I2C, das kenne ich gar nicht, du hast I2C, zwei Busanschlüsse, du kannst an einen I2C, ich glaube bis zu 86 Geräte oder so anschließen, wenn die Uhr einsteht, du hast drei serielle Verbindungen, du hast Anschlüsse für SD-Karten und sonstige Geschichten,
du kannst theoretische Netzwerkkarten anschließen, du kannst für Autos eh eine CAN-Bus-Sache machen, du kannst das Ding Remote steuern über Infrarot-Fernbedienung, du kannst PWM machen für einen Motor, für einen Lüfter, für sonst was, du kannst LED-PWM machen, also sprich auch LEDs steuern, die über PWM gesteuert werden,
das hat einen eingebauten Magnetsensor, der übrigens sackt, das hat einen eingebauten Temperatursensor, der übrigens auch sackt, also Features hat das Ding wirklich ordentlich.
Also im Vergleich zu so einem Arduino 5000% mehr, dafür würde ich sagen, sind die Arduinos ein Tick robuster, wobei die, ganz ehrlich, die ESP32 geht auch nicht wirklich kaputt,
aber so ein Arduino ist halt so ein Ding, das kannst du quasi drei Jahre, jetzt mal übertrieben gesagt, drei Jahre im Schlamm verbuddeln und das geht danach immer noch, das ist bei so einem ESP32 eher nicht so.
So, jetzt habe ich mich dazu mal ausgelassen.
Okay, wo sind wir stehen geblieben? Genau, wir wollen jetzt mit dem Big Brain Part anfangen, und zwar, dass wir die Verbindung multithreaded annehmen.
Also wir haben ja gesehen, wir haben hier einen Server offen, ja, ich muss mal kurz den ESP resetten, dann kann ich euch auch mal zeigen, dass der Server läuft,
weil das WLAN geht nach 10 Minuten aus, das muss ich nach 10 Minuten immer neu verbinden, 10 Minuten sind jetzt um, ich habe 10 Minuten lang geschwätzt,
so, schauen wir ihm mal zu, sehen wir ja gleich, wenn er gebootet ist, oh, ah ja ja, ah ja ja, wunderbar, 1544, ja, so, Server läuft, Port 443 ist auf, also sprich, das funktioniert,
und wir sehen es ja auch, wenn man es mit Curl auf HTTPS probiert, er sagt halt, okay, ich kann mich verbinden auf den Port, aber wenn ich jetzt meinen TLS Handshake, SSL Handshake machen will, das geht nicht.
Ist ja auch klar.
Wir lesen ja noch überhaupt nichts ein und machen ja nichts.
So, und jetzt müssen wir dafür sorgen, dass der die Verbindung annimmt, also erstmal muss er die Verbindung richtig, richtig, also die, die, die Verbindung annehmen,
und dann muss er einen SSL Handshake machen, dass ich eine Verbindung über HTTPS herstellen kann.
So, ähm, und wie man das jetzt machen, ist folgendes, ich habe ja gesagt, wir machen das Ganze multithreaded, also sprich, pro Verbindung, äh, ja, genau, pro Verbindung machen wir ein Thread auf.
So, und das machen wir.
So, folgendermaßen, die, ich, ich zeige mal ganz kurz zwei Varianten, die man eingebaut verwenden kann, wenn man mehrere, also, ne, wie gesagt, der ESP32 hat hier zwei Kerne und hat ein, hat ein Mini-Betriebssystem drunter mit einem Scheduler, der quasi, ähm, mehr, also, man hat hier zwei Kerne, aber man kann bis zu, standardmäßig, glaube ich, bis zu, bis zu 34, bis zu 32 oder 64, glaube ich, ist standardmäßig eingestellt.
Ähm, positiv.
Prozesse oder, oder Tasks laufen lassen, weil die haben einen Scheduler drunter, der quasi CPU-Zeit halbwegs gleichmäßig verteilt.
Also, so ein bisschen wie das Windows auf eurem Desktop auch macht.
Also, sprich, ich habe zwar nur zwei CPU-Kerne, aber ich kann bis zu 32 Tasks starten, die sich je nach Priorität die CPU-Kerne teilen und, äh, halt mal Zeit bekommen, mal Zeit, keine Zeit bekommen, dann mal wieder Zeit bekommen und sowas.
Ähm, so, zwei eingebaute Wege, um diese Tasks zu verwenden.
Ich zeige hier euch mal schnell.
Es gibt die Native-Variante, das ist wie Task Create.
Oh, Task Create.
Ah, X-Task ist X-Task Create.
Ähm, das ist die eingebaute, ähm, Funktion, um solche, also, die, die low-leveligste Funktion, um Tasks anzulegen, die es gibt.
Man kann entweder sagen X-Task Create oder X-Task Create Pin-to-Core.
Da kann man eben sagen, okay, mir ist egal, auf welchem CPU-Kern das Ganze läuft, kann es auch abwechselnd machen, juckt mich nicht.
Oder du kannst sagen, ich möchte, dass er nur auf Core 1 läuft.
Das ist ganz sinnvoll, weil, was man wissen muss, dass, äh, wenn man Arduino benutzt, Arduino, die Main-Arduino-Loop, läuft immer auf Core 1.
Das ist vorkonfiguriert, die haben das standardmäßig so eingestellt, dass Arduino komplett auf Core 1 läuft und I.O. und WLAN und so läuft auf Core 0.
Das hat natürlich, das hat seinen Charme, ähm, das hat seinen Charme, weil du kommst hier nicht in die Kirche.
Also sprich, selbst wenn ich Arduino komplett blocke und, und dicht mache, WLAN geht immer noch.
Das muss aber in dem Fall halt einfach, einfach klar sein, wenn man da seine, seine, äh, Kerne verteilt, ja.
Äh, FIPS, was du verpasst hast, ja, das kann ich dir, wir passen grad an einen, einen SSL, einen Mini-Web-Server, der SSL kann.
So, X-Task Create.
So, und hier kann man eben sagen, auf welchem Core er laufen soll.
Die Argumente sind folgendermaßen.
Als erstes muss man angeben, was man ausführen möchte.
Also zum Beispiel, äh, geben wir hier mal, äh, den Lambda an oder so.
Also irgendeine Funktion, die ausgeführt wird.
Ähm, dann muss man ihm sagen, den Namen für den Task, keine Ahnung, Qt Chat Task.
Dann muss ihm sagen, ähm, Stack Size.
Stack Size, mal ganz einfach gesagt, ist, wie viel Arbeitsspeicher der Thread der Task verwenden darf.
Gibt es den Thread?
Es sind keine vorgefertigten Sachen für, doch, es gibt, es gibt, es gibt noch eine andere Sache, aber das ist die Low-Level-Variante.
Da sagt man dann zum Beispiel, ey, du darfst, du darfst 4096, äh, Byte an, also 4K, 4 Kilobyte an RAM verwenden.
Das reicht normalerweise dicker aus, ja.
Ähm, so, da kann ich Parameter übergeben, das wollen wir nicht.
Priorität, sagen wir mal Priorität 1.
Immer der Task mit der höchsten Priorität wird ausgeführt.
Und ein Task Handle, das brauche ich nicht.
So, so ist die Native Art.
Und einen Tag zu starten.
Hier sage ich beispielsweise, was der Task machen soll.
Endlos Schleife, äh, Sensor abfragen zum Beispiel.
So würde so ein Standard, iiih, wie formatiert denn der das?
Das ist ja abartig.
Äh.
Onker, S.
So.
So würde das standardmäßig, übrigens hier noch die Parameter.
So würde das standardmäßig aussehen, wenn man einen, äh, einen Low-Level-Task machen will.
Was ist das für eine Notierung für Lambda C++?
Mehr muss ich dazu nicht sagen.
Hä, hä, hä.
Mehr, mehr gibt's nicht zu sagen.
Sieht halt nun mal so aus.
So.
Um die Sache noch komplett zu machen, man darf übrigens den Kram hier teilweise weglassen.
Dann sieht's so aus, was es nicht schöner macht.
So.
Das ist jetzt quasi, hier würde ich einen Task starten, der immer in der Endlos Schleife den Sensor abfragt.
Äh.
Ne, da gibt's keine Library für.
Es gibt eine Library für.
Es gibt eine eingebaute HTTPS-Library mit einer neuen ESP-EDF-Version.
Die ist aber rein Single-Threaded und blockt alle Forts lang.
Und es gibt, äh, Github-Projekte.
Der, äh, in Endlos-Schleifen hängen bleibt, wenn man die Verbindung abbricht.
Also.
Und auch nicht so genau das macht, wie, was ich will.
Dazu kommt, dass ich sowas schon immer mal selbst ausprobieren wollte, wie es funktioniert.
So.
Also das ist die Low-Level-Variante.
Ein Task anzulegen.
Und die ist so, die, die würde ich bevorzugen, wenn man das macht.
Dann gibt's noch die C++-Variante.
Standard Thread.
Ist im Prinzip genau das gleiche.
Bloß, dass ich weniger Optionen hab.
So.
Das ist die, das ist die C++-Variante.
Das Problem dabei ist, das funktioniert übrigens genauso, wie das andere.
Na, dann würd ich auch hier in den Lambda reinmachen und sagen, hier Endlos-Schleife True Sensor-Abfragen.
Das wär die C++-Variante.
Ihr seht, die ist ein bisschen kleiner und ein bisschen hübscher.
Aber das Problem dabei ist, wir müssen das übrigens mal so formatieren, sonst sieht's kacke aus.
Das Problem dabei ist, dass man keinerlei Config-Optionen hat für den Task, der unter der Haube angelegt wird.
Also.
Der, der C++-Variante.
Das hier macht genau das gleiche, was ich euch vorher gezeigt hab, unter der Haube.
Nur, dass es ein paar Default-Parameter setzt.
Das Problem ist, dass die wirklich, dass die eine viel zu hohe Priorität vergeben für den Task.
Die vergeben Priorität 5.
Priorität 5 ist höher als alles andere, was standardmäßig läuft.
Und dementsprechend kackt das Ding ab.
Wenn es hängt.
Also sprich, wenn ich hier sowas laufen lasse mit Priorität 5 und das ist, äh, und ich sleep'e da drin nicht.
Oder, oder ich hänge zu lange in dem Task fest.
Dann kackt mir der, da kackt mir das, das, äh, der Controller ab.
Und das nächste Problem ist, dass die Stack-Size viel zu klein ist.
Ich glaub, die, ich weiß nicht, was die Standard für ne Stack-Size haben, aber man kann einfach nicht genug RAM verwenden in so nem C++-Ding.
So.
Und deswegen, ihr wisst ja, dass ich ein C-Sharp-Fan bin, deswegen hab ich mir was eigenes gebaut.
Ich hab mir nen Wrapper gebaut, um das hier.
Und ich hab mir sehr viele Wrapper schon gebaut, weil ich, wie gesagt, C++ nicht lange ertrage.
So.
Ich hab mir nen Wrapper für das hier gebaut.
So.
Und zwar kann man das Ganze folgen, da verfolgen wir den Master-Fan, Helper, Task, Run.
Vielleicht erfüllt sich der ein oder andere jetzt an die Standard-Task-API für, äh, von .NET erinnert.
Ist ein bisschen ähnlich, weil ich, das erste ist, woran ich gedacht hab, ja.
Task, Run.
Und hier kann ich jetzt angeben, was ich, was ich, äh, was ich laufen lassen will.
Nur, dass ich bei meinem eigenen Wrapper.
Die Möglichkeit habe, wie man hier sieht, noch Stack-Size, Priorität und auf welchem Kern ich laufen will, anzugeben.
Also, ich, ich finde eigentlich eine recht sinnvolle Abstraktion, das Ganze, ne.
Wir lassen jetzt mal komplett Default alles.
Und sagen hier Task, Run.
Und was wir jetzt machen wollen, ist folgendes.
Wie gesagt, Verbindung annehmen funktioniert ja.
Jetzt müssen wir bloß sagen, Verbindung accept.
Und danach neuen Thread, also hier neuen Thread starten und SSL-Handshake machen.
So, ich hoffe, das kriegen wir heute noch hin.
Wir sind ja schon ein bisschen, wir sind noch ein bisschen am Starten.
Ich merke es auch schon, dass ich ein bisschen heiser wäre.
Zweieinhalb Stunden, zweieinhalb Stunden Big, Big Brain Programm.
So, also, wir haben jetzt einen neuen Task gestartet und da drin machen wir jetzt eine Endlosschleife.
Endlosschleife, immer beste.
So, wir haben eine Endlosschleife drinne, die Connections annimmt.
Und zwar funktioniert das folgendermaßen.
Ähm, ich habe hier gesagt, er soll auf Port 443, hier, Port 443 lauschen.
Port 443.
So, und damit das Ganze funktioniert, der, also der nimmt jetzt Connections auf Port 443, äh, nein, der hat, der lauscht auf Port 443, der nimmt noch keine Connections an.
Damit er Connections annimmt, muss ich folgendes machen.
Stripes 007, excellent.
Ähm, damit er Connections annimmt, muss ich folgendes machen.
Ich muss ihm sagen, accept Connection.
Also, wer hätte, wer hätte das gedacht?
Und zwar muss ich ihm hier sagen, embed TLS.
Net accept.
Und dann muss ich ihm sagen, okay, hier, ne, ne, Moment, wie habe ich das Ding genannt?
Äh, ähm, hier, listen, listen, fd, habe ich es genannt?
Hä?
Ah, ich muss noch sagen, dass ich hier drauf zugreifen darf.
Ignoriert das, das ist irgendein C++-Geschiss.
Ähm, äh, ach, listen, listen, f, ne, Moment, wie, wie habe ich es genannt?
Listen, fd, alles gut.
Äh, ich glaube, die Auto, das Autocomplete mag nicht.
Weil, das gibt es offensichtlich.
Ich glaube, das Autocomplete mag nicht.
Ähm, was auch immer.
So, ähm, genau.
Jetzt muss ich ihm sagen, Connection annehmen.
Der Und-Operator wird, nee, nee, ich will ja das ganze Ding übergeben als Referent.
Das passt schon. Ich habe es ja auf dem Vorfeld schon mal ausprobiert.
So, ähm, und jetzt kommt ein bisschen Magic.
Ich kopiere das gerade mal, dass ich mich nicht verschreibe.
Äh, ich kopiere das mal schnell, dass ich mich nicht verschreibe.
Und zwar, ähm, das hier, what the fuck?
Ähm, ich, ich ignoriere das mal, weil ich weiß, dass es funktioniert.
Ich habe das vorher ausprobiert.
Also, man legt jetzt erstmal noch eine Variable an, wo man die Infos, wer sich verbindet, ähm, hinterlegt.
Zum Beispiel kann ich hier dann abfragen, welche IP hat der Client, der sich verbunden hat.
Also, ich muss hier irgendwo die Informationen speichern.
Sprich, äh, aktueller Status der Verbindung, äh, welche IP hat der Client und solche Geschichten.
So, und das muss ich auch noch übergeben.
Client, FD, guck mal, wie lahm die Autos, Autocomplete ist.
Äh, und dann, der Rest kann, den Rest kann man, hier kann man übrigens die IP abfragen vom Client.
Das könnte, das könnte man eigentlich mal machen.
Das machen wir gleich mal, wenn wir gucken, wenn wir gucken, dass das hier funktioniert.
Ähm, da kann man sich nämlich die IP ausgeben lassen, die der Client verwendet.
So, was hat er jetzt für Schmerzen?
Was mag er denn hier dran nicht?
Ah, es funktioniert!
Alles klar!
Erstmal Fehler anzeigen, wo keiner ist.
Genau, also sprich, das hier ist quasi ein Zeiger da, da, da drauf hier.
Auf die Klasse, auf die Member-Variable, so.
Klassenvariable, oder wie soll man das genau nennen? Marking C++.
So, ähm, nee, this wird nicht übergeben, aber ich muss hier oben reinschreiben, was ich übergeben habe.
Ich könnte auch sowas hier machen, dann, dann nimmt er alles, auf was ich referenziere, aber ich kann auch sowas reinschreiben.
Finde ich ein bisschen überflüssig, ehrlich gesagt.
Man könnte einfach sagen, okay, nimm standardmäßig alles per Copy, ähm, was ich hier drinnen nehme, referenziere das automatisch für mich.
Oder, wenn ich es halt per Reference haben will, muss ich es angeben, oder wenn ich was exkluden will, muss ich es angeben.
Unnötig viel Geschreibe eigentlich.
So, und jetzt, jetzt nimmt er die Verbindung an.
Der macht jetzt einen neuen Thread auf.
Und dieser Thread macht nichts anderes, wie immer in der Endlosschleife gucken, gibt es neue Verbindungen, gibt es neue Verbindungen, gibt es neue Verbindungen.
Wenn es eine neue Verbindung gibt, dann annehmen.
So, dementsprechend muss ich jetzt auch gucken, ob das funktioniert hat, also sprich, äh, ob er, ob er die Verbindung angenommen hat, also ob das funktioniert hat.
Ich meine, es könnte ja, könnte ja irgendwelche Fehler geben, ja.
Es könnte ja sein, dass der Client, äh, die Verbindung abgebrochen hat, dass ich nicht genug RAM habe, um die Verbindung anzunehmen, oder sowas.
Kann ja alles Mögliche sein.
So, also sagen wir jetzt, okay, wenn, wenn ich die Verbindung angenommen habe, dann, äh, machen wir mal Handle Connection, das machen wir mal als nächstes.
Und wenn ich, äh, viel interessanter in dem Fall ist, wenn ich die Connection nicht annehmen konnte, vielleicht, weil der Client die Verbindung schon geschlossen hat,
dann muss ich noch ein bisschen aufräumen, weil wir sind ja hier in, äh, im Low-Level C++-Land.
Das heißt, was ich jetzt machen muss, ist mbtls net free, oh, free.
Und zwar den da.
Kleinen FD.
Den muss ich freen, und danach muss ich ihn löschen.
So.
Also in dem Fall, ich leg das hier ja an, ich reserviere hier Speicher für, manuell, ne, den räumt er nicht automatisch auf, weil ich will ja sonst die Verbindung nicht wegschmeißen.
Äh, und wenn das Annehmen der Verbindung nicht funktioniert, dann muss ich das wieder aufräumen, ansonsten habe ich einen Memory-Leak.
Und dann ist der ESP, startet sich random neu, und ich frag mich warum.
Memory-Leak suckt.
Wollen wir nicht.
So, und jetzt haben wir die Verbindung angenommen, da können wir jetzt mal gucken, was jetzt, ob das jetzt anders aussieht als vorher.
Aber ich denke mal noch nicht allzu sehr.
Die Musik, äh, Eintöntje, könnte es nicht sein, aber dafür, äh, lenkt sie nicht ab.
So, mein Ziel ist jetzt, dass wir gleich noch einen SSL-Handshake machen, und da muss ich unbedingt was essen, ich habe übelst Hunger.
Vielleicht gucken wir mal eine Runde Barbecue Pit Boys.
So, curl, zack.
Guckt, ihr seht, wir kommen schon ein bisschen weiter.
Er nimmt die Verbindung.
Er nimmt die Verbindung an, er möchte einen SSL-Handshake machen, aber das funktioniert nicht.
Warum?
Naja, ganz klar, weil ich nichts weiter mache mit der Verbindung, außer sie annehmen.
Ich nehme die Verbindung an, und danach mache ich nichts mehr.
Willst du dann gleich für jede Verbindung einen neuen Thread aufmachen?
So ist der Plan, ja.
So ist der Plan.
Dementsprechend muss man auch sagen, also wie gesagt, das Ding hat nicht sonderlich viel RAM.
Ich zeige es euch mal, wie viel RAM das hat, das hält sich echt in Grenzen.
Ähm, ESP Get Free Heap.
Geben wir mal den Speicher aus, dass ihr gleich seht, wie der Speicher runterpurzelt, wenn ich da Verbindungen aufbaue.
Gucken wir uns mal an.
Also das hat, also wie gesagt, die Sachen zwar hier, dass sie 520 KB RAM haben, allerdings ist der RAM ein bisschen anders aufgeteilt, wie das so bei einem normalen Rechner ist.
Auf eurem Desktop, keine Ahnung, 2 GB RAM habt ihr, habt ihr auch 2 GB RAM.
Hier ist es ein bisschen anders, ähm, ihr seht hier habt ihr standardmäßig nur, oh, guck mal, Bytes zu Kilobytes, habt ihr nur 170 KB RAM zur Verfügung von diesen 520, ja.
Das ist alles ein bisschen, wird alles ein bisschen anders gehandhabt, zum Beispiel gehen für statische Variablen und solche Sachen geht schon mal RAM weg für, ähm, für den WLAN, für den WiFi-Stack geht RAM weg.
Ähm, solche Sachen.
Also, wir haben, äh, die, die schreiben zwar, man hat 520 KB, KB RAM, aber benutzbar sind im Endeffekt nur so 170, wobei es auch, hier unser Display, unser Display frisst ja auch noch ein bisschen RAM, keine Ahnung, 40, 40 KB RAM oder so wird wahrscheinlich auch die ganze Display-Geschichte fressen.
Ähm, normalerweise hat man so...
...zirka 220 KB zur Verfügung RAM, ja.
Das reicht aber auch dicke.
Ich weiß, im Vergleich zu einem Desktop mit, äh, lass mal kurz gucken, mit 32 GB RAM kommen einem jetzt 220 KB RAM vielleicht nicht allzu viel vor, aber auf so einer Plattform ist das doch ganz ordentlich.
Was meint ihr, wie viel RAM so ein Arduino hat, ist doch viel weniger.
Also, ich hatte von euch einer mal Arduino programmiert.
Das ging bisher an mir vorbei, aber die haben teilweise noch deutlich weniger RAM.
Sag ich das, Sebaro, bist du eigentlich am Start?
Ist, ist der Cute-Mod da?
Ich glaube, ich glaube nicht.
So, das machen wir jetzt noch schnell.
Also, äh, wo sind wir stehen geblieben?
Handle Connection.
So weit, so gut.
Wir machen jetzt, für jeden, ihr müsst mir mal sagen, kann man, kann man der Sache halbwegs folgen, was ich hier treibe?
Jetzt mal für die, also...
Ich weiß, dass wir ein paar Leute am Start haben, die sich damit gut auskennen und ich weiß auch, dass wir ein paar Leute am Start haben, die einfach nur gucken, weil sie es, äh, entspannend finden und eigentlich sich nicht so sehr damit beschäftigen.
Aber so mal an die Frage für die Leute, die das interessiert, ähm, so kann man der Sache halbwegs folgen, was ich hier treibe.
Ich meine, ich bin mir selbst nicht hundertprozentig sicher, was ich mache und, ähm, das, ich erhebe da jetzt auch keinen Anspruch darauf, dass das alles so hundertprozentig stimmt, was ich sage, ne?
Also, äh, also es kann durchaus sein, dass ich mal ein bisschen Mist erzähle, aber unwissentlich zwischendurch.
Ja, zum Beispiel ist es ja zum, es ist ja auch nicht ganz korrekt, wenn ich sage, dass die Stack Size von einem Task gleich der Sache ist, die das am Speicher verwenden kann, aber im Großen und Ganzen stimmt es halt.
So, so, also, wir, wir haben jetzt hier ein extra Task, ich nenne es mal Task, weil das halt so der, die, die, wie sagt man so schön, die Terminologie ist, also halt so einfach das Wort, was man dafür verwendet auf der Plattform.
Unter Windows wären das...
Threads.
So, ich habe hier ein extra Thread gestartet, wir nennen es mal Task, ich finde Thread spricht sich irgendwie für nicht-Native-Speaker so kompliziert aus.
Das ist, also wir haben ein extra Task gestartet mit einer Endflow-Schleife, die macht quasi die ganze Zeit das da.
Bloß ein bisschen schneller.
Und, ähm, dort gucken wir einfach, gibt es eine neue Verbindung, wenn ja, nehmen wir die Verbindung an, wenn nein, beziehungsweise wenn die Verbindung...
Ähm...
Irgendwie geschlossen wurde, dann machen wir den Speicher wieder frei.
So, jetzt kommt das eigentlich Interessante, jetzt müssen wir die Connection handeln.
Also sprich, jetzt müssen wir, müssen wir einen SSL-Handshake machen, also einen SSL-Handshake, dass man, weil aktuell ist es ja so, wenn ich im Browser da draufgehe, 1, 2, 2, 1, 6, 8, 1, 1, 2, oh fuck, was war es, 5, 4, 4, 3, 3, dann geht nix.
Und auch mit HTTPS geht da nix.
Ah, Secure Connection failed, bam, End of File Error.
Geht nicht.
Aber er merkt schon mal, dass da irgendwas ist.
Und jetzt muss ich einen SSL-Handshake machen.
Threat klingt nach Bedrohung, ja, das stimmt.
Shred, das ist ein neuer Shred, ist das.
Neuer Task, so.
Ähm, jetzt muss ich die Verbindung annehmen und einen SSL-Handshake machen, also sprich, einen Verbindungsaufbau für eine verschlüsselte Verbindung muss ich jetzt machen.
Und wir starten jetzt einen weiteren Task.
Pro Connection.
Ich nehme die Connection an und jetzt starte ich einen weiteren Task pro Connection.
Das heißt, jede Verbindung, die kommt, ist unabhängig von der anderen.
Das bedeutet, ich kann zum Beispiel einen Firmware-Update machen und mir dabei über eine andere Verbindung die Logs angucken, die das Firmware-Update verursacht.
Also zum Beispiel, ich könnte das hier unten mir anschauen, in einem Browser oder per Curl oder sonst wie.
Und gleichzeitig einen Firmware-Update machen und gucken, okay.
Okay, gibt es da einen Fehler beim Firmware-Update und sowas?
Bisschen mehr Low-Level gucken.
Weil die Verbindungen komplett unabhängig voneinander sind.
Ansonsten müsste die eine Verbindung auf die andere warten.
Was zum Beispiel bei einem Update gar nicht funktionieren würde, weil bei einem Update blockt den kompletten Vorgang.
Ein Update ist ja ein Upload im Endeffekt, ein Upload von, keine Ahnung, 600 Kilobyte großer Firmware.
Und solange ich 600 Kilobyte Firmware uploade, kann ich nichts anderes machen, wenn es Single-Threaded wäre.
Upload, Upload, Upload.
Und nach dem Ende des Firmware-Updates wird er einfach den ESP neu starten.
Und ich hätte nichts mitbekommen, hier meine Logs im Browser, was denn während dem Firmware-Update passiert ist.
Deswegen ist das, denke ich mal, ganz praktisch, wenn man das Ganze Multi-Threaded macht.
Natürlich braucht es ein bisschen mehr RAM als alles in einem Task, logisch.
Und wir haben ja auch nur hier noch 170 Kilobyte RAM frei.
Das heißt im Endeffekt, ich kann auch nicht so viele Verbindungen aufbauen.
Also eine TLS.
Eine TLS, SSL, HTTPS-Verbindung, wie auch immer man es jetzt genau nennen mag, braucht ungefähr 30 bis 40 Kilobyte RAM.
Da könnt ihr ja mal ausrechnen, wie viele Verbindungen ich da reinkriege.
Realistisch betrachtet sind es wahrscheinlich 3, 4 oder 5 insgesamt.
Das liegt aber auch daran, weil ich kontinuierlichen Speicherplatz brauche und ich muss erstmal 30 Kilobyte am Stück Speicherplatz frei haben.
Also wir machen jetzt für diese neue Verbindung noch einen neuen Task auf.
Und zwar, was der macht ist...
Der gibt das einfach zu einer Methode weiter, die wir gleich oben anlegen.
Also erstmal neuen Lambda anschmeißen.
Das da übrigens, wer sich das hier fragt, dieses Konstrukt hier, ist eine Funktion, die keinen Namen hat.
Also sprich, ich könnte hier oben auch sowas hinschreiben wie...
Also anstatt dem hier, könnte ich dann auch sowas machen wie, keine Ahnung, void bla bla blub, sonst was, hier irgendwas.
Und dann anstatt dem...
Das da machen.
Das würde auch funktionieren.
Aber ich finde es insofern schöner, dass man die Funktion an der Stelle hat, wo was passiert, dann kann man halt direkt sehen, was ist.
Sobald das ein bisschen länger wird, würde ich das nicht mehr in einem Lambda-Inline schreiben, sondern würde halt wirklich eine eigene Funktion machen.
Das machen wir jetzt auch gleich.
Also wir haben jetzt die Verbindung angenommen.
Das heißt, ähm...
FeelSmartManExcel.
Das ist das Gegenteil von dem hier quasi.
Das ist das Gegenteil von dem hier quasi.
Das ist das Gegenteil von dem hier quasi.
ExquisiteSmartMan.
Da musst du aber in den Stream oft gucken, weil das ist ja bekanntlichermaßen IQ-Steigerung bis mehr geht nicht mehr.
Vor allem, wenn man subbt.
Wenn man subbt, habe ich gehört, ist das nochmal eine Steigerung, was das angeht.
Jeder Sub plus 40 IQ-Punkte für den gesamten Chat.
Wissenschaftlich belegt.
So, also.
Neue Task aufmachen.
Und da drin sagen wir jetzt, okay, nehmen die Verbindung.
Nehmen die Verbindung und ähm...
Nehmen die Verbindung und ähm...
Machen wir mal sowas hier.
Die Methode gibt's noch nicht.
Die Methode gibt's noch nicht.
Also, das gibt's, ich schreib das nur mal rein.
Das gibt's noch nicht.
So.
Wir machen mit der Verbindung gleich irgendwas.
Wir machen mit der Verbindung gleich irgendwas.
Aber zumindest eine Sache brauchen wir hier unten auch noch.
Aber zumindest eine Sache brauchen wir hier unten auch noch.
Wenn wir die Verbindung abkacken,
dann muss ich auf jeden Fall auch wieder aufräumen,
weil sonst habe ich einen Memory-Leak.
Ich zelebriere das hier jetzt so,
weil
das schießt einem total oft ins Knie,
dass man das Aufräumen vergisst.
Und wir sind hier, wir sind halt ja keiner Sprache,
die irgendeinen Garbage-Collector oder sonst was hat.
Hat halt alle seine Vor- und Nachteile.
Hier musst du es halt selbst machen.
Das heißt, man dürfte hier auf keinen Fall vergessen,
den Kram, den wir oben angelegt haben, wieder freizugeben.
Sollte man es hier einfach so anlegen,
ist kein Problem. Legt er automatisch wieder an. Legt man es allerdings so an,
dann muss man
das selbst wieder frei.
Also alles, was man mit new anlegt oder
malloc in C, muss man wieder freigeben.
In dem Fall mit delete oder mit free in C.
Sonst Memory-Leak und
F in Chat.
So.
Jetzt werden wir mal die Methode anlegen,
wo wir einen SSL-Handshake machen.
Mit einem Shared-Pointer
funktioniert glaube ich nicht.
Mit einem Shared-Pointer
funktioniert nicht. Warte mal, das habe ich
nämlich ausprobiert.
Ähm, sonst beschwerst
du dich die ganze Zeit über C++.
Also es gibt genug über C++, wo man sich beschweren kann,
unabhängig von C-APIs.
Und gerade Interop mit C-APIs
müsste ja nur wirklich eines der
Steckenpferden von C++ schlechthin sein.
Und
dafür ist es an einigen Stellen ordentlich hakelig.
Ähm,
ich überlege gerade, was war das?
Doch, an der Stelle
könnte man wirklich einen Shared-Pointer machen.
Also anstatt dem da,
könnte man...
Ne, man könnte keinen Shared-Pointer machen.
Könnte man nicht machen.
Einen Shared-Pointer, also man könnte...
Nein, könnte man nicht machen, weil...
Wenn ich den hier oben anlege,
dann geht der
hier...
Dann geht der hier aus dem Scope.
Und wenn der hier aus dem Scope geht,
funktioniert das glaube ich nicht.
Wenn ich den Shared-Pointer hier anlegen würde,
ist der Scope hier fertig.
Ich könnte den zwar hier übergeben, aber ich glaube,
das bringt nichts.
Vielleicht geht es auch.
Aber ich glaube, es geht nicht.
Ich könnte das höchstens moven irgendwie,
wobei ich da nicht weiß, ob das mit diesem
C-Zeug funktioniert.
Ne, ich probiere das
nicht. Ich lasse das einfach so, weil da weiß ich,
dass es funktioniert. So, also wir brauchen jetzt
eine neue Methode für HandleConnection.
Der kriegt die Information über den Client
übergeben.
Also sprich, IP vom
Client, Status vom Client und sonst was.
So, und das Ding heißt HandleConnection.
Kann Visual Studio sowas wie, ähm,
CreateMethod
oder sowas? Geht das hier?
Kann das
sowas?
Create...
Reflektor...
Na, anscheinend nicht.
Gut, da müssen wir das ganze von Hand anlegen.
HandleConnection.
So.
Also gehen wir mal hier drauf
und sagen Private
Void
HandleConnection
So, und das braucht als
Parameter ein
m.tls
äh, net Context
den wir
einfach mal so nennen.
Pointer ist das,
ne?
VS Code kann es auch, muss ein Plugin installieren.
Okay, welches?
Gibt ja bestimmt tausende.
Okay, ich glaube wir machen jetzt mal eine andere Playlist, die habe ich jetzt
zum dritten Mal
durch
ge...
Doodled.
Okay. Was denn?
Ah, okay, scheint
halbwegs brauchbar zu sein.
Und es geht mir nicht so sehr auf den Keks.
So, also, jetzt machen wir
einen SSL Handshake. Also sprich,
aktuell kann sich der Browser ja nicht hier hin
verbinden und jetzt nehmen wir die Verbindung
von dem Browser an.
So, dann gehen wir hier hoch in HandleConnection
ähm, und müssen als erstes
mal einen SSL Context anlegen.
Das ist das, wo
die ganzen Informationen, was, äh,
Verschlüsselungssachen und irgendwelche
aktuellen
Dings, wie heißt's? Sessionnummern
und so Gedöns drinne gespeichert werden.
Also sprich, alles was man braucht, dass die Verbindung
mit dem Client weiter verschlüsselt
funktionieren kann. Kommt alles hier in diesen
SSL Context rein.
So, den muss man erstmal
anlegen.
Das ist jetzt nix, was man immer
so macht. Das ist halt so eine EmberTLS
spezifische Geschichte. Das habe ich auch nur aus dem
Tutorial.
Dass das halt
nun mal so gemacht werden muss, weil es sonst nicht funktioniert.
So, und jetzt können wir gucken,
ob das Ganze funktioniert hat.
Also sprich, wir machen jetzt mal sowas
hier, äh,
ja, Result oder so,
ähm,
Setup.
Und da muss man ihm jetzt das hier
übergeben, sprich, hier stehen die Informationen
vom Client drinne,
aktuell, also sprich, äh,
irgendwelche TCP-Geschichten, Connection,
ähm,
was zu der Verbindung gehört. Und hier stehen dann
die ganzen SSL-Informationen für den Client
drin, also was man zum Verschlüsseln braucht.
So, und das
muss man jetzt sagen, okay, nehm mal die Client, die, die,
die Client-Verbindung und
dein SSL-Context,
wurstel das zusammen und mach halt
SSL-Setup. Also sprich, äh,
richte das mal so ein, dass ich jetzt
eine SSL-Verbindung handshake machen kann, aufbauen kann.
So.
Äh, übrigens, ich erzähl euch
Mist, das ist nämlich verkehrt.
Ich muss den SSL-Context übergeben
und die, es stimmt übrigens auch nicht, was ich
gesagt hab, und die Config, die ich
vorhin angelegt hab. Also, siehste, vergiss es,
was ich gesagt hab, das kommt jetzt gleich.
Ähm, genau.
Result. So, und jetzt müssen wir checken,
ob das funktioniert hat.
Also sprich, wenn das Result
nicht 0 ist, 0 ist immer
okay. Das ist, das, das ist aber bei
vielen Libraries so. Und das ist auch nicht
ne reine CC++-Geschichte.
Also viele Programmiersprachen,
die, ähm, oder Libraries, die
INS
als, als, ähm, Fehlercode
verwenden, da
bedeutet es meistens 0
ist meistens okay.
Und alles, was nicht 0 ist,
ist meistens nicht gut.
Also sprich, wenn ich jetzt
keinen SSL-Context anlegen konnte,
dann geb ich ne Fehlermeldung aus.
Und die copy-paste, das copy-paste ich mir mal.
Weil ich das, äh, nicht nochmal brauchen, machen muss.
Error-Message. Oh, Error-Message brauch ich noch.
Copy-paste ich mir auch mal.
Das hab ich nämlich im Vorfeld schon mal gebastelt.
Und zwar,
ähm, EmberTLS
gibt ganz ultrakryptische Fehlermeldungen
aus. Also sowas
wie, ähm,
SSL-Setup failed
minus 582179.
So, und dann soll dann irgendeiner was dran
erkennen, ne. Glücklicherweise
haben die ne Möglichkeit eingebaut,
nämlich
mit, äh, dieser Geschichte EmberTLS
äh, strrr, Error.
Dem übergibt man nen Error-Code,
nen Buffer und ne Länge.
Und dann wandelt er diese kryptische,
kryptische Error-Fehlermeldung
um in
eine lesbare Fehlermeldung.
Was wir dazu noch machen müssen, ist allerdings, ähm,
EmberTLS Error
einbinden.
Und dann sollte es eigentlich funktionieren. Ja.
Sehr gut. Exzellent!
So.
Und jetzt haben wir ne schöne Fehlermeldung.
Und er, der, er schreit hier aus
auch fett in rot,
wenn das
nicht funktioniert. Ja, und deswegen
müssen wir danach auch sagen, ey,
wenn wir keinen SSL-Setup machen konnten,
dann, äh, hier raus aus der Funktion.
Weil da können wir nicht weitermachen, ne.
Ist klar, wir können ja keine SSL-Verbindung aufbauen,
wenn es am Anfang schon gescheitert ist.
Und danach kommt er dann wieder hier raus
und macht nen Free. Das ist wichtig, sonst, sonst
in your face memory leak.
Ich glaube, ich probiere das nachher mal mit dem Shared Pointer.
Äh, ob das wirklich funktioniert.
Wie gesagt, ich glaube, das funktioniert nicht.
Ich bin, naja, Flo96,
wenn du heute den Stream mitgekriegt hast,
ich bin definitiv kein C++-Fanboy.
Also ich bin das letzte, äh,
wirklich das allerletzte, was ich wäre,
ist C++-Fanboy.
Es gibt halt keine andere Möglichkeit.
Wie willst du denn den Kram sonst programmieren,
wenn nicht mit C++?
So, also jetzt haben wir hier den, äh,
SSL-Setup gemacht.
Wir müssen erst grad von der Arbeit kommen.
Ich hab heute wieder übelst geflamed über C++.
So.
Jetzt kommt das eigentlich Interessante.
So, jetzt machen wir nämlich den
SSL-Handshake.
Also sprich, äh, jetzt machen wir
Verbindungsaufbau mit dem Client hier.
Also dass da nicht mehr dieser Fehler kommt, sondern es war wirklich
SSL-Verbindungsaufbau.
Äh, der
ESP32 kann Lua,
ähm,
allerdings gibt's dafür so wenig.
ESP32 kannst du MicroPython
machen, Lua, aber
hauptsächlich C++.
Auch die ganzen offiziellen Libraries und Sachen sind C++.
Und auch, äh, die ganzen,
die, die, die Arduino-Geschichten sind meistens auch alles C++.
Es gibt ne
experimentelle Rust-Implementierung und
es gibt so ne
low
level dot net
Geschichte,
wo's aber halt auch keine Libraries für gibt. Also es lohnt sich
eigentlich nicht. Nee, Lua macht
auch keinen Spaß. Außerdem, wie gesagt, äh,
ich glaube, mit Lua hast du das Problem, dass
du auch viele Sachen nicht verwenden kannst.
Also, ähm, jetzt machen wir den SSL-Handshake.
Dazu müssen wir vorher noch ein paar
Sachen machen. Und zwar, ich copy-paste
mir das, dann erklär ich, was es macht, weil
sonst verschreib ich mich da garantiert bei.
Also, man muss einmal das hier setzen.
Und zwar,
wenn die Verbindung, wieso C++? Ja,
weil das die einzige Sprache ist, wo man das gescheit
machen kann hier für den Controller.
Also ESP32 musst du quasi
fast schon
in C, C++ programmieren.
Die Alternativen haben auch ihre Probleme, aber
das, also ich mach's nicht umsonst
freiwillig in C++, da kannst du
von ausgehen. Ich mach nicht
freiwillig in C++.
So, ähm,
so, was das hier jetzt macht, ist
folgendes. Wir setzen einen Timeout.
Also sprich, nach 10 Sekunden,
wo die Verbindung
nichts übertragen hat,
ah, WLAN ist abgekackt, okay.
Nach 10 Sekunden, wo die Verbindung nichts
übertragen hat, bricht er ab. Das ist insofern
ganz wichtig, weil wir haben eh nicht viel RAM.
Und wenn ich irgendwann nach 5
Verbindungen hängen hab, kann ich keine 6.
Verbindung aufbauen, weil ich keinen RAM mehr hab.
Und die Verbindungen machen gar nichts. Also, wir sagen 10 Sekunden,
nach 10 Sekunden ist Schluss.
Nach spätesten
10 Sekunden ist Schluss. Und damit das Ganze
funktioniert, müssen wir eben sagen, okay,
wir wollen nicht einfach nur
senden, empfangen, wir wollen mit Timeout.
Das ist alles, was das hier macht.
Also sprich, das setzt einen Timeout.
Gut, ähm, und jetzt kommt, jetzt kommt
der eigentliche Knackpunkt, jetzt machen wir einen SSL
Handshake. Ähm,
da überleg ich nur grad, wie man das, äh, am besten
machen.
Ambit, TLS, Hand,
Handshake,
SSL.
Und dann ist wieder das gleiche, wenn das
ungleich 0 ist, dann hat's funktioniert.
So.
So ist die einfache Variante, also sprich,
man guckt, okay, man macht einen
SSL Handshake, guckt, ob der ungleich 0
ist und dann ist gut. Äh,
ob der 0 ist, dann ist gut.
Wenn der ungleich 0 ist, dann gibt's einen Fehler.
Die Sache ist jetzt nur die,
dass, ähm,
das
leider ein bisschen komplizierter ist. Man kann sich das
hier auch im,
im offiziellen Example mal angucken.
Wenn man sich hier den Handshake anguckt,
die machen das in der Schleife.
Und zwar, es könnte ja sein,
dass der Client, wenn ich das
hier aufrufe, SSL Handshake,
dass der Client noch gar nicht genug Informationen
geschickt hat, dass ich überhaupt
einen SSL Handshake machen kann, ja. Also
stellt euch vor, mein Client ist
kein, äh, 8700K
Desktop-CPU, sondern irgendwie
was noch schlechteres, noch langsameres.
Und der hat jetzt einen Verbindungs-
Aufbau gemacht, aber noch gar nicht
genug Daten geschickt, dass ich überhaupt einen SSL
Handshake machen kann.
Dementsprechend machen die das hier in der Schleife
und sagen, okay, wir machen so lang
SSL Handshake,
wie ich, wie der Client
noch Sachen,
äh, zum Schrei,
mir Sachen schicken will oder mir Sachen,
oder, oder ich Sachen von ihm lesen will.
So. Und, äh,
wenn das nicht der Fall ist und trotzdem
Fehler, dann kacken wir ab und dann gibt's eine Fehlermeldung.
Also sprich, die hab, die
behandeln den Fall hier halt auch, dass der Client
lahm ist. Und das ist nicht verkehrt,
das sollten wir auch machen.
Deswegen copy und paste ich mir das auch mal.
Mir haut er weniger aus dem Beispiel fast 1 zu 1
raus. Ähm, wir können jetzt folgendes
machen. Wir können sagen, okay, wir machen so lange
SSL Handshake,
so lange SSL Handshake ungleich
0 ist. Ungleich 0
heißt irgendein Fehler. Beziehungsweise
irgendwas, was nicht okay bedeutet.
0 bedeutet okay, dann können wir weitermachen. Also sprich,
wenn SSL Handshake okay, äh,
gleich 0 ist, dann mach ich weiter.
Also hier unten.
Äh, wenn es ungleich 0 ist, dann
guck ich nach, ob es
vielleicht bedeutet, der Client
möchte noch was schreiben, beziehungsweise
ich möchte dem Client noch was senden. Ne, äh,
umgedreht. Der Client möchte, ich möchte
vom Client noch was lesen oder der Client möchte mir noch
was senden. Wenn das der
Fall ist, dann mach ich einfach
so lange weiter, bis ich alles gelesen
hab und alles dem Client geschickt habe, was ich brauche,
dass ich nen SSL Handshake
machen kann. So, ist das nicht
der Fall, dann kack ich ab.
Mit nem Fehler und wir müssen mal wieder
die Sachen freen,
weil ansonsten halt
Memory liegt.
So, dann machen wir einen Return. Das heißt, wir kommen wieder
hier unten raus und
ähm, räumen auf und nehmen
die nächste Verbindung an und haben's beendet.
So, aber wir hoffen ja, dass der SSL Handshake
funktioniert. So.
Und deswegen
geben wir mal hier irgendwie
was aus. Can't trace.
Äh, Handshake.
Okay.
Wir wissen, wenn wir hier ankommen, hat der SSL Handshake
funktioniert. Dann müssen wir noch der Form
halber zwei Sachen machen, dass der
Client nicht hängen bleibt. Das ist auch recht
wichtig. Wir müssen sagen, okay,
wenn die Verbindung beendet ist, also wenn ich
fertig bin mit dem Client, dann sag
ich hier, mach mal Verbindung zu.
Weil ansonsten bleibt der unendlich
lang hier hängen.
Was auch nicht schön ist.
Und danach machen wir wieder sauber. Und jetzt uploaden
wir das mal und gucken, ob das scheiß funktioniert.
hsjohu sagt,
ich mache gerade freiwillig C++ und
OpenGL und das tracksteil
macht einfach nix. Das ist ganz
toll. Excellent. Ah, du hast dir aber auch
eine tolle Kombination ausgesucht.
So, jetzt schauen wir mal.
Ich schieb mal
meine Konsole hier rüber, dass ich was sehe.
So.
Und jetzt gucken wir mal, ob der SSL
Handshake funktioniert.
Ja. Ne. Oder?
Das ist schlecht.
Das hat nicht funktioniert. Das ist schon mal nicht gut.
Weil
jetzt weiß ich nicht, warum.
Ah, doch.
Ich glaube, das hat funktioniert.
Es kam bloß keine Antwort. Kann das sein?
Okay, das müssen wir uns jetzt genauer angucken.
Wir gehen jetzt mal mit
OpenSSL ran.
Boah, fuck.
Das weiß ich aus dem Kopf nicht.
OpenSSL Handshake Test.
Irgendwie S-Client Connect oder sowas.
Das weiß ich doch aus dem Kopf nicht, wie der Kram funktioniert.
Genau. Das Thomas Grenn-Wiki
weiß das bestimmt. Ja, das hier suche ich.
Das da suche ich.
Thomas Grenn-Wiki.
Weiß Bescheid.
Connected.
Sieht doch eigentlich ganz gut aus.
Ne, das sieht nicht gut aus.
Das hat nicht funktioniert.
Okay.
Warum nicht?
Es hat aber auch keinen Fehler gegeben hier unten.
Es gibt auch keinen Fehler.
Es gibt auch keinen Fehler.
Hä?
Okay.
Es gibt keinen Fehler.
Habe ich irgendwas vergessen?
Handle Connection.
FD. PS-Client.
Es gibt keinen Fehler.
Aber wo hängt der denn jetzt?
Der gibt irgendwas nicht frei.
Okay, irgendwas habe ich verkehrt gemacht.
Kommst du aus der inneren Wildschleife raus?
Ja, das...
Die Vermutung habe ich auch, dass ich irgendwo drin hänge.
Wir machen also mal gutes altes
Printf-Debugging.
Na gut, das hier muss funktioniert haben,
wobei, ich mache hier auch mal was dahinter.
Ähm...
Okay.
Upload.
Bam.
Kannst du auf deinem Controller nachsehen,
ob der überhaupt...
Naja, Verbindung geht ja hier oben, siehst du ja.
Verbindung geht auf 4433.
Also die Verbindung klappt,
aber der SSL-Handshake klappt nicht.
What?
Der geht da gar nicht rein.
Ach.
Oh Leute, ich weiß... Ne, Moment.
Wa...
What?
What the hell?
Warum geht der da nicht rein?
Der muss doch hier reingehen in die Funktion wenigstens.
Hä?
Moment, Moment, Moment.
Run. Hä?
Ne, ne, ne, ne.
Der macht gar nichts.
Der geht da gar nicht rein.
Warum geht der da nicht rein?
Was hat der für Schmerzen?
Neun Monate, dankeschön.
Big Brain.
Big Brainiger.
Huge.
Face.
Head.
Was auch immer.
Warum geht der da nicht rein?
What the fuck? Warum?
Der geht da überhaupt nicht rein.
Hä?
Ach, Visual Studio Code, please nicht abkacken jetzt.
Hab ich irgendwas vergessen?
Task Run.
Hm.
Startet der den Task überhaupt?
Kannst du mir das Programmierbein bringen?
Kannst du mir das Programmierbein bringen?
350 Euro die Stunde.
Nee, aber du kannst natürlich öfters mal hier im Stream vorbeigucken.
Nee, aber du kannst natürlich öfters mal hier im Stream vorbeigucken.
Vielleicht lernst du das ein oder andere.
Das kannst du natürlich ruhig machen.
Und wenn du Fragen hast, kannst du mich auch fragen.
Aber, also was im Ärmel geschüttelt ist, Programmierbein bringen wird ein bisschen schwierig.
Aber, also was im Ärmel geschüttelt ist, Programmierbein bringen wird ein bisschen schwierig.
What the fuck?
Will der mich verar... Was ist das?
Hä?
Okay, Moment.
Also jetzt blick ich den mal durch.
Also jetzt blick ich den mal durch.
Was ist eine Schleife?
Ich wollte jetzt einen doofen Spruch mit If-Schleife machen.
Ich wollte jetzt einen doofen Spruch mit If-Schleife machen.
Ihr wisst ja, If-Schleife ist so meine
Ihr wisst ja, If-Schleife ist so meine
beliebteste Sache, wo ich mich dann immer am Anfang
ein bisschen drüber beschweren kann bei den meisten Leuten.
ein bisschen drüber beschweren kann bei den meisten Leuten.
Ähm.
Unser Azubi kam ja auch letzter mit If-Schleife.
Okay, das funktioniert.
Hä?
Moment, das ging doch eben noch nicht.
Das gibt die aktuelle Zeile aus,
das gibt die aktuelle Zeile aus, wo er was macht.
Das habe ich mir selbst zusammengestrickt.
Jetzt funktioniert es irgendwie, ne?
So, 108.
108
108 ist das da.
Das funktioniert.
Accept.
Aber das Verbindung annehmen
Aber das Verbindung annehmen geht nicht.
Das Verbindung annehmen geht nicht.
Das Verbindung annehmen geht nicht.
Guck mal, 108.
Hä? What?
Hä? Warum geht das nicht?
Warum geht das nicht?
Okay, ich habe keine Ahnung, warum das nicht funktioniert.
Ich meine, die Schleife läuft ja offensichtlich.
Ich meine, die Schleife läuft ja offensichtlich.
Kommst du aus Hessen? Ja, richtig, komme ich.
Ähm.
Ich meine, die Schleife läuft ja offensichtlich.
Und die hängt hier auch, weil
ansonsten würde die ja nicht immer wieder, wenn ich eine Verbindung aufbaue,
aber die Accepted nicht.
aber die Accepted nicht.
Okay, ähm.
Ähm, anders.
Oh, ich glaube, ich weiß, woran es liegt.
Oh, ich glaube, ich weiß, woran es liegt.
Ich glaube, ich weiß, woran es liegt.
Ich bin total bescheuert.
Leute, seht ihr es?
Richtig, richtig hängengeblieben.
Guck mal.
Ich muss gucken, ob das auch 0 ist.
Ansonsten ist 0 ja false.
Und false heißt, ähm.
heißt, ähm.
Alt-Elz.
Pass mal auf, jetzt funktioniert es.
Pass mal auf, jetzt funktioniert es.
Was zum Geier ist MISRA?
Oh, ich habe gerade nachgeguckt.
Motor Industry Software Reliability Association.
Motor Industry Software Reliability Association.
Okay, Flo96.
Was sagt MISRA dazu?
Erhelle uns.
Außer Hände waschen, wahrscheinlich.
Das sagen gerade alle.
So, pass mal auf, jetzt geht es.
Easy.
Jetzt funktioniert es.
Also, was der jetzt sagt, ist, mein Zertifikat ist falsch.
Das ist aber in Ordnung.
Mein Zertifikat ist ja auch falsch.
Guck, SSL-Handshake, bam.
Funktioniert.
Hier haben wir übrigens mal ein tolles Zertifikat.
Und zwar, ähm.
Für KEKW ausgestellt.
Von der CA 0W.
Irgendwo steht da 0W drin.
Also, hier mein Zertifikat.
SSL-Shader funktioniert.
Sehr schön.
Ja, aktuell ist es wirklich so.
If Error Accept, was ja keinen Sinn ergibt.
Kein Wunder.
Ich finde es aber gut, dass das ist.
Dass sie das so gut programmiert haben,
dass es nicht abkackt.
Weil ich meine, ich habe hier was total ungültiges
übergeben, im Endeffekt.
Okay, also weiß ich, woran es liegt.
Jetzt kann ich mein ganzes Trace wieder rausnehmen.
Excellent.
Übrigens, diese Trace-Funktion, die ist
so eklig
programmiert, die will ich euch nicht zeigen.
Aber es ist schon cool, dass das die aktuelle
Zeile anzeigen kann.
Okay, jetzt
erklärt uns der Flo96piz hier,
wie es richtig geht.
Und zwar, bei Misra muss bei einer If-Schleife
Okay, ich gehe davon aus,
das ist Absicht.
Zuerst die Konstante, dann die Variable kommen.
Beispielsweise
if true gleich gleich x
und nicht
if x gleich gleich
Das ist eine gute Idee.
Das ist eigentlich gar nicht so verkehrt.
Das finde ich nicht schlecht.
Wäre ich im Leben wahrscheinlich
nicht machen, so wie ich mich kenne.
Aber finde ich nicht schlecht.
Ich habe ein Video von C-Sharp 9 gesehen.
Ich habe heute Morgen eine Viertelstunde
von so einem 2-Stunden-Video geguckt,
aber nicht lange.
Wenn ihr wollt, wenn es mal wieder danach ist,
wir können mal
uns das angucken.
Hast du ein gutes Video dazu?
Ich habe nur so ein Webcast gesehen,
wo sie 2 Stunden rumgelabert haben
und ich keinen Bock habe, weiter zu gucken.
Stream-Ideen.
C-Sharp 9 Features.
So ein Blogpost.
Auch gut.
Also ich muss sagen, Flo96,
die Idee finde ich gut.
Ich werde es wahrscheinlich im Leben nicht machen,
aber klingt sinnvoll.
Ja.
Weil dann
musst du nämlich von Anfang an überlegen,
was willst du eigentlich mit was vergleichen.
Wenn du schreibst,
dann müsstest du nämlich von Anfang an überlegen,
okay, was will ich jetzt nachgucken.
Null gleich gleich.
Das ist eigentlich nicht verkehrt.
Und zwar Ziel der MISRA-Regeln
die Programme so sicher zu erstellen,
dass sie auch in sicherheitskritischen Anwendungen zufällig laufen.
Dazu gibt es MISRA-C.
Vor allem fehlen Sprachkonstrukten,
die im C-Standard unklar spezifiziert sind.
Zum Glück nicht im C++-Standard,
weil
da könntest du es umgedreht machen.
Was ist da klar?
Sodass der Hersteller des Compilers
eine eigene Interpretation wählen muss.
Eigentlich gut.
Gefällt mir.
Und ich finde es auch in dem Fall gar nicht so blöd.
Normalerweise sagt man ja immer so,
ja hier gleich gleich true
und sowas.
Oder gleich gleich false, sowas schreibt man ja nicht.
Aber ich muss sagen,
in dem Fall finde ich es gar nicht mal so doof,
wenn halt in dem Fall
der Returncode eben nicht ganz klar
true false ist,
sondern ein int.
Und dann ergibt das
tatsächlich Sinn.
Na klar, weil ich meine,
wenn die Funktion schon gleich true false zurückliefert,
ob die jetzt funktioniert hat oder nicht,
dann kannst du einfach den ganzen Kram wegnehmen
und weg lassen.
Aber in dem Fall sind es ja ints.
Ja, ist eine gute Idee.
Das finde ich nicht verkehrt.
So, aber mal unabhängig davon.
Es hat funktioniert.
Seht ihr?
Handshake. Bam.
Handshake okay.
Hat funktioniert.
Also Verbindungsaufbau klappt
und da kann ich meine 50 Milliarden
Trace Sachen auch wieder rausnehmen.
Alles fort.
So ein globales Flag irgendwie mal setzen,
dass der Trace das automatisch rausschmeißt.
So, wunderbar.
In meinem Main, werde ich das übrigens mal
ein bisschen anders machen.
Den Heapspace,
den müssen wir
unbedingt mal in
unbedingt mal in orange machen.
Ich bin da gerade,
bisschen mehr Farbe.
So, wie machen wir denn
jetzt weiter, Leute? Eigentlich habe ich übelst Hunger.
Wisst ihr das?
Mein Brain macht auch langsam nicht mehr weiter mit.
Aber eine Sache würde ich noch machen.
Nämlich, wir liefern mal
ein bisschen, also wir haben jetzt ja so lange rumgewurstet.
Ich will, ich will noch
eine Webseite ausliefern.
Ich will noch eine Webseite ausliefern.
Einfach nur http 200, okay.
Hast den Link reingeschickt.
Ja, na heute guck,
ich bin zu low brain, mir das heute anzugucken.
Das müssen wir in einem der nächsten
Streams machen, falls ich es vergessen soll.
Du kannst mir ruhig nochmal Bescheid sagen, wir machen das.
Mich interessieren nämlich die neuen Features auch.
Wir gucken uns die auf jeden Fall im,
ich schreib sie mal auf hier.
C++ 9 Features.
Gucken uns das an.
Und wenn nicht und du bist im Stream, du kannst mir ruhig Bescheid sagen,
weil dann gucken wir uns unseren nächsten Stream an,
wenn wir ein bisschen C sharp machen.
So, ihr guckt mal.
Habt ihr das gesehen?
SSL Handshake failed.
Das ist, wenn ich die Verbindung
anfange und dann abbreche.
Sogar die Fehlermeldungen
funktionieren. Excellent.
Excellent.
Musik ist ein bisschen laut jetzt.
So, und jetzt
will ich nochmal eine Webseite
ausliefern. Das probieren wir jetzt nochmal aus.
Also.
Also.
Gut, also wir haben ab hier
steht die SSL Verbindung.
Das bedeutet, ab hier kann
ich lesen
aus
der Verbindung.
So.
Hm.
Ich kann lesen aus der Verbindung.
Also, das heißt sowas wie
embed tls read
oder sowas. Ne.
SSL read.
So, was ich da jetzt drüber rauskriege ist ganz normales
http. Also da kommt jetzt ein get.
Also das da kriege ich im Endeffekt.
Ah ne, ich sehs. Moment.
Ich zeige euch, was ich jetzt lesen will.
Einlesen will.
Oder auch nicht.
Was hat der für Schmerzen? Hallo?
Ah jetzt. So, ich will das hier einlesen.
Guckt. Get. Wir machen ein get request.
Auf
slash im Endeffekt.
So.
Ich habe jetzt ja tcp Verbindung
aufgebaut. Darüber eine
verschlüsselte SSL Verbindung.
GitHub CLI. Was ist das denn?
Git.
Git hat eigentlich eine ziemlich gute Kommandozeile.
Sbarro.
Ja genau so ist es.
Und jetzt
kriege ich eigentlich hier nochmal diesen Text
drüber. Also das ganz normale
http request kann ich jetzt hier drüber einlesen.
So. Also. Machen wir mal
embed ssl tls read.
Als erstes brauchen wir hier den ssl Context.
Den braucht man immer für alles in embed tls.
Wo ist er?
Da ist er.
Und ssl.
So. Und wie gehts jetzt weiter?
Buffer
size t length.
Mal frage an die
C++ und C Leute. Falls hier
der ein oder andere da ist.
Was bevorzugt ihr in diesem Fall?
So was hier.
So was hier.
248
So was hier.
Oder. Was ja auch eine
Möglichkeit ist in C++.
Äh.
So. Das geht ja auch.
Also wie gesagt. Es gibt einmal die Möglichkeit
das so zu schreiben.
Also einmal die Möglichkeit so zu schreiben.
So. Oder.
Die Möglichkeit das
so zu schreiben.
Äh. Ich glaub size.
So.
Was ist denn davon besser?
Das zweite
sieht doch super aus.
Sebarro ich hör da irgendwie so ein bisschen
raus bei dir.
Das zweite hat seinen Charme
insofern, weil man hier die size direkt
abfragen kann. Aber nachdem es in der Zeit ist kann ich
einfach die Zahl doppelt schreiben.
Das C++ Gremium
mag mit Sicherheit das zweite.
Übrigens eine Sache. Wo man auch
wieder sieht finde ich, dass das ganze
was das C++ Gremium macht
nicht immer so hundertprozentig durchdacht ist.
Man kann ja mit Standard C++
mit Standard C Arrays
kann man ja sowas hier machen. Size
keine Ahnung.
2084 so.
Und dann kann ich sowas hier machen.
Sowas kann ich hier nicht machen.
Also ich kann quasi
nen. Nennen wir mal
in Anführungszeichen dynamischer Wert
kann ich quasi nen Array
initialisieren. Kann ich sagen. Oder. Oder.
Länge anlegen.
const exp geht dann.
Was? Echt?
Ja gut. Dann ist es ja zur Compile Zeit.
Dann ist es ja zur Compile Zeit.
Dann ist es ja zur Compile Zeit.
Ne ich mein ja.
Wenn man das einliest
jetzt. Also mal angenommen ich
Also zum Beispiel es gibt ja
jede Menge Parsing
Funktionen. Also irgendwie was.
Pass bla bla bla. Und das gibt dann
irgendwie ne Länge zurück.
Und
wenn ich jetzt das hier anlegen
will. Na gut das ist jetzt
doofes Beispiel. Weil das gibt nix zurück.
So und ähm.
Das wird funktionieren.
Wenn ich das mache in
C. Allerdings in C++
geht das mit dem Standard Array nicht.
Es ist klar das es nicht geht. Weil es sind Template Parameter.
Und Template Parameter müssen zur Compile
Zeit feststehen.
Ja aber wie mach ich das denn dann?
Also mal angenommen.
Also mal
angenommen. Ich bräuchte das jetzt.
Ich mein klar ich kann nen Vector machen.
Das ist mir auch klar. Das funktioniert.
Wobei das dann hier wieder schwierig wird.
Wie würd ich das denn mit nem Vector machen?
Wie würd ich das denn mit nem Vector machen?
Also.
2048. Zack.
Ähm.
Das ist nicht Standard. Also das heißt.
Ich hab Glück das der GCC das frisst.
In dem Fall hier jetzt. Oder wie?
Ja also wie gesagt. Mal angenommen.
Mal angenommen.
Wir machen das jetzt mal als Beispiel.
Also mal angenommen. Ich hab hier wirklich sowas.
So und das.
Und das ist halt ne Parsing Funktion.
Die gibt mir irgendwie zurück.
Wie viel Zeichen gelesen wurden.
Oder so. Irgendwas. Ist jetzt auch egal.
So und.
So also sprich das ist dynamisch.
Je nachdem was. Je nach Input.
So. Ähm.
Fangen wir erstmal.
Fangen wir erstmal an der Stelle an.
Wie würde man das in C richtig machen?
Also. Ich hab jetzt Glück.
Also wenn ich. Chat.
Also wenn ich euch richtig verstanden hab.
Ich hab jetzt Glück das der GCC das macht.
So. Ähm.
So mal angenommen.
Ich will das jetzt.
Ich will das jetzt machen.
Also mal angenommen.
Mein GCC könnte das nicht.
Dann würde ich dann sowas hier machen.
Ähm.
Nur mal so. Nur ich hab keine Ahnung davon.
Interessiert mich jetzt wie man sagt.
Äh. Ups. Oh. Alter. Ist ja gut.
So. Äh.
Äh. Warte mal.
Und jetzt irgendwie. Keine Ahnung. Ähm.
Äh. Len mal.
Size of.
Äh. Äh.
Äh. Ja gut.
Was ist es in dem Fall. Äh.
Läuft gleich aus.
Sowas hier oder wie?
Also müsst ihr dann in der Richtung machen.
Oder?
Ja stimmt.
Also sprich so ist dann quasi die.
Offizielle Variante.
Ja gut.
Ob das jetzt auf dem Stack liegt.
Das ist mir ehrlich gesagt ziemlich wurscht.
Ich muss mich in dem Fall eh so und so drum kümmern.
Dass ich selbst aufräume.
Da kommt mir ja nichts.
Wo ist es dann speichern. Juckt mich nicht.
So.
Genau. In C kann ich New machen.
Das heißt in dem Fall müsste ich jetzt das da machen.
So müsste ich aufräumen.
Jetzt wieder.
So.
Ich meine das ist jetzt natürlich böse.
Weil. Klar.
Also sprich.
Das wäre die Variante.
Wenn mein GCC das nicht kann.
So. Ok.
Also. So. Und in C++.
Und in C++.
Mach ich jetzt was?
New. Uint.
So.
Äh. Würde das funktionieren?
Ja das. Klar. Mit Vector geht es.
Das ist klar.
Das geht. Ok.
Oh. Oh. Oh. Also. Aber.
Ok.
Und das geht jetzt auch nicht nur weil ich GCC hab.
Sondern das ist jetzt quasi C++ Standardmäßig.
Das ist ok.
Oder wie.
So. Und danach müsste ich mal wieder aufräumen.
Wenn mit Vector. Wie gesagt.
Mit Vector ist klar das das funktioniert.
Wobei was mir mit.
Was mir ähm.
Was mir bei Vector nicht ganz klar ist.
Ich meine angenommen.
Wir machen das jetzt mit Vector.
So. Und das hier. Äh.
Buffer.
Wobei.
Das kann man ja auch schon wieder so und so anlegen.
Ne.
So.
So. Wie sag ich dem denn jetzt.
Das er.
Warte mal. Da hat doch. Da hat doch irgendeiner.
Travorex. Da hat doch grad irgendwas im Chat geschrieben.
Wie das funktioniert.
Kann leider nicht richtig scrollen.
Weil es irgendwie suckt.
Ähm.
Ja das ist offiziell.
C++.
Ach ok. Man schreibt direkt die.
Die Size dahinter.
Also sowas hier dann.
Exzellent.
Und da Data.
Ok.
Das wird das so. So wird das funktionieren.
Wird das so jetzt gehen.
Ich meine den muss ich jetzt ja nicht löschen.
Ne.
Der räumt der ja automatisch wieder auf.
Also ok.
Also sprich.
Das hat dann die Länge.
Also in dem Fall sagen wir mal.
Wir schreiben es jetzt mal rein.
Und machen dieses sinnlose Pass hier oben wieder weg.
Ähm.
Also sprich.
Das wäre dann ein Vektor mit 2048
Nuller.
Ja das ist eigentlich auch ok.
Da kann ich sie jetzt gar nicht dafür flamen.
Großartig. Das ist in Ordnung.
Da kann ich mit leben.
Das ist ok.
Das sieht aus ob das ganze funktioniert.
Also mtls read.
Jetzt müssen wir allerdings aufpassen.
Wenn wir hier was einlesen.
Du kannst den Namen Vektor flamen.
Ja das stimmt.
Wie würdest du es nennen?
So Dynamic Array?
Oder wie würdest du es nennen?
List? Oh List.
Wie in .net.
Könnte man es nennen.
Genau Tobi. Könnte man machen.
Aber mit List könnte ich jetzt auch eher was anfangen.
Ganz mit Vektor ehrlich gesagt.
Denn Vektor ist für mich
Eher sowas wo es von
Irgendwie um Geschwindigkeit und Beschleunigung
Von Punkt A nach B oder irgendwie sowas geht.
List ist auch
Schwachsinn.
Naja gut. Ist ja auch egal.
Also zumindest es funktioniert.
xxminifinixxx
Sagt
Ich programmiere in C ein Programm
Für meinen NXT Roboter.
Er hat aber noch ein Problem mit kleinen
Kurven. Könntest du mir helfen?
Oh ne da habe ich gar keine Ahnung.
Ist das Lego?
Übrigens ihr habt es gesehen.
Ihr habt es gesehen. Der Browser ist der Meinung.
Da kommt ein SSL Zertifikat.
Äh NXT Roboter.
Ist das Lego?
Ah Mindstorm ist das.
Ne.
Kein Schimmer. Habe ich noch nie was mitgemacht.
Keine Ahnung.
Machst du es einfach weil es dich interessiert?
Oder macht ihr das in der Schule?
Aber so und so habe ich absolut keinen Plan.
Okay also.
Wir lesen das jetzt ein.
Ähm.
So jetzt muss ich mal überlegen.
Also.
Moment wie wie wie.
Example read.
Okay read.
Was machen die denn hier?
Embed TLS read.
Ah verstehe.
Die lesen quasi so lange ein.
Bis der Client nichts mehr schickt.
Denke ich mal.
Ich weiß nicht was da sowas in der Richtung ist.
So und da müssen wir den HTTP Request rausbekommen.
Ähm.
Okay also.
Ich mach mal die einfache Variante.
Wir lesen jetzt mal ein.
Bis das hier gleich 0 oder was ist.
Ähm.
Ne.
Moment.
Was gibt es zurück?
Ähm.
Return. Boah wilder. Uiuiui.
Die haben aber Doku as fuck hier.
Positive numbers of bytes read.
Also sprich.
Es muss größer 0 sein.
Also sagen wir mal okay.
Größer 0.
Wenn es größer 0 ist dann habe ich was eingelesen.
Alles klar.
So.
Äh.
Achso Moment.
Das muss ich mir speichern.
Weil ansonsten kriege ich ja die Länge nicht raus.
Ähm. Länge.
So.
Wenn die Länge größer 0 ist.
Ja Tommi das könnte ich machen.
Aber äh. Also irgendwelche Type Devs nochmal um 5 Ecken finde ich machen die ganze Sache noch komplizierter.
Äh.
Als einfach die Typen zu verwenden.
Auch wenn sie blöd benannt sind.
So also Länge.
Wenn die Länge größer 0 ist dann habe ich was eingelesen.
Größer gleich 0 ist im Prinzip auch okay.
Dann hat der Client nichts geschickt.
Ähm.
Und nun gäbe ich das doch einfach mal aus.
Würde ich sagen.
Okay.
Also was ich jetzt erwarten würde.
Was der hier ausgibt ist.
Ähm.
Also quasi.
Zumindest teilweise.
Ich weiß nicht ob ich das in einem Stück einlesen kann.
Eigentlich müssen wir das hier auch in der Schleife einlesen.
Weil ansonsten hört der einfach mittendrin auf.
Aber mal gucken wie weit er einliest.
So und jetzt müssen wir sagen.
Jetzt brauchen wir einen String von einem Buffer.
Und wenn ich das ganz falsch liege kann man das so machen.
Ne kann man nicht.
Warum nicht?
Achso.
Ich glaube das liegt daran weil das Char sein muss.
Kann das sein?
Äh.
Moment.
Ging das nicht?
Ich meine.
Ich könnte einfach tricksen.
Weil ich habe schon mal nachgeguckt wie das geht.
Und habe einfach mir was gebastelt.
Mal gucken wie ich das gemacht habe.
Ah.
Wieso?
Das ist doch richtig was ich da gemacht habe.
Guck mal da.
Ah ist das kein Int?
Doch ist auch ein Int.
Ach das ist ja ein Vector.
Da muss ich Date.
Aha richtig.
Stimmt ja.
Klar.
Aber jetzt müsste es eigentlich funktionieren.
Äh ich.
Ich uploade einfach mal.
Da zeigt bestimmt einfach nur Mist an.
Oh ne.
Ach der Cast.
Bei der Gelegenheit.
So.
Jetzt jetzt aber.
Jetzt jetzt funktioniert es.
So und jetzt gucken wir mal was wir da eingelesen haben.
Bam.
Ja.
Der http Request ist am Start.
Exzellent.
Funktioniert.
So und jetzt bleibt uns nichts anderes übrig.
Wir haben jetzt den http Request eingelesen.
Haben festgestellt das es ein get Request ist.
Das sparen wir uns jetzt alles.
Weil ich weiß das es ein get Request ist.
Weil ich mache den get Request selber.
Mit einer Webseite.
Mit einer.
Mit der simpelsten Webseite.
Die man sich nur vorstellen kann.
Antworten wir jetzt.
Und zwar schicken wir da jetzt.
Folgendes zurück.
Mbtls.
Right.
SSL Right.
Ähm.
So.
Buffer und Länge.
Ok.
Also.
Ne nicht HTML.
Spons.
Da ist ja noch Zeug drin.
Also was müssen wir da jetzt sagen.
Äh.
Da krieg ich jetzt http.
Slash 1.1.
200. Ok.
So und dann immer schön.
Ctrl R, Ctrl N.
So ähm.
Dann brauchen wir als nächstes.
So was wie Content Type.
Content Type.
Content Type.
Ähm.
Text HTML.
Auto.
Ja warum nicht Auto.
Autobeste.
Warum soll ich den Kram von Hand schreiben.
Was ist Ctrl R?
Das ist Carriage Return.
Das ist auf einer Schreibmaschine das Zurückschieben des Schreibkopfes.
Das klingt bescheuert.
Aber daher kommt das.
Deswegen ist ja New Line unter Windows.
Falls ihr euch schon mal gefragt habt.
Was denn unter Windows das hier ist.
Das liegt daran.
Weil die Schreibmaschine.
Die Schreibmaschine macht.
Für eine neue Zeile.
Macht die Schreibmaschine.
Zurück auf 0 schieben.
Und dann 1 nach unten drehen.
Und deswegen hat sich Microsoft gedacht.
Das ist es was wir in Windows auch brauchen.
Das ist es was wir in Windows auch brauchen.
Ja übrigens.
Cheat 95 das ist die beste Erklärung.
Ähm.
Die ersten Terminals waren ja Drucker.
Also sprich.
Das was ihr hier seht.
Dieses Terminal.
Deswegen nennt man das ja auch Terminal Emulator.
Das ist kein Emulator im eigentlichen Sinne.
Wie jetzt irgendwie ein N64 Emulator.
Es ist aber kein richtig echtes Terminal.
Oder auch kein richtig echter Drucker.
In dem Sinn.
Die ersten Terminals waren Drucker.
Und da war das halt wirklich so.
Da musstest du zum Schreiben sagen.
Ok Drucker.
Kopf nach links.
Das Backslash R ist Carriage Return.
Das ist das Steuerzeichen für.
Schreibkopf von der.
Wie nennt man das?
Schreibkopf von der Schreibmaschine.
Nach links zurückschieben.
Und dann kommt ein Backslash N.
Das ist das Zeichen für New Line.
Ähm.
Andere Leute waren da ein bisschen.
Fortschrittlicher und haben gesagt.
Ok auf dem Computer reicht uns.
New Line.
Zu verwenden.
Naja gut.
Carriage Return gibt es da halt nicht so.
Wenn man hier sowas hat.
Aber daher kommt das.
Und bei HTML ist es halt.
Bei HTTP ist es halt nun mal im Protokoll so definiert.
Das die einzelnen Abschnitte eben mit.
Carriage Return New Line beendet werden.
Also sprich das hier ist eigentlich die HTTP Response.
Erst der Header.
Zweiter Header drin.
Und alles muss Carriage Return New Line getrennt sein.
Und am Ende kommt ein Carriage Return New Line.
Carriage Return New Line.
Genauso kann das mittlerweile auch.
Und wir können jetzt übrigens noch mal.
Eine richtig Big Brain Geschichte machen.
Wir können nämlich mal sagen.
charset gleich utf8
So.
Das ist dann noch besser.
Dann kommt der Browser gar nicht auf die Idee.
Das in irgendwelchen komischen Encodings anzuzeigen.
Sondern utf8 bleibt einfach utf8.
Und ist utf8 und gut ist.
So.
Das ist die Response.
Und jetzt kommt das HTML rein.
Ähm.
Ich glaube aber.
Dafür muss man erstmal sagen.
Dafür muss man das hier erstmal abschließen.
Genau.
Das ist quasi Response und Header.
Und jetzt kommt der eigentliche Content.
Also.
HTML.
Grandiose Seite gibt das jetzt.
Body.
Body.
Cute.
Cute Chat.
So.
Und das schreiben wir jetzt.
Response.
Wisst ihr was?
Ich bin faul.
Wobei.
Wobei.
Ich weiß.
Ich weiß.
Ich weiß.
Ich weiß.
Da schreien die C-Leute jetzt.
Ich mein.
Man kann auch einfach sowas hier machen.
Response.
Und strrlen.
Haha.
So.
Einfach mal weggecastet.
Gut.
So muss das sein.
So. Upload.
Und jetzt schauen wir mal.
Ob deine Webseite zurückkommt.
Übrigens.
Ich hätte jetzt einfach einen Arduino String genommen dafür.
Und nicht strrlen.
Chat.
Ich muss mal kurz das Fenster neu laden.
Und dann gucken wir mal.
Ok.
So.
Ich habe jetzt eine Störung gefunden.
Störungen.
Ich habe seit 1,5 Jahren eine Störung.
Das DSL immer abbricht.
Mittlerweile wurde die Störung gefunden.
24V Fremdspannung.
Machen die Leute denn da.
Hat da irgendwie einer ein Licht angeschlossen.
Oder so.
Was ist denn so eine typische Sache.
24V.
Akkustaubsauger laden oder so.
telefonleitung so jetzt gucken wir mal ob eine webseite zurückkommt und es
kommt eine webseite zurück und jetzt gucken ob es funktioniert jetzt kommt
der moment der wahrheit im browser ok übrigens mein zertifikat ist natürlich
müll na ihr seht ja hier also kek we organization unit kek we also das
zertifikat ist totaler müll kein wunder dass das funktioniert und das
zertifikat ist auch für einen anderen host ausgestellt und alles so ok wir
wir wir accepten the risk and continue und BÄM CUTE CHAT EIJAJA wir haben
wir haben eine eigene webseite über einen eigenen webserver über https
ausgeliefert so und jetzt ist es natürlich einfach da mehr drüber
auszuliefern also also wenn ich jetzt cute chat darüber ausliefern kann kann
ich da noch mehr drüber
ausliefern wir probieren jetzt mal was wir probieren jetzt mal was passt mal
auf passt mal auf wir machen jetzt wir machen jetzt das
nächste und zwar wir legen jetzt hier unter data mal eine neue webseite ein
index html so und da legen wir machen jetzt eine richtige webseite ist richtig
in anführungsstrichen so 0w ja das ist alles okay und ich brauche ein
ein bild 0w zertifiziert Time
cricket 4 0w-bild 0w perfekt ja nun we nein a keine halbnackich fini die
twitch-mädels das brauchen wir jetzt net ich brauche ich brauche und bild ich
brauche ein bild 0w-bild ja 0w-bild perfekt
im idioEZ account da haben ein schönes bild muss man eigentlich images so beenden oder geht das auch ohne so dann war noch eine überschrift hairi b beeint raids
aus habe ein schönes bild ist ja des smallsieren
noch früher bis selbe zeingen gew gigs ça va aber da wNehmt ihr keine seenings
haben schönes bild das에요 4 kickeda gente similarum
oder geht das auch ohne?
So, dann machen wir noch eine Überschrift.
H1 Omega 0.
So, und diese Seite
liefern wir jetzt aus vom Flash.
Diese Seite liefern wir jetzt aus vom Flash.
Das wird, Leute, das wird Big Brain jetzt.
Dass das funktioniert.
So, also wir brauchen erstmal eine
ein Terminal.
Terminal.
Upload.
Also ich habe jetzt eine Webseite
angelegt, die wahnsinnig
wirklich High Octane Inhalt hat.
Wir können übrigens, ich schaue mir mal
kurz an, ob die Webseite an sich überhaupt funktioniert.
Plattform
Documents,
Plattform I.O., Projects,
Web-Server, Data,
Chrome, habe ich nicht drauf.
Chrome, Index, HTML.
Okay, die Webseite funktioniert prinzipiell.
Jetzt müssen wir nur gucken, dass wir die vom
ESP ausgeliefert kriegen.
So, Webseite abgeloadet.
Webseite abgeloadet.
Und nun gucken wir mal.
So, Response hier ist klar.
Die Response brauchen wir nach wie vor.
Allerdings der Inhalt,
den brauchen wir noch anderes.
Noch andere Inhalte. So, also sagen wir
Helper, Read File
from Spiffs.
Als, keine Ahnung,
String. Oh, ich
hoffe, das was ich da gebastelt habe, funktioniert.
Sonst müssen wir es von Hand machen.
Slash Index HTML.
Also ist das, was ich hier hochgeladen habe.
Ähm, zack.
Das ist das HTML.
Distortion, Dankeschön.
Exzellent.
So, ähm, und jetzt machen wir hier noch was.
Jetzt sagen wir, keine Ahnung, äh, HTML gleich
Response plus HTML.
Und jetzt haben wir einen String mit der Webseite und der Response.
Und wahrscheinlich müssen wir jetzt noch mal hinten dran
Carriage Return New Line, Carriage Return New Line machen, denke ich.
Dann denke ich mal, dass das funktioniert.
Das ist jetzt aber einfach nur geraten.
Und jetzt schicken wir das Ganze mal.
Gucken wir mal, ob das jetzt funktioniert, was ich mir da gerade vorstelle.
Jetzt bin ich echt gespannt, ob das funktioniert.
Also wir lesen jetzt die Datei, die ich gerade erstellt habe, vom Flash.
Und, ähm, zeigen sie im Browser an.
Ich weiß nicht, ob eine Read Function funktioniert, die ich hier gebaut habe.
Okay, okay, jetzt, jetzt, jetzt kommt es drauf an.
Okay, wir lesen jetzt die Datei, die ich gerade erstellt habe, vom Flash.
Okay, wir testen erst mal mit dem Curl, ob es funktioniert.
Sieht sehr gut aus, sieht sehr gut aus.
Bam!
Leute!
Webseite vom Flash-Speicher ausgelesen, über den eigenen Web-Server, über TLS ausgeliefert, an den Browser.
Was geht's Besseres?
Also, also, ohne Scheiß, also, viel, viel, viel mehr kannst du dann wirklich in vier Stunden streamen nicht wollen.
So, und das nächste Mal erweitern wir das dann noch,
dass der erstmal den Get-Return, den Get-Return, den Get-Return, den Get-Return, den Get-Return,
den Get-Request parsen kann und dass er nen Post annehmen kann.
Und Basic Auth machen wir das nächste mal noch!
Also, muss man das jetzt aufschreiben, alleine, ich werde es dann vergessen, ich werde ganz begeistert.
Also, nächstes Mal security Auth,
PostSupplyen und borgenlaus und getrackt.
Und dann die Seite auf dem ESP Display, nee, die Seite brauch ich nicht auf dem ESP Display.
Außerdem ne HTML Seite auf'm ESP Display rendern, dazu fehl mir nen äh, ne Render Engine vom ESP Display.
Ja!
Render-Engine für den ESP, für den
HTML-Render. Welches
SDK ist das? Was denn?
Äh, das, achso.
Ähm, das ist
ich zeig's dir
das ist ESP-IDF
4 mit Arduino
als Modul.
Also im Prinzip ist es ein Arduino
mit der Möglichkeit ein bisschen
mehr zu konfigurieren.
Mit einem reinen Arduino
ähm, ginge das auch
ohne Probleme. Das, was dir da in die
Quere kommt, also was mir in die Quere kommt, ist
dass ich
ein paar
das ist schon ESP32, genau.
Das ist ein ESP32.
Das müsstest du aber auch auf dem
ESP2866 machen können.
Allerdings, da machst du nicht mehr
als eine Verbindung wahrscheinlich. Der hat ja noch weniger
RAM. Also ich
müsste hier so 4, 5 Verbindungen maximal
hinkriegen. Da ist auch der RAM vom ESP32 voll.
Ähm,
ja, das Problem mit dem
offiziellen Arduino-Package
bei Platform.io
ist, die sind noch auf ESP-IDF
3.3
Das ist uralt.
Das kann glaube ich noch nicht mal C++
Das kann glaube ich sogar nur C++14 oder so.
Und das ist der Grund, warum
ich ein IDF-Projekt
eigentlich gemacht habe, dass ich eben die
neueren Tools verwenden kann. Also sprich, dass ich
ordentlichen C++17-Unterstützung
hab. Weil wenn schon C++
also wenn man sich schon mit dem ganzen Kackrum
ärgern muss, äh, dann will ich's nicht.
Das ist was halbwegs Neues, ja.
So. Aber das ist ja cool.
Also das hat jetzt echt einfacher funktioniert, als ich
mir das Ganze vorgestellt hab. Ich mein, klar,
ich will jetzt nicht so tun, ich hab's ja schon ein paar Mal
gesagt, ich will das nicht so tun, als hab ich das jetzt hier
einzig und allein im Stream mit zusammen
gesucht, ne. Ich hab im Vorfeld schon ein bisschen ausprobiert,
wie's funktioniert, klar.
Ähm, aber insgesamt ging das doch deutlich
einfacher, als ich mir das vorgestellt hab.
Aber guck mal!
Da kann man sich doch nicht
beschweren.
132 Zeilen
und,
aber man kann den Kram ja sogar lesen,
so ist das ja nun auch wieder nicht, ne.
Also,
132 Zeilen, äh,
für ein bisschen
statisches HTML, ist doch in Ordnung.
Zumal wir ab jetzt
ja auch easy mehr machen könnten, ne.
Wir haben schon die Webseite vom Flash ausgelesen,
hier, und, äh,
zurückgeschickt. Das heißt, als
nächstes, wie gesagt, als nächstes machen wir Basic Auth,
wir passen die HTTP-Requests
und gucken, dass wir einen Post-Request
für ein Update handeln.
Ach ja, und, äh, Logs ausliefern
über eine Verbindung.
Wobei das mit dem Logs ausliefern wird wahrscheinlich relativ
simpel gehen. Ich mach einfach die
Verbindung nicht zu und sende
weiterhin, äh, äh, Dinger.
Wir können das ja, ich kann das ja mal kurz ausprobieren.
Das Schöne ist ja,
dadurch, dass wir eben, äh,
für jede Verbindung einen eigenen Thread
aufmachen, ist es auch ziemlich
einfach, ich kommentier den Kram hier mal
aus, äh,
dadurch, dass wir für jede Verbindung einen neuen Thread
aufmachen, ist es auch ziemlich einfach,
hier, äh,
Sachen, Sachen zu schicken, ne?
So, Text, wollen wir mal
Text plain
und, ähm,
Hauptsache es funktioniert.
So, jetzt machen wir hier mal eine Endlosschleife
und sagen, okay, wir verschicken
einfach alle, alle,
keine Ahnung, fünf, fünf, alle,
alle, jede Sekunde,
jede Sekunde schicken wir
jetzt mal
eine Nachricht.
Keck weh.
So, und jetzt sollte die Verbindung,
äh, eigentlich offen bleiben
und ich müsste jede Sekunde
eine Nachricht kriegen.
Was ist eigentlich das aktuellste
HTTP, äh,
irgendein Zweier?
Das hab ich jetzt verkehrt gemacht.
Achso, muss casten.
Ja, was ist denn nur mit casten los?
Hab ich nicht, ich,
haben sie nicht sogar schon was mit HTTP3
letztens, äh,
Preview-mäßig erzählt? Ja, doch, genau.
Genau, HTTP3
ist hier grad upcoming.
Also, wie gesagt, die sind auch schon
bei zwei, ja, zwei, zwei ist
sogar schon mäßig verbreitet.
Okay, das, ah, Moment,
Moment, ich hab ja das Wichtigste vergessen.
Control-R, Control-N.
Muss ich noch schicken.
Und er sollte jetzt jede
Sekunde eigentlich eine Message schicken.
Äh, was ist denn
der aktuelle Standard, der am meisten benutzt wird?
1,1.
1,1.
1,1 ist so mit, mit Abstand, äh,
würd ich mal sagen, 95%
des Internet-Traffics wahrscheinlich.
So, mal gucken, ob das jetzt klappt.
Ne.
Okay, es funktioniert doch nicht
so, wie ich mir das, äh, ah, doch, guck mal hier,
Leute, jede Sekunde krieg ich
ein KQ geschickt. Das ist wunderbar,
um Logs zu schicken, äh,
per HTTP.
Und die Verbindung geht nicht zu, jetzt können wir
auch gleich noch mal gucken, jetzt
gucken wir doch grade mal,
ähm,
guckt euch mal den Speicher, oh, der Speicher wird
nicht freigegeben. Warum wird der nicht freigegeben?
Warum wird der Speicher nicht freigegeben?
Guckt mal, der Speicher wird nicht freigegeben.
Achso, weil die Schleife nie endet.
Lull, kann ja nicht gehen.
Die Schleife geht nie, okay, ähm,
also, wenn hier, wenn, wenn ein
Fehler zurückkommt,
ungleich null, ungleich null, okay.
Also, wenn das,
wenn das, äh,
ungleich null ist,
dann
break.
Oh, sieht das hässlich aus jetzt.
Ja.
Naja, ich werde den nicht
für Schönheit bezahlen.
Na, die Schleife,
ich hör ja nie auf
mit der Schleife hier, kein Wunder, dass das
Speicher nicht freigegeben wird, der hängt für Ewigkeiten
in dieser, in dieser Wildschleife jetzt drinnen.
So, Upload mal ein bisschen schneller.
Ich hab übelst Kohldampf.
Oder wie der Carsten jetzt sagen würde,
ich hab Knast. Das sagt man im Osten wohl
irgendwie so, ich hab Knast.
Klingt,
das klingt irgendwie wie Knast.
So, also,
warum ist das jetzt abgebrochen?
Du sollst nicht abbrechen.
Du sollst weiterschreiben.
Aber zumindest sieht man jetzt, der Speicherplatz wird
freigegeben, seht ihr?
Der Speicherplatz wird wieder freigegeben, oh, das ist schon mal gut.
Nach einem Keg W bricht der ab,
warum bricht der nach einem Keg W ab?
Das gehört sich aber nicht.
Na gut, dann mach ich das nochmal weg.
Und wir testen mal, wie viele Verbindungen,
kann man zwar nur einmal testen, aber wie viele
Verbindungen wir aufgebaut kriegen.
Das Break ist aber
conditional gewesen, dass
das nur abbricht, wenn er nicht richtig schreiben kann.
Und der müsste einen schreiben können, weil die Verbindung noch
läuft.
So, das ist das letzte, was wir ausprobieren.
Ich will mal gucken, wie viele Verbindungen
ich aufgebaut kriege. Also ich tipp
mal so auf,
keine Ahnung, 3 oder 4 oder
maximal 5. Mehr
gehen da nicht.
Aber für so ein kleines Kackding, also, ja,
ist das nicht verkehrt.
Okay, erste Verbindung.
Geht.
Erstes Mal, zack, 40 KB weg.
Na, nicht ganz, 30 KB weg. So, nächste Verbindung.
Zack.
Nochmal 30 KB weg.
Ja, ungefähr, ungefähr 30 KB pro
Verbindung. Zack.
Nächste Verbindung.
Wieder 30 KB. Jetzt wird der RAM aber
langsam schon knapp.
Oh, geht nicht mehr. Okay.
Drei Verbindungen.
Mehr geht nicht.
Memory Allocation fehlt. Mehr
geht nicht. Okay. Aber,
ich mein, was willst du mehr?
Ja.
Ich denk mal, wenn ich das Display nicht für das Display
äh, die ganze Display-Geschichte
braucht
auch nochmal so ungefähr
40 KB RAM.
Also, wenn wir die Display-Sache ein bisschen optimieren,
kriegen wir vielleicht noch eine Verbindung hin.
Jaja, brauch ich nur
für mich, also,
das reicht, wenn ich da eins, zwei
verbinde. Zwei Verbindungen wären gut.
Zwei Verbindungen wären gut,
weil, dann könnte ich
Logs mir angucken, Remote, während ich
nen Firmware-Update mache.
Zwei Verbindungen sind okay. Der Rest
ist jetzt nicht unbedingt,
ähm, das muss nicht sein.
Excellent.
Ich bin begeistert.
Wunderbar.
Leute. Chat.
Hab ich Fragen übersehen.
Wenn nicht, dann könnt ihr sie jetzt noch raushauen.
Guck jetzt nochmal durch.
Hast du WSL2 schon mal
probiert? Ja.
Wenn man keine Linux-VM benutzen
kann, ordentlich, und wenn man keine
Linux installieren kann auf irgendeiner anderen,
dann ist WSL2 nicht verkehrt.
So, äh, Moment. Chat.
Dissortion hat abonniert.
Habe ich gar nicht gesehen. Dankeschön. Zwei Monate.
Excellent.
Ne, ich glaube, ich habe nichts übersehen. Großartig.
Ne, ne, meine WSL2 löst meine
VM nicht ab. Das liegt ja schon daran, dass
äh, grafische Programme nicht gut funktionieren.
Mit WSL. Du kannst mit WSL2
zwar einen X-Server verwenden
für Windows, aber die X-Server für Windows
sind ja noch schlechter als die X-Server für Linux.
Ne, noch nicht.
Noch nicht.
Mein Chef hat geschrieben um 14.26 Uhr
Briefing 14.30 Uhr
bei mir. Bin ja froh, dass ich heute frei habe.
Im Oktober dann.
An Weihnachten gibt es COBOL-Stream, Leute.
Da gucken wir,
da programmieren wir ein bisschen COBOL.
Ich weiß gar nicht, wie man
darauf gekommen ist. Irgendeiner war so hartnäckig
und ich musste mich dann
darauf festlegen, dass wir Weihnachten COBOL
programmieren.
Das wird schrecklich, ey.
COBOL. Excellent.
Aber richtig, ja.
Da brauchst du das passende Gehirn
dafür, dass du COBOL programmieren kannst.
Exquisite-Hirn brauchst
du da. Also entweder
so oder so. Eins von beiden. So normale
Leute dazwischen, für die ist das nix.
Aber was sagt der denn?
Also ich bin heute wirklich
zufrieden mit dem,
was wir hingekriegt haben.
Also ich sag jetzt wir. Der Chat ist
ja auch immer mit dabei.
Aber ich bin da wirklich zufrieden mit,
dass wir da einen halbwegs
lauffähigen Webserver hinbekommen haben,
der zwar nur statische Seiten
ausliefern kann und das auch
nur auf einer Fahrt,
auf einer Uhr.
Aber ich mein mit SSL.
Und das funktioniert auch ziemlich gut.
Richtig nice.
1,7.
Excellent.
Passt ja das, was ich eingeblendet hab.
So. Also.
Chat.
Wenn jetzt keiner mehr irgendwelche Fragen hat,
dann
geh ich jetzt was
essen. Und vorher geh ich mal aufs
Klo. Wann ist der nächste Stream? Morgen
wahrscheinlich. Ich hab jetzt ja frei.
Das ist, Leute ich sag euch, das ist richtig
angenehm, weil wir 10 Tagen in Folge
äh, am Start
war, auf der Arbeit
und ohne Wochenende unterbringen. 10 Tage
in Folge, jetzt 4 Tage freizuhaben.
Das ist, das kommt einem extrem
erholsam vor.
Gibt's nicht. Nein.
ETF.
Was ich futter, äh.
Irgendwas normales zum Abendessen.
Ich ess jetzt kein Schnitzel oder Pizza
oder so. Irgendwie ein Brötchen oder sowas.
Gibt's auch mal wieder PoE?
Ich weiß, die neue Season fängt jetzt gleich an
oder hat schon angefangen. Ich komm da grad
nicht dazu, mich da auch einzulesen.
PoE muss man ja immer ein bisschen Theorie craften.
Ach, heute um
10? Nee.
Ich krieg das grad nicht hin.
Ich bin da auch grad nicht drin,
was sich da geändert hat und sowas.
Wahrscheinlich erst
nächste Season wieder. Oder mich
packts irgendwie am Wochenende noch.
Aber dann stream ich
wieder nicht, weil dann bin ich ja am
Kreisegrinden. Wir machen
morgen weiter. Wir
erweitern morgen noch den Webserver,
um
die
Postrequests, die Loggeschichte
und dass der überhaupt
HTTP-Requests ordentlich parsen kann.
Excellent.
So machen wir das.
Was, die Deutsche Telekom?
What?
Ach so, die
sponsoren
irgendein LOL-Turnier wahrscheinlich.
Ja, das hat die bestimmt ordentlich was gekostet, weil
das macht ja heute keiner
mehr umsonst.
Was machen die sonst so?
Also LOL juckt mich ehrlich gesagt nicht die Bohne.
Was machen die denn sonst so? Videos.
Deutsche Telekom. Videos.
Was machen die sonst so?
Cache Royale.
Was?
Clash Royale? Ladder grind?
Clash Royale?
Äh.
Scheint voll angesagt zu sein.
4,47 Tausend Views.
Was ist denn mit der Telekom?
Warum streamt die Telekom
so genial?
Das sind doch bestimmt keine Leute von der Telekom.
Das sind doch irgendwelche
eingekauften, halbwegs bekannten Streamer
Dudes, oder?
Also ich kenn sie nicht, aber das ist bestimmt
keine Telekom-Leute.
Ja, Leute. Schön, dass ihr
alle dabei wart heute.
Wir sehen uns wahrscheinlich morgen im Stream.
Macht's gut, ich geh jetzt was essen. Bis denn.
See you.
