WEBVTT

00:03.050 --> 00:03.970
Pok, Pok.

00:04.530 --> 00:06.170
Pok, Pok, Pog, Pog, Pok.

00:10.350 --> 00:15.920
Pok, Pok, Pog, Pog.

00:16.340 --> 00:17.900
Pok, Pok, Pog, Pog.

00:18.360 --> 00:23.910
Pok, Pok, Pog, Pog, Pog.

00:24.410 --> 00:28.610
Pok, Pok, Pog, Pog, Pog.

00:29.190 --> 00:31.630
Ich muss gerade mal warten,

00:31.670 --> 00:33.270
bis mein Browser geupdatet ist

00:33.270 --> 00:34.330
auf der anderen Seite.

00:35.310 --> 00:35.330
radiant Bass.

00:35.330 --> 00:36.010
Kag Wait.

00:36.910 --> 00:37.970
Keg Waiting,

00:38.810 --> 00:40.390
dass mein Browser geupdatet ist.

00:40.390 --> 00:44.580
ich gebe zu, Freitag

00:44.580 --> 00:46.600
12.16 Uhr ist vielleicht nicht so der

00:46.600 --> 00:48.600
normalste Zeitpunkt zum Streamsauen

00:48.600 --> 00:53.650
für mich. Aber warum

00:53.650 --> 00:54.170
nicht, ne?

00:56.990 --> 00:59.630
Ja, ich hab Urlaub,

00:59.730 --> 01:01.570
richtig. Ich hab

01:01.570 --> 01:03.330
Urlaub seit...

01:03.330 --> 01:05.090
Ich mein, letzter Arbeitstag

01:05.090 --> 01:07.230
war

01:07.230 --> 01:11.020
am 24.

01:11.860 --> 01:13.540
Wobei, also

01:13.540 --> 01:15.600
streng genommen letzter Arbeitstag

01:15.600 --> 01:16.380
war am 24.

01:17.380 --> 01:19.580
Aber ich hatte ja quasi hier

01:19.580 --> 01:20.860
nochmal Bereitschaft

01:20.860 --> 01:23.480
und hier hatte

01:23.480 --> 01:25.300
ich nochmal Teambuilding-Workshop.

01:25.960 --> 01:27.280
Also insofern... Oh Leute,

01:27.380 --> 01:29.320
das war wieder was, ey. Ich sag's euch.

01:30.100 --> 01:31.600
Kann ich euch dann erzählen.

01:31.700 --> 01:32.580
Kann ich euch erzählen.

01:34.560 --> 01:35.400
Wobei, es ging.

01:35.560 --> 01:36.980
Es war bisher...

01:36.980 --> 01:39.460
Es war nervig wie alle Teambuilding-Workshops,

01:39.620 --> 01:41.220
aber insgesamt muss ich sagen,

01:41.280 --> 01:43.900
war das tatsächlich noch der beste Teambuilding-Workshop.

01:44.700 --> 01:45.180
Marabuna

01:45.180 --> 01:47.320
518. Moin.

01:49.320 --> 01:49.560
Düdü.

01:49.580 --> 01:51.200
Düdüt. Düdü. Düdüt.

01:51.960 --> 01:54.660
So. Und...

01:54.660 --> 01:56.680
Deswegen, also so, sag mal so,

01:57.360 --> 01:58.600
Soft-Urlaub

01:58.600 --> 02:00.260
hab ich quasi schon seit 24.

02:00.520 --> 02:02.420
Aber so richtig hart Urlaub, also wo dann auch

02:02.420 --> 02:03.400
wirklich gar nichts mehr ist,

02:04.060 --> 02:05.620
hab ich quasi seit

02:05.620 --> 02:06.620
gestern.

02:08.950 --> 02:10.250
Was war so toll bei dem Teambuilding?

02:10.490 --> 02:12.310
Naja, wie gesagt... Wartet mal kurz.

02:14.510 --> 02:14.690
Hä?

02:17.190 --> 02:18.030
Monk HS.

02:20.790 --> 02:22.390
Was so toll beim Teambuilding war?

02:22.650 --> 02:24.070
Naja, es war nix toll.

02:24.070 --> 02:25.310
Es war nur weniger nervig.

02:26.590 --> 02:28.130
Also toll hab ich's trotzdem nicht gefunden.

02:28.230 --> 02:29.610
Ich mag solche Sachen einfach nicht.

02:31.070 --> 02:32.010
Aber insgesamt

02:32.010 --> 02:34.090
war's tatsächlich ganz, ganz, ganz

02:34.090 --> 02:36.190
okay. Ja, wir haben natürlich

02:36.190 --> 02:38.030
wieder irgendwelche komischen Spielchen gemacht.

02:38.610 --> 02:40.370
Also wir haben... Passt mal auf, passt mal auf.

02:43.250 --> 02:43.730
Ähm...

02:43.730 --> 02:45.790
Typisches, typisches Teambuilding-Spiel,

02:45.870 --> 02:46.730
was wir gemacht haben.

02:47.570 --> 02:49.410
Wir hatten zwei Teams. Also, ne?

02:49.550 --> 02:52.170
Wir waren als ein Team da, aber wir wurden aufgeteilt

02:52.170 --> 02:53.010
in zwei Teams.

02:54.070 --> 02:56.350
Und beide Teams mussten

02:56.350 --> 02:58.710
einen Atomreaktor

02:58.710 --> 03:00.110
fixen.

03:01.010 --> 03:02.530
Natürlich war das logischerweise

03:02.530 --> 03:04.010
kein echter Atomreaktor

03:04.010 --> 03:06.690
und hatte mit Vorfällen in einem Atomreaktor

03:06.690 --> 03:07.890
auch gar nichts zu tun.

03:08.410 --> 03:10.690
Aber das ist so eine typische Story, die gerne bei solchen

03:10.690 --> 03:12.490
Spielchen auf

03:12.490 --> 03:14.110
auf Teambuildings gemacht wird.

03:14.170 --> 03:16.430
Also, das ging voll in der Maßen.

03:16.510 --> 03:18.210
Das ging voll in der Maßen. Also, guckt mal.

03:19.350 --> 03:20.690
Beide Teams...

03:20.690 --> 03:22.470
Beide Teams hatten

03:22.470 --> 03:24.170
einen roten Kreis auf der Erde.

03:24.770 --> 03:26.490
So. Äh, einen orangen Kreis

03:26.490 --> 03:28.450
auf der Erde. Das war der

03:28.450 --> 03:29.370
Atomreaktor.

03:30.870 --> 03:32.510
Und in der Mitte...

03:32.510 --> 03:33.250
In der Mitte...

03:33.250 --> 03:35.990
Was ist das hier? Warum macht es so komische Dinger?

03:36.650 --> 03:37.750
So, und in der Mitte...

03:37.750 --> 03:40.430
In der Mitte stand eine Flasche.

03:40.550 --> 03:42.590
Ich mach jetzt... Das wird kein

03:42.590 --> 03:44.370
Bubar, Leute. Es wird kein Bubar-Bild.

03:44.550 --> 03:46.770
Sieht doch vielleicht ein bisschen so aus. Okay, kein Bubar.

03:47.010 --> 03:48.290
Ja? So.

03:48.810 --> 03:50.630
Also, in der Mitte stand eine Flasche

03:50.630 --> 03:52.250
und da drauf...

03:52.470 --> 03:56.610
Da drauf

03:56.610 --> 03:58.290
lag ein Ei.

03:58.770 --> 03:59.070
Okay?

04:01.070 --> 04:02.950
Okay? So. Und dann hast du

04:02.950 --> 04:04.830
einen Rucksack bekommen. Das zweite machen wir einfach

04:04.830 --> 04:06.590
wieder weg. Und dann hast du...

04:06.590 --> 04:09.310
Alter, Paint. Mein Gott, Paint ist...

04:09.310 --> 04:10.850
Ich bin nicht wirklich traurig,

04:10.910 --> 04:12.670
dass Paint weg ist. Naja, zumindest

04:12.670 --> 04:15.010
hat man dann einen Rucksack bekommen mit Teilen

04:15.010 --> 04:15.230
drin.

04:16.850 --> 04:18.350
Und man musste quasi

04:18.350 --> 04:21.070
mit den Teilen aus dem Rucksack

04:21.070 --> 04:22.990
musste man was bauen

04:22.990 --> 04:24.170
im Team zusammen.

04:24.870 --> 04:26.870
Wie man das Ei

04:26.870 --> 04:28.210
ohne dass es kaputt geht

04:28.210 --> 04:30.850
von der Flasche bekommt aus dem Kreis

04:30.850 --> 04:31.250
raus

04:31.250 --> 04:34.770
und danach die Flasche rausbekommt

04:34.770 --> 04:35.970
ohne dass es kaputt geht.

04:38.110 --> 04:38.870
So. Und da

04:38.870 --> 04:40.770
hatte man dann so Sachen drinnen

04:40.770 --> 04:41.190
wie

04:41.190 --> 04:44.870
ein bisschen... Also, eine Schnur war drinnen.

04:45.510 --> 04:46.230
Es war

04:46.230 --> 04:48.050
ein Kleiderbügel drinnen.

04:48.670 --> 04:51.210
Eine Mausefalle. Ein paar Kabelbinder.

04:51.950 --> 04:52.690
Was es mit dem

04:52.690 --> 04:54.390
Atomreaktor zu tun hat. Also,

04:54.390 --> 04:56.150
es hat insofern was...

04:56.150 --> 04:58.590
Du darfst nicht in diesen Kreis

04:58.590 --> 05:00.290
reingehen, weil verstrahlt so

05:00.290 --> 05:02.410
nach dem Motto. Du musstest das alles

05:02.410 --> 05:04.050
von außen machen. Und wir haben das

05:04.050 --> 05:06.050
ohne Scheiß... Ich glaube, wir haben das mit

05:06.050 --> 05:08.330
am schnellsten von allen Teams, die es jemals

05:08.330 --> 05:09.830
gegeben hat, gepackt, weil

05:09.830 --> 05:12.050
wir haben einfach alle Teile links liegen lassen

05:12.050 --> 05:14.390
und haben uns die...

05:14.930 --> 05:16.010
Die...

05:16.010 --> 05:18.250
Wie ist das? Da war so eine aufgewickelte

05:18.250 --> 05:19.690
Schnur drinnen. Wir haben

05:19.690 --> 05:21.870
die Schnur einfach abgewickelt.

05:23.270 --> 05:24.310
Einer ist hierhin.

05:27.260 --> 05:28.380
Einer hat es hierhin gestellt.

05:28.860 --> 05:29.880
Einer hat es hierhin gestellt.

05:30.400 --> 05:32.300
Mit der Schnur drüber gespannt. Wir haben erst

05:32.300 --> 05:34.380
dann mit der Schnur langsam das Ei runter

05:34.380 --> 05:36.060
gekickt. Das ging,

05:36.720 --> 05:38.560
weil das war auf dem Gras.

05:38.560 --> 05:40.180
Es ist nicht viel passiert mit dem Ei.

05:40.740 --> 05:42.380
So. Dann haben wir an die Schnur

05:42.380 --> 05:44.280
ein bisschen Metall dran gemacht, das quasi

05:44.280 --> 05:46.420
hier immer weiter raus

05:46.420 --> 05:47.640
gedingst, das Ei.

05:48.680 --> 05:50.500
Und danach sind wir mit der Schnur einfach

05:50.500 --> 05:52.060
ein paar Mal im Kreis gelaufen,

05:52.420 --> 05:54.580
bis sie sich um die Flasche gewickelt hat. Dann haben wir die Flasche

05:54.580 --> 05:56.300
rausgehoben. Also, das hat

05:56.600 --> 05:58.500
wie, keine Ahnung, acht Minuten gedauert

05:58.500 --> 06:00.340
oder so. Dann war das fertig, obwohl 30

06:00.340 --> 06:01.540
angesetzt waren.

06:02.280 --> 06:03.300
Naja, das

06:03.300 --> 06:06.160
ist ein typisches Teambuilding-Spielchen, ja?

06:06.860 --> 06:08.660
Typisches Teambuilding-Spielchen.

06:09.500 --> 06:10.200
Jemand Oracle

06:10.200 --> 06:11.620
pfeifert euch, hoffe ja nicht.

06:17.430 --> 06:18.310
Ich habe keine Ahnung.

06:19.050 --> 06:21.090
Und ich fasse Datenbanken auch nicht an, weil ich weiß,

06:21.170 --> 06:22.370
dass ich davon keine Ahnung habe.

06:22.730 --> 06:24.970
Ihr wisst, wie das ist. Es ist wichtig zu wissen, wenn man

06:24.970 --> 06:25.690
keinen Plan hat.

06:27.030 --> 06:28.410
Und von Datenbanken, also

06:28.410 --> 06:30.670
insbesondere natürlich auch Oracle,

06:30.670 --> 06:32.470
weil da kommst du ja nur dran, wenn du

06:32.470 --> 06:34.270
viel Geld hast. Aber

06:34.270 --> 06:36.390
so alles, was es da gibt,

06:36.610 --> 06:38.450
ja, ich meine, von Postgres habe ich zumindest aus

06:38.450 --> 06:40.710
Anwendungsentwicklungssicht noch ein bisschen Ahnung.

06:45.050 --> 06:46.230
Aber von Oracle gar nicht.

06:46.310 --> 06:48.210
Deswegen halte ich da echt die Finger von weg.

06:48.350 --> 06:50.070
Ja, SAP HANA ist auch ganz, ganz

06:50.070 --> 06:50.670
grausam, Alter.

06:52.270 --> 06:54.010
Bei uns auf der Arbeit gab es eine Diskussion,

06:54.070 --> 06:56.010
was man nehmen sollte. Pass mal auf, müssen wir uns mal vorstellen.

06:57.290 --> 06:58.210
Gab es die Diskussion,

06:58.270 --> 06:59.810
was man nehmen sollte für irgendeine Anwendung?

06:59.870 --> 07:02.050
Ich glaube, es war keine neue Anwendung, aber sollte umgebaut

07:02.050 --> 07:03.570
werden. Gab es die Diskussion,

07:04.350 --> 07:06.470
Oracle, SAP HANA,

07:08.230 --> 07:08.950
Sybase

07:08.950 --> 07:10.770
oder Postgres?

07:11.810 --> 07:12.890
Und da haben wir uns

07:12.890 --> 07:14.050
alle angeguckt und haben gesagt, naja,

07:14.410 --> 07:16.790
obviously Postgres, weil

07:16.790 --> 07:18.810
macht alles, kann

07:18.810 --> 07:20.610
alles, funktioniert,

07:21.750 --> 07:22.890
ist etabliert,

07:23.550 --> 07:24.330
kostet nichts,

07:24.910 --> 07:26.830
läuft auf Linux. Also im

07:26.830 --> 07:28.610
Prinzip so, warum?

07:28.730 --> 07:30.570
Warum denkt ihr überhaupt über die anderen

07:30.570 --> 07:32.310
Optionen nach, wenn ihr einfach Postgres

07:32.310 --> 07:33.110
nehmen könnt?

07:34.350 --> 07:35.950
Am Ende hattest du dann da wirklich Leute drin,

07:36.390 --> 07:38.150
die, die ultrakrasse

07:38.150 --> 07:40.470
SAP HANA-Fans waren. Ich kann das nicht

07:40.470 --> 07:42.290
verstehen. Ich habe damit noch nie was gemacht.

07:42.390 --> 07:43.470
Ich will damit auch nichts machen.

07:44.210 --> 07:46.110
Allein schon, weil es SAP ist und wahrscheinlich wieder

07:46.110 --> 07:48.230
30 Trilliarden kostet.

07:49.330 --> 07:50.470
Und Oracle will man

07:50.470 --> 07:52.590
sich auch nicht mehr ans Bein binden, als notwendig

07:52.590 --> 07:54.890
ist. Und irgendeine uralte Sybase-Version

07:54.890 --> 07:56.290
von 1995, erst recht.

07:56.570 --> 07:58.370
Warum nicht, also warum nicht einfach

07:58.370 --> 08:00.270
stinknormales Postgres, wenn es doch schon

08:00.270 --> 08:01.290
zur Auswahl steht?

08:03.640 --> 08:05.840
Aber war's nicht, war's nicht. Ey, ist echt,

08:05.840 --> 08:08.380
ist echt. Böses Enterprise-Keckel

08:08.380 --> 08:08.880
teilweise.

08:11.450 --> 08:12.970
Am Morgen wird MMO gecrindet.

08:13.250 --> 08:15.470
Ich weiß nicht, ob ich MMO im Stream ein bisschen

08:15.470 --> 08:17.730
crinden soll, weil das ist ultra langweilig

08:17.730 --> 08:19.230
zum Zugucken, kann ich euch sagen. Das ist das

08:19.230 --> 08:20.610
langweiligste, was es gibt, ey.

08:21.430 --> 08:23.470
Leute beim MMO-Kreise-Crinden zu gucken.

08:23.850 --> 08:24.330
Zuzugucken.

08:33.580 --> 08:35.620
Postgres macht keine Werbung. Naja, gut.

08:35.860 --> 08:38.020
Postgres hat keine Lobby-Arbeitsleute,

08:38.140 --> 08:39.760
die vorbeikommen und, also

08:39.760 --> 08:41.820
Postgres hat keine so, so, so

08:41.820 --> 08:44.220
Lobby-Abteilung, Sales-Abteilung, die ankommt

08:44.220 --> 08:45.980
und dir das schmackhaft macht. Ja, da

08:45.980 --> 08:47.340
stimmt, das stimmt schon, ja.

08:47.960 --> 08:49.680
Aber in dem Fall mussten es ja nicht mal

08:49.680 --> 08:51.720
irgendwelche CEOs entscheiden, sondern wirklich

08:51.720 --> 08:53.880
Leute aus der Technik. Und wie man da

08:53.880 --> 08:55.600
ernsthaft auf die Idee kommen kann,

08:56.000 --> 08:57.700
SAP oder Oracle versus

08:57.700 --> 08:59.460
Postgres, also, verstehe ich nicht.

08:59.780 --> 09:01.480
Das ist überhaupt eine Frage, dass es überhaupt

09:01.480 --> 09:03.780
die Frage gibt, verstehe ich nicht.

09:04.060 --> 09:05.660
Wenn du Postgres nehmen kannst, sollst du

09:05.660 --> 09:06.680
immer Postgres nehmen.

09:07.560 --> 09:09.820
Raspberry Pi 5 sind es verfügbar, ich weiß, ich hab's gesehen.

09:10.600 --> 09:11.640
Da habe ich trotzdem noch keinen gekauft.

09:11.640 --> 09:13.700
Was sagt denn, was sagt denn Barry Base?

09:15.160 --> 09:15.840
What the

09:15.980 --> 09:18.320
Pi 6?

09:18.500 --> 09:19.880
Warum habe ich am Raspberry Pi 6

09:19.880 --> 09:20.220
gesucht?

09:23.120 --> 09:23.640
Okay.

09:24.980 --> 09:25.740
Die sind nicht

09:25.740 --> 09:26.340
verfügbar.

09:28.830 --> 09:34.450
Ja, die

09:34.450 --> 09:36.970
Sortierbarkeit war hier auch schon mal

09:36.970 --> 09:40.340
besser. Ja, ja,

09:40.500 --> 09:42.320
wir machen gleich, wir machen gleich weiter.

09:42.580 --> 09:44.400
Ich muss den ganzen, ich muss erstmal Betriebssystem

09:44.400 --> 09:45.980
OS-Update machen.

09:46.960 --> 09:47.640
OS-Update.

09:48.720 --> 09:49.720
Eggman-Update.

09:50.080 --> 09:51.080
Dings-Update.

09:51.520 --> 09:52.560
Sonst noch irgendwas Update?

09:52.660 --> 09:54.320
Ähm,

09:56.960 --> 09:59.000
ich weiß nicht, was das ist, aber irgendwas, was wir nicht

09:59.000 --> 09:59.520
mehr brauchen.

10:01.480 --> 10:03.100
Weiß auch nicht, warum das installiert ist.

10:04.020 --> 10:05.160
Wenn nicht, war das mal als irgendeine

10:05.160 --> 10:06.500
Dieb...

10:06.500 --> 10:14.070
Okay, wahrscheinlich,

10:14.290 --> 10:15.910
wahrscheinlich wurde das

10:15.910 --> 10:17.210
mal wegen irgendeiner

10:17.210 --> 10:19.910
Dependency

10:19.910 --> 10:20.870
mit installiert, hä?

10:20.870 --> 10:23.610
Ach komm, ich lass, ich,

10:23.750 --> 10:25.210
naja, ich aninstall das einfach.

10:26.350 --> 10:27.630
Wird sich schon wieder installieren,

10:27.690 --> 10:28.930
wenn man's braucht. So,

10:29.130 --> 10:30.970
also, Packages sind geupdatet.

10:31.290 --> 10:33.410
Wichtigster Check, ASCII-Quarium geht noch.

10:33.490 --> 10:35.290
ASCII-Quarium nach LOLCAT gepiped,

10:35.350 --> 10:37.430
geht auch noch gut. Nice, Reboot-Time.

10:43.400 --> 10:43.880
Meinst du nicht?

10:44.460 --> 10:46.640
Aber zeig mal, hier, wenn die lieferbar sind.

10:49.180 --> 10:50.600
Ja, Starter-Kit braucht keiner.

10:51.040 --> 10:51.340
Ja, doch.

10:51.980 --> 10:54.140
Doch, Starter-Kit. Starters brauchen Starter.

10:54.220 --> 10:56.200
Ja, wenn die noch ein Netzteil brauchen, vielleicht,

10:56.280 --> 10:58.520
oder so, ja, dann. Ich mein, es bietet sich an,

10:58.560 --> 11:00.440
für den aktuellen Raspberry Pi 5 auch ein Netzteil

11:00.440 --> 11:02.260
zu kaufen, weil die

11:02.260 --> 11:04.260
haben ja zum ersten Mal,

11:04.900 --> 11:05.960
also, nicht zum ersten,

11:05.980 --> 11:08.680
aber jetzt zum wiederholten Male

11:08.680 --> 11:10.320
bisschen, bisschen mehr

11:10.320 --> 11:11.980
Maximum Leistungsbedarf,

11:14.560 --> 11:15.080
aber

11:15.080 --> 11:16.980
das brauchen die ja meistens

11:16.980 --> 11:18.780
trotzdem nicht. Also, ich würde

11:18.780 --> 11:20.760
beim Raspberry Pi mit meinem alten Netzteil

11:20.760 --> 11:21.520
ins Rennen gehen.

11:23.400 --> 11:24.560
Das geht, glaube ich, immer noch

11:24.560 --> 11:33.190
voll klar. Was kostet

11:33.190 --> 11:34.410
das Starter-Kit?

11:36.390 --> 11:37.190
Starter-Kit

11:37.190 --> 11:38.890
kostet Raspberry Pi

11:38.890 --> 11:41.350
ja, vier gigreichen Digge.

11:42.470 --> 11:44.650
Äh, SD-Karten,

11:44.650 --> 11:47.010
Power-Sub-Platen, Case. Das Case ist halt auch

11:47.010 --> 11:47.370
kacke.

11:49.470 --> 11:50.870
Ja, sowas geht vielleicht noch nicht.

11:52.410 --> 11:53.110
Ich, ich,

11:53.370 --> 11:54.770
ich würd mir ja sofort wieder das

11:54.770 --> 11:55.790
Flir-Case kaufen.

11:56.610 --> 11:57.370
17 Euro.

11:58.710 --> 12:00.910
Also, ich würd mir ja wieder, das gibt's ja auch

12:00.910 --> 12:03.110
schon für den Fünfer-Pi-5

12:03.110 --> 12:04.770
Flir-Case.

12:06.430 --> 12:06.870
Ja,

12:07.150 --> 12:08.410
das da würd ich mir wieder kaufen.

12:11.570 --> 12:13.030
Das geht voll klar. Gibt's auch

12:13.030 --> 12:14.370
für Raspberry Pi 5.

12:14.550 --> 12:16.670
Ah, nee, das ist für den Vierer.

12:16.890 --> 12:18.810
Aber ich hab's letztens, ich hab's doch letztens

12:18.810 --> 12:20.330
auch schon für den Fünfer gesehen.

12:23.230 --> 12:25.190
Himba Pi Fall Gen 2.

12:25.850 --> 12:27.270
Alles klar, genau, das brauchen wir.

12:28.030 --> 12:29.170
Himba, Himba Pi

12:29.170 --> 12:31.310
Fall Gen 2. Ah, das ist sogar

12:31.310 --> 12:32.950
fürs, fürs Dreier.

12:33.310 --> 12:33.750
Also,

12:34.890 --> 12:36.750
ich hab das, ich hab das auf jeden Fall gesehen,

12:36.890 --> 12:37.910
dass es auch fürs

12:37.910 --> 12:40.970
für den Pi 5 schon gibt.

12:42.130 --> 12:42.770
Eher Flir-Case.

12:42.770 --> 12:43.510
Das ist für den Zero.

12:44.550 --> 12:45.990
Aber guck, die haben auch, die haben auch

12:45.990 --> 12:47.950
ein Pi 5 Case. Das ist, das ist

12:47.950 --> 12:49.710
so mein To-Go,

12:50.090 --> 12:52.090
äh, nee, To-Go ist das, also, falsches Wort.

12:52.410 --> 12:53.210
Das ist so mein, mein

12:53.210 --> 12:55.450
Default Raspberry Pi Case.

12:55.810 --> 12:57.770
Ich find das Ding super. Das sieht gut aus.

12:58.250 --> 12:59.850
Nicht, dass es so entscheidend wäre, aber es sieht

12:59.850 --> 13:02.090
clean aus. Du kannst unten dran relativ

13:02.090 --> 13:03.930
gut noch ne, ne SSD

13:03.930 --> 13:05.650
pappen, SATA-SSD,

13:05.930 --> 13:07.030
beziehungsweise auf USB

13:07.030 --> 13:09.830
SSD pappen. Ist auch genug Platz.

13:09.830 --> 13:11.790
Oder legst du oben drauf, nimmst da so ein bisschen

13:11.790 --> 13:12.870
Klebeband, machst dran.

13:14.550 --> 13:16.630
Und dadurch, dass das gesamte Gehäuse

13:16.630 --> 13:18.790
Alu ist, Kek, Kek-Alu,

13:19.450 --> 13:22.750
Ups, meine E-Mails sind vielleicht grad ein bisschen groß,

13:23.830 --> 13:25.210
weil das Kek-Alu-Case

13:25.210 --> 13:25.570
ist,

13:29.870 --> 13:31.650
verteilt sich die ganze Wärme auch gut rüber.

13:32.290 --> 13:34.190
Also, aber Leute, die ein Raspberry Pi

13:34.190 --> 13:35.690
quasi

13:35.690 --> 13:37.890
24-7 auf, ähm,

13:38.130 --> 13:39.950
hoher CPU-Last laufen lassen wollen,

13:40.090 --> 13:41.810
also mit 80% plus

13:41.810 --> 13:43.550
CPU-Auslastung, dann ist das Case nix.

13:43.970 --> 13:46.030
Das Case, dadurch, dass es so einen großen Metallkörper

13:46.030 --> 13:47.810
hat, ne, verteilt die Wärme ganz

13:47.910 --> 13:50.190
gut und hilft auch ein bisschen, die besser abzutransportieren.

13:50.670 --> 13:51.810
Aber natürlich wird's auch

13:51.810 --> 13:53.770
mit der Zeit zu heiß, wenn du's

13:53.770 --> 13:55.650
volle Pulle 24-7 in einem schlecht

13:55.650 --> 13:57.610
belüfteten Raum laufen lässt, das ist ja klar.

13:58.410 --> 13:59.510
Aber das sind ja

13:59.510 --> 14:02.030
die aller, aller, allermeisten Raspberry Pis

14:02.030 --> 14:07.120
nicht. Du brauchst

14:07.120 --> 14:09.000
dein neues Netzteil, weil der Raspberry Pi 5

14:09.000 --> 14:11.320
einen USB-C-Anschluss hat. Ne, brauch ich nicht.

14:12.280 --> 14:13.420
Weil ich ein ganz normales

14:13.420 --> 14:15.600
China-Chinesen-USB-Netzteil

14:15.600 --> 14:16.280
verwenden würde

14:16.280 --> 14:19.120
und dann ein

14:19.120 --> 14:20.420
USB-C-Kabel anschließe.

14:20.420 --> 14:24.570
Also ich hab Berge,

14:25.390 --> 14:26.690
ja, ich hab

14:26.690 --> 14:28.050
Berge von denen hier,

14:29.270 --> 14:31.290
ich hab aber auch welche mit Quick-Charge

14:31.290 --> 14:32.930
und bis zu

14:32.930 --> 14:35.050
was ist Quick-Charge?

14:36.050 --> 14:37.010
Bis zu 20

14:37.010 --> 14:38.950
20 Volt

14:38.950 --> 14:40.330
5 Ampere oder sowas?

14:47.040 --> 14:50.590
Irgendwie so? Ja, genau.

14:51.350 --> 14:51.450
Ja.

14:52.230 --> 14:54.710
Also sie können sogar Quick-Charge, also die sollten

14:54.710 --> 14:56.590
da nicht auseinanderfallen,

14:58.050 --> 14:58.450
wenn ich den

14:58.450 --> 14:59.590
Raspberry Pi dran anschließe.

14:59.610 --> 15:01.610
Zur Not habe ich noch meine Steckdosenleiste hier,

15:01.610 --> 15:03.010
die hat auch USB-Anschlüsse.

15:03.590 --> 15:06.050
Also insofern, ich denke, ich bin für den Raspberry Pi

15:06.050 --> 15:06.990
gerüstet. Fünfer.

15:07.450 --> 15:09.190
Aber dazu müsste ich mir erstmal einen Fünfer kaufen.

15:16.320 --> 15:16.840
Ja, macht's auch.

15:18.300 --> 15:19.520
Kennst du? Ja, kenn ich.

15:20.100 --> 15:21.600
Kenn ich. Ja, ja.

15:22.620 --> 15:23.200
Kenn ich.

15:24.820 --> 15:26.160
Hab ich aber noch nicht mitgemacht.

15:29.160 --> 15:29.940
So, jetzt,

15:30.100 --> 15:32.000
jetzt geht's los. Jetzt hören wir mal. Rust.

15:32.400 --> 15:34.140
Wobei, bevor wir, wir machen

15:34.140 --> 15:35.820
vielleicht, vielleicht erstmal

15:35.820 --> 15:38.080
die Docker-Geschichte. Bin mir gar nicht

15:38.080 --> 15:40.160
sicher, wo wir stehen geblieben sind. Wie immer,

15:40.480 --> 15:41.900
ihr müsst nicht wirklich bei den letzten

15:41.900 --> 15:44.020
Streams dabei gewesen sein, weil das ja immer ein bisschen

15:44.020 --> 15:45.520
unabhängig voneinander ist.

15:47.080 --> 15:48.180
Schadet allerdings auch

15:48.180 --> 15:49.920
nicht. Das heißt, wenn ihr öfters dabei sein wollt,

15:50.020 --> 15:51.440
könnt ihr ein Follow dalassen.

15:52.020 --> 15:54.020
Postchamp. So, also

15:54.020 --> 15:55.720
ich muss erstmal den ganzen Krempel starten.

15:56.240 --> 15:57.900
Repos. Campchamp.

16:00.570 --> 16:01.870
Hier haben wir ein paar uncommittete Sachen

16:01.870 --> 16:03.850
drinne. So, hier machen wir

16:03.850 --> 16:07.990
Rider auf. Für unser

16:07.990 --> 16:09.150
.NET Backend.

16:09.550 --> 16:11.250
Hier machen wir Rust

16:11.250 --> 16:13.450
auf. Für unser Low-Level-Web-RTC

16:13.450 --> 16:13.950
Zeug.

16:16.290 --> 16:17.330
Wie kommt's?

16:18.210 --> 16:20.490
Ich zeig dir gleich, was Sache ist.

16:21.350 --> 16:22.770
So, Rust. Und hier brauchen wir

16:22.770 --> 16:24.810
Visual Studio Code für unser Frontend-Zeug.

16:25.310 --> 16:26.530
Und zack, bumm, sind schon nochmal

16:26.530 --> 16:28.290
80% RAM voll wahrscheinlich.

16:29.030 --> 16:30.650
Haben wir hier einen Chrome. Oh, es

16:30.650 --> 16:31.830
laggt. Es laggt.

16:33.990 --> 16:34.350
Alter.

16:35.590 --> 16:36.430
Die VM, man.

16:37.790 --> 16:42.200
Was ist mit dem

16:42.200 --> 16:43.600
1CPU-Core los hier?

16:46.340 --> 16:47.500
VM? VM, was ist?

16:48.000 --> 16:49.640
Kriegt ihr schon mal wieder ein?

16:49.800 --> 16:51.980
Das da oben ist meine CPU-Auslastung. Also 8 Cores

16:51.980 --> 16:53.540
und jeweilige CPU-Auslastung.

16:53.760 --> 16:55.560
Was zum Teufel geht da im Hintergrund gerade ab?

16:57.480 --> 16:58.340
Ah, Jetbrains.

16:58.740 --> 16:59.680
Jetbrains macht's.

17:00.020 --> 17:01.100
Jetbrains-Java-Dinger.

17:05.890 --> 17:07.250
Mit Vim wäre es besser.

17:08.310 --> 17:08.470
Ne.

17:09.290 --> 17:10.510
Die CPU-Auslastung, ja.

17:10.950 --> 17:11.850
Aber die Möglichkeiten,

17:12.290 --> 17:14.830
angenehme Sachen zu benutzen, eher nicht.

17:19.880 --> 17:20.800
Es sei denn, du fragst

17:20.800 --> 17:23.080
die Hardcore-Vim-Fraktion

17:23.080 --> 17:24.660
hier auf YouTube, die für alles,

17:24.780 --> 17:25.560
was Vim-Only macht.

17:28.610 --> 17:28.950
So.

17:30.150 --> 17:30.470
Also.

17:31.130 --> 17:33.290
Dann müssen wir noch unseren RTSP-Server starten.

17:35.910 --> 17:37.470
Den haben wir, den hatte ich hier, glaube ich,

17:37.470 --> 17:38.430
hatte ich ein neues Tab auf.

17:39.090 --> 17:39.530
EMP.

17:40.510 --> 17:42.310
Dann hatte ich da den RTSP-Server drin.

17:42.410 --> 17:43.390
Ja, RTSP.

17:44.410 --> 17:44.810
So.

17:45.230 --> 17:46.910
Da liegt hoffentlich auch das Video drin.

17:47.970 --> 17:49.590
RTSP-Server starten.

17:50.710 --> 17:51.730
FFM-Pack.

17:54.640 --> 17:55.120
Restream.

17:55.260 --> 17:57.420
Plub 2. Ne, das TS-File

17:57.420 --> 17:58.640
haben wir gestreamt, gell.

18:00.380 --> 18:02.880
Okay, und jetzt schauen wir mal, ob alles funktioniert.

18:03.780 --> 18:04.640
Local Host,

18:04.740 --> 18:06.600
Port 80. Achso, ich muss

18:06.600 --> 18:07.600
die Anwendung ja noch starten.

18:09.040 --> 18:10.480
Tab. Das ist ein ganz schön

18:10.480 --> 18:12.720
langes Setup hier, bis es funktioniert.

18:13.420 --> 18:13.820
Okay.

18:15.000 --> 18:18.230
Run. Jetzt schauen wir mal,

18:18.310 --> 18:19.730
ob der Kram an sich noch funktioniert.

18:19.970 --> 18:21.250
Dann erzähle ich mal kurz was zu.

18:22.630 --> 18:23.410
Okay, Prage.

18:24.590 --> 18:26.070
Okay, es funktioniert. Nice.

18:26.070 --> 18:28.390
Also. Wir streamen das Video

18:28.390 --> 18:29.550
in den Browser.

18:29.910 --> 18:31.830
Alles gut. Schon frei.

18:31.890 --> 18:33.750
Ja, seit letzter Woche Freitag eigentlich

18:33.750 --> 18:35.910
die Arbeit vorbei. Aber ich hatte dann noch

18:35.910 --> 18:37.870
eine Woche als Wochenende Bereitschaft und jetzt

18:37.870 --> 18:39.530
noch zwei Tage Teambuilding. Also

18:39.530 --> 18:40.750
so richtig

18:40.750 --> 18:44.010
Hardcut so Urlaub. Erst seit

18:44.010 --> 18:45.710
gestern. Ja, und seit

18:45.710 --> 18:46.090
morgen

18:46.090 --> 18:49.610
So ist es. Und

18:49.610 --> 18:51.830
morgen muss ich da ein bisschen MMO-Kreisekund machen.

18:52.170 --> 18:54.150
Es hat jemand gefragt vorhin, welches

18:54.150 --> 18:54.770
MMO

18:54.770 --> 18:56.550
irgendwo

18:56.550 --> 18:58.430
hier

18:58.430 --> 18:58.590
hier

18:58.590 --> 19:03.440
der ältere Meier hat.

19:03.460 --> 19:05.460
Gefragt. Bist du noch da? Welches

19:05.460 --> 19:07.360
MMO kann ich dir sagen? Ich spiele

19:07.360 --> 19:08.420
ab morgen wieder

19:08.420 --> 19:14.380
Dark in

19:14.380 --> 19:16.500
Dark Age of Camelot.

19:17.000 --> 19:19.020
Das Spiel ist älter als

19:19.020 --> 19:21.240
viele von euch im Chat. Das kam 2001

19:21.240 --> 19:26.080
raus. Vor 22

19:26.080 --> 19:27.260
Jahren, Alter.

19:29.360 --> 19:29.900
Und ich hab's

19:29.900 --> 19:31.900
zu EU-Release angefangen zu spielen

19:31.900 --> 19:33.480
und spiele es eigentlich durchgehend immer wieder.

19:34.340 --> 19:35.560
Bestes MMO ever.

19:36.520 --> 19:36.700
Ever.

19:40.810 --> 19:42.590
Nee, gab noch keine Diskussion

19:42.590 --> 19:43.310
über die Azubi.

19:43.470 --> 19:45.370
Über die FISI-Abschlussprüfung oder

19:45.370 --> 19:46.670
Fachinformatik-Abschlussprüfung.

19:47.450 --> 19:49.410
Nee, nichts. Ich war auch hier nicht

19:49.410 --> 19:50.230
on seit

19:50.230 --> 19:53.550
Montag.

19:54.270 --> 19:55.590
Also gab's noch keine Diskussion

19:55.590 --> 19:57.470
drüber. War noch keine Möglichkeit drüber

19:57.470 --> 19:59.430
zu diskutieren. Und wie war die Abschlussprüfung?

20:01.150 --> 20:01.690
War die

20:01.690 --> 20:03.110
auch wieder unschaffbar wie die letzte?

20:17.510 --> 20:19.010
Also unser Videostreaming läuft.

20:19.110 --> 20:20.290
So, kurze Sache.

20:20.970 --> 20:22.950
Ihr könnt euch gerne über die

20:22.950 --> 20:24.770
Fachinformatik-Abschlussprüfung auslassen.

20:24.770 --> 20:26.870
Da sag ich auch gleich was zu. Wenn ein paar Leute

20:26.870 --> 20:28.630
First-Hands-Experience

20:28.630 --> 20:31.230
da haben. Also, ich sag noch

20:31.230 --> 20:32.870
ganz kurz was zur Anwendung. Wir werden das heute

20:32.870 --> 20:35.030
verdockerisieren, dass ich das ordentlich testen kann

20:35.030 --> 20:37.070
beziehungsweise ordentlich laufen lassen kann bei mir lokal.

20:37.810 --> 20:38.910
Ganz, ganz kurz,

20:39.150 --> 20:41.150
ganz simpel Übersicht, was es

20:41.150 --> 20:43.210
gibt. Wir haben eine Anwendung am Start

20:43.210 --> 20:45.350
mit etwas viel Debug-Output,

20:45.410 --> 20:47.010
wie es aussieht. Wir haben

20:47.010 --> 20:47.670
eine

20:47.670 --> 20:50.490
ASP.NET-Webanwendung

20:50.490 --> 20:53.150
für die, ja,

20:53.150 --> 20:55.370
für das Frontend, also als API-Endpunkte

20:55.370 --> 20:56.750
für das Frontend. Dann

20:56.870 --> 21:00.730
haben wir eine Rust-Low-Level-Web-RTC-Geschichte

21:00.730 --> 21:02.810
und wir haben ein bisschen JavaScript,

21:02.810 --> 21:04.990
HTML, CSS. Was passiert,

21:04.990 --> 21:06.990
ist folgendes in diesem Video nur

21:06.990 --> 21:08.990
ganz kurz, also heute auch

21:08.990 --> 21:10.990
nur ganz kurz.

21:10.990 --> 21:13.070
Provider, ich kann

21:13.070 --> 21:15.070
das nicht, ich kann das nicht. Keiner kann Provider

21:15.070 --> 21:17.070
so gut aussprechen wie SemperVideo, äh.

21:17.070 --> 21:19.070
Provider.

21:19.070 --> 21:21.070
Ich kann's

21:21.070 --> 21:23.070
nicht, das ist einfach original.

21:23.070 --> 21:29.740
Ähm, also

21:29.740 --> 21:31.540
im Prinzip, im Prinzip läuft's weiter.

21:31.540 --> 21:33.540
Folgendermaßen,

21:33.540 --> 21:35.540
Kamerastream läuft hier,

21:35.540 --> 21:37.540
der Kamerastream, er hat, ich stellverdient,

21:37.540 --> 21:39.540
gerade streamt er ein YouTube-Video von mir,

21:39.540 --> 21:41.540
okay? Also, das hier, Kamerastream,

21:41.540 --> 21:43.540
RTSP-Server, FFmpeg,

21:43.540 --> 21:45.540
pumpt da ein Video rein.

21:45.540 --> 21:47.540
Backend, das, äh,

21:47.540 --> 21:49.540
.NET-Backend geht per FFmpeg

21:49.540 --> 21:51.540
an den Stream dran

21:51.540 --> 21:53.540
und liest den Stream

21:53.540 --> 21:55.540
aus, dann baut es

21:55.540 --> 21:57.540
mit dem Browser eine WebRTC-Verbindung

21:57.540 --> 21:59.540
auf, mit Hilfe der Low-Level

21:59.540 --> 22:01.540
WebRTC-Rust-Library.

22:01.540 --> 22:03.540
Und dann streamt es das Video

22:03.540 --> 22:05.540
in den Browser. Okay, so, so,

22:05.540 --> 22:10.000
so funktioniert's gerade.

22:10.000 --> 22:12.000
Das ist jetzt wirklich absolut High-Level-Overview.

22:12.000 --> 22:14.000
So, nachdem ich das später ja

22:14.000 --> 22:17.640
laufen lassen möchte,

22:17.640 --> 22:19.640
in, in nem Container,

22:19.640 --> 22:21.640
müssen wir das Ganze jetzt erstmal

22:21.640 --> 22:23.640
vercontainerisieren.

22:23.640 --> 22:25.640
Das heißt, wir brauchen jetzt

22:25.640 --> 22:27.640
weder Rust, noch .NET, noch

22:27.640 --> 22:29.640
JavaScript, noch

22:29.640 --> 22:33.010
sonst irgendwas in der Richtung.

22:33.010 --> 22:35.010
Deswegen stoppe ich die Anwendung mal wieder.

22:35.010 --> 22:37.010
Und wir müssen uns jetzt mal ein Docker-File

22:37.010 --> 22:39.010
aus den Fingern saugen,

22:39.010 --> 22:41.010
das Sinn ergibt.

22:41.010 --> 22:43.010
Ich glaube, dass das tatsächlich ein etwas komplizierteres

22:43.010 --> 22:45.010
Docker-File wird,

22:45.010 --> 22:47.010
weil,

22:47.010 --> 22:49.010
.

22:49.010 --> 22:51.010
.

22:51.010 --> 22:53.010
.

22:53.010 --> 22:55.010
Was ist denn jetzt los hier?

22:55.010 --> 22:57.010
Das hört sich ja, hört sich ja fast schon hier

22:57.010 --> 22:59.010
...mäßig an.

22:59.010 --> 23:05.520
.

23:05.520 --> 23:07.520
.

23:07.520 --> 23:11.520
.

23:11.520 --> 23:13.520
.

23:13.520 --> 23:15.520
.

23:15.520 --> 23:17.520
.

23:17.520 --> 23:19.520
.

23:19.520 --> 23:21.520
.

23:21.520 --> 23:23.520
.

23:23.520 --> 23:25.520
.

23:25.520 --> 23:27.520
.

23:27.520 --> 23:29.520
.

23:29.520 --> 23:31.520
.

23:31.520 --> 23:33.520
.

23:33.520 --> 23:40.230
.

23:40.230 --> 23:44.230
.

23:44.230 --> 23:46.230
.

23:46.230 --> 23:48.230
.

23:48.230 --> 23:50.230
.

23:50.230 --> 23:52.230
.

23:52.230 --> 23:54.230
.

23:54.230 --> 23:57.600
.

23:57.600 --> 23:59.600
.

23:59.600 --> 24:01.600
.

24:01.600 --> 24:03.600
.

24:03.600 --> 24:05.600
.

24:05.600 --> 24:07.600
.

24:07.600 --> 24:09.600
.

24:09.600 --> 24:13.600
.

24:13.600 --> 24:15.600
.

24:15.600 --> 24:17.600
.

24:17.600 --> 24:19.600
.

24:19.600 --> 24:21.600
.

24:21.600 --> 24:23.600
.

24:23.600 --> 24:25.600
.

24:25.600 --> 24:27.600
.

24:27.600 --> 24:29.600
.

24:29.600 --> 24:31.600
.

24:31.600 --> 24:33.600
.

24:33.600 --> 24:35.600
.

24:35.600 --> 24:37.600
.

24:37.600 --> 24:39.600
. .

24:39.600 --> 24:41.600
. .

24:41.600 --> 24:43.600
. .

24:43.600 --> 24:45.600
. .

24:45.600 --> 24:54.930
. .

24:54.930 --> 24:59.080
. .

24:59.080 --> 25:01.080
. .

25:01.080 --> 25:03.080
. .

25:03.080 --> 25:05.080
. .

25:05.080 --> 25:07.080
. .

25:07.080 --> 25:12.560
. .

25:12.560 --> 25:16.070
. .

25:16.070 --> 25:18.070
. .

25:18.070 --> 25:20.070
. .

25:20.070 --> 25:22.230
Erlang, Fortran

25:22.230 --> 25:31.420
Okay, das muss ich mal in Ruhe durchlesen

25:31.420 --> 25:34.660
Ich schreibe mir das mal auf

25:34.660 --> 25:36.020
Leute, ich schreibe mir das mal auf, vielleicht machen wir das

25:36.020 --> 25:39.140
Vielleicht, vielleicht machen wir da echt mit

25:39.140 --> 25:39.780
Ja

25:39.780 --> 25:44.300
Warum nicht? Ist doch immer ganz nice

25:44.300 --> 25:49.700
In was?

25:52.970 --> 25:54.070
Was ist Vlang?

25:54.930 --> 25:56.030
The V-Programming

25:56.030 --> 25:58.090
The V-Programming Language

25:58.090 --> 25:59.010
Ich sag V

25:59.010 --> 26:02.430
Die V-Programmiersprache

26:02.430 --> 26:10.680
Das sieht ein bisschen aus

26:10.680 --> 26:11.800
Wie Go

26:11.800 --> 26:12.860
Ehrlich gesagt

26:12.860 --> 26:20.190
Das sieht Go doch

26:20.190 --> 26:21.870
Also außer, dass es

26:21.870 --> 26:23.430
FN ist und so, aber

26:23.430 --> 26:26.210
Moment mal, ist Go oder Rust

26:26.210 --> 26:27.950
FN? Ich bin gerade verwirrt

26:27.950 --> 26:28.450
Moment

26:28.450 --> 26:31.670
Rust ist FN, das sieht eine Mischung aus

26:31.670 --> 26:33.050
Zwischen Go und Rust

26:33.050 --> 26:44.270
Okay

26:44.270 --> 26:46.870
Na, ich weiß ja nicht

26:46.870 --> 26:54.820
Ja, aber

26:54.820 --> 26:56.780
Das ist jetzt ja nur wirklich kein Aushängeschild

26:56.780 --> 26:57.600
Von der Sprache

26:57.600 --> 27:00.220
Wie groß der Compiler und wie lange es dauert

27:00.220 --> 27:01.680
Den Compiler zu bauen, oder?

27:02.620 --> 27:03.420
Ich meine GCC

27:03.420 --> 27:04.520
Ich wollte gerade sagen

27:04.520 --> 27:07.160
Alter, GCC ist halt auch wieder so ein Ding

27:07.160 --> 27:09.280
Das dauert auch drei Stunden, bis das fertig ist

27:09.280 --> 27:12.660
Was aber nicht heißt, dass wenn ich GCC benutze

27:12.660 --> 27:14.100
Das schlecht sein muss dann

27:14.100 --> 27:16.160
Wobei GCC checkt halt auch keiner mehr

27:16.160 --> 27:23.270
Ist das so? Ich habe damit

27:23.270 --> 27:25.930
Keine Ahnung, ich kann dazu nichts sagen

27:25.930 --> 27:30.080
Okay, wir bauen jetzt ein Dogger-File

27:30.080 --> 27:31.040
Auf geht's

27:31.040 --> 27:33.460
Ich versuche mal

27:33.460 --> 27:35.100
Ein bisschen was dabei zu erklären, okay?

27:35.480 --> 27:37.240
Chatge, wer von euch

27:37.240 --> 27:37.880
Hat

27:37.880 --> 27:41.260
Viel Plan von Dogger? Also ich kriege das hin

27:41.260 --> 27:42.220
Ich will bloß mal so grob wissen

27:42.220 --> 27:43.800
Also machen wir es mal anders

27:43.800 --> 27:47.200
Wer von euch würde sagen

27:47.200 --> 27:50.580
Er ist der krasse Dogger-Container-Bau-Experte

27:50.580 --> 27:51.420
Wobei man sagen muss

27:51.420 --> 27:52.540
Streiche Dogger

27:52.540 --> 27:55.460
Er setzt es einfach durch Container

27:55.460 --> 27:57.320
Ja, weil Dogger hat ja

27:57.320 --> 27:59.040
Außer als CLI-Tool

27:59.040 --> 28:00.580
Mit den eigentlichen Containern und das

28:00.580 --> 28:03.440
Wie das heute im Enterprise-Umfeld läuft

28:03.460 --> 28:05.120
Eigentlich nur noch wenig zu tun

28:05.120 --> 28:07.960
Also seid ihr die krassen Container-Bau-Profis?

28:09.420 --> 28:09.940
Oder seid

28:09.940 --> 28:11.120
Würdet ihr eher sagen

28:11.120 --> 28:12.800
Würdet ihr eher sagen, naja

28:12.800 --> 28:16.160
Ich habe schon mal ein Dogger-File

28:16.160 --> 28:18.200
Erstellt, aber sonst nicht kompliziert war das nicht

28:18.200 --> 28:19.800
Also war das nicht

28:19.800 --> 28:21.160
War ein paar Zeilen und fertig ist

28:21.160 --> 28:23.860
Okay, also, denn wir müssen jetzt

28:23.860 --> 28:26.020
Ich versuche das mal zu erklären und dann hoffe ich

28:26.020 --> 28:27.420
Dass es funktioniert

28:27.420 --> 28:31.820
Also ich stelle mir das folgendermaßen vor

28:31.820 --> 28:32.640
Wir brauchen ja

28:33.460 --> 28:34.960
Moment

28:34.960 --> 28:37.800
Muss ich mal gucken

28:37.800 --> 28:39.360
Also, Ziel ist erstmal

28:39.360 --> 28:40.820
Ich weiß nämlich nicht, wie lange ich Zeit habe

28:40.820 --> 28:43.560
Vielleicht habe ich nur bis 15 Uhr oder 14.30 oder irgendwie so Zeit

28:43.560 --> 28:45.680
Ziel ist erstmal, dass wir ein Dogger-File bauen

28:45.680 --> 28:48.100
Was unsere Anwendung eben in ein Container-Image baut

28:48.100 --> 28:49.900
Das bisschen

28:49.900 --> 28:52.740
Unhandliche an dieser Anwendung ist

28:52.740 --> 28:53.220
Ihr seht

28:53.220 --> 28:54.940
Es gibt ein

28:54.940 --> 28:57.560
Low-Level-Part in Rust

28:57.560 --> 28:59.600
Das mit Go könnt ihr euch wegdenken

28:59.600 --> 29:01.580
Das mit Go gibt es nicht mehr

29:01.580 --> 29:03.420
Also das gibt es noch, aber das benutze ich

29:03.420 --> 29:04.240
Benutze ich aktuell nicht

29:04.240 --> 29:05.440
Das ist einfach nur da zum abgucken

29:05.440 --> 29:06.980
Es gibt

29:06.980 --> 29:08.240
Also es gibt eigentlich

29:08.240 --> 29:10.120
Mehrere Parts

29:10.120 --> 29:12.860
Wir brauchen einmal den Low-Level-Rust-Part

29:12.860 --> 29:15.920
Und wir brauchen den .NET-Backend-Part

29:15.920 --> 29:18.040
In Frontend ist noch nichts drin

29:18.040 --> 29:19.680
Das habe ich mir mal angelegt

29:19.680 --> 29:22.300
Falls ich ein bisschen mehr mache als eine HTML-Seite

29:22.300 --> 29:24.440
Und in

29:24.440 --> 29:25.360
Ja

29:25.360 --> 29:31.040
Hier ist das Rust-Zeug drin

29:31.040 --> 29:32.440
Und das Ding ist halt

29:32.440 --> 29:33.680
Ihr seht schon

29:33.680 --> 29:36.470
Die Dinger sind relativ gut

29:36.490 --> 29:37.490
Die Dinger sind relativ groß

29:37.490 --> 29:37.750
Also

29:37.750 --> 29:40.510
Rust ist 2,2 GB

29:40.510 --> 29:42.270
Erinnert mich ein bisschen an Node-Modules

29:42.270 --> 29:44.850
Die installieren ja auch immer Gott in die Welt

29:44.850 --> 29:46.990
Nicht ganz so schlimm wie Node-Modules

29:46.990 --> 29:48.950
Node-Modules wäre das Ding wahrscheinlich

29:48.950 --> 29:50.190
Eher 15G groß

29:50.190 --> 29:53.510
Aber Rust haut auch schon mal richtig rein

29:53.510 --> 29:54.930
So

29:54.930 --> 29:56.430
Dann haben wir unser .NET-Backend

29:56.430 --> 29:57.710
Und das war's

29:57.710 --> 30:00.330
So und wir können jetzt halt nicht einfach hergehen

30:00.330 --> 30:01.610
Und ein Docker-Image bauen

30:01.610 --> 30:03.150
Die Anwendung drin bauen

30:03.150 --> 30:04.930
Und das Docker-Image hochladen

30:04.930 --> 30:06.010
Was heißt können wir nicht

30:06.010 --> 30:06.210
Doch

30:06.210 --> 30:07.310
Das können wir schon

30:07.310 --> 30:08.010
Aber

30:08.010 --> 30:09.210
Das machen wir jetzt auch

30:09.210 --> 30:10.510
Dass ihr seht wo das Problem liegt

30:10.510 --> 30:13.610
Das Docker-Image ist dann am Ende halt saumäßig groß

30:13.610 --> 30:15.030
Weil der ganze Mist

30:15.030 --> 30:17.150
Den wir hier drinnen brauchen um es zu bauen

30:17.150 --> 30:19.270
Dann im Docker-Image landet

30:19.270 --> 30:21.490
Das will man ja eigentlich nicht

30:21.490 --> 30:23.390
Du willst ja eigentlich nur den Output haben

30:23.390 --> 30:27.790
Kann man für Rust kein Docker-Ignore mitgeben

30:27.790 --> 30:28.590
Doch kannst du

30:28.590 --> 30:30.450
Aber du brauchst dieses ganze Zeug hier drinnen

30:30.450 --> 30:32.290
Wenn du die Rust-Anwendung baust

30:32.290 --> 30:33.810
Also das heißt du brauchst es dann auch

30:33.810 --> 30:35.390
In den Build-Container

30:35.390 --> 30:39.610
Und ein Build-Container gleicht

30:39.610 --> 30:40.250
Der das

30:40.250 --> 30:42.870
Als Basis für das Image verwendet wird

30:42.870 --> 30:44.430
Sind die im Output-Image auch drinnen

30:44.430 --> 30:46.510
Und dann hast du im Endeffekt dann Docker-Images

30:46.510 --> 30:48.870
Die ja 3 GB groß sind

30:48.870 --> 30:49.790
Das ist natürlich kacke

30:49.790 --> 30:50.550
Das will man nicht haben

30:50.550 --> 30:54.390
Deswegen wird es wahrscheinlich auf ein Multi-Stage-Build rauslaufen

30:54.390 --> 30:55.310
Ich glaube so heißt das

30:55.310 --> 30:58.790
Dass wir erst einmal Rust bauen

30:58.790 --> 31:00.210
Dann .NET bauen

31:00.210 --> 31:01.870
Dann die Sachen rüber kopieren

31:01.870 --> 31:03.570
Und am Ende dann

31:03.570 --> 31:06.250
Einen möglichst kleinen Container bauen

31:06.250 --> 31:10.320
Doch doch doch

31:10.320 --> 31:10.760
Ja ja

31:10.760 --> 31:14.020
Also wir fangen jetzt erstmal an

31:14.020 --> 31:16.560
Wie alle anfangen mit Docker-Files

31:16.560 --> 31:17.080
Und zwar

31:17.080 --> 31:19.260
Wir schreiben das mal untereinander

31:19.260 --> 31:20.560
Und da werdet ihr auch gleich sehen

31:20.560 --> 31:22.480
Wo das eigentliche Problem ist

31:22.480 --> 31:25.840
Ich will ein Debian-Image

31:25.840 --> 31:26.600
Nach Möglichkeit

31:26.600 --> 31:33.620
Also wir fangen mal ganz unbedarft an

31:33.620 --> 31:34.700
Wir nehmen ein Debian-Image

31:34.700 --> 31:36.420
Installieren uns alle Abhängigkeiten

31:36.420 --> 31:38.960
Kompilieren das und gucken mal wie groß das Image ist

31:38.960 --> 31:41.480
Ich persönlich denke wir werden am Ende

31:41.480 --> 31:42.780
Ein Multi-Stage-Build haben

31:42.780 --> 31:44.440
Das offizielle Rust-Image

31:44.500 --> 31:46.660
Für Rust zum Kompilieren verwenden

31:46.660 --> 31:48.980
Das offizielle

31:48.980 --> 31:51.640
ASP.NET-Image verwenden

31:51.640 --> 31:52.820
Für das Output-Image

31:52.820 --> 31:55.140
Und wahrscheinlich ein stinknormales Debian oder so

31:55.140 --> 31:57.380
Um die .NET-Sache zu bauen

31:57.380 --> 31:58.280
Oder ne Moment

31:58.280 --> 31:59.720
Microsoft hat ja auch offizielle

31:59.720 --> 32:02.960
SDK-Images zum Bauen

32:02.960 --> 32:04.660
Wir machen das erstmal von Hand

32:04.660 --> 32:05.940
Und dann verbessern wir das

32:05.940 --> 32:07.440
Also from

32:07.440 --> 32:08.680
Jetzt habe ich keine Ahnung

32:08.680 --> 32:11.200
Debian-Docker-Hub

32:11.200 --> 32:12.940
Wie da die Tags heißen

32:12.940 --> 32:18.280
Bookworm

32:18.280 --> 32:24.010
Bookworm klingt gut

32:24.010 --> 32:27.350
Und das ist einfach Debian Bookworm oder?

32:27.350 --> 32:28.710
Debian

32:28.710 --> 32:32.270
Bookworm

32:32.270 --> 32:33.770
Und mich einfach gleich an Rust damit füllen

32:33.770 --> 32:34.630
Doch doch doch

32:34.630 --> 32:38.090
Wie gesagt da wirds wahrscheinlich drauf rauslaufen

32:38.090 --> 32:41.470
Da wirds wahrscheinlich drauf rauslaufen

32:41.470 --> 32:44.590
Aber ich bin mir noch unschlüssig wie wir das überhaupt bauen

32:44.590 --> 32:45.390
Also

32:45.390 --> 32:47.030
From Debian Bookworm

32:47.030 --> 32:59.750
Nenn ich mal ASP-Build oder sowas

32:59.750 --> 33:01.990
Na es juckt

33:01.990 --> 33:03.570
Wir bauen jetzt erstmal ganz

33:03.570 --> 33:04.570
Simpel

33:04.570 --> 33:06.570
So untereinander das was wir brauchen

33:06.570 --> 33:07.570
Damit die Anwendung baut

33:07.570 --> 33:08.570
Und dann machen wir es schön

33:08.570 --> 33:09.570
Das es auch klein wird

33:09.570 --> 33:10.570
Und das es nur das baut was es soll

33:10.570 --> 33:11.570
Und rüber kopiert

33:11.570 --> 33:12.570
Und das man dann auch sieht

33:12.570 --> 33:13.570
Das es durchaus Sinn macht

33:13.570 --> 33:14.570
Mal länger als 2 Minuten in seine Docker-Files zu stecken

33:14.570 --> 33:15.570
Also ich würde sagen

33:15.570 --> 33:16.570
Wir benutzen aktuelles Debian-Image

33:16.570 --> 33:17.570
Weil Debian beste

33:17.570 --> 33:18.570
Da haben wir sowas wie WorkDir

33:18.570 --> 33:19.570
Kann man das eigentlich auch kleinschreiben?

33:19.570 --> 33:20.570
Ich glaube man darf das kleinschreiben

33:20.570 --> 33:21.570
Irgendwie habe ich mir das so angewöhnt

33:21.570 --> 33:22.570
Das immer groß zu schreiben

33:22.570 --> 33:23.570
Aber ich glaube man darf das auch kleinschreiben

33:23.570 --> 33:24.570
Aber ich glaube man darf das auch kleinschreiben

33:24.570 --> 33:25.570
Aber ich glaube man darf das auch kleinschreiben

33:25.570 --> 33:26.570
Aber ich glaube man darf das auch kleinschreiben

33:26.570 --> 33:27.570
Das kann man aber auch mittlerweile mittlerweile auch kleinschreiben

33:27.570 --> 33:28.570
Die schreiben es auch groß

33:28.570 --> 33:29.570
Guck hier in ihren

33:29.570 --> 33:30.570
In ihren

33:30.570 --> 33:31.570
Examples

33:31.570 --> 33:32.570
Also wir fangen ohne MultiStage Build an

33:32.570 --> 33:33.570
Wir fangen ganz simpel mit einem Debian-Image an

33:33.570 --> 33:36.400
Und lassen es mal da drinnen bauen

33:36.400 --> 33:37.400
Also

33:37.400 --> 33:38.400
WorkDir

33:38.400 --> 33:41.540
Machen wir mal sowas wie

33:41.540 --> 33:42.540
Bild

33:42.540 --> 33:43.540
WorkDir heißt

33:43.540 --> 33:44.540
Alle Sachen

33:44.540 --> 33:45.540
Anbefehle

33:45.540 --> 33:46.540
Die jetzt hier

33:46.540 --> 33:47.540
Hier

33:47.540 --> 33:48.540
Da

33:48.540 --> 33:49.540
Da

33:49.540 --> 33:50.540
Hier

33:50.540 --> 33:51.540
Da

33:51.540 --> 33:54.560
Hier

33:54.560 --> 33:55.560
Hier

33:55.560 --> 33:56.560
Hier

33:56.560 --> 33:57.560
Hier

33:57.560 --> 33:58.560
Hier

33:58.560 --> 34:00.870
Hier

34:00.870 --> 34:01.870
Hier

34:01.870 --> 34:02.870
Hier

34:02.870 --> 34:03.870
Hier

34:03.870 --> 34:08.970
hier kommen kannst du ausführen ohne dass du von cd reinschreiben muss ja

34:08.970 --> 34:14.670
also wenn man jetzt zum beispiel so was hier macht wie copy oder sowas von a

34:14.670 --> 34:21.850
nach b dann bezieht sich das automatisch auf bild was ganz ach so und es sorgt

34:21.850 --> 34:26.470
dafür dass das verzeichnis glaubt sogar angelegt wird so als erstes weißen

34:26.470 --> 34:44.360
debian image ist run up get update ok also docker bild punkt es ist noch

34:44.360 --> 34:50.060
nicht viel passiert ab geht ab hat er jetzt wirklich geupdatet das erscheint

34:50.060 --> 34:57.420
mir erschien mir ein bisschen bisschen schnell ok dann run up geht install was

34:57.420 --> 35:02.040
brauche auf jeden fall wir brauchen bestimmt curl wie get curl und so und so

35:02.040 --> 35:02.380
zeug

35:02.840 --> 35:14.770
get bestimmt auch macht das jetzt was was y fehlt muss man machen wenn man das

35:14.770 --> 35:18.610
ins krebs verwenden will ansonsten will ja nämlich dass man jetzt ein tippt und

35:18.610 --> 35:23.110
man kann ich jetzt eintippen wenn es interaktive im skript läuft okay hat

35:23.110 --> 35:29.170
funktioniert übrigens auch so ein ding doch verwendet ja seit ein paar version

35:29.170 --> 35:36.010
bild kit also vielleicht kennt ihr noch docker bild von früher die waren ja dann

35:36.010 --> 35:36.590
anders aus

35:36.610 --> 35:40.090
auf jeden fall mittlerweile verwenden die ja glaube ich bild kit wenn es

35:40.090 --> 35:44.070
verfügbar ist ich muss sagen mir hat der output früher besser gefallen als der

35:44.070 --> 35:53.860
bild kit output der bild kit output sieht sehr fancy aus du hast recht das

35:53.860 --> 35:58.200
ist sinnvoll falls irgendwelche rückfrage rückfragen wir abkommen ja ja

35:58.200 --> 36:02.440
das stimmt das schenken wir uns jetzt mal weil ich wahrscheinlich das debian

36:02.440 --> 36:07.660
image dann nicht verwenden wird ich weiß gar nicht ob man das zum alten output

36:07.660 --> 36:12.470
wiederum formatieren kann

36:12.630 --> 36:18.330
also wie geht es weiter wir installieren paar sachen ich bin mir nicht sicher was wir sonst

36:18.330 --> 36:26.790
noch so brauchen so jetzt ich würde sagen wir bauen wir bilden erst mal rast okay wir bilden

36:26.790 --> 36:34.410
erst mal rast damit man rast bilden kann im container also die die rast app wo sich quasi

36:34.410 --> 36:41.910
alles was hier drin ist moment nicht alles was hierüber ist garantiert nicht alles was hierüber

36:41.910 --> 36:46.350
ist weil dann kopiere ich auch zwei gigabyte alleine das will ich ja garantiert nicht haben

36:46.350 --> 36:57.330
also ich will eigentlich nur aus web wie heißt das ding mein ordner aus web rtc rast will ich

36:57.330 --> 37:04.570
eigentlich nur source und die cargo falls rüber kopieren cargo ist das npm von rast und in so aus

37:04.570 --> 37:11.670
liegen halt fährt es gedacht so ausfalls also copy web rtc rast

37:11.910 --> 37:26.720
machen wir mal irgendwie so was cargo sternchen dahin copy all docker ignore komme auch machen

37:26.720 --> 37:30.080
aber es sind nur zwei sachen lieber kopieren müssen es sollte wahrscheinlich so auch gehen

37:30.080 --> 37:40.580
so und dann so opieren wir über source ich glaube das muss man so nennen damit das funktioniert was

37:40.580 --> 37:57.990
macht das denn es bezieht sich auf was was das rast programm rust was das macht das

37:58.130 --> 38:05.270
sorgt dafür, wenn du ein Update machst und Rückfragen kommen in Debian, dass es die Rückfragen

38:05.270 --> 38:13.130
halt einfach mit der Default-Antwort beantwortet, anstatt dass du eine Abfrage kriegst, weil

38:13.130 --> 38:17.370
du kannst ja in einem interaktiven Skript, in einem Docker-Bild keine interaktive Abfrage

38:17.370 --> 38:23.610
machen an den User, weil es gibt ja nichts zum Inputten. Also du hast zum Beispiel eine

38:23.610 --> 38:28.830
Sache. Stell dir vor, du hast von Hand in deiner ssh-Config rumeditiert. Du machst

38:28.830 --> 38:34.690
ein Upget oder ein Upgrade, was auch immer, eines der Update-Commands und dann sagt er

38:34.690 --> 38:41.930
dir, hey User, du musst mir jetzt sagen, ob du die Default-Maintainer-Version der ssh-Config

38:41.930 --> 38:46.750
installieren möchtest beim Package-Upgrade oder ob du deine Version behalten willst.

38:47.430 --> 38:53.490
Ich glaube, die Default-Antwort ist, deine Version behalten. Wenn du das ausschaltest,

38:53.610 --> 38:57.610
dann nimmt er immer die Default-Antwort und fragt dich nicht, weil er kann dich ja in

38:57.610 --> 39:02.920
einem interaktiven Skript, was ohne dich läuft, nicht fragen. So, schauen wir mal, ob das

39:02.920 --> 39:09.960
jetzt funktioniert, was ich hier gemacht habe. Bild. Ja, scheint funktioniert. Ist das nicht

39:09.960 --> 39:15.360
durch den Parameter Y? Nur halb, das bezieht sich nur auf die Abfragen von Upt, beziehungsweise

39:15.360 --> 39:23.640
von Upget. Wenn irgendwelche Packages, die Upt selbst upgradet, Abfragen haben, dann nicht.

39:24.040 --> 39:24.900
Das bezieht sich nur darauf, dass du die Abfragen von Upt, die du selbst upgradest,

39:24.900 --> 39:31.900
bezieht sich nur darauf, dass du nicht mehr Yes bei Upt eingeben musst. Okay, das hat funktioniert.

39:33.300 --> 39:43.100
Dann ist jetzt die große Preisfrage, Chatge. Wie kriegen wir Rust in unserem Debian-Image

39:43.100 --> 39:51.640
installiert? Ich würde sagen, Rust up. Perfekt, exzellent, das wollte ich haben. Gut, dass wir in

39:51.640 --> 39:58.700
weißer Voraussicht schon mal Curl installiert haben. Was ist das? Run, Curl, Proto, HTTPS, TLS, V1.2,

39:58.700 --> 40:12.500
SSF, X, genau das wollte ich haben. Das ist, genau so hätte ich es auch selbst geschrieben. So, Bild. Oh, was

40:12.500 --> 40:29.540
jetzt? Unable to run interactively. Run with minus Y to accept. Ach so, ach so, ach so. Jetzt bin ich mir unschlüssig. So?

40:29.540 --> 40:58.300
Nee. Moment, ich weiß, wo ich mir das abgucken kann. Warte mal. Dort, netz, hier, hier, exzellent. Minus Y. Ja, das stimmt.

40:59.700 --> 41:05.840
DPKG ist ja eigentlich die Debian-Geschichte für Packages. Okay, Rust wird gedownloadet. Das brauchen wir wahrscheinlich nicht.

41:05.940 --> 41:12.600
Wie gesagt, ich denke, ich werde dann auf das offizielle Rust-Image wechseln, was glaube ich auch auf Debian basiert, wenn ich das richtig im Kopf habe.

41:12.600 --> 41:12.800
Gell?

41:14.480 --> 41:29.840
Rust-Docker-Image basiert auch auf Debian. Debian, wie das die geilen Leute sagen. Ja, guckt hier. Buster. Gibt's Bookworm? Bullseye gibt's? Bookworm gibt's auch.

41:31.120 --> 41:35.840
Und Alpine haben sie auch am Start. Aber Alpine, scheiß drauf. Kein Bock. Geh weg.

41:38.360 --> 41:46.580
Müsste deine Variante mit minus, minus, minus Y auch gehen? Keine Ahnung. Nachdem ich mir da unschlüssig war, wir können es ja mal ausprobieren. Nachdem ich mir da unschlüssig war,

41:47.000 --> 41:47.920
habe ich es mal sein gelassen.

41:47.940 --> 41:49.420
Nee.

41:51.900 --> 41:52.620
Funktioniert nicht.

41:54.620 --> 41:58.060
Weil minus, minus heißt ja eigentlich, es kommen keine Options mehr. Keine Ahnung.

41:59.200 --> 42:03.240
Ehrlich gesagt, checke ich auch gar nicht, was das macht. Aber ich weiß, dass es funktioniert.

42:04.200 --> 42:04.940
Und deswegen...

42:06.660 --> 42:07.160
Ach so.

42:08.400 --> 42:12.480
Okay, Standard-In. Aber warum brauche ich Standard-In, wenn ich es doch schon reinpipe in Standard-In?

42:12.860 --> 42:15.560
Wie dem auch sei, keine Ahnung. Ist mir auch wurscht. Es funktioniert.

42:15.560 --> 42:16.060
Okay.

42:22.810 --> 42:30.250
Debian Alpine sehe ich tatsächlich auch so. Ich kann jetzt zumindest aus meiner Sicht erklären, warum ich der Meinung bin, dass Debian größer Alpine ist.

42:30.730 --> 42:34.930
Also, eines der riesen Vorteile von Alpine ist ja erstens, dass es minimalistisch ist.

42:35.970 --> 42:40.270
Minimalistische Containerdistributionen finde ich aber gar nicht mal so relevant.

42:41.310 --> 42:49.470
Weil, wenn du richtig dein Docker-File baust, kopierst du ja nicht quasi dein Bild-Image in dein Target-Image rein,

42:49.870 --> 42:51.330
sondern nur das, was du gebaut hast.

42:51.350 --> 42:54.750
Das heißt, also das Image, was du dann eigentlich startest.

42:55.030 --> 43:00.470
Das heißt, es ist eh gar nicht so wichtig, dass das ein besonders minimalistisches System ist,

43:00.510 --> 43:04.790
weil Debian ohne zusätzliche Sachen installiert ist auch relativ minimalistisch.

43:05.090 --> 43:10.570
Dann ist es vielleicht 15 MB mehr als Alpine oder so, aber so what? Juckt ja nicht.

43:11.390 --> 43:13.910
Dazu kommt, dass Alpine regelmäßig mal Problemchen hat.

43:14.710 --> 43:16.110
Zum Beispiel mit DNS-Auflösung.

43:16.790 --> 43:20.310
Ich weiß nicht, ob das mittlerweile gefixt ist, aber Debian...

43:20.310 --> 43:21.110
Äh, Alpine...

43:21.350 --> 43:24.950
Hat, glaube ich, mit DNS-Antworten größer...

43:24.950 --> 43:27.330
Einem Kilobyte oder sowas Probleme.

43:28.830 --> 43:30.690
Alpine DNS Error.

43:33.010 --> 43:34.210
Ja, genau, ja.

43:35.690 --> 43:37.230
DNS Resolution in Alpine.

43:37.470 --> 43:42.410
Ach ja, und das liegt daran, dass Alpine, um besonders minimalistisch zu sein,

43:42.410 --> 43:49.790
nicht die normale GLibc verwendet, sondern Musel-Libc.

43:50.610 --> 43:51.410
Das ist quasi eine alternative...

43:52.850 --> 43:54.890
Implementierung der C-Standard-Library.

43:55.410 --> 44:00.370
Wobei man sagen muss, was in GLibc drin ist, ist nicht unbedingt alles rein Standard.

44:01.330 --> 44:04.070
Es ist eine Neuimplementierung.

44:05.270 --> 44:10.630
Und besonders minimalistisch und schön für Self-Content-Anwendungen und sowas.

44:11.070 --> 44:16.570
Darauf basiert Alpine, aber die haben zum Beispiel Probleme aufgrund dessen mit größeren DNS-Antworten.

44:16.570 --> 44:21.950
Ich bin mir gar nicht sicher, ob hier drin steht, was das eigentliche Problem ist.

44:27.940 --> 44:30.400
Aber das Problem ist, wenn die DNS-Antworten zu groß sind,

44:31.240 --> 44:35.980
dann gibt es einen Error in Alpine.

44:36.920 --> 44:40.400
Zumindest war das mal ein größeres Problem vor einem halben Jahr oder so.

44:40.460 --> 44:41.340
Und das habe ich mir gemerkt.

44:43.640 --> 44:45.220
Das kann durchaus sein, dass es gefixt ist.

44:45.380 --> 44:45.660
Ja, ja.

44:46.780 --> 44:48.500
Das kann durchaus sein, dass es gefixt ist.

44:48.580 --> 44:50.160
Das ist natürlich das, was mir als erstes...

44:50.160 --> 44:52.000
Ich gehe auch mal stark von aus, dass es gefixt ist.

44:52.000 --> 44:53.580
Aber Alpine hat öfters mal kleine Probleme.

44:56.050 --> 44:57.950
Ja, das Debian-Image ist größer, das stimmt.

44:58.450 --> 45:00.490
Aber so ein Riesenunterschied ist es am Ende nicht.

45:00.950 --> 45:02.830
Und ich finde Debian einfach angenehmer.

45:08.800 --> 45:09.240
Cargo-Chef.

45:09.980 --> 45:11.360
Was es nicht alles gibt hier.

45:14.160 --> 45:14.960
Cargo-Chef.

45:23.640 --> 45:27.200
Das ist der Grund, warum ich Debian gerne verwende als Base-Image.

45:28.060 --> 45:32.360
Wie gesagt, ich glaube auch gar nicht, dass wir hierbei bleiben werden, sondern das Rust-Base-Image verwenden.

45:32.440 --> 45:32.640
Okay.

45:33.680 --> 45:34.680
Jetgear, auf geht's.

45:35.300 --> 45:36.960
Docker-Build am Start.

45:36.960 --> 45:40.300
Und jetzt müssen wir Rust bilden.

45:41.000 --> 45:45.320
Also, wir brauchen jetzt sowas wie Cargo-Build.

45:45.380 --> 45:45.800
Release.

45:46.400 --> 45:48.300
Wir testen erstmal, ob das so funktioniert.

45:49.660 --> 45:50.620
Also, Run.

45:51.360 --> 45:51.700
CD.

45:54.360 --> 45:54.820
Ach so.

45:55.360 --> 45:55.680
Moment.

45:57.000 --> 45:59.520
Was muss man machen, nachdem man Rust abinstalliert hat?

45:59.640 --> 46:00.400
Werden wir jetzt gleich sehen.

46:00.920 --> 46:01.280
CD.

46:01.420 --> 46:02.260
Web-RTC.

46:02.720 --> 46:03.040
Rust.

46:04.060 --> 46:05.960
Und da drin machen wir jetzt Cargo-Build.

46:06.020 --> 46:06.320
Release.

46:06.640 --> 46:08.020
Vermutlich wird das nicht funktionieren.

46:09.660 --> 46:10.100
Bam.

46:10.300 --> 46:11.160
Wer hätte das gedacht?

46:11.820 --> 46:13.880
Can CD to Web-RTC Rust.

46:15.620 --> 46:16.300
Warum nicht?

46:16.660 --> 46:17.120
Was ist das Problem?

46:17.140 --> 46:18.940
Ah, ich kack-Noob.

46:19.860 --> 46:20.920
Ich muss gar nicht CD'en.

46:21.040 --> 46:22.360
Ich hab doch alles hier richtig hinkopiert.

46:22.620 --> 46:22.880
Lul.

46:30.070 --> 46:37.410
Ich nehm wahrscheinlich einfach die offiziellen Microsoft-ASP.NET-Core-Images.

46:41.030 --> 46:41.550
Oh, Build.

46:42.650 --> 46:44.410
Geht nicht, weil...

46:44.410 --> 46:45.250
Cargo-Not-Found.

46:45.330 --> 46:45.950
Ja, wunderbar.

46:48.050 --> 46:53.610
Alter, wo liegt denn bitte schon Cargo, nachdem man Rust abinstalliert hat?

46:55.310 --> 46:55.830
Okay.

46:55.830 --> 46:55.910
Okay.

46:56.290 --> 46:56.770
Ähm...

46:56.770 --> 46:58.430
Weiß ich...

46:58.430 --> 47:02.130
Äh...

47:02.130 --> 47:02.350
Moment.

47:03.030 --> 47:04.690
Wir gucken mal nach, Leute.

47:04.790 --> 47:05.550
Wir gucken mal nach.

47:06.170 --> 47:06.350
Hier.

47:08.350 --> 47:09.630
Wir machen uns mal einfach.

47:09.770 --> 47:11.530
Wir taggen das Bild schon mal gleich.

47:11.610 --> 47:14.470
Und zwar als CamChamp Version 0.1.

47:15.010 --> 47:15.190
So.

47:15.570 --> 47:17.350
Jetzt können wir sagen, Docker run.

47:19.230 --> 47:19.650
Ja, ja.

47:19.750 --> 47:20.590
Minus, minus, m.

47:21.430 --> 47:22.730
Ist es minus it?

47:22.850 --> 47:23.630
Oder ist es...

47:23.630 --> 47:24.650
Ich kann mir...

47:24.650 --> 47:27.950
Es gibt so ein paar Sachen, die mach ich prinzipiell immer falsch.

47:27.950 --> 47:28.590
Falsch.

47:28.950 --> 47:31.610
So, CamChamp.

47:32.550 --> 47:32.970
Bash.

47:34.670 --> 47:35.530
Hat's funktioniert?

47:36.410 --> 47:37.270
Okay, hat funktioniert.

47:37.790 --> 47:38.910
So, ähm...

47:38.910 --> 47:39.710
Was wollte ich jetzt gucken?

47:39.770 --> 47:40.850
Wo Cargo liegt, gell?

47:41.970 --> 47:46.030
Also wir sind jetzt, nur mal zur Erklärung, falls man das so schnell nicht mitgekommen ist.

47:46.050 --> 47:46.690
Ich zeig das nochmal.

47:47.690 --> 47:49.770
Also ich hab das Container-Image gebaut.

47:50.470 --> 47:52.650
Und da kommt ja so eine ID raus.

47:52.790 --> 47:56.070
Oder man gibt dem Container-Image einen Namen, einen Tag.

47:57.550 --> 47:58.870
Und ich hab das...

47:58.870 --> 47:59.870
Ich hab das Image gebaut.

47:59.970 --> 48:01.790
Ich hab das Image getaggt mit dem Name.

48:02.690 --> 48:04.710
Und jetzt kann ich das Image starten.

48:05.550 --> 48:05.730
So.

48:06.230 --> 48:11.030
Und minus, minus, m heißt, nachdem ich das Image gestartet hab und quasi es wieder gestoppt wird,

48:11.670 --> 48:13.190
soll es auch gleich gelöscht werden.

48:13.910 --> 48:20.170
Minus i ist Interactive und t ist Konsolen-Allocation oder irgendwie sowas.

48:20.830 --> 48:22.910
Das ist der Tag vom eben gebauten Image.

48:23.010 --> 48:25.670
Und das ist das Programm, was er da drin starten soll.

48:25.670 --> 48:28.830
Also im Prinzip startet er eine Shell im Container-Image.

48:28.870 --> 48:34.730
Das heißt, wir können jetzt nachgucken, wo RustUp den Kram installiert hat.

48:37.180 --> 48:37.860
Keine Ahnung.

48:37.980 --> 48:39.480
Guck mal, es gibt da auch ein Cargo.

48:40.140 --> 48:41.860
Cargo, Bin, Cargo.

48:42.980 --> 48:45.100
Okay, vielleicht, soll ich das vielleicht direkt angeben?

48:51.130 --> 48:51.910
Soll ich das vielleicht...

48:51.910 --> 48:53.650
Wo ist eigentlich meine...

48:54.190 --> 48:57.110
Wo ist eigentlich meine Cargo-Tommel und sowas?

48:58.070 --> 48:58.590
Irgendwie...

48:58.590 --> 48:59.290
Irgendwie ist die weg.

49:00.510 --> 49:02.610
Bada-bum-dings-bums-dansch-fridens-ab.

49:03.030 --> 49:03.590
Wo sind die hin?

49:03.590 --> 49:04.970
Die hab ich doch rüber kopiert.

49:05.030 --> 49:05.490
Die müsste doch eigentlich...

49:05.490 --> 49:06.150
Die müsste auch da sein.

49:09.810 --> 49:10.550
Aber war es das nicht?

49:13.600 --> 49:16.160
So, Build, Cargo, Cargo...

49:16.160 --> 49:18.140
Ne, Bin, Cargo.

49:19.560 --> 49:19.760
Ja.

49:20.360 --> 49:21.080
Äh, Build.

49:23.660 --> 49:25.200
No Cargo-Tommel-Fawn.

49:25.280 --> 49:25.960
Ja, ja, ist okay.

49:26.420 --> 49:26.840
Ist gut.

49:26.960 --> 49:27.340
Ist gut.

49:28.000 --> 49:29.360
Also, nochmal bauen.

49:29.820 --> 49:30.260
Run.

49:30.920 --> 49:33.600
Und zwar Run Cargo Build Release.

49:34.560 --> 49:36.820
Und wo ist das Problem?

49:36.820 --> 49:37.840
Sorry for Bash.

49:38.160 --> 49:38.820
Pog Subscription.

49:38.820 --> 49:39.420
Subscription.

49:39.900 --> 49:44.020
Wo ist das Problem, dass er meine Tommel-Config nicht rüber kopiert?

49:44.160 --> 49:44.780
Da ist sie doch hier.

49:44.840 --> 49:45.940
Guck, da ist noch Bestande.

49:48.620 --> 49:48.860
Ach.

49:49.360 --> 49:50.460
Guck mal, das ist klein geschrieben.

49:50.580 --> 49:51.920
Muss das groß geschrieben sein vielleicht?

49:52.780 --> 49:52.920
So.

49:53.260 --> 49:58.360
Übrigens, jetzt sieht man eine Sache, worauf man unbedingt achten muss beim Docker.

49:58.620 --> 50:00.160
Beim Docker-Image erstellen.

50:00.720 --> 50:04.220
Was wird jetzt passieren, Leute, wenn ich das nochmal bilden lasse?

50:05.240 --> 50:06.460
Also, ich zeige euch das mal.

50:06.580 --> 50:07.240
So, ja.

50:08.620 --> 50:09.280
Docker Run.

50:09.380 --> 50:10.080
Nein, nicht Docker Run.

50:10.200 --> 50:10.420
Build.

50:11.300 --> 50:14.020
Ihr seht, zack, bumm, geht relativ schnell.

50:14.160 --> 50:15.100
Und jetzt passt mal auf.

50:15.860 --> 50:17.200
Wenn ich jetzt...

50:17.200 --> 50:21.280
Was wird jetzt passieren, wenn ich das hier ändere an der Stelle?

50:21.400 --> 50:22.820
Genau, Rebuild ab dem Step.

50:23.120 --> 50:25.100
Der wird alles hier unten drunter neu ausführen.

50:25.200 --> 50:26.660
Also, inklusive Download von Rust.

50:26.660 --> 50:33.540
Das heißt, man sollte sich wirklich gut überlegen, wie man seine einzelnen Steps im Docker-File definiert.

50:34.060 --> 50:40.660
Das heißt, es wäre deutlich sinnvoller, die Installation hier zu machen und das Kopieren...

50:40.700 --> 50:42.980
...und das Installieren danach.

50:43.300 --> 50:45.600
Weil das hier wird sich öfters ändern.

50:46.320 --> 50:51.280
Download von der Rust-Runtime muss wahrscheinlich nicht öfters passieren.

50:55.400 --> 50:55.760
Build.

50:57.680 --> 50:57.980
Hey!

50:57.980 --> 51:01.020
Ach nee, ich dachte, es kompiliert schon.

51:01.140 --> 51:02.280
Es lädt gerade Rust runter.

51:05.500 --> 51:05.940
Rust.

51:18.060 --> 51:21.420
Du-du-du-du-du-du-du-du-du-du-du-du.

51:22.100 --> 51:24.160
Au, au, au, au.

51:37.080 --> 51:38.400
Ich weiß, woran es liegt.

51:38.880 --> 51:39.480
Es ist Debian.

51:39.980 --> 51:46.100
Dem fehlen seine ganzen Package-Devil-Library-Geschichten.

51:47.920 --> 51:52.720
Und jetzt kommt wieder ein Problem, was ich habe, was ich mir bei Debian seit Jahren nicht merken kann.

51:52.720 --> 51:54.800
Wie heißt dieses Package?

51:55.500 --> 51:58.720
Heißt es BuildEssential oder heißt es BuildEssentials?

52:00.240 --> 52:04.060
Upt, Install, BuildEssentials.

52:05.080 --> 52:05.600
Essential?

52:06.200 --> 52:06.720
Das heißt BuildEssential.

52:08.460 --> 52:08.720
Nein, das heißt BuildEssentials.

52:08.720 --> 52:09.320
Nein, das heißt BuildEssentials.

52:09.700 --> 52:14.440
Ich bring das, ohne Scheiß, jedes Mal, ich schreib das jedes Mal falsch.

52:14.580 --> 52:15.100
Jedes Mal.

52:15.560 --> 52:18.140
Glücklicherweise hat mein Auto Komplett und meistens ist es kein Problem.

52:19.820 --> 52:20.300
BuildEssential.

52:20.660 --> 52:22.360
So, und jetzt seht ihr, was auch doof ist?

52:23.220 --> 52:24.900
Ich passe diesen Step hier oben an.

52:25.500 --> 52:27.420
Und jetzt wird alles nochmal neu ausgeführt.

52:28.260 --> 52:30.840
Das heißt, man sollte schon seine Docker-Steps

52:30.840 --> 52:39.500
careful wählen, dass das nicht ausartet in 500 neuen Installs und so.

52:41.710 --> 52:45.710
Ah ja, und jedes Image ist lokal bei mir in der Registry noch drinne.

52:45.710 --> 52:48.710
Und ich müsste jetzt erstmal Docker cleanen.

52:48.710 --> 52:57.710
Ihr werdet sehen, guck mal, wir haben angefangen bei 100, wie viel haben wir, warte mal, Chat-Gate ist doch ganz einfach rauszufinden, bei wie viel Plattenplatz wir angefangen haben.

52:57.710 --> 53:01.710
Also wir werden jetzt einige Gigabyte verschwinden, verschwenden.

53:01.710 --> 53:12.100
Wir haben angefangen bei 100, guck mal, wir haben 3 Gig, 3 Gig haben wir schon verbraucht.

53:12.100 --> 53:15.670
Oh, guck mal, es funzt.

53:15.670 --> 53:19.110
Rust compiled.

53:19.110 --> 53:31.230
Oh, Alter, Rust compiled, aber echt lange.

53:31.230 --> 53:43.500
Rust.

53:43.500 --> 53:45.500
Placingly fast.

53:45.500 --> 53:51.780
Gut, ich mein, es dauert halt 20 Milliarden Dependencies zu...

53:51.780 --> 53:54.780
Boah, Alter, guckt euch die CPU-Auslastung an, Mann.

53:56.780 --> 53:58.780
Meine VM ist einfach komplett...

53:58.780 --> 54:00.780
Alter!

54:04.780 --> 54:06.780
Okay, er ist fertig, alles klar.

54:06.780 --> 54:07.780
Die VM ist einfach komplett auslastet.

54:07.780 --> 54:13.780
Aber es ist ja gut, es ist ja gut, unbenutzte CPU-Cores sind wasted CPU-Cores, ja?

54:14.780 --> 54:16.780
Okay, es hat funktioniert, nice.

54:16.780 --> 54:20.780
So, wenn ich jetzt nochmal bilde, geht's natürlich deutlich schneller, alles klar.

54:20.780 --> 54:22.780
So, wenn das jetzt funktioniert hat...

54:22.780 --> 54:23.780
Nicht exec, run.

54:23.780 --> 54:26.780
Wenn das jetzt funktioniert hat, haben wir hier eine...

54:28.780 --> 54:29.780
Target...

54:30.780 --> 54:31.780
Release...

54:31.780 --> 54:33.780
Haben wir die Library drinnen liegen, okay.

54:33.780 --> 54:35.780
Excellent, hat funktioniert, nice.

54:35.780 --> 54:36.780
Alles gut.

54:36.780 --> 54:37.780
Alles gut.

54:37.780 --> 54:39.780
So, Dogger-File.

54:39.780 --> 54:44.780
Übrigens auch ein weiteres Problem, wo jetzt Multistage-Builds schon sehr sinnvoll wären.

54:44.780 --> 54:46.780
Weil, wenn ich jetzt...

54:46.780 --> 54:49.780
Was an meinem Rust-Source-Code ändere...

54:49.780 --> 54:53.780
Macht er dir alle folgenden, ab hier, alle folgenden Steps...

54:53.780 --> 54:54.780
Neu.

54:54.780 --> 54:56.780
Das heißt, als nächstes kommt hier unser .NET-Build...

54:56.780 --> 54:59.780
Und dann wird dann auch jedes Mal neu ausgeführt, also...

54:59.780 --> 55:03.780
Das wird auf jeden Fall auf Multistage-Builds rauslaufen.

55:03.780 --> 55:05.780
Dass das ordentlich funktioniert.

55:05.780 --> 55:06.780
Okay.

55:06.780 --> 55:07.780
Aber ich will...

55:07.780 --> 55:10.780
Ich will es einmal zum Laufen bekommen, bevor wir es komplizierter machen.

55:10.780 --> 55:12.780
Also, wir haben jetzt hier Cargo...

55:12.780 --> 55:13.780
Cargo-Build...

55:13.780 --> 55:14.780
Okay, das ist richtig.

55:14.780 --> 55:15.780
Alles klar.

55:15.780 --> 55:16.780
Wie war das übrigens nochmal?

55:16.780 --> 55:17.780
Docker-Prune?

55:17.780 --> 55:18.780
Ne.

55:18.780 --> 55:19.780
Docker oder Docker-Prune?

55:19.780 --> 55:26.090
Es gab doch so ein System-Prune.

55:26.090 --> 55:28.090
Docker System Prune minus A.

55:28.090 --> 55:29.090
Genau.

55:29.090 --> 55:30.090
So, guck doch mal.

55:30.090 --> 55:31.090
Jetzt haben wir 106...

55:31.090 --> 55:32.090
106 Gig.

55:32.090 --> 55:34.090
Ich sage Docker mal.

55:34.090 --> 55:35.090
Alle...

55:35.090 --> 55:36.090
Wo war ich jetzt irgendwie?

55:36.090 --> 55:40.450
Ja.

55:40.450 --> 55:46.450
Ich glaube, Ubuntu und Hello World und Traffic brauchen wir nicht mehr 7 Monate ago.

55:46.450 --> 55:50.450
Jetzt sagen wir mal, Docker löscht einfach mal alles.

55:50.450 --> 55:51.450
Oh, fuck.

55:51.450 --> 55:53.450
Jetzt muss ich ein CamChamp neu bauen.

55:53.450 --> 56:00.620
Egal.

56:00.620 --> 56:01.620
Egal.

56:01.620 --> 56:02.620
20, Leute.

56:02.620 --> 56:03.620
20 Gig.

56:03.620 --> 56:04.620
Einfach mal weg.

56:04.620 --> 56:11.100
Ja.

56:11.100 --> 56:12.100
Ja, ja.

56:12.100 --> 56:13.100
Hast du recht.

56:13.100 --> 56:14.100
Das geht jetzt aber nicht richtig.

56:14.100 --> 56:15.100
Wobei, naja.

56:15.100 --> 56:16.100
Es würde doch...

56:16.100 --> 56:17.100
Doch, doch.

56:17.100 --> 56:18.100
Es würde...

56:18.100 --> 56:19.100
Es würde schon funktionieren.

56:19.100 --> 56:20.100
Ich könnte jetzt...

56:20.100 --> 56:22.100
Ich könnte jetzt die .NET Runtime installieren und sonst was.

56:22.100 --> 56:24.100
Aber das Dumme ist halt, wenn man es...

56:24.100 --> 56:28.100
Wenn man es einfach so logisch gruppieren will, so nach dem Motto, wir bauen erst Rust

56:28.100 --> 56:34.100
und dann bauen wir .NET, dann würde ich ab diesem Step hier, sobald sich mein Rust-Source-Code

56:34.100 --> 56:37.100
ändert, halt immer das ganze .NET-Zeug neu bauen.

56:37.100 --> 56:40.100
Deswegen, das schreit eigentlich nach Multi-Stage-Build.

56:40.100 --> 56:44.100
So, jetzt brauchen wir .NET als nächstes.

56:44.100 --> 56:48.900
Gig.

56:48.900 --> 56:50.900
Hört sich boomer an.

56:50.900 --> 56:51.900
Echt, warum?

56:51.900 --> 56:53.900
Was sagen die coolen Nichts...

56:53.900 --> 56:56.900
Was sagen die coolen Nichts-Boomer zu Gigabyte?

56:56.900 --> 56:59.280
GB?

56:59.280 --> 57:03.360
Wobei es ja eigentlich Gibi...

57:03.360 --> 57:04.360
Gibi...

57:04.360 --> 57:05.360
Nee, Moment.

57:05.360 --> 57:08.360
Gibi oder Gibi heißen müsste?

57:08.360 --> 57:10.360
Gibi, gell?

57:10.360 --> 57:13.630
Gibi?

57:13.630 --> 57:15.630
Aber es ist Mebi und nicht Meebi.

57:18.630 --> 57:19.630
Niemand...

57:19.630 --> 57:20.630
Leute, ohne Scheiß.

57:20.630 --> 57:23.630
Ich kenne niemand, der diese Einheiten verwendet.

57:23.630 --> 57:24.630
In der Aussprache, ja?

57:24.630 --> 57:25.630
Vielleicht zum Rechnen und so.

57:25.630 --> 57:26.630
Aber in der Aussprache.

57:26.630 --> 57:27.630
Niemand.

57:27.630 --> 57:28.630
Niemand.

57:28.630 --> 57:33.500
Okay, weiter.

57:33.500 --> 57:34.500
Jetzt brauchen wir...

57:34.500 --> 57:35.500
Jetzt brauchen wir unser .NET-Zeug.

57:35.500 --> 57:36.500
Gibt es offizielle Node.js...

57:36.500 --> 57:39.970
Äh...

57:39.970 --> 57:40.970
Node.js...

57:40.970 --> 57:41.970
Images.

57:41.970 --> 57:42.970
Node.js Chiseled Images.

57:42.970 --> 57:43.970
Es gibt auf jeden Fall offizielle Node-Images.

57:43.970 --> 57:44.970
Relativ sicher.

57:44.970 --> 57:45.970
Nachdem ich wenig Node-Anwendungen baue, weiß ich es nicht.

57:45.970 --> 57:46.970
Aber es würde mich enorm wundern, wenn es die nicht gäbe.

57:46.970 --> 57:47.970
So, also ich sehe schon, wir müssen trotzdem die Sachen in unterschiedlichen Verzeichnissen

57:47.970 --> 57:48.970
machen.

57:48.970 --> 57:49.970
Weil ich kann ja schlecht im gleichen Bild verzeichnen.

57:49.970 --> 57:50.970
Ich kann ja schlecht im gleichen Bild verzeichnen.

57:50.970 --> 57:51.970
Ich kann ja schlecht im gleichen Bild verzeichnen.

57:51.970 --> 57:52.970
Ich kann ja schlecht im gleichen Bild verzeichnen.

57:52.970 --> 57:53.970
Ich kann ja schlecht im gleichen Bild verzeichnen.

58:07.420 --> 58:08.420
Ich kann ja schlecht im gleichen Bild verzeichnen.

58:08.420 --> 58:09.420
Ich kann ja schlecht im gleichen Bild verzeichnen.

58:09.420 --> 58:10.420
Ich kann ja schlecht im eigenen Bild verzeichnen.

58:10.420 --> 58:11.420
So, den paragraf kann ich auch erst mal interpretation鹂nar.

58:11.420 --> 58:12.420
Dann habe ich den operator Sci-Zak.

58:12.420 --> 58:13.420
Verzeichnis.

58:13.420 --> 58:14.420
Dotnet und Rust Build-ятся.

58:14.420 --> 58:15.420
Wobei.

58:15.420 --> 58:16.420
Warum eigentlich nicht!

58:16.420 --> 58:19.300
Die kommen sich wirklich gar nicht so hinten Partikel in die Quere, oder?

58:19.300 --> 58:20.300
Well, okay.

58:20.300 --> 58:23.700
Das könnte durchaus ein bisschen verwirrend werden für den einen oder anderen Compiler,

58:23.700 --> 58:24.980
wenn es mehrere...

58:24.980 --> 58:26.940
Okay, schauen wir mal.

58:26.940 --> 58:29.500
Also, als Erstes müssen wir jetzt Dotnet installieren.

58:29.500 --> 58:32.880
Dotnet lässt sich relativ easy installieren, nämlich so.

58:32.880 --> 58:34.100
Dotnet 8.

58:34.100 --> 58:39.580
Ich schreibe jetzt mal was rein, bevor jetzt gleich...

58:39.580 --> 58:40.580
Das hatten wir nämlich schon öfters im Chat.

58:40.940 --> 58:42.940
dass ich 10 Minuten vorher was erzählt habe

58:42.940 --> 58:44.460
und dann kam jemand rein,

58:44.540 --> 58:46.340
beißt, danke schon für den Sub, Dennis, danke,

58:46.700 --> 58:47.720
bock, Subscription, Leute.

58:48.320 --> 58:50.500
Ich schreibe das jetzt oben als Kommentar rein, weil

58:50.500 --> 58:52.380
viele im Chat

58:52.380 --> 58:54.540
lacken critical information, wenn sie in den Stream

58:54.540 --> 58:56.480
reinkommen. Und ich weiß nicht mehr, was

58:56.480 --> 58:58.660
es für ein Thema war. Ich habe letztens,

58:58.800 --> 59:00.640
glaube ich, 20 Minuten lang

59:00.640 --> 59:02.500
fünfmal das Gleiche erklärt

59:02.500 --> 59:04.440
und dann kamen immer Leute in den Stream

59:04.440 --> 59:06.760
und sagen, Max, aber so macht man das doch gar nicht,

59:06.760 --> 59:07.840
ich mach das doch so und so.

59:07.840 --> 59:10.620
Ja, ich weiß, deswegen machen wir es erstmal

59:10.620 --> 59:12.660
einfach und dann machen wir es ein bisschen komplizierter,

59:12.740 --> 59:14.920
aber richtig. Fünf Minuten später kam wieder einer rein.

59:15.140 --> 59:16.620
Max, aber das macht man doch gar nicht so.

59:16.880 --> 59:18.620
Mach das doch mal anders. Wir schreiben das

59:18.620 --> 59:20.600
da rein, deswegen schreibe ich das jetzt mal

59:20.600 --> 59:22.400
da oben rein. Am Ende

59:22.400 --> 59:24.360
machen wir Multistage,

59:24.360 --> 59:26.540
heißt das Multistage oder Multistage-Build?

59:28.580 --> 59:29.740
Soccer Multi, ups.

59:31.200 --> 59:31.600
Soccer

59:31.600 --> 59:33.480
Multistage-Build.

59:36.020 --> 59:37.380
Das ist alles

59:37.380 --> 59:39.820
an die

59:39.820 --> 59:40.780
Five Hat

59:40.780 --> 59:42.680
Community-Ges.

59:44.790 --> 59:46.510
Lass das nicht wieder so ist, wie das letzte Mal.

59:50.890 --> 59:52.130
H-Style

59:52.130 --> 59:53.130
92

59:53.130 --> 59:56.330
Pog-Subscription. Danke für die ganzen

59:56.330 --> 59:57.830
Subs, Leute. Es ist sehr...

59:57.830 --> 01:00:02.120
So, also jetzt installieren

01:00:02.120 --> 01:00:03.740
wir erst einmal .NET.

01:00:06.210 --> 01:00:06.470
Build.

01:00:16.110 --> 01:00:20.940
Warum bildet er jetzt alles?

01:00:21.260 --> 01:00:23.140
Ach so, weil ich gerade alle meine Images

01:00:23.140 --> 01:00:24.020
weggeworfen habe.

01:00:24.020 --> 01:00:24.620
Ja, das...

01:00:24.640 --> 01:00:27.780
Das würde es erklären.

01:00:32.520 --> 01:00:34.180
Wenn man alle Images löscht...

01:00:34.180 --> 01:00:38.920
Alter, meine Nase läuft zu schlimm. Ich habe nichts zum Butzen.

01:00:42.420 --> 01:00:43.700
Nicht, dass... Nicht, dass hier irgendwie...

01:00:45.760 --> 01:00:47.380
Nochmal brauche ich das nicht.

01:00:51.910 --> 01:00:52.610
Eine Sache

01:00:52.610 --> 01:00:55.510
sieht man aber jetzt schon, was ein richtig

01:00:55.510 --> 01:00:57.270
großer Vorteil von Docker ist.

01:00:58.550 --> 01:00:59.430
Und es ist genau

01:00:59.430 --> 01:01:01.350
eines der Dinger, wofür Docker ursprünglich

01:01:01.350 --> 01:01:03.570
erfunden wurde. Für das ganze Zeug,

01:01:03.670 --> 01:01:05.310
was daraus gewachsen ist

01:01:05.310 --> 01:01:07.010
an Container-Ökosystemen und

01:01:07.010 --> 01:01:08.610
wie teilweise Docker heute...

01:01:08.810 --> 01:01:11.370
auch als Docker selbst, ja, für Sachen

01:01:11.370 --> 01:01:12.350
verwendet wird, wofür es gar nicht

01:01:12.350 --> 01:01:15.770
gedacht ist. Das war ja damals noch nicht

01:01:15.770 --> 01:01:18.410
abzusehen, aber genau für sowas wurde

01:01:18.410 --> 01:01:20.870
Docker ursprünglich entwickelt. Nämlich

01:01:20.870 --> 01:01:23.310
um diese ganze Sache mit... Ich entwickle

01:01:23.310 --> 01:01:26.450
was, auf meiner Kiste kompiliert es, auf

01:01:26.450 --> 01:01:28.550
meiner Kiste läuft es, aber auf dem Server

01:01:28.550 --> 01:01:30.570
läuft es nicht, auf der anderen

01:01:30.570 --> 01:01:32.610
Entwicklerkiste läuft es nicht, zu vermeiden.

01:01:32.610 --> 01:01:34.790
Hauptsächlich ursprüngliche Docker-Idee

01:01:34.790 --> 01:01:36.830
war ja sogar, es funktioniert auf meiner

01:01:36.830 --> 01:01:38.290
Entwicklerkiste, aber auf der anderen

01:01:38.290 --> 01:01:40.030
Entwicklerkiste nicht. Das war eines der

01:01:40.030 --> 01:01:41.950
ursprünglichen Ideen in der Docker. Und man

01:01:41.950 --> 01:01:44.170
sieht auch schon, dass es genau hierfür

01:01:44.170 --> 01:01:45.670
was bringt. Auch wenn wir das hier nicht

01:01:45.670 --> 01:01:47.410
optimal machen und wenn das langsam ist

01:01:47.410 --> 01:01:49.050
und wenn das nicht schön ist, es ist

01:01:49.050 --> 01:01:51.430
nachvollziehbar. Das heißt, wenn es

01:01:51.430 --> 01:01:54.250
funktioniert, das Bild jetzt, und ich das

01:01:54.250 --> 01:01:55.810
Image lösche, dann funktioniert es das

01:01:55.810 --> 01:01:59.530
nächste Mal wieder. Und wenn das Image weg

01:01:59.530 --> 01:02:01.250
ist, ist der ganze Müll aus dem lokalen

01:02:01.250 --> 01:02:06.500
System auch weg. Richtig, genau. So, jetzt

01:02:06.500 --> 01:02:08.480
haben wir .NET installiert. Jetzt können wir

01:02:08.480 --> 01:02:09.300
als nächstes...

01:02:09.860 --> 01:02:14.540
Äh, Copy. Aus unserem Backend-Projekt können

01:02:14.540 --> 01:02:16.820
wir die ganzen .cs-Files rüberkopieren.

01:02:16.820 --> 01:02:18.960
Da muss ich jetzt aber mal nachgucken, was

01:02:18.960 --> 01:02:20.920
wir noch so haben.

01:02:20.920 --> 01:02:29.420
Wir brauchen ganzen .cs-Files und wir

01:02:29.420 --> 01:02:34.670
brauchen das Projekt-File. Mehr brauchen

01:02:34.670 --> 01:02:38.510
wir eigentlich nicht. Also alle .cs-Backend-

01:02:38.510 --> 01:02:43.010
Files und das Sternchen.c... Wobei, Moment.

01:02:43.010 --> 01:02:46.300
Nee, das... das...

01:02:46.300 --> 01:02:48.240
Kopiert ihr hier nicht mit. So, die zwei

01:02:48.240 --> 01:02:49.620
Files brauchen wir.

01:02:49.620 --> 01:02:52.200
Danach können wir theoretisch schon mal

01:02:52.200 --> 01:02:53.280
probieren,

01:02:53.280 --> 01:02:58.500
wie ist mit .NET publish... warte mal, ich

01:02:58.500 --> 01:02:59.680
glaube ich habe das um das Handy gekriegt...

01:03:00.180 --> 01:03:01.240
Nix.

01:03:01.240 --> 01:03:03.100
Da können wir gucken, wie es aussieht mit .NET

01:03:03.100 --> 01:03:06.660
publish... wie geht das... iiih, die

01:03:06.660 --> 01:03:09.940
.NET Bild oder, .NET publish-release?

01:03:09.940 --> 01:03:14.490
Das habe ich. Ja und so, weil wir es ja

01:03:14.490 --> 01:03:16.910
installieren mit Docker... äh, weil wir das ja

01:03:16.910 --> 01:03:17.670
installieren mit

01:03:17.870 --> 01:03:31.000
mit dem install skript ok.net publish minus series ob das funktioniert doch

01:03:31.000 --> 01:03:33.340
haben wir das leben für meine bachelorarbeit leicht gemacht als

01:03:33.340 --> 01:03:38.740
unterschied ja genau für sowas ist auch fast jetzt was er was hat er jetzt für

01:03:38.740 --> 01:03:46.600
probleme please install lippi q machen wir ja das ist das ist eines der wenigen

01:03:46.600 --> 01:04:02.050
dort netz die opfack opfack okay das ist das problem wenn ich das da oben

01:04:02.050 --> 01:04:05.290
rein schreibe da muss ich den ganzen schiff noch mal durchlaufen lassen es

01:04:05.290 --> 01:04:11.930
dauert wieder zwei minuten habe ich keinen bock drauf aber was lippi q gibt

01:04:11.930 --> 01:04:19.650
es nicht ok exxon debian warum gibt es nein nein

01:04:20.490 --> 01:04:25.090
debian warum gibt es das abt abt search

01:04:25.090 --> 01:04:37.670
lippi q lippi q def muss ich jetzt sehen okay alles klar lippi q def high

01:04:37.670 --> 01:04:51.640
iq library lippi iq das sieht doch schon besser aus so und jetzt haben wir

01:04:51.640 --> 01:04:56.500
unser image am start mit gebauter anwendung drin das heißt nachdem die

01:04:56.500 --> 01:05:00.940
anwendung jetzt fertig ist ach so moment eins brauchen wir noch eins brauchen wir

01:05:00.940 --> 01:05:01.820
noch wir brauchen noch

01:05:01.820 --> 01:05:08.540
kopie weil das kann man eigentlich dann nachmachen weil wenn sich das ändert

01:05:08.540 --> 01:05:16.520
muss die anwendung noch mal kopie back end www root nach www also für unsere

01:05:16.520 --> 01:05:22.520
webseite die muss ja auch noch mit reinkopiert werden bild ok jetzt können

01:05:22.520 --> 01:05:26.120
wir gucken ob die anwendung funktioniert also unser unser container image würde

01:05:26.120 --> 01:05:28.820
ich sagen jetzt erst mal fertig mal gucken ob es funktioniert was ich hier

01:05:28.820 --> 01:05:44.540
gebaut habe

01:05:44.940 --> 01:05:59.080
und jetzt muss man glaube ich angeben wo ist es denn bin release backend dll

01:05:59.080 --> 01:06:05.420
und bämm es geht nicht weil unable to load shared library webrtc rust

01:06:05.420 --> 01:06:14.790
ah so weil das im falschen ordner liegt das liegt nämlich unter target release

01:06:14.790 --> 01:06:16.930
das liegt nämlich unter target release

01:06:18.270 --> 01:06:19.650
release

01:06:19.650 --> 01:06:21.970
libweb rtc rast

01:06:23.010 --> 01:06:25.010
muss man auch noch gleich moven

01:06:26.540 --> 01:06:28.540
jetzt gucken ob es jetzt läuft

01:06:29.780 --> 01:06:33.570
ach

01:06:33.570 --> 01:06:35.570
ne moment ne

01:06:39.420 --> 01:06:41.120
vielleicht weil das nicht

01:06:41.120 --> 01:06:43.120
im richtigen verzeichnis liegt

01:06:44.000 --> 01:06:46.000
aber cp

01:06:46.440 --> 01:06:52.260
libweb rtc rast kann sein ich bin mir nicht ganz sicher wo das hin muss release.net hier vielleicht

01:06:52.260 --> 01:06:57.040
bin release

01:06:57.040 --> 01:06:59.040
also wir müssen unser image auf jeden fall noch fixen

01:06:59.040 --> 01:07:01.040
.net

01:07:01.040 --> 01:07:03.040
run

01:07:03.040 --> 01:07:05.040
backend dll

01:07:05.040 --> 01:07:07.040
ey funzt

01:07:07.040 --> 01:07:09.040
pog

01:07:11.040 --> 01:07:15.040
warum funktioniert denn das ich hab doch gar kein ffm pack drauf sollte das jetzt nicht eigentlich

01:07:15.040 --> 01:07:17.040
crashen

01:07:17.040 --> 01:07:23.300
weil

01:07:23.300 --> 01:07:25.300
ne das ist dumm was ich hier mache

01:07:25.300 --> 01:07:27.300
wo sucht .net nach der library

01:07:27.300 --> 01:07:29.300
im verzeichnis wo du startest

01:07:29.300 --> 01:07:31.300
wenn du nichts spezielles angibst

01:07:31.300 --> 01:07:33.300
ok also aber prinzipiell

01:07:33.300 --> 01:07:35.300
das hier kommt von rast also prinzipiell funktioniert

01:07:35.300 --> 01:07:37.300
das als erstes hat natürlich

01:07:37.300 --> 01:07:39.300
kein www root

01:07:39.300 --> 01:07:41.300
wir müssen das auf jeden fall noch ein bisschen umkopieren

01:07:41.300 --> 01:07:43.300
das ist eklig so

01:07:43.300 --> 01:07:45.300
ich will das image aber sowieso eh nicht

01:07:45.300 --> 01:07:47.300
lassen insofern was mich wundert ist

01:07:47.300 --> 01:07:49.300
dass der nicht meckert

01:07:49.300 --> 01:07:51.300
dass ffm pack probleme hat

01:07:51.300 --> 01:07:53.300
hier

01:07:53.300 --> 01:07:55.300
ah ich weiß woran das liegt dass der nicht

01:07:55.300 --> 01:07:57.300
meckert dass ffm pack probleme hat

01:07:57.300 --> 01:07:59.300
das ist nämlich in nem thread drinne

01:07:59.300 --> 01:08:01.300
und der thread der crasht einfach

01:08:01.300 --> 01:08:03.300
und ich bekomm nix von mit

01:08:03.300 --> 01:08:05.300
wir machen das jetzt mal anders

01:08:05.300 --> 01:08:07.300
wir sagen jetzt mal ffm pack

01:08:07.300 --> 01:08:09.300
loglevel oder sowas

01:08:09.300 --> 01:08:15.420
konnte man doch hier setzen

01:08:15.420 --> 01:08:17.420
das setzen wir jetzt hier auf quiet

01:08:17.420 --> 01:08:19.420
oder sowas

01:08:19.420 --> 01:08:23.820
wir setzen mal das loglevel

01:08:23.820 --> 01:08:25.820
und dann sollten wir jetzt gleich

01:08:25.820 --> 01:08:27.820
nen fehler bekommen

01:08:27.820 --> 01:08:29.820
also was musste ich jetzt noch machen

01:08:29.820 --> 01:08:31.820
ich musste es moven

01:08:31.820 --> 01:08:33.820
kann man

01:08:33.820 --> 01:08:35.820
bei .net publish nicht nen output

01:08:35.820 --> 01:08:37.820
path angeben

01:08:37.820 --> 01:08:39.820
das muss ich grad mal ausprobieren

01:08:39.820 --> 01:08:41.820
konnte man nicht sagen

01:08:41.820 --> 01:08:43.820
.net publish

01:08:43.820 --> 01:08:45.820
minus o build doch konnte man

01:08:45.820 --> 01:08:47.820
also .net minus o

01:08:47.820 --> 01:08:49.820
kommt nach build rein

01:08:49.820 --> 01:08:53.900
und dann

01:08:53.900 --> 01:08:55.900
moven wir noch

01:08:55.900 --> 01:08:59.540
dann moven wir noch

01:08:59.540 --> 01:09:01.540
target

01:09:01.540 --> 01:09:03.540
oh

01:09:03.540 --> 01:09:05.540
vergessen wo es ist

01:09:05.540 --> 01:09:07.540
target

01:09:07.540 --> 01:09:09.540
release

01:09:09.540 --> 01:09:11.540
libwebrtcrust.so

01:09:11.540 --> 01:09:13.540
moven wir noch

01:09:13.540 --> 01:09:15.540
nach

01:09:15.540 --> 01:09:19.810
build

01:09:19.810 --> 01:09:21.810
ok

01:09:21.810 --> 01:09:23.810
so

01:09:23.810 --> 01:09:25.810
und ich hoffe dass es jetzt ordentlich

01:09:25.810 --> 01:09:27.810
crasht

01:09:27.810 --> 01:09:29.810
weil wenn es ordentlich crasht

01:09:29.810 --> 01:09:31.810
dann können wir nämlich

01:09:31.810 --> 01:09:33.810
den container ordentlich bauen

01:09:33.810 --> 01:09:40.190
so mal hier run

01:09:40.190 --> 01:09:43.890
schauen wir mal ob das hier gut aussieht

01:09:43.890 --> 01:09:45.890
jetzt haben wir nen ordner build

01:09:45.890 --> 01:09:47.890
achso da haben wir www root

01:09:47.890 --> 01:09:55.870
muss da auch noch rein

01:09:55.870 --> 01:09:57.870
wieso lese ich immer webrc crust

01:09:57.870 --> 01:09:59.870
passt doch

01:09:59.870 --> 01:10:01.870
ganzen schalentiere

01:10:01.870 --> 01:10:03.870
hier krustentiere

01:10:03.870 --> 01:10:10.190
am start ok

01:10:10.190 --> 01:10:12.190
.net

01:10:12.190 --> 01:10:14.190
.net run ne nicht run

01:10:14.190 --> 01:10:16.190
backend dll

01:10:16.190 --> 01:10:18.190
jawoll

01:10:18.190 --> 01:10:20.190
ffm pack crasht ok

01:10:20.190 --> 01:10:22.190
das würde es natürlich erklären

01:10:22.190 --> 01:10:24.190
und jetzt sagen wir mal apt install ffm pack

01:10:24.190 --> 01:10:26.190
das brauchen wir nämlich

01:10:26.190 --> 01:10:28.190
auch noch wir brauchen auch noch

01:10:28.190 --> 01:10:30.190
ffm pack

01:10:30.190 --> 01:10:32.190
oh da fällt mir grad was ein

01:10:32.190 --> 01:10:34.190
leute es ist keine gute idee wie ich das gebaut hab

01:10:34.190 --> 01:10:36.190
wir sollten vielleicht eine

01:10:36.190 --> 01:10:38.190
statische feste ffm pack version

01:10:38.190 --> 01:10:40.190
nehmen

01:10:40.190 --> 01:10:42.190
weil ansonsten ist es immer davon abhängig

01:10:42.190 --> 01:10:44.190
dass die betriebssystem version

01:10:44.190 --> 01:10:47.570
also die betriebssystem ffm pack

01:10:47.570 --> 01:10:49.570
version von dem

01:10:49.570 --> 01:10:51.570
was ich benutze als base image

01:10:51.570 --> 01:10:53.570
mit der von meiner entwicklerkiste übereinstimmt

01:10:53.570 --> 01:10:55.570
weil ich will ja neues ffm pack benutzen

01:10:55.570 --> 01:10:57.570
gucken wir mal ob das jetzt funktioniert

01:10:57.570 --> 01:11:01.140
backend nope

01:11:01.140 --> 01:11:03.140
der findet einfach mein ffm pack nicht

01:11:03.140 --> 01:11:05.140
obwohl es installiert ist

01:11:05.140 --> 01:11:07.140
das ist aber sehr

01:11:07.140 --> 01:11:09.140
keck wait

01:11:09.140 --> 01:11:11.140
gut der rest

01:11:11.140 --> 01:11:13.140
funktioniert also container scheint schon mal

01:11:13.140 --> 01:11:15.140
halbwegs brauchbar

01:11:15.140 --> 01:11:18.450
zu sein

01:11:18.450 --> 01:11:20.450
ld config lass mal kurz gucken wo ist denn

01:11:20.450 --> 01:11:22.450
wo liegt meine library

01:11:22.450 --> 01:11:24.450
what

01:11:24.450 --> 01:11:26.450
alter was ist denn das für ein scheiß fad

01:11:26.450 --> 01:11:28.450
lip x86

01:11:28.450 --> 01:11:30.450
64 linux

01:11:30.450 --> 01:11:32.450
knu

01:11:32.450 --> 01:11:34.450
da hätte ich ja im leben nicht dran gedacht

01:11:34.450 --> 01:11:36.450
dass das da liegt

01:11:36.450 --> 01:11:38.450
ja da guckt meine anwendung natürlich auch nicht nach

01:11:38.450 --> 01:11:45.150
ob das da liegt

01:11:45.150 --> 01:11:47.150
außerdem ist es die falsche ffm pack version

01:11:47.150 --> 01:11:49.150
ich entwickle mit ffm pack 6.1

01:11:49.150 --> 01:11:51.150
glaube ich

01:11:51.150 --> 01:11:53.150
und das hier ist ffm pack 5.9

01:11:53.150 --> 01:11:55.150
sehe ich das richtig 5.1

01:11:55.150 --> 01:11:57.150
ja das kann ja nicht funktionieren

01:11:57.150 --> 01:11:59.150
ok

01:11:59.150 --> 01:12:01.150
so dann fixen wir mal das docker image weiter

01:12:01.150 --> 01:12:03.150
als nächstes mussten wir noch

01:12:03.150 --> 01:12:06.720
ne das machen wir hier

01:12:06.720 --> 01:12:08.720
wo ist die sache mit www root

01:12:08.720 --> 01:12:10.720
hier www root

01:12:10.720 --> 01:12:12.720
soll nicht dahin kopiert werden sondern nach

01:12:12.720 --> 01:12:14.720
build

01:12:14.720 --> 01:12:18.420
also das ist alles noch sehr

01:12:18.420 --> 01:12:20.420
unoptimiert hier

01:12:20.420 --> 01:12:22.420
wie ok

01:12:22.420 --> 01:12:24.420
wo bekommen wir ne statische

01:12:24.420 --> 01:12:27.730
also noch ne build step um ffm

01:12:27.730 --> 01:12:29.730
pack zu bauen nee ich baue ffm

01:12:29.730 --> 01:12:31.730
pack nicht es gibt ein projekt was

01:12:31.730 --> 01:12:33.730
nightly builds von ffm pack macht

01:12:33.730 --> 01:12:35.730
das werde ich verwenden ich bin

01:12:35.730 --> 01:12:37.730
mir nur nicht mehr ganz sicher

01:12:37.730 --> 01:12:39.730
wie das wie das es gibt ein paar

01:12:39.730 --> 01:12:41.730
projekte die das machen das müssen wir uns gleich mal auf github

01:12:41.730 --> 01:12:43.730
auf github raussuchen

01:12:43.730 --> 01:12:49.920
ich will das aber erstmal

01:12:49.920 --> 01:12:51.920
checken ob prinzipiell das

01:12:51.920 --> 01:12:53.920
was ich hier gebaut habe funktioniert

01:12:53.920 --> 01:12:55.920
also

01:12:55.920 --> 01:12:57.920
.net

01:12:57.920 --> 01:12:59.920
.net .net

01:12:59.920 --> 01:13:01.920
backend

01:13:01.920 --> 01:13:03.920
dll

01:13:03.920 --> 01:13:05.920
ok gut funktioniert

01:13:05.920 --> 01:13:07.920
alles www root ist auch

01:13:07.920 --> 01:13:09.920
da ok es liegt echt nur an ffm pack

01:13:09.920 --> 01:13:11.920
jetzt müssen wir uns ein ffm

01:13:11.920 --> 01:13:13.920
pack build suchen

01:13:13.920 --> 01:13:15.920
mit allen dependencies drinne

01:13:15.920 --> 01:13:17.920
ffm pack build

01:13:17.920 --> 01:13:19.920
für linux

01:13:19.920 --> 01:13:21.920
und zwar nicht

01:13:21.920 --> 01:13:23.920
ein binary ffm pack build

01:13:23.920 --> 01:13:25.920
sondern mit

01:13:25.920 --> 01:13:27.920
ja ich suche ja ein fertiges build sondern

01:13:27.920 --> 01:13:29.920
ich suche ja nicht die binaries

01:13:29.920 --> 01:13:31.920
das könnte sogar das richtige projekt sein was ich suche

01:13:31.920 --> 01:13:33.920
lass mal gibt das denn nicht vielleicht sogar

01:13:33.920 --> 01:13:35.920
ein offizielles docker image

01:13:35.920 --> 01:13:37.920
mit ffm pack library

01:13:37.920 --> 01:13:41.810
versioniert oder so

01:13:41.810 --> 01:13:43.810
guck mal

01:13:43.810 --> 01:13:45.810
aber das ist wahrscheinlich nur normales ffm

01:13:45.810 --> 01:13:47.810
pack und nicht die ffm pack library oder

01:13:47.810 --> 01:13:49.810
oder

01:13:49.810 --> 01:13:51.810
oder

01:13:51.810 --> 01:13:53.810
ne

01:13:53.810 --> 01:13:55.810
das ist ja wobei man weiß es ja nicht

01:13:55.810 --> 01:13:59.310
man weiß es nicht

01:13:59.310 --> 01:14:03.140
probieren wir mal aus

01:14:03.140 --> 01:14:05.140
holen wir das mal

01:14:05.140 --> 01:14:07.140
cli

01:14:07.140 --> 01:14:09.140
cli

01:14:09.140 --> 01:14:11.140
haben die

01:14:11.140 --> 01:14:13.140
auch ein nicht cli image

01:14:13.140 --> 01:14:17.220
wobei bezieht sich

01:14:17.220 --> 01:14:19.220
auf was bezieht sich denn cli

01:14:19.220 --> 01:14:22.850
auf ffm pack

01:14:22.850 --> 01:14:24.850
oder auf

01:14:24.850 --> 01:14:26.850
dass es

01:14:26.850 --> 01:14:30.670
shells und so dabei hat

01:14:30.670 --> 01:14:32.670
cli ls

01:14:32.670 --> 01:14:34.670
was sind denn die unterschiede

01:14:34.670 --> 01:14:36.670
zwischen den einzelnen

01:14:36.670 --> 01:14:38.670
sachen überhaupt

01:14:38.670 --> 01:14:48.320
ja das

01:14:48.320 --> 01:14:50.320
so schlau war ich auch

01:14:50.320 --> 01:15:01.120
ich vermute da ist die

01:15:01.120 --> 01:15:03.120
das sind

01:15:03.120 --> 01:15:05.120
wahrscheinlich einfach nur binaries und da ist

01:15:05.120 --> 01:15:08.620
die

01:15:08.620 --> 01:15:10.620
da sind die ganzen ähm

01:15:10.620 --> 01:15:12.620
äh die library

01:15:12.620 --> 01:15:14.620
parts von ffm pack die ich brauche gar nicht

01:15:14.620 --> 01:15:18.130
dabei ok gucken wir

01:15:18.130 --> 01:15:20.130
gucken wir uns das mal an also

01:15:20.130 --> 01:15:22.130
wir machen

01:15:22.130 --> 01:15:24.130
jetzt mal wir starten einfach mal einen docker container

01:15:24.130 --> 01:15:26.130
mit

01:15:26.130 --> 01:15:28.130
mit dem image und zwar

01:15:28.130 --> 01:15:30.130
ffm pack nehmen wir mal

01:15:30.130 --> 01:15:32.130
amd 64 latest

01:15:32.130 --> 01:15:34.130
bam

01:15:34.130 --> 01:15:36.130
gucken wir mal rein

01:15:36.130 --> 01:15:38.130
was es da so gibt

01:15:38.130 --> 01:15:40.130
ob da ffm pack tatsächlich auch als

01:15:40.130 --> 01:15:42.130
library drinne liegt weil da können wir nämlich

01:15:42.130 --> 01:15:44.130
die images gleich verwenden

01:15:44.130 --> 01:15:49.230
oh

01:15:49.230 --> 01:15:51.230
ah

01:15:51.230 --> 01:15:53.230
ok der versucht gerade ffm

01:15:53.230 --> 01:15:55.230
pack direkt zu starten mit einer datei

01:15:55.230 --> 01:15:57.230
die bash heißt das ist natürlich blöd

01:15:57.230 --> 01:15:59.230
da müssen wir jetzt entry point

01:15:59.230 --> 01:16:01.230
überschreiben

01:16:01.230 --> 01:16:03.230
minus minus entry point

01:16:03.230 --> 01:16:05.230
bash

01:16:05.230 --> 01:16:07.230
kopf nicht gebacken jawoll doch gut

01:16:07.230 --> 01:16:09.230
passt

01:16:09.230 --> 01:16:11.230
hier ffm pack ist am

01:16:11.230 --> 01:16:14.610
start

01:16:14.610 --> 01:16:16.610
a v

01:16:16.610 --> 01:16:20.750
ja

01:16:20.750 --> 01:16:22.750
die bringen die libraries gar nicht

01:16:22.750 --> 01:16:24.750
mit vermutlich

01:16:24.750 --> 01:16:26.750
lip

01:16:26.750 --> 01:16:31.920
äh

01:16:31.920 --> 01:16:33.920
die bringen glaube ich die ganzen libraries

01:16:33.920 --> 01:16:38.580
nicht mit

01:16:38.580 --> 01:16:40.580
suchen wir mal irgendwie nach

01:16:40.580 --> 01:16:46.320
die haben nur

01:16:46.320 --> 01:16:48.320
ne na geil

01:16:48.320 --> 01:16:50.320
die bringen nur ffm pack

01:16:50.320 --> 01:16:52.320
die binaries mit das bringt mir ja gar nix

01:16:52.320 --> 01:16:54.320
und

01:16:54.320 --> 01:16:56.320
was ist das das ist das da

01:16:56.320 --> 01:16:58.320
ne das ist natürlich

01:16:58.320 --> 01:17:04.260
blöde

01:17:04.260 --> 01:17:06.260
dann bringen mir die images

01:17:06.260 --> 01:17:08.260
nicht wirklich was

01:17:08.260 --> 01:17:12.460
weil

01:17:12.460 --> 01:17:14.460
weil die ffm pack

01:17:14.460 --> 01:17:16.460
binaries

01:17:16.460 --> 01:17:18.460
die brauche ich ja gar nicht

01:17:18.460 --> 01:17:20.460
gucken wir nochmal

01:17:20.460 --> 01:17:22.460
was da jetzt drinne ist ob das irgendwie anders

01:17:22.460 --> 01:17:29.040
ist

01:17:29.040 --> 01:17:31.040
wer sich fragt was das ist das hier listet

01:17:31.040 --> 01:17:33.040
alle libraries auf auf dem system hier guckt

01:17:33.040 --> 01:17:35.040
und ähm

01:17:35.040 --> 01:17:37.040
v format nennt sich eben

01:17:37.040 --> 01:17:39.040
ein teil von ffm pack

01:17:39.040 --> 01:17:41.040
das gibt es immer

01:17:41.040 --> 01:17:43.040
wenn es ffm pack gibt

01:17:43.040 --> 01:17:45.040
ja ok die images bringen mir nix weil in den images ist bloß

01:17:45.040 --> 01:17:47.040
ffm pack als binary drin

01:17:47.040 --> 01:17:49.040
aber immerhin

01:17:49.040 --> 01:17:52.540
als halbwegs

01:17:52.540 --> 01:17:54.540
aktuelle als als genau die version

01:17:54.540 --> 01:17:56.540
die ich brauche ok

01:17:56.540 --> 01:17:58.540
das heißt wir müssen das selbst machen

01:17:58.540 --> 01:18:03.070
ffm pack einbauen

01:18:03.070 --> 01:18:05.070
oder was haben wir sonst noch so für images auf docker hub

01:18:05.070 --> 01:18:07.070
jellyfin

01:18:07.070 --> 01:18:11.280
ne

01:18:11.280 --> 01:18:13.280
I

01:18:13.280 --> 01:18:15.280
ne

01:18:15.280 --> 01:18:17.280
ich glaube ich verzichte auf ein 4 jahre altes

01:18:17.280 --> 01:18:19.280
ffm pack

01:18:19.280 --> 01:18:21.280
kannst du nicht einfach ein fertiges bild runterladen

01:18:21.280 --> 01:18:23.280
doch doch machen wir jetzt

01:18:23.280 --> 01:18:25.280
ich dachte nur vielleicht gibt es ein fertiges

01:18:25.280 --> 01:18:27.280
fertiges image container image

01:18:27.280 --> 01:18:29.280
was wir verwenden können

01:18:29.280 --> 01:18:31.280
updated 8 years ago

01:18:31.280 --> 01:18:33.280
und was zum teufel ist

01:18:33.280 --> 01:18:37.040
open coconut

01:18:37.040 --> 01:18:39.040
na gut brauchen wir nicht

01:18:39.040 --> 01:18:41.040
gucken wir mal hier

01:18:41.040 --> 01:18:43.040
ich glaube das sind die richtigen bilds das sind auch die die ich sonst immer

01:18:43.040 --> 01:18:45.040
verwendet verwendet habe

01:18:45.040 --> 01:18:47.040
weil man ein statisches

01:18:47.040 --> 01:18:49.040
ffm pack gebraucht hat

01:18:49.040 --> 01:18:59.010
ja

01:18:59.010 --> 01:19:01.010
ffm pack

01:19:01.010 --> 01:19:03.010
n1128

01:19:03.010 --> 01:19:05.010
git commit hash linux gpl

01:19:07.010 --> 01:19:09.010
linux gpl

01:19:09.010 --> 01:19:11.010
shared

01:19:11.010 --> 01:19:14.640
das klingt gut

01:19:14.640 --> 01:19:16.640
kann es sein dass die libraries von ffm pack sich lib av

01:19:16.640 --> 01:19:22.130
nennen

01:19:22.130 --> 01:19:24.130
da gibt es mehrere

01:19:24.130 --> 01:19:26.130
es gibt av format

01:19:26.130 --> 01:19:28.130
gibt es auch

01:19:28.130 --> 01:19:30.130
aber es kommt

01:19:30.130 --> 01:19:32.130
also die dinger nennen sie immer lib av

01:19:32.130 --> 01:19:34.130
und dann kommt dann der rest hinten dran

01:19:34.130 --> 01:19:36.130
aber es ist ja egal ich habe nach av format

01:19:36.130 --> 01:19:38.130
gesucht und das hätte er finden müssen

01:19:38.130 --> 01:19:40.130
also sind

01:19:40.130 --> 01:19:42.130
wir haben es ja auch gesehen da lagen keine rum

01:19:42.130 --> 01:19:44.130
aber was haben die hier alles zur auswahl

01:19:44.130 --> 01:19:46.130
die haben linux 64

01:19:46.130 --> 01:19:48.130
haben die vielleicht auch

01:19:48.130 --> 01:19:50.130
irgendeine tag version

01:19:50.130 --> 01:19:52.130
anstatt master

01:19:52.130 --> 01:19:54.130
so 661 oder so

01:19:54.130 --> 01:19:56.130
ja

01:19:56.130 --> 01:19:58.130
601

01:19:58.130 --> 01:20:01.440
was für eine ffm pack version habe ich denn bei mir lokal

01:20:01.440 --> 01:20:03.440
61

01:20:03.440 --> 01:20:05.440
gibt es hier 61

01:20:05.440 --> 01:20:07.440
ne gibt es nicht

01:20:07.440 --> 01:20:15.100
ach das liegt daran

01:20:15.100 --> 01:20:17.100
weil 61 wahrscheinlich gerade master ist

01:20:17.100 --> 01:20:19.100
und 601

01:20:19.100 --> 01:20:21.100
das letzte release

01:20:21.100 --> 01:20:23.100
kann das sein

01:20:23.100 --> 01:20:25.100
vermutlich

01:20:25.100 --> 01:20:27.100
dann nehmen wir mal 601

01:20:27.100 --> 01:20:29.100
601 müsste auch klar gehen

01:20:29.100 --> 01:20:31.100
also 601

01:20:31.100 --> 01:20:35.250
linux

01:20:35.250 --> 01:20:37.250
601 linux

01:20:37.250 --> 01:20:39.250
64 gpl

01:20:39.250 --> 01:20:41.250
shared das brauchen wir

01:20:41.250 --> 01:20:43.250
was damit gemeint ist folgendes

01:20:43.250 --> 01:20:45.250
also rate ich jetzt einfach mal

01:20:45.250 --> 01:20:47.250
gpl

01:20:47.250 --> 01:20:49.250
gpl enthält nur die open source codex

01:20:49.250 --> 01:20:51.250
gpl enthält nur die open source codex

01:20:51.250 --> 01:20:53.250
und minus shared

01:20:53.250 --> 01:20:55.250
bedeutet das ist nur die library komponente

01:20:55.250 --> 01:20:57.250
und das hier ist library

01:20:57.250 --> 01:20:59.250
plus oder eventuell nur

01:20:59.250 --> 01:21:04.160
binaries

01:21:04.160 --> 01:21:15.150
da gibt es aber keine oder

01:21:15.150 --> 01:21:17.150
das ist das source code oder das ist kein

01:21:17.150 --> 01:21:24.620
das ist doch nur das source code

01:21:24.620 --> 01:21:28.130
das ist doch bestimmt kein

01:21:28.130 --> 01:21:37.900
fertig gebautes

01:21:37.900 --> 01:21:39.900
ich glaube nicht das ich glaube das das nur das source code ist

01:21:39.900 --> 01:21:52.370
guck mal mal

01:21:52.370 --> 01:21:54.370
ok ta xfz

01:21:54.370 --> 01:21:56.370
moment das heißt ja anders

01:21:56.370 --> 01:21:58.370
ta z muss weg

01:21:58.370 --> 01:22:00.370
ja guck das ist nur das source code

01:22:00.370 --> 01:22:02.370
das bringt mir nix

01:22:02.370 --> 01:22:04.370
da müsste ich ffm pack

01:22:04.370 --> 01:22:06.370
auch noch selbst kompilieren

01:22:06.370 --> 01:22:08.370
da halten sich da halten sich

01:22:08.370 --> 01:22:16.740
mein bock hält sich da in grenzen den ich da drauf habe

01:22:16.740 --> 01:22:18.740
ffm pack kommt weg

01:22:18.740 --> 01:22:20.740
ok docker file

01:22:20.740 --> 01:22:22.740
wir benutzen das hier

01:22:22.740 --> 01:22:24.740
linux 64

01:22:24.740 --> 01:22:26.740
gpl shared

01:22:26.740 --> 01:22:34.660
gehen wir mal in unseren docker container

01:22:34.660 --> 01:22:36.660
rein den wir eben hatten

01:22:36.660 --> 01:22:38.660
und probieren das da mal aus

01:22:38.660 --> 01:22:40.660
wie das da aussieht

01:22:40.660 --> 01:22:44.160
wget

01:22:44.160 --> 01:22:46.160
zack genau

01:22:46.160 --> 01:22:48.160
so

01:22:48.160 --> 01:22:50.160
ta x

01:22:50.160 --> 01:22:52.160
fz

01:22:52.160 --> 01:22:54.160
ne z nicht

01:22:54.160 --> 01:22:56.160
ja das sind das ist

01:22:56.160 --> 01:22:58.160
ne fertig kompilierte library ok

01:22:58.160 --> 01:23:00.160
das ist gut

01:23:00.160 --> 01:23:02.160
hier haben wir es

01:23:02.160 --> 01:23:04.160
binaries sind auch am start die wir nicht

01:23:04.160 --> 01:23:06.160
brauchen die können wir theoretisch löschen

01:23:06.160 --> 01:23:08.160
noch gleich aus dem image da es ein bisschen kleiner wird

01:23:08.160 --> 01:23:10.160
lip

01:23:10.160 --> 01:23:12.160
da ist alles drin was wir brauchen

01:23:12.160 --> 01:23:14.160
genau

01:23:14.160 --> 01:23:16.160
exzellent

01:23:16.160 --> 01:23:18.160
ok wir bauen unsere anwendung kurz ein kleines

01:23:18.160 --> 01:23:20.160
bisschen um

01:23:20.160 --> 01:23:22.160
nämlich

01:23:22.160 --> 01:23:24.160
ich lade das hier auch mal runter

01:23:24.160 --> 01:23:29.260
und dann packen wir

01:23:29.260 --> 01:23:32.640
das ganze

01:23:32.640 --> 01:23:34.640
in unser docker ignore file

01:23:34.640 --> 01:23:36.640
weil ich will garantiert nicht

01:23:36.640 --> 01:23:38.640
aber docker file ist auch nicht

01:23:38.640 --> 01:23:40.640
also weil ich will ja nicht

01:23:40.640 --> 01:23:42.640
ffm pack da irgendwie drinnen liegen haben

01:23:42.640 --> 01:23:44.640
also machen wir

01:23:44.640 --> 01:23:46.640
in unser git ignore

01:23:46.640 --> 01:23:48.640
in unser git ignore file

01:23:48.640 --> 01:23:50.640
alles was ffm pack sternchen hast soll

01:23:50.640 --> 01:23:52.640
weg ok

01:23:52.640 --> 01:23:54.640
weil ich will nicht aus versehen

01:23:54.640 --> 01:23:56.640
irgendwie 500 mb oder

01:23:56.640 --> 01:23:58.640
wie groß ist das jetzt entpackt

01:23:58.640 --> 01:24:04.900
ne

01:24:04.900 --> 01:24:17.230
ach ne

01:24:17.230 --> 01:24:19.230
aber ich habs noch gar nicht entpackt

01:24:19.230 --> 01:24:21.230
kack noob alter

01:24:21.230 --> 01:24:23.230
ich wundere mich schon die ganze zeit wo ist es

01:24:23.230 --> 01:24:37.580
was

01:24:37.580 --> 01:24:39.580
äh

01:24:39.580 --> 01:24:41.580
ich bin verwirrt

01:24:41.580 --> 01:24:43.580
achso f

01:24:43.580 --> 01:24:48.750
steht ja sogar da lul

01:24:48.750 --> 01:24:50.750
so ffm pack taucht hier nicht drinnen auf

01:24:50.750 --> 01:24:56.240
ja ich hab keinen bock das

01:24:56.240 --> 01:24:58.240
157 mb

01:24:58.240 --> 01:25:00.240
bei mir im git landen

01:25:00.240 --> 01:25:02.240
muss nicht sein

01:25:02.240 --> 01:25:04.240
deswegen kommt das in das git ignore rein

01:25:04.240 --> 01:25:06.240
so und jetzt müssen wir gucken

01:25:06.240 --> 01:25:08.240
dass ich als library

01:25:08.240 --> 01:25:10.240
fad nicht slash lib verwende

01:25:10.240 --> 01:25:12.240
sondern

01:25:12.240 --> 01:25:14.240
wir benennen das sogar noch um

01:25:14.240 --> 01:25:16.240
komm wir benennen das um

01:25:16.240 --> 01:25:18.240
den namen kann sich doch keiner merken

01:25:18.240 --> 01:25:20.240
wir benennen das einfach in ffm pack um

01:25:20.240 --> 01:25:22.240
und die library löschen wir

01:25:22.240 --> 01:25:24.240
und das runtergeladene ta-archiv löschen wir wieder

01:25:24.240 --> 01:25:26.240
das heißt mein ffm pack suche ich jetzt unterhalb von

01:25:26.240 --> 01:25:28.240
ffm pack slash lib

01:25:28.240 --> 01:25:30.240
ups

01:25:30.240 --> 01:25:32.240
so mal gucken ob das jetzt startet

01:25:32.240 --> 01:25:34.240
run

01:25:34.240 --> 01:25:39.280
run

01:25:39.280 --> 01:25:41.280
und funzt nice

01:25:41.280 --> 01:25:43.280
ohne fehler

01:25:43.280 --> 01:25:45.280
ja ja und es liest auch die sachen von der kamera

01:25:45.280 --> 01:25:47.280
also alles gut

01:25:47.280 --> 01:25:49.280
so ffm pack slash

01:25:49.280 --> 01:25:51.280
also genau ffm pack slash lib

01:25:51.280 --> 01:25:53.280
das heißt im endeffekt müssen wir jetzt

01:25:53.280 --> 01:25:55.280
nur das gleiche noch für den docker container machen

01:25:55.280 --> 01:26:00.450
und dann bauen wir den docker container

01:26:00.450 --> 01:26:02.450
noch ordentlich

01:26:02.450 --> 01:26:04.450
so jetzt haben wir das hier hin kopiert

01:26:04.450 --> 01:26:06.450
ffm pack machen wir mal hier als letzten step

01:26:06.450 --> 01:26:08.450
wget

01:26:08.450 --> 01:26:22.450
ffm pack

01:26:22.450 --> 01:26:24.450
wie

01:26:24.450 --> 01:26:26.450
wie sagt man wget

01:26:26.450 --> 01:26:28.450
dass er direkt entpacken soll

01:26:28.450 --> 01:26:30.450
also ta kann man das einfach so rein

01:26:30.450 --> 01:26:32.450
pipen

01:26:32.450 --> 01:26:34.450
hx

01:26:34.450 --> 01:26:36.450
vielleicht hat x nur z kein

01:26:36.450 --> 01:26:38.450
pipe oder so hin

01:26:38.450 --> 01:26:40.450
ne

01:26:40.450 --> 01:26:42.450
unexpected end of file

01:26:42.450 --> 01:26:46.850
ähm

01:26:46.850 --> 01:26:48.850
ne moment

01:26:48.850 --> 01:26:50.850
muss wget noch sagen

01:26:50.850 --> 01:26:52.850
minus o glaub ich

01:26:52.850 --> 01:26:54.850
für output

01:26:54.850 --> 01:26:56.850
wget pipe ta

01:26:56.850 --> 01:27:00.930
so wir fragen stackoverflow

01:27:00.930 --> 01:27:02.930
wget

01:27:02.930 --> 01:27:04.930
groß o minus

01:27:04.930 --> 01:27:08.240
gepiped

01:27:08.240 --> 01:27:10.240
ne moment das muss ich jetzt hier erstmal testen

01:27:10.240 --> 01:27:15.090
wget

01:27:15.090 --> 01:27:17.090
minus groß o minus

01:27:17.090 --> 01:27:19.090
das ist wahrscheinlich der standard out

01:27:19.090 --> 01:27:21.090
gepiped nach ta xzf

01:27:21.090 --> 01:27:23.090
alles klar

01:27:23.090 --> 01:27:25.090
okay nice stackoverflow gg

01:27:25.090 --> 01:27:34.800
stackoverflow lügt

01:27:34.800 --> 01:27:36.800
ah moment das ist kein z

01:27:36.800 --> 01:27:38.800
ja das ist richtig

01:27:38.800 --> 01:27:40.800
wat

01:27:40.800 --> 01:27:42.800
archive is compressed

01:27:42.800 --> 01:27:44.800
use minus j option

01:27:44.800 --> 01:27:50.740
moment

01:27:50.740 --> 01:27:52.740
ey warum ist

01:27:52.740 --> 01:27:54.740
warum ist chat

01:27:54.740 --> 01:27:56.740
äh nicht chat warum ist stackoverflow

01:27:56.740 --> 01:28:01.780
falsch

01:28:01.780 --> 01:28:03.780
okay minus xv so

01:28:03.780 --> 01:28:05.780
irgendwie

01:28:05.780 --> 01:28:07.780
hey das funktioniert

01:28:07.780 --> 01:28:09.780
nice kaum macht mans richtig

01:28:09.780 --> 01:28:15.520
okay so und jetzt ist die

01:28:15.520 --> 01:28:17.520
große preisfrage ich lösch den ganzen kreml

01:28:17.520 --> 01:28:19.520
grad nochmal jaja

01:28:19.520 --> 01:28:21.520
jetzt ist die große preisfrage

01:28:21.520 --> 01:28:23.520
wie kann man ta den output

01:28:23.520 --> 01:28:25.520
ordnernamen angeben war das

01:28:25.520 --> 01:28:27.520
minus c

01:28:27.520 --> 01:28:29.520
ta output directory

01:28:29.520 --> 01:28:33.020
name

01:28:33.020 --> 01:28:35.020
how to choose directory

01:28:35.020 --> 01:28:37.020
name

01:28:37.020 --> 01:28:39.020
during untarring

01:28:39.020 --> 01:28:43.490
genau das wollen wir haben

01:28:43.490 --> 01:28:45.490
minus c pretty name strip

01:28:45.490 --> 01:28:50.400
components one achso

01:28:50.400 --> 01:28:52.400
das ist weil die m kardieren davor

01:28:52.400 --> 01:28:55.710
anscheinend geht das nicht

01:28:55.710 --> 01:29:02.610
what

01:29:02.610 --> 01:29:04.610
jetzt okay jetzt wirds aber advanced

01:29:04.610 --> 01:29:06.610
was

01:29:06.610 --> 01:29:08.610
minus minus transform

01:29:08.610 --> 01:29:10.610
und dann regex

01:29:10.610 --> 01:29:12.610
für den dateinamen oder was

01:29:12.610 --> 01:29:14.610
ja komm komm

01:29:14.610 --> 01:29:16.610
mal nicht

01:29:16.610 --> 01:29:18.610
wir wollen es mal nicht übertreiben

01:29:18.610 --> 01:29:20.610
ich würde vorschlagen wir machen einfach nen move danach

01:29:20.610 --> 01:29:22.610
und gut ist ja

01:29:22.610 --> 01:29:24.610
es muss ja nicht

01:29:24.610 --> 01:29:26.610
wir müssen es ja nicht komplett übertreiben

01:29:26.610 --> 01:29:28.610
also ein move ffm pack

01:29:28.610 --> 01:29:30.610
nach ffm pack okay alles gut

01:29:30.610 --> 01:29:32.610
und schon ist es so wie wir es haben wollen

01:29:32.610 --> 01:29:34.610
wunderbar

01:29:34.610 --> 01:29:38.050
man kann es ja mit shell

01:29:38.050 --> 01:29:40.050
hacks auch übertreiben

01:29:40.050 --> 01:29:42.050
so

01:29:42.050 --> 01:29:44.050
und als nächstes jetzt noch nen move

01:29:44.050 --> 01:29:46.050
von ffm pack sternchen

01:29:46.050 --> 01:29:48.050
nach ffm pack

01:29:48.050 --> 01:29:50.050
so

01:29:50.050 --> 01:29:53.740
und dann

01:29:53.740 --> 01:29:55.740
nach build ffm pack

01:29:55.740 --> 01:29:57.740
so und wenn ich jetzt alles

01:29:57.740 --> 01:29:59.740
gemacht habe dann sollte

01:29:59.740 --> 01:30:01.740
dann sollte

01:30:01.740 --> 01:30:03.740
mein docker

01:30:03.740 --> 01:30:05.740
dann sollte mein docker container

01:30:05.740 --> 01:30:11.490
funktionieren

01:30:11.490 --> 01:30:13.490
ich bin gespannt

01:30:13.490 --> 01:30:17.180
dann löschen wir den container nochmal

01:30:17.180 --> 01:30:22.160
wir könnten auch quiet

01:30:22.160 --> 01:30:24.160
machen beim wget

01:30:24.160 --> 01:30:26.160
ich glaub minus

01:30:26.160 --> 01:30:28.160
minus q ist es bei wget

01:30:28.160 --> 01:30:30.160
und ähm

01:30:30.160 --> 01:30:32.160
minus minus s

01:30:32.160 --> 01:30:34.160
ist es bei also bei wget

01:30:34.160 --> 01:30:36.160
ist es minus q für quiet

01:30:36.160 --> 01:30:38.160
und bei curl ist es glaube ich minus s für

01:30:38.160 --> 01:30:40.160
silent wenn man nicht will

01:30:40.160 --> 01:30:42.160
dass der unnötige

01:30:42.160 --> 01:30:49.380
terminal outputs macht

01:30:49.380 --> 01:30:51.380
okay run

01:30:51.380 --> 01:30:53.380
jetzt bin ich ja mal

01:30:53.380 --> 01:30:55.380
gespannt ob das funktioniert was ich hier gebaut habe

01:30:55.380 --> 01:30:59.580
hier sind wir

01:30:59.580 --> 01:31:01.580
also dotnet

01:31:01.580 --> 01:31:03.580
dotnet

01:31:03.580 --> 01:31:05.580
backend dln

01:31:13.700 --> 01:31:19.120
falsche ffm pack version

01:31:19.120 --> 01:31:21.120
fragezeichen

01:31:21.120 --> 01:31:28.660
okay das ist ausgesprochen

01:31:28.660 --> 01:31:34.660
doof jetzt

01:31:34.660 --> 01:31:36.660
das ist wirklich doof

01:31:43.300 --> 01:31:45.300
was hat er denn für schmerzen man

01:31:45.300 --> 01:31:47.300
dotnet run okay

01:31:47.300 --> 01:31:51.760
unable to load

01:31:51.760 --> 01:31:53.760
ja ich weiß okay ich kopier das mal

01:31:53.760 --> 01:32:00.080
kopier das mal wieder hoch

01:32:00.080 --> 01:32:02.080
ja okay okay ffm pack

01:32:02.080 --> 01:32:04.080
nicht gefunden habe ich

01:32:04.080 --> 01:32:11.360
habe ich kapiert habe ich kapiert

01:32:11.360 --> 01:32:16.400
oh

01:32:16.400 --> 01:32:18.400
what alter der crasht einfach

01:32:18.400 --> 01:32:20.400
was ist denn das jetzt

01:32:20.400 --> 01:32:24.030
crash champ

01:32:24.030 --> 01:32:32.530
einfach einfach

01:32:32.530 --> 01:32:34.530
der crash champ am start

01:32:34.530 --> 01:32:36.530
weil ich gerade versuche

01:32:36.530 --> 01:32:38.530
rockercontainer zu bauen

01:32:38.530 --> 01:32:40.530
für meine anwendung dafür brauche ich ffm pack

01:32:40.530 --> 01:32:42.530
aber ffm pack zeigt sich

01:32:42.530 --> 01:32:44.530
nicht

01:32:44.530 --> 01:32:46.530
kooperativ

01:32:46.530 --> 01:32:48.530
achso ich habe auch die falsche version

01:32:48.530 --> 01:32:52.800
guck mal

01:32:52.800 --> 01:32:54.800
meint ihr es könnte daran liegen

01:32:54.800 --> 01:32:56.800
dass ich hier lokal

01:32:56.800 --> 01:32:58.800
ffm pack

01:32:58.800 --> 01:33:00.800
6 1 habe

01:33:00.800 --> 01:33:02.800
und im container ffm pack

01:33:02.800 --> 01:33:04.800
6 0 1

01:33:04.800 --> 01:33:08.180
was meint ihr könnte das

01:33:08.180 --> 01:33:10.180
das problem sein

01:33:10.180 --> 01:33:12.180
ich mein es deutet schon ein bisschen drauf hin

01:33:12.180 --> 01:33:14.180
ja wenn ich hier so sachen

01:33:14.180 --> 01:33:16.180
sehe wie

01:33:16.180 --> 01:33:21.660
einfach instant crash

01:33:21.660 --> 01:33:23.660
warum crasht er denn

01:33:23.660 --> 01:33:27.100
was ist das problem man

01:33:27.100 --> 01:33:33.620
hm

01:33:33.620 --> 01:33:35.620
okay was hat er denn

01:33:35.620 --> 01:33:37.620
für schmerzen ffm pack lib

01:33:37.620 --> 01:33:41.120
ist das überhaupt richtig

01:33:41.120 --> 01:33:43.120
ffm pack lib

01:33:43.120 --> 01:33:48.030
die sollten abwärts kompatibel sein

01:33:48.030 --> 01:33:50.030
das hätte ich auch gedacht

01:33:50.030 --> 01:33:52.030
aber

01:33:52.030 --> 01:33:59.020
vielleicht doch nicht

01:33:59.020 --> 01:34:01.020
was ist denn wenn ich hier irgendeinen mist angebe

01:34:01.020 --> 01:34:03.020
und dann ausführe

01:34:03.020 --> 01:34:05.020
run

01:34:05.020 --> 01:34:08.850
dann sagt er method not supported

01:34:08.850 --> 01:34:10.850
habe ich das richtige

01:34:10.850 --> 01:34:12.850
runtergeladen

01:34:12.850 --> 01:34:14.850
habe ich irgendeinen mist runtergeladen

01:34:14.850 --> 01:34:16.850
ffm pack

01:34:16.850 --> 01:34:18.850
der findet es offensichtlich ja auch

01:34:18.850 --> 01:34:20.850
okay wir machen mal kurz hier einen return rein

01:34:20.850 --> 01:34:25.120
um zu gucken ob es daran liegt

01:34:25.120 --> 01:34:27.120
hier haben wir mal irgendwie console

01:34:27.120 --> 01:34:29.120
aber irgendwas dass ich das nicht

01:34:29.120 --> 01:34:31.120
jetzt schreiben wir console

01:34:31.120 --> 01:34:33.120
console rightliner perfekt

01:34:33.120 --> 01:34:35.120
was

01:34:35.120 --> 01:34:37.120
das artet schon wieder aus

01:34:37.120 --> 01:34:39.120
warum muss das alles warum kann das einfach nicht funktionieren

01:34:39.120 --> 01:34:44.480
pack w

01:34:44.480 --> 01:34:46.480
wieso der max von youtube erwischt

01:34:46.480 --> 01:34:51.330
jetzt kann ich mich nicht mehr

01:34:51.330 --> 01:34:56.050
raus reden

01:34:56.050 --> 01:34:58.050
warum geht das

01:34:58.050 --> 01:35:00.050
okay also bis hierhin funzt alles

01:35:00.050 --> 01:35:02.050
aber dann crasht das hier

01:35:02.050 --> 01:35:04.050
aus irgendwelchen gründen

01:35:04.050 --> 01:35:06.050
das könnte aber auch woanders ran liegen

01:35:06.050 --> 01:35:08.050
fuck it alter

01:35:08.050 --> 01:35:12.830
der crash

01:35:12.830 --> 01:35:14.830
okay der crasht

01:35:14.830 --> 01:35:16.830
ach ich weiß warum der crasht

01:35:16.830 --> 01:35:18.830
oh ich kack noob

01:35:18.830 --> 01:35:20.830
alter es funktioniert alles

01:35:20.830 --> 01:35:22.830
guck mal hier

01:35:22.830 --> 01:35:24.830
fällt euch hier was auf

01:35:24.830 --> 01:35:29.170
entdeckt ihr hier irgendwas

01:35:29.170 --> 01:35:31.170
was im container so garantiert nicht funktionieren kann

01:35:33.170 --> 01:35:35.170
der liest einfach hardcoded

01:35:35.170 --> 01:35:37.170
von meinem lokalen rtsp server

01:35:37.170 --> 01:35:39.170
was das kann ja so nicht funktionieren

01:35:39.170 --> 01:35:41.170
das gibt es ja da gar nicht

01:35:41.170 --> 01:35:43.170
mein error handling ist absolut erste sahne

01:35:43.170 --> 01:35:45.170
der handelt einfach gar keine errors

01:35:45.170 --> 01:35:47.170
und

01:35:47.170 --> 01:35:49.170
und sagen wir mal so

01:35:49.170 --> 01:35:51.170
so sollte man das ja auch nicht machen

01:35:51.170 --> 01:35:53.170
das sollte normalerweise ein ordentlicher background service sein

01:35:53.170 --> 01:35:55.170
der sich auch bei fehlern neu startet

01:35:55.170 --> 01:35:57.170
und sowas

01:35:57.170 --> 01:35:59.170
das machen wir dann noch

01:35:59.170 --> 01:36:01.170
okay ich lasse es jetzt erstmal so wie es ist

01:36:01.170 --> 01:36:03.170
mein docker container funktioniert auf jeden fall

01:36:03.170 --> 01:36:05.170
jetzt

01:36:05.170 --> 01:36:07.170
jetzt funktioniert er

01:36:07.170 --> 01:36:09.170
also funktionieren bedeutet er crasht

01:36:09.170 --> 01:36:12.990
okay ja aber aber

01:36:12.990 --> 01:36:14.990
aber es funktioniert

01:36:14.990 --> 01:36:18.560
also der docker container ist korrekt

01:36:18.560 --> 01:36:20.560
ich kann euch das auch beweisen

01:36:20.560 --> 01:36:22.560
dass der funktioniert

01:36:22.560 --> 01:36:26.700
wir machen hier einfach mal ein

01:36:26.700 --> 01:36:30.020
kann man hier eigentlich return machen direkt

01:36:30.020 --> 01:36:32.020
ne ein return rein

01:36:32.020 --> 01:36:34.020
und ihr seht

01:36:34.020 --> 01:36:36.020
zack es läuft

01:36:36.020 --> 01:36:38.020
bam

01:36:38.020 --> 01:36:40.020
ah wir brauchen noch was

01:36:40.020 --> 01:36:42.020
wir müssen die interfaces

01:36:42.020 --> 01:36:44.020
überschreiben wo er dran bindet

01:36:44.020 --> 01:36:46.020
und zwar

01:36:46.020 --> 01:36:49.840
und zwar

01:36:49.840 --> 01:36:51.840
asp.net core environment variables

01:36:51.840 --> 01:36:53.840
für den port

01:37:02.240 --> 01:37:06.000
das da will ich haben

01:37:06.000 --> 01:37:08.000
minus minus urls

01:37:08.000 --> 01:37:10.000
command line argument

01:37:10.000 --> 01:37:12.000
okay das ist auch gut

01:37:12.000 --> 01:37:14.000
minus minus urls

01:37:14.000 --> 01:37:16.000
also da wollen wir dann haben

01:37:16.000 --> 01:37:18.000
soll listen an http

01:37:18.000 --> 01:37:20.000
doppelt punkt doppelt sternchen

01:37:20.000 --> 01:37:22.000
punkt und jetzt brauchen wir mal irgendeine

01:37:22.000 --> 01:37:24.000
port hier keine ahnung 80

01:37:24.000 --> 01:37:26.000
44

01:37:26.000 --> 01:37:29.700
funst nice

01:37:29.700 --> 01:37:31.700
okay da muss das noch

01:37:31.700 --> 01:37:33.700
als command in unseren docker container

01:37:33.700 --> 01:37:35.700
rein

01:37:35.700 --> 01:37:37.700
jetzt sind wir mal

01:37:37.700 --> 01:37:39.700
so frei

01:37:39.700 --> 01:37:41.700
und kommentieren den ganzen media

01:37:41.700 --> 01:37:43.700
krempel aus

01:37:43.700 --> 01:37:45.700
gehen wir mal in das docker

01:37:45.700 --> 01:37:47.700
file rein und sagen am ende

01:37:47.700 --> 01:37:59.200
cmd

01:37:59.200 --> 01:38:01.200
ja also das würde

01:38:01.200 --> 01:38:03.200
würde höchst wahrscheinlich

01:38:03.200 --> 01:38:05.200
das ist das docker container

01:38:05.200 --> 01:38:16.380
ok

01:38:16.380 --> 01:38:18.380
ok

01:38:18.380 --> 01:38:22.850
ok

01:38:22.850 --> 01:38:24.850
ok

01:38:24.850 --> 01:38:26.850
ok

01:38:26.850 --> 01:38:28.850
ok

01:38:28.850 --> 01:38:32.540
ok

01:38:32.540 --> 01:38:34.540
ok

01:38:34.540 --> 01:38:36.540
ok

01:38:36.540 --> 01:38:38.540
ok

01:38:38.540 --> 01:38:40.540
ok

01:38:40.540 --> 01:38:42.540
ok

01:38:42.540 --> 01:38:44.540
ok

01:38:44.540 --> 01:39:14.540
ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok ok

01:39:14.540 --> 01:39:15.660
Das sackt halt, ne?

01:39:16.020 --> 01:39:16.940
Okay, probieren wir mal aus.

01:39:17.040 --> 01:39:19.400
Docker, Run, CamChamp.

01:39:19.960 --> 01:39:20.620
Schauen wir mal, ob es geht.

01:39:21.420 --> 01:39:22.080
Zack, Funst.

01:39:22.500 --> 01:39:24.720
Docker-Image tut.

01:39:31.170 --> 01:39:36.350
So, ein weiterer Punkt, warum es eine blöde Idee ist, so ein Docker-Image zu bauen.

01:39:37.010 --> 01:39:38.550
Euch fällt hier vielleicht was auf.

01:39:39.250 --> 01:39:43.150
Das Docker-Image ist 3,6 Gigabyte.

01:39:44.610 --> 01:39:47.070
Ich meine, das heißt nicht, dass es nicht funktioniert.

01:39:47.070 --> 01:39:55.800
Aber ein bisschen groß ist es wahrscheinlich, ja?

01:40:03.310 --> 01:40:07.490
Du kannst dein Zeug auch in einer Pipeline bauen und die Artefakte nur in den Container kopieren.

01:40:22.320 --> 01:40:25.420
Ich wusste, dass gleich irgendjemand kommt und sowas in der Richtung erzählt.

01:40:28.810 --> 01:40:31.150
Wobei, da warst du doch sogar da, wo ich das gesagt habe.

01:40:31.550 --> 01:40:32.530
Lass mir das nicht so lassen.

01:40:34.770 --> 01:40:37.590
Also, man sieht, es ist ein bisschen doof.

01:40:39.210 --> 01:40:43.850
Ach so, du meinst, dass du irgendwie GitHub-Actions machst und dann den Output...

01:40:44.270 --> 01:40:45.650
Ja, okay, das wäre nochmal.

01:40:45.970 --> 01:40:47.710
Das wäre nochmal eine Nummer-Advancer.

01:40:47.790 --> 01:40:49.350
Das machen wir vielleicht das nächste Mal.

01:40:49.950 --> 01:40:50.650
Müssen wir mal gucken.

01:40:51.250 --> 01:40:52.890
Also, das funktioniert.

01:40:53.290 --> 01:40:56.130
Das ist allerdings, wie man sieht hier, echt sehr doof.

01:40:56.410 --> 01:40:59.970
Ja, so ein 8,6 Gigabyte Container-Image sackt ein bisschen.

01:41:00.490 --> 01:41:02.630
Ich schmeiße nochmal alle meine Container-Images weg.

01:41:03.130 --> 01:41:03.830
Das wird man gleich sehen.

01:41:03.910 --> 01:41:05.110
Da haben wir wieder 5 Gigabyte freigegeben.

01:41:05.470 --> 01:41:06.990
Und jetzt machen wir das Ganze nochmal in hübsch.

01:41:08.250 --> 01:41:09.750
Also, was ist denn...

01:41:09.750 --> 01:41:10.090
Ach ja.

01:41:10.330 --> 01:41:13.010
Was ist denn die Essenz aus dem Ganzen, was wir hier machen?

01:41:15.570 --> 01:41:16.890
Wir installieren Rust.

01:41:19.230 --> 01:41:20.350
Kompilieren die Rust-App.

01:41:21.290 --> 01:41:22.190
Wir installieren .NET.

01:41:23.130 --> 01:41:24.130
Kompilieren die .NET-App.

01:41:24.230 --> 01:41:25.890
Installieren die Abhängigkeiten für .NET.

01:41:26.530 --> 01:41:27.670
Kompilieren die .NET-App.

01:41:28.930 --> 01:41:34.530
Kopieren die Rust-Library, die wir hier oben gebaut haben, in den Output-Folder, wo dann die Anwendung drin läuft.

01:41:35.090 --> 01:41:39.710
Kopieren die Webseite in den Web-Server-Folder.

01:41:40.430 --> 01:41:41.990
Wir downloaden den FFM-Pack.

01:41:43.130 --> 01:41:44.770
Und kopieren es an die richtige Stelle.

01:41:44.970 --> 01:41:46.850
Und am Ende sagen wir, wie man das Ganze starten kann.

01:41:47.250 --> 01:41:47.350
So.

01:41:49.630 --> 01:41:49.950
Also.

01:41:49.950 --> 01:41:52.090
Das Ganze jetzt noch in schön.

01:41:52.390 --> 01:41:53.230
Und es gibt sowas.

01:41:53.530 --> 01:41:54.510
Also, ihr habt jetzt gesehen.

01:41:55.210 --> 01:41:57.410
Chat, ich möchte, dass ihr das alle zur Kenntnis...

01:41:57.410 --> 01:41:58.670
Ach so, fuck, das Image ist weg.

01:41:58.810 --> 01:41:58.890
Okay.

01:41:59.330 --> 01:42:05.970
Dass ihr das alle zur Kenntnis genommen habt, dass das Image, wenn man das so baut, 3,6 Gigabyte groß ist.

01:42:07.450 --> 01:42:08.450
Chat, noted.

01:42:08.650 --> 01:42:09.830
Das wird nachher abgefragt.

01:42:12.790 --> 01:42:14.430
Da gibt es doch so ein nice noted Emote.

01:42:15.050 --> 01:42:15.110
Ja.

01:42:17.600 --> 01:42:19.580
Habt ihr das noted alle, ja?

01:42:20.420 --> 01:42:22.040
Dass es 3,6 Gigabyte ist.

01:42:22.040 --> 01:42:23.380
Dass es keine so gute Idee ist.

01:42:23.720 --> 01:42:28.460
Die .NET-App ist wahrscheinlich recht groß.

01:42:28.580 --> 01:42:29.620
Nee, die ist...

01:42:29.620 --> 01:42:32.460
Das ist ja sogar eine Framework-dependent-App.

01:42:33.280 --> 01:42:34.040
Die ist nicht groß.

01:42:34.160 --> 01:42:35.840
Die ist, keine Ahnung, 10 MB oder sowas.

01:42:37.760 --> 01:42:38.040
Okay.

01:42:38.300 --> 01:42:39.600
Der Chat hat genoted.

01:42:39.780 --> 01:42:40.180
Alles klar.

01:42:40.760 --> 01:42:45.860
So, und das ist natürlich doof, weil die Images fressen halt...

01:42:45.860 --> 01:42:47.620
Das ist deutlich zu groß.

01:42:47.840 --> 01:42:50.620
Die Images fressen halt Speicher in der Registry.

01:42:51.160 --> 01:42:54.340
Wenn das auch etwas optimierter da drinnen gespeichert wird.

01:42:54.340 --> 01:42:56.340
Aber auch die Bildzeiten sind relativ...

01:42:56.440 --> 01:43:00.160
relativ groß, weil ab jedem Step, wenn sich hier etwas ändert, muss das ganze Ding neu

01:43:00.160 --> 01:43:01.160
durchlaufen werden.

01:43:01.160 --> 01:43:06.580
Und dementsprechend sind natürlich auch die Updates zu den Images, die Diffs, relativ

01:43:06.580 --> 01:43:07.580
groß.

01:43:07.580 --> 01:43:11.940
Selbst wenn ihr nicht jedes Mal ein komplett neues Image speichert, der cached sich ja

01:43:11.940 --> 01:43:12.940
nur die Stages.

01:43:12.940 --> 01:43:18.760
Das heißt, eure Image-Registry wird über kurz oder lang echt viel Geld kosten, wenn

01:43:18.760 --> 01:43:22.080
ihr nur solche Images reinhaut oder wenn ihr die selbst hostet, dann...

01:43:22.080 --> 01:43:25.200
Na gut, ihr könnt es auch bei GitHub hosten, da weiß ich nicht, ab wann die was berechnen.

01:43:25.200 --> 01:43:26.200
Haha.

01:43:26.440 --> 01:43:30.800
Ist auf jeden Fall keine gute Idee, weil es dauert alles länger und suckt.

01:43:30.800 --> 01:43:35.280
Deswegen gibt es bei Docker sowas, das nennt sich Multistage-Build.

01:43:35.280 --> 01:43:37.580
Die Idee dahinter ist folgendes.

01:43:37.580 --> 01:43:44.480
Man macht nicht nur ein Image, sondern man macht für jeden Build-Step, der ein bisschen

01:43:44.480 --> 01:43:48.560
komplexer ist und Caching braucht, einen eigenen...

01:43:48.560 --> 01:43:55.640
Ja, Build-Step mit eigenem Image draus und ganz am Ende macht man dann ein Image, wo

01:43:55.640 --> 01:44:01.040
man die Sachen aus den vorherigen Build-Steps reinkopiert und das wird dann das Image, was

01:44:01.040 --> 01:44:05.520
am Ende rausfällt und von Docker gestartet wird oder von Kubernetes oder von irgendeiner

01:44:05.520 --> 01:44:06.520
Container-Runtime.

01:44:06.520 --> 01:44:10.760
Hat den Vorteil, diesen ganzen Mist hier von...

01:44:10.760 --> 01:44:15.480
Wir müssen Rust runterladen, wir brauchen hier komplettes Ding, wir brauchen Rust-Abhängigkeiten

01:44:15.480 --> 01:44:21.680
von 1,2 Gigabyte, fällt weg, die fallen nur im Build-Prozess an, im eigentlichen Output-Image

01:44:21.680 --> 01:44:22.800
sind die dann nicht mehr drinne.

01:44:22.800 --> 01:44:23.800
Was wir im Output-Image brauchen und warum unsere Output-Image nicht mehr drin ist, ist,

01:44:23.800 --> 01:44:24.800
dass...

01:44:24.800 --> 01:44:28.520
Was wir brauchen und warum unsere Output-Image doch immer noch ein bisschen größer ist...

01:44:28.520 --> 01:44:31.680
Ja gut, ist das hier, FFmpeg.

01:44:31.680 --> 01:44:36.240
Aber auch FFmpeg kann gecached werden, weil FFmpeg-Updaten wir ja nicht laufen, sondern

01:44:36.240 --> 01:44:39.340
immer nur dann, wenn es notwendig ist.

01:44:39.340 --> 01:44:47.320
Also, würde ich sagen, legen wir mal los und bauen da mal ein Multistage-Build draus.

01:44:47.320 --> 01:44:56.280
Ich würde vorschlagen, das erste, was wir machen ist, wir benennen das mal um, dass

01:44:56.280 --> 01:44:57.280
wir abgucken können.

01:44:57.280 --> 01:45:03.880
Docker-File-Old.

01:45:03.880 --> 01:45:05.160
Docker-File-New.

01:45:05.160 --> 01:45:06.160
Alles klar.

01:45:06.160 --> 01:45:12.440
So, das erste, was wir machen ist, wir gucken mal nach dem offiziellen Rust-Image, weil

01:45:12.440 --> 01:45:17.880
dieser Step hier gefällt mir beispielsweise überhaupt nicht, dass wir unser eigenes Rust

01:45:17.880 --> 01:45:18.880
installieren müssen.

01:45:18.880 --> 01:45:24.160
Und wenn wir eh schon mehrere Images verwenden und unser Image beim Bauen nicht gleich dem

01:45:24.160 --> 01:45:30.200
Output-Image ist, können wir einfach auch das offizielle Rust-Image verwenden.

01:45:30.200 --> 01:45:37.600
Und wir wollen...

01:45:37.600 --> 01:45:38.600
Rust-174-Build.

01:45:38.600 --> 01:45:39.600
Okay.

01:45:39.600 --> 01:45:40.600
Gut.

01:45:40.600 --> 01:45:41.600
Bookworm.

01:45:41.600 --> 01:45:42.600
Wollen wir haben.

01:45:42.600 --> 01:45:43.600
Das ist gut.

01:45:43.600 --> 01:45:44.600
174.

01:45:44.600 --> 01:45:45.600
Also.

01:45:45.600 --> 01:45:53.000
Wir benutzen jetzt nicht Debian, sondern wir benutzen Rust 1.74 Bookworm.

01:45:53.000 --> 01:45:56.720
Das ist zufälligerweise auch ein Debian, aber das ist echt nur Zufall.

01:45:56.720 --> 01:45:57.720
Müsste nicht sein.

01:45:57.720 --> 01:46:02.780
So, und wir müssen jetzt auch kein Slim-Image oder sonst was verwenden, weil wir kopieren

01:46:02.780 --> 01:46:04.920
ja den Output rüber und wir verwenden das Image-Guide.

01:46:04.920 --> 01:46:09.720
Also, wir könnten ein super fettes Image haben zum Bauen, wovon wir eigentlich am Ende

01:46:09.720 --> 01:46:12.720
in dem Target-Image gar nichts verwenden.

01:46:12.720 --> 01:46:14.720
So, Work-Dir-Build ist glaube ich okay.

01:46:14.720 --> 01:46:19.720
Ähm.

01:46:19.720 --> 01:46:20.720
Update.

01:46:20.720 --> 01:46:21.720
Updaten.

01:46:21.720 --> 01:46:22.720
Können wir uns schenken.

01:46:22.720 --> 01:46:23.720
Ha.

01:46:23.720 --> 01:46:26.720
Wer braucht geupdatetes Image?

01:46:26.720 --> 01:46:30.560
Install.

01:46:30.560 --> 01:46:37.560
WGAT werden wir weiterhin brauchen, weil wir ja noch FFM-Pack irgendwo runterladen müssen.

01:46:37.560 --> 01:46:40.560
Das Curl können wir uns schenken.

01:46:40.560 --> 01:46:43.560
Output kopieren.

01:46:43.560 --> 01:46:45.560
Das müssen wir in der Tat machen.

01:46:45.560 --> 01:46:46.560
Und...

01:46:46.560 --> 01:46:53.290
Wir können uns aber...

01:46:53.290 --> 01:46:54.290
Ne, wobei, ist eigentlich gut.

01:46:54.290 --> 01:46:55.290
Wir können Cargo-Build machen nur noch, weil wir jetzt das offizielle Image benutzen.

01:46:55.290 --> 01:46:56.290
Da ist Cargo im Path.

01:46:56.290 --> 01:46:57.290
Kann er ohne Update überhaupt die Pakete finden?

01:46:57.290 --> 01:46:58.290
Wir installieren...

01:46:58.290 --> 01:46:59.290
Achso, ja, du hast recht.

01:46:59.290 --> 01:47:00.290
Das könnte sein, dass das ein Problem macht.

01:47:00.290 --> 01:47:01.290
Er würde eigentlich von ausgehen, dass das geht, aber...

01:47:01.290 --> 01:47:02.290
Ja.

01:47:02.290 --> 01:47:03.290
Ja, du hast recht.

01:47:03.290 --> 01:47:04.290
Ja, wir lassen es drin.

01:47:04.290 --> 01:47:05.290
Ja, ihr habt...

01:47:05.290 --> 01:47:06.290
Ihr habt recht.

01:47:06.290 --> 01:47:07.290
Wir lassen es.

01:47:07.290 --> 01:47:08.290
Wir lassen es.

01:47:08.290 --> 01:47:09.290
Wir lassen es.

01:47:09.290 --> 01:47:10.290
Wir lassen es.

01:47:10.290 --> 01:47:11.290
Wir lassen es.

01:47:11.290 --> 01:47:12.290
Wir lassen es.

01:47:12.290 --> 01:47:17.360
Wir lassen es.

01:47:17.360 --> 01:47:18.360
Wir lassen es.

01:47:18.360 --> 01:47:19.360
Wir lassen es.

01:47:19.360 --> 01:47:20.360
Wir lassen es.

01:47:20.360 --> 01:47:21.360
Wir lassen es.

01:47:21.360 --> 01:47:22.360
Wir lassen es.

01:47:22.360 --> 01:47:25.370
Ja, wir lassen es drin.

01:47:25.370 --> 01:47:26.370
Ja, ihr habt...

01:47:26.370 --> 01:47:27.370
Ihr habt recht.

01:47:27.370 --> 01:47:28.370
Wir lassen es drin.

01:47:28.370 --> 01:47:31.730
So, das können wir uns erstmal schenken hier.

01:47:31.730 --> 01:47:32.730
Wir machen das mal weg hier.

01:47:32.730 --> 01:47:33.730
Bam.

01:47:33.730 --> 01:47:34.730
So, wir haben es ja da drüben noch stehen.

01:47:34.730 --> 01:47:35.730
So, Cargo-Build-Release.

01:47:35.730 --> 01:47:39.410
Bis zu dem Step sollte das jetzt eigentlich schon durchlaufen.

01:47:39.410 --> 01:47:43.110
Probieren wir mal aus.

01:47:43.110 --> 01:47:49.030
Ob das jetzt funzt.

01:47:49.030 --> 01:47:50.030
Docker-Build.

01:47:50.030 --> 01:47:51.030
Ah.

01:47:51.030 --> 01:47:56.680
Sieht eigentlich schon mal ganz gut aus.

01:47:56.680 --> 01:47:58.220
Okay, das ist nur Update aktuell.

01:47:58.220 --> 01:48:10.560
Und warum macht der jetzt so Pause-Champ?

01:48:10.560 --> 01:48:14.990
Warum pausiert Champ das gerade so?

01:48:14.990 --> 01:48:15.990
Upget?

01:48:15.990 --> 01:48:17.990
Ach ne, das war doch das Docker-Image-Pull.

01:48:17.990 --> 01:48:18.990
Ach so.

01:48:18.990 --> 01:48:23.490
Aber guck mal, Cargo-Build funktioniert jetzt.

01:48:23.490 --> 01:48:25.310
Direkt out of the box.

01:48:25.310 --> 01:48:28.910
Ohne dass man irgendwie einen Handstand machen muss, dass es funktioniert.

01:48:28.910 --> 01:48:30.490
Alter, meine Kiste.

01:48:30.490 --> 01:48:31.490
Guckt euch das mal an.

01:48:31.490 --> 01:48:32.490
Die Feuerwehr ist jetzt...

01:48:32.490 --> 01:48:33.490
Die Feuerwehr ist jetzt...

01:48:33.490 --> 01:48:34.370
Die Feuerwehr ist jetzt...

01:48:34.370 --> 01:48:37.070
Die Feuerwehr ist jetzt einfach mal komplett ausgelastet, wenn Rust baut.

01:48:37.070 --> 01:48:41.230
Blazingly fast compile stellst.

01:48:41.230 --> 01:48:52.260
Blazingly fast, aber CPU intensive.

01:48:52.260 --> 01:49:00.070
Ja, das stimmt schon.

01:49:00.070 --> 01:49:03.810
Sobald es jetzt in Docker läuft, wir könnten es ja theoretisch auch irgendwie limitieren.

01:49:03.810 --> 01:49:04.810
Aber wozu?

01:49:04.810 --> 01:49:05.810
Aber wozu?

01:49:05.810 --> 01:49:06.810
Exporting Layers.

01:49:06.810 --> 01:49:08.310
Okay, das ist noch kein...

01:49:08.310 --> 01:49:10.390
Es hat jetzt bis jetzt noch nicht viel gebracht.

01:49:10.390 --> 01:49:14.830
Weil wir haben ja noch kein Target-Image.

01:49:14.830 --> 01:49:15.830
Wir haben jetzt so...

01:49:15.830 --> 01:49:16.830
Okay, das ist der...

01:49:16.830 --> 01:49:17.830
Das ist der Build-Step für...

01:49:17.830 --> 01:49:18.830
Ja.

01:49:18.830 --> 01:49:40.830
für für rast ich würde sagen wir machen in dem gleichen step die die ffm pack geschichte weil

01:49:40.830 --> 01:49:47.430
sonst muss ich ja jede bei jeder änderung die machen wir übrigens auch davor uns müsste sich

01:49:47.430 --> 01:49:52.670
ja bei jeder änderung quasi in rust jetzt wieder neu ffm pack runterladen das ist natürlich auch

01:49:52.670 --> 01:50:12.670
nicht nicht irgendwie sinn und zweck der sache aber mal hier ran bewegt ffm pack wir können das

01:50:12.670 --> 01:50:20.710
auch in einem in eigenem step aus also wie er wehrt ffm pack und dann wird ffm pack umbenannt

01:50:20.710 --> 01:50:32.360
in vielleicht sollte ich das nicht einfach nur ffm pack nennen sondern ffm pack wie heißt der kram

01:50:35.720 --> 01:50:47.820
ffm pack minus n sehr schön so das können wir machen gut so das ist der erste bild step

01:50:47.820 --> 01:50:53.760
also ffm pack runterladen ffm pack entpacken rast zeug kompilieren und jetzt kommt der trick

01:50:53.760 --> 01:51:01.920
beim multistage bild für den dotnet part machen wir ein neues bild image also wieder from jetzt

01:51:01.920 --> 01:51:14.050
muss ich mal gucken dotnet docker images sdk brauchen wir jetzt genau

01:51:15.610 --> 01:51:37.680
sdk from mcr das ist die microsoft docker sdk 8.0 muss dahinter als versions tag wenn ich jetzt

01:51:37.680 --> 01:51:43.140
wüsste welche versions tag es gebe wäre schon sehr nice sieht man das wenn man hier drauf geht

01:51:43.140 --> 01:51:53.280
nein das wäre auch deutlich zu einfach microsoft wenn das funktionieren würde feature tags wird

01:51:53.280 --> 01:51:54.920
trotzdem ganz nice zu wissen was es ist

01:51:55.440 --> 01:52:09.560
sonst noch gibt die haben garantiert noch mehr tags naja gut scheiß drauf wir machen es wir machen so

01:52:09.560 --> 01:52:17.660
das ding nennen wir jetzt okay dass das heißt nicht bild sondern das heißt rast und das hier

01:52:17.660 --> 01:52:23.840
heißt dotnet weil das dienst die namen brauche später weil man die dateien von den einzelnen

01:52:23.840 --> 01:52:34.060
steps raus kopieren wollen aber immer hier kommen sie immer so was okay bild rast nächster step

01:52:34.240 --> 01:52:44.860
bild dotnet so microsoft image wird gepublikiert und jetzt wir machen wieder wird wird dir bild

01:52:44.860 --> 01:52:55.120
weil warum nicht so und jetzt können wir diesen kram hierüber kopieren said noiss Asko diesen

01:52:55.120 --> 01:53:00.830
kram hierüber kopieren copy und jetzt kommt sich die dinge auch nicht mehr in die quere

01:53:00.830 --> 01:53:05.750
dass hier ist ein eigener container mal bilden und das hier ist ein ein eigener container munter

01:53:05.930 --> 01:53:08.570
okay, jetzt wird das Ganze wieder

01:53:08.570 --> 01:53:10.650
.NET run, .NET

01:53:10.650 --> 01:53:12.230
haben wir es noch hier, publish

01:53:12.230 --> 01:53:19.320
okay, da ist, zack

01:53:19.320 --> 01:53:21.660
das können wir uns

01:53:21.660 --> 01:53:23.480
auch sparen, weil

01:53:23.480 --> 01:53:25.640
.NET garantiert im .NET Container

01:53:25.640 --> 01:53:26.640
verfügbar sein wird

01:53:26.640 --> 01:53:29.740
werden die ganzen Stages nacheinander gleichzeitig

01:53:29.740 --> 01:53:31.520
abgearbeitet, gleichzeitig

01:53:31.520 --> 01:53:33.700
es sei denn, die eine hat Abhängigkeit

01:53:33.700 --> 01:53:35.660
auf die andere, das ist relativ

01:53:35.660 --> 01:53:37.500
schlau, mittlerweile

01:53:37.500 --> 01:53:39.420
die ganze Buildkit, Docker

01:53:39.420 --> 01:53:41.520
Buildgeschichte, du wirst

01:53:41.520 --> 01:53:43.420
du wirst gleich sehen, der macht das parallel

01:53:43.420 --> 01:53:45.000
es sei denn, es hängt voneinander ab

01:53:45.000 --> 01:53:49.070
oh ja, gut, und wenn sie unterschiedlich schnell sind

01:53:49.070 --> 01:53:51.150
dann sieht es halt auch nicht parallel

01:53:51.150 --> 01:53:52.870
aus, aber sie sind parallel, okay

01:53:52.870 --> 01:53:54.790
.NET publish, .NET release

01:53:54.790 --> 01:53:57.090
Output, eigentlich

01:53:57.090 --> 01:53:58.950
kann ich mir das komplett schenken, den

01:53:58.950 --> 01:54:01.010
Output, das kann ruhig das Default Verzeichnis

01:54:01.010 --> 01:54:02.790
sein, das ist okay

01:54:02.790 --> 01:54:05.970
okay, und jetzt

01:54:05.970 --> 01:54:08.510
kommt der eigentliche Trick

01:54:08.510 --> 01:54:10.550
jetzt kann man unten nochmal sagen

01:54:10.550 --> 01:54:11.810
hier, wieso

01:54:11.810 --> 01:54:14.310
App oder so, nennen wir es einfach mal

01:54:14.310 --> 01:54:14.770
App

01:54:14.770 --> 01:54:16.530
so, und jetzt sagen wir

01:54:16.530 --> 01:54:18.610
From, jetzt brauchen wir das Microsoft Image

01:54:18.610 --> 01:54:19.270
für

01:54:19.270 --> 01:54:21.750
ASP.NET Core

01:54:21.750 --> 01:54:23.310
hier, das da, brauchen wir

01:54:23.310 --> 01:54:34.090
wahrscheinlich einfach nur das, Moment, ach nicht Runtime

01:54:34.090 --> 01:54:35.370
ASP.NET, da ist doch

01:54:35.370 --> 01:54:42.250
genau, From, so, S

01:54:42.250 --> 01:54:44.410
GachiBus

01:54:44.410 --> 01:54:46.630
also Runtime oder sowas

01:54:46.630 --> 01:54:48.330
keine Ahnung, ich glaube Microsoft

01:54:48.330 --> 01:54:49.470
nennt das Zeug immer Runtime

01:54:49.470 --> 01:54:52.730
so, WorkDir

01:54:52.730 --> 01:54:52.770
so

01:54:52.770 --> 01:54:52.930
so

01:54:52.930 --> 01:54:52.950
so

01:54:52.950 --> 01:54:52.970
so

01:54:52.970 --> 01:54:52.990
so

01:54:52.990 --> 01:54:53.010
so

01:54:53.010 --> 01:54:53.030
so

01:54:53.030 --> 01:54:53.050
so

01:54:53.050 --> 01:54:53.070
so

01:54:53.070 --> 01:54:53.110
so

01:54:53.110 --> 01:54:53.130
so

01:54:53.130 --> 01:54:53.150
so

01:54:53.150 --> 01:54:53.170
so

01:54:53.170 --> 01:54:53.190
so

01:54:53.190 --> 01:54:53.230
so

01:54:53.230 --> 01:54:53.250
so

01:54:53.250 --> 01:54:53.270
so

01:54:53.270 --> 01:54:53.310
so

01:54:53.310 --> 01:54:53.350
so

01:54:54.290 --> 01:54:54.630
so

01:54:54.630 --> 01:54:54.650
so

01:54:54.650 --> 01:54:54.690
so

01:54:54.690 --> 01:54:54.730
so

01:54:54.730 --> 01:54:54.750
so

01:54:54.750 --> 01:54:54.790
so

01:54:54.790 --> 01:54:54.830
so

01:54:54.830 --> 01:54:54.850
so

01:54:54.850 --> 01:54:54.870
so

01:54:54.870 --> 01:54:54.890
so

01:54:54.890 --> 01:54:54.910
so

01:54:54.910 --> 01:54:54.930
so

01:54:54.930 --> 01:54:54.950
so

01:54:54.950 --> 01:54:54.970
so

01:54:54.970 --> 01:54:54.990
so

01:54:54.990 --> 01:54:55.010
so

01:54:55.010 --> 01:54:55.030
so

01:54:55.030 --> 01:54:55.050
so

01:54:55.050 --> 01:54:55.070
so

01:54:55.070 --> 01:54:55.130
so

01:54:55.130 --> 01:54:55.150
so

01:54:55.150 --> 01:54:55.170
so

01:54:55.170 --> 01:54:55.190
so

01:54:55.190 --> 01:54:55.210
so

01:54:55.210 --> 01:54:55.230
so

01:54:55.230 --> 01:54:55.250
so

01:54:55.250 --> 01:54:55.270
so

01:54:55.270 --> 01:54:55.290
so

01:54:55.290 --> 01:54:55.310
so

01:54:55.310 --> 01:54:55.330
so

01:54:55.330 --> 01:54:55.350
so

01:54:55.350 --> 01:54:55.370
so

01:54:55.370 --> 01:54:55.390
so

01:54:55.390 --> 01:54:55.430
so

01:54:55.430 --> 01:54:55.450
so

01:54:55.450 --> 01:54:55.470
so

01:54:55.470 --> 01:54:55.490
so

01:54:55.490 --> 01:54:55.510
so

01:54:55.510 --> 01:54:55.530
so

01:54:55.530 --> 01:54:55.550
so

01:54:55.550 --> 01:54:55.570
so

01:54:55.570 --> 01:54:55.590
so

01:54:55.590 --> 01:54:55.610
so

01:54:55.610 --> 01:54:55.630
so

01:54:55.630 --> 01:54:55.650
so

01:54:55.650 --> 01:54:55.670
so

01:54:55.670 --> 01:54:55.710
so

01:54:55.710 --> 01:54:55.730
so

01:54:55.730 --> 01:54:55.750
so

01:54:55.750 --> 01:54:55.770
so

01:54:55.770 --> 01:54:55.790
so

01:54:55.790 --> 01:54:57.870
so

01:54:57.870 --> 01:54:57.890
so

01:54:57.890 --> 01:54:57.910
so

01:54:57.910 --> 01:54:57.930
so

01:54:57.930 --> 01:54:57.950
so

01:54:57.950 --> 01:54:58.010
so

01:54:58.010 --> 01:54:58.070
so

01:54:58.070 --> 01:54:58.110
so

01:54:58.110 --> 01:54:58.130
so

01:54:58.130 --> 01:54:58.150
so

01:54:58.150 --> 01:54:58.170
so

01:54:58.170 --> 01:54:58.190
so

01:54:58.190 --> 01:54:58.210
so

01:54:58.210 --> 01:54:58.230
so

01:54:58.230 --> 01:54:58.250
so

01:54:58.250 --> 01:54:58.270
so

01:54:58.270 --> 01:54:58.290
so

01:54:58.290 --> 01:54:58.310
so

01:54:59.470 --> 01:55:00.410
so

01:55:00.410 --> 01:55:00.430
so

01:55:02.430 --> 01:55:02.710
so

01:55:02.710 --> 01:55:02.750
so

01:55:02.750 --> 01:55:03.110
so

01:55:30.240 --> 01:55:35.820
ist schon was dran ich meine es sei denn es macht sinn dass man die einzelne cash für sich genommen

01:55:35.820 --> 01:55:52.300
aber du hast du hast recht ja ok also docker bild jetzt werdet ihr sehen als sei das kackt ab es

01:55:52.300 --> 01:55:56.920
sei es kackt ab wir müssen jetzt mehrere bilds parallel sehen nämlich einmal den rast konnte

01:55:56.920 --> 01:56:03.940
einmal den dotnet container und den output container am ende ok er pullt erst mal dass

01:56:03.940 --> 01:56:13.420
er pullt erst mal das image zack und schon ist er fertig das ging ach so doch er ist zu schlau

01:56:13.420 --> 01:56:19.000
leute doch er ist zu schlau der erkennt dass der das von diesem image nichts benutzt werden

01:56:19.000 --> 01:56:23.500
deswegen baut das nicht vermutlich ok also muss ich jetzt muss ich jetzt doch so tun als will ich

01:56:23.500 --> 01:56:29.060
was davon haben und zwar man kann jetzt also wir haben ja hier oben die dort net app die dort net

01:56:29.060 --> 01:56:33.880
app gebildet gebildet und hier die rast app und das ist mein mein ziel image das heißt

01:56:33.880 --> 01:56:40.400
im endeffekt muss ich jetzt so was machen hier wie copy und jetzt from wobei ich glaube das

01:56:40.400 --> 01:56:48.220
können wir uns sparen copy from hier den name von dem image zur bild zeit wo die dateien liegen also

01:56:48.220 --> 01:56:57.340
copy from rast slash bild weil werkt ihr splash bild und da drin gibt es jetzt ein ffm pack folder

01:57:03.880 --> 01:57:05.880
Als nächstes brauchen wir

01:57:05.880 --> 01:57:07.680
from Rust noch

01:57:07.680 --> 01:57:14.490
ja,

01:57:19.140 --> 01:57:21.500
build target release libweb

01:57:21.500 --> 01:57:23.200
rtc rust.so

01:57:23.200 --> 01:57:26.830
Soll im Prinzip hier exakt

01:57:26.830 --> 01:57:27.770
genauso heißen.

01:57:29.310 --> 01:57:30.950
Und dann brauchen wir

01:57:30.950 --> 01:57:32.850
als letzten Step noch, ich bin mir nicht

01:57:32.850 --> 01:57:34.970
sicher, ob die Reihenfolge gerade die beste

01:57:34.970 --> 01:57:36.950
ist. Und dann brauchen wir

01:57:36.950 --> 01:57:38.650
als letzten Step noch

01:57:38.650 --> 01:57:40.550
die .NET App. Und zwar

01:57:40.550 --> 01:57:42.850
jetzt ist es from .NET

01:57:42.850 --> 01:57:46.550
from .NET

01:57:46.550 --> 01:57:46.930
und jetzt

01:57:46.930 --> 01:57:48.910
kann ich mir immer nicht merken, wo dieser ganze Mist

01:57:48.910 --> 01:57:50.370
liegt. Auf jeden Fall schon mal in build.

01:57:51.090 --> 01:57:52.390
Habe ich das hier irgendwo stehen?

01:57:52.790 --> 01:57:52.910
Ne.

01:58:03.680 --> 01:58:05.600
Minus O. Ja, auch

01:58:05.600 --> 01:58:12.610
in release, aber diesen...

01:58:12.610 --> 01:58:13.970
Liegt FFmpeg nicht unter

01:58:13.970 --> 01:58:15.710
slash build slash... Ne.

01:58:17.530 --> 01:58:18.550
FFmpeg kommt hier...

01:58:18.550 --> 01:58:20.510
Achso, Moment. Wait a minute.

01:58:24.400 --> 01:58:24.840
Du hast recht.

01:58:29.400 --> 01:58:30.960
Das hätte übrigens gar nicht funktioniert an der Stelle,

01:58:30.960 --> 01:58:32.800
weil es Verzeichnis nicht gegeben hätte.

01:58:33.620 --> 01:58:35.100
So ist richtig. So ist richtig.

01:58:35.260 --> 01:58:37.180
Siehste? Chatge... HiIQ wieder.

01:58:40.540 --> 01:58:41.480
So, from build.

01:58:42.660 --> 01:58:44.000
Ich kann es mir einfach immer nicht

01:58:44.000 --> 01:58:46.100
merken, wo die .NET... .NET

01:58:46.100 --> 01:58:48.260
publish minus c release.

01:58:48.420 --> 01:58:49.160
Alles klar, gib ihm.

01:58:50.860 --> 01:58:51.120
Was?

01:58:52.440 --> 01:58:53.440
Achso, ha. Ja.

01:58:53.920 --> 01:58:57.670
Ja, ist ja gut. Nicht Docker.

01:59:04.600 --> 01:59:04.920
Okay.

01:59:07.540 --> 01:59:08.860
Bin release

01:59:08.860 --> 01:59:10.320
net 8.

01:59:10.320 --> 01:59:16.350
Publish.

01:59:20.020 --> 01:59:22.000
Bin release...

01:59:22.880 --> 01:59:24.880
net 8. Publish.

01:59:24.880 --> 01:59:30.560
All right.

01:59:30.560 --> 01:59:32.560
Bin release publish.

01:59:32.560 --> 01:59:34.560
Okay.

01:59:34.560 --> 01:59:36.560
Auch hier. Gleicher, gleicher.

01:59:36.560 --> 01:59:38.560
Soll die ganzen Crampli einfach

01:59:38.560 --> 01:59:40.560
in das Verzeichnis schmeißen.

01:59:40.560 --> 01:59:42.560
Einfach eigenen Output setzen.

01:59:42.560 --> 01:59:44.560
Ja, das wäre auch eine Möglichkeit.

01:59:44.560 --> 01:59:46.560
So, und als letztes kopieren

01:59:46.560 --> 01:59:48.560
wir noch von

01:59:48.560 --> 01:59:50.560
backend www...

01:59:50.560 --> 01:59:52.560
Das da machen wir

01:59:52.560 --> 01:59:54.560
im Endeffekt. Moment, das machen wir nicht. www root

01:59:54.560 --> 01:59:56.560
nach www root.

01:59:56.560 --> 02:00:00.710
Alles klar.

02:00:00.710 --> 02:00:02.710
So.

02:00:02.710 --> 02:00:04.710
Das cmd sparen wir uns jetzt mal.

02:00:04.710 --> 02:00:06.710
Ich hoffe, das funzt jetzt. Docker build. Bam.

02:00:06.710 --> 02:00:08.710
Guck, man sieht,

02:00:08.710 --> 02:00:10.710
er macht die Sachen auch parallel. Hier oben

02:00:10.710 --> 02:00:12.710
ist er am .NET Image. Hier unten ist er am Rust Image.

02:00:12.710 --> 02:00:19.220
.

02:00:19.220 --> 02:00:21.220
.

02:00:21.220 --> 02:00:23.220
Guck, hier oben lädt er noch das .NET Image runter.

02:00:23.220 --> 02:00:25.220
Hier unten baut er schon Rust. Also es geht bis zu dem Punkt

02:00:25.220 --> 02:00:27.220
parallel. Das letzte, das Output

02:00:27.220 --> 02:00:29.220
Image kann er natürlich nicht parallel bauen, weil

02:00:29.220 --> 02:00:31.220
das Abhängigkeiten zu diesen beiden Images hat.

02:00:31.220 --> 02:00:36.320
.

02:00:36.320 --> 02:00:38.320
.

02:00:38.320 --> 02:00:40.320
.

02:00:40.320 --> 02:00:42.320
.

02:00:42.320 --> 02:00:44.320
.

02:00:44.320 --> 02:00:46.320
.

02:00:46.320 --> 02:00:48.320
.

02:00:48.320 --> 02:00:50.320
.

02:00:50.320 --> 02:00:52.320
.

02:00:52.320 --> 02:00:54.320
.

02:00:54.320 --> 02:00:56.320
.

02:00:56.320 --> 02:00:58.320
.

02:00:58.320 --> 02:01:00.320
.

02:01:00.320 --> 02:01:02.320
.

02:01:02.320 --> 02:01:06.320
.

02:01:06.320 --> 02:01:10.020
.

02:01:10.020 --> 02:01:12.020
.

02:01:12.020 --> 02:01:14.020
.

02:01:14.020 --> 02:01:16.020
.

02:01:16.020 --> 02:01:18.020
.

02:01:18.020 --> 02:01:20.020
.

02:01:20.020 --> 02:01:22.020
.

02:01:22.020 --> 02:01:24.020
.

02:01:24.020 --> 02:01:26.020
.

02:01:26.020 --> 02:01:31.510
.

02:01:31.510 --> 02:01:33.510
.

02:01:33.510 --> 02:01:35.510
.

02:01:35.510 --> 02:01:39.510
.

02:01:39.510 --> 02:01:41.510
.

02:01:41.510 --> 02:01:43.510
.

02:01:43.510 --> 02:01:45.510
.

02:01:45.510 --> 02:01:47.510
.

02:01:47.510 --> 02:01:49.510
.

02:01:49.510 --> 02:01:53.840
.

02:01:53.840 --> 02:01:55.840
.

02:01:55.840 --> 02:01:57.840
.

02:01:57.840 --> 02:01:59.840
.

02:01:59.840 --> 02:02:01.840
.

02:02:01.840 --> 02:02:03.840
.

02:02:03.840 --> 02:02:05.840
.

02:02:05.840 --> 02:02:07.840
.

02:02:07.840 --> 02:02:09.840
.

02:02:09.840 --> 02:02:11.840
.

02:02:11.840 --> 02:02:13.840
.

02:02:13.840 --> 02:02:17.480
.

02:02:17.480 --> 02:02:19.480
.

02:02:19.480 --> 02:02:21.480
.

02:02:21.480 --> 02:02:23.480
.

02:02:23.480 --> 02:02:25.480
.

02:02:25.480 --> 02:02:27.480
.

02:02:27.480 --> 02:02:29.480
.

02:02:29.480 --> 02:02:31.480
.

02:02:31.480 --> 02:02:33.480
.

02:02:33.480 --> 02:02:35.480
.

02:02:35.480 --> 02:02:41.480
.

02:02:41.480 --> 02:02:43.480
.

02:02:43.480 --> 02:02:45.480
.

02:02:45.480 --> 02:02:47.480
.

02:02:47.480 --> 02:02:49.480
.

02:02:49.480 --> 02:02:53.480
.

02:02:53.480 --> 02:02:55.480
.

02:02:55.480 --> 02:02:57.480
.

02:02:57.480 --> 02:02:59.480
.

02:02:59.480 --> 02:03:01.480
.

02:03:01.480 --> 02:03:05.430
.

02:03:05.430 --> 02:03:07.430
.

02:03:07.430 --> 02:03:09.430
.

02:03:09.430 --> 02:03:11.430
.

02:03:11.430 --> 02:03:13.430
.

02:03:13.430 --> 02:03:15.430
.

02:03:15.430 --> 02:03:17.430
.

02:03:17.430 --> 02:03:24.280
.

02:03:24.280 --> 02:03:26.280
.

02:03:26.280 --> 02:03:28.280
.

02:03:28.280 --> 02:03:30.280
.

02:03:30.280 --> 02:03:32.280
.

02:03:32.280 --> 02:03:34.280
.

02:03:34.280 --> 02:03:36.280
.

02:03:36.280 --> 02:03:41.890
.

02:03:41.890 --> 02:03:43.890
.

02:03:43.890 --> 02:03:45.890
.

02:03:45.890 --> 02:03:47.890
.

02:03:47.890 --> 02:03:49.890
.

02:03:49.890 --> 02:03:51.890
.

02:03:51.890 --> 02:03:53.890
.

02:03:53.890 --> 02:03:57.200
.

02:03:57.200 --> 02:04:05.650
.

02:04:05.650 --> 02:04:07.650
.

02:04:07.650 --> 02:04:09.650
.

02:04:09.650 --> 02:04:11.650
.

02:04:11.650 --> 02:04:13.650
.

02:04:13.650 --> 02:04:15.650
.

02:04:15.650 --> 02:04:17.650
.

02:04:17.650 --> 02:04:19.650
.

02:04:19.650 --> 02:04:21.650
.

02:04:21.650 --> 02:04:23.650
.

02:04:23.650 --> 02:04:25.650
.

02:04:25.650 --> 02:04:27.650
.

02:04:27.650 --> 02:04:29.650
.

02:04:29.650 --> 02:04:31.650
.

02:04:31.650 --> 02:04:33.650
.

02:04:33.650 --> 02:04:35.650
.

02:04:35.650 --> 02:04:37.650
.

02:04:37.650 --> 02:04:39.650
.

02:04:39.650 --> 02:04:41.650
.

02:04:41.650 --> 02:04:50.360
.

02:04:50.360 --> 02:04:52.360
.

02:04:52.360 --> 02:04:55.860
.

02:04:55.860 --> 02:04:57.860
.

02:04:57.860 --> 02:05:02.130
.

02:05:02.130 --> 02:05:04.130
.

02:05:04.130 --> 02:05:06.130
.

02:05:06.130 --> 02:05:08.130
.

02:05:08.130 --> 02:05:11.890
.

02:05:11.890 --> 02:05:15.890
.

02:05:15.890 --> 02:05:22.850
.

02:05:22.850 --> 02:05:24.850
.

02:05:24.850 --> 02:05:30.080
.

02:05:30.080 --> 02:05:32.080
.

02:05:32.080 --> 02:05:36.800
.

02:05:36.800 --> 02:05:38.800
.

02:05:38.800 --> 02:05:40.800
.

02:05:40.800 --> 02:05:42.800
.

02:05:42.800 --> 02:05:47.330
.

02:05:47.330 --> 02:05:49.330
.

02:05:49.330 --> 02:05:51.330
.

02:05:51.330 --> 02:05:53.330
.

02:05:53.330 --> 02:05:55.330
.

02:05:55.330 --> 02:05:57.330
.

02:05:57.330 --> 02:05:59.330
.

02:05:59.330 --> 02:06:03.030
.

02:06:03.030 --> 02:06:05.030
.

02:06:05.030 --> 02:06:07.030
.

02:06:07.030 --> 02:06:17.700
.

02:06:17.700 --> 02:06:23.970
.

02:06:23.970 --> 02:06:25.970
.

02:06:25.970 --> 02:06:27.970
.

02:06:27.970 --> 02:06:29.970
.

02:06:29.970 --> 02:06:31.970
.

02:06:31.970 --> 02:06:33.970
.

02:06:33.970 --> 02:06:35.970
.

02:06:35.970 --> 02:06:37.970
.

02:06:37.970 --> 02:06:41.970
.

02:06:41.970 --> 02:06:47.590
.

02:06:47.590 --> 02:06:54.160
.

02:06:54.160 --> 02:06:56.160
.

02:06:56.160 --> 02:06:58.160
.

02:06:58.160 --> 02:07:00.160
.

02:07:00.160 --> 02:07:04.690
.

02:07:04.690 --> 02:07:06.690
.

02:07:06.690 --> 02:07:12.690
.

02:07:12.690 --> 02:07:16.840
.

02:07:16.840 --> 02:07:18.840
.

02:07:18.840 --> 02:07:36.870
.

02:07:36.870 --> 02:07:41.840
.

02:07:41.840 --> 02:07:43.840
.

02:07:43.840 --> 02:07:47.840
.

02:07:47.840 --> 02:07:49.840
.

02:07:49.840 --> 02:07:51.840
.

02:07:51.840 --> 02:07:53.840
.

02:07:53.840 --> 02:07:55.840
.

02:07:55.840 --> 02:08:00.500
.

02:08:00.500 --> 02:08:02.500
.

02:08:02.500 --> 02:08:04.500
.

02:08:04.500 --> 02:08:06.500
.

02:08:06.500 --> 02:08:14.680
.

02:08:14.680 --> 02:08:23.430
.

02:08:23.430 --> 02:08:25.430
.

02:08:25.430 --> 02:08:27.430
.

02:08:27.430 --> 02:08:31.320
.

02:08:31.320 --> 02:08:35.320
.

02:08:35.320 --> 02:08:37.320
.

02:08:37.320 --> 02:08:43.440
.

02:08:43.440 --> 02:08:45.440
.

02:08:45.440 --> 02:08:50.230
.

02:08:50.230 --> 02:08:52.230
.

02:08:52.230 --> 02:08:54.230
.

02:08:54.230 --> 02:08:56.230
.

02:08:56.230 --> 02:08:58.230
.

02:08:58.230 --> 02:09:00.230
.

02:09:00.230 --> 02:09:05.010
.

02:09:05.010 --> 02:09:07.010
.

02:09:07.010 --> 02:09:09.010
.

02:09:09.010 --> 02:09:11.010
.

02:09:11.010 --> 02:09:16.960
.

02:09:16.960 --> 02:09:18.960
.

02:09:18.960 --> 02:09:20.960
.

02:09:20.960 --> 02:09:22.960
.

02:09:22.960 --> 02:09:24.960
.

02:09:24.960 --> 02:09:26.960
.

02:09:26.960 --> 02:09:30.960
.

02:09:30.960 --> 02:09:32.960
.

02:09:32.960 --> 02:09:34.960
.

02:09:34.960 --> 02:09:36.960
.

02:09:36.960 --> 02:09:38.960
.

02:09:38.960 --> 02:09:40.960
.

02:09:40.960 --> 02:09:44.920
.

02:09:44.920 --> 02:09:56.950
.

02:09:56.950 --> 02:09:58.950
.

02:09:58.950 --> 02:10:03.030
.

02:10:03.030 --> 02:10:05.030
.

02:10:05.030 --> 02:10:09.490
.

02:10:09.490 --> 02:10:11.490
.

02:10:11.490 --> 02:10:13.490
.

02:10:13.490 --> 02:10:15.490
.

02:10:15.490 --> 02:10:17.490
.

02:10:17.490 --> 02:10:19.490
.

02:10:19.490 --> 02:10:21.490
.

02:10:21.490 --> 02:10:25.250
.

02:10:25.250 --> 02:10:33.040
.

02:10:33.040 --> 02:10:35.040
.

02:10:35.040 --> 02:10:39.040
.

02:10:39.040 --> 02:10:44.400
.

02:10:44.400 --> 02:10:47.910
.

02:10:47.910 --> 02:10:49.910
.

02:10:49.910 --> 02:10:51.910
.

02:10:51.910 --> 02:10:53.910
.

02:10:53.910 --> 02:10:55.910
.

02:10:55.910 --> 02:11:01.080
.

02:11:01.080 --> 02:11:03.080
.

02:11:03.080 --> 02:11:05.080
.

02:11:05.080 --> 02:11:06.080
.

02:11:06.080 --> 02:11:07.080
.

02:11:07.080 --> 02:11:08.080
.

02:11:08.080 --> 02:11:09.080
.

02:11:09.080 --> 02:11:10.080
.

02:11:10.080 --> 02:11:11.080
.

02:11:11.080 --> 02:11:12.080
.

02:11:12.080 --> 02:11:13.080
.

02:11:13.080 --> 02:11:14.080
.

02:11:14.080 --> 02:11:15.080
.

02:11:15.080 --> 02:11:16.080
.

02:11:16.080 --> 02:11:17.080
.

02:11:17.080 --> 02:11:18.080
.

02:11:18.080 --> 02:11:19.080
.

02:11:19.080 --> 02:11:20.080
.

02:11:20.080 --> 02:11:23.670
.

02:11:23.670 --> 02:11:24.670
.

02:11:24.670 --> 02:11:25.670
.

02:11:25.670 --> 02:11:26.670
.

02:11:26.670 --> 02:11:27.670
.

02:11:27.670 --> 02:11:28.670
.

02:11:28.670 --> 02:11:29.670
.

02:11:29.670 --> 02:11:30.670
.

02:11:30.670 --> 02:11:33.750
.

02:11:33.750 --> 02:11:34.750
.

02:11:34.750 --> 02:11:35.750
.

02:11:35.750 --> 02:11:36.750
.

02:11:36.750 --> 02:11:37.750
.

02:11:37.750 --> 02:11:38.750
.

02:11:38.750 --> 02:11:39.750
.

02:11:39.750 --> 02:11:49.750
ich meine vielleicht geht es ja doch okay es geht doch easy ich habe nichts

02:11:49.750 --> 02:11:53.770
gesagt scheint doch zu funktionieren ja dann da können wir das ja auch wieder

02:11:53.770 --> 02:11:58.770
rückgängig machen ffm per clip so also ich habe jetzt den source code geändert

02:11:58.770 --> 02:12:03.010
von meiner net anwendung von der idee her sollte er dort net nur dort net

02:12:03.010 --> 02:12:21.190
bilden und neues image bauen da stimmt was nicht leute warum ist das warum ist

02:12:21.190 --> 02:12:29.900
das cash ich habe doch eindeutig hier geändert oder habe ich moment habe ich

02:12:29.900 --> 02:12:37.500
vorher einfach nicht gespeichert kann das auch sein moment moment das muss ich

02:12:37.500 --> 02:12:41.400
jetzt mal ausprobieren ich kopiere sie einfach noch ein paar

02:12:41.400 --> 02:12:46.300
mal ja okay ich habe freundlich gespeichert

02:12:46.300 --> 02:12:53.680
alles gut sehr gut gut alles klar also das sollte

02:12:53.680 --> 02:12:59.680
jetzt funktionieren ja von uns und habe gesehen wie viel schneller das jetzt

02:12:59.680 --> 02:13:04.600
bildet das image im vergleich zu vorher und wie viel kleiner das ist können

02:13:04.600 --> 02:13:08.500
wir uns mal gucken was passiert wenn ich in der also wenn ich ihn wenn ich auf

02:13:08.500 --> 02:13:12.040
der dort netz seite was ändere das jetzt relativ easy zu zeigen noch mal bumm

02:13:12.040 --> 02:13:15.940
sagt okay cash weil er hat es schon mal gebildet mit diesen drei zeilen drin

02:13:15.940 --> 02:13:21.640
so gehen wir mal in den rust path gehen wir man den rust path und ändern hier

02:13:21.640 --> 02:13:30.410
irgendwas keine ahnung ihr active connections soll jetzt unbedingt haben

02:13:30.410 --> 02:13:37.190
noch ausrufezeichen habe bild cook cargo run bild jetzt muss er nur den rust path

02:13:37.190 --> 02:13:42.090
neu bilden das dauert natürlich lang weil ras lange braucht zum kombiniert

02:13:42.090 --> 02:14:01.620
irgendjemand hat auch vorhin cargo chef angesprochen

02:14:01.620 --> 02:14:08.070
du du du du Leute ich habe eine Idee

02:14:08.070 --> 02:14:08.130
Leute ich habe eine Idee

02:14:08.150 --> 02:14:11.570
die. Gibt es so was

02:14:11.570 --> 02:14:12.510
wie Cargo

02:14:12.510 --> 02:14:14.730
Pull oder so was?

02:14:15.950 --> 02:14:17.630
Das könnte man tatsächlich noch

02:14:17.630 --> 02:14:19.510
ausbrühen. Weil man könnte

02:14:19.510 --> 02:14:20.690
jetzt ja an der Stelle

02:14:20.690 --> 02:14:22.610
Machen wir das mal wieder weg.

02:14:23.230 --> 02:14:25.610
Was macht ihr? Wir haben einen Multistage

02:14:25.610 --> 02:14:27.270
Docker-File gebaut. Also

02:14:27.270 --> 02:14:29.350
was ich mir überlegt habe ist folgendes. Guckt mal.

02:14:29.790 --> 02:14:31.470
Hier kopiere ich den Source-Code Cargo

02:14:31.470 --> 02:14:33.350
hin und mache ein Bild. Wenn ich so was

02:14:33.350 --> 02:14:35.270
machen könnte, ich weiß nicht, ob es so was gibt,

02:14:35.610 --> 02:14:37.510
ja, dann

02:14:37.510 --> 02:14:38.890
würde ich

02:14:38.890 --> 02:14:40.870
auch beim Ändern an der Go

02:14:40.870 --> 02:14:43.550
äh, was labere ich mit Go? An der Rust

02:14:43.550 --> 02:14:45.490
an einem

02:14:45.490 --> 02:14:46.370
Rust-Source-Code

02:14:46.370 --> 02:14:49.330
wenn sich nichts an den Dependencies

02:14:49.330 --> 02:14:51.250
ändert, wäre das hier

02:14:51.250 --> 02:14:53.330
gecached an der Stelle. Gibt es so was

02:14:53.330 --> 02:14:54.990
wie Docker-Pull oder so was?

02:14:55.330 --> 02:14:57.450
Oder Cargo-Pull, nicht Docker-Pull.

02:14:58.230 --> 02:14:59.070
Cargo-Pull?

02:15:01.050 --> 02:15:02.050
Was soll das tun?

02:15:02.490 --> 02:15:04.290
Alle Dependencies runterladen,

02:15:05.390 --> 02:15:05.550
die

02:15:05.550 --> 02:15:08.530
man braucht, die in der

02:15:08.530 --> 02:15:09.650
Cargo-Tommel stehen.

02:15:10.390 --> 02:15:12.390
Weiß ich, ob es so was gibt.

02:15:12.390 --> 02:15:15.390
Also bei .net heißt es Restore.

02:15:15.390 --> 02:15:17.390
Cargo-Pull? Gibt es so was?

02:15:17.390 --> 02:15:28.700
Was haben wir denn?

02:15:28.700 --> 02:15:30.700
Build. Check.

02:15:30.700 --> 02:15:35.100
Clean. New.

02:15:35.100 --> 02:15:38.420
Init. Add. Remove.

02:15:38.420 --> 02:15:40.420
Run. Bench. Update.

02:15:40.420 --> 02:15:42.420
Bench. Update.

02:15:42.420 --> 02:15:44.420
Ne.

02:15:44.420 --> 02:15:46.420
Ne, gibt es nicht.

02:15:46.420 --> 02:15:48.420
Cargo-Fetch. Ne, so was gibt es anscheinend nicht.

02:15:48.420 --> 02:15:50.420
Oh we...

02:15:50.420 --> 02:15:52.420
Hä? Das steht da nicht drüben.

02:15:52.420 --> 02:16:45.790
da steht aber gar nicht hier dabei windows macht ein cargo patch minus list

02:16:45.790 --> 02:16:48.790
werden alle okay weil das wäre natürlich gut da muss da nicht jedes mal diesen

02:16:48.790 --> 02:17:07.510
ganzen krempel elb es gibt ja nicht alles bild c check clean klippi config

02:17:07.510 --> 02:17:19.680
patch ok das ist schon mal gut install okay was auch immer miri ist

02:17:19.680 --> 02:17:34.810
owner package remove reports ok patch ist glaube ich echt nicht verkehrt dass

02:17:34.810 --> 02:17:40.590
an der stelle das probieren wir jetzt doch klart mal aus cargo patch so dann

02:17:40.590 --> 02:17:46.680
hat er zumindest die dependencies gecached an der stelle das sollte doch

02:17:46.680 --> 02:17:52.690
eigentlich ganz brauchbar sein aber er muss den kram trotzdem

02:17:52.690 --> 02:17:57.570
kompilen ich glaube da ich glaube da kommen wir

02:17:57.570 --> 02:17:58.070
jetzt nicht

02:17:58.070 --> 02:17:58.110
ich glaube da kommen wir jetzt nicht

02:17:58.110 --> 02:17:59.110
drumherum

02:17:59.110 --> 02:18:22.850
fail to pass manifest warum ach so ja okay es funktioniert nicht dass das

02:18:22.850 --> 02:18:25.210
funktioniert so nicht wie ich mir das gedacht habe ich glaube den compile step

02:18:25.210 --> 02:18:29.590
den kann man nicht kann man nicht beschleunigt ich habe mir könnten dass

02:18:29.590 --> 02:18:36.590
wenn wir also bei github actions könnte man den bild output vom letzten mal

02:18:36.590 --> 02:18:41.390
cachen dann irgendwie wieder herstellen so dass er an der stelle dann nicht alles

02:18:41.390 --> 02:18:44.530
hier hin und da da ist er nicht geschrieben ich habe das hier von dem

02:18:44.530 --> 02:18:50.480
wurde ich kann das noch immer ich kann damit leben ja ich kann mir leben es

02:18:50.480 --> 02:18:56.600
okay ich würde sagen passt soweit mission erfüllt ja mein schnelles relativ

02:18:56.600 --> 02:19:09.980
kleines rocker image das ist gut hat funktioniert okay chat ich hoffe ich kotze

02:19:09.980 --> 02:19:14.820
jetzt ein bisschen bei der arbeit noch abgabel im streamontag heim ist weiß ich

02:19:14.820 --> 02:19:18.300
Ich weiß nicht, ob man das als Fortbildung verbuchen kann, wenn man nicht viel mit Docker gemacht hat, bestimmt.

02:19:23.550 --> 02:19:32.050
Das Problem ist, glaube ich, nicht das Base-Image, dass Debian so groß wäre, sondern eben, weil halt die komplette .NET-Runtime drauf ist.

02:19:32.410 --> 02:19:40.630
Sieht man ja auch. Und die .NET-Runtime, die ist halt unter Ubuntu auch nicht kleiner als mit Debian.

02:19:42.490 --> 02:19:44.070
Echt? Ist das so? Ist das kleiner?

02:19:46.350 --> 02:19:48.230
Okay, das probieren wir uns mal kurz aus.

02:19:48.230 --> 02:20:02.530
Also, wir haben aktuell von unserem Image, der App, lassen wir mal außen vor, da werden wir nichts dran machen können.

02:20:02.610 --> 02:20:11.550
Erstmal User. So, in User ist Lib, ist IQ, das Braumer, und Perl, was auch immer.

02:20:12.110 --> 02:20:16.510
Und 100 MB davon sind .NET. Ja, probieren wir das mal aus.

02:20:18.610 --> 02:20:19.090
Okay.

02:20:22.740 --> 02:20:23.580
Also, was brauchen wir?

02:20:23.900 --> 02:20:24.380
Jammy.

02:20:24.660 --> 02:20:25.740
Sch-Schisselt.

02:20:26.640 --> 02:20:27.360
Für ASP.

02:20:27.780 --> 02:20:28.300
ASP.

02:20:33.340 --> 02:20:33.580
So.

02:20:39.860 --> 02:20:40.260
Äh.

02:20:48.720 --> 02:20:51.240
Ja, nix Preview. Die gibt's wahrscheinlich schon komplett.

02:20:52.580 --> 02:20:56.040
Äh, die gibt's... Okay, das... Da bin ich, da bin ich jetzt ja mal gespannt.

02:20:57.480 --> 02:21:01.260
Also, im Prinzip brauchen wir jetzt nur ASP, ne?

02:21:02.980 --> 02:21:03.540
Jammy.

02:21:04.180 --> 02:21:04.740
Schiss.

02:21:05.740 --> 02:21:06.040
Elite.

02:21:07.380 --> 02:21:07.860
Isolet.

02:21:09.160 --> 02:21:09.520
Bild.

02:21:15.140 --> 02:21:16.140
Sehr nice.

02:21:16.140 --> 02:21:17.140
Stalker-Image.

02:21:18.960 --> 02:21:19.280
Ja!

02:21:21.980 --> 02:21:23.360
Damit kann ich leben, oder?

02:21:24.000 --> 02:21:25.660
260 MB.

02:21:28.760 --> 02:21:31.860
Äh, Bash ist da natürlich, ist da SH drauf, irgendwas. Da ist nichts drauf.

02:21:32.160 --> 02:21:34.160
Da ist einfach gar nichts drauf.

02:21:34.620 --> 02:21:36.560
Ach so, funktioniert's noch? Das ist eine gute Frage, ja.

02:21:37.660 --> 02:21:37.860
Ne.

02:21:40.530 --> 02:21:41.010
Ne.

02:21:49.890 --> 02:21:50.370
Ne.

02:21:52.110 --> 02:21:52.870
Funktioniert nicht mehr.

02:21:55.590 --> 02:21:57.090
Ah, ich glaube, ich weiß, warum.

02:21:57.550 --> 02:21:59.110
Ich weiß, warum. Wir müssen es so schreiben.

02:22:00.570 --> 02:22:02.170
Ne, ne, wir müssen es so schreiben, Leute.

02:22:02.350 --> 02:22:03.450
Passt mal auf, ich weiß, woran das liegt.

02:22:03.750 --> 02:22:07.210
Wenn das was... Wenn das... Wenn das jetzt geht, erkläre ich euch, woran das lag.

02:22:12.880 --> 02:22:14.000
Wenn's nicht geht, dann nicht.

02:22:19.620 --> 02:22:20.100
Ja, fuck.

02:22:21.860 --> 02:22:24.780
The application.net does not exist.

02:22:28.330 --> 02:22:28.530
Äh.

02:22:28.870 --> 02:22:31.170
Ist das vielleicht nur für self-contained apps?

02:22:44.860 --> 02:22:46.160
Bin ich denn zu viel geschisselt?

02:22:46.160 --> 02:22:46.640
Hahaha.

02:22:49.900 --> 02:23:10.200
Äh, da brauch ich...

02:23:12.390 --> 02:23:13.810
Ich bräuchte mal ein Example.

02:23:14.690 --> 02:23:16.190
Ein Example-Docker-File.

02:23:17.830 --> 02:23:19.650
Publish.net, nicht auch eine Binary.

02:23:20.450 --> 02:23:24.230
Die ist aber standardmäßig abhängig von der Runtime.

02:23:24.990 --> 02:23:27.470
Und wenn die Runtime nicht da... Also, es ist ja nichts da.

02:23:29.390 --> 02:23:31.430
Dann geht das nicht.

02:23:31.490 --> 02:23:35.230
Die müsste ich als self-contained application raushauen.

02:23:35.230 --> 02:23:36.650
Dann würde es funktionieren.

02:23:38.700 --> 02:23:40.980
Das ist geschisselt im Entry-Point.

02:23:45.450 --> 02:23:46.890
Also quasi so, oder wie?

02:23:47.010 --> 02:23:47.450
Ne, also.

02:23:48.730 --> 02:23:49.790
Ich brauch mal ein Example.

02:23:49.810 --> 02:23:53.670
Ich brauch mal ein Example-Docker-File.

02:23:57.020 --> 02:23:58.800
Gibt's hier irgendwie ein Example-Docker-File?

02:23:59.720 --> 02:23:59.900
Ja.

02:24:00.500 --> 02:24:01.240
Entry-Point.

02:24:01.780 --> 02:24:03.260
Ach, tatsächlich, guck mal.

02:24:04.440 --> 02:24:09.710
Man gibt da wirklich nur...

02:24:09.710 --> 02:24:11.510
Gibt man da vielleicht so wirklich nur...

02:24:12.170 --> 02:24:13.530
Das hinten gar nicht mit an?

02:24:20.520 --> 02:24:22.220
Das braucht man wahrscheinlich gar nicht, ne?

02:24:23.300 --> 02:24:23.620
Geht.

02:24:24.000 --> 02:24:24.360
Nice.

02:24:27.120 --> 02:24:27.360
Aha.

02:24:28.940 --> 02:24:30.760
.net weggeschisselt, anscheinend.

02:24:30.760 --> 02:24:33.640
Gut zu wissen.

02:24:33.760 --> 02:24:34.460
Gut zu wissen.

02:24:34.760 --> 02:24:35.660
Easy, easy.

02:24:38.790 --> 02:24:41.470
Guck mal, und jetzt haben wir nur noch 260 MB.

02:24:41.850 --> 02:24:43.490
Und jetzt abschließend mal den Test.

02:24:43.930 --> 02:24:46.710
Wie lange würde so ein komplettes Bild jetzt brauchen?

02:24:47.130 --> 02:24:48.490
Wahrscheinlich so eineinhalb Minuten.

02:24:51.900 --> 02:24:52.460
So, Bild.

02:24:52.840 --> 02:24:55.580
Weil ich hab jetzt alle meine Caches und sonst wie weggeschmissen.

02:24:57.200 --> 02:24:58.320
Okay, also.

02:24:58.640 --> 02:25:00.820
Gucken wir mal drauf, wie lange so ein komplettes Bild jetzt braucht.

02:25:03.070 --> 02:25:05.190
Jetzt wird richtig drauf losgeschisselt, ey.

02:25:06.770 --> 02:25:08.690
Das heißt, glaube ich, schmeißeln, gell?

02:25:09.490 --> 02:25:10.830
Auf Deutsch.

02:25:12.810 --> 02:25:13.750
Schisseln oder so.

02:25:14.070 --> 02:25:15.090
Ich glaube, es heißt meißeln.

02:25:21.350 --> 02:25:22.350
Da haben die...

02:25:22.350 --> 02:25:25.130
Ja, ist das ein Image von Microsoft?

02:25:25.450 --> 02:25:30.190
Oder ist das ein Image, was die Canonical-Leute schisseln?

02:25:36.460 --> 02:25:37.280
Vielleicht finden wir nochmal.

02:25:37.400 --> 02:25:37.940
Ich hab noch eine Idee.

02:25:38.580 --> 02:25:40.120
Docker-File-Rust.

02:25:41.100 --> 02:25:42.100
Vielleicht gibt's da noch...

02:25:42.100 --> 02:25:44.180
Bald neu der Schissel-Champ.

02:25:46.600 --> 02:25:48.780
Vielleicht gibt's ja da ein Exempel für...

02:25:48.780 --> 02:25:57.470
Äh.

02:25:57.510 --> 02:26:12.990
Nee, ich überlege gerade, ob es nicht vielleicht was gibt,

02:26:13.110 --> 02:26:16.010
dass man irgendwie diesen Cargo-Bild...

02:26:16.010 --> 02:26:18.510
Äh, dieses Cargo-Library-Gedöns...

02:26:20.780 --> 02:26:21.760
Cachen könnte.

02:26:23.280 --> 02:26:26.300
Habt ihr auch ein bisschen gemeißelt heute an euren Containern?

02:26:26.540 --> 02:26:26.800
Sehr nice.

02:26:33.320 --> 02:26:34.480
Cache Rust-Dependent.

02:26:44.880 --> 02:26:48.100
You need a dummy AS and your Cargo-Yammel first.

02:26:48.580 --> 02:26:51.520
Then build it to cache the dependencies and then copy your...

02:26:51.520 --> 02:26:53.240
Ach so!

02:26:55.920 --> 02:26:58.240
Hi-I-Q.

02:27:05.920 --> 02:27:06.460
Hi...

02:27:06.460 --> 02:27:07.320
Ach, guck mal.

02:27:08.100 --> 02:27:10.200
Die legen so eine Fake-Lib-AS an.

02:27:10.640 --> 02:27:15.120
Und danach in einem Build-Step die richtige.

02:27:17.540 --> 02:27:19.520
Okay, das Bild, das probiere ich jetzt noch aus.

02:27:19.860 --> 02:27:21.200
Jetzt wird Rust geschisselt, Leute.

02:27:21.820 --> 02:27:23.600
Okay, Image hat gebildet jetzt...

02:27:23.600 --> 02:27:23.920
Wie lang?

02:27:24.180 --> 02:27:25.200
280 Sekunden.

02:27:25.440 --> 02:27:25.840
Alles klar.

02:27:26.340 --> 02:27:26.680
Pass auf.

02:27:27.020 --> 02:27:28.680
Wir schisseln jetzt das Rust.

02:27:29.420 --> 02:27:29.640
So.

02:27:30.140 --> 02:27:30.760
Also, so.

02:27:31.080 --> 02:27:31.560
Cargo.

02:27:32.700 --> 02:27:33.560
So, an der Stelle.

02:27:33.560 --> 02:27:35.560
Wenn man jetzt hier sagt Cargo-Bild...

02:27:36.040 --> 02:27:39.560
Dann meckert er garantiert, weil...

02:27:42.000 --> 02:27:42.200
Keine...

02:27:43.620 --> 02:27:44.200
Äh...

02:27:44.720 --> 02:27:45.860
Lib-AS da ist.

02:27:46.280 --> 02:27:47.200
So, wenn ich jetzt sage run...

02:27:48.320 --> 02:27:49.200
Touch...

02:27:50.020 --> 02:27:50.200
Lib...

02:27:50.940 --> 02:27:51.760
Ne, Moment, was?

02:27:51.940 --> 02:27:52.200
Source...

02:27:52.840 --> 02:27:56.980
Lib-AS...

02:27:56.980 --> 02:27:57.680
Geht das jetzt?

02:28:00.190 --> 02:28:01.670
No, such file or directory.

02:28:04.670 --> 02:28:05.230
Äh...

02:28:05.230 --> 02:28:07.850
Moment, kann das sein, dass es Touch einfach nicht gibt?

02:28:09.230 --> 02:28:09.850
Das ist zu...

02:28:10.610 --> 02:28:10.850
Hyper...

02:28:11.670 --> 02:28:12.170
Touchy?

02:28:13.170 --> 02:28:13.670
Ne.

02:28:15.450 --> 02:28:15.950
What?

02:28:18.290 --> 02:28:18.790
Jetzt.

02:28:26.280 --> 02:28:28.780
Ist es nicht irgendein Base-Tool, was immer dabei ist?

02:28:35.710 --> 02:28:36.810
Ach, der Source-Ordner wird...

02:28:36.810 --> 02:28:37.610
Okay, okay.

02:28:37.910 --> 02:28:38.830
MKDir...

02:28:39.830 --> 02:28:40.330
Source.

02:28:44.800 --> 02:28:45.560
Äh...

02:28:46.620 --> 02:28:48.620
Ich dachte eigentlich, dass Touch Bash Build-In ist.

02:28:50.460 --> 02:28:52.120
Okay, ne, passt, passt, passt, passt.

02:28:53.760 --> 02:28:55.120
Ich glaub, Leute, das Funst...

02:28:57.940 --> 02:28:58.440
Ist...

02:28:58.740 --> 02:29:00.140
Better Twitch TV Schissel...

02:29:00.140 --> 02:29:02.580
Ja, so oft werden wir das nicht brauchen, vermute ich.

02:29:04.830 --> 02:29:06.950
Aber, Leute, ich glaub, das Funst, was ich hier vorhab.

02:29:11.130 --> 02:29:12.710
Ich glaub, das Funst...

02:29:12.710 --> 02:29:13.070
Guck mal.

02:29:13.630 --> 02:29:17.430
Der hat jetzt die Datei angelegt, die leere Lib-Datei.

02:29:18.250 --> 02:29:19.250
Jetzt kompiliert er.

02:29:20.030 --> 02:29:26.130
Und jetzt, für den nächsten Step, sollten die Dependencies eigentlich gecached sein.

02:29:28.980 --> 02:29:30.720
Ja, ich glaub, das Funst, Leute.

02:29:30.920 --> 02:29:31.960
Ich glaub, ich glaub, das Funst.

02:29:36.070 --> 02:29:36.870
Cargo-Bild...

02:29:36.870 --> 02:29:41.670
So, probieren wir jetzt aus.

02:29:42.270 --> 02:29:44.270
Wir ändern jetzt...

02:29:44.270 --> 02:29:45.270
Also, eben hat's ja noch lange gedauert.

02:29:45.270 --> 02:29:47.270
So, wir machen jetzt einfach hier doppelten Output.

02:29:47.270 --> 02:29:48.270
So, ist ja eh egal.

02:29:51.280 --> 02:29:52.680
Seven TV Emotes...

02:29:56.150 --> 02:29:56.650
Rust.

02:29:59.790 --> 02:30:00.990
Das ist ein gutes Emote.

02:30:08.790 --> 02:30:11.130
Das find ich gut, das mach ich mal.

02:30:16.730 --> 02:30:17.490
Use Emote.

02:30:22.110 --> 02:30:23.250
Ich mein, das bezieht sich ja...

02:30:23.570 --> 02:30:25.370
Das bezieht sich ja auf das Game, ja?

02:30:25.370 --> 02:30:26.870
Aber es passt in dem Fall ja auch.

02:30:26.870 --> 02:30:28.870
So, schau mal mal, wie schnell...

02:30:28.870 --> 02:30:29.710
So, schau mal mal, wie schnell...

02:30:29.710 --> 02:30:30.590
Wie schnell das jetzt geht.

02:30:33.300 --> 02:30:33.740
Nice!

02:30:33.960 --> 02:30:34.600
Es funktioniert!

02:30:34.780 --> 02:30:35.040
Guck mal!

02:30:35.340 --> 02:30:36.780
Die Dependencies sind gecached.

02:30:37.060 --> 02:30:37.300
Jetzt.

02:30:38.020 --> 02:30:39.660
Das ist richtig high IQ gewesen.

02:30:40.000 --> 02:30:41.640
Guck mal, wie viel schneller das jetzt fertig ist.

02:30:42.280 --> 02:30:42.800
Es funktioniert!

02:30:43.600 --> 02:30:44.500
Okay, das ist nice.

02:30:45.140 --> 02:30:45.520
Guck mal.

02:30:46.060 --> 02:30:48.040
Dadurch, dass der hier eine leere Lib...

02:30:48.040 --> 02:30:51.780
Also, hier holt er sich die neuesten Cargo...

02:30:51.780 --> 02:30:53.960
Das neueste Cargo-Dependency-File.

02:30:54.560 --> 02:30:58.560
Dann legt er eine Fake-Lib-RS an, sodass Cargo-Bild funktioniert.

02:30:59.040 --> 02:31:00.560
Ab der Stelle ist es gecached.

02:31:00.560 --> 02:31:04.560
Bis zu dem Zeitpunkt, wo sich an meinen Dependencies was ändert.

02:31:04.560 --> 02:31:06.560
Und da ändert sich ja selten was dran.

02:31:06.560 --> 02:31:11.560
Und nur dann, wenn sich die Dependencies ändern, dann bildet er Dependency und Anwendung neu.

02:31:11.560 --> 02:31:13.560
Sonst bildet er nur die Anwendung neu.

02:31:13.560 --> 02:31:15.560
Eigentlich sehr nice, oder?

02:31:15.560 --> 02:31:17.560
Excellent!

02:31:17.560 --> 02:31:24.720
Die Standard.net Docker-File-Templates machen das by the way auch.

02:31:24.720 --> 02:31:26.720
Was? Die schisseln?

02:31:26.720 --> 02:31:30.720
Ne, was machen die?

02:31:30.720 --> 02:31:45.810
Ich committe das mal.

02:31:45.810 --> 02:31:46.810
Ja.

02:31:46.810 --> 02:31:47.810
Packweight.

02:31:47.810 --> 02:31:52.850
Hier ist das Docker-File drin.

02:31:52.850 --> 02:31:56.290
Der Urlaub wird ausgenutzt, ja.

02:31:56.290 --> 02:31:58.290
Erst Restore, dann Source kopieren.

02:31:58.290 --> 02:31:59.290
Ach das!

02:31:59.290 --> 02:32:00.290
Ja.

02:32:00.290 --> 02:32:04.290
Deswegen bin ich drauf gekommen mit dem Restore, weil ich bilde mir ein, weil ich das da mal gesehen hab.

02:32:04.290 --> 02:32:06.290
Deswegen wollte ich gucken, ob Cargo auch sowas hat.

02:32:06.290 --> 02:32:08.290
Aber muss ein bisschen tricksen.

02:32:08.290 --> 02:32:09.290
Aber ist schon okay.

02:32:09.290 --> 02:32:11.290
Geht eigentlich ziemlich gut.

02:32:11.290 --> 02:32:13.290
Ähm...

02:32:14.290 --> 02:32:15.290
Okay.

02:32:16.290 --> 02:32:19.290
Ja, das ist noch die Sachen vom letzten Mal.

02:32:20.290 --> 02:32:22.290
Die pushe ich jetzt einfach...

02:32:23.290 --> 02:32:25.290
...mal ins...

02:32:25.290 --> 02:32:27.290
...ins ChemChamp-Shit.

02:32:29.600 --> 02:32:32.600
Git push origin master.

02:32:32.600 --> 02:32:33.600
Bam.

02:32:34.600 --> 02:32:36.600
Schau mal, was der ChemChamp macht auf GitHub.

02:32:37.600 --> 02:32:39.600
Der hat jetzt ein Comet.

02:32:40.600 --> 02:32:44.600
Und er hat mit Abstand die allerbesten Comet-Messages.

02:32:45.600 --> 02:32:53.930
Das gefällt mir.

02:32:53.930 --> 02:32:54.930
Nice.

02:32:55.930 --> 02:32:57.930
Excellent, würde ich dazu sagen.

02:32:57.930 --> 02:32:58.930
Excellent.

02:32:58.930 --> 02:33:00.930
Guck mal, die machen hier super kompliziertes Zeug.

02:33:00.930 --> 02:33:01.930
Das...

02:33:01.930 --> 02:33:08.760
...müssen wir gar nicht machen.

02:33:09.760 --> 02:33:10.760
Excellent.

02:33:10.760 --> 02:33:13.520
Okay.

02:33:14.520 --> 02:33:19.540
Ich würde sagen, wir waren heute highly effective.

02:33:21.540 --> 02:33:22.540
Nee, effective ist das Fall.

02:33:22.540 --> 02:33:23.540
Und highly...

02:33:24.540 --> 02:33:26.540
...productive, nicht effective.

02:33:27.540 --> 02:33:30.540
Image unter 200 MB.

02:33:31.540 --> 02:33:33.540
Da muss so ein bisschen was weggeschisselt werden.

02:33:33.540 --> 02:33:35.540
Also unter 200 MB ist enorm schwierig.

02:33:35.540 --> 02:33:39.540
Wenn FFmpeg schon 140 MB groß ist.

02:33:40.540 --> 02:33:43.540
Und dementsprechend das OS...

02:33:44.540 --> 02:33:46.540
Ich glaube nicht, dass das funzt, ey.

02:33:47.540 --> 02:33:52.300
Könnte man das Programm auch als Dienst programmieren?

02:33:53.300 --> 02:33:54.300
Wie jetzt?

02:33:54.300 --> 02:33:56.300
Du meinst Windows-Service oder was?

02:33:57.300 --> 02:33:58.300
Ja, bestimmt.

02:33:59.300 --> 02:34:00.300
Bestimmt.

02:34:00.300 --> 02:34:02.300
Damit will ich mich nicht beschäftigen.

02:34:03.300 --> 02:34:04.300
Also wir müssen...

02:34:04.300 --> 02:34:06.300
Okay, wir könnten FFmpeg selbst programmieren.

02:34:06.300 --> 02:34:08.300
Wir könnten FFmpeg selbst kompilieren.

02:34:08.300 --> 02:34:10.300
Und wirklich nur das einbauen, was wir bräuchten.

02:34:10.300 --> 02:34:11.300
Das wäre eine Möglichkeit.

02:34:11.300 --> 02:34:12.300
Ey, Leute.

02:34:12.300 --> 02:34:13.300
Das machen wir.

02:34:13.300 --> 02:34:14.300
Leute, das machen wir.

02:34:19.110 --> 02:34:20.110
Das machen wir.

02:34:20.110 --> 02:34:21.110
Nicht jetzt.

02:34:21.110 --> 02:34:22.110
Nicht jetzt.

02:34:22.110 --> 02:34:23.110
Das machen wir.

02:34:23.110 --> 02:34:26.110
Da habe ich schon lange Bock drauf, mal FFmpeg selbst zu bauen.

02:34:26.110 --> 02:34:28.110
Mit genau den Options, die man braucht.

02:34:28.110 --> 02:34:29.110
Weil wir brauchen nicht viel.

02:34:29.110 --> 02:34:31.110
Wir brauchen RTSP-Support.

02:34:31.110 --> 02:34:32.110
H264.

02:34:32.110 --> 02:34:34.110
Nee, noch nicht mal H264-Support.

02:34:34.110 --> 02:34:36.110
Wir decoden ja nix.

02:34:36.110 --> 02:34:38.110
Wir brauchen eigentlich nur FFmpeg.

02:34:38.110 --> 02:34:39.110
Nur mit RTSP-Support.

02:34:39.110 --> 02:34:43.550
Da wird FFmpeg eine ganze Ecke kleiner.

02:34:43.550 --> 02:34:44.550
Wir brauchen keine Filter.

02:34:44.550 --> 02:34:46.550
Wir brauchen nix.

02:34:46.550 --> 02:34:47.550
Netzwerk.

02:34:47.550 --> 02:34:48.550
Wir brauchen Netzwerk.

02:34:48.550 --> 02:34:49.550
RTSP-Support.

02:34:49.550 --> 02:34:50.550
Das machen wir mal.

02:34:50.550 --> 02:34:51.550
Ja, ja.

02:34:51.550 --> 02:34:57.360
Und dann können wir...

02:34:57.360 --> 02:34:58.360
Das ist...

02:34:58.360 --> 02:34:59.360
Okay, Leute.

02:34:59.360 --> 02:35:00.360
Unsere Mission wird sein.

02:35:00.360 --> 02:35:02.360
Für den nächsten Stream.

02:35:02.360 --> 02:35:04.360
Image...

02:35:04.360 --> 02:35:06.360
Image kleiner...

02:35:06.360 --> 02:35:07.360
Kleiner...

02:35:07.360 --> 02:35:09.360
200 MB.

02:35:10.360 --> 02:35:11.360
Das machen wir im nächsten Stream.

02:35:11.360 --> 02:35:13.360
Image kleiner 200 MB.

02:35:13.360 --> 02:35:17.860
Es kann sein, dass wir OpenSSL brauchen für RTSP.

02:35:17.860 --> 02:35:19.860
Das ist möglich.

02:35:19.860 --> 02:35:21.860
Was macht FFmpeg?

02:35:21.860 --> 02:35:24.860
FFmpeg verbindet sich hier zu Webcams.

02:35:24.860 --> 02:35:25.860
Also ich kann es ja mal starten.

02:35:25.860 --> 02:35:26.860
Dann siehst du es.

02:35:26.860 --> 02:35:29.860
Also Webcam ist jetzt ein bisschen das falsche Wort.

02:35:29.860 --> 02:35:32.860
Webcam ist stellvertretend von einem lokalen RTSP-Server.

02:35:32.860 --> 02:35:41.230
Aber im Prinzip Webcam...

02:35:41.230 --> 02:35:43.230
Oh shit.

02:35:43.230 --> 02:35:44.230
Jetzt habe ich irgendwas kaputt gemacht.

02:35:44.230 --> 02:35:45.230
Warum?

02:35:45.230 --> 02:35:48.050
Warum?

02:35:48.050 --> 02:35:50.620
Da ist es doch.

02:35:50.620 --> 02:35:54.320
Ach ich kack knub.

02:35:54.320 --> 02:35:55.320
Wie jetzt?

02:35:55.320 --> 02:36:01.090
Na ja.

02:36:01.090 --> 02:36:02.090
Angular.

02:36:02.090 --> 02:36:03.090
MonkaS.

02:36:03.090 --> 02:36:04.090
No.

02:36:04.090 --> 02:36:07.090
I'm no Angular...

02:36:07.090 --> 02:36:09.090
Expert.

02:36:09.090 --> 02:36:11.090
No Frontend Expert.

02:36:11.090 --> 02:36:17.200
And especially no Angular Expert.

02:36:17.200 --> 02:36:18.200
Okay.

02:36:18.200 --> 02:36:19.200
Mv...

02:36:19.200 --> 02:36:20.200
FFmpeg.

02:36:20.200 --> 02:36:21.200
Zu FFmpeg.

02:36:21.200 --> 02:36:24.200
So, jetzt sollte es eigentlich funktionieren.

02:36:24.200 --> 02:36:25.200
Ja.

02:36:25.200 --> 02:36:26.200
Funst.

02:36:26.200 --> 02:36:27.200
Also was das macht ist folgendes.

02:36:27.200 --> 02:36:28.200
Das verbindet sich zum...

02:36:28.200 --> 02:36:29.200
Ach so.

02:36:29.200 --> 02:36:30.200
Jetzt habe ich den Kram hier noch auskommentiert.

02:36:30.200 --> 02:36:31.200
Kann ich ja gar nicht zeigen.

02:36:31.200 --> 02:36:33.200
So, es verbindet sich lokal zu einer Webcam.

02:36:33.200 --> 02:36:39.200
Und dann streamt es den Webcam-Output in den Browser.

02:36:39.200 --> 02:36:42.700
Und der Trick dabei ist, wenn es denn jetzt funktioniert, wenn ich es nicht irgendwie

02:36:42.700 --> 02:36:44.200
kaputt gemacht habe, habe ich nicht...

02:36:44.200 --> 02:36:48.200
Also stellvertretend für Webcam-Output gibt es halt ein YouTube-Video von mir.

02:36:48.200 --> 02:36:49.200
So.

02:36:49.200 --> 02:36:51.200
Und ohne zu re-encoden.

02:36:51.200 --> 02:36:52.200
Das ist halt das Ding.

02:36:52.200 --> 02:36:54.200
Also, der nimmt einfach...

02:36:54.200 --> 02:36:56.200
Der connectet sich per RTSP.

02:36:56.200 --> 02:36:59.200
FFmpeg RTSP connectet er sich zum...

02:36:59.200 --> 02:37:00.200
Zur Webcam.

02:37:00.200 --> 02:37:05.200
Liest die einzelnen Frames oder ja, Packages aus.

02:37:05.200 --> 02:37:07.200
Aus diesem H.264 encodeten Stream.

02:37:07.200 --> 02:37:11.200
Und schickst die 1 zu 1 weiter per WebRTC in den Browser.

02:37:11.200 --> 02:37:13.200
Und der Browser decodet dann.

02:37:13.200 --> 02:37:14.200
Also das heißt, es ist...

02:37:14.200 --> 02:37:17.200
Braucht nahezu keine CPU-Last auf Server-Seite.

02:37:17.200 --> 02:37:19.200
Bloß ein bisschen zum decoden im Browser.

02:37:19.200 --> 02:37:23.200
Und wie performant ist das jetzt im Vergleich zu Go?

02:37:23.200 --> 02:37:28.200
Ich habe keine Ahnung, ob es in der Praxis überhaupt einen nennenswerten Unterschied macht.

02:37:28.200 --> 02:37:30.200
Höchstwahrscheinlich nicht.

02:37:30.200 --> 02:37:32.200
Höchstwahrscheinlich nicht.

02:37:32.200 --> 02:37:33.200
Weil...

02:37:33.200 --> 02:37:37.200
Der große Unterschied zwischen Rust und Go in dem Fall ist.

02:37:37.200 --> 02:37:40.200
Also wo es wirklich richtig krass Performance gut machen könnte.

02:37:40.200 --> 02:37:46.200
Ist an der Stelle, wo man oft callen muss nach Go von .NET aus.

02:37:46.200 --> 02:37:48.200
Und so oft call ich nicht.

02:37:48.200 --> 02:37:50.200
Ich meine, es sieht zwar hier viel aus.

02:37:50.200 --> 02:37:51.200
Ihr seht es hier durchrattern.

02:37:51.200 --> 02:37:55.200
Aber das sind halt auch nur alle 16 Millisekunden.

02:37:55.200 --> 02:37:58.200
Alle 16 Millisekunden ist halt gar nichts.

02:37:58.200 --> 02:38:04.960
Im Browser kann man das nicht siegen.

02:38:04.960 --> 02:38:05.960
Korrekt.

02:38:05.960 --> 02:38:07.960
Das geht um Live-Webcams.

02:38:07.960 --> 02:38:09.960
Du kannst nicht siegen.

02:38:10.960 --> 02:38:12.960
Wieso nicht Rust-Cam?

02:38:12.960 --> 02:38:13.960
Weil CamChamp...

02:38:13.960 --> 02:38:15.960
Weil meine Dinger immer Champ heißen.

02:38:15.960 --> 02:38:18.960
Außerdem ist es nichts, was ich will, dass irgendjemand verwendet.

02:38:18.960 --> 02:38:20.960
Sondern das ist gebastelt für mich.

02:38:20.960 --> 02:38:26.980
Und ich werde es wahrscheinlich bei mir benutzen.

02:38:26.980 --> 02:38:28.980
So, wo wir gerade dabei sind.

02:38:28.980 --> 02:38:29.980
Lass mal gucken.

02:38:29.980 --> 02:38:31.980
Ich glaube, der 4er-Champ hat immer noch keine Bugs.

02:38:31.980 --> 02:38:32.980
Nee.

02:38:32.980 --> 02:38:33.980
Obviously keine neuen Bugs.

02:38:34.980 --> 02:38:36.980
Ist ja auch komplett bugfrei.

02:38:36.980 --> 02:38:39.980
Der 4M-Champ hat natürlich auch keine neuen Bugs.

02:38:39.980 --> 02:38:40.980
Okay.

02:38:40.980 --> 02:38:41.980
Alles klar.

02:38:41.980 --> 02:38:44.980
Weil Bugs produzieren wir hier ja nicht.

02:38:44.980 --> 02:38:48.980
Bei uns ist alles immer first try.

02:38:48.980 --> 02:38:52.980
5Head-Community-ge-fehlerfrei.

02:38:52.980 --> 02:38:58.570
So, Chat.

02:38:58.570 --> 02:39:00.570
Sehr schön.

02:39:00.570 --> 02:39:02.570
Das hat heute wunderbar funktioniert.

02:39:02.570 --> 02:39:03.570
Nächster Stream.

02:39:03.570 --> 02:39:05.570
Ahead of Time Compilation.

02:39:05.570 --> 02:39:06.570
FFmpeg selbst kompilieren.

02:39:06.570 --> 02:39:09.570
Und gucken, dass wir das Image unter 200 MB kriegen.

02:39:09.570 --> 02:39:11.570
Also mit AOT sollte es easy funktionieren.

02:39:11.570 --> 02:39:13.570
Weil dann ist auch .NET kleiner.

02:39:13.570 --> 02:39:15.570
Und FFmpeg, wenn das geht.

02:39:15.570 --> 02:39:16.570
Also, nee.

02:39:16.570 --> 02:39:18.570
AOT sollte easy funktionieren.

02:39:18.570 --> 02:39:21.570
Da ist auch die ganze .NET-Anwendung kleiner.

02:39:21.570 --> 02:39:24.570
Wir bräuchten theoretisch auch gar kein .NET-Image mehr.

02:39:24.570 --> 02:39:28.570
Und FFmpeg, wenn das geht, kommen wir easy unter 200 MB.

02:39:28.570 --> 02:39:31.570
Wenn das Custom sich kompiliert.

02:39:31.570 --> 02:39:33.570
Was jetzt gemacht wird Offstream.

02:39:33.570 --> 02:39:35.570
Ich bin heute noch nicht mal eine Runde gelaufen.

02:39:35.570 --> 02:39:36.570
Das werde ich jetzt machen.

02:39:36.570 --> 02:39:43.660
Vielleicht so in dem Dreh, ja.

02:39:43.660 --> 02:39:45.660
Wobei man halt sagen muss.

02:39:45.660 --> 02:39:49.660
Teile von der .NET Runtime müssen ja trotzdem rein.

02:39:49.660 --> 02:39:52.660
Beziehungsweise nicht von der Runtime.

02:39:52.660 --> 02:39:55.660
Aber von der Standard-Library trotzdem rein.

02:39:55.660 --> 02:40:01.340
Weil sonst läuft das Zeug ja nicht.

02:40:01.340 --> 02:40:02.340
Also, wir sehen uns, Leute.

02:40:02.340 --> 02:40:03.340
Bis dann, macht's gut.

02:40:03.340 --> 02:40:04.340
Ich hoffe, euch hat das Stream gefallen.

02:40:04.340 --> 02:40:05.340
Wenn euch das Stream gefallen hat.

02:40:05.340 --> 02:40:07.340
Dann könnt ihr mir jetzt followen.

02:40:07.340 --> 02:40:10.340
Dass ihr beim nächsten Broadcast-Stream.

02:40:10.340 --> 02:40:12.340
Oder bei was auch immer wir machen.

02:40:12.340 --> 02:40:13.340
Wieder mit am Start seid.

02:40:13.340 --> 02:40:14.340
Würde mich freuen.

02:40:14.340 --> 02:40:16.340
Und schön, dass ihr da gewesen seid.

02:40:16.340 --> 02:40:17.340
Wir sehen uns im nächsten Stream.

02:40:17.340 --> 02:40:18.340
Bis dann.

02:40:18.340 --> 02:40:20.720
Macht's gut.

02:40:20.720 --> 02:40:21.720
See you.

02:40:21.720 --> 02:40:22.720
Die ersten.

02:40:22.720 --> 02:40:23.720
So, so muss das sein.

02:40:23.720 --> 02:40:24.720
Bis dann.

02:40:24.720 --> 02:40:25.720
Macht's gut.

02:40:25.720 --> 02:40:26.720
See you.
