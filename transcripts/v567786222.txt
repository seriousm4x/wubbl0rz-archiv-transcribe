Da ist er wieder.
Der war jetzt nicht lange off, ich weiß.
Oh, wie sie groß.
Mit dem Emotes-Schloss.
So, also das erste.
Ich muss erstmal warten, bis Twitch richtig am Start ist.
Es gibt, wenn man nämlich auf GitHub sucht, es gibt 30 Millionen Corona-APs.
Total viel, ja.
Ja, ich bin schon wieder da.
Ich habe nämlich gedacht, ich meine, heute ist Sonntag, da passiert allgemein ja nicht so viel.
Wir können mal versuchen, eine schöne Corona-Übersicht, beziehungsweise Statistik mit Karte zu programmieren.
78%.
Du gehörst dazu, oder was?
Der Eichler, danke schön.
Sieben Monate, huge.
Ja, ich hatte heute eh nichts Großartiges zu tun.
Ich hatte jetzt die Auswahl.
Entweder wir programmieren was Aktuelles mit aktuellem Bezug.
Oder ich nehme das Battlefield-Video auf, auf was ich gerade nicht so die Kreativität...
in kreativer Stimmung bin.
Oder aber, ich spiele Path of Exile.
Und ich habe mir gedacht, komm, wir können mal was halbwegs Sinnvolles programmieren, was vielleicht irgendjemand noch was bringt, ja.
Das Problem ist nur bei der ganzen Geschichte.
Ich muss mal ein bisschen was trinken, sonst kriege ich irgendwann noch Kopfweh heute.
Ja.
Kopfwehursache Nummer 1, zu wenig trinken.
Battlefield suckt, Alter.
Das aktuelle Battlefield ist voll verarscht.
Das spiele ich schnell.
Also es gibt 30 Millionen Corona-APs.
Ich habe schon ein paar durchgeguckt.
Die Sache ist bloß die, die nehmen mehr oder weniger...
Man meint, das heißt doch einfach nur Corona.
Das Problem ist, die nehmen alle mehr oder weniger die gleiche API.
So, und wenn man jetzt hier guckt, zum Beispiel bei dem hier, raw data.
Wenn man dann nach Germany sucht, dann sind das die Zahlen von gestern.
Also sprich...
Wie ziehen sich die Daten...
Alle...
Ich habe mal nachgeguckt, von wo die sich die Daten ziehen.
Wie ziehen sich die Daten mehr oder weniger alle hiervon?
So, und die updaten nicht so oft.
Hat das RKI keine Zahlen für die E?
Was ist denn das RKI?
Ach, die meinst du, das Robert-Koch-Institut.
Habe ich nicht gefunden.
Zumindest nichts, um was abzufragen.
Die hatten auch den letzten Stand von 14.
14.
14.
Ihr Fallzahlen, die hatten auch 14.
So, was ich allerdings gefunden habe...
Ne, wie ich hoffe.
Das ist alles nicht aktuell.
Also was ich gefunden habe, ist...
Einmal die hier.
Ich habe aber keine Ahnung, wo die ihre Zahlen näher haben, wie verlässlich das Ganze ist.
Wenn man jetzt zum Beispiel hier auf Germany geht.
Die aktualisieren halt mehrfach am Tag.
Und ich habe...
Das da.
Das da.
Das da.
Das da.
Das da.
Das da.
Das da.
Das da.
Das da.
Das da.
Das da.
Das da.
Das da.
Das da.
Das da.
Das da.
Das da.
Das da.
Das da.
Das da.
Das da.
Das da.
Das da.
Das da.
Das da.
Das da.
Das da.
Das da.
Das da.
Das da.
Das da.
Das da.
Das da.
Und mich würde mal...
Ja, das Robert-Koch-Institut hat keine...
Zeig mir mal.
Doch kann ich.
Wenn du mir die aktu...
Wenn du mir eine...
Schöne Seite vom Robert-Koch-Institut zeigt, der die aktuellen Daten hat.
Die hier und die hier.
Die haben das aktuelle.
So.
Was ich halt nicht checke ist...
Vielleicht schreiben die auch einfach voneinander ab.
Wo ich keine Ahnung habe, wo haben die die Sachen her?
Woher wissen die, dass in Hessen und in Bayern Fälle sind?
Und woher wissen die schon, dass wir bei 5.426 sind?
Und warum ist hier auf GitHub alles, was ich an Datenbanken finde?
Das ist Stand gestern.
Da sind wir bei 4.000 noch was.
Nee, die haben schon Quellen da stehen, aber die bringen mir nichts.
Weil die Quellen, die die angegeben haben, sich nicht decken mit dem, was die sich...
Also Leute, wenn ihr was habt, schickt mir ordentliche Links.
Also alle APIs, die ich kenne, haben als letzte Zahlen für Deutschland 4.585.
Ja genau, genau.
Die habe ich auch.
Aber die hier wissen angeblich schon mehr.
Und ich frage mich, woher haben die erstens die Region?
Weil die findet man.
Aber nirgendwo, in keinem, in keinem, in keiner API, in keinem Bericht findet man für Deutschland Regionen.
Für die Amis gibt es Regionen.
Die haben welche, wir nicht.
Also das...
Ich bin mal echt gespannt, ob das irgendjemand von euch was findet.
So.
Ja und dazu haben wir, dazu haben wir, wenn wir hier nach Quellen gucken, die haben das...
Warte mal, ich muss mal kurz Skype zumachen.
Warum ist Skype überhaupt angegangen?
Skype, geht weg.
Was will Skype denn jetzt?
So, ich habe es gar nicht mehr installiert.
So, wenn man sich hier die Quellen anguckt, die haben wir.
Das ist das hier.
Und die sind von gestern.
So.
Robert Koch Institut, auch von gestern.
Einzige, was wir sonst noch haben könnten, wäre das da.
Das da und das da.
Die hier sind von 8 Uhr.
Aber was ist das für ein total beknacktes Format?
Guck.
Und die sagen auch, wir haben, wir haben nur 3.795.
Wieder was ganz, wieder was ganz was anderes.
Und das sind irgendwelche chinesischen Dinger, wo ich echt keinen plassen Schimmer habe, was da...
Was da Sache ist, ja.
Also, ich weiß echt nicht, wo die ihre Daten herkriegen, die zwei.
Echt kein Plan.
Ich finde, ich finde diese Daten nicht, die die hier haben, bei der Morgenpost.
Das heißt, wir werden mal als Grund...
Oh, ich bin, ich bin irgendwie ein bisschen heiser.
Komisch.
Habe ich auch immer so viel geschwätzt.
Dann ist vielleicht keine gute Idee, dass ich jetzt streame.
So.
Oh je.
Ja, Leute.
Ja, hast du mal eine Seite von den Bundesländern, wo das draufsteht?
Hessen Corona.
Der Corona-Ticker.
Hallo, Knärbär.
Das Kultusministerium ist verantwortlich.
Hä?
Hessen Corona Zahlen.
Ich finde nix.
Ah, hier, guck mal.
Ah, yes.
Exzellent.
Exzellent.
Das war mal Frankfurt 21.
So.
Wir suchen mal nach...
Wie heißt das Zeug?
Ja, Covid.
Okay, danach muss man natürlich suchen.
Jeder nennt es Corona, aber wir nennen es SARS-CoV-2.
Und man findet, man findet einfach nix.
Und wenn man was findet...
Und wenn man was findet, dann sind die Daten halt von gestern.
Ja?
Die sind von gestern.
Und dann auch nur...
Als nicht barrierefreie PDF-WTF.
Ja, ja, wie soll man das parsen?
Wollen die mich veräppeln?
Ähm...
Die Daten werden um 17 Uhr aktualisiert.
Also, was ich halt merkwürdig finde, dass die...
Ich frage mich echt, wo die das herhaben.
Deswegen werden wir das jetzt folgendermaßen machen.
Habe ich mir schon überlegt.
Wir programmieren jetzt mal was.
Mit irgendwie...
Wir ziehen uns irgendwie...
Keine Ahnung.
Wir ziehen uns von hier...
Wir ziehen uns einfach einmalig von hier den kompletten Dump.
Und basteln das quasi so zurecht, dass wir daraus eine Karte generieren können.
Aber wir greifen dann nicht direkt auf die API jedes Mal zu.
Sondern wir laden uns das einmal runter.
Speichern das in der SQLite-Datenbank.
Und liefern den Kram aus.
Und dann ist das nämlich abstrahiert von dem, wo ich die Daten herkriege.
Das heißt, sollte ich nochmal...
Eine ordentliche Quelle finden, die auch immer aktuell ist.
Dann kann ich das da herholen.
Oder aber...
Ich bin ganz fies.
Und web-scrape hier die Seite irgendwie.
Die hier.
Könnte man eigentlich auch machen.
Ist auch eine Möglichkeit.
Aber keine schöne.
Wir nehmen das jetzt einfach mal von hier.
So, ich habe hier gerade mal mein ganzes Zeug aktualisiert.
So, ich habe schon das Corona-Projekt angelegt.
Wir gehen jetzt erstmal hier rein.
Corona.
Warte.
Wo ist es denn?
In Test-Stream ist es.
Das ist da, wo wir gestern drinnen waren.
Ne, ne, ne.
Stream.
Okay, da will ich das nicht drin haben.
Wobei, warum eigentlich nicht?
Ich meine, wir machen es doch im Stream.
Ist doch gut.
Welche IDE?
Das ist Rider.
Es ist die einzige sinnvolle Cross-Plattform-Dotnet-IDE, die es gibt.
Was nimmt die Daten von?
Okay, zeig mal her.
Deckt sich das?
Deckt sich das?
Deckt sich das?
Hessen?
203?
Nö.
Sag mal.
Die Daten sind ja komplett unterschiedlich.
Alter Monodeveloper.
Ich meine, die sagen Hessen 203 und Hessen selbst sagt 282.
Dafür haben die insgesamt, dafür haben die insgesamt halt schon die 5.426 und die offiziellen Daten, die ich finde, die haben halt nur 4.000 noch was.
Oh, jetzt wird sie hoh und jetzt kommt die Big-Brain-Diskussion im Chat, wie der Kram jetzt heißt.
Also was wir jetzt, wir abstrahieren das Ganze jetzt mal ein bisschen.
Wir schnappen uns jetzt einfach mal diese API hier, laden alles runter, speichern es in der SQLite-Datenbank und bauen da ein paar Klassen drumherum, dass ich die Quelle austauschen kann, zu was ich will.
So, der Wetter-Forecast, der kommt erstmal weg.
Das ist so diese Standard-Beispiel-API, die immer dabei ist.
Den benennen wir mal um in Corona-Controller.
Corona-Controller.
Corona-Controller.
So.
So, der ganze Schmodder hier kommt weg, den brauchen wir nicht und das hier kommt auch weg.
Wir haben ja noch keine Klassen, nichts, wir haben ja noch nichts drin.
So, das heißt, als erstes legen wir jetzt mal einen Ordner an für unsere Datenbank.
Oh, die Kirby-Musik.
Die, die, die, die, die, die, die, die, die, die, die, die, die, die, die, die, die, die, die, die, die, die, die, die, die.
Hehehehe.
SQLite-Datenbank, ja.
Mensch, wir machen eine MongoDB-Cluster.
Azure, Azure-MongoDB-Cluster.
Ich meine, so eine SQLite-Datenbank, die ist ja wahrscheinlich mit 5000 Datensätzen heillos, heillos, da brauchen wir ein MongoDB-Cluster stretched über drei Kontinente.
Mindestens.
So, ähm.
Als erstes fügen wir mal SQLite hinzu.
Hallo?
Kannst du mal suchen.
SQLite, EF Core, EF Core, SQLite.
Da ist es.
D-D-D-D-D-D-D-D-D-D-D-D-D-D-D.
Pog, Pog, Pog, Pog, Pog, Pog, Pog, Pog, Pog, Pog, Pog, Pog, Pog.
D-D-D-D-D-D.
So, da legen wir jetzt was an.
Und zwar ein AB-DB-Kon-Kon-Kontext.
DB-Kontext.
Oh, da kam es noch nicht installiert.
DB.
DB-Kontext.
So, ähm, so, bevor wir hier weitermachen, wir gucken jetzt erstmal, wie wir die Daten hier abgefragt kriegen.
Also, Corona-Tracker-AP.
Wir machen das jetzt ganz, ganz Noob-Style-mäßig.
Wir importieren einfach alles mal in unsere SQLite-Datenbank.
Und dann, ähm, speichern wir die einfach und importieren nicht mehr.
Und dann haben wir die Sachen erstmal drin.
Und danach kann ich gucken, wie ich den Kram aktualisiere.
Hauptsache, wir haben erstmal ein paar Daten drin.
Also, äh, HTTPS-Redirection wollen wir nicht.
Autorisierung, wer braucht Autorisierung?
Das ist ja komplett overrated.
So, Services, AddDB-Kontext.
Ne, das machen wir noch nicht.
Das machen wir dann erstmal, erstmal hier abfragen.
Ähm, so, wir laden uns jetzt erstmal den Kram von dieser Seite runter.
HTTP-Client, Get, String-Artikel.
Async.
Alles, was wir haben. Bam.
So.
Ah ja, was auch ganz praktisch ist.
Man kann jetzt hier nach, ähm, ups, vielleicht soll ich mal in den richtigen Ort lang gehen.
Stream.
Corona, da ist ja unser Projekt drin.
Ähm, man kann jetzt hier drin sagen, äh, .NET Watch Run.
Und was der jetzt macht ist, das ist sehr praktisch.
Äh, das ist sehr praktisch, wenn ich jetzt hier nämlich was drin ändere.
Äh, sagen wir mal, ich, ähm.
Ich gebe jetzt mal aus, ich gebe jetzt mal aus, was wir hier von der API abrufen.
Ja.
Ups.
Und ich drücke jetzt Speichern, dann aktualisiert sich das selbst und startet sich neu und gibt den Kram aus.
Das ist praktisch.
Ich finde das viel praktischer, wie jedes Mal hier auf Run zu drücken oder auf STRG F5 zu drücken.
Einfach Speichern drücken und es startet sich neu und man muss sonst nichts machen.
Das ist viel.
Ähm, dass der startet den kompletten .NET Server neu.
Und das macht man einfach.
Das macht man einfach doppelt.
Man macht unten, macht man ein Watch auf die Client Anwendung, dass er das ganze JavaScript Zeug neu baut.
Und oben macht man es einfach auf den .NET Server.
Und dann ist da, dann aktualisiert sich der Kram immer.
Und man muss nicht laufend auf irgendwas draufklicken oder, ja, das ist, das ist viel einfacher.
So, also wir rufen jetzt hier von der API das ganze Corona Zeug ab.
Ähm.
Chasen Convert.
Ich weiß, dass man eigentlich mit dem neuen ASP.NET Core.
Also eine Karte, wo der Corona Verlauf eingezeichnet ist.
Also was mir vorschwebt ist folgendes.
Was mir vorschwebt ist folgendes.
Äh.
Die hatten doch eine Demo.
Sowas schwebt mir vor.
Aber halt im, im, im weltweiten Stil, ja.
Sowas, sowas schwebt mir hier vor.
Heatmap, genau.
So, und dann, das, das, das dann im Endeffekt, was sollte rauskommen am Ende?
Das, ähm, USA recht verteilt ist und noch nicht so viel.
Europa hat halt hier einen roten Fleck.
Skandinavien ein bisschen und China und vor allem Italien hat einen ganz, ganz ultra roten Fleck.
So, sowas in der Richtung hätte ich das bei der Karte gerne raus, rauskommt.
Ähm, und bei der Statistik, bei der Statistik machen wir, Statistik machen wir hier sowas in der Richtung.
So ein, so irgendwie so ein Graph.
Sowas hier.
Mit Apex Charts, das ist relativ simpel.
Ähm.
Ähm.
Ähm.
Aber erstmal müssen wir, hi, hi, hi IQ, aber erstmal müssen wir den Kram abfragen und unsere Datenbank schreiben.
Damit wir die, die ganzen Corona-Daten bei uns überhaupt lokal haben.
Die Erde ist doch keine Kugel.
Na, das erkennt man ja schon hier dran.
Warte mal, wo hab ich, wo hab ich jetzt zugemacht?
Man erkennt ja schon hier dran, dass die Erde in Wirklichkeit eine unendliche, eine, hallo?
What?
Warte, es ist kaputt.
Okay.
Moment.
Erstmal gucken.
Demo.
Man erkennt ja allein schon hier dran, dass die Welt eine unendliche Ebene ist.
Ja.
Wenn das JavaScript sagt, dann hat, und JavaScript hat eigentlich immer recht.
Also sprich, die Erde ist weder rund, noch ist die Erde flach.
Die Erde ist in Wirklichkeit 2D.
Wie man hier sieht.
Und 2D, was man unendlich scrollen kann.
Und 2D, was man unendlich scrollen kann.
Hier habt ihr es zuerst erfahren.
Die Erde ist ein Sidescroller, genau.
Und das Interessante ist, dass das quasi, was man sich jetzt fragen kann, sind das vielleicht sogar mehrere Welten.
Ja, weil man sieht hier, die Heatmap, die Heatmap ist nur hier auf der Welt.
Und da ist die gleiche Welt, aber die hat keine Heatmap.
Das heißt ja auch, das hier muss, das muss eine andere Welt sein.
Parallelwelt muss das hier sein.
Das ist keine Disney-Musik, das ist Kirby-Musik.
Hier seht ihr, hier hat Neuseeland, hier hat Neuseeland einen Punkt.
Und hier hat Neuseeland keinen Punkt.
Das ist echt, wo ist mein Illuminati-Symbol?
Wenn ich in dem Tempo weitermache, dann kriegen wir heute nichts geschissen.
Aber, da sind wir ja auch schon gewöhnt, ne?
So.
So, jetzt gucken wir mal, dass wir den Kram irgendwie raus gepasst kriegen.
So.
Gucken, ob da was, ob da jetzt was rauskommt.
Gucken wir mal, jetzt, jetzt müssten wir ja eigentlich zumindest das Zeug halbwegs ordentlich als Jason gepasst zurückkriegen.
Gucken wir mal.
Da war, da, das sieht aber nicht ordentlich Jason gepasst aus, wenn ich ehrlich bin.
Aber doch, vielleicht schon.
Aber wie sieht, wie sieht denn das hier aus, was wir da überhaupt zurückkriegen?
Ja.
Erstmal den ganzen anderen Shit zumachen.
Was kriegen wir da? Confirmed.
Confirmed, ok, gucken wir mal hier, ob wir da Confirmed rauskriegen.
Confirmed.
Confirmed.
Warum printet der das denn so beknackt?
Warum printet der das denn nicht schön?
Warum printet der das nicht schön?
Das finde ich nicht, nicht gut von dem.
Achso!
Ah, ich geb's doppelt aus, deswegen.
Lull.
Ah, yes, jetzt ist gut.
So ist doch viel besser.
Ah.
Mal nicht aufpasst.
So, als erstes müssen wir mal, ok, also jetzt haben wir den Kram hier raus.
Vielleicht sollten wir erstmal ne, vielleicht sollten wir uns erstmal ne Klasse für das ganze Corona Zeug anlegen.
Ähm, also machen wir hier noch nen neuen Ordner.
Äh, Models.
Und da gibt's ne neue Klasse, die nennen wir, äh, wie nennen wir das den Kram überhaupt?
Wow, geh fort.
Ähm, wie nennt man den Kram hier denn?
Ok, also die Statistik nach, ähm, nach, nach bestätigt toten Ladies.
Und Recovered juckt mich nicht.
Mich interessiert erstmal nur Confirmed.
Ja, also sprich einfach nur die neuen Fallzahlen.
Den Rest kommen, wenn wir das haben, können wir den Kram danach abfragen.
So, und was mich hiervon interessiert, ist ja auch weder Latest noch sonst was, sondern die Locations interessieren mich.
So, und in den Locations steht dann sowas drin wie, keine Ahnung, Thailand.
Koordinaten sind dabei, das ist sehr gut, dass Koordinaten dabei sind, weil ich brauch Koordinaten für die Map.
Und ne History.
Das ist doch eigentlich alles, was ich brauch.
So, das heißt, dann machen wir mal ne Klasse, die dann, die heißt jetzt Corona Location.
So, und die hat nen, ähm, die hat nen Name.
Oder soll ich Corona Location, ich kann's auch Corona, Corona, ja, ich nenn's Location.
Eigentlich, eigentlich ist Country, Country besser, ja.
Weil, weil es geht ja letztendlich, geht's ja um das, na komm, wir nennen's mal Corona Country.
Hört sich an wie irgendwie Fortnite.
Ja.
Oder Volksmusik oder so.
Name hat das Ding.
Den Country Code, den braucht man vielleicht, wenn man mal ne andere API verwendet, schon.
Muss man mal gucken.
Ähm, Latest ist glaube ich gar nicht so schlecht, Latest zu haben.
Sind dann die Koordinaten, ja, das ist, ähm, also ich würde, wir können ja mal gucken, was für ne Koordinate in Deutschland drinne steht.
Germany.
51,9, das ist irgendwo in der Mitte.
Also sprich, da, da sind keine Koordinaten für extra Fälle drin.
Da such ich ja immer noch nach ner API, wie ich da, wie ich da drauf komme.
Also, wer die Daten dazu hat.
Ich hab bis jetzt noch nix gefunden.
So, also, Koordinaten haben wir hier.
Das heißt, so, wir haben Corona Country als Klasse.
Latest, das können wir mal reinmachen.
Die Fallzahlen gehen ja nur hoch, also können wir das als Unsigned-Int machen.
Und dann nennen wir das hier, hier Current oder so.
Dann brauchen wir noch die Koordinaten.
Die, die kapseln wir aber nicht in extra Koordinaten, äh, Objekt wozu.
Sondern wir machen einfach hier ein Double.
Also das hier.
Längengrad, äh, Breitengrad, Längen, Längengrad.
Und dann gibt's ne History.
In der History steht drinne Datum und jeweils Infizierte.
Okay, das heißt, wir brauchen nochmal ne extra Spezialklasse dafür.
Die nennen wir irgendwie keine Ahnung.
Ist, nee, äh, oh Gott.
Wie nennen wir das Ding?
Ähm, Corona Date.
Kein Schlimmer.
Aber ich bin beim Benennen.
Timeline.
Ja, Timeline finde ich, äh, also ne History ist schon gut.
Aber wie nenn ich denn den Typ?
Ist, History ist okay.
Ja, aber komm, wir können's auch Timeline nennen.
Aber ich find History ist eigentlich okay.
Ähm, dann nennen wir das History.
Das ist, wenn einem nix einfällt, dann nennt man die Dinger so.
Das geht immer.
History Entry.
Das ist, also das ist schön nichtssagend.
Ähm, aber hilft einem, wenn einem nix einfällt.
So.
Das heißt, wir haben jetzt ne Collection von History Entries in der Corona History.
Klingt schon wieder huge brainig, ja.
So, und da ist dann der Verlauf drinne.
Wir können's, wir können's auch meinen.
Da ist dann der Verlauf drinne.
Ja, kann ich auch machen.
Aber ne eigene Klasse ist wahrscheinlich beim Serialisieren und Deserialisieren besser.
Ähm, weil ich muss ja dann am Ende das Chasen Zeug dann zu meinem Client wieder schicken.
So, und so'n History Entry hat im Prinzip nix anderes als n Date und, äh, n Counter oder sowas.
Counter.
So.
Gut, mehr brauchen wir jetzt nicht.
Da können wir alles, da können wir alles mit abbilden erstmal.
Nachdem wir das aber in die Datenbank schreiben, brauchen wir auf jeden Fall ne ID.
Ups.
Sonst meckert, äh, die Datenbank.
Dass wir keine eindeutigen IDs für unser Zeug vergeben können.
Gut.
Also, wir fragen jetzt die, die confirmten Corona-Fälle ab.
Und in den confirmten Corona-Fällen wollen wir...
Da machen wir jetzt ne Schleife drüber.
Das, das kann jetzt auch ruhig hässlich sein, was wir da machen.
Weil, wir brauchen das genau einmal.
Wir brauchen das einmal, um's in die Datenbank zu importieren.
Und danach nicht mehr.
So.
Äh...
Okay, das ist, was ist das hier?
Das ist dann eine Location.
Und wenn ich das ausgebe, sollte er mir jetzt mich zuspammen mit dem ganzen Kram.
Genau.
So.
Und in dieser Location drinne sind dann wieder Country zum Beispiel.
Okay.
Das heißt, jetzt sollte er mir nur die Länder ausgeben.
Die Zahlen ändern sich doch jeden Tag hier.
Ja, das importiere ich dann einfach jeden Tag.
Aber jetzt zum Basteln...
Was?
Aber jetzt zum Basteln ist wichtig, dass ich nicht bei jedem Mal Neustarten die API von dem Typ hier abfragen muss.
Das ist ja...
Das findet er bestimmt auch nicht geil.
Was ist das jetzt für Schmerzen?
Ach, Moment.
Äh...
Locations brauche ich noch.
Null.
Ah, yes.
So, jetzt haben wir die...
Oh!
Coconaland ist am Start.
Aber das, das hört ja gar nicht mehr auf.
So viel US?
Corona, genau.
So, also was hier war...
Country ist das da.
So, dann haben wir jetzt noch einen Country Code.
Das ist das hier.
Dann haben wir noch einen aktuellen Latest.
Latest haben wir dann noch.
Und danach kommt eigentlich schon die History.
Hab ich irgendwas übersehen?
Ah, die Koordinaten brauchen wir noch.
Die Koordinaten brauchen wir noch.
Also.
Die Koordinaten brauchen wir noch.
Ko...
Ko...
Was?
Koordinates?
Gibt es?
Ja.
Ach, der Längengrad und Breitengrad.
Okay.
Schreibt dann das?
Ja.
Der, der...
Also, die Schreibweise von Längengrad, Breitengrad ist immer ein bisschen unterschiedlich.
Manche Lat wird eigentlich immer Lat abgerätst, aber Long oder Lon liegt, denke ich, daran,
dass mittlerweile Lon fast schon bevorzugt wird.
Weil Lon eben ein Datentyp ist und nicht in jeder Sprache funktioniert.
Wie viele Monitore?
Ich hab zwei Monitore.
Ich hab zwei Monitore.
Wenn ich was übersehe oder irgendwelche Subs übersehe, müsst ihr mich mal anscheißen,
weil ich mich konzentrieren muss dann...
Ah, übersehe ich das mal schnell.
Talks to Warzone?
Nee.
Gut.
So, jetzt haben wir eigentlich alle Informationen, die wir brauchen, außer die History vom
jeweiligen Land.
Das kriegen wir auch relativ schnell.
Und wenn wir mal schauen, was wir hier haben, dann haben wir hier...
Das kriegen wir auch relativ einfach hin.
Aber vorher sagen wir mal hier...
Corona Location...
Nee, wie hab ich's genannt?
Nicht Location, ich hab's wie genannt?
Corona Country.
Okay.
So.
So, und das Ding braucht eine ID, die...
Current.
Current ist unser Latest.
Breitengrad.
Längengrad.
Längengrad.
Name ist der Name von dem Ding.
Country Code is Code.
So.
Ach Quatsch, die Datentypen stehen mir hinten und vorne nicht.
Uint.
Okay.
Two Objects.
Uint.
Next.
Two Objects Double.
Two Objects Double.
Two Objects Double.
Next.
Two Objects Double.
Next.
Two Objects Double.
Next.
Next.
Two...
Das ist einfach nur Text oder?
Ist das ein Programm oder ne Seite?
Was?
Das hier...
Das ist ein Text-Editor.
Also ein Text-Editor.
So, also jetzt legen wir uns den Kram an und jetzt müssen wir hier nur noch durch alle
History-Einträge durchgehen und davon nen Corona...
Wie hab ich's genannt?
Was hab ich gesagt?
Den History-Entry...
Ein Corona-History-Entry erstellen.
Vielleicht sollte man doch factory einbauen.
Dass das dann mehr nach Java aussieht.
aussieht.
Ähm, okay.
Das heißt,
also ein Programm, ah, yes,
excellent. Ähm,
das heißt, wir müssen jetzt hier alles durchgehen,
nochmal eine Schleife machen,
und zwar alles durchgehen, was hier
in, in der
History drin steht.
History, also sprich, das da, was wir hier
zurückkriegen, History,
alles, was da drin steht,
müssen wir nochmal eine Schleife drüber machen.
So, okay, lassen wir uns, wir lassen uns jetzt mal nur
den Kram ausgeben, wir lassen uns nur hier mal
den, den, die Fallzahlen
ausgeben. Äh, wie macht
man das jetzt überhaupt? Value?
Ne, Name?
Key? Äh,
Moment, Two?
Oh, fuck, wie komme ich da jetzt überhaupt dran?
Äh,
äh, warum hat denn das Ding kein Key
und Value?
Hat nicht das wieder ausgedacht?
So, ein Alex!
I'm back! Sehr schön, zwei Monate,
Dankeschön.
Subscriber!
Moment, wie kriege ich denn da jetzt den Kram raus?
Two Object, ja, zu welchem Object?
Kann man machen, Two...
Kann man sowas machen?
Sowas? Ne, oder? Das wird nicht funktionieren.
Ne.
J-Object.
Ne. What the fuck?
Okay.
Eh, Value? Value!
Gott, ist das beknackt, Alter!
Ich struggle immer
mit diesem komischen Jason-Parser da rum.
Ich weiß, ich glaube, ich weiß,
woran es liegt.
Man muss, ich erinnere mich da gerade dran,
man muss hier irgendwie den Kram vorher umstellen.
Name,
Value, genau.
So, jetzt funktioniert es, passt auf.
Ah! Was?
Moment, ich mach doch irgendwas verkehrt.
Ich mach irgendwas verkehrt gerade.
Das ist gar kein Fehler von da unten.
Gut,
das da oben ist kaputt.
Was? Ich caste
irgendwas verkehrt.
Freunde, irgendwas mach ich kaputt.
Was?
Hä? Das ging doch eben noch.
WTF, das ist so kompliziert ist es jetzt ja nicht.
Qua- Wow.
What?
Ach. Guck mal da.
Manchmal, äh.
Haha.
Wenn man den Kram nur sinnlos
nur sinnlos copy-pasted,
dann kann das nicht funktionieren.
Qua- Hey, drei Monate, dankeschön.
Huge. Und der Pro-Gaming-Sebi
ist auch am Start.
So viele nice Subs.
Pro-Gears. Easy.
Gibt es eine Corona-Reste?
Ja, sowas in der Richtung.
Da frage ich gerade den ganzen Kram ab, aber
es gibt keine richtig gute.
Okay, weiter.
So, jetzt müssen wir den Kram rückgängig machen.
So, mal gucken, ob es jetzt funktioniert.
Ah,
jetzt klappt es. Guckt. Leute, jetzt
funktioniert es.
So, das heißt jetzt haben wir die
History.
Die Corona-History, die kriegt jetzt
neue Liste.
Und da schreiben wir
jetzt den Kram rein.
Corona-History.
History.
Add.
Ah, Quatsch.
Weiß drauf.
Liste, warum auch nicht.
Ah. Add.
Corona-History.
Das heißt, da kommt jetzt rein
ein Corona-History-Entry.
Und das besteht aus
einem Counter. Das ist
Value.
Also ne, das ist das da.
Also sprich, der zweite Wert
ist das. Tainzer hat
zwei Abos verschenkt.
Nice, Dankeschön.
Huge.
Richtig, richtiger Sub. Kein Primal.
So, Value.
Dann haben wir hier noch
das aktuelle Datum.
Und das ist
DateTime.
Pass.
Und zwar eName.
Und jetzt bin ich mal gespannt, ob der Kram funktioniert,
den ich hier gebastelt habe.
Das müssen wir noch zu einem
Int casten.
So, gucken wir mal, ob das funktioniert. Mal gucken, ob das
ohne Fehler durchläuft. Anscheinend schon.
Okay, das ist nice. Gut.
Jetzt haben wir den ganzen
Kram hier raus gepasst. Jetzt können wir es eigentlich
in der Datenbank speichern.
Das heißt, wir sagen jetzt hier
Service.
Add DB Context.
Unseren DB Context.
Eine Sache brauchen wir hier
noch im DB Context. Eine Sache,
die ich immer vergesse. Und zwar, deswegen
gucke ich die jetzt ab, weil ich die immer
vergesse.
Muss ich mal kurz
in mein Git
Lab gehen und schauen.
Weil ich mir das nie
merken kann. Und zwar
muss der Kram
so aussehen.
Kann ich mir nie merken.
So, so ein paar Sachen, die ich mir nicht merken kann,
habe ich mir mal irgendwohin kopiert, dass ich mir irgendwann mal
merken kann vielleicht. So, jetzt
legt er nämlich die Datenbank an, die den
wahnsinnigen tollen Namen data.database
hat. Dass man sofort weiß,
was drin ist.
DB Set
aus Corona
Country
äh
Countries.
So, sehr schön. Was meckert er hier?
Never
instantiated. Ich weiß.
So, add DB Context.
Gut, jetzt kann ich mir den hier injecten.
Den DB Context.
Und kann den Kram, den wir von der
API abrufen, speichern.
Vorher muss ich allerdings sagen,
database
erstmal gucken, dass auf jeden Fall der Kram
erstellt ist.
Und danach kann ich
den Kram
adden. Quasi hier
Corona Countries add
ja.
So, und jetzt schreibt er den Kram in die Datenbank
und hier speichere ich es.
Und jetzt sollte ich eine Datenbank haben, wo mein
ganzes Corona Zeug drinsteht.
Falls ich das mehrfach starten muss,
sage ich jetzt erstmal hier deleted
und danach wird er angelegt.
Schauen wir mal, ob das Ganze jetzt funktioniert. Ob es ohne Fehler
durchläuft. Anscheinend schon.
Äh, der Tainzer sagt, ich
considere derzeit, ein
sehr schöner Satz, äh
von GitLab zu GitHub zu wechseln
wegen den Actions. Denkst du,
das ist ein Smart Move?
Ist gar nicht vielleicht schwer, dass migraten ist.
Alter, was für ein Satz!
Was für ein Satz!
Oh, der Hype Train war erfolgreich, Leute. Huge Poggers.
Ähm, ja, wenn du Actions
brauchst und dir Actions lieber, besser
gefällt als das GitHub CI, warum nicht?
Ich meine, es ist ja nicht so schwierig.
Äh, Git, Git-Projekte.
Du addest ein zweites
Remote und pushst den Kram und fertig.
Also ist ja nicht schwierig, so als wäre
GitHub, äh, als wäre Git,
Git-Projekte irgendwie schwierig. Du kannst einfach
beides übergangsweise benutzen, ne?
Du kannst ja mehrere Remotes hinzufügen in dein
Repo. Fügst
da einfach noch dein, dein GitHub,
GitLab, äh, dein, dein GitHub, nehmen
dein GitLab Remote hinzu und gut ist.
Habe ich denn
einen ordentlichen Datenbank-Browser, um mal in die
Datenbank reinzugucken jetzt hier?
Ähm, DB,
wie heißt der Kram, DB?
Äh, was, was, was gibt's denn schön?
Einen schönen SQLite-Browser
für Linux, was gibt's denn da?
Gibt's da was Schönes?
DB Visualizer,
ach, guck mal, es gibt ja sogar den offiziellen
SQLite-Browser. Hab ich sogar installiert,
konnte mich bloß noch mal dran erinnern.
Okay, ähm,
Open
nach Stream
Corona, Corona, DB.
Guck mal mal, was da jetzt drinnen ist.
Jutsch, alles
drinnen, Leute. Hat importiert.
Guck mal mal nach Deutschland.
Ist irgendwie nicht so ganz.
Germany, 4585.
Ja, das ist die aktuelle Version.
Die aktuelle
Variante hier, die man aus den Daten kriegt.
In Wirklichkeit sind sie wohl mehr.
Nee, du, das sieht jeder.
Ich glaub, die ersten 25 Subs
oder so haben sowas, haben sowas neben dem Namen.
Der Sibaro hat das auch.
Es gibt noch ein paar, ich glaub, der Serious Max hat's
auch. Ähm,
ein paar haben's.
Das stimmt, der Sibaro war der allererste
Sub, ja. Der SilentPain,
genau, den hab ich jetzt ganz vergessen.
Fünf, ich glaub, 25 Leute
haben das. Gut, der Kram ist importiert,
das hat funktioniert. Das heißt,
nachdem unsere Datenbank jetzt befüllt
ist, können wir den ganzen Mist
erstmal wieder auskommentieren.
Hat sich wahnsinnig gelohnt, dass wir den ganzen Kram programmiert
haben. Ähm,
aber jetzt ist
ja der Kram in der Datenbank drinnen.
Und jetzt können wir gucken, dass wir das über unsere
API abgefragt kriegen. So, dann nehmen wir unseren
Corona-Controller.
Hat leider nicht ein DB-Tool integriert.
Möglich. Nee, hab ich aber ausgeschaltet.
Ähm,
Corona-Country liefern
wir zurück eine Liste.
Und da brauch ich erstmal meinen Datenbank
Kontext.
Dass das überhaupt funktioniert.
Ja.
Return
Countries.
Bam. Gut.
Das ist nice. Jetzt, jetzt
starten wir das, beziehungsweise wir müssen es ja gar nicht
starten, weil sich das automatisch startet.
Weil wir hier einen Watch haben.
Und jetzt hauen wir mal den Postman auf.
Oh, ich hab den Postman gar nicht installiert.
Leute, was sollen wir installieren? Postman
oder Postwoman?
Das ist jetzt kein Witz und auch
kein Fremdschämenwitz. Das gibt's
wirklich. Aber anscheinend gibt's
da keine Pakete dafür.
Postman, Postwoman, Rest.
Es gibt, es gibt beides.
Es gibt
beide Projekte.
Ich weiß nicht, warum man
sich da an dem Namen so gestört hat.
Achso, das eine ist rein
Browser-basiert, oder wie?
Das ist Postwoman,
was halt mit einem Alien-Kopf dran ist.
Warum auch immer.
Aber dann installieren wir mal Postman.
Äh, Postman.
Posthentai,
das sind wir auch. Das war...
Das war ja klar.
Oh, nee. Das ist nix für mich,
Patrick. Gehen wir fort.
So, es wäre jetzt natürlich sehr nice,
wenn da kam... Pearl! Igitt!
Wenn ich eine Sache noch
weniger mag als Java, dann ist es Pearl.
Ich weiß aber, dass
mein Paketmanager auf Pearl-Basis ist.
Pearl, die einzige Write-Only-Programmiersprache.
Vielleicht
nehmen wir Brainfuck.
Sag mal, was macht der denn da?
Installiert der jetzt das halbe Internet, oder was?
Was macht der da so lang?
Arch, by the way.
Was zum Teufel
macht der da?
Der macht nichts.
Der macht ein Package.
Er strippt gerade, ja.
Excellent-Musik, ja.
Jetzt wird noch compressed.
Der hört keinen auf. Legt bestimmt alles
nur daran, dass es ein Pearl-Programm ist.
Wobei man ja gesehen hat, dass
das überhaupt nicht das Programm selber macht.
Oh, jetzt wird gepackt.
CPU.
CPU.
Wie viel Kerne hat meine...
Ich hab vier Kerne der VM gegeben.
Kein Wunder, dass das so wahnsinnig schnell ist.
Das braucht mindestens zwölf Kerne.
Oh, die Musik.
Ih.
Die Musik hört sich aber jetzt kaputt an.
Ah, besser. Yes.
Excellent.
Drei Stunden
Paket installieren, das kann Windows ja besser.
Ich hab wirklich keinen Plan, was
er da gerade so lange macht.
Er packt...
Der packt das wahrscheinlich dreimal ein und aus.
Aber warum macht er das?
Man weiß es nicht.
Wahrscheinlich
erstmal Virus installieren.
The fuck?
Können wir nicht mal richtig weitermachen,
bis ich... Ah, jetzt ist er fertig.
Jetzt ist es excellent.
Yes.
240 MB, das ist ja nix.
Rootkit ist raus.
Post. Man, da ist er.
Also.
Von der Idee her sollte ich jetzt,
wenn ich eine Abfrage mache,
gegen
Localhost Port 5000
sollte ich auf
Corona
sollte ich den Kramer als Antwort kriegen.
Da ist es.
Bam.
Das kommt jetzt lokal aus meiner Datenbank.
Das heißt, ich muss nicht mehr diese komische API
hier aufrufen.
Das ist natürlich praktisch.
Funktioniert.
Das heißt, jetzt können wir uns unserem
Front entwidmen.
Dinge, die beim ersten Mal funktionieren, geht nicht.
Naja, es hat ja nicht alles beim ersten Mal funktioniert.
Gut. Ach ja.
Ich hab gerade was gesehen,
was noch gefehlt hat. Ist euch aufgefallen?
Ist euch aufgefallen,
was noch gefehlt hat?
Was fehlt hier noch?
Die History fehlt noch.
Ich brauche ja auch die History.
Im Frontend dann.
Deswegen muss ich jetzt sagen noch
Include
ähm
History.
Und das Geile ist, Leute. Passt mal auf.
Das ist echt so eines der besten
.NET Core-Tipps ever.
Wenn ich jetzt Speichern drücke,
dann startet
er sich hier im Hintergrund neu.
Und seht ihr, ich muss nix machen. Ich klicke jetzt einfach nochmal
auf Send. Er hat sich im Hintergrund neu gestartet.
Und ähm
jetzt ist alles dabei.
Einfach mal 100
Wie viel?
Der Scrollbalken ist weg, Leute.
Ja, da ist er. Scrollbalken, kommst du her?
Der Scrollbalken ist kaputt.
Guck mal, ich kann doch nicht mal runterscrollen.
So viel Zeugs ist da drinnen.
Der Scrollbalken macht das nicht mit.
Und von der Idee her würde ich
den KM ja auch nicht direkt auf der
Startseite abrufen.
Ähm, ich bin ja gerade mit einem Kollegen dabei.
Er hat gesagt, er will eine App zu basteln
für ähm
einen
lokal, also keine App
im eigentlichen Sinne.
Eine Website, die man aber auch ordentlich mobil verwenden kann.
Für einen
lokalen Heizungsinstallateur
Service.
Weil aktuell
machen die das so,
die gehen in ihre
die haben irgendwie eine riesen Excel-Tabelle, machen Termine
mit den Leuten aus und machen so
die Routenplanung von Hand.
Und er sagt, wir können es einfach so machen,
wir exportieren eure Kundendaten
und ihr sagt, welche Kunden ihr besuchen müsst
und das Ding berechnet euch eine
nicht für meinen Heizungstypen
und das Ding berechnet euch
einfach die optimale
Reihenfolge, na optimal geht ja nicht.
Eine nahezu optimale Reihenfolge
in welcher
Reihenfolge ihr die
Kunden besuchen müsst.
Von der Entfernung her.
Wie bin ich jetzt drauf gekommen?
Genau, und da mache ich das so,
da mache ich das über GraphQL,
das ist der neueste Shit, Alter.
Die Abfrage von Daten.
Ist recht praktisch, weil
die haben irgendwie 50.000
Kundendaten, sonst war es da am Start
und wenn ich das
alles auf eine Seite laden würde, wäre ein bisschen viel.
Aber in dem Fall glaube ich,
brauchen wir das hier nicht.
Und damit Routen per Google Maps.
Das war eines der Gründe, warum ich heute Morgen
nach einem ordentlichen Geocoding-Service gefragt habe.
Hier haben wir
einen Google Business Account
gemacht und auch
schon mal probiert ein bisschen.
Funktioniert ganz gut,
aber es ist eine kostenlose Lösung, wäre halt nice.
Ist auch kein Problem.
Ist auch kein Problem,
weil die Routenberechnung über Google
machen wir eh nicht darüber.
Die Routenberechnung macht ihr in ihr Navi.
Es geht bloß in die Richtung,
in welcher Reihenfolge sie die Termine machen müssen.
Mapbox bezahlt man auch.
Ja, ich muss mal gucken.
Ich muss mal gucken.
Ich weiß nicht, ob ich euch die App zeigen darf.
Ob er da was dagegen hat.
Sonst hätte ich euch mal gezeigt.
Ja, OpenStreetMap.
Ich nehme aktuell OpenStreetMap.
Ich habe mir einen JSON exportiert
mit
allen Postleitzahlen und
Städten in Deutschland.
Das heißt, für das Autocomplete-Feld.
Das ist relativ easy an der Stelle.
Aber sobald Straßen dazukommen, wird es halt
eine ganze Ecke komplizierter.
Und die Routenberechnung
mache ich mit einem anderen
OpenSource-Projekt.
Das macht die Routenberechnung für mich.
Ich mache das ja nicht selbst.
Es ist ja quasi nicht nur
Traveling Salesman.
Es ist Traveling Salesman mit mehreren Fahrzeugen
und Zeitfenstern.
Das programmiere ich doch nicht selbst.
Da bin ich verrückt.
Dann nehme ich was, was fertig ist,
was das schon kann.
Das mache ich doch nicht selbst.
Ich glaube, es geht los.
Ich habe gelabert.
Wo heißt das Ding?
Verrate ich nicht.
Mir ist noch eine Sache aufgefallen.
Was Fail ist.
Von dem, was ich hier gebastelt habe.
Was richtig Fail ist.
Guckt mal.
Die Reihenfolge der Tage stimmt nicht.
Wie mache ich das?
Am besten wäre natürlich, wenn ich beim
Importieren die Reihenfolge der Tage richtig mache.
Habt ihr die angesprochen oder sich beauftragt?
Das ist in dem Fall ganz einfach.
Halbe, halbe.
Der Chef,
dem die Firma gehört,
ist ein Freund aus der Schule
von meinem Kollege.
Und
er hat ihm wahrscheinlich erzählt,
dass man da was viel Praktisches programmieren könnte
und der hat ihn dann beauftragt.
Also halbe, halbe.
Ich muss den Kram hier übrigens noch sortieren.
Und jetzt stehe ich ein bisschen
auf dem Schlauch.
Wie mache ich das jetzt am besten?
Aber das funktioniert nicht.
Ich müsste jetzt hier sagen Order By,
aber das funktioniert auch nicht.
Wie mache ich das jetzt richtig?
Wie sortiere ich?
Wie sortiere ich die History?
Also das hier ist ja quasi so ein Subquery.
Unter der Haube in der Datenbank.
So ein Subselect ist das hier
unter der Haube im Endeffekt.
Wie mache ich denn das jetzt?
Von der Theorie her
muss ich jetzt den Kram
hier sortieren.
Okay.
Result.
Und dann
machen wir erstmal eine Liste drauf,
dass es kein Datenbank-Kram mehr ist.
Ja genau, ich werde es auch nachher sortieren.
Also ich frage es jetzt erstmal ab
und sortiere es jetzt quasi
Post-Processing mäßig.
Das macht dann halt nicht die Datenbank oder so.
Aber kann sie auch gar nicht,
weil ich habe es ja da gar nicht
sorted gespeichert.
Ne gut, können wir ja mal machen.
Also das heißt
ich sage jetzt hier Result.
Was geht da?
For each?
Oder aggregate?
Ne, kommt for each.
For each.
Das ist aber
nicht schön.
History
Order by
Date.
So was in der Richtung, geht das?
Ah, return value is not used.
Boah, das ist aber echt unschön jetzt.
Na?
Ich meine, funktionieren wird es wahrscheinlich,
aber schön ist es nicht.
User123698745
User123698745
Absolut high IQ User Name.
Dankeschön für den Sub.
PG Routing, habe ich noch nie gehört.
Ich weiß, es gibt einen Open Street Maps
Postgres
Export irgendwie.
So, es ist jetzt sortiert.
Erster, 23, jetzt ist es sortiert.
Guck, jetzt funktioniert es.
Aber schön ist das hier nicht. Na?
Erstmal alles abfragen, um es danach
nochmal neu zu sortieren. Schön ist das nicht.
Also, ich müsste das beim Import schon richtig
speichern.
Ich müsste das eigentlich beim Import einmalig sortieren.
Hier.
Also, ich müsste quasi hier sowas sagen, History
und hier Sort.
Also quasi, ähm,
egal, wir lassen es jetzt so.
Funktioniert ja. So viele Datensätze
sind das jetzt auch nicht, dass das jetzt wahnsinnig langsam wäre.
Okay, ähm,
jetzt kriege ich den Kram zurück. Gut, jetzt können wir
mit unserem Frontend anfangen.
Ähm, wir machen eine neue,
wir machen eine neue Frontend App.
Und zwar Stream.
Oh, die Musik ist nice. Okay.
Ähm,
jetzt haben wir den Kram sortiert. So, jetzt müssen wir ein neues
Frontend anlegen. Also,
View, Create, Client App.
Ach ne, Moment, ich hab noch was vergessen.
Äh, wir machen erstmal
ein Git Repo aus der ganzen Sache.
Git init.
JIT init.
Äh, git init. So, und da
kopiere ich jetzt mal ein ordentliches git ignore
rein, was ich mir jetzt auch mal
aus meinem anderen Projekt
klaue.
Dass ich nicht unnötig viel Zeugs
da drinne
einchecke. So.
So. Äh,
git commit
a-m init.
Gut, sehr schön. Ähm,
und jetzt gehen wir da rein und legen unsere
Client App an. Ähm,
so, brauchen wir nicht.
Linter formatter. Ha, lol, Alter.
Wer braucht schon Linter?
Mein Code ist ohne Linter viel besser
lesbar. Big, big brain
braucht, wenn man, wenn man ab ner
gewissen Hirngröße
braucht man kein Linter mehr.
Dann lintet man quasi instinktiv.
git ignore.io
Ah, yes.
Excellent.
Das ist wirklich praktisch. Das kannte ich noch nicht.
Das ist wirklich praktisch. Ne, kein
Typescript. Ne, ne, hör mal auf.
Ähm, ich will es nicht komplizierter machen als
ohnehin. So, ähm,
reicht,
reicht. Wir machen den Router rein und State Manager
und es reicht. PWA Support
ne, nicht wirklich. Wozu? Ähm,
nein, wollen wir nicht. Wir wollen
kein History Mode. Alles ins
Package.json rein und auch nicht speichern
for future projects.
Jetzt installieren wir erstmal das halbe
Internet, weil das ist
JavaScript. JavaScript funktioniert
ohne das halbe Internet nicht.
Und die restliche andere Hälfte des Internets
funktioniert ohne JavaScript nicht.
Das heißt, man braucht immer das 100% des Internets.
Ja, Sibaro habe ich heute morgen noch
erzählt. Ich habe einen halben Schrank voller Nudeln.
Immer. Klopapier habe ich nur
5-6 Packungen im Vorratsschrank. Also,
also reicht alles.
Äh, so. Enden wir den Kram mal.
Huge Comet.
Big Brain Comets.
Gut, also. Und jetzt können wir
folgendes machen. Hier oben,
hier oben läuft der,
der, das Backend.
Und hier unten
läuft das Frontend. Das heißt, wir gehen jetzt hier
unten hin und sagen, ja, surf.
Und schon
Ah, ne. Wir müssen, wobei, ne.
Erstmal okay. So, und schon
kann ich mal meine IDE woanders
hinschieben. Wir machen
Visual Studio Code auf. Ach, ne. Wir haben ja
Wir haben jetzt
ja die Open Source Variante davon.
Die ohne Microsoft Gedöns.
Warum habe ich das nochmal installiert?
Ich weiß es gar nicht mehr.
So, und jetzt haben wir hier unser
Frontend am Start. Source.
Main App. Alles gut.
Äh, wir sind natürlich gleich mal so hart
drauf und, ähm, hauen
nochmal ein ordentliches
Frontend Framework mit drauf.
Also für CSS und Buttons
und User Elemente. Ob wir es brauchen?
Keine Ahnung. Ähm.
Moment, wie ging das nochmal?
Ich kann mir das immer nicht merken.
Das macht man immer einmal zum Projekt und dann nie wieder.
Ja, View Add.
Genau. Dann sieht das auch alles
ein bisschen hübscher aus.
Ne, das haben wir uns noch nicht angeguckt, Tommy. Das haben wir uns noch nicht angeguckt.
Default.
Ah, yes. Excellent.
So. Sehr schön.
Und so, so Kram wie, äh,
Node Modules
sollte der gar nicht adden da drinnen.
Gut, dann gucken wir uns mal unser Frontend
an, wie das so ausschaut jetzt. Das ist natürlich noch
das Default Template. Da schmeißen wir
jetzt so gut wie alles raus. Was hältst du von
WebStorm? Ähm.
Ich hab's mir kurz mal angeguckt.
Es hat mich jetzt nicht so vom Hocker
gehauen, dass ich es Instant benutzen wollte.
Aber man braucht immer eine Weile, bis man da durchblickt.
Ich hab kein...
Ich hab kein Chrome installiert?
Warum hab ich denn kein Chrome installiert?
Was ist das denn?
Abmahnung ist raus.
Warum hab ich kein Chrome installiert?
So.
Jetzt aber.
Localhost Port 80. Nein.
Google.
Localhost.
Der Localhost Port 8080.
Da ist unsere Default App,
die natürlich nichts macht, außer
Default App zu sein.
Git Settings. Ich brauch meine Schriftart.
Bäh.
Bäh.
Warum hab ich meine
Schriftart hier nicht?
Font.
Ja. 22.
Und zwar
Hack.
Vielleicht doch nur 20. Wie groß.
Hören wir mal 18.
Ah, so ist doch gut.
Aber 18 ist mir fast
ein bisschen klein. 19?
Ja, so ist das doch schick.
Ist das Hack jetzt?
Machen wir was anderes rein.
Ja, das ist anscheinend doch richtig.
Ach, lassen wir es so.
Gut.
Ähm.
So, und jetzt wollen wir noch Tabs. Tabs gucken.
Ja, wir haben das ja letztens
runtergeschmissen.
Tab Size.
Wir haben ja das andere Visual Studio runtergeschmissen.
Das heißt, ich hab hier nichts installiert für drinnen.
Zumindest
keine Config-Datei. Extensions haben wir
aber die wichtigen Sachen installiert.
Okay. So.
Defaultmäßig, wir schmeißen jetzt erstmal diesen
ganzen Crap raus.
App Bar,
was auch immer, hast du nicht gesehen. Alles fort.
Und das geile ist, ich muss jetzt auch nur
hier speichern und zack, aktualisiert
sich das Ganze. Import. Hello World.
From. Ah, piss dich.
Weg. Weg.
So. So ist das schön.
Erstmal alles schön
leer.
Ähm.
Gucken wir mal, ob der da überhaupt irgendwas. Content. Weg.
Okay.
Inhalt funktioniert noch.
Routen. Main. Main Routen.
Home.
About. About brauchen wir grad nicht.
Und fort.
Erstmal ein bisschen aufräumen, das Standard-Zeug.
Äh, Home brauchen wir.
Und damit Home funktioniert,
müssen wir hier einen,
ah, wie ging das? Router
View?
Router View machen. Eine Router.
Oh. Moment.
Wie ging der Crap? Ach, fuck. Wie ging das nochmal?
Was? Achso, ich hab
beides.
Sehr gut. Sehr schön.
Router View. Home.
Kommt hier auch noch raus.
Zack. Zack.
Gut. So. Jetzt haben wir
den Kram aufgeräumt. Was, was eine schwere Geburt, ey.
Michael, du bist
jetzt ja noch rechtzeitig, äh, hast ja noch
den Stream erwischt. Gut.
Jetzt haben wir alles. Ganz wichtig,
wir müssen erstmal einen Button machen.
Warum geht denn der Button nicht?
Warum ist das jetzt kein Button?
Oh. Da ist
ein Button. What?
Warum geht der Button da nicht?
Habe ich jetzt irgendwas, irgendwas zu viel gelöscht?
Low, äh,
Low Brain?
Habe ich jetzt irgendwas zu viel gelöscht? Warum?
Hä?
Ich will mit der Map anfangen und mich nicht mit so einem
Kack rumschlagen müssen. Könnte das
das Problem sein, weil es im Content ist?
Äh.
Gute Frage. Nächste Frage. Ich habe garantiert
irgendwas zu viel gelöscht.
Ich habe garantiert zu viel gelöscht. Irgendwas,
irgendwas zu viel.
Ähm.
Ich habe keine Ahnung.
Ich meine, funktionieren tut es ja.
Ah.
Was ist das wieder für JavaScript-Gefrickel?
Was ist das wieder für JavaScript-
Gefrickel? What?
Gucken wir mal in die Konsole rein. Was, was,
was meckert er denn hier rum? No such
computer. What the fuck?
Es lebe Frontend-Kram, ey.
Hä?
What?
Was habe ich denn jetzt anders
gemacht als vorher?
Was habe ich jetzt anders gemacht als vorher?
Vielleicht Cache-Problem? Vielleicht, ja.
Okay.
Was auch immer. Scheiß drauf. Wir fangen jetzt mit der Karte an.
Ähm. Also.
Was brauchen wir? Leaflet. Leaflet.
Äh. Es gibt
einen Leaflet-Vue.js-Wrapper.
Aber den schenken wir uns erstmal und
machen so mal eine Karte von Hand und
schauen uns an, wie das Ganze ausschaut.
Äh. Warte mal. Was ist da unten los?
Ja.
So. Ähm.
Ich muss gerade runter.
Mein Nachbar war gerade da.
Mein Nachbar war gerade da, hat gesagt,
er hat gegrillt und hat uns was mitgebracht.
Das heißt, wir müssen mal eine kurze
Essensunterbrechung machen.
Und ich muss jetzt erstmal kurz was futtern,
weil es sonst kalt wird.
Ich habe jetzt hier zwei Würste
und zwei so gegrillte
Peperoni oder sowas.
Also gucken wir mal
ein bisschen Essen-Video und ich futter mal schnell was.
Der Beef-Bagel-Burger.
Kokona. Kokona-Grill-Sendung.
Wir gucken mal
eine Runde Burger-Grillen.
Und äh. Ich esse mal kurz
meine Wurst.
Äh. Also ich mach mal kurz hier Text.
Sollten wir den Kram
nochmal in ordentlicher Größe machen.
Essen-Pause.
So. Zack.
Beef-Bagel-Burger.
Was?
Was ist denn SPG?
Beef-Bagel.
Beef-Bagel.
Wow. Schmeckt gut das Zeug, ey.
Mmmm.
Die Peperoni schmeckt echt gut.
Alright. Let's put it together.
So we're gonna take the ground beef
and use a ground chuck if you can.
Alright?
And we're gonna season it up.
Die Peperoni von dem schmeckt echt gut.
Use your favorite seasoning
or at least some salt and pepper.
And we'll form some patties.
Give them a dimple.
And you know why we do that, right?
Warum? Warum tut ihr dat?
Ich weiß es net.
So you put a little dimple on the inside.
Ach, wurscht.
Now we're gonna grill the burger.
And we're gonna do a few of these.
But we'll show you first how it's done.
Now we're gonna take this pork belly bacon
and we're gonna fry it up a bit.
What? Was ist jetzt los?
And you gotta treat the guard dog, right?
Die haben Knall, die Typen, ey.
Die haben Knall, die Typen, ey.
Again. Cook the burger.
Again. Cook the burger.
We got a medium heat.
Under 300 degrees Fahrenheit.
Maybe 325.
And we'll cook this bacon down.
It won't take long.
Can you imagine the smell in the forest
of that cooking bacon?
It smells good.
Nicht? Normalerweise sagt er das immer.
I'm telling you.
It smells good. Ah, jetzt.
Alright.
Now let's cook this
beef bacon. And yes, there's such a thing.
If you've never had beef bacon,
head on over to your butcher
and ask him for some.
That's some real good eating.
300 degrees sind 300 Grad.
So we're gonna cook that down a little bit.
Pork belly bacon is
eh, I'd say just about done.
So we'll pull it off the heat.
Die leben sehr gesund.
Burger patty there.
You know about doing that.
It's simple enough, right?
And in the miracle of time,
it's done.
And look at that beef bacon.
I am telling you.
That's some good eating.
Alright.
The beef bacon is done.
And so is that burger.
Now comes
the key part of this whole thing.
Some good steak.
Man.
It's gonna be good.
Oh, das wird Schmerz auch geben.
Can you smell that?
It smells good.
Das wird Schmerz auch geben.
Now use your best cut of steak you can get.
This is real tender.
Ich hoffe, ich schmatze euch nicht zu sehr ins Bauch.
See all the marbling in there.
It only takes a minute.
Cook each side.
Don't overcook it.
Otherwise you'll dry it out.
Alright.
It's time to put this together.
Now, you could throw some mayonnaise, right?
There's a condiment on.
Load it with some pickles.
Load it with some pickles.
Throw on the burger.
Ah, das sieht aber gut aus.
And that pork belly bacon.
Das sieht gut aus.
Man, you can set this up the way you want.
Man, you can set this up the way you want.
In any way you want.
Throw some chub on there.
And some nice slices of steak.
Load it up with some mayonnaise.
Some fresh sliced tomatoes.
Some sliced sweet onions.
Some sliced sweet onions.
Take some of that beef bacon.
Take some of that beef bacon.
Pile it on.
Like I said, do it any way you want.
Like I said, do it any way you want.
Alright.
This is what you got.
Beef bacon bagel burger.
Das ist ja drei Meter hoch.
So, because we know you're asking,
you're gonna wanna take a look on the inside.
Take a look at that.
Take a look at that.
Die Musik dabei auch.
Now, this is the part where the pitmaster eats in front of you
Now, this is the part where the pitmaster eats in front of you
and he's not apologizing.
So, the next time you're looking for a recipe for your pit,
Bacon Salami Cheeseburger.
Bacon Salami Cheeseburger.
Das klingt auch gut.
Das klingt auch gut.
Welcome to BBQPitBoys.com
Welcome to BBQPitBoys.com
Today we're grilling up some Bacon Salami Cheeseburgers at the pit.
Today we're grilling up some Bacon Salami Cheeseburgers at the pit.
And they're real easy to do.
Alright, for this recipe you're gonna need some ground beef.
You're gonna need some ground beef.
You're gonna need some ground pork.
Der klingt schon....
Der klingt so richtig...
Kokona purr.
You're gonna need some SPG seasoning, some good rolls.
Was ist SPG seasoning?
So ist das irgendwie ne Gewürzmischung?
So ist das irgendwie ne Gewürzmischung?
Garlic, onion, tomatoes, mayonnaise and some cheese.
Alright, let's put this in the oven.
Das kommt auch immer am Anfang.
Was hat er denn?
Ich know meine Salami.
Salt, Pepper, Garlic.
Ah, der Chat wieder, der Chat.
Massive Chat.
Wow.
Wo hat er denn seine Machete gelassen heute?
Heute muss das Küchenbeil ran.
Was?
Was?
Germophobes.
Ich weiß, dass er damit Bakterien meint und nicht Germans.
Aber ich fand das klang jetzt irgendwie so nach und nach Germans.
Es ist alles vermischt.
Und jetzt wird der Pitmaster sechs Burger aus ihnen machen.
Ihr habt uns diese vorher gesehen, oder?
Ehrlich gesagt, es ist einfach, Beep-Bälle zu machen.
Du kannst die genaue Größe haben, die du willst.
Und du setzt ein kleines Fingerprint in die Mitte.
Du kannst...
Ja.
Erstmal.
Erstmal.
Und dann kannst du schon den Daumen reinpressen.
Ja.
Haben wir jetzt wirklich Slow-Motion draus gemacht?
Aktuell muss ich noch auf die Arbeit.
Mal gucken, wie es nächste Woche ausschaut.
Just by raising and lowering the grate.
Alright.
Simple enough.
Der, der da spricht, ist nicht der, der da steht.
Der, der da spricht, ist der mit dem weißen Bart.
Ihr super-advanceder Grill.
Kennst du dich aus?
Ja, ich gucke die öfters.
Oh, Bacon Strips.
Ich bin gleich fertig.
Burger with Bacon.
You gotta do it.
Oh, yeah.
It's cooking just fine.
Not long to go to cook up that bacon.
Yeah.
Guard dog on duty.
Alright.
You can see the bacon is getting a little crispy.
Ja, kann ich essen.
Guten Kontakt mit den Nachbarn geht so.
Ich bin mit allen Nachbarn nicht so wahnsinnig dicke, aber die nehmen mal Pakete für uns
an, wir nehmen mal Pakete von denen an, schwätzen mal kurz fünf Minuten.
Ich gehe einfach davon aus, dass sie viel zu viel gegrillt haben und sich gedacht haben,
bevor wir das wegschmeißen, können wir es auch den Nachbarn geben.
Maybe another minute or so.
Also.
Alright.
Außerdem verteilt meine Mutter an die Nachbarkinder immer irgendwelche Kekse und Dinger.
Da sieht man mal, wie unterschiedlich so der Eindruck von der gleichen Aktion sein kann.
Also, wenn meine Mutter quasi so als 70-jährige Oma sozusagen an die Nachbarkinder Kekse verteilt,
ist das vollkommen in Ordnung und alle sagen so, oh, haben wir eine nette Nachbarsoma.
Wenn ICH das machen würde, dann würden die alle sagen, Hilfe, da kommt der Pedobär.
Obwohl es im Prinzip genau das gleiche ist, ne.
Sieht man mal, wie unterschiedlich die gleichen Aktionen so ankommen können.
Let's flip those burgers.
Get them well seared on the other side.
Perfect.
Okay, so.
Fertig essen.
Again.
Okay, so.
Ich bring jetzt auch schnell mal einen Teller weg.
Okay, Leute.
Ich bring kurz mal einen Teller weg und hole mir noch was zu trinken und dann bin ich gleich
wieder am Start.
1-2 Minuten.
Okay.
So.
Okay, so.
Okay, so.
Okay, so.
Okay, so.
Okay, so.
Okay, so.
Okay, so.
Okay, so.
Okay, so.
Okay, so.
Okay, so.
Okay, so.
now use your favorite condiments we've got our barbecue sauce use your favorite sauce
burgers are done pull them off our santa maria
lord have mercy and uh yeah we pixelated the lettuce there so uh
the vegematics won't get excited about this we don't need the lettuce
and let's dress it up a couple slices of bacon for each
or three or four some nice sliced tomatoes
and that's it so now this is where the pit master is going to eat in front of us
and we call that pit master privilege
and for
and for
and for
and for
So, wieder am Start.
Sehr schön, weiter geht's.
So, ähm, wo sind wir stehen geblieben?
Hier, wahnsinnig schöner Button.
Ähm, wir machen jetzt, wir machen jetzt die Karte.
Und zwar,
ich brauch das Getting Started,
das Getting Started
Exempel für Leaflet brauche ich.
Genau, okay, also,
was müssen wir alles einbinden?
Oh, Essenpause.
Okay, also,
es gibt einen Vue.js Plugin
für Leaflet,
aber wir machen das erstmal so,
direkt,
äh,
inline, das Ganze.
Kann man, kann man eigentlich sowas hier machen?
In der Leaflet-Komponente geht das?
Äh, in der, in der
UGS-Komponente? Nee, das geht nicht, oder?
Hätte mich auch gewundert.
Äh, nutzt du zwei Rechner?
Wie machst du den Switch zwischen deinem OS?
Das ist eine VM und das ist mein Host-System.
Wisst ihr ja, das ist eine VM.
Der Button kommt wieder weg.
Ähm,
Moment, wo importiert man hier nochmal
globale Sachen da, ne?
So, Link, Link.
Ah, gut.
Okay, und dann macht man was?
Map-ID.
Mach ich nicht so oft, ja.
Diff Map-ID.
Warte, den Kram,
warum formatiert er den Kram nicht?
Ähm,
ähm,
ähm,
make sure container has defined height.
Okay, das machen wir mal inline,
weil danach machen wir das eh wieder weg.
Height
200 Pixel.
So, warte.
Mal kurz.
So.
Ähm,
so, jetzt haben wir hier eine Höhe.
Setting up map.
Okay, war Map, bla bla.
So, das macht man in Vue.js in einem,
wenn Komponente
gemountet wird.
Also, das wird einmal
initial ausgeführt.
Ah, guck mal, da ist die Map schon.
Aber ohne, ohne,
ohne Layer.
Äh, machen wir mal 100 Prozent, äh,
View-Height.
Das heißt, dass das ganze Fenster ist die Map drauf.
Ähm, wir setzen es mal auf
41,9.
Das ist ungefähr Deutschland, 51,9.
Koordinaten.
Und dann brauchen wir diesen ganzen Crap hier.
Was auch immer das alles macht.
Zeig ich mal her.
Äh, Map-Box können wir gar nicht verwenden.
Wir brauchen Open Street Map.
Äh, Teil, äh,
äh, Url.
Jeder Pommel.
Äh,
was ist das denn?
Oder, OSM?
Hier, die, die,
ne,
what?
Wie ist denn diese richtige Url für Open Street Maps?
Was da?
Jeder, meine ich.
So, und den ganzen anderen Crap können wir rausschmeißen.
Den brauchen wir nicht.
Und jetzt sollten wir eigentlich schon fast eine Karte sehen.
Oh!
Ah, ich glaub, ich reload immer ordentlich.
Heiner Kloster.
Alles klar.
Das Heiner Kloster.
Oh, Map ist schon mal da.
Und wie ich gesagt hab, die Welt ist unendlich.
Ein unendlicher Sidescroller.
Gut, ähm.
Circles, Polygons.
Eats as fuck.
Ja, so ne Karte einzubinden ist wirklich nicht schwer.
So, jetzt brauchen wir noch Leaflet Heat.
So, jetzt brauchen wir noch Leaflet Heat.
So, jetzt brauchen wir noch Leaflet Heat.
Leaflet Heat.
Ja.
Das wir, wir machen jetzt, äh.
Ich hab irgendwie kein, kein Formatter dabei.
Was ziemlich nervig ist, dass man das nicht formatiert.
Warte mal.
Ich, ich glaube, ich hab einfach nur Format und Save nicht an.
Ich hab Format und Save nicht an.
Äh, Moment hier.
Settings, Settings, Settings.
Format und Save will ich haben.
Format und Save.
Das heißt, wenn ich jetzt hier Mist formatiere und save,
dann formatiert das richtig.
So muss das sein.
So, und jetzt muss ich Leaf, Leaflet Heat,
brauche ich noch irgendeine Adresse, wo ich den Kram herkriege.
Wie gesagt, wir installieren das dann eh alles lokal.
Das ist jetzt ja nur mal zum Testen, wie man es machen könnte.
Ähm.
Achso.
Oh, ich deppe.
Vielleicht soll ich auch mal das einfügen als Skript.
Map is not defined.
What?
Ah.
My Map.
So, Leute, seht ihr irgendwo Heatlayer?
Da, guck mal.
Da ist ein Heatlayer.
Oder nee, oder doch nicht.
Doch, hier ist ein Heatlayer.
Ich seh's, guck da.
Eindeutig.
Aber vielleicht sollten wir die mal ein bisschen,
ein bisschen stärker machen, die 2000.
Damn.
Äh, achso, und den Zoom, den Zoom machen wir mal raus auf 4.
Ah, da ist ein Heatlayer, guckt.
So, und so färben wir die Map jetzt, Map ein mit den Corona,
Corona-Daten, die wir haben.
Dass dann quasi dort, wo Corona-Fälle sind,
so, so Gedöns reinkommen, ne?
Mal was gucken.
Äh.
Mal kurz was nachgucken.
Was, F?
Oh.
MonkaS.
Vodafone, please.
Vodafone, please. Come on, bra.
Kein, kein Scheiß,
bauen Vodafone, please. Komm.
Geht wieder?
Ja, F5, F5, geht wieder.
Ja, da kann ich nichts machen, wenn, wenn, äh,
da Vodafone manchmal rumspackt,
da bin ich machtlos, ja.
Aber das liegt natürlich an meinen doppelten
WLAN-SSIDs.
Ganz klar, wenn das der Unity-Media-Techniker
sagt, ne?
Keck, weh.
Okay, auf geht's.
Also, was wir jetzt brauchen,
ist...
Also, wir müssen jetzt erstmal alles,
wir müssen jetzt erstmal von meiner API den Kram abrufen.
Das heißt,
wir sagen jetzt hier,
übrigens, var verwendet man ja gar nicht in JavaScript,
man sagt ja eigentlich zu allem mittlerweile let.
Weil die coolen JavaScript-Dudes,
die das, äh, so entschieden haben.
Also, fetch.
So, und was fetchen wir?
localhost
port 5000
localhost port 5000
Erstmal http davor.
Ähm, Corona.
Und dann machen wir das async.
Dass wir das erwaiten können.
Gut.
Äh, und dann sagt...
What?
Ah, Course Policy. Gut.
Das kann ich mir auch nie merken.
Course Policies.
Deswegen hab ich mir das auch mal
kopiert.
Weil ich mir das aus Prinzip immer nicht merken kann,
wie man, wie man ein Course einrichtet, richtig.
So, das heißt, dazu geht man in Startup
und kopiert sich einfach den Kram, den man sich mal
vorher kopiert hat, hin.
So, wo hab ich's denn hier?
Course, voll.
Ab.
So, und
so.
Yes, excellent.
Das war's. Und jetzt kann ich auch
den Kram abrufen von meiner API.
Ja.
Funktioniert, okay. So.
Set, dann haben wir dann JSON, was zurückkommt.
Result.json.
Ja, man könnte's auch konst machen.
Da hast du drauf geschissen.
So, und jetzt muss ich mal gucken, was wir hier zurückbekommen.
Aber ich müsste
meine ganzen Corona-Daten
zurückbekommen. Ja, Thailand, US,
bla, sonst was.
Das heißt, wir schnappen uns das
jetzt. Hm.
Also, wir schnappen uns das jetzt.
Und extrahieren da draus
mal die, ähm,
die Länder,
ne, die Länder nicht, die
Koordinaten
der betroffenen Länder. Das heißt, wir
extrahieren da draus
die Längengrad, Breitengrad, ne, Breitengrad,
Längengrad und die aktuellen
Corona-Zahlen.
Und die aktuellen Corona-Zahlen
wird, äh, wie intensiv der Punkt
leuchtet. So, also JSON,
Map, ähm,
keine Ahnung, dann, dann
Element,
so,
und da Return,
nennen wir jetzt dann
Element LUT,
Element Long und Element,
äh, was, Current habe ich das genannt.
Ich hoffe, das stimmt, so was ich da treibe.
Anscheinend funktioniert das.
So,
und jetzt nehmen wir hier beim Heat Layer,
äh,
Points,
Points. Und jetzt müsste,
Ah!
Guck mal hier, Leute!
Na, das ist doch mal was, oder?
Da haben wir unsere aktuellen Corona-Fälle.
In China geht's ab, im Iran geht's
ab, in Europa geht's ab,
in den USA ist es noch ein bisschen,
in den USA ist es ein bisschen verteilter.
Ne, ich habe in meiner API keine
Städte drinne. Also, Deutschland
habe ich eine Koordinate für ganz Deutschland,
die liegt irgendwo hier bei Kassel, so.
Also, ich bin immer noch auf der Suche nach einer ordentlichen
Datenquelle. So, und ich glaube,
man kann hier bei Leaflet noch ein bisschen dran rumdrehen,
und zwar, ähm,
man kann hier beispielsweise sagen Blur
Radius, Maximum,
das heißt, man könnte jetzt zum Beispiel hier
sagen, dass,
ähm, warte mal, was ist immer
denn hier? Erst einmal, wenn wir
sagen irgendwie,
jetzt 0,1,
Ah, guck mal.
0,1 ist ein bisschen
viel. Komm, mal 5.
Zack.
Dann, dann Scaled, dann Scaled
das ein bisschen, ein bisschen, ähm,
besser und man, man kriegt, äh,
Die, wo wenig ist, auch ein bisschen besser angezeigt.
Im Großen und Ganzen stimmt das ja, was man hier sieht.
Das einzige Problem beim USA ist, was wir hier haben, dass die USA sehr viele verschiedene Punkte gemeldet hat.
Und für Europa hat die API halt alles auf einem Punkt.
Das ist natürlich ein bisschen Fail, weil US, seht ihr ja hier, US ist alles im Gleichen.
Kommt auch Gaming relativ selten.
Relativ selten.
Wir haben ein bisschen zu Modern Warfare gespielt, wir haben ein bisschen Battlefield gespielt, ab und zu mal ein bisschen Pässe weg sein.
Aber es gibt aktuell keine Spiele, die mich groß schocken.
Die USA könnten wir bündeln, doch.
Das gefällt mir so nicht.
Aber im Großen und Ganzen, ich meine, für den geringen Aufwand ist das doch hier, ist das doch schon cool.
Der Typ heißt nicht Kreisel, sondern Kiesel, glaube ich.
Für den geringen Aufwand, den wir hier jetzt getrieben haben, ist das doch cool.
Ist das doch echt cool.
Sogar je nach Länder.
Wir können mal gucken, ob wir irgendwie die USA bündeln können.
Wie machen wir das jetzt am besten?
Ja, ich blick da schon gar nicht mehr durch, bei meinem komischen Zeug, was ich da gebastelt habe.
Wie bündeln wir denn jetzt die USA am besten?
Lass mal überlegen.
Results?
Nee, Moment, das müssen wir nachher machen.
Wobei, nee, wir können es auch vorher machen.
Oh nee, das ist eklig.
Wobei, das ist wirklich eklig, die USA jetzt post-processing-mäßig hier zu bündeln.
Das müsste man eigentlich beim Import besser machen.
Dann kann man das vielleicht hier im Frontend schöner machen.
Points, Points.
Ja, die USA sind nach Staat getrennt.
Das ist manche auch mit die 3 WM, ja.
Aber da ist mal gerade mein Brain zu klein, für wie man den Kram jetzt gescheit zusammenfasst.
Also, wir müssten im Prinzip hier nochmal durchgehen.
Map.
Und zwar alles, was...
Wie findest du leider im Vergleich zu Visual Studio?
Von Features her fast besser, aber Visual Studio ist schneller.
Oh, ich bin gerade zu low-brain, wie man das hier rauskriegt.
Also, wir haben...
Wie kriegen wir die USA ordentlich zusammengefasst?
Wie kriegen wir die USA ordentlich zusammengefasst?
Wo stecken die USA hier überhaupt drinnen?
Ja, aber nWim hat keine Features.
Außer die ekligen Wim-Plugins, die es so gibt.
Die sich miteinander nicht vertragen.
Wie filtere ich denn jetzt kurz und knackig und elegant hier nur die USA raus?
Beziehungsweise fasst die zusammen?
Wir können es von Hand machen.
Wir können es von Hand machen.
Wir können das von Hand machen.
Ich glaube, das ist wahrscheinlich am einfachsten.
Also, wir können hier sagen...
For each...
For each result country if...
Ich meine, das ist jetzt nicht sonderlich clever, aber es müsste funktionieren.
Wenn country name US ist, dann machen wir hier irgendwie...
US count.
US count.
0.
Dann haben wir aber keine History für die US.
Oh, nee, das kriegen wir jetzt nicht gescheit.
Das kriegen wir nicht gescheit hin.
Das müssten wir beim Import irgendwie machen und da ist es auch nicht schön.
Hast du ein Abo für ganze Chat-Print?
Nein, nicht für alles.
Wir lassen es jetzt erstmal so.
Da muss ich mir jetzt eine Weile zu Gedanken machen.
Das muss ich beim Import schon so aufbereiten, dass das nicht in zwei verschiedenen Formaten gespeichert ist, sondern pro Land einmal.
Sonst ist das Müll.
Aber für Europa funktioniert das Ganze schon mal ziemlich gut.
So.
Ähm...
Ja.
Und jetzt wäre es ja noch ganz cool.
Jetzt wäre es ja noch irgendwie ganz cool, wenn wir da so eine Statistik hinkriegen, oder?
So ein, so ein, so ein, so ein, so ein Graf da.
Weil ich es echt ganz nice finde, so.
Weil der Aufwand ist nun wirklich überschaubar.
Ah, Europa kriegt es ab.
China kriegt es, kriegt es heftig ab.
Besonders in, äh...
Besonders, besonders hier kriegt das China heftig ab.
Ich hab...
Hallo, kann...
Oh, Open Street.
Maps, please.
Laden.
Was auch immer das hier für eine Stadt jetzt ist.
Kann jemand Chinesisch?
Ist das Wuhan?
Keine Ahnung, ob das Wuhan ist.
Das könnte auch, könnte auch hier sein.
Warum sind die Teils überhaupt auf Chinesisch?
Wir machen da erstmal eine ordentliche Überschrift drüber.
Pog.
Ich meine, was natürlich nice wäre, wir hätten hier oben noch eine Leiste, wo man umschalten kann zwischen der Weltmap und dann je nach Ländern.
Das, das wäre doch cool.
Also, wenn wir quasi sowas hier machen.
Max Geografos, ja.
Ich hab mich doch heute Morgen schon mit Ruhm bekleckert, was Geografiekenntnisse anbelangt.
Ihr erinnert euch.
Also, wir machen jetzt mal hier, wir machen jetzt hier erstmal was.
Wir machen jetzt hier eine View App Bar, heißt der Kempel, glaube ich.
Genau, da haben wir oben eine Leiste.
Hier machen wir Pog mal wieder weg, weil das hat an der Stelle nichts zu suchen.
Äh, hier machen wir eine Leiste oben hin.
Und die Leiste...
Die Leiste ist immer App und Color, Color ist Primary, das müsste blau sein.
Jawoll.
Ähm, in die Leiste machen wir einen Button.
Einen Button, zwei Buttons.
Und zwar einmal Map und einmal irgendwie nach Country Stats oder so.
Öh, äh, das hängt ja, das hängt ja voll wie Git.
Äh, okay, dann machen wir jetzt mal hier Class.
Äh, Margin 2, Padding 2.
Okay, sieht schon besser aus.
Ja, so ist das doch schön.
So, und da machen wir auch kein, schreiben wir nicht rein, sondern machen ein Icon rein.
View Icon, äh, MDI, was gibt's in der Map?
Ah, haben wir da nicht noch ein anderes Material Design Icon?
Ist ein anderes Icon, also diese Standard Google, Google Map Icon Bild.
Hallo, ich will das anklicken.
Browser, please.
Map, Map, Map Check.
Map Outline.
Map Legend.
Map Plus.
Map Minus.
Irgendwie gefallen mir die, gefallen mir die Maps alle nicht.
Globe.
Das ist eine gute Idee, Earth.
Ja, das, das, das fände ich fast schicker.
So, Country.
Da gibt's ja irgendwas wie MDI Flag oder so.
Äh, ähm, achso, Button.
So, wir wollen Icon.
So, hä?
Kann man da zwischen umschalten?
Zwischen, zwischen Weltkarte und Statistik für unterschiedliche Länder.
Hab ich das gerade wieder zugemacht?
Hat, haben wir eine deutsche Flagge?
Nee, nee, ich will ja auch, ich will ja auch keine deutsche Flagge.
Ich wollte ja einfach für alle möglichen Länder da jetzt eine Statistik.
Wir machen einfach ganz viele Grafen untereinander, wie sich das für jedes Land entwickelt hat.
Aber ich bin begeistert, wie easy das funktioniert.
Oh, oh, das ist noch, ist noch ein bisschen kaputt.
Ja, das ist doch ein Schick.
So, ähm.
Ähm.
Ähm.
Ähm.
Ähm.
Ähm.
Ähm.
Ähm.
Ähm.
Ähm.
Ähm.
Ähm.
Ähm.
Ähm.
Ähm.
Ähm.
Ähm.
Ähm.
Ähm.
Ähm.
Ähm.
Ähm.
Ähm.
Ähm.
Ähm.
Ähm.
So was hier.
Chartline.
Chartline.
Ja, das ist cool, das gefällt mir.
Stonks.
Was soll die Karte, was macht sie besser als die Karte, die sie schon gibt?
Sie besser macht nix.
Sie ist bunt.
Ich wollte einfach nur mal gucken, was man mit den, was man mit der, äh, Кор
Schmeckt.
was man mit Corona-Daten so machen kann.
MDI-Stonks.
Ich glaube, das gibt es doch nicht.
Aber es wäre cool, wenn es das gäbe.
Wobei, so eine Heat-Distribution
habe ich noch nirgendwo gesehen.
Die Sache ist bloß die, dazu brauche ich eigentlich
genauere Infos. Ich habe es ja aktuell
nur pro Land, was halt scheiße ist.
Ich bräuchte schon
ein bisschen genauer, weil dann wird das auch richtig
gut aussehen mit
der Verteilung hier.
Okay, wir machen
jetzt... Gibt es keine
genaueren Daten? Ich habe keine gefunden.
So was machen wir
jetzt.
So einen Chart basteln wir da jetzt.
Für die History.
In der Schweiz gibt es
kantonweise.
Ja, wir haben theoretisch so was
auch in Deutschland, aber ich finde es nicht in irgendeiner
Art und Weise, wie man es gut verarbeiten könnte.
Okay, also. Der Button
hier, der Button, der
routet zu Slash.
Und der Button hier routet
zu Stats.
Also der routet zu Home
und der routet zu Stats.
Dann müssen wir den Router
nämlich noch anpassen.
Sorry Leute, der Router.
Äh, was ist jetzt eigentlich?
Hä? Kann das sein, dass man es groß und klein
schreiben muss? What?
Ist irgendwas übersehen?
Slash, Home?
Oder muss ich hier einfach nur den Pfad eingeben?
To Slash und hier
To Stats.
Okay, anscheinend, ja.
Ähm, Stats.
Component.
Ah, den About View.
Den, ähm,
konstruieren wir jetzt mal um.
Ähm, zu unserem
Stats View.
Das können wir tatsächlich drin lassen,
dass er das pullt.
Ähm, Stats. So, dann müssen wir
unseren Router rein.
Ups.
Oh, what?
Achso, umbenennen muss ich den Kram noch.
Äh, ah jetzt.
Okay.
Das funktioniert.
Kann man schön umschalten.
Da machen wir jetzt ein paar Stonks
Crafts rein.
Ähm,
View Apex Install.
Wie konnte man den Kram nochmal installieren?
Okay, wir können es auch erstmal direkt
inkluden.
Dass wir sehen, dass wir es
gucken können, ob es funktioniert.
So, Stats.
So, das heißt, Stats brauchen wir
jetzt mal den Kram hier.
Stats, bla bla bla.
Ah, Apex Charts.
Charts.
Funktionieren.
Äh, Data.
Wie geht's los? Hier, ne?
Ah, yes.
Stonks am Start.
Line.
Excellent.
Excellent Stats.
Das hat die Welt
gebraucht jetzt.
Corona.
Ähm, ja, Germany.
Germany. Wir machen mal für Deutschland die Zahlen.
Da kommen wir jetzt rein.
Aber nochmal für Deutschland die Zahlen rein.
So, äh,
unten, das müssen wir dynamisch machen, klein.
Und das hier müssen wir auch dynamisch machen.
Oh, der Stream hängt wieder.
