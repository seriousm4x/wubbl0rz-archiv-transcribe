So, bevor wir
irgendwas anderes machen,
vor allem starten Package-Updates.
Wie jeden Tag.
Ich weiß, dass mein Konto
nicht verifiziert ist.
Ich will mein Konto auch nicht verifizieren, weil das einfach nur
Wegwerf-Account
ist für im Stream eingeloggt
sein.
Ja, by the way, ich auch.
Erstmal den ganzen Shit hier zumachen.
Alles beenden.
Package-Update.
Ja, war ja klar.
Wir haben erst gestern Abend Package-Updates
gemacht. Das kann nicht sein in der Zwischenzeit.
Oh, hier, kein...
Reboot.
Habt ihr mitbekommen?
Manifest V3.
Das wird ernst, Leute. Guckt mal.
Also, das ist ein Reddit-Post, den ich bei
U-Blog dazu gefunden hab.
Dritter
Juni.
Juli.
Nächster Monat.
Geht's los.
Ich fand den zweiten Teil
unsinnig. Da haben wir nix mal groß gemacht.
Ich hab nix geleakt.
Ach, läuft
die Nase. Was ist jetzt los?
Ja, Manifest V3. Es geht los. Dritter
Juni ist angeblich soweit.
Und
laut offizieller Aussage
vom U-Blog Origin-Entwickler
wird es U-Blog
Origin nicht
geben mit einer Manifest V3-Version.
Der hat wahrscheinlich keinen Bock auf die ganzen Einschränkungen.
Das heißt, wenn man das benutzen will,
muss man sich ein
Replacement suchen. Das heißt, ab drittem Juni
geht's los. Und diesmal sieht's auch wirklich so aus,
als passiert das.
Gucken wir mal, welches Video. Ich hab irgendwo
ein Video
gesehen.
Von
einem der üblichen
verdächtigen Channels.
Hier. Aber
die Videos von ihm muss man sich ja nie ganz angucken.
Reicht ja so die erste Minute.
Ja. Aber es wird
wirklich ernst jetzt. Ab drittem Juni.
Juli. Alter. Diese Kackmonate.
Kann ich keiner merken. Geht's los. Das heißt,
dann fliegen alle nach und nach
alle Extensions raus,
die nicht Manifest V3
unterstützen. Was unter anderem auch
U-Blog Origin ist. Das einzige,
was man dagegen machen kann, ist
einen
anderen Browser verwenden.
Und da gibt es
nicht viele Alternativen.
Gibt es nur noch Firefox.
Ich weiß, dass anscheinend
ein paar
auf Chrome basierte
Browser, also Brave und sowas,
dass die wiederum gesagt haben,
sie wollen das Ganze noch aktiviert
lassen.
Wie lange das passieren wird,
sei mal dahingestellt.
Weil die ganz
drunterliegenden Sachen gibt es keinerlei Updates
und irgendwelche Sachen von
Google mehr dazu.
Und nachdem wir das alles nur repackagen.
Also,
ja. Mal gucken. Also ich glaube, die einzig
wirklich sichere,
alternative, auch was Langzeitsachen
angeht, wird Firefox sein.
Wobei man bei Firefox ja auch nicht so genau weiß,
was sie sich da teilweise denken.
Aber ich glaube, das kriegen sie auf die Reihe.
Dann sieht es demnächst hier wahrscheinlich sehr Firefox
Only mäßig aus, weil ich kann mir
wartet mal kurz.
Ich kann mir beim besten Willen nicht vorstellen.
Ich kann mir am besten Willen nicht vorstellen, das Internet
ohne ordentlichen Adblocker zu verwenden.
Das ist aus meiner Sicht nicht möglich.
Wir haben einen kleinen Vorgeschmack
da drauf bekommen.
Wer hatte?
Wer hatte die letzten Wochen auch random mal immer
wieder Werbung auf YouTube, die nicht skippbar war,
beziehungsweise als also automatisch skippbar?
Na und wer hatte?
Wer hatte da auch Probleme die letzten Wochen auf YouTube?
Also ich denke nicht, dass ich der einzige bin,
gerade wenn man auf den Adblock Subreddits guckt,
ist das ziemlich verbreitet gewesen.
Ja, und YouTube hat ja auch wieder experimentiert.
Und ganz ehrlich,
da haben wir mal wieder gesehen, wie kacke.
Ja, mittlerweile nicht mehr.
Mittlerweile haben sie es.
Mittlerweile haben es die Adblocker wieder fix.
Aber das hat jeder jetzt ein paar Wochen oder viele
die letzten paar Wochen.
Und da wurde man wieder daran erinnert,
wie unbenutzbar ätzend das Internet ist,
ohne ordentlichen Adblocker.
Es geht einfach nicht, es ist nicht usable.
Deswegen bin ich sogar bereit, meinen Workflow zu ändern.
Und das mache ich ja immer ungern,
weil ich habe mich ja dran gewöhnt.
Ich habe mich jetzt beispielsweise schon super dran gewöhnt.
Ich habe einfach drei Browser im Einsatz für drei unterschiedliche Anwendungszwecke.
Ich habe Chromium am Start als Daily Browser.
Ich habe Chrome am Start für Sachen, die ich davon trennen will.
Ja, zum Beispiel Home Office Login auf der Arbeit
oder dort, wo Sachen in Chromium nicht richtig funktionieren.
Beispielsweise Amazon Video Streaming, Google Musik und so was.
Das mache ich in Chrome und mein ganzes YouTube Zeug
und alles, was drumherum Social Media geht,
das mache ich in Firefox.
Ja, YouTube, ich weiß, ich weiß.
Deswegen funktionieren,
dann so Sachen wie beispielsweise, wie heißt diese Erweiterung?
Sponsor, Sponsor heißt Sponsor Blog.
Das, was beispielsweise, was so eine Datenbank im Hintergrund hat,
welche großen Channels, wann die Werbung planen, um das zu skimmen.
Ja, dann funktioniert Sponsor Blog beispielsweise an der Stelle auch nicht mehr,
wenn sowas in Stream drin ist.
Da werden wir uns nicht mit Adblockern groß dagegen wehren können,
weil in Stream Werbung ist nicht zu unterscheiden im Vorfeld von Werbung zu Content.
Ich könnte mir aber vorstellen,
dass in Stream Werbung auf Dauer vielleicht doch nicht zum Primary Weg wird.
Ich kann keinen gescheiten Satz mehr formen.
Dass in Stream Werbung wahrscheinlich doch nicht die Hauptsache der Werbung ausmachen wird,
denn in Stream Werbung hat so ein paar kleine Probleme.
In Stream Werbung hat das erste große Problem,
dass es enorm rechenlast oder rechenintensiv ist,
weil die müssen ja on the fly quasi in den Video Streamen,
die Werbung rein encoden.
Nicht, dass da Google und Microsoft und Amazon nicht alle die Ressourcen schon teilweise für haben,
aber muss ich mal überlegen, was für eine massive Anzahl an Streams bei YouTube durchgeht.
Und wenn jetzt einfach mal die CPU Last um 200 Prozent steigt für alle Sachen,
nur weil die da Werbung rein encoden müssen,
das kann auch Google nicht mehr einfach so wegstecken.
Deswegen allein schon aus dem Gesichtspunkt glaube ich, ist es schwierig.
In Stream Werbung breit zu machen überall.
Und das nächste ist in Stream Werbung kannst du kannst natürlich diese CPU Last etwas reduzieren,
indem du das pre encodest, also indem du quasi sagen wir mal beim Upload oder einmal nächtlich
die Videos um encodest mit der aktuellen mit den aktuellen geschalteten Werbung drinne.
Das Problem ist aber nur, das musst du dann quasi mehrfach machen für jeden User Typ.
Ja, also quasi für jedes User.
Profil weiß ich, wie viele verschiedenen User Profile es so gibt bei YouTube oder wie nennt man das für jeden Anwender Typ.
Ich weiß nicht, welchen Werbeblock der sehen soll.
Müsstest du quasi alle Videos pre encoden.
Das steigert enorm den Festplattenplatz und auch die CPU Auslastung.
Und du kannst trotzdem nicht so dynamisch drauf reagieren.
Deswegen glaube ich, dass in Stream Werbung nichts wird, wo wir jetzt damit rechnen müssen,
dass das bei allen Videos in Zukunft passieren wird.
Dafür ist es einfach zu ressourcenintensiv.
Für die Hersteller ist zumindest meine meine Gedanken dazu.
Vielleicht habe ich auch irgendwas übersehen, dass es doch ganz easy ist.
Für mich sieht es so aus, als wären wir in Stream Werbung zumindest nicht bei jedem Video haben.
Ich könnte mir vorstellen, dass es bei einigen Videos durchaus gemacht wird.
Ja, also gerade bei Channels, wo die beim Upload schon wissen Okay, das gucken sich jetzt gleich.
Das gucken sie jetzt gleich 300.000 Leute an.
Ja, zum Beispiel wenn der.
Wie heißt dieser Typ?
Super Easy Berlin in Convenience.
Wie heißt dieser Typ, der diese Film Trailer Geschichten macht?
Dann gucken sie sich doch am ersten Tag 300.000 Leute an.
Das Video.
Ryan George heißt er.
Genau, jetzt fällt es mir wieder ein.
Ryan George.
Diese Film Trailer.
Jetzt gucken sie sich auch am ersten Tag 300.000 Leute an.
Dann wissen sie, okay, da kann man jetzt schon irgendwelche in Stream Sachen rein encoden.
Aber selbst da muss man sich schon mal überlegen.
Da muss ja YouTube auch.
Bestimmt 300 Mal machen, dass alle Werbekombinationen, die gerade aktuell sind, da schon prerendered
drin sind für jeden User Typ, der da gerade so drauf gibt.
Ja.
Ja, du kannst schon.
Du kannst sicherlich User Gruppen ausmachen.
Du kannst sagen, das ist der Technik Interessierte, der sich gerne Anime Sachen anguckt und zusätzlich
sich für Webcam Grills interessiert.
So.
Das Ganze.
Okay.
Das ist der Checker, der immer nach den neuesten Pickup Lines guckt und Gewichte hebt und so.
Also kannst bestimmt schon so verschiedene User Gruppen bilden.
Das sind dann natürlich nicht wenige.
Und dann zumindest so, dass es so halbwegs passt.
Das ganze Semi-Predikten, was dann da kommt und 40, 50 Mal das Pre-Encoren.
Aber wie gesagt, das ist sehr ressourcenintensiv und CPU aufwendig.
Deswegen glaube ich nicht, dass wir in Stream Werbung im breiten Stil sehen werden.
Soweit ich weiß, macht Twitch ja auch keine In-Stream Werbung.
Was Twitch so schwierig zu blocken macht, ist wohl, also eben was ich mir so zusammenreime,
dass es bei Twitch wohl enorm schwierig ist zu erkennen, ob es jetzt ein Content-Stream
ist, der geladen wird oder ob es jetzt ein Werbestream ist, der geladen wird.
Das kommt vom gleichen Server, sieht gleich aus, hat die gleichen Namen, deswegen tun
die sich alle so schwer aktuell auf Twitch Sachen zu blocken.
Mittlerweile geht es ja halbwegs.
Selbmal zu X-Defined, ich habe X-Defined außer in der Beta ein paar Videos nichts damit
zu tun gehabt bisher.
Mich interessiert aber jetzt, wo du es gerade sagst, das ist jetzt ja raus, wie sehen da
so die Zuschauerzahlen auf Twitch auf?
Äh, ne, X nicht X-Defined, X-Defined, ist nicht X-Dissolution, X-Defined.
Hä?
Ja.
Ja.
Ja.
Nee, wie heißt das Ding, Game?
Warum findet man das nicht?
Witzig.
Man findet, man findet den Channel?
Ich sehe, was.
Guck mal, da findet man den Channel von dem Typ, lol.
Wir können aber einfach hier nachsuchen.
Okay, also Videos, ne, nicht Videos, Live-Kanäle und Please, Please Twitch, Twitch nicht automatisch,
Alter, wie mich das abfuckt, ich hasse es, ich hasse es, diese Scheiß-Seite, man.
Warum?
Warum baut man das so?
Warum?
Seriously, warum baut man diesen Dreck so?
Ich raste aus.
Wie dumm kann man eine Seite umbauen, Alter?
Man kann es weder muten,
man kann es weder aufmachen,
man...
Okay, jetzt hab ich...
Aus irgendwelchen Gründen...
Aber wie dumm, Alter.
Okay, die Seite sah auch mal irgendwie anders aus.
Ich möchte einfach die Seiten sortieren
nach viel zu wenig.
Okay.
Insgesamt...
Ey.
Warum baut man das so auf?
Ich versteh's nicht.
Ganz schrecklich.
Ganz schlimm.
Generell, ich mag Autoplay nicht.
Egal in welcher Art und Weise.
Ich dreh da immer voll durch.
Das ist übrigens auch so ein Ding,
warum wir Werbeblocker brauchen.
Weil Autoplay und Werbung,
das war eines der ursprünglichen Ansatzpunkte,
warum sich überhaupt das Internet
in diese Richtung entwickelt hat,
mit Werbeblockern an jeder Ecke.
Weil Autoplay, Werbung, teilweise mit Sound.
Irgendwann kamen Smartphones,
die haben gesagt, sie machen standardmäßig
Autoplay deaktiviert, sobald Sound da drin ist.
Das ist auch so ein Ding.
Okay, also.
Next to find.
559 Zuschauer.
Okay, das ging ganz schön schnell runter.
Was macht eigentlich das Game?
Wie heißt denn das von den Battlefield-Leuten?
Das, was auch mal eine Zeit lang
so angesagt war.
Ihr wisst, was ich meine.
Wenn ich's höre, weiß ich's.
Das, was die ehemaligen DICE-Leute gebaut haben.
Ähm.
Ähm.
Finals.
The Finals.
Wie sieht's da aus?
Äh.
Moment.
Was ist mit Twitch los?
Okay, hier ist es gemutet.
Ja, das gucken auch kaum welche.
Ja, das ist immer.
Und dann beschwert sich noch jemand.
Dann beschwert...
Ich mein, klar.
Twitch-Zuschauer nicht unbedingt gleich Spieler zahlen,
aber es ist immer so ein gewisser Indikator, finde ich.
Aber, dann beschwert sich noch mal einer,
wenn es nur immer Fortsetzung von Fortsetzung,
wenn es immer mehr Fortsetzungen gibt.
Wenn die Leute nur Fortsetzungen konsumieren.
Was willst du machen?
Das stimmt.
Aber 100 irgendetwas ist trotzdem wenig.
Ich mein, das ist ja nicht nur unsere Zeitzone,
aktiv auf Twitch.
Ah, also.
ZG.
Ja, soviel zum Thema
In-Stream-Werbung.
Ja, hab ich auch grad gesagt, Sponsor-Blog funktioniert auch nicht mehr richtig.
Das ist problematisch.
Ah. In der Tat.
In die.
Ich würde gerade Engländer jetzt sagen.
Ey, die. Ich...
Moment mal.
Ich hab so...
Auf x ehemals Twitter
hab ich ein Interview gesehen
von irgendeinem englischen Fußball-Fan.
Der wurde gefragt...
Dem haben sie irgendwie...
Nee, dem haben sie irgendwie die Currywurst gegeben.
Und...
Der sah erst mal nicht so begeistert aus von der Currywurst.
Dann hat er die gegessen und hat sich...
Ja, doch, ganz okay.
Und dann wurde er gefragt...
Was ist better?
Was ist besser?
Ja, so...
Englische Wurst oder deutsche Currywurst.
Und dann sagt er als Antwort...
Der hatte den geilsten englischen Akzent.
Ich kann das gar nicht nachmachen.
Der sagt...
Bish bear.
Das heißt...
British better.
Bish bear.
Was hat er jetzt gesagt?
Bish better.
Das war doch viel zu deutlich.
Bish bear.
Bish bear.
Okay, alles klar.
Ich vermute, das heißt British better.
Also, eins muss man echt sagen.
Ich hab teilweise die übelste...
Ich verstehe fast alle.
Ich verstehe den Inder, der Englisch redet.
Wenn die sich Mühe geben,
wo ich echt meine Probleme hab,
sind so die richtig hardcore native
Englisch-Speaker,
die da mit irgendeinem ultra krassen Dialekt
in die Ecke kommen
und die Hälfte an Silben verschlucken
von den Wörtern.
Da verstehst du nichts.
Die sagen auch nicht
Water. Die sagen...
Die lassen einfach
den Rest weg vom Wort.
Und die verstehen sich dann
untereinander schon.
Soll Water heißen.
Ja, das stimmt.
Aber ich glaube auch
eines der Sachen, was die Leute ein bisschen abfuckt
ist...
Zumindest was mich abfuckt ist,
dass jeder versucht,
nicht einfach ein gescheites, spaßiges
Multiplayer-Game zu machen,
sondern dass die alle versuchen,
irgendeiner speziellen Formel zu folgen
und daraus irgendein Service-Game zu machen.
Ich finde es gar nicht schlimm,
wenn ein Game mal rauskommt,
richtig gut ist, Spaß macht
und ja,
dann vielleicht in einem dreiviertel Jahr
halt nicht mehr so angesagt ist.
Okay, es kann nicht jedes Spiel
das nächste...
Counter-Strike werden
oder das nächste
Fortnite, PUBG, was auch immer.
Aber die probieren das alle.
Und das ist immer so...
Ich denke so, ey, könnt ihr nicht einfach mal ein Game machen,
was sich einfach nur gut anfühlt zu spielen,
ohne
Formel X da einzubauen.
Aber ich meine,
es hat ja schon seinen Sinn.
Man sieht ja, dass es zumindest bei einigen funktioniert.
Bei den Großen, ja.
Und es gibt auch immer wieder neue,
die ganz gut einschlagen.
Der größte Teil davon ist
verschwindend in der Versenkung.
Mein Lieblingsbeispiel dafür ist,
wie man das einfach nur versucht,
aber nicht hinbekriegt.
Erinnert sich noch einer,
ich habe schon ganz vergessen, wie das heißt überhaupt.
Erinnert sich noch irgendjemand an das
Ubisoft Battle...
an diesen Ubisoft Battle Royale...
Ne, ja doch, an diesen Ubisoft Battle Royale
Versuch.
Der so ein bisschen
mehr auf Vertical Gameplay
mit Rumspringen gesetzt hat.
Ich habe schon wieder komplett vergessen, wie das heißt.
Das war schon beim
angucken auf Twitch,
sah das für Hyperscape, genau,
das gibt es ja mittlerweile nicht mehr, Hyperscape.
Als ich mir das angeguckt habe, das erste Mal
auf Twitch, habe ich mir gedacht,
das sieht nach dem banalsten,
langweiligsten,
wir haben es einfach nur gemacht,
weil es alle haben,
Game aller Zeiten aus.
Und es war dann im Prinzip ja auch nach 2-3 Monaten wieder weg.
Dann wurde es irgendwann mal wieder
re-launcht und war wieder nach einem Monat weg.
Das gab es,
ja, ja, das gab es.
Ich glaube aber mittlerweile gibt es das nicht mehr.
Nein.
Mittlerweile
gibt es das nicht mehr.
Ja.
Also,
hat es das
jetzt wirklich gebraucht?
Ja, aber
wie sind wir eigentlich von Manifest V3
jetzt auf irgendwelche verkackten Games gekommen?
Ja.
Also,
ich glaube,
wir haben hier
eine ganze Menge Posts dazu.
Und das hier ist im Prinzip
der Blogpost von Google.
Da sieht man das am
dritten,
wobei hier unten steht ja die Zusammenfassung,
am dritten
Juli?
Juni?
Ach, ich blick's nicht.
Wir müssen gucken, was wir für eine Chrome Version haben.
Also,
also,
wir müssen gucken,
ob wir das hier
in der Textur
machen,
also,
wir müssen
hier
gucken,
ob wir
das hier
in der Textur
machen,
also,
wir müssen
hier
in der Textur
machen,
also,
wir müssen
hier
in der Textur
machen,
also,
wir müssen
hier
in der Textur
machen,
also,
wir müssen
hier
in der Textur
machen,
also,
wir müssen
hier
in der Textur
machen,
also,
wir müssen
hier
in der Textur
machen,
also,
wir müssen
hier
in der Textur
machen,
also,
wir müssen
hier
in der Textur
machen,
also,
wir müssen
Nee, das schauen wir nicht. Das ist, glaube ich, für den Stream nicht so interessant.
Aber wenn einen das Thema interessiert, ist es wirklich ein gutes Video.
Und ich gucke unregelmäßig bei Morpheus.
Und ich habe mir das Video angeguckt und habe mir auch gedacht,
ey, Morpheus, der hat garantiert auch irgendwie angefangen, in irgendeiner Art und Weise Sport zu treiben.
Weil man sieht es im Gesicht, der hat auch ein paar Kilo verloren.
Wenn man das noch vergleicht mit, ja, vor einer Weile.
Und dann scrolle ich so in die Kommentare runter und das erste Comment, was ich sehe,
ist mir, boah, du hast aber abgenommen stark, wenn es gewollt war.
Ich gehe mal davon aus.
Nein, das ist nicht der Butt, das siehst du im Gesicht.
Der hat ordentlich abgenommen, wenn das mal mit, von einer Weile vergleicht.
Zumindest fand ich das Comment eigentlich genau das, was ich mir auch gedacht habe.
Und er hat es auch geliked, also sprich, es scheint ja was dran zu sein.
Und jetzt kommt es, jetzt warum ich cringen musste, ja.
Ich mache das dann auf und er sagt, war es vielen Dank.
Er freut sich richtig, dass die Leute das merken und so.
Und ich finde, man sieht es auch direkt, ja.
Und jetzt kommt es.
Und jetzt kommt es.
Oh, Mann, Alter.
Man kann einem auch alles mies reden, oder?
Also, ich finde es gut, dass sich Morpheus darüber freut,
aber bitte sprecht normalerweise nicht das Gewicht von Leuten an.
Wenn die Person das nicht selber tut, man kann nie wissen, was das in anderen Menschen auslöst.
Alter, oh Mann.
Man kann, man darf noch nicht mal mehr was Nettes sagen.
Also, what the fuck, Alter.
Manchmal komme ich mir echt vor,
und ich bin noch nicht mal 40, ja.
Manchmal komme ich mir echt vor, so, Alter,
was ist eigentlich die letzten 40 Jahre schiefgelaufen mit den Leuten?
Wenn ich solche Comments sehe.
Ja, manch einer sagt jetzt, Alter, krass, super, ein super nicer Boomer-Take.
Ah, the fuck, Alter, was ist mit den Comments los?
Ja, der Rest ist jetzt...
Und früher hätte ich gedacht, das ist getrollt.
Mittlerweile glaube ich, das ist ernst.
Oh, Mann.
The fuck, ey.
Also, es kann immer irgendwas sein.
Aber wisst ihr, was für mich ganz entscheidend ist, wenn einer was sagt?
Und das ist, was er damit ausdrücken möchte, ja.
Er kann es ja nicht wissen, was es jetzt wirklich ist.
Und dieses Comment hat für mich eindeutig die Aussage, er findet das nice.
Er findet das nice, und wenn man diese Message vermitteln will,
finde ich, ist das nichts, wo man sich irgendwie zurückhalten muss.
Muss man sich jetzt neuerdings für Komplimente irgendwie zurückhalten?
Wenn einer zu mir sagt, ey, Max, ich sehe, du hast fünf Kilo, du hast bestimmt wieder ein paar Kilo abgenommen.
Da freue ich mich auch, weil man das sieht, ja.
Und die Intention von demjenigen dahinter, der das sagt, ist doch eindeutig.
Der will was Positives sagen.
Also...
Und mal davon abgesehen, in seinem Alter ist die Chance, ja, ist die Chance, dass es daran liegt,
dass er sich ein bisschen mehr bewegt.
Deutlich höher, als dass er irgendeine schlimme Krankheit hat.
Ja, das wird er damit meinen, aber es ist total bescheuert.
Also, ich unterschreibe das überhaupt nicht, dass man sich deswegen zurückhalten soll, was zu posten.
Also, wenn du eine positive Aussage machen willst, irgendwie kannst du alles negativ auffassen,
wenn du dir genug Mühe gibst.
Also, es läuft ja im Endeffekt darauf raus, dass du...
Du darfst nichts Negatives sagen, okay.
Mit der Intention, quasi an jemanden schlecht zu reden.
Du darfst aber auch nichts Positives sagen, weil es ja eventuell in irgendeiner Art und Weise negativ auf...
Also, das heißt unter dem Strich, du kannst gar nichts sagen, weil irgendeiner immer getriggert ist.
Und wisst ihr, was das Schlimme ist?
Selbst nichts sagen triggert die Leute.
Selbst nichts sagen ist nicht okay.
Zumindest nicht, wenn du kronk bist und einfach nur nichts dazu sagen möchtest.
Das ist auch nicht okay.
Also, du darfst nichts Positives sagen, das ist nicht erlaubt.
Du darfst nichts Negatives sagen, das ist nicht erlaubt.
Du darfst nichts, nicht nichts sagen, das auch nicht.
Im Prinzip ist die pure Existenz, hast du gelitten einfach, ja.
Das heißt, es ist per...
Twitter ist dauergetriggert, egal was du machst.
Deswegen könnte man auch sagen, weil es egal ist, was du machst, sind eh alle dauergetriggert.
Ist auch wiederum...
Kannst auch wiederum alles machen, ne.
Ahem.
Das ist wiederum...
Das ist wiederum was, da würde ich mich tatsächlich ein bisschen zurückhalten, je nachdem in welcher Situation.
Kann das natürlich auch schon ein bisschen zu sehr auf die Pelle gerückt sein, ja.
Stell dir mal vor, du stehst irgendwie bei McDonalds.
Es ist voll und die Leute stehen eh schon eng, eng an eng.
Und dann...
Du bist eine Frau und hinter dir steht irgendein Typ in einer Warteschlange.
Und steht irgendwie zehn Zentimeter hinter dir und sagt, oh, du bist aber auch eine Hübsche.
Würde ich auch denken, äh...
Alter, guck mir nicht so auf die Pelle.
Es kommt immer auf die Situation an.
Und vor allem, ich finde, was auch ganz wichtig ist, was ist der Hintergedanke desjenigen, der das sagt, ja.
Und wenn Leute positive Hintergedanken haben, finde ich, ist das überhaupt kein Ding.
Natürlich sollte man sich Gedanken drüber machen, wie kommt das Ganze an.
Aber wenn man einfach nur was Nettes sagen möchte, was in der Situation, ja, einem so in den Sinn kommt.
Kann man auch fünfmal gerade sein lassen, äh, gut ist.
So.
Wo sind wir noch stehen geblieben?
Ah ja, wie üblich sagen, wir müssen Shithub-Trends angucken.
Twitter ist ja auch letztens...
Sorry, sorry.
X ehemals Twitter.
Sie hat die letzten Tage wieder auch in alle Richtungen...
Sie sind ja alle...
Sie sind ja nur noch alle super am, am, am durchdrehen.
Wegen, wegen jedem Furz.
Jeder sagt...
Irgendeiner sagt ein falsches Wort.
Bäm.
Alle voll am explodieren, ne.
Alter, Twitter ist echt so Shithowder.
Leider ist X ehemals Twitter immer noch die beste Plattform, um kurzfristig Sachen mitzubekommen.
Entweder regionale Sachen.
Oder...
Ja, irgendwelche größeren Entwicklungen.
Zum Beispiel...
Was gibt's da? Lass mal überlegen.
Was gibt's, was gibt's ein schönes Beispiel für?
Äh...
YouTube-Down, zum Beispiel, ja.
Es findest du schneller über, über Twitter raus, als über alles andere.
Oder Discord-Down.
Discord-Down ist so'n Ding.
Was du über Twitter auch schneller raus findest, als...
Was anderes ist...
Letztens hat's bei mir morgens mal übelst geknallt, hier in Hanau.
Und da hab ich gesucht auf Twitter...
Hanau...
Knall.
Oder Hanau...
Äh...
Geräusche oder so.
Und...
Latest sortiert.
Und Bäm.
Hat man gleich noch ein paar andere Leute gesehen.
Das war...
Ich weiß nicht, ob ich das eingebildet hab.
Da war irgendwas.
Ja, der Filter von Twitter ist mir auch...
Etwas suspekt in letzter Zeit.
Also...
Twitter zeigt mir jetzt einiges Zeug, wo ich mich frage, was hab ich damit zu tun?
Ich hab letztens random mal auf einfach ein paar Leute geantwortet, die mir...
Die mir aufgeploppt sind in der...
In der Timeline.
Und es war ne schlechte Idee.
Weil ich dann auf einmal irgendwelche ganz super...
Ultra...
Merkwürdigen extremen Leute in der Timeline hatte.
Also...
Also als Antworten, ja?
Ich...
Ich hab auf nen Tweet geantwortet...
Irgendeiner...
Der geschrieben hat...
Äh...
Irgendwie...
Er hat...
Er hat Angst unter Leute zu gehen oder sowas.
Er hat's irgendwie mit so...
So...
So...
So sozialen Sachen nicht.
Und...
Ich weiß gar nicht mehr was genau.
Und da hab ich drauf geantwortet...
Ey, das mit...
Mit...
Äh...
Menschenkontakt und sozialen Sachen.
Ich mein, ist bei mir nicht so schlimm.
Das kann ich aber nachvollziehen.
So, das war's.
Das...
Das...
Das hab ich drauf geantwortet.
Also nix...
Was ich denken würde.
Aber...
Dann hatte ich irgendwelche komischen...
Weiß ich was das für Leute waren.
In der Timeline.
Die dann wiederum darauf geantwortet haben.
Mit so...
Mit so...
Mit so ganz merkwürdigem...
Äh...
Ja, wie nennt man das?
Das sind die gleichen Leute, die unter jedem Tweet so nen Clown-Emoji posten.
Das ist...
Die sind mir auch immer sehr suspekt.
Ja...
Ne, das...
Da ist mir wiederum zu wenig los.
Ja, das trifft's ja nicht so richtig.
Es ist...
Ah, weiß ich...
Ach...
Ja, wobei...
Den...
Den...
Den benutze ich selber gerne.
Den benutze ich selbst gerne.
Wisst ihr...
Wisst ihr welches Emote mich wahnsinnig macht?
Ihr wisst's.
Ihr wisst's.
Aber...
Also manche wissen's.
Weil ich schon oft gesagt hab.
Richtig.
Ne, nicht...
Nein, nein, nein, nein, nein, nein.
Fast.
Fast.
Der ist da.
Der da.
Der macht mich wahnsinnig.
Aber nicht in...
Nicht so sehr...
Also in der Variante auch.
Das...
Das macht mich auch.
Aber am richt...
Am schlimmsten...
Am schlimmsten...
Ich kann das gar nicht immer...
Am schlimmsten ist die Oldschool-Variante.
Die...
Die macht mich so fertig.
Wenn ich das...
Wenn ich das sehe...
Regt's mich...
Interpretier ich nur die negativsten Sachen in die...
In die Nachricht rein.
Wieso mögen den so viele nicht?
Ich kann es...
Ich kann dir meine Gefühle dazu nicht so richtig beschreiben.
Aber ich habe eine tiefe Abneigung gegen dieses Emote.
Ja, nicht so ganz.
Meine Shell ist zu blöd dafür.
Gegen dieses Emote.
Also...
Warum?
Warum?
Ich glaube, weil ich da so Ultra-Überheblichkeit reininterpretiere.
Automatisch.
Das sind...
Das sind so Leute, die sagen...
Natürlich nicht.
Sowas.
Ja?
Da interpretiere ich die übertriebenste Überheblichkeit rein in dieses...
So...
Ich weiß es eh besser.
Und...
Ich...
Ich weiß nicht genau, warum ich...
Schwer...
Schwer zu beschreiben.
Aber ich habe eine wirklich sehr tiefe Abneigung gegen dieses Emote.
Das hier finde ich auch kacke.
Das finde ich auch kacke.
Aber die...
Die Oldschool-Variante, die triggert mich am meisten.
Ich bin nicht der Einzige.
Ja?
Kann ich mir vorstellen.
Hm.
Am besten ist immer noch der...
Der alte...
Girlie-Style...
MMO...
Smiley.
Ja?
Smiley.
Das haben früher in MMOs die ganzen Mädels immer benutzt.
Ich weiß nicht, warum.
Oder zumindest...
Sagen wir mal so.
Bei MMOs weißt du es ja nicht.
Zumindest diejenigen, die so tun wollten, als sind sie Mädels.
Die haben immer den Nasen...
Immer diesen dicken, dicken Nasen-Smiley verwendet.
Aber für mich ist eines der ätzendsten Emotes auch immer noch hier.
Das wird überall gepostet mittlerweile, um...
Ja.
Quasi zu sagen, was der andere geschrieben hat, ist eh unbedeutend schwachsinnig, weil
alle es klauen, so.
Das ist so ein Ding, das triggert mich auch.
Das verwendet auch nur ein ganz spezieller Typ von Leuten.
Den mag ich.
Den finde ich gut hier.
Der ist noch besser.
Gut.
Genug...
Genug Emote-Talk.
Ja.
Das verstehe ich auch nicht.
Die ganze Welt sollte sich auf Twitch-Emotes einigen.
Ich schreibe ja sogar schon.
Teilweise in Teams.
Auf Twitter.
Und sonst...
Also auf X ehemals Twitter.
Mit Twitch, beziehungsweise...
Ja.
Extended Twitch-Emotes.
Aber die Welt ist einfach zu dumm dafür.
Die checken das nicht.
Niemand...
Niemand außer die Hardcore...
Ja.
Das ist...
Das ist der Facebook...
Das ist der Facebook-Boomer.
Das Facebook-Boomer-Emoji.
Ich bin 40 und lustig.
Facebook-Gruppen.
Boomer.
Boomer-Emoji.
Ist das.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ist das.
Ist das.
sind dann die, die...
Das ist mein Lieblingsbeispiel.
Ich weiß.
Aber das find ich einfach so cringe.
Das sind die Leute, die in irgendwelchen Boomer-Facebook-Gruppen zu Ostern anzügliche Witze über Eier
posten und dieses Emoji drunter machen.
Nee, das ist nicht das Boomer-Emoji.
Das...
Das ist das Facebook-Ich-Bin-lustig-Boomer-Emoji.
Dieser Teufel.
Also der cringigste Post, den ich ehemals gesehen hab.
Man erinnert sich.
habe in der kategorie ich bin ich bin boomer und auf facebook und lustig war
jemand der geschrieben hat ich habe ich habe gelernt auf twitter auf
ex ehemals twitter ich habe gelernt boomer ist eine einstellungssache und
kein festes alter twitter sagt übrigens hautfarben auch das kann ich nicht ganz
nachvollziehen aber twitter sagt viel wenn der tag lang ist aber boomer ist
eine einstellung kein alter und ich finde das ist eine ganz gute beschreibung
dafür weil es gibt in meinem alter ich werde dieses jahr 40 ja es gibt in
meinem alter leute sind so krass boomer mäßig drauf ich glaube das sind einfach
die die damals als ich angefangen habe mich mit technik zu beschäftigen in die
andere richtung abgebogen sind und sie nicht damit beschäftigt haben plus
leute die noch ein bisschen jung geblieben sind im internet aktiv sind
und sich für technik interessieren die aber immer also durch meine generation
geht so in meinem alter
ganz hart der boomer schnitt entweder die leute sind so ein bisschen noch am
puls der zeit dann nicht so sehr oder die sind komplett oldschool quasi wie
ihre eltern geworden dann richtig hardcore boomer schon mit 40
ja ich wollte also das kritischste was ich bisher gesehen habe in dieser
richtung teufel teufel emoji und und ich bin 40 boomer auf facebook lustig da hat
einer auf einer facebook gruppe gepostet zu ostern
als catching ich schon wenn ich dass er auch sprechen muss er hat er hat er hat
sinngemäß geschrieben erfahrene frauen wissen an ostern sucht man keine eier
sondern man spielt mit ihnen teufel emoji ist ist gelesenina eine grüne
ற ten失in preschool tipp holen sich nicht zu schämen dabei die kante
stриз học r沒事 das ist wirklich leute wenn wir dieses riemann einmal
verwenden können das ist jetzt hart da war jetzt das welches die wahlmatdi mit
wie wieder wo haben wir jetzt voll mitgewise travel drohung kleinen auf Если этой
Dann ist es jetzt Hardcore Dice of Cringe.
Wie kann man das tippen?
Oder auf seiner Tastatur oder auf seinem Smartphone oder sonst wo.
Und sich denken, Alter, richtig krasser Joke.
Ich habe noch nicht mal ein Problem damit, dass er es sagt.
Aber es ist einfach so ein Fremdschämen-Post.
Das war einfach das krasseste Fremdschämen-Post, den ich je gesehen habe.
Ganz schlimm.
Vielleicht, keine Ahnung, aber das war so ultra Dice of Cringe.
Ja.
So, ich muss mich mal eine Runde ASCII-Quarium beruhigen.
Was ist, Moment, was ist ASCII?
Was ist ASCII XFR?
Upload, download files, using the ASCII-Pod.
What?
Okay, die Finnen sind am Start.
Ach, das kommt von Minicom.
Dann ergibt es Sinn.
Über serielle Schnittstelle.
Leute, wir sind wieder im Jahr 1900.
Äh, 92.
Serielle Schnittstelle.
Kennt das überhaupt noch jemand von euch?
Original, ja, wir haben ja auch ein paar ältere hier.
Kennt noch jemand von euch hier?
Serial 0, 0, 0 Modemkabel.
Beste.
Ein serielles 0 Modemkabel, ja.
Ich weiß übrigens bis heute nicht, warum es 0 Modemkabel heißt.
Warum heißt es 0 Modemkabel?
Ich weiß es nicht.
Ähm, das gab es übrigens auch noch anders.
Also das hatte, glaube ich, maximal 100, 115k oder sowas.
Da steht es doch.
Wo steht das?
Der Name.
Der Name 0 Modem rührt daher das Computer auf lange Distanz, oft über Modems mit,
die 3D-Serie mit dem Computer.
Bei einer direkten Verbindung bei dem Computer.
Nur wenige können das entfalten.
Aha, das ist, weil es kein Modem hat.
Okay, das ist die naheliegendste, aber auch zurzeit gleich langweiligste Erklärung dafür.
Ähm, und, ich glaube, das hatte 115k Übertragung.
Dann gab es aber auch noch die schnellere Variante mit bis zu, keine Ahnung,
weiß nicht, 256k.
Das ging über den Parallelport.
Weiß ich, ob die da auch ein...
Parallelport.
Parallel...
Ein...
Weiß ich, ob es da noch ein Bild gibt.
Ja.
Die gab es auch noch für Parallelport.
Da konntest du von Drucker an...
Nee, das stimmt nicht.
Konntest du von Druckerport an Druckerport gehen.
Die waren etwas schneller.
Ja.
Ja.
Ich weiß nicht mehr, was da wieder irgendwie die...
Die Geschwindigkeiten waren.
Aber das war meine allererste Erfahrung mit Computernetzwerk, wenn man das so nennen kann.
Puzzlemeister, danke für den Satz.
Kann man das schon Netzwerk nennen?
Man hat zwei Computer miteinander verbunden?
Ja.
Ich glaube, wenn wir mal großzügig sind, kann man das Netzwerk nennen.
Also das war wirklich meine allererste Erfahrung mit Computernetzwerken.
Da haben wir uns zusammengestöpselt.
Bei mir daheim im Kinderzimmer.
Kollege aus der Schule hat sein Computer mitgebracht.
Oder auch bei ihm dann.
Da haben wir die Computer mit Nullmodemkabel zusammengestöpselt.
Und wir haben damals...
Ich glaube, ich bilde mir sogar ein,
dass das relativ zeitgleich war.
Ich hatte ja damals dann auch so ein Oldschool-Modem noch am Start.
Und da haben wir die Modemverbindung geshared mit über Nullmodemkabel.
Da hatte ich...
Da gab es genau...
Ich weiß es noch.
Da gab es eine...
Mit BNC, klar.
Klar, wir hatten lange BNC am Start.
BNC hatte tatsächlich einen Vorteil,
wenn man...
In einem Haus gewohnt hat.
Und mehrere Leute da waren, die sich verbinden wollten.
Also zum Beispiel...
Bei meinem Freund hier aus der Schule,
wo wir das öfters gemacht haben,
da waren wir da mit fünf Leuten am Start.
Und da haben wir ein langes Kabel gehabt.
BNC.
Also zwei Leute saßen oben unter dem Dach mit dem Rechner.
Und zwei Leute saßen im Erdgeschoss.
So, und irgendwie einer in der Mitte.
Und dann ging ein langes Kabel vom Dach runter in den ersten Stock.
Und dann vom ersten Stock ein langes Kabel im Erdgeschoss.
BNC.
Und dann wurde das alles miteinander verbunden.
Das wäre einfacher gewesen, als alle immer zu irgendeinem Switch hin.
Ich habe das damals mit einer Software gemacht,
die nannte sich WinRoute.
Ich weiß gar nicht, ob es das noch gibt.
WinRouteLight hieß das damals.
Ja!
Ja, genau, so sah das aus.
Damit konnte man...
Ja.
Damit konnte man damals seine Modemverbindung sharen.
Und so oldschool, wie das aussieht, war es auch.
Letztendlich hat das Nutt, ein ganz klassisches Nutt, gemacht.
Und man kam sich so advanced vor.
Ihr könnt euch nicht vorstellen, wie wir uns gefeiert haben, als das funktioniert hat.
Man kam sich so Hackerman-Computerexperte-mäßig vor,
weil man WinRouteLight gestartet hat und dann irgendwie drei Sachen angeklickt hat und auf Start.
Und als wir das erste Mal mit zwei Computern gleichzeitig ins Internet konnten,
das war schon wirklich ein Erlebnis.
Das war ein Erlebnis.
Richtig nice.
Aber ohne die Sache hätte ich mich wahrscheinlich nicht so sehr im Detail dafür interessiert
und würde wahrscheinlich heute nicht in dem Bereich arbeiten.
Kann ja sein.
Eventuell würde ich dann heute was mit Holz machen.
Man weiß ja nie.
Windows 95?
Ja, gab es ja damals noch gar nicht am Anfang.
Wusstet ihr, dass ich USB-Hater war am Anfang?
Ganz am Anfang, als es neu war?
Ich wollte kein USB.
Ich kann euch ja sagen, warum ich kein USB wollte.
Warum?
Weil damals hat man Tastaturen angeschlossen über PS2.
Manche Mainboards haben das heute noch, diesen Stecker.
Den gab es in grün für die Maus und in so lila für die Tastatur.
Und warum ich USB am Anfang nicht mochte, war folgendes.
Ich hatte eine USB-Tastatur angeschlossen.
Das war in einem Microsoft Office Keyboard USB.
Das war eines der ersten ergonomischen Tastaturen, die sowas in der Richtung.
Aber das war nicht genau das.
So ein ganz altes.
Das hatte noch so ein Scrollrad an der Seite.
Ja, das hier.
Das hier, nur in schwarz.
Das ist genau das, nur in schwarz gewesen.
Das hat man über USB angeschlossen.
Das war das erste Keyboard, was ich hatte über USB.
Ich habe damals ein Spiel gespielt auf meinem Rechner.
Da musste man mehrere Tasten gleichzeitig drücken, um was zu machen.
Das war irgend so ein billiges 3D-Action-Game.
Kennt das noch jemand?
Ja, 1998.
Kennt das noch jemand?
War nie sonderlich bekannt.
Da hatte ich aus zweifelhafter Quelle eine Kopie von dem Game.
Ja, so sah das aus.
Ja, und zumindest, da musste man, da musste man mehrere Knöpfe, mehrere Knöpfe gleichzeitig drücken, ja.
Und wenn ich mehrere Knöpfe gleichzeitig gedrückt habe, auf meinem USB-Keyboard, hat's gemacht, hat mein Rechner gemacht, biep, biep, und hat die Tastatureingaben nicht registriert.
Also sprich, wenn man irgendwie mehr als, keine Ahnung, vier Knöpfe oder so gleichzeitig gedrückt hat, hat das, konnte, konnte das Keyboard nicht verarbeiten.
Und eventuell.
Ja, da war das auch wirklich ein USB-Problem damals.
Und da hab ich übelst geschimpft und hab gesagt, ich verwende nie USB-Keyboards.
So einen Schrott verwende ich nicht.
Keine, keine USB-Keyboards.
USB-Keyboards, scheiße.
Und bin wieder PS2-Tastatur spielen gegangen.
Das hab ich dann eine Weile durchgehalten, bis ich dann anscheinend mal Spiele gespielt hab, die nicht fünf Tasten gleichzeitig gebraucht haben.
Und dann bin ich doch auf das, dann bin ich doch, dann bin ich doch auf die Tastatur geswitcht.
Und die hatte ich wirklich jahrelang.
Diese Tastatur.
Jahrelang.
Bis sie auseinandergefallen ist.
Bis, bis sie kaputt war.
Die hatte ich ja, die hatte ich noch, als ich mit YouTube angefangen hab.
2010 hatte ich die noch.
Die Tastatur hab ich mir irgendwann geschenkt bekommen, eher wahrscheinlich, so 1997 oder so.
Die hatte ich mindestens bis 2010.
Mindestens 13 Jahre, das Ding.
Aber ich hab mir dann schon irgendwann auch mal was ordentliches noch gekauft, ja.
Ja.
Welche hast du jetzt?
Jetzt hab ich irgendeine Logitech, äh, was hab ich denn hier?
Was ist das?
Logitech G512 Carbon GX.
Die hab ich, die hab ich noch nicht so lang, weil ich hatte die G512 Carbon GX.
Ja.
So ein Teil hier.
So.
Die hab ich noch nicht so lang, weil.
Ich hab die gleiche Tastatur jetzt schon zum zweiten Mal.
Weil die erste Tastatur.
Lasst mal überlegen, nicht, dass ich euch jetzt Mist erzähle.
Ah.
Ich weiß es.
Bei der ersten Tastatur ist die, ist die, ist die Control-Taste abgebrochen.
Nach einem halben Jahr.
Kein Witz.
Fragt mich nicht, wie das geht.
Wie beschissen man eine Tastatur fertigen kann.
Aber die Kont, die, äh, SDRG-Taste ist abgebrochen.
Nach einem halben Jahr.
Einfach abgebrochen.
So, und SDRG.
SDRG.
Ist halt doof, wenn das einmal richtig funktioniert.
So.
Das, das war ein Problem.
Dann hab ich die zurückgeschickt bei Amazon.
Oder bei Logitik.
Ich weiß gar nicht mehr wie, über welche Wege.
Und jetzt hab ich eine neue und die hab ich jetzt seit zwei Jahren oder so und die geht schon ganz gut.
Ich bin, aber ich muss ehrlich sagen.
Ich bin von aktueller Equipment-Qualität.
Etwas enttäuscht, was Tastaturen angeht.
Zumindest von diesem 0815 Gaming Equipment.
Davor hatte ich eine Corsair, ähm, frag mich nicht, ähm, so eine super, äh, super teure, ähm, mechanische Corsair-Tastatur, äh, Corsair, Corsair schreibt man hier, und da war, ja, K95 RGB Platinium.
Platinium.
Ja.
Das Teil hatte ich davor.
Und das hat mir, ohne Mist, das hat mir von Anfang an nicht gefallen.
Das ging los mit dieser komischen, mit dieser komischen Haltballenablage, die auch irgendwie nur optional war.
Dann ging es weiter mit den Funktionstasten an der linken Seite.
Sieht's ja hier.
Und, ja, hier sieht man's ganz genau.
Wisst ihr, es ist ja eine coole Idee.
Das sieht ja erstmal nach einer coolen Idee aus, wenn eine Tastatur so Funktionstasten hat.
Aber an der linken Seite ist echt problematisch, weil man ist gewohnt, dass links unten, ich weiß nicht, wie es euch geht, Chat, ich bin gewohnt, wenn ich an den linken unteren Rand meiner Tastatur greife mit dem Finger, dann ist die erste Taste, auf die ich komme, Control.
Und nicht G6.
Und ich hab so oft G6 gedrückt, anstatt Control, das war nicht mehr feierlich.
Und selbst nach einem halben Jahr, ich hab mich da einfach nicht dran gewöhnt.
Also, das hat mir schon mal nicht gefallen.
Die Funktionsdinger hier oben hab ich so gut wie nicht verwendet.
RGB und so war alles in Ordnung.
Nächstes Problem, was ich hatte, ist, dass ich den Eindruck hatte, ja, aber das ist auch kein Problem.
Da hast du zwei Tastaturen, da hast du zwei Tasten, die das Gleiche machen.
Das ist nicht so wild.
Chat, ja, nicht so, dass ich nicht auf die Idee gekommen bin.
Das Problem ist dann aber, dass es sich trotzdem nicht richtig anfühlt, wenn du einfach eine anders geformte Taste dann drückst.
Und dann immer im Hinterkopf überlegen musst, so nach dem Motto, hä, irgendwie fühlt es sich komisch an.
Ach so, das war bestimmt jetzt G6.
Es bringt einen einfach im Kopf durcheinander.
Ja, das hat mir nicht gefallen.
So, und das nächste Problem, was ich mit dem Ding hatte, ist, die Tasten.
Ich glaube, das ist eine rein mentale Sache gewesen, dass ich durch die Art der Aufschrift den Eindruck hatte,
dass die Tasten wären.
Die Tasten wären kleiner als auf einer normalen Tastatur.
Ich glaube nicht, dass sie wirklich kleiner waren.
Ich glaube, das war eine reine Kopfsache, dass ich beim Draufgucken den Eindruck hatte, die Tasten wären kleiner als normal.
Wahrscheinlich ist das nicht so.
Das nächste Problem, was ich damit hatte, dass die Oberfläche hier super rutschig gewesen ist.
Weiß ich, ob das Gamer-Kleiding-mäßig sein sollte.
Die war rutschig.
Also.
Oder sagen wir mal so, die war nicht rutschig, die war so glatt, dass du mit dem Finger, wenn du drüber gefahren bist, kaum einen Widerstand verspürt hast.
Das ist auch eine persönliche Sache.
Hat mir jetzt auch nicht so geholfen.
Also, die hat mir auch nicht so gefallen.
Aber das größte Problem und warum ich diese Tastatur dann auch in Müll gekloppt habe, ist, weil ich doppelte Tastenanschläge hatte.
Ein Problem, was einige mechanische Tastaturen haben.
Ja.
Du hast beispielsweise hier eine Taste gedrückt.
Bäm.
Und dann hast du zweimal oder dreimal A stehen.
Ich hatte doppelte Tastenanschläge.
Und ich hatte doppelte Tastenanschläge.
Aber ganz wirklich.
So bei Control-C habe ich dann dreimal gecancelt.
Und es war, also doppelte Tastenanschläge.
Das war nicht so, dass einer einmal von einer Million Tastendrücke das passiert ist.
Ja, genau.
Das hatte ich auch das Problem.
Du hast dann.
Du hast dann mehrere Klammern gemacht und sowas.
Ganz eklig.
Bei Control-V war das.
Genau.
Ich habe mehrfach Copy-Pasted durch doppelte Tastenanschläge.
Und das war was, wo ich mir gedacht habe, bei einer Tastatur, für das die ernsthaft damals irgendwie 150 Euro oder sowas wollten,
habe ich mir gedacht, kann es nicht sein, dass ich bei der Kerndisziplin, nämlich Tippen, dass sie nicht richtig funktioniert.
Ja, doppelte.
Und es war natürlich die übliche Sache, dass sie geschwingt hat, wie viele mechanische Tastaturen mit so einem Metallkörper.
Also sprich, wenn du einen Knopf gedrückt hast, bei der Logitech hier ist das nicht so wild, ja.
Wenn du eine Taste festgedrückt hast, dann hat es gemacht.
Das haben aber viele mechanische Tastaturen, die so einen Metallkörper drunter haben.
Das schwingt so nach, wenn du fest eine Taste drückst.
Und das war ein Geräusch, das ging mir auch auf den Keks, wenn ich schnell getippt habe.
Ich kann ja semi-schnell tippen.
Und wenn ich irgendwie schnell getippt habe, dann hat die Tastatur die ganze Zeit so einen Schwinggeräusch gemacht.
So einen Summengeräusch durch die ganzen Schwingungen von dem Metallkörper.
Also, lange Rede, kurzer Sinn, mir hat es nicht gefallen.
Und eines der letzten Punkte, der mir auch nicht gefallen hat, ist die Corsa-Software.
So.
Die war im Großen und Ganzen okay.
Aber, ja, ein paar Sachen waren trotzdem kacke.
Nicht, dass die Logitech-Sachen so viel besser sind.
Also, ich hatte mit modernem Gaming-Equipment...
...was Tastaturen angeht, keine allzu guten Erfahrungen die letzten Jahre über.
Die ist auch nicht der Weiße als letzter Schluss, aber die funktioniert halt zwar schon ganz gut.
Ja.
Das Ding würde ich nicht mehr verwenden.
Jo.
Und...
Jetzt wollte ich euch mal sagen, die beste Tastatur, die ich mir die letzten Jahre über gekauft habe, war tatsächlich...
...das ist jetzt keine Gaming-Tastatur, die ich dir daheim verwenden würde, mit Makro-Funktionalität und sowas.
Oder mit Software, die ist sehr raw.
Aber die...
...handwerklich, oder sagen wir mal so, vom Feeling her, sagen wir mal vom Feeling her, die vom Feeling her, beste mechanische Tastatur, die ich mir die letzten Jahre über gekauft habe, war eine Ducky One Skyline.
Full-Size.
Full-Size...
...mit...
...genau.
Keine One-Zwei-Skyline, noch eine alte Ducky One Skyline.
Die ist richtig nice.
Die habe ich seit Jahren täglich auf der Arbeit im Einsatz gehabt.
Na gut.
Täglich auf der Arbeit ist...
...la...
...ist...
...seit Home-Office nicht mehr.
...seit Home-Office nicht mehr.
...seit Home-Office nicht mehr.
...seit Home-Office nicht mehr.
Aber ihr wisst, was ich meine.
Aber ihr wisst, was ich meine.
Aber ihr wisst, was ich meine.
Die habe ich mir rein für die Arbeit gekauft, die Tastatur, und habe die auch...
...hier so...
Bring your own Keyboard.
...mitgenommen auf die Arbeit.
Und das Ding ist wirklich einfach, ohne Schnickschnack, eine richtig gute Tastatur.
Die kann nix!
Die hat kein RGB.
Die hat kein super fancy Makro-Software.
Die hat nix...
Du kannst mit der...
...echt kompliziert Makros programmieren, mit so einem Dipswitch hinten drauf.
...echt kompliziert Makros programmieren, mit so einem Dipswitch hinten drauf.
...echt kompliziert Makros programmieren, mit so einem Dipswitch hinten drauf.
Ja, also...
Das muss nicht wirklich sein.
Keine Gaming-Software und sonst wie nix.
Kein RGB.
Einfach nur eine Tastatur, die sich gut anfühlt zu tippen.
Hast du noch einen Amazon-Rev-Link?
Bestimmt.
Aber, scheiß drauf.
Kauf einfach.
Probier mal Ausrufezeichen Amazon.
Weiß nicht, ob wir sowas haben.
Aber...
...ist wurscht.
Sieht ein paar Euro.
Kauf einfach.
Was kostet die?
Die Ducky One Sky...
...die sind jetzt nicht so billig, die sind aber auch nicht so teuer, wie so extrem gepimpte Gaming-Keyboards.
Dürfte wahrscheinlich um die 100 Euro kosten oder so.
Gucken wir mal bei Amazon.
Ducky One Sky.
Kann nicht schreiben.
Natürlich haben die mittlerweile auch was mit RGB.
Was sonst?
Ja, Mini mag ich nicht.
Äh, anscheinend gibt sie grad...
...gibt sie...
...gibt sie nicht mehr zu kaufen?
Gibt's da mittlerweile schon...
...irgendwann Geizhals?
Okay, wir haben tatsächlich einen Rev-Link.
Wahnsinn.
Krass.
IIQ, shit.
Wusste ich gar nicht.
Geht der noch?
Ich klick den jetzt mal kurz selbst an, ob der überhaupt noch geht.
Ja, der funktioniert.
Pok.
Nicer Rev-Link.
Hat die Backlight?
Nö.
Nix?
Hat die.
Die scheint grad echt schwierig lieferbar zu sein.
Ich hab übrigens auch die mit dem...
...mit dem blauen Enter-Knopf.
Warum ist denn die grade nicht lieferbar?
Ist die irgendwie...
...ist die irgendwie Tastaturengpaste oder wie?
Ist die end of life?
Gibt's da ne neue?
Gibt's da ne Ducky 3?
Ducky 1 3?
Achso, ah, da gibt's einen Nachfolger mittlerweile von.
Aber das ist mit RGB, shit.
Mit RGB will ich die jetzt net haben.
Naja.
Zumindest...
...ist die nice.
Vielleicht ist die auch.
Kauf die nicht, meine hört sich kacke an.
Tja.
Meine hört sich nicht kacke an und jetzt?
Vielleicht magst du einfach den Sound von mechanischer Tastatur nicht.
Ah ja, und eine Sache, die ich gemacht hab mit der...
...mit der Ducky 1 Skyline ist...
...nachdem ich die...
...nachdem ich die auf der Arbeit verwende...
...ja, das ist die englische Tastatur, laut...
...nachdem ich die auf der Arbeit verwende...
...ich hab unter manche Tasten...
...also sprich, auf die Tasten, wo ich immer besonders heftig drauf haue...
...hab ich Silikonringe gemacht.
Gibt's auch für 50 Cent oder so, gibt's so nen Pack Silikonringe.
Ich hab unter die Enter-Taste beispielsweise einen Silikonring gemacht...
...und unter die NumBlock-Enter-Taste...
...weil ich will meinen Kollegen auf der Arbeit nicht allzu sehr auf den Sack gehen...
...und ich weiß, es gibt so ein paar Tasten, auf die haue ich besonders gerne fest drauf.
Und eine der Tasten, wo ich gerne fest drauf haue, ist Enter und NumBlock-Enter.
Hauptsächlich NumBlock-Enter.
Niemand verwende NumBlock-Enter, ich verwende NumBlock-Enter.
Keyboard ASMR, ja genau.
Ich verwende NumBlock-Enter.
Allerdings nicht so regelmäßig, aber wenn ich's verwende, haue ich drauf.
Und zwar, ich verwende NumBlock-Enter immer dann, wenn ich irgendwas getippt habe.
Ja, hier, super, super krass kompliziertes...
...Shell-Zeug getippt, so.
Und dann guck ich mir das immer noch mal an.
Aha, aha, aha, ja, obviously, das will ich machen.
Und wenn ich mir sicher bin, dass das ist, was ich ausführen will, dann mach ich...
...Bam!
...auf NumBlock.
NumBlock-Enter.
Das ist der einzige...
...Fall, wo ich NumBlock-Enter verwende.
Aber wenn, dann hau ich immer richtig mit Schmackes drauf.
Und deswegen hab ich da zwei Silikonringe auf dieser...
...unter der Dacke.
Das ist den Leuten bei mir im Büro nicht so sehr auf den Keks geht.
So sieht's aus.
Ja, deswegen Silikonringe drunter.
Man kann aber durch die Wahl der Switches auch was ausmachen.
Immer Full-Size-Tastaturen kaufen.
Immer Full-Size-Tastaturen.
Ich mag diese kleinen Dinger überhaupt gar nicht.
So.
Also, lass uns mal gucken.
Was trennt ihr denn auf ShitHub diese Woche?
LibriChat.
Oh nein, kein AI.
AI.
AI.
How to Cook.
Moment, das ist ein China-Chinesen-Kochbuch?
Okay.
Vegetable Dish.
Okay, gibt keine.
Gibt keine Fotos dabei.
Nextcloud hat jetzt auch AI.
Nextcloud hat alles, nur nichts richtig.
Deswegen mag ich Nextcloud nicht.
Und ich guck's mir regelmäßig an.
Stell fest, ich werd immer wieder bestätigt drin.
Okay.
Das ist mal tatsächlich ein interessantes GitHub-Projekt.
Nicht für mich, aber wenigstens...
Ich finde witzig, da...
Moment.
Warum...
Warum hat ein Kochbuch ein Docker-File?
Wait a minute.
Das baut die Seite...
Die Seite für die...
Die Kochbuch-Webseite baut das zusammen.
Wisst ihr?
Leute, in der heutigen Zeit haben Kochbücher Docker-Files.
Nice.
Ein China-Chinesen-Kochbuch für Programmierer.
Comfy UI.
Z...
Ja, der funktioniert leider immer noch nicht richtig bei mir.
Oh, das...
Das wär mir zu bunt.
Oh, nee.
Das wär...
Das wär nix, äh...
Next Generation Crawling and Spidering Framework.
Spodermann.
PaperMC.
Natürlich Java, was sonst?
Leute, was ist denn in der Minecraft-Welt aktuell eigentlich mehr verbreitet?
C++-Minecraft oder Java-Minecraft?
Und kann man mit dem C++-Minecraft gescheit auf Java-Minecraft-Servern spielen?
Also, ich würd mal sagen, ja.
Weil das ja egal ist, in was das Backend implementiert ist.
Aber man weiß ja nie.
Java, okay.
AI.
Orchid Base.
AI.
AI.
Das trendet.
100 pro wegen der EM.
Ähm, IPTV-Channels.
Das trendet bestimmt nur wegen der EM.
Ist heute Abend nicht sogar wieder Fußball?
Deutschland?
Ich, wie gesagt, ich bin kein großer Fußballgucker, wisst ihr.
Ich gucke, wenn überhaupt, mal ein bisschen zur EM oder zur WM.
Dieses Jahr werd ich tatsächlich in eine Sache gucken, die ich noch nie geguckt hab, weil's mich noch nie interessiert hat.
Sind ja olympische Spiele.
Ich werde mir wahrscheinlich ein paar, äh, Running-Disziplinen angucken.
Einfach nur, um festzustellen,
wie scheiße schlecht ich bin.
Gegen richtig coole Leute.
Das ist so krass, Alter.
Wenn du dir das anguckst, was die da, äh, was die da...
Man muss sich mal vorstellen,
dass der Marathon-Weltrekord
doppelt so schnell läuft wie ich,
aber
über 40 Kilometer anstatt über 5.
Das ist, das ist super, das ist total abgedreht.
Also, wenn ich wirklich all out renne, 5 Kilometer,
renne ich so, keine Ahnung,
5, 5 Minuten 11 pro Kilometer oder, äh, ja, 5 Minuten 11 pro Kilometer oder so, ja?
Das schaff ich mit Ach und Krach über 5 Kilometer, dann bin ich dead.
Und...
Die Marathon-Leute,
die laufen 2 Minuten 50
pro Kilometer über 40 Kilometer.
Es ist...
Ich wusste früher auch schon, dass die schnell sind.
Aber mittlerweile hab ich zumindest mal so einen halbwegs
Vergleich dazu,
wie schnell, also wie übertrieben
unmenschlich schnell die eigentlich sind.
So, das werd ich mir dieses Jahr tatsächlich zum ersten Mal geben.
Dass ich wieder seh, wie sehr ich eigentlich noch sacke, ey.
Ich muss aber echt sagen,
jetzt mal, äh, kurze, kurze, Thema, Themaswit,
ich muss aber echt sagen, die letzten paar Wochen
spür ich, dass es echt bergauf geht richtig wieder.
Ich bin jetzt mehrfach 10, 11, 12,
ich glaub, das, das längste war, war an die 14 Kilometer,
gerannt
in der Geschwindigkeit,
da hätte ich früher nicht eingepackt.
Ich hab richtig gemerkt,
dass es die letzten,
gerade die letzten Wochen,
ging es wirklich richtig aufwärts.
Wieder formtechnisch.
Und das macht Bock, ja,
wie das, ihr wisst, wie das ist,
grüne Pfeile, die nach oben zeigen,
sind motivierend.
Hast du das Klimaanlagen-Drama gesehen?
Nee.
So, HTMX trendet.
Okay.
Ah!
Wisst ihr, was ich mir auch noch mit euch angucken wollte?
Das müssen wir jetzt auch noch machen.
Das müssen wir jetzt auch noch machen.
State of Frontend wollte ich mich ja noch mit euch angucken.
State of, ja,
nicht wundern,
dass es 2023 ist.
2024 gibt es erst 2025.
Das ist eine Umfrage von diesem Jahr,
was ich bei den Leuten,
was die Leute so über
JavaScript und Frontend-Entwicklung gedacht haben,
das letzte Jahr über.
Also mein Ziel ist,
weil du es gerade ansprichst, ja,
also ich hab, ich hab zwei Ziele.
Zwei Ziele, was,
also zumindest meine Ziele, was das Rennen angeht.
Das erste Ziel ist,
ich will Hanau Seligenstadt und zurückrennen.
Das sind knapp 22 Kilometer.
Und das will ich einfach packen.
Ich glaube, da stehen die Chancen ganz gut,
weil ich bin jetzt schon 14 Kilometer gerannt.
Deutlich schneller,
als ich vorhatte, die 22 Kilometer zu rennen.
Und das sind, sagen wir mal,
das sind ja nur 8 Kilometer mehr.
Das ist eine Menge, ja,
wenn du es eh schon in den Beinen merkst.
Aber dafür renne ich auch eine ganze Ecke langsamer.
Also da bin ich ganz zuversichtlich,
dass ich das packe.
Da brauche ich,
ich wollte es eigentlich heute machen, ja.
Eigentlich wollte ich es heute machen,
aber es ist scheiß Wetter.
Deswegen lasse ich das Leben, mache ich das nicht.
Ich mache das das erste Wochenende,
wo gutes Wetter ist wieder, mache ich das.
22 Kilometer, also Hanau, Hanau Seligenstadt und zurück.
Und das nächste ist
10 Kilometer unter 6 Minuten Pace.
Das kriege ich auch hin,
aber da hatte ich bisher noch keine Motivation zu.
Das,
ja,
war wirklich mich da durchzubeißen.
Ja, also,
nee, kenne ich nicht.
Also,
ich bin gestern, also ich bin ja nicht so weit weg.
Ich bin ja nicht so weit weg davon, ja.
Also gestern bin ich zum Beispiel,
und das war weit davon entfernt, gerade die erste Hälfte,
dass es irgendwie
am Limit war oder so.
Ja, also gestern,
deswegen glaube ich, ich kriege das eigentlich ganz gut hin.
Gestern 11 Kilometer,
knapp 11 Kilometer mit 6,15er Pace.
Also sprich,
ich muss ein bisschen schneller rennen.
10 Kilometer, das geht.
Ja, das sind so meine zwei Ziele in nächster Zeit.
Und dann habe ich natürlich immer noch,
immer noch das Ziel 5 Kilometer unter 5er Pace.
Da bin ich auch ein bisschen weg von.
Also 5,11 ist wirklich das Beste, was ich gerade hinkriege,
aber ich merke es,
ich merke es die letzten paar Wochen,
dass es wirklich steil bergauf geht, gerade formtechnisch.
Und,
also gefühlt zumindest, ja.
Meine Garmin Uhr meint auch ein bisschen,
ja klar, geht, geht hoch.
Aber,
ich, vom Gefühl her, fühlt es sich einfach gut an,
gerade
in der Geschwindigkeit zu rennen,
die ich noch vor ein paar Wochen als anstrengend empfunden habe.
Also, ja, passt schon.
Ja, immer, immer.
Ich renne mittlerweile jeden Tag.
Oder Fahrrad fahren.
Manchmal beides, aber,
also, meine Taktik ist nicht sonderlich scientific,
was das angeht.
Ich versuche jeden Tag zu rennen.
Ich habe so einen Trainingsplan-Generator,
der mir immer eine schöne Mischung baut aus
langsam zum Erholen, schnell zum bisschen Anstrengen und so.
Und sollte mir das Bein wehtun,
mal einen Tag,
oder so,
und gutes Wetter,
gehe ich Fahrrad fahren an dem Tag,
aus der Garmin-App.
Und sollte mal gar nichts sein,
letztens, mir hat beispielsweise letzte Woche mal der Knöchel wehgetan,
auf der linken Seite,
dann mache ich einen Tag Pause.
Aber ansonsten,
versuche ich einfach jeden Tag irgendwas zu machen
und ab und zu mal Pause zu machen.
Heute mache ich vielleicht Pause.
Und wenn man nicht jedes Mal all out rennt,
ist das auch kein Ding.
Wenn man immer regelmäßig zwischendurch mal
einfach sagt,
okay,
heute,
easy,
langsam,
nur eine halbe Stunde,
da hat man was gemacht,
man bleibt drinnen
und man ist am nächsten Tag wieder fresh.
Fühlst du nicht gut,
wenn du mal einen Tag nicht machst?
Also ein Tag juckt mich nicht,
aber wenn ich zwei Tage in Folge nichts mache,
ist mir schon zu lang.
Ich nehme das übrigens,
also die 22 Kilometer nach Selingschatten zurück,
dann hänge ich mir meine GoPro um
und nehme mal ein paar Sachen zwischendurch auf.
Mal gucken.
Wie gut,
aber ich hoffe,
ich habe eine Blase rechts am Fuß,
ein bisschen so aufgerieben,
schon was drübergeklebt.
Ich hoffe,
die ist bis nächsten Sonntag weg,
weil 22 Kilometer mit einer Blase am Fuß ist kacke.
Ja,
okay,
so viel dazu.
htmx,
Trended,
AI,
Mesop,
Google habe ich noch nie gehört.
Was soll das sein?
Ein Google-Projekt,
was in zwei Wochen wieder eingestellt wird.
Was stand da?
Ja,
Stable Swarm UI.
Okay,
Cyber Chef ist tatsächlich ganz cool,
das verwende ich auf der Arbeit öfters mal,
zum Beispiel
für Zertifikatinfos auslesen und sowas,
wenn ich keinen Bock auf OpenSSL,
Text,
Minus,
O,
was auch immer habe.
Ja,
also da war jetzt nichts so Spannendes.
Da gucken wir mal ganz schnell,
auch wenn sich da nichts Spannendes tut,
in letzter Zeit schon mal kurz,
was in der .NET Welt so trendet.
PowerShell,
PowerShell gibt es ja auch seit einer Weile für Linux.
Chat,
gibt es jemand bei euch
oder kennt jemand einer,
also kennt von euch jemand einen
oder einen Server oder was auch immer,
der PowerShell für Linux benutzt?
Ich könnte mir höchstens die Konstellation vorstellen,
man hat ein paar Skripte,
hat jetzt einen Linux-Server
und möchte es darauf laufen lassen.
Also ich,
ich nicht.
Ich benutze es nicht.
Ich kenne niemanden,
der es auf Linux benutzt
und ich kenne auch keine Server-Systeme oder so.
Wo dort irgendwelche PowerShell-Skripte laufen.
Ich glaube,
das ist einfach ein Ding,
das gibt es.
Usen wird es so gut wie keiner.
Wobei PowerShell,
da muss man Microsoft mal wirklich guten,
guten,
ja,
Absichten mal unterstellen
und PowerShell taugt auch.
PowerShell ist eine ziemlich nice
Scripting-Environment,
aber ich finde keine gute interaktive,
so Daily-Arbeiten-Shell.
Na,
das juckt.
Okay,
was trennt sonst noch irgendwie Spannendes?
Avalonia,
die trennten zurecht.
Network-Manager meint das.
Braucht man sowas?
Porn to be root.
Ja,
das ist schon mal nett.
Unter Windows.
Äh,
okay.
Leute,
ich bin mir unschlüssig.
Ist es eine WPF-Anwendung
oder ist es eine
hübsch gestylte Windows-Forms-Anwendung?
Ich gehe nicht davon aus,
dass es eine
WinUI-UWP-Verschnitt-Anwendung ist.
Dafür sieht das Font-Rendering
auch nicht richtig genug aus.
Also,
ich würde auf eine
Windows-Forms-Anwendung tippen,
die
hübsch gestylt ist.
Wobei das Font-Rendering auch durchaus
WPF-mäßig ist.
Lasst uns mal schauen.
Nicht, dass das irgendwie entscheidend wäre.
Source,
Controls,
Grid,
Dependency.
Es ist WPF.
Es ist WPF.
Ja,
es ist eine WPF-Anwendung.
Was wir wahrscheinlich auch irgendwo hier drinnen sehen.
What?
Äh,
okay,
alles klar.
Ja,
es ist eine WPF-Anwendung.
Flow-Launcher.
Ah,
das Ding habe ich mal ausprobiert.
Das war ganz nice,
aber nichts,
wo ich mich dran gewöhnen konnte.
Ein Switch-Emulator,
der noch existiert.
Maui,
wo ich jeden Tag darauf warte,
dass Microsoft
den Blog-Post macht.
Es wird eingestellt.
Polly.
Polly habe ich gelesen,
wird jetzt
in irgendeiner Art und Weise,
ich habe es nicht so ganz gecheckt,
integriert sein
in .NET.
Was kommt dieses Jahr?
.NET 9,
ja?
Das wird angeblich irgendwie integriert sein
in .NET 9.
Was ich cool finde,
weil
mir gefällt das,
das ist
mal als Beispiel,
die Beschreibung ist halt wieder
richtig
überraschend.
Also,
ich glaube,
das ist
eine gute Idee,
weil
ich glaube,
das ist
nicht
übertrieben
Microsoft.
Niemand versteht das.
Seriously,
Leute,
mal an die Frage an euch,
die diese Library
noch nie verwendet haben.
Würdet ihr verstehen,
was es ist?
Polly ist
a .NET Resilience
and Transient Fault Handling Library
that allows
developers
to express
policies
such as
retry
circuit breaker
timeout
bulkhead
isolation
and fallback
in a fluent
and thread-safe manner.
Würdet ihr verstehen,
was es macht?
T.S.
Fuchs,
du weißt das besser.
Du gibst mir doch jetzt
nur eine Vorlage,
dass ich mich wieder über
Microsoft-Benahmung
aufregen kann,
oder?
Exposed.
Also,
ich,
ich sag euch,
was es ist.
Es ist eine Library.
Wir machen ein Beispiel.
Wir machen ein Beispiel,
okay?
Ihr wollt einen
Web-Request machen
in .NET.
Ja,
ihr sagt also,
http client
meineapi.de.
So,
jetzt kann es
ja sein,
dass meine API
gerade nicht
erreichbar ist
oder einen Fehler wirft
oder was auch immer.
So,
und mit
Polly
kannst du quasi,
wir nennen es mal,
ich umschreibe es mal
ganz grob,
kannst du einfach
retries
einbauen,
ja?
Also,
du machst einen
Web-Request
gegen eine API,
die liefert einen Fehler
zurück und dann kannst du
mit Polly sagen,
ey,
ich will mich nicht
selbst darum kümmern,
das dreimal auszuführen,
Polly,
weißt du was?
Solange
das
meine Requests
erfolgreich sind
nach dreimal,
ist mir es eigentlich egal,
wie oft du es probiert hast,
dann sagst du einfach,
okay,
ich mache jetzt nicht direkt
einen HTTP-Request,
sondern ich sage einfach,
Polly,
mach für mich
den HTTP-Request
und
liefer mir das Ergebnis,
egal ob du zwei-, dreimal-, viermal
retryen musst.
Das ist im Prinzip
eine Library,
die es dir einfacher macht,
deine
Web-Requests
zu
stabiler zu machen.
Zu retryen,
ohne dass du dich selbst
um den Retry kümmern musst.
Das sind natürlich
nicht nur Web-Requests,
das kannst du theoretisch
für alles verwenden.
Also für alles,
was fehlschlagen kann,
bietet Polly die Möglichkeit,
dass du
mit ein paar
Config-Optionen
das retryst.
Das ist im Prinzip
nichts anderes
wie eine fancy Schleife
mit einem Break drinnen.
Eine sehr fancy Schleife
mit einem Break drinnen.
Ja,
so nach dem Motto,
while count
kleiner 3
machen ein Web-Request,
wenn Fehler,
count++.
Ja,
aber vielleicht ist es ja
kein Backend,
was du unter Kontrolle hast.
Ja,
vielleicht machst du
einen Web-Request gegen
irgendeine Wetter-API
und die sind halt mal kurz
nicht da oder
das Internet ruckelt mal kurz
oder so.
Und es interessiert dich
einfach nicht,
solange du innerhalb von
drei Mal eine Antwort kriegst.
Das kannst du mit Polly machen
und das ist ziemlich cool.
Leider ist die
die Konfiguration von Polly
ein bisschen
bisschen pepeger,
wie man das einrichtet.
Ja.
Pipeline,
Bilder,
whatever.
Und das bauen die jetzt
in .NET ein.
In .NET 9
bauen die das ein,
sodass du beispielsweise
offizielle Extension-Methods
für den HTTP-Client hast,
dass du das nicht mehr
selbst machen musst.
Du sagst dann im Endeffekt
einfach nur so was wie
http-client
get
get-request
meine-api.com
retry count 5.
retry count 5.
retry count 5.
Fertig.
Mehr machst du dann nicht mehr.
Ganz vereinfacht gesagt.
Das finde ich gut,
dass das eingebaut ist jetzt.
Muss ich nicht mehr
selbst drum kümmern.
Das geht um .NET 9
das Video.
Ja.
Das ist richtig,
aber mein Beispiel
war ja auch nur eine
der Sachen,
die du mit Polly machen kannst.
Du kannst,
du kannst mit Polly
zum Beispiel
auch sagen ey,
retry es fünf Mal,
aber
jedes Mal
mit
einem
increasing
timeout
dazwischen.
Ja.
Also erst eine Sekunde,
dann zwei Sekunden,
dann vier Sekunden,
dann 16 Sekunden
dazwischen.
Plus,
ich möchte allerdings,
dass du
jedes Mal
noch einen kleinen
random Faktor
einbaust,
dass es nicht
immer alles
zeitgleich
ausgelöst wird.
Und das sind so Dinge,
das kannst du alles
ohne Probleme
selbst bauen,
aber macht es dann schon
unnötig komplex.
Ja,
genau.
Ja,
genau,
genau,
das kannst du.
Und die Microsoft empfiehlt
ja auch so Kombinationen
ausfiltern.
Ja.
Finde ich,
finde ich eigentlich eine coole
Sache,
dass sie das jetzt einbauen
wollen in dort.
Wobei man sagen muss,
die Library wird es weitergeben.
Die bauen einfach ein paar
Helper Funktionen ein,
die immer auf Polly
zurückgreifen.
Ich habe absolut keine Ahnung,
was das sein soll.
Der Asset Ripper
hört sich ein bisschen an
wie irgendeine
wie wegen aus dem
aus so einem Boomer Shooter
irgendeine Waffe.
Erst mal den Asset Ripper
aufheben.
ASP.NET Core,
Radar,
Mass Transit.
Ja,
OpenAPI bringt mir nichts,
weil die meisten APIs,
die ich anspreche,
sind nicht offiziell.
Ja,
hier hat keine OpenAPI
Spezifikation.
In letzter Zeit zumindest.
Fiat,
Fiat hat keine OpenAPI
Specs für ihre API.
Fast Endpoints ist so
ein bloater Ding,
wo ich nicht verstehe,
warum man das braucht.
Roblox Stealth.
Okay,
was ist der Asset Ripper,
Mann?
Okay,
eine GUI-Anwendung
ohne Screenshots
suckt.
Der Asset Ripper.
Siehste,
ich habe wirklich keinen Bock,
mich das anzugucken.
Das ist quasi
so ein Dokumentenvernichter.
Ja,
das soll erst
in .NET 9 kommen.
Also,
wenn .NET 9 das ist,
was dieses Jahr kommt,
dann kommt es erst in .NET 9,
weil .NET 8 ist ja schon da.
So,
und jetzt
gucken wir uns.
Also,
wir haben ja
eine halbe Stunde
geschwätzt.
Kein Wunder,
dass mir manchmal
der Hals,
mein Hals super trocken ist
nach dem Streamen.
Ich labere ja einfach
eine halbe Stunde komplett
ohne Luft zu holen durch.
Jetzt weiß ich auch,
wie die ganzen Gaming-Streamer
acht Stunden am Stück
streamen können.
Die spielen halt
zwischendurch
und reden ab und zu mal.
Boah,
gibt doch welche,
die flippen die ganze Zeit aus.
Ganz ehrlich,
den Durchschnitts-Gaming-Influencer,
den kann ich mir nicht geben.
Ich weiß nicht,
ob es
an meiner Persönlichkeit liegt,
an meinem Alter liegt.
Ich weiß es nicht.
Ich kann mir auch
den Durchschnitts-Let's-Play-Influencer
nicht geben.
So diese Leute,
die bei jedem Scheiß
übelst ausflippen
und schreien gleich lustig.
Da kann ich nichts mit anfangen.
Wann kommt wieder
ein Community-Github-Repo-Review?
Sowas habe ich schon mal gemacht.
Ich habe mir schon mal
Github-Repos von anderen Leuten
angeguckt.
Hast du irgendwas,
was ich mir angucken soll?
Dann schick mal her.
Ach ja,
echt?
Haben sie?
Ey,
Chrome gucke ich auch nicht.
Habe ich noch nie geguckt.
Wobei ich von der Art und Weise
mir Chrome durchaus
angucken könnte.
Aber mich interessieren
die Games meistens nicht.
Und ich bin auch kein,
ich bin kein allzu großer
Let's-Play-Gucker.
Nur wenige Let's-Play-Channels,
die ich mir angucken kann.
Und in letzter Zeit
eigentlich so gut
wie gar keine.
Ja,
können wir,
können wir ruhig auch mal
zwischendurch einstreuen,
müssen wir keinen
dedicated-Stream machen.
Also wenn es was gibt,
schick, schick her.
Nicht, dass ich jetzt da
der super Experte bin,
was Open-Source-Software-Pflege
auf Github angeht.
Gibt es eigentlich
neue Anwenderfehler?
Nein.
Fehlerfreie Software,
wie man sucht,
wie man sieht.
Ja,
alles,
alles Anwenderfehler.
Also genau,
das wollte ich mir
mal angucken.
State of JavaScript.
Also sprich,
es ist eine Umfrage
an Frontend
und JavaScript-Entwicklern,
wie sie das dann so,
wie sie das dann so
empfunden haben
das letzte Jahr über,
was sich da so entwickelt,
wie sich das so entwickelt hat.
Okay,
also,
also,
also,
also,
also,
also,
also,
okay,
also,
ich bin vor allem gespannt
auf so die Kategorien
beliebtestes Framework,
meistgenutztes Framework
und ja,
wie beliebt unterschiedliche Sachen sind.
Deswegen skippen wir mal
den uninteressanten Part.
Genau,
die Software ist einfach perfekt,
da gibt es nichts zu maintainen.
Also,
am meisten haben mitge...
Was ist mit der Schrift?
Los,
legt sie mal im Dark wieder.
Ja,
das legt sie mal im Dark wieder.
Oh,
schön.
Oh,
Schrift mit Outlines.
Oh,
ja,
also,
so das ist das.
Ja,
weil,
da ist Kaminet.
Kaminet,
ja,
bread,
das heißt,
ich weiß,
ich weiß,
das ist eine intéressante Schrift.
So,
also...
so,
also,
das ist meine Schrift.
Ja,
ich,
ähm,
ich,
äh,
äh,
das ja hier.
Oh,
in der Schrift steht aber,
dass...
Oh,
ehrlich gesagt nee oder moment nee nee nee quatsch quatsch quatsch quatsch
stimmen überhaupt nicht stimmen überhaupt nicht hier sind 150.000 euro im jahr
das hier ist die gehalts range also in deutschland verdienen die meisten leute
quasi ich will wie kann man diesen die meisten leute verdienen quasi so
zwischen 75.000 gut das kann ich mir vorstellen die liegen dann die liegen
dann hier so irgendwo so bei bei 80 90 kann aber wie kann man diese grafik
lesen weil sie nicht in costa rica ist die re ist eindeutig mehr im unteren
preissegment okay ihr habt so wenig abgestimmt juckt jetzt nicht weiter
geht ja nicht was juckt mich das geht ja im frontend frameworks language
englisch ja hallo logisch age die meisten leute sind so
alle die meisten leute sind so alle die meisten leute sind so alle
wie ich am nächsten jahr gehöre ich dazu leute setke nicht mehr lange aber das
gute ist das verschiebt sich immer weiter weil die auch alle immer älter
werden nächstes jahr ein boomer vielleicht ja
jetzt schon wie gesagt ich habe ich habe auf ex ehemals twitter ja gelernt dass
buber eine einstellungssache ist und keine alterssache
ok die meisten leute haben zwischen vier und sechs jahren experience also ich
habe mindestens seit 2000
2000 forum oder so erfahrung das ist also war sie dann 20 jahre über 20 jahre
und bin ich tatsächlich hier unten dabei also aber nicht im profis aber nicht
professional das stimmt nicht also professional bis heute nicht es ist ja
nicht so dass ich mein tägliches geld mit als pool mit softwareentwicklung
verdienen würde es ist teil von dem was ich mache beispielsweise
mein custom prometheus exporter in go den ich in go programmiert habe wo wir
auch hier im stream ein bisschen rum gebaut gebastelt haben ist seit letzter
woche donnerstag offiziell in production und liefert jetzt metriken zu unseren
statistiken über unsere block chain infrastruktur und wir haben schon
richtig in eis krebs erstellt weil wenn du irgend jemand der keine ahnung davon
hast was zeigen will bringt es nichts wenn du ihm ghost
source code zeigst wenn du ihm den schönen graf zeigst in grafana da flippte
aus drauf dass das finden die das finden die geil das sind da sind auch die
gleichen leute die sich excel grafiken angucken also grafana grafen porto source
code nicht ob obwohl der ghost source code dazu notwendig ist dass die grafen
da sind aber das interessiert die dann manchmal muss man sich einfach ein
bisschen selbst beweihräuchern company sei es ehrlich gesagt weiß ich gar nicht
so genau ich glaube irgendwo in dem bereich hier vielleicht auch in dem
bereich wir haben bestimmt über 1000 ob wir über 1000 jährliches einkommen
dass das gibt mir mal das guck mal das ist jetzt nicht was ich mir heute im
stream angucken will ich für mich eher mal konzentrieren was die fast so die
front end technologie sagt darf man das überhaupt fragen ja was ist gnc agenda
non konforming ok non binary hat mir was gesagt aber gnc war neu also quasi
das dnm wd wobei ich immer noch das d steht einfach für deutsch ihr leute da
habt das wieder 70 prozent weiße alte männer wäre das gedacht da ist kurz
davor dass twitter wieder getriggert ist von fire schipp und theo kommen ok ok
next features also jetzt kommen die eigentlichen javascript sachen die die
interessant sind also which of these
syntax features have you used ok chat geht ohne dass ich jetzt okay null
coalescing das verwenden wir öfters das ist diese geschichte hier oder
fragezeichen fragezeichen also so so nach dem motto ist es null dann weiß was
zu ansonsten behalte das verwende ich das
verwende ich tatsächlich so an der stelle wo es geht ist das hier zählt das
hier übrigens auch zu null coalescing
ach ja beispiele ok
ja also das verwende ich eigentlich überall wo es geht dynamic import ganz
ehrlich ich habe das schon mal verwendet also das ist dass du nicht mehr oben
reinschreiben muss import blablabla sondern dass du reinschreiben kannst
blub dann import das ging früher nicht gucken wir ein beispiel ist genau dass
du importen kannst quasi als als ja als funktions aufruf und ohne also so statement oben an der
seite das habe ich schon mal verwendet ich weiß aus dem kopf gar nicht mehr für
was ich kann mich aber noch bildlich daran erinnern irgendwas included
abhängig dazu ich weiß nicht mal warum ich aber auch schon verwendet aber 62
prozent benutzen das okay have you used weil ganz ehrlich das verwende ich lauf
und das war wenn ich so gut wie nie private fields wüsste ich gar nicht was
es ist wenn ich jetzt wenn ich da was rein
wenn ich jetzt wenn ich da was rein
interpretieren müsste würde ich sagen ich habe mal irgendwo gelesen dass man
interpretieren müsste würde ich sagen ich habe mal irgendwo gelesen dass man
interpretieren müsste würde ich sagen ich habe mal irgendwo gelesen dass man in javascript klassen
in javascript klassen
in javascript klassen jetzt auch variablen als private deklarieren kann
jetzt auch variablen als private deklarieren kann
jetzt auch variablen als private deklarieren kann ich glaube das ist das verwende ich aber
ich glaube das ist das verwende ich aber
ich glaube das ist das verwende ich aber nicht dass ich wirklich will ich müsste
nicht dass ich wirklich will ich müsste
nicht dass ich wirklich will ich müsste weder die syntax noch wann ich es wie
weder die syntax noch wann ich es wie
weder die syntax noch wann ich es wie verwenden würde logical assignments weiß
verwenden würde logical assignments weiß
ich auch nicht was das sein soll javascript hat lassen ja die javascript
lassen können sogar mittlerweile constructors enthalten getter und setter
properties und anscheinend private fields habe ich jetzt gelernt was ist
logical assignments das da das verwende ich auch öfters wobei ich das eher als
oder oder hierzu aber das verwende ich auch so was wobei ich die wobei also
gar nicht diesen operator relativ selten aber das und und das verwende ich
öfters also nicht als nicht als oder sondern zum es sein
ja hashbank grammar was soll das überhaupt sein
ach so im moment das ist jetzt irgendwas javascript spezifisches das verwende ich
am tag 50 mal okay nicht zum schreiben selbst nur zum ausführen
aber
laufend bloß dass bei mir nicht user bin entnommen steht sondern meistens bin
bash ok hashbank grammar ok error course habe ich noch nie verwendet
kors error und nie ich versuche javascript exceptions auch so weit zu
vermeiden wo es irgendwie geht interessant und nie ausprobiert string
features string replays all verwende ich ab und zu string match all verwende ich
auch ab und zu rex match indices
für mich ist einsatzbasis nach dem kurs wenn ich es mit einem kurs
verwendet verwendet ist sehr gut aber für mich ist es nicht das einzige�
versuche ich nicht das geschilderte mal das war die erste gute hier
verwende ich sicherlich auch das ein oder andere mal capture groups quasi im
endeffekt würde ich mal nee
wait a minute das sind nicht capture groups das sind ich check den code nicht
ach nein die indexe wo die matches beginnen sind das das habe ich noch nie
verwendet das habe ich noch nie verwendet array features array find last to sort
to reverse ja also da weiß ich zufällig was es ist habe ich schon verwendet habe ich auch schon
verwendet es gibt uns in javascript jetzt ein bisschen zu verwirren verwirren dazu machen ich
zeige euch mal was wir machen mal ein array in javascript also hier sind 1234 oder war mal
mal aber variable so jetzt kann ich sagen tu sorte tu sortet wenn ich richtig schreiben kann
du sortet da kommt also das ist schon sortiert er als vielleicht blöd vielleicht soll ich es
mal 4216 oder so machen du sortet ok logisch kommt ein sortiertes array bei raus und jetzt
passt mal auf es gibt auch noch sortet
kommt auch das gleiche bei raus jetzt habe ich die frage an euch krassen
high iq javascript hacker was ist der unterschied von tu sortet und sort
und warum ist tu sortet eigentlich besser na gut kommt auf den anwendungsfall an sort
ist in place richtig korrekt ein netzwurfel hat recht ja sortet ich kann euch kann es euch
zeigen also wir reisen jetzt noch mal das array zu und jetzt rufe ich tu sortet auf dann kommt ein
sortiertes array draus aber wenn ich mir das array wieder ausgeben lasse das original array
dann ist es unsortiert wenn ich sage sort da kommt erst mal das array sortiert raus aber wenn ich
jetzt das original array aufmache ist das aussortieren also sprich sort sortiert in place
das original array und to sorted sortiert das array erstellt ein neues array und gibt das
zurück lässt das originale array aber im ursprünglichen zustand und deswegen finde
ich von der von der denkweise her to sorted meistens einfacher zu benutzen ist aber ganz
neu gibt es erst seit 12 jahren oder so in javascript sort gibt es schon viel länger
kommen immer drauf an was man braucht das ist richtig aber to sorted ist meistens der
gerade wenn man irgendwelche bindings irgendwelche frontend daten aufbereiten will ist meistens
wahrscheinlich die bessere variant ist das neue sache eines der besten neuen editions diese
da gemacht haben für die array klasse fine last hab ich mir noch nicht to reverse it ist im prinzip das
gleiche ja to splice to reverse it ist alles das gleiche nur halt dass das originale array nicht
geändert
WITH
wüsste ich jetzt aus dem kopf nicht was es macht in der speicher mit auf jeden
fall brauchen das ist im prinzip schlägt die gleiche
kerbe ich erzeuge ein neues array mit einem element ausgetauscht aber ich lasse
das alte intakt geht alles schon ein bisschen in richtung anschnitte sachen
finde ich aber gut dass es das gibt habe ich tatsächlich noch nie verwendet
die anderen sachen kann ich mich jetzt nicht bewusst daran erinnern weiß ich
aber dass es sie gibt und ich würde sie verwenden wenn sie sich anbieten also
sollte habe ich definitiv noch verwendet feind last sicherlich auch schon das
gab es ja früher auch nicht du musst es früher glaube ich sagen index off und
dann das selbst rausholen und so was jetzt kannst mit feind last machen also
da sieht man mal auch wenn das keine neuen features sind die jetzt wahnsinnig
bahnbrechend sind aber wisst ihr was man daran sieht dass
wenn sich
leute gedanken darüber machen beim sprachdesign beziehungsweise was sie
einbauen und versuchen das in der art und weise einzubauen die die sprache gut
ergänzt und auch ein bisschen das ist was die leute die die sprache benutzen
sich wünschen dann kommt was gutes bei raus da ist javascript ein gutes beispiel
für im gegensatz zu ihr wisst schon was c++ das ist das negativ beispiel was das
angeht ich habe keine ahnung was das c++ cremium
so 3
bleibt aber das javascript premium premium ja javascript premium in der
richtung das javascript premium macht es richtig und das c++ cremium macht das
nicht gescheit aber wir wollen jetzt nicht auf c++ rumhacken async features
promise any all settled habe ich alles top level await mega nice dass das jetzt
geht ich bin mir gar nicht sicher ob das in
allen major browsers überhaupt schon drin ist
can i use top level await ja gut dass es im internet explorer nicht drin ist
wundert mich also wenn die sachen in safari drin sind moment ich sehe nicht in
safari es ist so geil alter jeder fucking browser kann es safari kann es
natürlich nicht safari ist einfach wirklich der neue internet explorer
anders kann man das nicht sagen ich würde einfach auch mit meiner website
einfach scheiße auf safari einer chat ich bin kein hauptsächlicher mac os benutzer wie sind die
meisten mac os leute so drauf verwenden die chrome oder firefox oder bild verwenden den
bild in safari die meisten sind bestimmt übelste kaknubs und verwenden den eingebauten safari oder
safari ja wahrscheinlich weil auch apple funktionen einbaut die nur safari kann
richtige rebell am start unter mac os
ok
hier also das habe ich weiß ich nicht ob ich schon verwendet habe das würde ich
aber jederzeit verwenden wenn sich anbietet da musste kein funktionsrapper
machen mit await und so das ist nice top level await promise any würde ich mal
vermuten dass es das gleiche ist wie in c sharp task wait all ist es auch im
endeffekt und promise all settled hab ich keinen blassen schimmer was ist es
ja mir geht es nicht darum was safari insgesamt hält sondern was safari auf mac os
im speziellen hält was erfahren jetzt bestimmt auch mobile safari und alles
mit dabei promise all zettelt dann result for each
was ist der unterschied zwischen ach so das ist quasi task wait all und das ist
taskwaitany also dieser promise wird recycelt ich kann kein gescheiteste
keinen gescheiten satz bilden sobald nur einer der tabs okay ist oder fertig ist und der wartet es sein
der Tasks okay ist oder
fertig ist und der wartet
so lange, bis alle Tasks fertig
sind. Ich wusste
seriously gar nicht, dass es das bis
jetzt noch nicht in JavaScript gab.
Aber gut, dass es das gibt.
Der iOS-Browser,
angeblich gibt es das ja mittlerweile schon. Ich weiß
nicht, ob es schon einen Browser dafür gibt.
Promise All gibt es auch, wusste ich gar nicht.
Ja, weiß ich nicht. Ich habe keine Ahnung, was der Unterschied ist.
Okay.
Browser-APs, Websocket,
ja klar, Websocket haben wir gestern letztens verwendet,
logisch. Aber hier geht es ja
bei der Frage drum, hast du es schon jemals
benutzt? Also, Websockets habe ich schon
benutzt. PWAs haben wir sogar
im Stream schon benutzt. Geolocation-AP
schon benutzt. WebGL auch schon
benutzt. Ihr erinnert euch noch
an unseren High-IQ
C++
WebAssembly
Video Player
mit WebGL.
Web Animation
Was sind Web Animations?
Ach so, Keyframe
gedöhnt sind CSS, ja logisch. Habe ich auch schon
verwendet.
WebAssembly auch schon verwendet.
Page Visibility-AP, keine Ahnung, was es ist.
Keine Ahnung.
WebRTC, auch im
Stream schon gemacht. WebSpeech-AP
APA noch nicht verwendet.
Broadcast Channel-AP
Auch wieder so ein Ding, keine Ahnung,
was es ist. Ist das quasi
Kleinsite-Messaging?
Ja, Kleinsite-Message, okay, okay.
Quasi zwischen verschiedenen Teilen
der Anwendung kommunizieren miteinander
über, okay, ja.
Aha, wusste ich gar nicht, dass es sowas gibt.
Temporal. Würde ich gerne
verwenden, unterstützen die meisten Browser leider
noch nicht. Ja, Moment.
Das alte Date schon, aber
es gibt ja eine neue Date-AP.
Web?
Keine Ahnung, was das sein soll.
Language
Painpoint, Static Typing in JavaScript.
Okay.
Ja, gut, kann man ja
TypeScript für benutzen, ja.
Okay, unterschiedliche Modulformate.
Dates ist tatsächlich
ziemlicher Painpoint, also ziemlich
Paints-Champ in JavaScript.
Ich weiß gar nicht, warum die so lange brauchen,
diese neue vorgeschlagene Date-AP
zu implementieren.
Browser Support.
Performance, Error Handling,
Async Programming. Ne, ganz ehrlich,
ganz im Ernst, ich finde,
das spiegelt echt,
ganz gut hier wieder.
JavaScript ist eigentlich eine ganz brauchbare
Sprache mittlerweile. Ja,
das hier, das hier verstehe ich irgendwie.
Ja, so die, der Rest ist aber so,
man sieht es ja auch schon, die Leute
sind relativ zufrieden damit.
Und JavaScript hat sehr
weird Sachen, ja.
True gleich gleich,
true is false und so komische
Dinger, die es dann manchmal gibt oder
leeres Array gleich gleich leeres Array
ist false.
Es gibt viele historische weird
Sachen in JavaScript, aber insgesamt
ist die Sprache mittlerweile,
wenn man sie nicht absichtlich
so misused,
echt in Ordnung.
Und Performance ist JavaScript auch
viel besser
als vielleicht der Ruf noch.
Backend kann ich nichts zu sagen,
ich habe noch nie JavaScript Backend gemacht.
Ich habe auch auf Express.js und so null Bock.
Aber Performance ist JavaScript
vollkommen in Ordnung.
Browser Support, Pain Points, ja klar.
Safari!
Ja!
Das hätte ich auch ausgewählt.
Was geht dir beim Browser am meisten auf den Sack?
Safari!
Ja, das würde ich, das und
das hätte ich als einziges wahrscheinlich.
Ja, ja, Browser Support, aber Browser Support
und Safari geht Hand in Hand.
Wie man eben ja schon gesehen hat.
Schön, dass sie das ähnlich sehen.
Reading List.
Ich weiß nicht, was das bedeuten soll.
Okay, next.
Libraries, oh, oh, oh,
jetzt bin ich mal gespannt, wie sich die Welt schlägt.
Libraries, Experience und Sentiment.
Okay, das heißt quasi,
wie viele Leute das benutzen
und wie viele Leute es mögen, oder?
Ah, used it
and negative experience.
Okay, verstehe ich.
Jeder hat schon mal Webpack benutzt,
aber Webpack ist einfach
der Sack schlechthin.
Also nicht der Zuck,
das sackt einfach.
Irgendwas in Webpack zu konfigurieren.
Wenn Webpack out of the box
vorkonfiguriert kommt und das macht, was es soll
und einfach funktioniert und man nie was dran machen muss,
ist Webpack okay.
Webpack-Konfiguration, eine der schlimmsten
Sachen, die ich im Frontend-Umfeld je gesehen habe.
Also verstehe ich,
im Prinzip, jeder hat irgendwann 90%
schon mal Webpack benutzt,
aber die meisten finden Webpack Schrott.
Und das sind Leute,
die es noch nicht benutzt haben.
So, React.
React haben,
84% schon benutzt
und die meisten finden es ganz gut.
20% mögen es nicht so richtig.
Ich gehöre tatsächlich zu den 15%.
Ich habe, außer mir ein bisschen Tutorials angeguckt
und sonst was, noch nie großartig
was in React gemacht.
Ich kann mir das aber auch leisten, weil ich bin kein
Professional Frontend-Developer,
der damit sein Geld verdient.
Wenn du damit dein Geld verdienst, kommst du wahrscheinlich
um React nicht drum herum.
Bestimmt nach Angular,
wenn es im Enterprise-Business-Umfeld angeht.
Jest, keine Ahnung, brauchen wir nicht.
Test, wer testet?
Testet ist overrated,
jebaited, outdated.
Einfach immer gut funktionierende Software programmieren,
da muss man nichts testen.
Ganz einfach.
Vite.
Vite ist super.
Oh, Alter.
Das ist aber auch genau mein Eindruck.
Vite finde ich gut.
Habe ich schon benutzt
und würde ich auch jederzeit wieder benutzen.
Auch die Konfiguration von Vite ist super angenehm.
Haben wir gestern erst wieder gesehen mit dem Hot-Reload.
Toll.
Vite ist ein super Tool,
die beste Alternative zu Webpack
und mit Sicherheit auch,
die beliebtere Alternative von Webpack.
Leute, das war übrigens nicht ernst gemeint.
Man muss jetzt clarifieren ab und zu.
Testet ruhig, ja.
Nur weil ich die Tests baue für meine Basteldinger,
heißt nicht, dass ihr im Business Enterprise-Umfeld
jetzt sagen sollt,
aber der Wublos hat letztens im Stream gesagt,
Tests sind Zeitverschwendung.
Einfach fehlerfrei programmieren.
Kappa HD.
Vite, beste.
Vite ist, also das ist ja wirklich,
übrigens ist es von dem gleichen Typ,
der Vue.js erfunden hat.
Für mich im Kopf ist das ein bisschen so,
wie Linus Torvalds, der Git erfunden hat.
Also,
den Vergleich, ja.
Also,
Git wurde auch nur erfunden,
um das Handling,
das, also um das Handling von Linux-Kernel-Entwicklung
besser zu machen.
Und Vite wurde aus meiner Sicht auch nur empfunden,
um das Handling von, ja, Vue.js-Entwicklung besser zu machen.
Und beide Projekte sind übelst abgehoben.
Sowohl Git als auch Vite.
Aber aus komplett unterschiedlichen Bereichen jetzt.
Kennst du das erste Git-Comet aller Zeiten?
Nee, kenn ich nicht.
Wenn ich raten müsste,
war das Linus selbst und er hat irgendwas,
irgendwas gemeckert.
Shit-Git.
Oder sowas.
Wunder, irgendwer ist in der Richtung.
Okay, das erste Git-Comet.
Wird von Linus irgendwie sowas gewesen sein wie
Ist this shit working?
Oder sowas.
Oder, Moment.
Linus, Linus ist Finne, ne?
Die haben doch, die haben doch so nen,
so nen famous Schimpfwort, die, die, die Finnen.
Perkele.
Genau, Perkele sagen die immer in Finnland.
Ich glaub, das heißt so viel wie Teufel oder so.
Perkele.
Das sagen die Finnen immer.
Das sagen die Finnen zu allem.
Das war bestimmt das erste Git-Comet.
Ansonsten, ich hab keine Ahnung,
was das erste Git-Comet war.
Was war denn?
Erhelle uns, Dark Zone.
Was war denn das erste Git-Comet?
Force Champ.
Okay, ich glaub, Dark Zone weiß das selbst nicht.
Das war, das war ne Frage vielleicht.
Also, der erste Git-Comet war
The Information Manager from Hell.
Okay, das ist nicht so interessant,
wie ich mir vorgestellt hätte.
Ich dachte, das wäre, ich dachte irgendein Gefluche von Linus.
Aber Veed, verstehe ich.
Veed ist echt Champ.
Hefskiss.
Ich mag Veed.
Next.js, okay, für die ganzen React-Stelzer.
Äh, keine Ahnung.
Storybook, ja.
Da hab ich den Sinn auch noch nicht ganz.
ES-Build, okay.
Vue, Vue ist auch recht beliebt.
Das gucken wir uns jetzt nicht an.
Ola, Angular.
Wo ist Roll-Up?
Roll-Up ist, ist Roll-Up nicht das Unterhalb von Veed?
PNPM, okay.
Elektron, uuuh.
Bayride.
Parcel.
Expo.
Expo ist ne ganz coole Sache.
Da kann ich mich dunkel dran erinnern.
Da konnte man Mobile-Apps testen, ohne sie zu sideloaden.
Svelte, Svelte ist beliebt.
Sehr nice.
So, und Svelte geht auch.
Ey, ich werd das jetzt mal skippen.
Das wird jetzt immer unbedeutender.
Den Deno Fresh.
Changes of...
Alter, das ist ja mal der most high IQ Graf,
den ich seit langem gesehen hab.
Da hast du allein schon jetzt 10 IQ-Punkte gewonnen.
Nur durch das pure angucken dieses Grafs.
Changes over time.
Das ist ein richtiger Graf.
Wenn du irgendwelche Manager beeindrucken willst, machst du so einen Graf.
Was sagt uns dieser Graf?
Negative Opinions have used.
Ah, das ist, jetzt versteh ich's.
Das ist das Way to Dank, ist das.
Das ist das Verhältnis, also wie sich das entwickelt hat.
Leute, die etwas benutzt haben, zu wie gut es ankommt über die Zeit.
Wahrscheinlich, ja, 2003.
Okay, Webpack.
Webpack hatte...
Webpack war mal tatsächlich relativ beliebt.
Hat sich aber die letzten drei Jahre extrem von eigentlich cool zu so ein Schrott weiterentwickelt.
Aber winzigerweise, die Usage ist weiter gestiegen.
Das hier ist React, okay.
Und das ist, das ist VEED.
VEED ist einfach, geht von have used zu super positiv durch.
Das musst du auch erst mal schaffen.
Ja, not used und eine Meinung dazu.
Ja, warum nicht?
Ich habe auch eine Meinung dazu.
Ich habe zum Beispiel eine Meinung zu Gatsby.
Irgend so ein static side generator oder sowas.
Noch nie benutzt, juckt mich aber auch überhaupt nicht.
Oder, ja, zu Angular habe ich auch meine Meinung.
Dass ich es nie benutzen will.
Okay, Angular ist von, startet negativ.
Nee, Moment.
Moment, Moment, Moment.
Angular ging, ging wieder in...
Warte mal.
Wie darf man das jetzt interpretieren?
Angular fängt an von semi-positiv, was relativ unbekannt und steigt dann die Verbreitung.
Also wie, wie, mit dem Steigen der Verbreitung von Angular sinkt auch die Zufriedenheit damit.
Und die letzten Jahre über ist die Verbreitung gefallen.
Ich bin mal sehr gespannt, ob wir, wir sehen eine leichte,
einen rechten Rechtsknick.
Ich bin mal gespannt, weil Angular hat ja relativ viel gemacht die letzten paar Monate, ob sich
Angular nächstes Jahr ein bisschen mehr nach rechts bewegt hat.
Ich würde darauf tippen, Angular macht hier so eine kleine Kehrtwende, ein bisschen hin
zu have used und ein bisschen mehr zu mag ich nächstes Jahr.
Mal schauen.
Library Tierlist, okay.
Vite, beste, ja.
Vitex Player NPM.
Okay.
Da bin ich ja froh, dass mein Lieblings Frontend Stack, nämlich das hier, beziehungsweise
diese, diese Ecke, zu den beliebtesten gehört.
Kann ich mich freuen.
Ja, das gucken wir uns jetzt nicht an.
Frontend Frameworks.
Okay.
Also, was ist, was ist hier beliebt?
Quick, noch nie benutzt.
React, einer der wenigen, die, entscheidend, die es noch nicht benutzt haben.
React steigt natürlich.
React ist das Frontend Framework schlecht.
Gefolgt von Vue.js.
Vermutlich mal, ne?
Ja.
Und das ist Angular.
Oh, guck mal.
Vue hat Angular leicht überholt dieses Jahr.
Aber es sind einfach die großen drei.
React, Vue, Angular.
Da muss ich sagen, da ist mein Eindruck auch falsch gewesen.
Mein Eindruck von Vue war nämlich eher, dass es ein bisschen gesunken ist die letzten Jahre
über.
Aber ist es gar nicht so wirklich.
Es ist stabil geblieben und sogar noch einen Tick gestiegen.
Svelte interessiert mich noch.
Okay, Svelte wird immer beliebter.
Auf dem Weg zur Weltherrschaft.
Was macht htmx?
Das krebst irgendwo da unten rum.
Vier Prozent.
Lit.
Gibt es das ernsthaft, Leute, die das freiwillig hören?
Solid.
Ja.
Von Svelte erwarte ich auch noch, also hoffe ich, dass das irgendwann mal Angular wenigstens noch hier überflügelt.
Guck mal, wenn es hier so weitergeht.
Ich bin ein bisschen skeptisch mit Svelte 5.
Ich persönlich bin der Meinung, die haben mit Svelte 5 die richtigen Entscheidungen getroffen.
Zumal es abwärtskompatibel ist zu viele Sachen von der Schreibweise zu früher.
Die Leute waren ein bisschen zu schnell auf so einem negativen Hate-Train versus Svelte 5.
Haben das dann auch ein bisschen verglichen von der Transition von Vue 2 zu 3.
Ich finde, die Änderungen in Svelte halten sich doch irgendwie noch in Grenzen.
Du kannst es schon noch zum größten Teil so benutzen, wie du es gewohnt bist.
Ein paar Sachen fliegen natürlich weg.
Aber ich finde, der Ansatz hier, die Sachen eher explizit hinzuschreiben, anstatt Magic zu machen in Svelte 5, finde ich persönlich den richtigen Ansatz.
Und ich glaube, dass es langfristig Svelte nicht schaden wird.
Ich glaube, es geht das nächste Jahr weiter.
Vielleicht sind wir nächstes Jahr dann schon bei 30%.
Wäre sehr nice.
Ich gönn's denen auf jeden Fall.
Weil man muss auch mal eins sagen.
Ich könnte das nicht.
Ich könnte das aus mehreren Gründen nicht.
Mir fehlen eindeutig JavaScript-Skills dafür.
Und ich könnte auch nicht Open-Source-Software so ausführlich und mit so viel Hingebung maintainen, wie die Svelte-Leute.
Ich verfolge das schon eine ganze Weile.
Und Rich Harris, der Svelte-Erfinder und so ein bisschen marketingtechnisch das Aushängeschild von Svelte.
Der macht noch die ganzen Konferenztalks und präsentiert neue Versionen und sowas.
Rich Harris, der ist so auch in GitHub-Issues und so.
Der antwortet den Leuten immer so nett und ausführlich.
Das ist man von Open-Source-Maintainern gar nicht gewohnt.
Der hat gesagt in einem Video, okay.
So in einem Video, wo es darum ging, warum Svelte 5 so schlecht angekommen ist.
Hat er gesagt, es ist seine Schuld, dass er das in der Ankündigung nicht richtig klar gemacht hat.
Welcher andere Maintainer sagt das?
Die meisten Maintainer würden sagen, Alter, ich kann nicht was dafür, dass die Leute so dumm sind.
Also Linus würde das auf jeden Fall in Ignat und Weisse so sagen.
Wobei Linus ja seit ein paar Jahren reformt ist und nicht mehr ganz so oft raged.
Also Rich Harris, wirklich, da kann man echt nur sagen, ich weiß nicht, wo der die Energie daher holt.
Gut, der verdient auch sein Geld mittlerweile mit.
Ich glaube, der arbeitet ja bei Vercel hauptsächlich, hauptberuflich quasi ans Svelte mittlerweile.
Aber keine Ahnung, wie man das aushält.
Also da kann man echt nur seinen Hut vorziehen.
Okay, wie gut kommt das an versus wollen es die Leute wiederverwenden?
Ja, Vue kommt auch gut an.
Aber Svelte ist halt richtig beliebt.
Viele Leute, die es benutzen, wollen es wieder benutzen.
Und viele Leute sagen auch, sie wollen es sich gerne mal angucken.
Das ist sicherlich ein cooler Job.
Mein Problem ist, dass mich Leute nerven.
Und...
Wenn du dir jeden Tag dumme Fragen auf GitHub angucken musst,
würdest du mich trotzdem, auch wenn es mein Job ist, abfatten.
So, lass mal schnell schauen, was haben wir sonst noch hier.
Wir sind, glaube ich, auch schon fast durch.
Astro, auch noch sehr beliebt.
Das wundert mich gar nicht so sehr, weil Astro ein cooler Kompromiss ist aus...
Man kann eigentlich verwenden...
Astro ist ja quasi so eine Art Metaframework, wenn man so will.
Du kannst bei Astro Teile deiner Webseite in einem der oben genannten Frameworks erstellen.
Aber nur dort, wo es Sinn macht.
Eigentlich eine coole Sache, die Idee von Astro.
Deswegen wundert es mich nicht.
Der Rest...
Ember, Alter, gibt es das überhaupt noch?
Das war eines der ersten Frontend-Frameworks.
Tatsächlich.
Wird immer noch verwendet.
Das war ein Frontend-Framework, ganz ehrlich.
Ich habe es mal versucht zu benutzen.
Es war so undurchsichtig und kompliziert.
Ich bin damit nie warm geworden.
Aber das ist...
Ur-Ur-Alt.
Das gab es auch vor Angular.
Frontend-Framework-Happiness.
On a scale of...
Okay.
Von 0 bis 7.
How happy are you with the current state of Frontend-Frameworks?
Chat.
Wie happy sind wir mit JavaScript Frontend-Frameworks?
Ich würde sagen...
Ich würde mich genau hier ansiedeln.
Es ist...
JavaScript ist mittlerweile eine gute Sprache.
Das meiste, was man machen will, ist mittlerweile auch ohne...
Ja, ohne großes...
Ich muss es studiert haben, möglich.
Das Problem ist immer noch...
Das Frontend in vielen Bereichen super schnelllebig und super undurchsichtig ist.
Ich meine...
Bestes Beispiel für...
Nur mal so.
Und das ist wirklich ein ganz simples Projekt.
Warte mal.
Ich mache mal ein Beispiel.
Beispiel.
Ein simples Beispiel.
mkdir omega 0...
Nee.
0w.
Ah, das gibt es zum Glück noch nicht.
So, dann sagen wir einfach mal...
npx...
Äh...
SvelteKit...
Ah, fuck.
Create new.
So.
Okay.
Wir erzeugen jetzt ein neues SvelteKit-Projekt.
Alles klar?
Yes?
Äh...
Projekt ohne irgendwas drinnen.
Ohne TypeScript-Support.
Ohne Testing.
Svelte5-Preview.
Fertig.
So.
Da gehen wir jetzt rein.
So.
So.
So.
So.
So.
So.
So.
So.
So.
So.
N bike make this battle.
Uh...
Echt einfach, ne?
OURRORE.
Isn
Der wird sich sicherlich wundern,
warum brauche ich für ein
Bare-Bones-Zwelt-Kit-Projekt,
ich weiß, das geht, andere Sachen haben noch viel mehr
drin, warum habe ich da
jetzt auf einmal schon gleich irgendwie
zwölf Dateien drin?
Und das geht echt noch. Das geht wirklich
vollkommen in Ordnung.
Aber den Display-Champ auf, der Display-Champ hat schon ein bisschen
mehr drin. Das ist das, wo wir gestern
dran rumgebaut haben. Warum habe ich hier so viel Zeug drin?
Das ist ein bisschen
Probleme, die ich sehe, was
Frontend-Gedöns angeht.
Deswegen würde ich sagen, ja, ich bin
auch bei 2.7. Es ist nice,
es macht auch Spaß,
JavaScript-Frontend-Sachen zu entwickeln,
aber
das könnte schon noch ein bisschen
griffiger sein alles.
Das ist nur Konfiguration, du hast an der
Stelle noch keinerlei Custom-
Logik drin.
Frontend-Framework-Painpoint-React-
Issues, ja, okay.
Choice-Overload, okay,
verstehe ich komplett.
Choice-Overload.
Guck mal, mein GitHub-Link, okay.
Das ist ein
TypeScript-Template.
Ein recht unbeliebtes TypeScript-Template.
Ja.
Ach, das ist von, das hast du dir
angelegt, jetzt check ich's. Dachte, das ist irgendwie
eines dieser Starting-Templates, die es gibt.
Ja.
Guckt euch das mal an. Das ist nur
Konfiguration, da ist noch keinerlei Source-Code drin.
Was auch immer Husky macht.
Aha, das war irgendwie
die Git-Commit-Sachen, wo ich,
nicht verstehe, warum man das verwendet.
Ähm, ja. Aber die Painpoint-Choice-Overload
verstehe ich komplett.
Äh, Bootstrap und PHP
haben überhaupt nichts miteinander zu tun.
Bootstrap ist CSS und ein bisschen
JavaScript. PHP ist Backend.
Choice-Overload kann ich
komplett, komplett verstehen.
Da blickt keine Sau durch.
Im Frontend-Bereich.
Das ist normal.
Und in der Zeit, wo ich das jetzt
ausgesprochen habe, wurden wieder fünf neue
JavaScript-Frameworks created.
Ja, kann man machen.
Ich muss sagen,
ich erstelle mittlerweile für alles
ins Welt- oder das Welt-Kit-Projekt.
Weil ich das angenehmer
finde als reines, pures
JavaScript.
Choice-Overload, also kann ich komplett verstehen.
Übertriebene Komplexität
kann ich auch
verstehen. Es ist aber
viel, viel besser geworden die letzten Jahre.
Also es geht, es geht,
finde ich, schon halbwegs klar.
Leider, also die Komplexität
bei den ganzen Frontend-Sachen ist ja oftmals
diese 30 Milliarden Konfigurations-Dateien,
die du für alles brauchst.
Svelte-Config,
Vite-Config, Tailwind-Config, Webpack-Config,
äh, okay, Vite und Webpack macht keinen Sinn
zusammen. Prettier-Config,
hier hatten wir ja noch eben das Java-Serie, guck mal.
Prettier-Config,
Jest-Config, Package-Config,
NPM-Config, Tabscript-Config,
alles möglich. Also,
das macht's. Und die Dinger sind ja auch nicht logisch
aufgebaut oftmals.
Performance, okay, verstehe ich.
Wobei ich eigentlich der Meinung bin,
die JavaScript-Performance frontend-seitig im Browser
ist vollkommen fein.
State-Management,
ja.
Also die ersten
zwei Dinger kann ich komplett, oder die
zwei und drei kann ich komplett unterschreiben.
Speed of Change,
auch ein bisschen, ja.
Was?
Also ich weiß nicht, was es für Diskussionen über .NET
gibt, aber .NET Framework
gibt es nicht mehr. Also .NET
Framework gibt es noch, aber es gibt
kein .NET, neues .NET Framework
und kein neues .NET Core mehr.
Das ist jetzt alles in .NET.
Seit .NET Core Version
4 quasi, wurde das
umbenannt in .NET 5.
Und das ist jetzt quasi der neueste Haupt
.NET Entwicklungsding. Im Prinzip
kann man vergessen, dass es .NET Core
jemals gegeben hat und man kann vergessen,
dass es .NET Framework jemals gegeben hat.
Sofern man nicht irgendeine Legacy-Anwendung
hat, was nur auf dieser einen Sache
funktioniert.
Man sollte einfach vergessen, dass es
irgendwas anderes gab. Es gibt einfach
nur noch .NET und das wird jetzt jedes Jahr
hochgezählt. Dieses Jahr kommt .NET 9.
Das gilt genauso lang, bis
Microsoft das Namensschema und alles wieder umkrempelt.
Ganz ehrlich, ich kann mir durchaus
vorstellen, dass Microsoft nächstes Jahr auf die
Idee kommt. Ja, meinte ich, das sollte man
vergessen. Es kann durchaus
sein, dass Microsoft sagt, ah Moment, Moment
2025 gibt es nicht .NET
10, sondern .NET
25.1
und 25.2. Das traue ich
Microsoft alles zu.
Und dass es dann nicht mal .NET heißt,
sondern offiziell
Was wäre so ein typischer
Microsoft-Move, wenn sich alle dran
gewöhnt haben?
.Microsoft.M
.M
Okay, ab nächstem Jahr heißt es dann
..M
25.1
Das wäre ein typischer
Microsoft-Naming-Move, oder?
Es haben sich jetzt alle dran gewöhnt, dass
es .NET heißt, dass dieses Jahr .NET
9 kommt, nächstes Jahr 2025
kommt dann .NET 10, aber dann würde
Microsoft sagen, nein, das wird umbenannt in
.M25.1
.365
.plus
Copilot, ja
Das ist so ein Ding, das könnte ich mir
von Microsoft vorstellen, weil wenn die
eine Sache die letzten Jahre über gezeigt haben, ist, dass
Microsoft absolut komplett
Shit ist im Benamen
von Sachen. Ich war ja schon der Meinung,
seit
Projekt Natal in Kinect
umbenannt wurde, dass Microsoft nicht mehr alle Tassen
im Schrank hat, was Benamung angibt, aber da gibt es
auch viel mehr aktuellere Beispiele.
Ich sag nur
Entra-ID und Azure-AD
Warum um alles in der Welt benennt man
das um? Jeder auf der Welt kennt
Active Directory und Azure Active Directory
ist ein komplett supergriffiger
Begriff. Warum muss es Entra-ID sein?
Keine Sau kann sich unter Entra-ID was
vorstellen. Oder
warum benennt man Office um?
Jeder auf der Welt kennt Office.
Warum können damit was anfangen? Warum benennt man
Office um?
Microsoft, was ist mit euch los?
Also, wie gesagt, Benamung und Microsoft, deswegen
würde mich nicht wundern, wenn dieser Shit
nächstes Jahr
.m25.1 heißen würde,
nachdem wir uns jetzt alle dran gewöhnt haben.
Okay, Metaframeworks.
Juckt, werde ich skippen?
Juckt mich nicht. Außer, was macht
das Weltkit? Das Weltkit ist super beliebt.
Äh, nee, ist gar nicht beliebt.
Wie viel es benutzt? Ah, das Meta-Fuhrjuck,
bin ich nicht so sehr.
Weltkits-Welt reicht mir für.
Was ist Analog?
Analog-JS
hab ich noch nie gehört.
Kennt das jemand?
Bestimmt 80.000 Sterne
auf Git, nee, 2,4.
Noch nie gehört.
Redwood noch nie gehört.
Hab ich davon überhaupt schon mal irgendwas gehört?
Quasar
kenn ich, das ist irgendwas Vue.js-mäßiges.
Quick hab ich schon mal gehört.
Vietpress hab ich schon mal gehört.
Nest, was ist Nest?
Ich kenn Next
und ich kenn Nuxt.
Was ist Nest?
Schon wieder jetzt.
Keine Ahnung, kenn ich nicht.
Define nicht gehört.
Bann, ja, Redwood nie gehört.
Meteor schon mal gehört.
Adonis auch nie gehört.
Okay, also, next.
Meta-Framework-Happiness.
2,4 sind sie nicht so happy.
Pain-Points.
Next-JS.
Exceed-Complexity, okay.
Vercel, Vercel ist ein Pain-Point.
Testing, das werde ich skippen.
Easy, Leute.
Wir entwickeln einfach Sachen, die funktionieren,
da müssen wir nicht testen.
Analog ist Next für Angular.
Öh!
Wird ja immer schlimmer.
Nicht nur Angular, sondern jetzt auch noch Angular-Server-Side.
MonkaS.
Da reicht MonkaS schon nicht mehr.
MonkaW, Mon, Mon, MonkaW.
Angular-Server-Side, ich kann mir ja kaum was ätzenderes vorstellen.
Okay, Mobile- und Desktop-Tools.
Elektron, was sonst, oder?
Elektron ist oben, garantiert.
Aber dicht gefolgt von React Native mittlerweile, aha.
Native-Apps sind wieder im Kommen.
Also, nachdem ich noch nie, außer eine PWA, und eine PWA ist nicht wirklich...
eine Native-App, das lasse ich da mal raus,
nachdem ich noch nie, das ist auch so ein Ding, was ich irgendwann schon immer mal machen wollte,
nachdem ich noch nie, und mich hat hauptsächlich Apples Entwicklungs-Policy bisher davon abgehalten,
sowas mal zu probieren.
Also, wenn ich eine App entwickeln müsste,
wäre meine aktuelle Entscheidung bauchgefühlmäßig Ionic gewesen.
Das liegt aber auch daran, weil ich mich damit nie großartig beschäftigt habe,
und ich aber ein paar YouTube-Videos zu Ionic geguckt habe,
und ich fand, das sah halbwegs erträglich aus.
Maui auf gar keinen Fall.
Ich fasse Maui, egal auf welcher Plattform, nicht mit der Kneifzange an.
Genauso wie Blazor.
Zwei Dinge, wo ich nicht nachvollziehen kann, was Microsoft da treibt,
und warum das in irgendeiner Art und Weise so ein bisschen gehypt ist.
Maui ist so ein Ding, da warte ich jeden Tag drauf,
dass Microsoft einen Blogpost macht, wird eingestellt,
und Blazor verstehe ich auch den Anwendungszweck nicht für.
Tauri, naja.
Also wahrscheinlich Ionic oder Elektron, aber Quasar benutzt keiner.
Expo.
Aber ich finde es interessant, dass Native Apps wieder im Kommen sind.
Ich könnte mir auch vorstellen, dass einfach es zu ätzend wird,
die Plattform-Unterschiede mittlerweile in solchen Meta-Frameworks zu bauen,
nachzubauen oder zu unterscheiden.
Und ich könnte mir vorstellen, dass es auch zunehmend Performance-Probleme gibt.
Ja, je nachdem, was man machen will.
Letztendlich, der große Unterschied ist,
Native Apps bedeutet, das wird mit den jeweiligen SDKs und Tools und Sprachen gebaut,
die die jeweiligen Hersteller zur Verfügung stellen.
Das bedeutet, dass es auf iOS, Swift, plus keine Ahnung, wie das iOS-Standard-Framework heißt,
Cocoa, kann das sein?
Nee.
Wie heißt das?
Ich weiß nicht.
Also, Swift plus Apple-Kram.
Und auf Android ist es Java plus Android-Kram.
Ich weiß nicht, ich kenne mich damit nicht aus.
Was man damit verwendet.
Das heißt natürlich, man hat die maximale Performance auf dieser Plattform
plus die maximalen Möglichkeiten, die die Plattform bietet
und die beste Integration mit der jeweiligen Plattform.
Wenn das notwendig ist,
oder wenn die Plattform davon profitiert und letztendlich auch Geld davon abhängt,
sind Native Apps gar nicht so verkehrt.
Würde ich mal sagen.
Das Problem ist halt die Komplexität, die man hat.
Man muss im Endeffekt zwei Apps entwickeln
und im Endeffekt sogar noch mehr,
weil die meisten Services gibt es für Android, iOS und auch als Webseite.
Eventuell sogar noch mit einer Desktop-App.
Abnehmend.
Das heißt, du musst mindestens drei verschiedene Plattformen supporten.
Und daraufhin sagen ja viele Leute,
okay, will ich nicht.
Ich wrap einfach meine Web-Anwendung in eine Native App.
Und dann benutzt man sowas.
Dann ist natürlich klar, dass man da Kompromisse machen muss.
Das hier sind im Endeffekt, wobei ich laber da ein bisschen,
wie sagen da die Amis so,
ich laber da so ein bisschen aus meinem Poppes, ja.
Es hört sich jetzt vielleicht so an,
als weiß ich, wovon ich rede.
Ich weiß nicht, wovon ich rede.
Ich habe noch nie Native Apps entwickelt für Mobile Plattformen.
Das ist alles nur Hören, Sagen und wie ich denke, dass es ist, ja.
Und wenn du halt deine Webseite nur in quasi so eine Native App Wrapper packst,
kann es natürlich schon sein, dass du Performance-Probleme hast.
Und es kann auch sein, dass du Probleme bekommst,
wenn du auf Native Features der jeweiligen Plattform zugreifen musst.
Oder den Plattformen zugreifen willst,
die das jeweilige, ja, Native Wrapping Framework nicht unterstützt.
Deswegen könnte ich mir vorstellen,
dass es immer bedeutender geworden ist die letzten Jahre,
über wirklich richtig gute und gut funktionierende Native Apps zu bauen.
Weil ein Ding ist klar, da hängt Kohle dran, ja.
Wenn ein User die App öffnet und die erstmal 10 Sekunden hängt
oder sich eklig anfühlt und sich nicht nach einer ordentlichen Mobile App anfühlt,
dann haben viele User keinen Bock mehr.
Ja, es ist ja auch so, dass es nicht bei vielen Apps
ja für unterschiedliche Alternativen im App Store gibt.
Die sagen dann, äh, fühlt sich eklig an, benutze ich nicht.
Und wenn man das fixen kann mit Native Apps,
das ist eine Erklärung dafür, ja.
Flutter, Flutter steht hier nicht drinnen.
Ich gehe mal davon aus, Flutter steht hier nicht drinnen,
weil es keine klassische Web-Entwickler-Domäne ist.
Flutter Apps.
Also wenn ich heute eine Mobile App entwickeln würde,
wäre es bei mir wahrscheinlich Ionic oder Flutter.
Flutter habe ich aber keine Ahnung von.
Ähm, ja, oder tatsächlich eine Native App.
Ich weiß es nicht genau.
Müsste ich mich dann damit beschäftigen.
Äh, Apple erlaubt PWAs.
Doch, doch.
Aber Apple hat viele Einschränkungen, was PWAs angeht.
Deswegen sackt das ein bisschen.
Desktop Experience, äh, was soll das bedeuten?
Die Leute mögen Elektronen, okay.
Schön, schön, schön für die.
Schön für die, wenn sie Elektronen mögen.
Mobile Desktop Toolkits.
Nie gehört.
Rails.
Klingt nach einem Ruby on Rails Abklatsch.
Auch vom Logi, ja.
Ach, Go ist das.
Das ist quasi, das ist quasi Ruby on Rails in Go, oder wie?
Oder wie darf man sich das vorstellen?
Ach, nee, nee, nee, nee, nee, nee, nee.
Nee, das ist Native Apps.
Native Apps in Go.
Also, sagen wir mal, äh, wahrscheinlich auch WebView.
Ich weiß nicht, was es ist.
Keine Ahnung.
Andere Krempel sagt mir nichts.
Viewtify kenne ich.
Das ist eigentlich ein CSS-JavaScript-Framework für Vue.js-Web.
So quasi HTML-Komponenten für die Webseite.
Happiness ist nicht so gut.
Pinpoint, also überspringen wir.
Build Tools.
Okay, Vite.
Beste.
Webpack ist oben, aber niemand mag es.
Niemand mag Webpack.
Vite ist steil.
Vite geht steil, Alter.
Und die anderen, Biome kenne ich.
Oder Biome, ist es Biome?
Biome, weiß ich nicht.
Und das da kann man nicht anklicken.
TS-Up, keine Ahnung.
Was ist TS-Up?
Das hört sich ein bisschen nach TypeScript an.
The simplest and fastest way to bundle your TypeScript.
Libraries.
Warum braucht man das?
I don't know.
SWC.
Ich hab da wirklich nie was von gehört.
Ah, natürlich.
Was sonst?
Das hat er bis heute noch gefehlt.
Natürlich muss es den ganzen Krempel auch in Rust geben.
Logisch.
Luko, moin.
Selbstverständlich, das darf nicht fehlen.
Blazingly fast written in Rust.
The Rust Task Force ist auch im Frontend arrived.
Speedy Web Compiler.
Moment, es ist ein JavaScript TypeScript Compiler written in Rust?
Äh.
Moment, damit kann ich TypeScript?
Damit kann ich TypeScript zu Native Binaries compilen?
So für Konsolenanwendungen oder sowas?
Oder für was verwendet man das?
Ja.
Tatsächlich.
Leute, das müssen wir uns irgendwann mal angucken.
Einfach, weil es geht.
Das müssen wir uns mal angucken.
Bin gespannt.
Nicht, dass ich so scharf drauf bin, irgendwelche Tools oder Command Line Tools und Sachen in JavaScript zu entwickeln.
Aber es ist cool, sich neue Sachen anzugucken, was denn so alles möglich ist und geht.
ES-Build.
Warum steigt das so krass an?
Was macht ES-Build?
Kann das tolles?
Glaub ich auch nicht.
Ach nee, ES-Build.
Ich weiß, was es ist.
Ist ES-Build dieses Ding?
Wo man zukünftige JavaScript-Features jetzt schon ausprobieren kann?
Nee.
Vite benutzt ES-Build.
Okay.
Ja, dann ist klar, dass ES-Build auch so ansteigt.
Dann ist ja klar, guck mal.
Wenn Vite so steigt, ist klar, dass ES-Build auch so...
Logisch, oder?
Webpack.
Niemand mag Webpack.
Jeder mag Vite.
Alle mögen...
Man, ES-Pack hab ich noch nie gehört.
Bestimmt auch Rust.
Basically fast written in Rust.
Natürlich.
Was sonst?
Wenn du Projektnamen schon ansiehst, das ihre...
Ihr Hauptfeature ist, written in Rust zu sein.
BuildToolPainPoints.
Oh, juckt mich jetzt net so.
Mono...
Was?
Juckt mich null.
Chat.
Warum...
Warum nicht Git?
Ich glaub, die meinen was anderes als ich damit.
Du kannst doch eigentlich...
Du kannst doch einfach dein Backend- und Frontend-Projekt im gleichen Git-Repo verwalten und gut ist.
Warum brauch ich jetzt dafür...
Lerner oder so?
Da bin ich wahrscheinlich nicht Frontend-Developer genug dafür, um das zu checken, warum man das braucht.
Ich mein, ich hab hier auch ein Projekt, gestern, wo wir dran rumgebaut haben.
Da liegt einfach...
Da liegt einfach meine Web-Anwendung und mein Backend-Code und mein Microcontroller-Firmware-Krempel...
Alles in einem Repo, das ist doch nicht...
Warum brauch ich da extra Tools für?
Ja, sharest du Code zwischen den beiden...
Ah, so ist das gemeint.
Sag mal, du hast irgendwie so ne...
So ne globale...
Globales Helper-Tool oder so und das willst du in allen Repos verwenden.
Warum kann ich da nicht einfach ein Package irgendwie draus bauen und das...
Okay, vielleicht...
Vielleicht hab ich einfach die Problematik noch nicht verstanden.
Dann...
Das hab ich noch nicht verstanden.
Er darf natürlich auch nicht fehlen hier.
Andere Tools.
Okay, ich glaub jetzt sind wir gleich durch.
Andere Libraries und so, die auch noch verwendet werden.
Lodash.
Benutzt das noch jemand?
Ich dachte, das ist komplett...
Äh, so...
Beliebtheitsmäßig...
Raus, so...
Da gibt's sogar Hate-Webseiten zu Why-You-Don't-Need und das war Underscore früher.
Benutzt ihr das noch?
Das ist so ne Utility-Library.
Date-FNS, das benutze ich gerne.
Weil Date-Handling in JavaScript Painstram ist.
Das ist Form-Validation.
Hab ich noch nie richtig benutzt.
Moment.
Date.js auch nicht.
Rx.js.
Schon mal ausprobiert.
Weil ich die Reactive-Extensions in .NET gut finde, aber im JavaScript hat mich das...
jQuery, logisch.
Wer hat nicht jQuery bisher verwendet?
Kenn ich nicht.
Weiß ich nicht mehr, was das sein soll.
Core.js.
Standard-Library.
Ich dachte, JavaScript hat ne Standard-Library.
Im Browser zumindest.
Und Node auch.
Okay.
Alles klar.
Okay, es gibt...
Vielleicht gar nicht so schlecht, dass es gibt.
Immer?
Underscore.
Okay, das verwendet kaum noch einer.
Walibot.
Das hab ich mal versucht zu verwenden letztens.
Und ich bin...
Ich hab's hingekriegt, aber ich bin ziemlich lange an der Config gescheitert, weil das undurchsichtig ist.
Weil das undurchsichtig als fuck war.
Graphics, Animations, 3.js.
Gut, das wundert mich nicht.
Das sind somit die bekanntesten.
Frame of Motion, vielleicht noch Lottie, hab ich noch nie gehört.
Anime.js.
Ich glaube nicht, dass es damit was zu tun hat.
Jetzt übertreiben sie es aber hier.
Backend-Frameworks.
Express.
Was sonst?
Ganz ehrlich, Express ist auch das einzige Backend-Framework, was ich kenne.
Ja, ich meine, ich kenne die Server-Sites, Sache von SvelteKit und sowas.
Aber von den anderen, keine Ahnung.
GitHub, Express.
Und Express muss auch einfach taugen.
Express gibt es seit Jahrzehnten gefühlt.
Und es macht einfach das, was es machen soll.
Und es funktioniert.
Und jeder verwendet es.
JavaScript-Runtimes.
Node.js erster.
Logisch.
Browser zweite.
Logisch.
Und das liegt zum größten Teil daran, würde ich mal sagen, weil die Leute, die in dieser Umfrage mitmachen, also objektiv gesehen oder realistisch gesehen, ist Browser Nummer 1.
Aber nachdem ihr ja Entwickler bei der Umfrage mitmachen und so gut wie niemand quasi Online-Anwendungen entwickelt, ohne eine lokale JavaScript-Runtime zu haben, ist das noch einen Ticken vorm Browser.
Weil ja nicht alle zwangsläufig für den Browser entwickeln.
Aber die verbreitetste JavaScript-Runtime der Welt sind die Webbrowser.
Keine Frage.
Und letztendlich könnte man ja sogar sagen, Chrome und Node.js hat die gleiche Runtime.
Das ist ja alles V8.
Gefolgt von BAN.
Serviceware, Deno, okay.
Gucke mal, wundert mich sogar, dass BAN, BAN ist deutlich jünger als Deno, dass das überholt hat.
Aber Deno ist auch nicht so richtig abgehoben.
Ist das nicht die alte JavaScript-Runtime vom alten Edge?
Ne, darauf kannst du nicht entwickeln.
Im Sinn, aber die meistverbreitete Runtime in der Welt sind Browser-Runtime.
Sag mal so, du kannst Frontend-Anwendungen entwickeln ohne Node.js oder ohne JavaScript-Runtime.
Das funktioniert.
Du brauchst einfach nur einen Editor und eine Index-HTML, die ausgeliefert wird.
Und dann läuft das im Browser.
Du brauchst nicht zwangsläufig auf deinem Entwickler-PC eine JavaScript-Runtime.
Jeder ernstzunehmende Frontend-Anwendung benutzt aber halt Tools und Sachen, die das doch wieder brauchen.
Serverless-Runtime juckt mich nicht.
Fly.io, die waren letztes Jahr über, sind die ziemlich beliebt geworden.
Non-JavaScript-Languages, okay.
Also was die Leute neben JavaScript noch so machen.
Python, gut, wundert mich nicht.
Hippe Sprache aktuell.
PHP, historisch bedingt.
Natürlich.
Weil Verbindung, Web und PHP, ist klar, dass das vorne ist.
Java C Sharp, wundert mich auch nicht.
Bash.
Viele Leute betreiben sicherlich auch die Infrastruktur selbst.
So ein bisschen Bash-Reskripte ist auch gut.
Go, Rust, C++.
Also C, C, Poggers, C++.
Kotzgeräusche.
Ruby, leider, ja, dank Rails-Abstiegs oder nicht Abstieg.
Dank, leider Rails nicht so mehr Hype-Signs.
Nicht mehr so angenehm vorne dabei.
Ich mag Ruby.
Ich finde, Ruby ist für mich eines der schönsten Programmiersprachen, die es gibt.
Aber ein bisschen nicht mehr so beliebt auf jeden Fall die letzten Jahre.
AI-Tools juckt mich nicht.
Hosting Services, Hetzner.
Haben wir auch Hetzner irgendwo dabei?
Nee.
Hat's nicht mal da reingeschafft in die Umfrage.
Lenore und Ufa.
Also, als erstes, oder?
Ja, da ist es doch.
Da ist es doch.
Ah ja, 15, okay.
Also, mich wundert's nicht, dass AWS mit am Start vorne ist.
AWS ist sehr beliebt bei Frontend-Leuten.
Und Amazon, das waren mit die Ersten und sind auch immer noch mit die Größten.
Als nächstes Vercel.
Wundert mich auch nicht.
Gerade im Frontend-Bereich ist Vercel und Netlify super beliebt.
GitHub Pages, obviously, ja, aber sicherlich nicht für kommerzielle Web-Anwendungen.
Heroku, schon seit Jahren auf einem absteigenden Ast.
War eine der Ersten, wenn nicht die Erste, bekannte Software-as-a-Service-Hosting-Plattform.
Gab es schon zu Ruby-Zeiten.
Da konnte man Ruby und Rails-Anwendungen drauf hosten und per Git hinpushen und so.
Also quasi schon vor fast 20 Jahren oder so.
Mindestens 15 Jahre.
Ist auch ein bisschen absteigend nass.
Cloudflare ist so ein Ding.
Cloudflare hat ganz viele Services.
Aber Cloudflare wird hauptsächlich tatsächlich für die Netzwerk-Services verwendet.
Zumindest habe ich so den Eindruck.
Also sprich für Domains, DNS, CDN-Geschichten, DDoS-Protection, sowas.
Die eigentlichen Worker-Services, es gibt ja Cloudflare-Workers und sowas.
Sehe ich selten.
Da habe ich zumindest den Eindruck, nicht so sehr verbreitet.
DigitalOcean, richtig cooler Anbieter.
Wenn man sich um Infrastruktur selbst kümmern möchte.
Auch deutlich günstiger als AWS.
Azure, ist halt so.
Google Cloud ist auch so.
War klar.
Also mich wundert es vielleicht ein bisschen, dass AWS so krass hier vor Azure und Google ist.
Aber historisch bedingt.
Auch wiederum nicht.
Also es war aber klar, dass die auch mit dabei sind.
So Render kenne ich gar nicht.
Fly.io hat gerade das letzte Jahr über, das letzte eineinhalb Jahre über, sehr viel an.
Also mich würde nicht wundern, wenn wir Fly.io nächstes Jahr hier mit 20% sehen.
Die haben wirklich sehr an Beliebtheit gewonnen.
Das letzte Jahr über.
Fastify kenne ich nicht.
Firebase, ja gut.
Hetzner.
Gut.
Das sind eindeutig die Sachen, wo man sich komplett selbst um die Infrastruktur hausten muss.
Die Liste ist ja nicht nach Anwendungszweck sortiert.
Wohingegen AWS ein Cloud-Service ist.
Sorry, ein Hyperscaler.
Wir müssen ja Buzzword Bingo spielen.
Ein Cloud-Service ist, der einfach alles anbietet.
Vercel, ein Cloud-Service ist, der Web-Sachen anbietet und das möglichst easy machen möchte.
Ist halt Hetzner ein reiner Infrastruktur-Anbieter-Service.
Klar, dass der nicht so weit vorne ist.
Weil viele Entwickler schlicht und ergreifend keinen Bock haben, sich um den Linux-Server selbst zu kümmern.
Trotzdem dürfte Hetzner, OVH, Linode, weiß ich nicht so richtig.
Dürfte das die mit Abstand günstigste Variante sein, eine Web-Anwendung zu hosten.
Im Vergleich zu denen hier.
Mit Abstand.
Was du bei Hetzner für ein Apfel und ein Ei an Rechenleistung kriegst.
Bezahlst du dich dumm und dämlich mit Cloud-Functions und irgendwelchen anderen Geschichten hier.
Okay, fertig.
Usage.
Ah, das ist auch noch interessant.
Die meisten Leute benutzen tatsächlich...
Ach nee.
Okay, die Umfrage ist, benutzt ihr 100% JavaScript, 100% TypeScript?
Okay, das wundert mich jetzt tatsächlich.
Hetzner ist nicht Serverless.
Das ist doch das, was ich gerade gesagt habe.
Du musst dich um deine eigene Infrastruktur kümmern.
Was viele nicht wollen.
Also die meisten Leute benutzen tatsächlich überwiegend TypeScript.
Hättet ihr das gedacht?
Ich nicht.
Aber wahrscheinlich, weil ich auch hauptsächlich von mir ausgehe.
Und für mein kleines Gebastelzeug verwende ich eigentlich so gut wie nie TypeScript.
Aber bei dieser...
Jetzt mal ernsthaft.
Was denkt ihr dazu?
Wenn ich jetzt sage, bei dieser Verbreitung...
Bei dieser Umfrage, ja.
Da könnte man doch fast schon drüber nachdenken, ob man nicht native TypeScript Support in den Browser einbauen sollte.
Was denkt ihr dazu?
Wenn TypeScript eh die angesagteste Dialekt davon ist, sollte man nicht TypeScript Support im Browser ermöglichen.
Direkt im Browser.
Microsoft weiß ich nicht, ob Microsoft das überhaupt wollen würde.
Dann lieber Rust.
Dann lieber Rust.
Ich glaube, das kannst du vergessen.
TypeScript Support im Browser, ja oder nein?
Ich glaube nicht, dass es in nächster Zeit passieren wird.
Es gibt JS-Doc und sowas gab es.
JavaScript Usage, personally as a Hobby.
Ich benutze es als Hobby.
Ich meine, ich benutze es auch professionally, wenn man so will.
Ich habe auch auf der Arbeit schon, auch wenn ich nicht hauptberuflicher Entwickler bin, auf der Arbeit schon JavaScript Sachen angepasst.
Aber ich würde sagen...
Ich würde sagen, hauptsächlich as a Hobby.
Was ist Polyplane Browser?
Gibt es das auf GitHub?
JavaScript Usage in Frontend und im Backend.
Ja gut, das ist eine Umfrage an einen Webentwickler, wundert mich nicht.
Mobile Apps, Desktop Apps, Industriesektor, Programming und Technical Tools.
Was denn auch sonst?
Single Page Application, Server Site Rendering, Static Site Generation, Multi-Page Application, Partial Hydration.
Ja, das ist ja der neueste Trend.
Okay, ich habe ehrlich gesagt keine Ahnung, was der Unterschied zwischen Partial Hydration und Progressive Hydration ist.
Aber das ist aber so.
Single Page Application mit Server Site Rendering verheiratet, ist ja der neueste Trend.
Also Hydration im Endeffekt.
Die Seite schon vor Rendern beim ersten Mal ausliefern und danach den State quasi...
...einfrieren, rüberschicken an den Client.
Also das einfrieren des States und rüberschicken an den Client nennt man Hydraten.
Und den State wieder zurück, also Hydration.
Das ist ja so der aktuelle Trend.
Und das sieht man auch bei Sachen wie SvelteKit oder Next.js und solche Geschichten.
Eigentlich die logische Konsequenz aus dem, was die letzten Jahre über sich da Webentwicklung mäßig so getan hat.
Nachdem ich ein kleiner Clip...
...in den Tag loop bin und für mich die Vorteile von Server Site Rendering nicht reinspielen, mache ich hauptsächlich Single Page Applications.
Vorteile von Server Site Rendering ist eindeutig besseres finden in Suchmaschinen.
Juckt mich nicht, wenn ich ein Web Frontend für meinen Webserver, der auf dem ESP32 läuft, mache.
Suchmaschinen-Crawlbarkeit ist mir vollkommen egal.
Schnellere Ladezeiten sind jetzt auch so...
...bisschen schnellere Ladezeiten so wichtig...
...auch nicht.
Deswegen spare ich mir die Komplexität und mache einfach Single Page Applications.
Aber im Business-Umfeld ist Hydration die Zukunft.
Also die Kombination aus Server Site Rendern plus Ausliefern an den Client und dort, was man kleinzeitig machen kann, dann dehydraten und als Single Page Application weiterführen.
Ja.
Pain Points, Code-Architecture, könnte man so sagen.
Missing Features, Static Typing, guck mal.
Denken viele Leute drüber nach.
Also vielleicht doch TypeScript im Browser.
Standard Library, ja da fehlt auch einiges.
Aber es ist erträglich mittlerweile.
State Manager...
...Pipe Operator?
Juckt mich jetzt nicht so.
Wenigstens ist es in JavaScript nicht so...
...nicht so RAW wie in Go, dass die einfach sagen, nö wollen wir nicht.
Mach eine Schleife.
Pff.
Sagen ja Go.
Go-Entwickler sagen, man braucht keine Filter-Methode, mach einfach eine Schleife.
Forehead.
Just Loop.
Paid Courses...
Podcast.
Achso, das was die Leute so gucken im Internet.
Okay, das ist tatsächlich...
Ja gut, Paid Courses juckt mich jetzt nicht.
Ähm...
Podcast, was hören die meisten Leute?
Syntax...
Okay.
Video Creators.
Fireship, obviously.
Fireship is nice.
Ihn gucken sie auch.
Ich muss ehrlich sagen, ich kann mir die Videos nicht so...
Ich bin nicht so mit der Art und Weise der Videos kompatibel.
Das ist mir zu hektisch und anstrengend.
Ich weiß aber, dass es viele mögen.
Theo kann ich mir tatsächlich ab und zu angucken.
Web Dev Simplified gucke ich ganz gerne.
Das ist hier der CSS Master, den gucke ich auch öfters.
Und bin immer wieder erstaunt darüber...
Wie man CSS verbiegen kann mittlerweile.
Was man als CSS machen kann.
Den kenne ich nicht.
Bin ich mir nicht sicher.
Weiß ich jetzt...
Habe ich schon mal was geguckt von...
Äh...
Net Ninja habe ich auch schon Sachen von geguckt.
Das glaube ich auch.
Das auch.
Ähm...
Bestimmt auch mal irgendwann.
Ja, auch.
Ähm...
Macht nicht mehr so viel.
Joy of Code.
Den gucke ich gerne.
Moment.
Warum ist der so weit oben?
Aber hier so weit unten?
Nein, ist er gar nicht.
Moment.
Da gibt es noch mehr Umfragen.
Die gucken wir uns jetzt nicht an.
Okay.
State of React.
Interessant.
Most adapted technology.
Awarded to the technology with the largest year-over-year usage progression.
Äh...
Vite ist die letzten drei Jahre von unbedeutend zu Poggers gegangen.
React ist schon immer angesagt.
Äh...
Äh...
War klar.
War klar.
Vite.
Heißt Retention...
Ja, React, oder?
React?
Oh, auch Vite.
Ich habe nichts gesagt.
Heißt Interest.
Vite...
Okay.
Most...
What?
Most commented library.
React.
Ja.
Most loved library.
Vite.
Ja.
Also Vite räumt dieses Jahr aber richtig ab.
Verdient.
Ja.
Finde ich auch.
Ja.
Ja.
Ja.
Ja.
Ist ihm Country decorot.
Ich fände es großartig.
nets.
CHick.
Fuck warum Thanks, über sonntags.
...
Leute...
Das habe ich, das ist Premiere.
Das habe ich noch nie...
Das habe ich noch nie geschafft.
Ein sonntags stream.
Drei Stunden.
Ohne Videos.
Pures Gelaber.
Mir tut der Hals weh, alter.
Und ich habe Hunger.
Aber wir gucken jetzt mal irgendwas.
Was haben wir?
Ich muss mich mal kurz ein bisschen ausruhen.
Wir müssen uns mal etwas zur Entspannung angucken.
Also.
Manifest V2 und V3 ist sicherlich nichts zur Entspannung.
Das haben wir auch schon gesehen.
der leute ins office wollen juckt mich jetzt auch nicht so sehr verwaltung
trifft hochleistung thüringen jetzt neues rechnen das halte ich jetzt
most popular web servers waffen waffentest fibonacci windows feature
wir gucken ct 3003 das ist immer entspannend was hat man sonst noch
feierstift was neues kein neues video plis das haben wir schon geguckt das
haben wir schon geguckt das video das juckt des art wir gucken cd 3003 aha
weißt du was vielleicht ist es sogar besser dass das javascript nicht
bekommen hat 2007 2007 war javascript noch in so einem semi neisten
step
date und ich glaube durch type script hat man viel gelernt wie man das
gescheit machen kann für frontend das vielleicht wäre jetzt die bessere zeit
so was in die sprache zu übernehmen der anderen seite ist es auch nice dass
typescript sich parallel entwickeln kann wisst ihr eine sache die ich mich bei
typescript immer frage ist ich habe ja als type script neu war mich ein
bisschen mit beschäftigt und was ich mich da auch schon gefragt habe ist wie
machen die das eigentlich
eigentlich und zwar type script hatte ja als es neu war schon ein paar features
drin die javascript erst bekommen soll oder auch features drin wo man sich nur
gedacht hat die sind nice was macht type script denn jetzt eigentlich wenn sie
ein feature einbauen und das kommt dann vier jahre oder fünf jahre später auch
in javascript aber leicht anders oder inkompatibel zu ihrer sache sie müssen
auf jeden fall die neue sache nachbauen und das ist eigentlich der andere schluss für die neue sache
von javascript unterstützen weil typescript 100 prozent kompatibel zu javascript sein muss also
beziehungsweise gültiges javascript muss gültiges typescript sein doch aber umgedreht wie machen die
das denn und sowas muss doch garantiert schon mal vorgekommen sein bauen die dann alte features aus
bauen die das dann aus aus ihrer sprache der politik bringt ja nichts wenn du was implementiert
hast auf andere art und weise das heißt du musst dann dein feature quasi ausbauen wieder was
eventuell alten code der das benutzt hat kaputt macht nee es ist nicht wurscht wie das aussieht
jedes gültige javascript muss gültiges typescript sein nicht jedes gültige javascript sein aber
jedes jedes gültiges javascript muss gültiges typescript sein mal angenommen du hast jetzt
in javascript ok machen ein beispiel
ssing await wäre ich bin mir nicht sicher ob es der fall wäre wäre in typescript eingebaut worden
bevor es das ganze in javascript gegeben hätte aber auf leicht andere art und weise so jetzt
kommt das mit javascript das heißt auf einmal bedeutet das await keyword was ganz anderes
in dem kontext nämlich halt das javascript await aber du hast await schon benutzt das
Das heißt, du musst eigentlich deine Implementierung rausschmeißen und die JavaScript-Implementierung nehmen,
weil jedes gültige JavaScript muss gültiges TypeScript sein.
Was dann aber wiederum vielleicht alten Code kaputt macht, der sich auf die Implementierung von Await in TypeScript verlassen hat.
Ich weiß nicht, ob das rein theoretisch ist, ob es das schon mal gab, diese Probleme und so.
Du kannst da nichts mappen, weil es sich ja dann fundamental widerspricht.
Await bedeutet dann was anderes.
Und nachdem jedes JavaScript gültiges TypeScript sein muss, kannst du auch nicht sagen,
ah ja gut, dann transpile ich das irgendwie anders. Das geht an der Stelle.
Ich weiß nicht, vielleicht ist es was Theoretisches.
Das gab es noch nicht, das Problem.
Aber das frage ich mich seit Anfang an in TypeScript, wie die so ein Problem handhaben.
Du bräuchtest dann irgendeinen Compile-Time-Flag.
Ich verzichte auf JavaScript-Await-Implementierung und möchte backwards-kompatible TypeScript verwenden oder so.
Ich weiß nicht, wie die das machen.
Ah, wir gucken uns jetzt mal das CT-Video an.
Ich habe jetzt genug geschwätzt, die letzten drei Stunden.
Eine normale Windows-11-Installation.
Ich habe mitgezählt, man muss über...
Was gucken wir uns hier eigentlich an?
Windows viel schneller, Tiny 11...
Ach, das sind diese Windows-Deploating-Dinger.
Von denen halte ich persönlich auch nicht viel.
Ich bin der Meinung, man sollte sein Windows, wenn überhaupt, selbst deploaten.
Anstatt aus Semi...
Semi...
Offiziellen Quellen, irgendwelche Sachen zu installieren.
Was aus meiner Sicht okay ist, eine Windows-Installation normal durchzuführen,
sich dann von GitHub irgendwie das Skript zu laden und das auszuführen.
Dann hat man ja zumindest theoretisch die Chance, sich das Skript vorher anzugucken.
Und es hatten viele Leute die Chance, sich das vorher anzugucken.
Das ist okay.
Aber so einen ISO aus zweifelhafter Quelle laden und damit mein Windows installieren, würde ich nicht machen.
Du sagst, jedes gültige JavaScript muss gültiges TypeScript sein.
Wieso?
Weil das Microsoft so definiert.
Dass TypeScript eine Obermenge, ein Superset von JavaScript ist.
So wie ursprünglich mal C++ ein Superset von C war, was aber nicht mehr der Fall ist.
Was manche noch sagen, aber was nicht mehr stimmt.
Es gibt C-Features, die gehen nicht in C++ und umgedreht, klar.
Also dementsprechend, nachdem TypeScript ein Superset von JavaScript sein soll, heißt das Umkehrschluss,
dass jedes gültige JavaScript, muss gültiges TypeScript sein.
Und das ist halt, deswegen frage ich mich halt, was machen die?
Wenn die mal fünf Jahre später feststellen, so wie wir es für ein TypeScript gebaut haben, geht das nicht mehr.
Weil in JavaScript kam das jetzt auch, aber es sieht anders aus.
Vielleicht, aber ich glaube nicht, dass das ist, was die, ich glaube nicht, dass die das wollen.
Was aber nicht heißt, dass es kompiliert.
Na klar, ein Superset bedeutet, nee, brauchst du nicht.
Auch ohne Any ist es.
Gültiges TypeScript.
Function, blub, ist gültiges TypeScript.
Wenn das nicht der Fall ist, dann ist es kein Superset mehr.
Es kann sein, dass es sich die letzten Jahre über geändert hat, glaube ich aber nicht.
Jedes gültige JavaScript ist gültiges TypeScript.
Über 30 mal klicken und ständig wird versucht, einem irgendwas aufzudrängen, gerne auch kostenlos.
Und wie kompliziert das mittlerweile ist, einfach einen stinknormalen lokalen Account anzulegen.
Abos, Office, OneDrive-Abo und so weiter.
Abartig ist das.
An installierenden Windows gibt es viel Zeug, was viele nicht haben wollen.
Hier, Clipchamp will uns auch ein Abo aufschwatzen.
Xbox-Abo und so weiter und so weiter.
Außerdem, ohne Microsoft-Account kann man Windows 11 gar nicht mehr installieren.
Also zumindest nicht ohne Rumtricks.
Also, wenn das, wenn das gültiges JavaScript ist, dann muss das auch gültiges TypeScript sein.
Und ich wette, ich, also, Moment, es gibt doch, wir machen das jetzt einfach mal.
Es gibt doch online, Leute, was benutzt man da?
Online TypeScript.
JS-Fiddle hat man früher verwendet.
Hier, TypeScript-Playground.
So, TypeScript-Playground.
Bam.
Kein Ding, funktioniert.
Gültiges TypeScript.
Ich meine, der meckert natürlich rum, so keine Type-Information, die sagen, dass es eine Bar-Property gibt.
Das ist aber egal.
Es kompiliert und es funktioniert.
Es hat Warnings.
Es funktioniert.
Ja, es hat einen TypeScript-Error.
Ein rein kosmetischer TypeScript-Error.
Dass es sagt, okay, wir haben keine Type-Informations, dass es Bar gibt.
Es funktioniert.
Es kommt gültiges JavaScript raus am Ende.
Das ist das, was ich meine.
Und das ist auch das, was Microsoft gesagt hat immer.
Das ist ein super Set von JavaScript.
So, was ich jetzt meine, ist halt, wenn man in Java, wobei, wir lassen es gut sein, eigentlich keinen Bock.
Ich habe da jetzt schon so lange drüber geredet.
Mir tut der Hals weh.
Also, das liegt jetzt nicht an dir, aber ich habe so lange, ich muss mir auch kurz fünf Minuten nicht schwätzen, okay?
Ja.
Drei.
Und jetzt guckt euch dieses Windows 11 hier mal an.
Ja, die Installation geht mit weniger als halb so viel Klicks.
Mir wird nichts aufgeschwatzt.
Ich kann auch einfach ein lokales Konto anlegen ohne Online-Zwang.
Und die Installation braucht auch nur 43 Gigabyte statt 50.
Ich finde das ja schon eine harte Nummer, ne?
Dass die Installation nur, nur 43 Gigabyte braucht.
Was ist denn da eigentlich mittlerweile alles für ein Schund mit dabei?
Was ist das denn alles?
Nur 43.
Was liefern die denn da eigentlich alles mit aus?
Was geht denn da bei Microsoft ab?
Gag wait.
Was machen die da eigentlich?
Ja, fragt ihr euch jetzt.
Wie, wie, wie hast du das denn jetzt gemacht?
Was ist das denn für schwarze Magie?
Wow.
Ja.
Mind blown.
Tiny Eleven heißt das Ganze.
Ist Open Source.
Und dann gibt es auch noch Atlas und Revy OS.
Die versprechen nicht nur ein cleaneres Windows ohne die ganze Blast-Software, sondern auch eine höhere Framerate.
Beim Spielen und geringere Eingabeverzögerung.
Wir haben uns das alles mal ganz genau angeguckt, dabei sehr interessante Sachen rausgefunden und auch ganz viele Benchmarks gemacht mit drei unterschiedlichen Rechnern.
Bleibt dran.
Achso.
Und kauft uns gerne diese tolle 3000.
Chat.
Weil der gerade Werbung macht, ich mache auch kurz Sellout.
Mit ASCII-Quarium zur Entspannung im Hintergrund.
Kurzer Sellout-Einschub.
Sponsor-Blog aktivieren.
Wem meine Streams gefallen, ich freue mich über jeden Follow.
Und natürlich auch über jeden Sub.
So ist es nicht.
Ich finde es schön, dass so viele Leute am Start sind.
Ich würde mich freuen, wenn ihr demnächst auch wieder am Start wärt.
Wem der Content gefällt.
Glocke aktivieren.
Ne, gibt es auf Twitch ja nicht.
Einmal Follow drücken.
Dann habe ich nachher grüne Pfeile, die nach oben zeigen, über die ich mich freuen kann.
Es gibt eine Glocke bei Twitch?
Wirklich?
Ja dann auch Glocke aktivieren, Leute.
Subscriben.
Glocke aktivieren.
Followen.
Onlyfans abonnieren.
Und was es nicht alles gibt.
Was machen denn die ganzen krassen Influencer-Leute?
Was muss man denn heute?
TikTok.
Ich habe ja gar kein Onlyfans-Account.
Nur Fansly.
Ich bin Fansly-Enjoyer.
Nicht Onlyfans.
Mooncure und Wolle.
Dankeschön für den Sub, Leute.
Exzellente Subscriptions.
Dankeschön.
TikTok.
Du kannst doch nicht mal TikTok richtig schreiben, Mann.
So.
Gucken wir das Video weiter.
Nee, aber ernsthaft.
Ich gucke mir gerne meine Stream-Statistik an.
Und ich muss natürlich auch ein bisschen so gucken.
Okay.
Welche Stream-Inhalte gefallen den Leuten?
Welche nicht so?
Und das macht man natürlich an Views-Fest.
Und halt auch hauptsächlich an dem,
wie viele Follows da es zwischendurch gegeben hat.
Logisch, ne?
Wenn ich jetzt irgendwie drei Stunden was mache,
was die Leute alle kacke finden.
Und ich sehe, es gab bei diesem Stream irgendwie nur zwei, drei neue Follows.
Dann denke ich mir, okay.
Bei dem anderen gab es 20.
Dann denke ich mir, okay,
das kommt wahrscheinlich besser an.
Fußreveal.
Da kommt dann Max hat dicke Arme.
Auch Max hat dicke Füße noch zusätzlich dabei.
Max hat gar nicht mehr so dicke Arme, ne?
Ich habe jetzt ja letztens im Stream mal wieder
meinen Arm revealed.
Als ich den,
als wir gelötet haben.
Also sowohl die Finger,
als auch der Arm.
Gerade wenn ich das mit früher vergleiche,
sind die bei weitem nicht mehr so pepo fett.
Wie sie das noch
vor nicht allzu langer Zeit
gewesen sind.
Wird mal wieder Zeit für Kubernetes-Stells.
Da habe ich festgestellt,
das hat nicht so viele interessiert.
Was tatsächlich vielen gefallen hat,
waren die letzten
zwei, drei C++-Streams.
Das bringt mich so in einen
leichten Konflikt.
Weil auf der einen Seite
mache ich ja schon gerne das,
wo ich auch sehe, dass es gut ankommt.
Auf der anderen Seite
fuckt mich C++ extrem ab.
Also, ja.
Kleiner Interessenskonflikt.
Dein Sub war nicht
contentabhängig.
Du kannst subben, aus welchen Gründen auch immer
du willst.
Wir subshamen hier nicht.
Moment, gibt es das Wort überhaupt?
Das ist ein Wort, das könnte ich mir durchaus vorstellen,
wenn man sich auf Twitter in einschlägigen Bereichen
...
Fuck, das gibt es wirklich.
Wenn man nach Subshaming sucht,
gibt es Videos, die man dazu findet.
Ich fasse es nicht, Alter.
Für jeden Blödsinn, den man sich denken kann,
gibt es schon einen anderen Blöden, der den gedacht hat.
Okay, Video, stell's. Let's go.
14,90 Euro.
Liebe Internet-Surfer, herzlich willkommen
hier bei ...
Du wolltest auch mal wieder Bastel-Stream
mit Cam machen? Ist doch noch nicht so lang her,
als wir das hatten.
Ich wollte, wenn wir das Display
von dem
T-Display S3
programmiertechnisch anschauen,
das muss ich mit Kamera machen, weil
sonst sieht man es ja nicht.
Ja, so ein eigenes kleines ...
Windows.
Super geklaute Daten, eher nicht so.
Super Übergang, oder? Weil dieses Video wird nämlich
gesponsert von Incogni.
Incogni ist ein Dienst, der automatisch
eure persönlichen Daten aus den Fängen
von Datenhändlern befreit.
Ja, es gibt ja hunderte von Datenhändlern,
die eure Daten entweder ...
Dann lassen wir ihn auch mal kurz Sellout machen.
... mal legal oder sogar illegal.
Ich würde auch wollen, wenn einer meine Videos
on stream guckt, die es ...
Ja, ich gebe zu, ein paar Monate ...
Würde ich auch enjoyen,
wenn er den Sellout drin lässt.
Ich war noch nie in einer Wüste,
by the way.
Falls ihr euch mal wundert, warum in Spam-Mails
euer voller Name steht, ja, womöglich gekauft von Datenhändlern.
Oh nein!
Ja, das interessiert den Spammer
vor allem auch richtig, wenn ich ...
Hallo, lieber Spammer, ich widerspreche dem Nutzen
meiner Daten. Dann sagt er, ach so!
Ach so! Jetzt, wo du sagst,
jetzt schicke ich dir nichts mehr.
Das wusste ich nicht. Jetzt spamme ich dich nicht
mehr voll.
Döte, döte, döte ...
Ich hab'!
Ich hab' keinen Verlangen, den Servicer auszuprobieren.
Ich hab' keinen Verlangen, den Servicer auszuprobieren.
Also, schon seit einiger Zeit fragt ihr uns immer wieder mal,
ob wir mal was über die zur Zeit
ziemlich angesagten Schrumpf-Windows machen.
Ja, sogar ich hab' schon so
Chat-Nachrichten gekriegt, ob ich mir Rewe
US und so Zeug mal ...
mal angucken muss. Ist Rewe nicht irgend'n
Minecraft-Let's Player?
Eh ... Rewe
Minecraft? Nee.
Wir haben uns dafür ein bisschen mehr Zeit gelassen, weil ich ehrlicherweise nicht so einen Schnellschuss raushauen wollte und unbedingt auch abwarten wollte, was die Windows-Experten von der CT herausfinden.
Und das war gut, weil die haben ziemlich viel herausgefunden.
Wir haben uns auf drei Schrumpf-Windows beschränkt, TinyOS, Atlas und RevyOS.
Atlas und RevyOS funktionieren so, dass sie eine vorhandene Windows-Installation modifizieren und das machen sie mit sogenannten Playbooks.
Das sind grob gesagt so Skript-Sammlungen.
Würde ich mal sagen, oder? Das sind irgendwelche Ansible-Playbooks, vermutlich, oder?
Also Sammlungen von unter anderem PowerShell.
Wollen wir uns das mal angucken? Das gucken wir uns mal an.
Warten wir mal hier. Tiny11, GitHub.
Ne, das ist PowerShell.
Also mit Playbooks bringe ich jetzt irgendwie immer Ansible in Verbindung, aber Ansible unter Windows ist auch schon ein bisschen Paintschamp.
PowerShell-Befehlen, um Dinge zu entfernen.
Diese Befehle sind auch ganz offiziell von Microsoft dokumentiert.
Ja, und diese Playbooks, die lässt man mit der Software AME Wizard laufen und dieses Programm nützen sowohl Atlas als auch RevyOS.
Hat nix mit Ansible zu tun.
Auch RevyOS, es unterscheiden sich dann halt nur die Playbooks, also diese Skript-Sammlungen.
Ist übrigens alles Open Source, sowohl die Playbooks als auch der AME.
Warum braucht man, eine blöde Frage, warum braucht man dafür wieder ein extra Programm?
Warum ist es nicht einfach ein PowerShell-Skript, was ich ausführen kann?
Warum muss das irgendwelche komischen, äh, undurchsichtigen...
Binary-Dinger sein?
AME Wizard, man kann also in die Befehle auch selbst vorher reingucken.
Ein Playbook ist nämlich einfach ein mit 7-Zip gepacktes Archiv.
Das Passwort ist immer Malte, kleingeschrieben.
Klingt kurios, ist aber wirklich so.
Ja, und wie gesagt, man startet dann einfach AME Wizard, zieht da das Playbook drauf,
muss man manuell alle vier Windows-Sicherheitseinstellungen ausschalten,
dann kann man noch ein bisschen einstellen und dann rüttelt der Rechner ungefähr 10 Minuten rum und fertig.
Aber direkt mal eine Warnung.
Vorab, auf keinen Fall einfach starten die Dinger, um mal zu gucken, was passiert.
Auf keinen Fall.
Backupt vorher und vielleicht auch die ganze Windows-Installation.
Denn habt im Hinterkopf, dass euer Windows nach dem Ausführen des Playbooks eventuell nicht mehr funktioniert.
Denn sowohl Atlas als auch RevUS empfehlen, das mit einem ganz frisch installierten Windows zu machen.
Also auch mit allen Updates eingespielt.
Das kann halt auch mit einem schon länger genutzten Windows gehen, ist aber auf jeden Fall riskanter.
Also unbedingt backuppen.
Ich gehe jetzt erstmal die drei Projekte durch und zeige euch danach unsere Messungen, also ob Windows tatsächlich schneller geworden ist.
Wisst ihr, was ich an den CT3003-Videos mag?
Die gehen immer genau richtig von der Zeit, vom Inhalt her.
Da ist ganz selten so viel Füll-Content dazwischen.
Die sagen einfach, wie es ist und wenn es fertig ist, ist es fertig.
Da ist so wenig Leerlauf, das finde ich ganz gut.
Windows Nummer 1, Tiny Eleven.
Also einen anderen Einfachen.
Einen einfacheren Weg, als die anderen beiden geht Tiny Eleven.
Weshalb wir damit anfangen.
Also Tiny Eleven modifiziert keine vorhandene Windows-Installation, sondern setzt schon bei der Installationsdatei an.
Ihr holt euch ganz normal bei Microsoft die aktuelle Windows-ISO, doppelklickt die, dann mounted Windows die als Laufwerk,
holt euch bei GitHub den aktuellen Tiny Eleven Builder, packt die Dateien aus dem Tiny Eleven Builder Archiv aus,
öffnet ein Terminal mit Admin-Rechten.
Meine blöde Frage, warum kann der Tiny Eleven Builder nicht einfach die ISO downloaden und das im Hintergrund erzeugen?
Wir packen alles.
Das vorher ausgepackte Skript tinyelevenmaker.ps, dann kriegt ihr so eine Sicherheitswarnung,
den müsst ihr einmal mit M bestätigen, dann müsst ihr einmal den Laufwerksbuchstaben
eingeben, auf dem Windows das Image gemountet hat, das könnt ihr im Explorer sehen, bei
mir ist das hier D, ja, und dann müsst ihr nur noch auswählen, welche Windows-Variante
ihr haben wolltet.
Ich habe Pro genommen.
Und dann arbeitet das Skript ziemlich lange rum und am Ende kommt dann ein verkleinertes
ISO dabei raus.
Wenn ihr im Terminal Fehlermeldungen sehen solltet, das ist kein Problem, zumindest bei
mir hat das trotzdem alles wunderbar funktioniert.
Diese ganzen Dinge sind dann bei Tiny Eleven nicht mehr dabei.
Ich lese jetzt mal nicht die ganze Liste vor, aber unter anderem ist das Edge, Clipchamp,
News und OneDrive.
Clipchamp.
Clipchamp.
Nix von mir.
... erlaubt euch aber das...
Nix von mir.
... die ISO bei der Installation direkt einen lokalen Benutzer anzulegen, statt durch zwingend
in ein...
Okay, das, das ist schon mal praktisch.
Ich kenne zwar mittlerweile den Trick bei der Installation, es gibt ja zwei Tricks, einmal
im GUI um drei Umwege klicken für lokalen User.
Oder, wie geht das da, wie, wie, wie, wie ging das nochmal?
Shell aufmachen und dann muss man irgendwie out, out of box irgendwas eingeben und dann
kann man auch einen lokalen User eingeben.
Aber das ist praktisch, dass das standardmäßig jetzt einfach so geht.
... einen Microsoft Account einloggen zu müssen.
Ja, und das ist dann einfach ein komplett normales Windows, nur halt ohne diesen ganzen
Kram.
Und ich finde, es ist auch wirklich genau das Zeug, auf das sehr viele Leute verzichten
können, nicht eingeschlossen.
Braucht keines auch.
Mittlerweile ist eigentlich immer noch Clash of Clans und so ein Blödsinn mit vorinstalliert.
Wenn man doch was haben will von den weggelassenen Sachen, dann kann man die einfach über den
Windows Store nachinstallieren.
Bei meinem Test hat das wirklich alles problemlos funktioniert, das Einzige war, Windows scheint
die interne Suchfunktion hart mit dem Edge-Browser verdrahtet zu haben.
Das macht nix.
Also auch als ich...
Das macht gar nix.
Die Windows Suchfunktion ist eh unbenutzbar, eh kompletter Schrott.
Einfach Windows Suchfunktion ignorieren, dass die da ist.
Mir ist es unverständlich, wie es Microsoft seit Jahren so verkacken kann, diese Suchfunktion
einfach mal ordentlich zu machen.
Keine Ahnung, aber einfach keine Suchfunktion finden.
Benutzen.
Einfach weg damit.
Braucht man eh nicht.
Man kann quasi zur Suchfunktion sagen...
Piss dich, Aldo!
... und ignorieren.
Für immer.
... im Store Firefox als Standardbrowser.
... ging Internet-Suchanfragen über die Windows-Suchleiste hier unten immer ins Leere.
Aber ehrlich gesagt benutze ich die Funktion sowieso nie, deswegen...
Womit ich suche?
Ich hab den Search-Index ausgeschaltet, dann durchsucht es halt jedes Mal die Festplatte.
Oder, ich bin da oldschool, ich suche Dateien auch manchmal unter Windows mit grepp.
Also, Inhalte.
Ist zwar vielleicht nicht die schnellste Variante, aber es funktioniert.
Und ansonsten mache ich ja unter Windows nichts großartig kompliziertes.
Da weiß ich, wo die Sachen sind, ja.
Ich benutze Windows als Haussystem für ein bisschen Videokrams hier und meine Gaming-Geschichte.
Die komplizierten Sachen, die habe ich alle unter Linux und da ist es eh kein Problem.
... auch bei Tiny Eleven mal alle Updates installiert, die mir...
Ey, Leute, Clippy ist Mist.
Das Beste war Windows XP, der Wizard.
Der Windows-XP-Wizard, den gibt's auch nicht mehr.
Standardmäßig gab's diesen Hund unter Windows XP.
Der da, genau.
Ich bleib dabei, change my mind, Leute.
Windows XP war das letzte Windows, was wirklich konsistent war.
Von allem, ja.
Vom generellen Styling, von den Icons, von der Aufmachung her.
Danach wurde es einfach nur noch Wildwuchs.
Und sogar Windows 7 war...
War zwar noch einheitlicher, war aber auch Wildwuchs.
... angeboten worden sind, ein bisschen mit dem System gearbeitet
und dann mal geguckt, wie viel Platz das einnimmt.
Ungefähr 43 Gigabyte.
Das sind ungefähr 7 Gigabyte weniger als bei einem...
Das ist halt echt...
Das ist aber halt echt heftig.
Was schiebt denn da Microsoft ruf?
43 Gig.
... unmodifizierten Windows.
Also, wenn es euch wirklich nur um das Entfernen von Bloatware geht
und ihr bei der Installation nicht immer gezwungen werden wollt,
euch in ein Microsoft-Konto einzuloggen,
dafür ist Tiny Eleven durchaus geeignet.
Und es macht auch sehr wenig Sinn.
Und es macht auch sehr wenig kaputt.
Windows 11 hat noch die Systemsteuer von Windows XP.
Ja, nicht nur das.
Mein Lieblingsbeispiel ist immer folgendes, was ich immer gerne zeige.
Dass man sieht, dass Windows mittlerweile
ein kompletter Flickenteppich aus Oldschool und noch Olderschool ist.
Mein Lieblingsbeispiel ist immer das hier.
Straight aus...
Und auch wird später noch besser.
Also generell, dieser Icon-Dialog
und die Icons teilweise, ey.
Da gibt es Icons, die haben ne auf...
Ja, hier.
Die sind aus Windows...
Die sind aus Windows 1 oder so.
Nicht aus Windows 95.
Windows 95 waren die schon besser.
Die sind aus...
Mindestens war 3.11.
Übrigens, warum sollte ich...
Das ist einfach ein Punkt, Mann.
Warum gibt's da nicht mal neue zum Betriebssystem passende Icons?
... ist nicht so gering, dass Tiny Eleven ganz lange funktional bleibt
und nicht durch Updates kaputtgemacht wird.
Es gibt übrigens auch noch ein extrem Tiny Eleven,
da werden noch viel mehr Sachen rausgepatcht...
Moment, das hab ich eben nicht verstanden.
... geeignet und es macht auch sehr wenig...
Microsoft-Konto einzuloggen, dafür ist Tiny Eleven durchaus geeignet
und es macht auch sehr wenig kaputt.
Das heißt, die Wahrscheinlichkeit ist nicht so gering,
dass Tiny Eleven ganz lange funktional bleibt
und nicht durch Updates kaputtgemacht wird.
Es gibt übrigens auch noch ein extrem Tiny Eleven,
da werden noch viel mehr Sachen rausgepatcht.
Das heißt, Tiny Eleven Core,
da sagen die Macher aber selbst,
Core ist kein hundertprozentiger Windows-Ersatz,
sondern eine experimentelle Software,
zum Beispiel für platzsparende Windows-VMs.
Hier seht ihr mal die Größen der ISOs,
nachdem die Tiny Eleven-Skripte rübergelaufen sind.
6,6 GB ist das Original-ISO von Microsoft groß,
dann hier das normale Tiny Eleven mit 4,5 GB
und hier Tiny Eleven Core mit 2,8 GB.
Sagt ihr mal, was für Ultra-Kompressionsraten
haben die bei Microsoft eigentlich?
Wenn das normale ISO 6,6 GB ist
und auf der Platte kommt 43 GB an,
dann muss doch random Shit generiert werden
während der Installation.
Das kann doch gar nicht alles im ISO sein.
Dann muss random Shit auf die Platte geschrieben werden,
dass das auf 43 GB kommt.
Mit 4,5 GB.
Oder es muss online runtergeladen werden.
Und mit 2,8 GB.
So, falls ihr den ct- bzw. heise-plus-Artikel
über die Schrumpf-Windows gesehen habt,
und euch wundert,
hä, da wird doch ausdrücklich von Tiny Eleven gewarnt.
Ja, das kann ich euch erklären.
Als der Artikel recherchiert wurde,
gab es Tiny Eleven noch nicht als Builder-Skript,
sondern nur als fertige ISO-Datei,
die man sich von Archive.org runterladen musste.
Ja, da hätte ich auch meine Bedenken gehabt.
Da haben die Kollegen natürlich zu Recht gesagt,
macht das nicht, das ist unsicher,
weil man nicht weiß, was da drin ist.
Das ist ja eine Grundregel.
Das ist auch eines meiner Vorbehalte dagegen gewesen.
Habe ich übrigens am Anfang, bevor wir das Video geguckt haben,
gesagt, da bin ich skeptisch bei sowas.
Triebsystem-ISOs nur bei
vertrauenswürdigen Quellen unterladen.
Archive.org ist zwar generell
keine nicht vertrauenswürdige Quelle,
aber es können halt alle ihr Zeug
auf Archive zum Runterladen anbieten.
Aber mit diesem neuen Builder-Skript,
das Open Source ist, kann man ja genau sehen,
was da gemacht wird, und als Basis wird ja
ein von Microsoft heruntergeladenes,
hochoffizielles ISO verwendet.
Also ich sag mal, kann man auf jeden Fall machen,
wenn auch halt immer das Risiko besteht,
dass durch künftige Windows-Updates irgendwas kaputt geht.
Im ersten Testlauf ging alles problemlos durch,
es kamen da Dutzende Updates an,
und die liefen alle durch.
Schrumpf-Windows Nummer 2, Atlas.
So, jetzt aber zu Atlas, und das ändert
und löscht deutlich mehr als Tiny Eleven.
Fährt man dieses Playbook ab, werden
erst mal etliche Fragen gestellt.
Ob man zum Beispiel den Defender eingeschaltet haben will,
was man unbedingt bejahen sollte,
also zumindest wenn der Rechner am Netz hängt,
ganz ohne Malware-Schutz ist halt doof.
Nach der Installation und allen Updates
waren hier auf der SSD nur noch
29 Gigabyte, also
40 Prozent weniger als beim Standard-Windows.
Ich mein aber mal seriously,
die Größe der Installation
ist doch eigentlich zweitrangig, oder?
Ob das Ding jetzt
29 Gig, 43 Gig
oder 55 Gig groß ist,
macht doch keinen großen Unterschied.
Viel wichtiger ist die,
nennen wir es mal die Runtime-Performance,
ob man davon irgendwas merkt,
und der Nervfaktor,
ob der weniger wird.
... wird Windows in den Dunkelmodus geschaltet
und es gibt ein neues Hintergrundbild,
wo man sieht, das ist hier kein normales Windows,
nee, nee, nee, nee, das ist Atlas.
Auf dem Desktop liegt hier auch so eine Verknüpfung zu
kein normales Windows, nee, nee, nee, nee.
Da haben sie aber mit irgendeiner schlechten
Word-Art irgendwas gebaut.
Nee, das ist Atlas. Auf dem Desktop liegt hier
auch so eine Verknüpfung zu einem Ordner namens
Atlas, da kann man dann noch etliche Sachen
einstellen, also extrem viel sogar.
Zum Beispiel das Boot-Logo ausstellen
oder eben die Windows-Updates.
Gibt da auch Links auf recht lesenswerte
Anleitungen auf der Atlas-Website,
was auch ziemlich hübsch ist.
Im Ordner Software gibt es so ein Skript,
mit dem man sich eine Grundausstattung an Tools
zusammenkriegt und dann in einen Rutsch durch den
Windows-eigenen Paketmanager Winged installieren lassen kann.
In puncto Sicherheit hinterlassen
die Atlas-Vorgaben so eher
so ein gemischtes Bild.
Der Defender ist zwar aktiv und die Einstellungsseite
lässt sich auch aufrufen,
warum ich das jetzt so betone, seht ihr gleich.
Aber alle Defender-Bestandteile,
die Daten an Microsoft übermitteln könnten,
die sind ausgeschaltet.
Cloud-gestützte Analysen gibt es damit überhaupt nicht.
Automatische Windows-Updates sind aktiviert
und funktionieren auch.
Die Ausführungsrichtlinie der PowerShell ist auf
Unrestricted gelockert.
Das wahrscheinlich größte Sicherheitsproblem ist
der Regler der Benutzerkontensteuerung, UAC.
Also UAC wurde um eine Stufe
nach unten geschoben,
sodass der Bildschirm während UAC-Abfragen
nicht mehr abgedunkelt wird.
Die Liste der installierten Apps im Startmenü
hat sich wirklich mehrfach verringert.
Was genau Atlas entfernt, ist hier zu sehen.
Das ist aus der FAQ auf der Atlas-Website.
Und ein Blick in den Task-Manager
zeigt, dass auch die Anzahl der im Hintergrund
laufenden Prozesse deutlich geschrumpft ist.
In unserer Stichprobe von
rund 130 auf
69. Das System fühlt sich
auch so wirklich schnell an.
Wenn du damals
Windows XP installiert hast,
hast Prozessexplorer
aufgemacht, dann haben die ganzen
Prozesse easy
auf eine halbe Seite im
Prozessexplorer gepasst. Easy!
Und heute sind es drei Seiten voll,
wo du durchscrollen musst.
Nr. 3 RevyOS
So, RevyOS funktioniert wie gesagt genauso
wie Atlas. Playbook-Datei auf
einem AME-Wizard werfen, fertig.
Kuriosität aber am Rande.
Die Playbook-Datei liegt zwar auf GitHub,
also auf der RevyOS-Projektseite
unter Releases. Die Macher bitten aber
darum, die Datei von einer ziemlich windigen
mit Werbung total vollgestopften
Seite herunterzuladen.
Auf diese Seite wird auch auf der RevyOS-Website
verlinkt. Fand ich ein bisschen cool.
Weil es bei RevyOS ja stark darum geht,
dem Überwachungskapitalismus
zu entfliehen.
Also von Microsoft. Aber dann die Software
auf einer Seite gehostet wird,
die mit aktiviertem uBlock Origin
gar nicht mehr funktioniert.
Bisschen inkonsequent.
Aber naja, zumindest gehen die da transparent mit rum.
Und wenn man die Datei anklickt, dann steht da ja auch
Leute, die Datei gibt es auch auf GitHub.
Hätten sie lieber einen Amazon-Rev-Link
machen sollen, oder?
Also Playbook auf einem AME-Wizard werfen
und los geht's. Auch RevyOS
bracht hier etliche Optionen ab.
Es gibt noch mehr als Atlas.
Und auch RevyOS nimmt am Ende deutlich
weniger Platz auf dem Datenträger ein
als Vanille-Windows.
Und zwar 27 GB statt 50.
Also fast nur noch die Hälfte.
Bei RevyOS geht es aber nicht nur um
weniger Speicherplatz, sondern vor allem
um die Privatsphäre.
Und RevyOS verändert auch das Erscheinungsbild.
Unter anderem mit einem anderen Hintergrund.
Außerdem gibt es dieses
Revision-Tool auf dem Desktop,
mit dem man auch im Nachhinein
etliche Sachen anpassen kann.
Da hat sich ja einer richtig Mühe
gegeben, das UI zu designen
für dieses Tool.
Standardmäßig abgeschaltet sind die
Windows-Updates, was wir nicht sonderlich
sinnvoll finden. Geht man dann auf die
Update-Seite in den Einstellungen, steht da
bis 19. Januar 2083
ausgesetzt. Man kann das sogar so
radikal machen, dass die Update-Seite
gar nicht mehr angezeigt wird.
Naja, also will man wieder Updates haben,
muss man im Revision-Tool Windows-Updates
anhalten auf Ausstellen.
Der Windows Defender war bei unserer Installation
standardmäßig ausgeschaltet.
Was da genau läuft und was nicht, lässt sich
weder nachprüfen noch ändern, denn der Versuch
die Windows-Sicherheit über die Einstellungen
zu öffnen, endet in einem leeren Fenster.
Schaltet man den Defender aber über
das Revision-Tool wieder an, wird das
Sicherheitsfenster in den Einstellungen auch wieder
angezeigt. Die Ausführungsrichtlinie
der PowerShell fasst RevyOS gar nicht
an, ebenso wenig wie die
Benachrichtigungseinstellung der Benutzerkontensteuerung.
Letztere lässt sich aber im Revision-Tool
komplett ohne Warnung mit einem Klick
ausschalten. Auch gefährlich.
Wie Atlas entfernt RevyOS die meisten
in Windows mitgelieferten UVP-Apps.
Das Startmenü enthält da nur noch wenige
Einträge. Beim Aufräumen
der laufenden Dienste und Hintergrundprozesse
ist RevyOS noch ein kleines bisschen
wenig gründlicher als Atlas. Da haben wir
64 Prozesse statt 69
gezählt. Bei der Schwubtizität
haben wir aber keinen Unterschied zu Atlas
festgestellt. Und wahrscheinlich auch keinen
Unterschied zu einem
Basic Windows, das ist ja das Ding.
Der Teil, auf den wir alle
gewartet haben. Benchmarks. Ist das jetzt
wahrscheinlich kein Unterschied.
Die CT-Kollegen haben sehr viele
Benchmarks gemacht mit drei unterschiedlichen
PCs. Ihr könnt hier gerne mal auf Pause drücken
und euch die Tabelle in Ruhe angucken.
Was ich schon mal sehr interessant finde, sind
die Bootzeiten. Die Kollegen
haben hier jeweils dreimal gestoppt,
wie lange es dauert, auf auswählendes
Betriebssystem, bis zum Edge-Browser, bis zum
Media Player und bis zu einem Bilderordner.
Und ja, krasse Story, bei allen dreien
Computern haben Atlas und
RevyOS immer, in Klammern immer,
länger gebraucht als das,
was man in Manila-Windows. Das liegt vermutlich daran,
Ja gut, wahrscheinlich, weil Funktionen ausgeschaltet wurden,
die unter anderem dazu beitragen, dass schneller bootet.
dass die beiden Systeme darauf verzichten, das zuletzt genutzte
Benutzerprofil vor der PIN- oder Passworteingabe
im Hintergrund vorab zu laden.
Außerdem ist aber der Caching-Dienst
SuperFetch abgeschaltet. Ja, genau sowas.
Da kann man hier sehen, SysMain in der
Dienstleistung der Computerverwaltung. Und
RevyOS zum Beispiel sagt in dem Revision-Tool,
dass man das nur braucht, wenn man Windows auf
einer Magnetfestplatte laufen hat. Wir haben
es aber auf drei Rechnern mit SSD
ausprobiert und ihr seht ja an den
Magnetfestplatten, dass das dadurch
langsamer wird, wenn man das ausschaltet.
Ist das schlau? Hm, ja.
Tiny11 bei Linux ist
ein bis drei Sekunden schneller als das
normale Windows. Bei den Performance-
Benchmarks dagegen kann man tatsächlich bei
RevyOS und Atlas Vorteile erkennen.
Allerdings auch nicht wahnsinnig krasse.
Also bei PCMark, der
versucht so Alltags-PC aber
zu quantifizieren. Ja, also
mal ganz ehrlich,
so wirkliche große Unerschieden
ist da jetzt nicht. Ja, okay,
ein bisschen vielleicht, aber naja.
Der größte Unterschied
zum Beispiel zwischen normal Windows und RevyOS
maximal 5% bei
PCMark. In Spielen, wo wir darauf geachtet
haben, vor allem ans CPU-Limit zu
gehen, haben wir maximal 9% Verbesserung
gesehen. War das auch nur bei einem Messwert,
nämlich beim CPU-Renderer bei
Tomb Raider. In der Praxis sind aber
moderne Spiele nicht CPU-limitiert,
sondern da ist die Grafikkarte der Flaschen
heiß und hier sind dann die Vorteile auch nochmal
deutlich kleiner oder gar nicht vorhanden.
Lohnt sich nicht, sehe ich auch so. Vor allem sollte man gucken, wie diese Geschwindigkeit
Verbesserung hergestellt werden, nämlich
durch Abschalten des Defenders und dem Abschalten
der Spectral Meltdown Mitigations.
Das waren ja so CPU-
Sicherheitslücken, wo mit diesen Mitigations
das Ausnutzen dieser Sicherheitslücken
verhindert wird. Und sowas wie der
Kernisolierung bei Windows. Und das sind alles
Sachen, die halt wirklich ihre Daseinsberechtigung
haben. Also, die machen Windows
schon wirklich sicherer. Die Frage ist, lohnt
sich das wirklich für die paar Prozent
Geschwindigkeitsgewinn, und das halt auch nur bei Sachen,
die von der CPU limitiert werden,
auf Sicherheit zu verzichten? Also,
mein Fazit, ich kann das total verstehen,
wenn Leute ihr Windows von Blast-Software
befreien wollen und das
Datensendeverhalten verbessern wollen. Einfach, Leute,
einfach Arch-Linux
by the way benutzen wollen. Nur ist es halt
problematisch, wenn sicherheitsrelevante
Dinge ausgeschaltet werden. Und gerade
Windows-Updates zum Beispiel sind ja wichtig,
um Sicherheitslücken zu stopfen.
Also dafür, dass man Microsoft weniger Daten
gibt, ist man gegen alles andere, was
nicht Microsoft ist, schlechter geschützt.
Ja, also das sind zum Teil wirklich problematische
Eingriffe ins System.
Und wir haben ja auch gesehen, dass zum Beispiel
das Booten langsamer machen. Warum will man
das? Ja gut, aber klar, wer total Bock drauf
hat, alles Mögliche selbst einzustellen,
dafür sind Atlas und Ravios natürlich
gut geeignet. Aber generell sage nicht
nur ich, sondern auch meine CT-Kollegen,
die Geschwindigkeitsgewinne lohnen
sich gegenüber den Sicherheitsabstrichen
nicht. Und ihr habt halt auch auf jeden Fall
das Risiko, dass euer System irgendwann nicht mehr
funktioniert, wenn irgendwelche Updates kommen,
weil da dann irgendwas inkompatibel geworden
ist. Fühle ich mich wieder bestätigt drin,
also was einfach zu ignorieren.
Wenn ihr Microsoft zu nervt und ihr denen keine
Daten geben wollt, dann installiert doch lieber
Linux. Da laufen ja inzwischen auch mindestens
90% aller Spiele drauf.
Und das auch gut. Tiny Eleven dagegen,
ja, das kann man durchaus machen.
Weil das Skript, was die offizielle Microsoft
ISO Patch ist, ist auch nur ungefähr 400
Zeilen lang. Man muss auch kein super
IT-Experte sein, um das selbst
verstehen zu können, was da genau passiert.
Ich finde deswegen Tiny Eleven wirklich ganz
cool, weil das halt genau den Kram aus Windows
rausbaut, der mich nervt.
Und auch die Installation wird echt
einfach, wenn man da kein Abo-Kram
mehr angezeigt bekommt und auch keinen
Microsoft-Account-Zwang mehr hat.
Und die Wahrscheinlichkeit, dass ein Tiny Eleven
Windows durch Updates kaputt geht,
ist auf jeden Fall geringer als gerade.
Ich glaube nicht, dass die stabiler und problemloser
laufen.
Ob die machen noch mehr Probleme?
Wie seht ihr das? Seht ihr das auch so?
Ja, klingt sinnig.
Super, benutzt ihr das schon? Habt ihr da gute
Erfahrungen mitgemacht? Gerne in die Kommentare
schreiben.
Klingt sinnvoll.
Chat.
Jetzt
geh ich was essen.
Nudel mit Lachs.
Was sonst?
Gucken, was der Pepo da heute dazu sagt.
Ob der auch Nudeln mit Lachs...
Nee, der sitzt an seinem Birnencomputer.
Wir hören uns. Bis denn, Leute.
Macht's gut. See you.
