WEBVTT

01:09.420 --> 03:22.860
ist ja eigentlich dass ich die letzten die letzte woche ja doch die letzte woche habe

03:22.860 --> 03:30.550
ich 600 euro tierarzt rechnung ausgegeben aber ich will ja dass es gut geht aber das

03:30.550 --> 03:38.230
ist schon echt ordentlich wenn man hier ist nicht so wild ja die kohle muss irgendwo hin

03:38.230 --> 03:42.550
aber schon ganz schön heftig wenn man sich überlegt wie macht man das wenn man jetzt

03:42.550 --> 03:50.230
nicht so viel geld zum fenster rausschmeißen kann wenn es war nicht so fenster raus geschmeißt war

03:50.230 --> 03:57.820
für die katze zu sagen aber 600 euro tierarzt kostet schon krass ich war ich habe einmal

03:57.820 --> 04:09.160
einmal habe ich das will keine neue katze einmal waren die hier haben sich chico angeguckt dann

04:09.160 --> 04:12.460
war ich beim augenarzt mit chico moment die musik ist zu laut

04:12.640 --> 04:33.050
dann war ich dann war ich beim augenarzt mit chico also also das ding war ich habe letzte

04:33.050 --> 04:37.670
woche hat chico hier auf dem schrank war nicht vor allem an letzte woche hat chico letztes letzte

04:37.670 --> 04:41.030
wochenende hat chico hier auf dem schrank gehockt dann hat so ein bisschen habe ich gesehen jetzt

04:41.030 --> 04:46.190
ein bisschen blut im auge gehabt denkt man sich ja erst mal nichts großartiges dabei man kann

04:46.190 --> 04:51.470
sich gekratzt haben oder irgendwie sonst was also und rechts bisschen blut im auge aber nachdem

04:51.470 --> 04:56.130
chico ja bekanntermaßen bisschen nierenprobleme hatten auch nur diätfutter und alles

04:56.150 --> 05:03.350
kriegt chico ist ja 13 mittlerweile schon ist jetzt zwar kein alter wirklich für katzen aber

05:03.350 --> 05:08.390
schon alt also sind alte können durchaus älter werden aber auf jeden fall schon schon oma ja

05:08.390 --> 05:17.630
und zumindest dann habe ich im internet geguckt dass gerade katzen mit nierenerkrankungen oftmals

05:17.630 --> 05:26.030
auch unser bluthochdruck leiden und bluthochdruck bei katzen sehr oft auf das auge geht und dass das

05:26.150 --> 05:32.570
auge blutet und manchmal löst sich auch tatsächlich die netzhaut aus richtig krass zumindest habe ich

05:32.570 --> 05:41.300
dann war ich beim tierarzt wo wir sonst hingehen und habe gesagt hier katzen blut im auge und

05:41.300 --> 05:45.240
blutdruck messen haben die irgendwie gesagt doch nur wir können gar keinen blutdruck messen fand

05:45.240 --> 05:49.460
ich schon sehr pepega dass sie das so alles überhaupt nicht interessiert hat habe ich mir

05:49.460 --> 05:55.160
gesagt so gut dann neuen tierarzt suchen habe ich mir neuen tierarzt gesucht und die sind tatsächlich

05:58.040 --> 06:04.840
alle schon da und das ist ja schon bei mir so an erster anstelle das blutdruck messen ist am besten

06:04.840 --> 06:12.740
wenn die katz halt entspannt ist leider war chico sehr unkooperativ was blutdruck messen angeht da

06:12.740 --> 06:17.040
mussten sie die erst mal in ihr auto hocken und dann haben sie da gemessen und chico hat halt

06:17.040 --> 06:22.460
richtig krass hohen blutdruck schickte hat er schickte hat über 250 blutdruck normalerweise

06:22.460 --> 06:27.060
ist 150 gerade so noch okay schickte super krass hohen blutdruck jetzt kriegt chico zusätzlich zu ihren schilddrüsen und Nierenmedikamenten

06:28.960 --> 06:31.020
noch Blutdrucksenkende Mittel.

06:33.650 --> 06:37.790
Und für das Blut im Auge war ich mit der Katze beim Augenarzt.

06:37.890 --> 06:40.670
Ja, es gibt Augenärzte für Katzen.

06:41.690 --> 06:43.370
Die hat das Auge untersucht und hat gemeint,

06:43.430 --> 06:45.230
oh ja, also da ist schon ein bisschen blutig

06:45.230 --> 06:47.690
und hat auch nochmal Blutdruck gemessen, war auch wieder viel zu hoch.

06:49.130 --> 06:51.650
Und jetzt muss sie noch ein paar Kortison-Tabletten schlucken,

06:51.650 --> 06:53.690
dass das alles wieder schön abschwillt im Auge

06:53.690 --> 06:56.070
und die Netzhaut auf jeden Fall dran bleibt und sie nicht blind wird.

06:57.870 --> 06:59.690
Und jetzt kriegt die halt Blutdrucksenkende Mittel.

07:00.270 --> 07:02.650
Und morgen gehe ich schon wieder zum Tierarzt.

07:05.210 --> 07:07.650
Und Mittwoch wieder zum Augenarzt.

07:10.910 --> 07:13.070
Also ich habe wahrscheinlich innerhalb von 14 Tagen

07:13.070 --> 07:15.190
bin ich 1000 Euro los, was Tierarzt angeht.

07:17.540 --> 07:18.080
Keck-Weight.

07:22.880 --> 07:23.860
Wie alt ist die? Die ist 13.

07:23.860 --> 07:25.620
Die ist schon älter.

07:26.080 --> 07:28.180
Da haben die ja öfters mal die ein oder anderen Probleme.

07:28.220 --> 07:29.440
Oh nee, C++, geh mal weg.

07:29.560 --> 07:31.760
Ich mach, ich mach, don't save, ich mach weg.

07:35.490 --> 07:36.790
Gibt es eine Krankenversicherung?

07:37.290 --> 07:37.870
Ey, keine.

07:37.890 --> 07:42.450
Keine Ahnung, ob es das gibt, aber wenn, ist es wahrscheinlich so unsinnig teuer.

07:48.590 --> 07:50.250
Ich bezahle das selbst.

07:51.270 --> 07:52.370
Irgendwo muss die Kohle ja hin.

07:53.030 --> 07:57.090
Also ich hoffe, dass am, also das ist morgen, wenn Blutdruck gemessen wird,

07:57.210 --> 08:00.310
dass, also wir waren ja da nochmal letzte Woche Blutdruck messen, Blutdruck messen

08:00.310 --> 08:10.400
und zwar am, am Freitag, da war er schon runter, ein bisschen, aber noch nicht genug.

08:11.540 --> 08:14.820
Aber das dauert immer ein bisschen, bis das Blutdruckmedikament bei der Katze im Blut ist.

08:14.820 --> 08:15.900
Bei Menschen übrigens nicht anders.

08:16.240 --> 08:17.500
Bis das alles ordentlich wirkt.

08:19.080 --> 08:20.820
Chico bewegt sich auch viel zu wenig, ja.

08:21.540 --> 08:22.620
Chico hängt immer nur rum.

08:23.980 --> 08:26.340
Und ich hoffe, der Blutdruck ist da noch ein bisschen runtergegangen

08:26.340 --> 08:30.260
und beim Augenrat stellen sie fest, dass alles wieder, alles wieder soweit okay ist.

08:30.540 --> 08:33.320
Und, weil, ganz ehrlich, die Katze kriegt halt sehr viele Medikamente

08:33.320 --> 08:35.220
und die Katze hat keinen Bock da drauf, die zu nehmen.

08:43.310 --> 08:45.970
Ja, du hast aber sicherlich nicht einmal 80 Euro bezahlt, oder?

08:46.810 --> 08:47.670
Ist er Freigänger?

08:47.870 --> 08:49.890
Nee, es ist eine Sie, auch wenn sie Chico heißt.

08:49.890 --> 08:52.750
Das ergibt keinen Sinn, aber was weiß ich, was die Vorbesitzer sich dabei geben.

08:52.770 --> 08:56.080
Ich weiß nicht, ob sie das gedacht haben.

08:56.080 --> 08:58.080
Kann man aber wahrscheinlich auch nur für die junge, für eine junge Katze abschließen,

08:58.080 --> 09:00.080
wenn du das für eine 13-jährige Katze abschließt.

09:00.080 --> 09:04.080
Da wollen die fast Versicht dafür haben, Alter.

09:04.080 --> 09:08.080
Das ist so, wie wenn du mit 70 sagst, ich möchte eine Krankenversicherung abschließen.

09:08.080 --> 09:10.080
Nee, ist sie nicht.

09:10.080 --> 09:15.080
Das einzige, was Chico kann, ist, die kann hier auf die Terrasse, aber die Terrasse hat so ein Netz drumherum.

09:15.080 --> 09:22.300
Ich bin ganz schön kaputt heute.

09:22.300 --> 09:31.150
Gestern Abend, ähm, ja, wie gesagt, ich bin ganz schön kaputt, gestern Abend Fahrrad gefahren.

09:31.150 --> 09:31.770
Ich bin ganz schön kaputt, gestern Abend Fahrrad gefahren.

09:31.770 --> 09:33.030
45 Minuten volle Pulle.

09:33.030 --> 09:37.850
Heute Morgen, zehn Kilometer gerannt, ich merke es echt in den Beinen.

09:37.850 --> 09:39.770
Es reicht erst, morgen mache ich nix.

09:39.770 --> 09:42.830
Morgen mache ich gar nix.

09:42.830 --> 09:47.270
Reicht echt ...

09:47.270 --> 09:48.770
Ich merke es auch voll im Schienbein.

09:48.770 --> 09:54.090
Du warst heute Morgen nicht da, gell.

09:54.090 --> 09:57.090
Heute Morgen hat mich die Waage übelst jebaitet.

09:57.090 --> 10:02.230
Ich bin, ich bin rüber gegangen, hab mich auf die Waage gestellt, hatte noch Socken und Unterhose an.

10:02.230 --> 10:04.230
Da hat die Waage 90 Kilo angeosaurs.

10:04.230 --> 10:06.170
gezeigt. Dann bin ich

10:06.170 --> 10:07.930
weg, hab das Handy geholt, zum

10:07.930 --> 10:10.450
Fotografieren, hab Socken und Unterhose ausgezogen

10:10.450 --> 10:11.410
und hab 90,2.

10:11.810 --> 10:12.710
90,3.

10:13.610 --> 10:15.930
Das heißt, ich hatte weniger an, hab mehr gewogen. Null.

10:16.950 --> 10:18.010
War nix. Es war

10:18.010 --> 10:20.130
ganz knapp. Es war ganz knapp über

10:20.130 --> 10:29.760
90. Das heißt, noch ein paar

10:29.760 --> 10:31.840
Wochen, also bis Ende des Jahres

10:31.840 --> 10:33.760
sollte ich dieses Mal unter 90

10:33.760 --> 10:35.540
auf jeden Fall schaffen, wenn das so weiter geht.

10:44.020 --> 10:44.740
Ja, wird's ja auch.

10:45.460 --> 10:47.260
Zwar nicht so krass wie zu

10:47.260 --> 10:49.160
Corona-Zeiten, wo ich

10:49.160 --> 10:50.200
angefangen hab mit allem.

10:51.920 --> 10:52.080
Ja.

10:52.880 --> 10:55.140
Man darf nicht vergessen, dass wenn man

10:55.140 --> 10:56.480
sich ordentlich bewegt,

10:57.100 --> 10:58.480
man kriegt ja auch Muskel.

10:58.980 --> 11:01.100
Man tradet ja, sag mal, man tradet

11:01.100 --> 11:03.120
ja auch ein bisschen Speck gegen Muskel.

11:03.980 --> 11:05.220
Ja, kenn ich. Hab ich aber noch

11:05.220 --> 11:06.480
nie großartig was mitgemacht.

11:13.850 --> 11:14.990
Excellent. So.

11:14.990 --> 11:18.480
Dann. Erstmal

11:18.480 --> 11:20.600
Finger aufwärmen. Für krasse

11:20.600 --> 11:21.420
Progress-Action.

11:26.410 --> 11:27.950
So. Finger aufgewärmt.

11:28.510 --> 11:29.090
Auf geht's.

11:30.970 --> 11:32.970
Ich zeige euch mal, für alle, die nicht

11:32.970 --> 11:34.910
dabei waren, war jemand beim letzten Rust-Stream

11:34.910 --> 11:36.910
dabei und hat mir

11:36.910 --> 11:38.490
zugeguckt, wie ich nix gecheckt hab.

11:40.690 --> 11:41.170
Ähm.

11:42.590 --> 11:43.130
Ich zeige euch

11:43.130 --> 11:45.090
kurz, was Sache ist und

11:45.090 --> 11:47.090
heute wird's nicht so super

11:47.090 --> 11:49.150
kompliziert, weil erstens bin ich ziemlich kaputt

11:49.150 --> 11:51.190
und hab wahrscheinlich auch jetzt 19 Uhr

11:51.190 --> 11:52.990
nicht mehr die größten

11:52.990 --> 11:54.650
Brain-Resources übrig.

11:58.630 --> 11:59.950
Heute versuchen wir das mal ein bisschen

11:59.950 --> 12:02.090
aufzuräumen. Dazu

12:02.090 --> 12:03.530
braucht man aber auch Rust.

12:04.010 --> 12:06.490
Spezialitäten.

12:08.490 --> 12:09.970
Und dementsprechend

12:09.970 --> 12:14.110
schauen wir mal.

12:14.890 --> 12:16.750
So. Also. Hab ich denn jetzt, hab ich jetzt

12:16.750 --> 12:18.730
Package-Updates gemacht. Arch-Linux

12:18.730 --> 12:20.290
by the way, falls jemand Fragen hat.

12:20.570 --> 12:22.410
Schon wieder Package-Updates. Meine Güte.

12:23.230 --> 12:24.930
Hast du mal zwei Minuten keine Package-Updates

12:24.930 --> 12:26.090
gemacht? Ja.

12:26.970 --> 12:29.070
Arch use ich, by the way.

12:29.750 --> 12:30.990
Packages. 171.

12:31.190 --> 12:33.190
Ich weiß wahrscheinlich von gerade mal

12:33.190 --> 12:34.950
20 oder so, dass ich die

12:34.950 --> 12:36.370
wirklich wissentlich jetzt zerlegt hab.

12:36.730 --> 12:41.050
Übrigens, Leute. Jetzt wo ich

12:41.050 --> 12:42.470
TTF-Trimojis sehe.

12:43.130 --> 12:45.010
Pock. Pass mal auf. Wisst ihr, was ich gesehen hab?

12:45.350 --> 12:47.330
Es gibt bald eine neue Trimoji-Version

12:47.330 --> 12:49.190
auf Github. Endlich

12:49.190 --> 12:50.390
neue, endlich neue

12:50.390 --> 12:52.770
Unicode 15 Emojis.

12:53.810 --> 12:55.010
Trimoji Github.

12:55.630 --> 12:56.610
Und zwar Discord

12:56.610 --> 12:58.790
macht Giga-Chat-Move.

13:03.580 --> 13:03.860
Ja.

13:05.720 --> 13:07.460
Discord macht Giga-Chat-Move

13:07.460 --> 13:11.460
und addet

13:11.460 --> 13:13.300
den Großteil der fehlenden Unicode

13:13.300 --> 13:14.380
15 Emojis.

13:15.280 --> 13:17.180
Steven from Discord

13:17.180 --> 13:18.620
ist am Start.

13:19.620 --> 13:20.980
Steven from Discord

13:20.980 --> 13:23.940
und sagt, ihr Inhouse-Artist

13:23.940 --> 13:25.000
der Kevin

13:25.000 --> 13:26.200
VKudam

13:26.200 --> 13:28.820
geiler Name

13:28.820 --> 13:30.880
VKudam

13:30.880 --> 13:33.720
hat Emojis

13:33.720 --> 13:35.660
open sourced für Trimoji.

13:36.380 --> 13:37.480
Also, wer sich fragt,

13:37.520 --> 13:38.840
was das Problem ist eigentlich.

13:39.260 --> 13:41.720
Das Ding ist, Trimoji ist eigentlich

13:41.720 --> 13:43.180
der Twitter-Emoji-Fond.

13:43.180 --> 13:45.180
Das Dumme ist nur, seit Elon Musk

13:45.280 --> 13:46.840
von Twitter übernommen hat,

13:48.180 --> 13:50.320
wurde jegliches

13:50.320 --> 13:52.900
Open Sourcing

13:52.900 --> 13:55.400
von ihrem Emoji-Fond eingestellt.

13:56.080 --> 13:57.380
Und dementsprechend können

13:57.380 --> 13:59.440
die neuesten Emojis nicht einfach kopiert

13:59.440 --> 14:01.320
werden von Twitter, weil die halt copyrighted

14:01.320 --> 14:02.820
sind bei Twitter oder bei X.

14:03.820 --> 14:05.340
Dementsprechend haben das Leute

14:05.340 --> 14:07.300
das gewonnen. Witzigerweise, der Fork

14:07.300 --> 14:08.340
auf Github

14:08.340 --> 14:11.460
ist von alten Github, äh nicht Github,

14:11.460 --> 14:13.600
der Fork auf Github

14:13.600 --> 14:15.080
von Trimoji ist von

14:15.280 --> 14:17.280
alten Twitter-Mitarbeitern,

14:17.280 --> 14:19.280
die rausgeschmissen wurden von Twitter

14:19.280 --> 14:21.280
und sich damals um den

14:21.280 --> 14:23.280
Emoji-Fond gekümmert haben.

14:23.280 --> 14:25.280
So, und die Discord-Leute

14:25.280 --> 14:27.280
haben neue Emojis beigesteuert.

14:27.280 --> 14:29.280
Das sind nahezu, ich glaube, das sind jetzt nahezu alle

14:29.280 --> 14:31.280
Unicode 15 Emojis.

14:31.280 --> 14:33.280
Das heißt, sie müssen jetzt nur noch einen neuen Fond bauen.

14:33.280 --> 14:37.550
Das Merchen und neuen Fond bauen.

14:37.550 --> 14:39.550
Und dann gibt es endlich

14:39.550 --> 14:41.550
eine neue Version von Trimoji,

14:41.550 --> 14:43.550
die Unicode

14:43.550 --> 14:45.550
15 kompatibel ist. Wie sieht's eigentlich

14:45.550 --> 14:47.490
mit Unicode 16 aus? Nur mal so.

14:47.490 --> 14:49.490
...

14:49.490 --> 14:54.780
...

14:54.780 --> 14:56.780
Okay, kommt September 2024 raus?

14:56.780 --> 15:00.930
Aha, es gibt neue,

15:00.930 --> 15:02.930
guck mal, Unicode 2024 gibt's

15:02.930 --> 15:04.930
neue, gibt's neue Emojis,

15:04.930 --> 15:06.930
gucken wir mal, ob's da schon welche gibt, zum angucken.

15:06.930 --> 15:08.930
Fingerprint Emoji

15:08.930 --> 15:10.930
gibt's noch kein Beispiel für.

15:10.930 --> 15:12.930
Emoji 16, gibt's noch nicht.

15:12.930 --> 15:14.930
Face with Bags

15:14.930 --> 15:16.930
under Eyes gibt's dann.

15:16.930 --> 15:18.930
Aha, alles klar, gibt's auch noch keine Implementierung.

15:18.930 --> 15:20.930
Splatter. Okay.

15:20.930 --> 15:22.930
Leafless Tree.

15:22.930 --> 15:23.710
Harp,

15:25.330 --> 15:26.150
eine Schaufel

15:26.150 --> 15:30.330
und irgendwelche

15:30.330 --> 15:31.350
Veganer-Sachen.

15:32.530 --> 15:34.470
Das hat unbedingt Unicode 16

15:34.470 --> 15:37.780
braucht das. Alles klar.

15:38.400 --> 15:39.960
Da bin ich wirklich froh, dass hier

15:39.960 --> 15:42.120
Discord-Leute den

15:42.120 --> 15:43.520
Giga-Chat-Modus gezündet haben

15:43.520 --> 15:45.800
und neue Emojis

15:45.800 --> 15:47.820
beisteuern. Ich meine, dann heißt das Ding zwar

15:47.820 --> 15:49.820
Twimoji, hat aber nicht die

15:49.820 --> 15:51.880
Emojis von Twitter, wobei Twitter auch nicht mehr

15:51.880 --> 15:53.920
Twitter, sondern X heißt, deswegen ist es eigentlich okay so.

15:54.460 --> 15:56.100
Naja, wie dem auch

15:56.100 --> 15:58.020
sei. Also Chat, weiter geht's.

15:58.600 --> 15:59.920
Hier sind wir stehen geblieben. Ich zeige euch,

15:59.980 --> 16:01.740
wie wir stehen geblieben sind und zwar das Ziel ist,

16:01.960 --> 16:03.640
weil das immer die Frage ist, was machen wir heute.

16:04.080 --> 16:06.120
Das Ziel ist, eine WebRTC-Anwendung

16:06.120 --> 16:07.800
zu bauen mit Low-Level

16:07.800 --> 16:09.180
WebRTC in Rust.

16:10.500 --> 16:11.360
Frontend ist ein bisschen

16:11.360 --> 16:12.520
HTML-JavaScript.

16:13.080 --> 16:15.060
Backend, weil ein bisschen mehr Backend

16:15.060 --> 16:17.020
erforderlich ist, als nur Seite ausliefern,

16:17.100 --> 16:19.520
ist eine .NET-Anwendung und die .NET-Anwendung

16:19.520 --> 16:21.220
macht Interop mit

16:21.220 --> 16:22.120
Rust.

16:23.280 --> 16:25.420
So, und ich zeige euch

16:25.420 --> 16:27.440
das Ganze mal. Wir machen

16:27.440 --> 16:29.700
hier mal Rust auf.

16:30.820 --> 16:31.320
Mal kurz

16:31.320 --> 16:33.540
in die JetBrains-Toolbox

16:33.540 --> 16:35.620
looken, ob

16:35.620 --> 16:37.520
es neue

16:37.520 --> 16:39.500
Versionen von den IDEs

16:39.500 --> 16:42.670
gibt. Massive.

16:43.130 --> 16:45.050
Es gibt neue Versionen von PyCharm und

16:45.050 --> 16:46.470
Golan. Ja.

16:48.050 --> 16:49.090
Brauche ich jetzt ehrlich

16:49.090 --> 16:50.750
gesagt. Ja, komm, wir machen Update.

16:51.750 --> 16:53.230
So, dann müssen

16:53.230 --> 16:54.150
wir Rider starten.

16:55.530 --> 16:56.950
Frontend mit dem Framework.

16:57.050 --> 16:59.330
Oder Plain. In dem Fall Plain,

16:59.470 --> 17:01.050
weil das Frontend irgendwie gerade 30

17:01.050 --> 17:03.190
Zeichen ist. Äh, 30 Zeilen

17:03.190 --> 17:04.770
oder so ist. Da ist nicht viel zu sehen.

17:05.250 --> 17:06.890
Ich zeige dir gleich, wie das aussieht.

17:07.430 --> 17:08.310
Äh, Backend.

17:09.610 --> 17:11.330
Also das ist, das hier ist aktuell

17:11.330 --> 17:13.210
alles, was das Frontend beinhaltet.

17:13.590 --> 17:14.970
Das macht zur Zeit nichts anderes wie

17:14.970 --> 17:17.010
WebRTC-Verbindungsaufbau. Und dann

17:17.010 --> 17:18.170
auf die Webseite schreiben.

17:19.490 --> 17:20.290
Oh, laggy.

17:20.710 --> 17:22.510
Alter, wie das...

17:22.510 --> 17:24.150
What the f...

17:24.150 --> 17:25.810
Das Update...

17:25.810 --> 17:26.330
Alter!

17:27.050 --> 17:28.750
Jetbrains.

17:29.210 --> 17:30.730
Java. Keg-Java.

17:33.120 --> 17:33.960
Was ist da los?

17:36.580 --> 17:38.480
Die brauchen beim Updaten der IDEs einfach mal

17:38.480 --> 17:39.820
alle 8 CPU-Cores.

17:49.500 --> 17:50.360
So gehört sich das.

17:54.120 --> 17:55.700
Ich hab das All-Products-Pack, ja.

18:07.720 --> 18:09.420
Was genau macht das da jetzt? 3 Stunden

18:09.420 --> 18:11.440
beim Updaten der... Oh, es gibt eine neue

18:11.440 --> 18:15.440
C-Line. Interesting.

18:29.470 --> 18:29.650
So.

18:31.030 --> 18:32.050
Update ist gelaufen.

18:32.770 --> 18:34.450
Gut. Also, ich zeige

18:34.450 --> 18:36.250
euch mal, wie das aktuelle aussieht. Das Frontend

18:36.250 --> 18:37.630
ist äußerst unspektakulär.

18:37.850 --> 18:40.110
Da sieht man nicht viel, aber ich zeige es euch

18:40.110 --> 18:40.590
mal trotzdem.

18:41.590 --> 18:42.650
.NET run.

18:44.910 --> 18:46.030
Aktuell sieht das...

18:46.030 --> 18:47.850
Äh, Moment. Moment.

18:48.070 --> 18:49.230
Moment. Es geht ja gerade gar nicht.

18:51.410 --> 18:53.130
Geht ja gerade gar nicht, weil ich gestern

18:53.130 --> 18:55.130
in weiser Voraussicht die Hälfte

18:55.130 --> 18:56.110
auskommentiert habe.

18:57.850 --> 18:59.530
Kegwait. Die wir jetzt wieder einkommentieren

18:59.530 --> 19:09.640
müssen. Wait a minute. Ich glaube,

19:09.700 --> 19:11.520
es ist gerade kaputt. Wir haben doch gestern

19:11.520 --> 19:13.300
noch mit UIDs rumgewurschtelt, oder?

19:18.080 --> 19:18.940
Ja, es ist gar kein

19:18.940 --> 19:21.040
UIN64 mehr. Moment. Das wird jetzt gar nicht...

19:21.040 --> 19:22.240
gar nicht funktionieren. Lull.

19:22.680 --> 19:23.820
Pass mal auf, das crasht jetzt.

19:31.640 --> 19:32.760
Okay. Wir haben das

19:32.760 --> 19:34.780
etwas unfertig hinterlassen gestern.

19:35.260 --> 19:35.860
Das Ganze.

19:38.660 --> 19:40.760
Wir haben so halb... Wir haben so halb aufgehört.

19:41.600 --> 19:42.000
Zwischendrin.

19:43.180 --> 19:44.800
Zumindest, dass das Frontend...

19:45.880 --> 19:46.680
Oh, das müssen wir...

19:46.680 --> 19:48.700
Wir müssen gerade mal kurz eine Sache im Frontend

19:48.700 --> 19:49.820
machen. Das ist mir viel zu hell.

19:50.980 --> 19:52.020
Ähm, Style.

19:53.040 --> 19:54.420
Wie macht man das? Background,

19:54.420 --> 19:54.940
Color.

19:55.920 --> 19:56.420
Und jetzt...

19:56.800 --> 19:58.240
Keine Ahnung.

19:58.960 --> 20:00.080
Cray oder sowas.

20:03.170 --> 20:03.770
Okay, schon besser.

20:08.320 --> 20:10.180
Okay, ja, ja, okay. Ein bisschen...

20:10.180 --> 20:12.400
Nicht ganz so anstrengend.

20:12.660 --> 20:12.780
Okay.

20:14.440 --> 20:16.260
Also das Frontend ist äußerst simpel.

20:17.240 --> 20:18.760
Das ist alles an JavaScript.

20:19.320 --> 20:21.180
Der baut eine WebRTC-Verbindung

20:21.180 --> 20:22.840
auf. Im Detail werdet ihr es

20:22.840 --> 20:24.840
wahrscheinlich gleich sehen. Dann ist das

20:24.840 --> 20:26.100
hier das .NET-Backend.

20:26.520 --> 20:28.980
Moment, das hier ist das .NET-Backend. Da passiert auch nicht viel.

20:29.460 --> 20:30.620
Und das hier ist die Rasteranwendung.

20:30.620 --> 20:32.260
Das ist da, wo wir heutzutage rumbauen werden.

20:32.680 --> 20:39.920
Und ich glaube, ich glaube, Chat, wir müssen das erst mal wieder funktional machen, bevor wir jetzt weitermachen.

20:40.360 --> 20:50.030
Deswegen ich schmeiß diesen Krempel hier mit mit der UID schmeiß ich wieder raus.

20:52.740 --> 20:59.480
Wir machen da wieder ein U64 draus, sodass, sodass er erst mal erst mal kurz machen, dass es wieder funktioniert.

20:59.480 --> 21:05.090
Okay, ja, wozu brauchst du das denn?

21:05.350 --> 21:06.970
Erstens, um bisschen Rust zu lernen.

21:06.970 --> 21:08.890
Und zweitens, weil ich vorhabe, alle meine...

21:08.890 --> 21:12.790
meine Webcams Realtime zu streamen auf der Webseite.

21:20.360 --> 21:22.360
ID, ID kommt hierher.

21:22.360 --> 21:24.940
ID ist einfach 1, jetzt hardcoded, kekwait.

21:25.560 --> 21:30.040
Gucken, ob's, ob's noch, ob's compiled.

21:30.900 --> 21:31.540
Cargo.

21:33.660 --> 21:34.160
Nope.

21:39.080 --> 21:41.540
UID mal wieder rausschmeißen.

21:45.080 --> 21:45.580
1.

21:49.510 --> 21:51.130
Und wo hat er jetzt noch Schmerzen?

21:54.720 --> 21:55.920
Client ID.

21:56.080 --> 21:56.580
Äh?

21:59.270 --> 21:59.770
Pound.

22:00.330 --> 22:00.830
Die.

22:03.350 --> 22:06.330
Wie kommt er da drauf, dass es ein U128 sein soll?

22:07.230 --> 22:08.170
Will er mich jibäden?

22:11.660 --> 22:15.780
Ach so, weil hier oben die Collections noch U128 sind, gell?

22:16.360 --> 22:17.560
Ja, okay, alles klar.

22:18.620 --> 22:19.120
Nice.

22:19.120 --> 22:21.620
Und jetzt, okay, was ist jetzt für ein Problem?

22:21.920 --> 22:22.420
Und?

22:25.660 --> 22:26.740
71.

22:30.880 --> 22:31.580
Pound.

22:32.000 --> 22:34.540
128, ah, U64.

22:35.740 --> 22:37.080
U64.

22:39.660 --> 22:40.080
So.

22:40.080 --> 22:42.520
Ich glaube, wir sollten nirgendswo mal U128 benutzen.

22:42.980 --> 22:48.480
So, und wenn das jetzt funktioniert, dann sollte auch alles wieder klappen und das sollte laufen.

22:49.660 --> 22:53.060
Zwar nicht perfekt, aber laufe ich sein?

22:56.190 --> 22:56.630
Oh Mann!

22:57.050 --> 22:58.650
Alter, ich hab's kaputt gemacht gestern.

22:59.050 --> 23:00.410
Jetzt müssen wir das, jetzt müssen wir...

23:00.410 --> 23:03.850
Jetzt müssen wir das erst mal fixen wieder.

23:13.250 --> 23:14.370
Okay, also.

23:15.010 --> 23:16.210
Na geil, na geil.

23:16.390 --> 23:18.030
Jetzt haben wir es, jetzt haben wir es irgendwie zerstört.

23:18.870 --> 23:19.270
Warum?

23:19.710 --> 23:20.810
Was haben wir hier zerstört?

23:20.950 --> 23:22.310
Was will er eigentlich von mir, Mann?

23:24.010 --> 23:27.230
Ach so, ah, ich weiß warum, weil ich das falsche, falsche returne.

23:28.350 --> 23:32.550
Wir returnen jetzt kein U128 mehr, sondern ein 46.

23:33.450 --> 23:34.570
U in 46.

23:34.770 --> 23:35.410
So, jetzt geht's wieder.

23:39.350 --> 23:39.630
Nice.

23:40.370 --> 23:41.250
Guck, passt wieder.

23:41.710 --> 23:41.930
Also.

23:44.700 --> 23:45.140
Folgendermaßen.

23:46.340 --> 23:46.780
Frontend.

23:47.240 --> 23:48.140
Das, das...

23:48.140 --> 23:48.580
Cray.

23:48.940 --> 23:51.660
Gibt das, gibt das nicht irgendwie Light Cray oder sowas?

23:54.560 --> 23:54.880
Azure.

23:54.880 --> 23:54.960
Azure.

23:56.240 --> 23:56.640
Näh.

23:56.640 --> 24:03.880
Okay, wir können einfach, wir können einfach, äh, wie geht das, RGB?

24:08.390 --> 24:11.770
Hatte, hatte, ich wollte gerade sagen, Visual Studio hat doch da so einen, so einen Selektor irgendwie.

24:12.590 --> 24:13.230
Oh, perfekt.

24:15.670 --> 24:16.310
Nee, schön ist es.

24:16.590 --> 24:16.770
Hä?

24:17.070 --> 24:19.850
Das ist doch, das ist doch im Leben ja die gleiche Farbe, oder?

24:27.180 --> 24:27.360
Hä?

24:28.400 --> 24:28.780
Wo ist das?

24:28.980 --> 24:30.120
Was, Moment, was?

24:33.900 --> 24:34.440
Was zum...

24:35.180 --> 24:37.320
Hat da Visual Studio Code gerade draus gemacht?

24:49.430 --> 24:51.510
Okay, ja, so ist es okay, so lasse ich mir das gefallen.

24:51.910 --> 24:54.710
Also, das Frontend, da werden wir heute übrigens nichts dran machen.

24:54.710 --> 24:58.310
Das ist ganz, äh, es ist wirklich easy, es macht nicht viel.

24:59.010 --> 25:01.450
Es versucht eine WebRTC-Verbindung aufzubauen.

25:02.570 --> 25:08.150
Dazu holt es sich vom Backend die Informationen, was der Server für Codex und alle möglichen Sachen unterstützt.

25:08.970 --> 25:19.150
Dann, ähm, subscribt es zu dem Connection State Event und ändert hier ein bisschen die Farbe und den Text auf der Webseite, wenn sich da was ändert.

25:19.710 --> 25:24.150
Dann schickt es eine Antwort an den Server zurück, was der Browser selbst für Codex unterstützt.

25:24.710 --> 25:27.410
Und, ja, das war's.

25:27.830 --> 25:28.870
Mehr macht das Frontend nicht.

25:29.310 --> 25:33.630
Das Ganze wird quasi mehr oder weniger durch, durch die .NET-Anwendung durchgeschleift.

25:34.670 --> 25:35.590
Das ist alles.

25:35.970 --> 25:37.970
Das ist, das ist alles, was einen hier großartig interessieren muss.

25:38.390 --> 25:43.570
Und das landet dann in der jeweiligen Rust, in der jeweiligen Rust, ähm, Endpunkt.

25:43.890 --> 25:43.970
So.

25:44.870 --> 25:48.430
Rust ist deutlich komplizierter gewesen gestern, als ich mir das vorgestellt hab.

25:48.510 --> 25:51.530
Und zwar, äh, die Main-Funktion brauchen wir nicht.

25:51.870 --> 25:54.130
Und zwar ist das asynchrones Rust.

25:54.130 --> 25:56.330
Das heißt, das läuft mit Tokio.

25:57.150 --> 26:02.070
Und damit Tokio funktioniert, muss man, braucht man eine Tokio Runtime.

26:02.170 --> 26:05.610
Leute, ich hab bis heute nicht gecheckt, was es genau macht und wofür das Ganze gut ist.

26:05.730 --> 26:12.250
Aber, es hat funktioniert, nachdem, nachdem wir gestern sehr viel Try and Error rumgefuddelt haben.

26:15.300 --> 26:17.320
Ja, und jetzt, jetzt funktioniert's.

26:20.970 --> 26:24.810
So, und man sieht hier die, die entsprechenden Sachen, die in C Sharp aufgerufen werden.

26:24.810 --> 26:26.930
Hier wird beispielsweise aufgerufen, Get Offer.

26:27.730 --> 26:28.930
Hier wird aufgerufen.

26:29.310 --> 26:32.730
Äh, ich, wird Create, hier wird, äh, Create Connection aufgerufen.

26:32.870 --> 26:34.010
Hier wird Set Answer aufgerufen.

26:34.470 --> 26:36.570
Wenn man sich das hier in Rust anguckt, sieht man das auch.

26:37.110 --> 26:40.850
Das, das ist, das ist eigentlich das Einzige, hier passiert eigentlich das meiste, ja.

26:41.790 --> 26:44.530
Der erstellt eine neue WebRTC Connection.

26:50.770 --> 26:52.950
Hier, der erstellt eine neue WebRTC Connection.

26:53.030 --> 26:54.050
Warum hab ich hier Tracks?

26:54.230 --> 26:55.210
Das ergibt doch überhaupt keinen Sinn.

27:01.070 --> 27:03.530
Ah, Tracks, weil ich die, ja, okay, ergibt, ergibt doch Sinn.

27:04.890 --> 27:07.490
Also, WebRTC, hier erstelle ich eine WebRTC Connection.

27:08.050 --> 27:10.110
Und, hol mir dann raus.

27:10.210 --> 27:12.050
Was, was der Server für Codecs unterstützt.

27:12.310 --> 27:14.330
Was für Codecs unterstützt werden, stelle ich hier ein.

27:14.370 --> 27:15.990
Es wird genau ein Codec unterstützt.

27:16.090 --> 27:18.930
Und zwar, ähm, H264.

27:20.250 --> 27:22.690
Mit 90.000 Clockrate, das ist alles.

27:25.520 --> 27:27.560
Hier wird die WebRTC Verbindung aufgebaut.

27:27.840 --> 27:31.200
Und hier wird die Sache, die der Browser antwortet, gesetzt.

27:31.460 --> 27:34.960
Ist aber alles nicht so wild, weil heute geht's um syntaktische Rust-Geschichte.

27:35.520 --> 27:37.640
Weniger um die WebRTC Sache an sich.

27:38.600 --> 27:42.060
Denn, was ich mir überlegt hab, ist, das hier ist ja kein schönes Rust.

27:42.180 --> 27:42.560
Hier oben.

27:42.920 --> 27:45.200
Also, schön, schön ist hier vieles nicht dran.

27:45.780 --> 27:49.520
Beispielsweise diese ganzen Calls mit GetUnwrap, ReadUnwrap.

27:49.860 --> 27:51.420
Das sieht schon abartig aus.

27:57.600 --> 27:58.640
Was willst du da absichern?

27:59.060 --> 28:06.800
Es macht keinen Sinn, die abzusichern, weil es, es darf durchaus crashen, wenn, also, wenn das hier nicht funktioniert, was soll er machen?

28:06.900 --> 28:09.040
Dann darf er, dann muss er ja crashen, im Endeffekt.

28:10.620 --> 28:11.220
Ach so, gut.

28:11.460 --> 28:12.740
Ja, doch, du hast insofern recht.

28:13.640 --> 28:14.220
Stimmt schon.

28:14.640 --> 28:17.340
Man könnte gucken, wenn es aus irgendwelchen Gründen nicht klappt, dass das Main-Programm,

28:17.340 --> 28:18.100
nicht crasht.

28:19.520 --> 28:23.580
Aber ganz ehrlich, das sind solche Dinger, die sollten eigentlich nicht crashen.

28:24.000 --> 28:25.180
Also, die sollten eigentlich nicht fehlschlagen.

28:25.260 --> 28:28.620
Wenn sie doch fehlschlagen, ist irgendwas kaputt, dann soll's halt, dann soll's halt crashen, ja.

28:29.320 --> 28:30.480
Schon, ist schon okay.

28:30.800 --> 28:34.940
Dass hier eine hardcoded ID drin ist, ist übrigens auch nicht, übrigens auch nicht so sinnvoll.

28:38.710 --> 28:40.650
Java ist gigalangsam, das stimmt überhaupt nicht.

28:40.750 --> 28:41.910
Java ist gar nicht so lahm.

28:42.650 --> 28:48.650
Java ist, sagen wir mal so, aus, historisch, ja, wurde gerne über Java geflamed und,

28:49.590 --> 28:50.030
gerade,

28:50.190 --> 28:51.390
Memory-Consumption.

28:52.190 --> 28:56.550
Aber die reine CPU-Performance ist Java gar nicht so schlecht, genauso wie C-Sharp und .NET.

28:56.630 --> 29:00.990
.NET ist sogar ziemlich schnell, sogar einen Ticken schneller als Java, je nachdem, was man sich für Benchmarks anguckt.

29:01.830 --> 29:05.510
So, und zwar, wir haben hier ganz viele globale Variablen.

29:05.970 --> 29:09.330
Das ist nicht, das ist nicht gerne gesehen in Rust, mal ganz davon abgesehen,

29:09.970 --> 29:15.310
dass mich das nicht wirklich interessiert, ob das irgendwelche Rust-Experten als schön oder nicht schön empfinden.

29:15.710 --> 29:19.310
Das Ding ist, es geht nicht anders als globale Variablen, denn,

29:19.310 --> 29:29.310
es ist ja nicht, es liegt ja hier nicht in der Hand, von Rust das alles zu machen, sondern ich call ja in den Rust-Code von außen rein.

29:29.910 --> 29:35.810
Das heißt, ich brauche irgendwie den State vom letzten Call und den kann Rust nicht tracken für mich.

29:37.010 --> 29:37.790
Wie soll es das machen?

29:38.190 --> 29:45.510
Das wird aufgerufen von C aus und geht dann zurück mit ein paar Sachen zu dem C-Interface zurück.

29:46.110 --> 29:48.510
Das heißt, wir brauchen ein paar statische Variablen.

29:49.310 --> 29:53.630
Was ich mir jetzt überlegt habe, und da bin ich mal gespannt, ob ich, ob ich das hinkriege,

29:54.030 --> 29:59.550
was ich, also was mir hier persönlich am allerwenigsten gefällt, sind diese, sind diese ganzen Unwrap-Orgien.

30:01.190 --> 30:04.190
Das sieht einfach total unreadable und eklig aus.

30:04.610 --> 30:09.190
Und was mir auch nicht gefällt, sind diese ultra deep-nested Typen.

30:09.290 --> 30:11.310
Ich meine, guckt euch das mal an, da rast es da aus.

30:11.730 --> 30:19.030
Once-Log, FW-Log, Hashmap, Arc, Track, also im Prinzip will ich einfach nicht,

30:19.030 --> 30:19.110
ich will einfach nicht, ich will einfach nicht, ich will einfach nicht, ich will einfach nicht, ich will einfach nicht,

30:19.110 --> 30:29.490
ich will einfach nur einen Dictionary haben mit N64 als Key und dieser Klasse hier oder diesem Struct hier als Value.

30:30.070 --> 30:34.310
Und damit das funktioniert, musst du das in diesen ganzen Krempel reinwrappen.

30:34.430 --> 30:35.710
Das ist echt nicht normal.

30:42.020 --> 30:45.080
Deswegen habe ich mir überlegt, wir machen folgendes.

30:46.380 --> 30:53.940
Wir haben nämlich aktuell da so einen kleinen Bug drin, der daraus resultiert, dass ich gestern nicht besser darüber wusste, was ich machen soll.

30:53.940 --> 30:54.160
Heute.

30:54.160 --> 30:55.020
Heute immer noch nicht.

30:55.520 --> 31:00.720
Und zwar jede Connection und jeder Track, der angelegt wird.

31:00.780 --> 31:02.300
Also mit Track ist in Video gemeint.

31:02.920 --> 31:11.260
Also das Ziel ist ja im Endeffekt mit FFmpeg Webcams auslesen, Webcams dann auf Serverseite, RTSP Webcams auslesen

31:11.260 --> 31:15.920
und dann auf Serverseite das Ganze in einen Stream schreiben, rüber streamen an Browser

31:15.920 --> 31:20.180
und der Browser rendert die Videos dann in einem Canvas oder einem Video-Element.

31:22.300 --> 31:25.000
Das Ding damit das funktioniert ist, es braucht jeder Track.

31:25.480 --> 31:28.980
Und jede Connection eine eindeutige ID.

31:31.290 --> 31:39.810
Und aktuell ist es halt kaputt, weil jeder Track hardcoded die ID 2 bekommt.

31:40.170 --> 31:41.930
Das kann ja schon mal gar nicht funktionieren.

31:42.610 --> 31:47.330
Und jede neue Connection hardcoded die ID 1 bekommt.

31:47.710 --> 31:50.150
Das kann auch schon mal nicht richtig funktionieren.

31:50.910 --> 31:54.380
Also insofern.

31:54.380 --> 31:58.600
Und diese Unwraps und Read und Get und Unwrap.

31:58.600 --> 31:59.460
Das ist auch eklig.

31:59.760 --> 32:01.880
Deswegen habe ich mir überlegt, wir machen folgendes.

32:01.920 --> 32:03.040
Wir probieren das mal zumindest.

32:03.600 --> 32:06.520
Wir legen heute in Rust zwei neue Typen an.

32:06.640 --> 32:11.360
Und zwar einmal so eine Art AppState.

32:11.500 --> 32:13.660
Hier sowas wie AppState.

32:14.320 --> 32:17.580
Und da fassen wir diese ganzen Dinger hier drinnen zusammen.

32:18.700 --> 32:19.880
Gucken wie das funktioniert.

32:20.520 --> 32:28.040
Und dann würde ich gerne noch ein Struct, sowas wie zum Beispiel Registry bauen.

32:28.600 --> 32:30.320
Und das Generic machen.

32:30.440 --> 32:33.600
Ich habe keine Ahnung, wie das in Rust funktioniert.

32:33.800 --> 32:34.700
Geht das vielleicht sogar so?

32:35.540 --> 32:35.720
Moment.

32:36.960 --> 32:38.460
Geht das etwa so?

32:39.160 --> 32:43.100
Das ist die gleiche, das ist die Sharp Syntax für Generics.

32:45.400 --> 32:51.440
Und dann will ich eine Generic Collection machen, die ich jetzt mal Registry nenne.

32:51.540 --> 32:53.380
Wir können sie auch einfach List nennen oder so.

32:53.460 --> 32:55.100
Letztendlich ist es egal, wie das Ding heißt.

32:55.780 --> 32:56.840
Die folgendes macht.

32:56.840 --> 32:57.740
Die folgendes macht.

32:58.600 --> 32:59.540
Ich nenne es lieber Registry.

32:59.740 --> 33:01.780
Das ist deutlich sinniger in dem Fall.

33:02.260 --> 33:05.300
Die Tracks und Connections sammelt.

33:05.420 --> 33:07.700
Also dass man quasi eine Collection machen kann.

33:07.780 --> 33:11.100
Entweder auf Tracks oder auf Pair Connections.

33:11.620 --> 33:15.000
Und die automatisch eine ID sucht, die frei ist.

33:15.200 --> 33:19.560
Und eine freie ID für die jeweilige Connection und für den jeweiligen Track vergibt.

33:20.220 --> 33:21.900
Gestern habe ich mir kurzzeitig überlegt.

33:22.720 --> 33:25.380
Man könnte einfach eine UUID generieren.

33:25.860 --> 33:26.340
Für alles.

33:26.340 --> 33:28.180
Das Problem ist, dass eine UUID.

33:28.600 --> 33:30.900
Ein 128-Bit-Int ist.

33:31.460 --> 33:35.840
Und man das interop-technisch nicht gescheit hinbekommt.

33:36.380 --> 33:39.580
Man muss das ja über ein C-Interface quasi mit C-Sharp dann scheren.

33:40.340 --> 33:40.980
Und es geht.

33:41.060 --> 33:41.900
Haben wir gestern gebaut.

33:42.060 --> 33:43.100
Aber schön ist was anderes.

33:46.500 --> 33:46.820
Oh ne.

33:48.220 --> 33:48.640
Da habe ich.

33:48.800 --> 33:49.280
Also.

33:50.020 --> 33:52.120
Ich setze mich jetzt erstmal mit Rust auseinander.

33:52.360 --> 33:55.040
Und wenn mich Rust irgendwann so abfuckt.

33:56.460 --> 33:57.820
Dass ich Erholung brauche.

33:57.880 --> 33:58.780
Dann gehe ich nicht zu Java.

34:02.330 --> 34:03.190
Dann baue ich.

34:03.270 --> 34:05.290
Irgendwas in irgendeiner Sprache, auf die ich Bock drauf habe.

34:05.370 --> 34:06.930
Oder wir bauen mal wieder Microcontroller.

34:07.330 --> 34:08.590
Löten irgendwelche Sachen.

34:09.070 --> 34:10.790
Spielen mal wieder Battlefield oder sonst was.

34:13.940 --> 34:16.200
Gibt es irgendwo ein FAQ mit Setup und so weiter?

34:17.860 --> 34:18.100
Ne.

34:18.660 --> 34:21.660
Aber es gibt ein Archiv, falls du alte Streams angucken willst.

34:21.760 --> 34:25.640
Und das Archiv ist absolut gigachat-nice gebaut hier.

34:29.180 --> 34:31.660
Mit AI-generated Thumbnails für die Streams.

34:36.460 --> 34:38.880
Ja, ihr habt Whisper ein bisschen gefailt, oder?

34:41.560 --> 34:43.760
Whisper hat es ja prinzipiell nicht so gut gemacht.

34:43.760 --> 34:44.260
Und mit Text.

34:47.570 --> 34:48.770
Rrrrrrriiii.

35:02.490 --> 35:03.150
Ne, ne, ne.

35:03.410 --> 35:03.990
Kein Java.

35:05.050 --> 35:07.050
Ja, da wurde wahrscheinlich keins für generated.

35:10.280 --> 35:10.480
Ja.

35:11.160 --> 35:11.340
Ja.

35:12.180 --> 35:13.200
Steht auch noch aus.

35:13.380 --> 35:15.140
Neo-Wim-Stream steht hier auch noch drin.

35:15.240 --> 35:15.500
Guck.

35:16.220 --> 35:17.340
Irgendwo, glaube ich.

35:20.200 --> 35:21.200
Neo-Wim mit Plugins.

35:21.380 --> 35:22.300
Pimp mein Neo-Wim.

35:22.500 --> 35:22.640
Ja.

35:29.760 --> 35:30.740
Das ist auf GitHub.

35:31.960 --> 35:33.580
Du kannst ja das klonen, wenn du willst.

35:34.220 --> 35:34.460
Okay.

35:34.740 --> 35:34.900
So.

35:35.120 --> 35:36.420
Das ist der Plan heute.

35:38.140 --> 35:38.840
Ich auch.

35:38.840 --> 35:39.460
Es ist nicht so.

35:39.460 --> 35:40.960
Als hätte ich super Ahnung von Neo-Wim.

35:41.300 --> 35:44.300
Ich habe früher halt meinen Wim auch mega aufgebohrt mit Plugins.

35:44.380 --> 35:45.440
Aber das war alles Wim-Skript.

35:46.020 --> 35:48.460
Und Neo-Wim ist ja zum größten Teil Lua.

35:50.220 --> 35:50.620
Okay.

35:50.980 --> 35:52.300
Also, das ist der Plan.

35:52.460 --> 35:53.840
So stelle ich mir das vor.

35:54.080 --> 35:54.140
Ja.

35:54.800 --> 35:56.780
Das heißt, wir fangen jetzt mal an.

35:57.920 --> 35:59.200
Mit was fangen wir jetzt an?

35:59.480 --> 36:00.860
Kompiliert das jetzt eigentlich gerade?

36:01.180 --> 36:02.740
Wenn ich das auskommentiere?

36:02.980 --> 36:03.540
Compile das?

36:03.920 --> 36:04.080
Ja.

36:04.240 --> 36:04.660
Okay, nice.

36:05.260 --> 36:07.500
Also, ich würde sagen, wir machen erstmal einen Struct.

36:07.500 --> 36:08.500
Struct Upstate.

36:09.460 --> 36:09.960
Okay.

36:10.500 --> 36:21.300
Und wir hauen jetzt mal diesen ganzen Krempel, der hier aktuell so in global Sachen hängt.

36:21.300 --> 36:23.940
Wobei, wir machen es mal testweise.

36:23.940 --> 36:25.220
Nehmen wir einfach mal die API.

36:25.700 --> 36:26.660
Die hauen wir hier rein.

36:26.660 --> 36:27.980
So, Static brauchen wir nicht.

36:28.620 --> 36:29.660
Nehmen wir mal API.

36:30.020 --> 36:39.820
Wir brauchen auch kein Once-Log mehr, sondern einfach nur API, oder?

36:39.820 --> 36:40.580
Sonst nichts?

36:41.140 --> 36:41.540
Glaube ich.

36:41.540 --> 36:43.020
Das Ding müsste Thread-Safe sein.

36:43.020 --> 36:44.020
Das könnte Thread-Safe sein.

36:44.020 --> 36:50.020
So, heißt im Endeffekt, wir brauchen jetzt einmal noch das hier für den App-State.

36:50.020 --> 36:51.020
App-State.

36:51.020 --> 36:52.020
So.

36:52.020 --> 36:59.720
Machen wir mal hier die API weg, um zu checken, ob noch alles funktioniert.

36:59.720 --> 37:01.120
Da sollte es ein paar rote Sachen geben.

37:01.120 --> 37:04.800
So, jetzt müssen wir das Ganze noch initialisieren.

37:04.800 --> 37:09.880
Let App-State set App-State.

37:09.880 --> 37:14.700
Okay, gut.

37:14.700 --> 37:18.870
So.

37:18.870 --> 37:19.870
Okay, gut.

37:19.870 --> 37:21.870
Was hat er hier?

37:21.870 --> 37:22.870
Use Shorthand.

37:22.870 --> 37:23.870
Alles klar.

37:23.870 --> 37:24.870
So, hoffen wir mal, ob das jetzt funzt.

37:24.870 --> 37:27.870
Nein, funktioniert nicht, weil Zeile 95.

37:27.870 --> 37:29.870
Obviously, Zeile 95.

37:29.870 --> 37:30.870
Ach so, ja.

37:30.870 --> 37:32.870
Das brauchen wir jetzt gar nicht mehr, oder?

37:32.870 --> 37:34.870
Wir brauchen jetzt App-State.

37:34.870 --> 37:36.870
Get.

37:36.870 --> 37:39.870
Unwrap-API.

37:39.870 --> 37:46.870
Ne, das wäre jetzt, das wäre jetzt auch zu einfach, wenn das einfach funktionieren würde,

37:46.870 --> 37:47.870
oder?

37:47.870 --> 37:48.870
Keck-Wait.

37:48.870 --> 37:55.870
Das wäre deutlich way too easy, wenn das in Rust, wenn das irgendwie auf first try irgendwie

37:55.870 --> 37:56.870
klappen würde.

37:56.870 --> 38:01.080
Was ist denn das Problem, was er jetzt schon wieder hat?

38:01.080 --> 38:12.820
Das ist doch, da fehlt der Borrow-Operator.

38:12.820 --> 38:15.820
Das heißt, ich muss da, muss da nennen.

38:15.820 --> 38:16.820
Ach wie.

38:16.820 --> 38:17.820
Okay.

38:17.820 --> 38:22.730
Der Chat weiß Bescheid.

38:22.730 --> 38:31.800
Der Chat ist wirklich schlau.

38:31.800 --> 38:38.030
Ne, die sind teilweise nicht wirklich useful.

38:38.030 --> 38:40.030
Aber es funktioniert.

38:40.030 --> 38:43.030
Ich meine, findest du das useful?

38:43.030 --> 38:48.030
Move occurs because value has type api, which does not implement a copy trade.

38:48.030 --> 39:01.910
Eindeutiger Hinweis, dass man ein und nehmen soll.

39:01.910 --> 39:03.910
Oh, okay.

39:03.910 --> 39:04.910
Ach ja.

39:04.910 --> 39:06.910
Okay, ich habe nichts gesagt.

39:06.910 --> 39:07.910
Ihr habt recht.

39:07.910 --> 39:09.910
Steht ja wirklich da.

39:09.910 --> 39:15.270
Es steht wirklich drunter.

39:15.270 --> 39:18.270
Okay, ich gebe zu, die Rust-Fehlermeldung in dem Fall war hilfreich.

39:18.270 --> 39:19.270
Alles klar.

39:19.270 --> 39:20.270
Gut.

39:20.270 --> 39:21.270
Gut.

39:21.270 --> 39:22.270
Keck-G.

39:22.270 --> 39:23.270
Mann.

39:23.270 --> 39:24.270
Ja, ist okay.

39:24.270 --> 39:25.270
Ich gebe zu, die war wirklich hilfreich.

39:25.270 --> 39:26.270
Also, das hat schon mal funktioniert.

39:26.270 --> 39:27.270
Das in App-State zu moven.

39:27.270 --> 39:28.270
Jetzt brauchen wir noch eins.

39:28.270 --> 39:29.270
So, jetzt packen wir die Runtime.

39:29.270 --> 39:33.180
Kannst du nochmal das Back-Inserter-Meme machen?

39:33.180 --> 39:39.340
Wie?

39:39.340 --> 39:40.340
Das Back-Inserter-Meme?

39:40.340 --> 39:41.340
Du meinst das auf Stack-Overflow, das C++ Zeug?

39:41.340 --> 39:42.340
Ja, hab ich jetzt keinen Bock.

39:42.340 --> 39:43.340
Das kann ich jeden Stream zeigen.

39:43.340 --> 39:44.340
Welche Idee hast du?

39:44.340 --> 39:45.340
Ich habe noch eine Idee.

39:45.340 --> 39:46.340
Ich habe noch eine Idee.

39:46.340 --> 39:47.340
Ich habe noch eine Idee.

39:47.340 --> 39:48.340
Ich habe noch eine Idee.

39:48.340 --> 39:49.340
Ich habe noch eine Idee.

39:49.340 --> 39:50.340
Ich habe noch eine Idee.

39:50.340 --> 39:51.340
Ich habe noch eine Idee.

39:51.340 --> 39:52.340
Ich habe noch eine Idee.

39:52.340 --> 39:53.340
Ich habe noch eine Idee.

39:53.340 --> 39:54.340
Ich habe noch eine Idee.

39:54.340 --> 39:59.340
Das ist Rust-Rover.

39:59.340 --> 40:11.490
Das ist die Idee von Jetbrains für Rust.

40:11.490 --> 40:22.170
Die hat aber noch so ein paar etwas, naja, vielleicht etwas unrunde, ist doch etwas unrund

40:22.170 --> 40:23.170
an manchen Stellen.

40:23.170 --> 40:34.030
So, die API haben wir jetzt da rein gepackt.

40:34.030 --> 40:35.030
Jetzt packen wir noch die Runtime.

40:35.030 --> 40:36.610
noch die Runtime da rein.

40:37.710 --> 40:38.890
Wobei, Leute, ich hab

40:38.890 --> 40:41.110
ne Idee. Passt mal auf. Sixheadtime.

40:41.530 --> 40:42.990
Wenn das klappt in Rusts,

40:43.250 --> 40:44.650
dann hab ich Rusts verstanden.

40:45.170 --> 40:46.710
Ja, da dauert's noch ein bisschen hin.

40:47.310 --> 40:48.830
Gucke mal, guckte mal, guckte mal.

40:49.310 --> 40:50.750
Ich sag doch jedes Mal

40:50.750 --> 40:52.610
hier, wenn ich

40:52.610 --> 40:54.890
diese A-Sync-Runtime starte,

40:54.890 --> 40:56.610
ich sag jedes Mal, Runtime

40:56.610 --> 40:58.450
get unwrapped, block on.

40:59.090 --> 40:59.970
Ich hab ne Idee.

41:00.570 --> 41:01.930
Ich hab ne Idee. Und zwar,

41:02.570 --> 41:03.730
und zwar, passt mal auf.

41:03.730 --> 41:05.750
Wir gucken uns

41:05.750 --> 41:07.810
die Funktionsdefinition von

41:07.810 --> 41:08.650
block on an.

41:09.470 --> 41:10.570
Kopieren die uns.

41:11.530 --> 41:15.860
Und jetzt, und jetzt

41:15.860 --> 41:17.200
geben wir unserer,

41:17.880 --> 41:20.000
unserem API-State eine Funktion,

41:20.120 --> 41:21.140
die block on heißt.

41:24.030 --> 41:25.790
Das funktioniert, ach Moment, das ist ja Rust.

41:25.970 --> 41:27.990
Moment, das ist ja Rust. Das ging doch irgendwie so,

41:28.110 --> 41:32.060
oder? App-State?

41:34.020 --> 41:35.520
Ich will kein Makro, ne.

41:37.680 --> 41:39.620
So, das kriegt jetzt ne Funktion,

41:39.620 --> 41:40.960
blocks on.

41:42.280 --> 41:43.840
Dann braucht das

41:43.840 --> 41:45.560
hier, API-State,

41:46.300 --> 41:47.460
dann braucht das hier noch

41:47.460 --> 41:48.940
Runtime als,

41:49.380 --> 41:51.460
ja, für Klassenvariable, wie auch immer

41:51.460 --> 41:52.200
das heißt in Rust.

41:54.240 --> 41:55.760
Als Instanzvariable,

41:55.900 --> 41:57.720
kein Schimmer, wie man das korrekt in Rust nennt.

41:57.960 --> 41:59.800
Trade-Variable, Struct-Variable,

42:00.280 --> 42:01.100
Struct-Feld,

42:01.540 --> 42:02.060
weiß nicht.

42:03.620 --> 42:03.840
So.

42:06.000 --> 42:06.520
Und

42:06.520 --> 42:09.120
jetzt sagen wir, Moment,

42:09.120 --> 42:09.580
selbst,

42:09.620 --> 42:11.220
passt doch, ja, und jetzt sagen wir

42:11.220 --> 42:13.620
self-runtime

42:14.140 --> 42:15.700
und jetzt kopieren wir das, was ich

42:15.700 --> 42:16.380
hier immer mache.

42:17.720 --> 42:19.620
Block on, wobei, ne, muss ich auch

42:19.620 --> 42:23.530
gar nichts machen. Block

42:23.530 --> 42:27.080
on und

42:27.080 --> 42:28.920
da schieben wir das jetzt rein.

42:29.660 --> 42:30.940
Und hoffen, dass es noch kompiliert.

42:31.500 --> 42:31.940
Ne, shit.

42:33.180 --> 42:34.840
Ah, ne, Moment, missing, missing runtime.

42:35.760 --> 42:37.340
Hier, missing, missing runtime.

42:38.240 --> 42:38.680
Runtime.

42:41.110 --> 42:41.290
So.

42:41.290 --> 42:41.370
Äh.

42:54.930 --> 42:55.430
Achso.

42:55.750 --> 42:56.550
Ich muss, hä?

42:58.170 --> 42:59.210
Wait, wait a minute.

43:00.890 --> 43:01.190
Ah.

43:02.210 --> 43:02.770
Moment.

43:06.060 --> 43:07.880
Das beißt sich jetzt ein bisschen

43:07.880 --> 43:09.580
in den Schwanz, Gatschi.

43:10.460 --> 43:11.020
Was?

43:13.610 --> 43:14.210
Äh.

43:15.810 --> 43:17.510
Die Runtime setze ich hier oben.

43:21.440 --> 43:22.040
Und

43:22.040 --> 43:24.740
hier unten lege ich

43:24.740 --> 43:27.020
erst den App-State

43:27.020 --> 43:27.620
an.

43:36.770 --> 43:40.890
Ich mein, das muss

43:40.890 --> 43:42.190
aber nicht so sein.

43:44.180 --> 43:46.780
Kann ich nicht einfach den ganzen Krempel

43:46.780 --> 43:48.060
hier rauskopieren?

43:52.110 --> 43:53.350
Und da rein?

43:57.050 --> 44:03.660
Und dann... Ja?

44:04.180 --> 44:08.380
Okay. Äh, und dann brauche ich

44:08.380 --> 44:10.100
das hier, dann brauche ich das doch eigentlich

44:10.100 --> 44:11.820
gar nicht. Ach, doch!

44:12.140 --> 44:13.940
Ach, Moment, Moment, Moment, Moment.

44:14.240 --> 44:16.380
Doch, doch, das muss in der Runtime gecallt werden.

44:16.500 --> 44:18.200
Sonst wird, ne, sonst hab ich wieder so diesen

44:18.200 --> 44:19.760
komischen Bug. Ne, ne, ne, ne, ne, ne.

44:23.260 --> 44:23.700
Nopos.

44:31.230 --> 44:33.430
Das Rust-Buch. Ja, soll ich jetzt das Rust-Buch

44:33.430 --> 44:34.650
im Stream lesen, oder wie?

44:40.750 --> 44:41.990
Aber was wir machen können,

44:42.050 --> 44:45.670
ist... Kann man?

44:49.100 --> 44:50.340
Okay, jetzt bin ich mal gespannt.

44:50.860 --> 44:52.600
Kann ich das hier einfach die Runtime

44:52.600 --> 44:54.820
als Parameter übergeben?

44:56.800 --> 44:57.200
Runtime?

44:57.200 --> 44:57.240
Runtime?

44:58.980 --> 45:01.200
Alter, ich bin zu pepega,

45:01.260 --> 45:03.120
das zu schreiben. Und jetzt

45:03.120 --> 45:04.200
Runtime?

45:04.560 --> 45:07.300
Da reinschreiben? Ne, weil?

45:10.230 --> 45:10.930
Achso, äh,

45:11.230 --> 45:11.850
ist missing.

45:14.860 --> 45:15.420
Runtime?

45:18.320 --> 45:19.660
Used after move.

45:20.600 --> 45:21.060
Okay, dann muss das hier...

45:22.520 --> 45:26.670
MonkaS, Alter.

45:26.970 --> 45:29.410
Ich hab mir das so einfach vorgestellt, ist es aber nicht.

45:33.380 --> 45:37.400
Ich...

45:37.400 --> 45:39.960
Okay, wir lassen das. Wir lassen das sein, ja?

45:40.300 --> 45:42.080
Wir lassen, wir lassen das sein.

45:48.660 --> 45:50.060
Wir lassen das, wir lassen das sein.

45:51.640 --> 45:52.000
Weil...

45:52.000 --> 45:53.460
Ich will ja Runtime get...

45:53.460 --> 45:54.800
Ich will das ja wegschmeißen.

45:54.880 --> 45:56.620
Ich will das ja gar nicht mehr haben.

46:01.660 --> 46:03.460
Okay, wir lassen das mal kurz hier

46:03.460 --> 46:05.000
weg. Das ist eigentlich gar nicht das...

46:05.000 --> 46:06.660
Vielleicht fällt mir später noch was zu ein.

46:11.920 --> 46:13.160
Das darf jetzt so bleiben.

46:13.360 --> 46:14.820
Und das hier,

46:14.920 --> 46:16.220
fliegt jetzt erstmal wieder weg, okay?

46:18.220 --> 46:19.220
Und das, das hier auch.

46:19.360 --> 46:20.940
Da bin ich grad noch nicht

46:20.940 --> 46:22.520
High-IQ-Rust-mäßig genug für.

46:30.830 --> 46:32.130
Das muss ich mal schauen, wie man das

46:32.130 --> 46:33.350
wie man das später macht.

46:34.610 --> 46:36.090
Weil das beißt sich. Ich kann nicht

46:36.090 --> 46:37.290
die Runtime hier anlegen.

46:42.350 --> 46:43.610
Das ist, das ist halt echt blöd.

46:43.830 --> 46:44.990
Egal, das machen wir jetzt nicht.

46:45.310 --> 46:47.730
Vielleicht fällt mir da später was zu ein.

46:48.710 --> 46:50.010
Wir, wir... Also was mich

46:50.010 --> 46:51.810
viel mehr interessiert ist, wie man ein Custom

46:51.810 --> 46:54.090
Custom Type implementiert in Rust.

46:55.090 --> 46:55.830
Eine Custom

46:56.050 --> 46:58.450
Collection, wohlgemerkt, in Rust implementiert.

46:58.550 --> 47:00.390
Eine Generic Custom Collection

47:00.390 --> 47:02.410
in Rust. Ich würde mal

47:02.410 --> 47:04.270
vorschlagen, wir

47:04.270 --> 47:06.170
kopieren das Ganze in

47:06.170 --> 47:07.610
ein eigenes

47:07.610 --> 47:09.730
in ein eigenes File.

47:12.210 --> 47:13.570
Kann man das nicht kopieren?

47:14.390 --> 47:15.990
Refactor move

47:15.990 --> 47:18.190
to

47:18.190 --> 47:18.830
ähm

47:18.830 --> 47:24.000
registry.rs

47:24.000 --> 47:28.540
So, ja ja, add.

47:29.340 --> 47:30.860
Jetzt bin ich mal gespannt.

47:31.360 --> 47:32.400
Jetzt, jetzt bin ich mal gespannt.

47:32.400 --> 47:34.580
Also, warte nicht, Runtime.

47:34.840 --> 47:35.120
Moment.

47:36.700 --> 47:38.620
Äh, registry.rs

47:38.620 --> 47:40.640
Also, was ich haben will.

47:41.240 --> 47:42.280
Ich will ein Generic

47:42.280 --> 47:43.780
Ich will ein Generic Type

47:43.780 --> 47:46.620
in Rust. Ich hab keine Ahnung, wie man Generic

47:46.620 --> 47:48.300
Rust, Rust

47:48.300 --> 47:50.300
Generic Type. Wie geht das?

47:51.340 --> 47:52.820
Generic Data Types

47:52.820 --> 47:55.770
Strukt

47:55.770 --> 47:59.900
äh

47:59.900 --> 48:01.440
Ja, T

48:01.440 --> 48:04.920
Also im Prinzip ein bisschen wie in .NET

48:04.920 --> 48:06.540
Registry

48:06.560 --> 48:08.480
T. Okay? So.

48:09.620 --> 48:10.760
Dann nennen wir, machen wir hier mal

48:10.760 --> 48:12.760
eine Variable drin. Die nennen wir einfach Storage

48:12.760 --> 48:13.760
oder Store.

48:14.860 --> 48:16.680
Storage. Keine Ahnung.

48:16.940 --> 48:17.860
Store. Wir nennen es Store.

48:19.200 --> 48:19.580
Und

48:19.580 --> 48:22.780
das wird eine Hash Map.

48:23.880 --> 48:24.700
Das wird

48:24.700 --> 48:26.520
eine Hash Map vom

48:26.520 --> 48:28.640
Typ, ähm, tja. Wie viele

48:28.640 --> 48:29.780
IDs brauche ich?

48:30.480 --> 48:32.600
Wahrscheinlich reicht ein U32 Log

48:32.600 --> 48:34.600
da aus. U32 Max.

48:35.600 --> 48:36.540
Nicht Z32.

48:36.560 --> 48:38.600
Was auch immer ich da gerade gegoogelt hab.

48:39.080 --> 48:40.380
U32 Max

48:40.380 --> 48:42.660
ist, ja, ja, so

48:42.660 --> 48:44.360
ich glaube, das reicht.

48:45.180 --> 48:46.220
Ich glaube, ich werde nie

48:46.220 --> 48:48.700
so viele Connections gleichzeitig haben,

48:48.800 --> 48:50.220
dass das irgendwie Probleme macht.

48:51.400 --> 48:51.940
So, also

48:51.940 --> 48:54.620
wir brauchen eine extra ID pro

48:54.620 --> 48:57.620
Connection. Wenn das

48:57.620 --> 48:59.800
Compile, das wird auf jeden Fall nicht Compilen

48:59.800 --> 49:01.700
auf First Trial. So.

49:02.340 --> 49:03.300
Ähm, und dann

49:03.300 --> 49:05.900
ein Value auf Type T.

49:05.900 --> 49:07.960
Okay? So weit, so weit, so weit.

49:08.000 --> 49:09.740
Sollte es noch kompilieren. Da haben wir noch nichts

49:09.740 --> 49:10.140
gemacht.

49:11.740 --> 49:13.760
So, aber, aber generic das Ganze.

49:14.040 --> 49:14.520
So, und jetzt?

49:17.020 --> 49:17.460
Im,

49:17.740 --> 49:19.620
kann das mal machen, was ich will.

49:20.520 --> 49:21.820
Registry of

49:21.820 --> 49:22.620
Type T.

49:24.180 --> 49:25.540
Moment, jetzt geht das nicht.

49:25.760 --> 49:25.980
Warum?

49:27.700 --> 49:28.720
Unresolved Reference.

49:35.020 --> 49:36.740
Ach, hier muss T vorne noch hin.

49:38.240 --> 49:38.960
Imple, okay.

49:39.660 --> 49:40.580
Implement T.

49:41.520 --> 49:42.500
Implement Type T.

49:42.600 --> 49:43.520
Registry of Type T.

49:43.540 --> 49:45.620
So, also, was wir

49:45.620 --> 49:47.200
jetzt brauchen, ist folgendes. Function.

49:48.060 --> 49:49.620
Muss man da Public eigentlich

49:49.620 --> 49:51.600
davor schreiben? Ja, ne? Ich muss,

49:51.600 --> 49:53.480
ich muss da Pub davor schreiben,

49:54.040 --> 49:55.660
damit das exportiert

49:55.660 --> 49:57.420
wird nachher, dass ich das benutzen kann.

49:58.060 --> 49:58.780
Glaube ich.

50:00.680 --> 50:01.740
Oder muss ich,

50:01.820 --> 50:03.680
muss ich nur hier Pub davor

50:03.680 --> 50:04.120
schreiben?

50:05.440 --> 50:07.320
Also nicht genau. So, Fn.

50:08.520 --> 50:09.480
Also, was brauchen wir

50:09.480 --> 50:11.720
in so einer Collection? Wir brauchen

50:11.720 --> 50:13.040
einmal New.

50:13.540 --> 50:16.080
Wenn man das macht, wie Go.

50:24.800 --> 50:26.300
So, wir machen, wir machen das mal so ein bisschen

50:26.300 --> 50:28.160
wie in Go. Also,

50:28.620 --> 50:30.120
es, boah, ich hab keine Ahnung, wie das geht.

50:30.400 --> 50:32.640
Rust New Constructor.

50:36.580 --> 50:37.360
Ja, jawoll.

50:37.520 --> 50:38.380
Genau das will ich haben.

50:39.120 --> 50:40.340
Excellent Copy Paste.

50:41.100 --> 50:43.120
So, wir wollen kein Value. Wir returnen

50:43.120 --> 50:44.280
Self, okay.

50:45.000 --> 50:46.400
Und Self ist im, okay,

50:46.660 --> 50:48.860
Store ist eine

50:48.860 --> 50:51.080
Hash Map, eine neue,

50:51.080 --> 50:52.700
ein neues Dictionary im Endeffekt.

50:53.720 --> 50:53.940
Okay,

50:54.100 --> 50:56.100
Funst, nice. Was hat der für Schmerzen?

50:57.140 --> 50:58.560
New Function is never used.

50:59.140 --> 51:00.360
Kompiliert, alles gut.

51:01.760 --> 51:02.860
Das heißt, wir können jetzt

51:02.860 --> 51:05.320
das Ganze neu anlegen.

51:05.820 --> 51:07.280
Übrigens, um das zu testen,

51:07.860 --> 51:09.420
machen wir hier einfach mal eine Funktion

51:09.420 --> 51:11.640
und rufen das, und rufen das auf.

51:11.740 --> 51:12.600
Wir tun einfach mal so.

51:13.440 --> 51:14.280
Registry new.

51:17.190 --> 51:18.970
Achso, Registry of Type.

51:20.230 --> 51:20.710
Ah,

51:20.950 --> 51:22.090
Int oder so.

51:28.360 --> 51:28.720
Ähm,

51:30.160 --> 51:31.180
wie schreibt man das jetzt?

51:31.200 --> 51:33.200
Int?

51:34.860 --> 51:35.140
Int?

51:35.780 --> 51:52.910
Muss man das hier vorne irgendwie

51:52.910 --> 51:53.290
schreiben?

51:55.820 --> 51:57.580
Type Annotation Needed.

51:59.280 --> 51:59.760
Ah, ja.

52:00.800 --> 52:02.600
Okay, das muss man hier machen. Das ist auch ein bisschen

52:02.600 --> 52:03.680
gewöhnungsbedürftig.

52:05.660 --> 52:06.700
Auf, ja, hier

52:06.700 --> 52:07.620
U32.

52:08.800 --> 52:10.560
Oder machen wir Local Static

52:10.560 --> 52:11.040
Track

52:11.040 --> 52:13.700
Sample. So, perfekt.

52:14.160 --> 52:15.280
Kompiliert noch? Kompiliert noch.

52:15.280 --> 52:15.820
So.

52:17.420 --> 52:18.060
Also,

52:18.540 --> 52:21.040
was braucht man für eine Collection?

52:21.220 --> 52:23.020
Wir brauchen im Prinzip

52:23.020 --> 52:29.470
ähm, wir brauchen im Prinzip

52:29.470 --> 52:31.370
drei Methoden, vier, vier Methoden.

52:31.690 --> 52:33.390
Wir brauchen Add-Elemente,

52:33.850 --> 52:34.950
Get-Elemente,

52:36.130 --> 52:37.710
Delete-Elemente und

52:37.710 --> 52:39.610
Loop

52:39.610 --> 52:41.090
oder sowas, ja.

52:42.430 --> 52:43.390
Alles klar.

52:43.390 --> 52:43.750
Also,

52:43.750 --> 52:46.850
Pup, fangen wir mal an.

52:47.150 --> 52:49.270
Pup, Fn, machen wir mal Add.

52:49.510 --> 52:51.370
Add dürfte ja noch relativ easy sein.

52:51.490 --> 52:51.790
Add,

52:55.580 --> 52:57.320
und jetzt, ne, Moment.

52:57.720 --> 52:59.300
Wo kommt jetzt hier der

52:59.300 --> 53:01.200
der Type hin?

53:03.760 --> 53:05.700
Also, bei .NET kommt er da hin, glaube ich.

53:05.820 --> 53:07.300
Ja, okay, kommt den Rust auch da hin.

53:12.000 --> 53:12.560
So, Add.

53:13.360 --> 53:15.320
So, und dann kriegen wir als Parameter

53:15.320 --> 53:16.860
ein

53:16.860 --> 53:18.720
ein Element.

53:22.550 --> 53:23.870
Oh, fuck, wie war man das jetzt?

53:32.700 --> 53:33.980
Also, wir kriegen ein Element

53:33.980 --> 53:35.800
auf T im Endeffekt. So.

53:35.800 --> 53:38.200
Was hat er hier für Schmerzen?

53:39.000 --> 53:40.600
Name T is already used.

53:42.920 --> 53:43.020
Hä?

53:43.280 --> 53:45.360
Ach, brauche ich das hier gar nicht mehr?

53:46.500 --> 53:47.780
Ah, ich brauche das gar nicht mehr.

53:48.400 --> 53:50.800
Ähm, so, und dann brauchen wir aber noch

53:50.800 --> 53:52.660
irgendwie unself.

53:53.100 --> 53:54.600
Das ist das, übrigens das gleiche wie

53:54.600 --> 53:56.720
this in C-Sharp oder self in Python

53:56.720 --> 53:58.700
oder me, glaube ich,

53:58.720 --> 54:00.080
in Lua oder sowas.

54:01.460 --> 54:01.860
So.

54:01.860 --> 54:03.940
Das heißt, jetzt sagen wir

54:03.940 --> 54:04.600
self

54:04.600 --> 54:06.480
store

54:06.480 --> 54:09.920
insert. Das fand's doch

54:09.920 --> 54:11.860
so im Leben nicht. Jetzt brauchen wir, ach, so, Moment,

54:11.920 --> 54:13.240
eine ID brauchen wir noch.

54:13.280 --> 54:15.540
Eine ID, die muss ich generieren.

54:16.200 --> 54:17.640
Let ID gleich 1,

54:17.740 --> 54:19.140
die generiere ich. ID

54:19.140 --> 54:21.380
und dann fügen wir das Element

54:21.380 --> 54:21.760
ein.

54:23.380 --> 54:25.300
Das geht natürlich nicht, weil das nicht

54:25.300 --> 54:26.040
Mutt ist.

54:28.220 --> 54:30.140
Ich glaube, in Lua heißt es me.

54:40.920 --> 54:42.860
Leute, das kann so nicht funktionieren.

54:44.220 --> 54:44.780
Das ist

54:44.780 --> 54:45.820
verkehrt, was ich mache.

54:46.600 --> 54:48.500
Also, okay, das würde funktionieren, Chat.

54:49.100 --> 54:50.520
Das würde funktionieren, aber

54:50.520 --> 54:52.320
spätestens, spätestens

54:58.480 --> 55:00.000
wie will Rust das handeln,

55:00.400 --> 55:01.480
wenn ich das von verschiedenen Threads

55:01.480 --> 55:07.200
aufrufe? Moment, Moment, Moment.

55:07.260 --> 55:08.860
Das testen wir jetzt mal, ja.

55:12.220 --> 55:13.320
Weil ich glaube schon,

55:13.420 --> 55:14.620
dass man das hier locken muss.

55:15.360 --> 55:16.980
HashMap ist ja sicherlich nicht Threadsafe.

55:17.080 --> 55:17.960
Probieren wir das mal. Add.

55:19.060 --> 55:21.140
Jetzt irgendwie 1 oder so.

55:22.820 --> 55:23.040
Moment.

55:23.500 --> 55:25.400
Let Mutt, R, Mutt.

55:31.960 --> 55:32.340
Ja, gut.

55:33.600 --> 55:34.920
Hier weiß er ja, dass es nicht

55:34.920 --> 55:37.220
Multithreaded ist, weil das in der gleichen Funktion ist.

55:42.460 --> 55:44.300
Der wird mich das schlichten,

55:44.300 --> 55:45.820
vergreifend nicht anlegen lassen,

55:45.940 --> 55:47.000
vermute ich einfach mal.

55:48.940 --> 55:50.080
Ne, ne, ich glaube, wir brauchen da

55:50.080 --> 55:51.920
einen Lock drum. Ich glaube,

55:51.980 --> 55:53.800
damit ersparen wir uns schon einige,

55:54.080 --> 55:55.320
einige Probleme.

55:56.900 --> 55:58.440
Wir brauchen da einen Lock drum.

55:59.160 --> 56:00.140
Lassen wir das mal so.

56:00.780 --> 56:02.260
Also Ziel muss sein, dass die Registry

56:02.260 --> 56:04.000
selbst nicht mutable ist, aber

56:04.000 --> 56:05.300
Add trotzdem funktioniert.

56:06.160 --> 56:08.060
So, heißt im Endeffekt,

56:08.120 --> 56:10.260
wir brauchen hier wahrscheinlich einen RwLock.

56:10.260 --> 56:12.420
Ne, oder wie ist das Ding, was wir hier hatten?

56:13.200 --> 56:13.980
Doch, RwLock.

56:14.300 --> 56:16.020
RwLock

56:16.020 --> 56:17.300
HashMap

56:17.300 --> 56:25.230
und jetzt ist es RwLock

56:25.230 --> 56:33.220
New. Du könntest auch

56:33.220 --> 56:35.340
nur Self machen und dann versuchen mit GetMutt

56:35.340 --> 56:37.280
die Referenz zu

56:37.280 --> 56:38.360
holen. Was?

56:39.040 --> 56:39.460
Wie jetzt?

56:40.280 --> 56:43.320
Das kann aber doch auch Multithreaded nicht funktionieren.

56:47.800 --> 56:48.580
Was soll ich machen?

56:49.240 --> 56:50.300
Add, also quasi

56:50.300 --> 56:52.700
das muss übrigens

56:52.700 --> 56:54.660
weg hier. Self.

56:56.100 --> 56:57.180
GetMutt.

56:58.860 --> 57:00.500
Okay, was ist das für

57:00.500 --> 57:01.420
schwarze Magie?

57:03.300 --> 57:04.600
Returns a mutable reference

57:04.600 --> 57:06.500
to the value. The key may be

57:06.500 --> 57:08.620
any borrowed form of the map

57:08.620 --> 57:09.380
key to partition.

57:09.380 --> 57:11.580
Wie soll

57:11.580 --> 57:12.620
das funktionieren?

57:14.980 --> 57:15.580
GetMutt?

57:20.720 --> 57:21.660
Geht auch nicht, ne?

57:23.360 --> 57:23.900
Ach, Moment!

57:25.940 --> 57:26.540
Das ist,

57:26.660 --> 57:31.440
das ist, ähm,

57:31.800 --> 57:33.500
jetzt aus der HashMap

57:33.500 --> 57:37.500
raus. Das ist was anderes.

57:37.500 --> 57:39.320
Das, ne, ne, das, das,

57:40.440 --> 57:41.660
ich check's auch nicht, was?

57:44.870 --> 57:46.050
Ne, ne, das, das gibt's

57:46.050 --> 57:46.650
überhaupt nicht.

57:49.000 --> 57:51.600
Try? Ne, das muss in den

57:51.600 --> 57:53.360
Lock, das muss in den Lock rein, sonst

57:53.360 --> 57:54.060
funzt das nicht.

57:55.160 --> 57:56.560
Wir hatten's doch eben grad hier schon.

57:58.200 --> 57:58.500
Lock.

58:00.640 --> 58:01.120
RwLock.

58:01.760 --> 58:03.220
Also, Self,

58:03.840 --> 58:05.500
Store, so.

58:05.900 --> 58:07.200
Store ist jetzt allerdings

58:07.200 --> 58:09.300
nicht mehr direkt eine HashMap, sondern

58:09.300 --> 58:09.760
ein

58:09.760 --> 58:11.260
Thread,

58:11.280 --> 58:12.040
Thread, Save, Lock.

58:13.180 --> 58:15.140
Das holen wir jetzt. Write, die Reference

58:15.140 --> 58:16.800
raus, Unwrap.

58:22.060 --> 58:23.380
Okay, und jetzt sagen wir

58:23.380 --> 58:24.500
Map, Insert,

58:26.180 --> 58:27.620
ID und Element E.

58:27.880 --> 58:29.240
So, und das funzt jetzt wahrscheinlich.

58:29.560 --> 58:30.540
Ja, ach, shit, was ist das?

58:31.160 --> 58:33.680
Cannot borrow mutable, make mutable. Ja, sehr schön.

58:34.740 --> 58:34.980
Fuck!

58:36.840 --> 58:37.680
Cannot borrow

58:37.680 --> 58:38.800
as mutable.

58:39.960 --> 58:41.620
Ach so, weil dann, weil dann noch, das brauchen wir

58:41.620 --> 58:42.520
doch jetzt gar nicht mehr, oder?

58:42.520 --> 58:44.620
Ah, nice, funzt.

58:45.140 --> 58:45.580
Sehr schön.

58:45.720 --> 58:47.720
Also, jetzt müssen wir die Registry

58:47.720 --> 58:49.380
selbst nicht mutable machen,

58:49.780 --> 58:51.920
können aber trotzdem Sachen einfügen.

58:55.060 --> 58:56.020
Boah, meine Güte.

58:56.900 --> 59:00.780
Der fliegt

59:00.780 --> 59:02.920
jetzt auf die Schnauze, wenn es von einem anderen gelockt

59:02.920 --> 59:04.840
ist. Ich hab ehrlich gesagt keine Ahnung,

59:04.980 --> 59:06.900
wie sich, wie sich das verhält.

59:10.120 --> 59:10.900
Ob das, ob das

59:10.900 --> 59:12.940
einfach nur hängt an der Stelle?

59:14.680 --> 59:16.800
Oder ob das...

59:16.800 --> 59:17.000
Oh.

59:18.740 --> 59:18.980
Nee.

59:18.980 --> 59:19.040
Okay.

59:21.200 --> 59:22.760
Locks das RwLock with

59:22.760 --> 59:27.000
exclusive write access blocking the current thread until it can be acquired.

59:27.000 --> 59:28.180
Nee, nee, nee, nee, nee, hier.

59:28.640 --> 59:31.900
Blocking the current thread until it can be acquired.

59:36.320 --> 59:41.300
This function will not return while other writers or other readers currently have access to the lock.

59:42.640 --> 59:44.880
Okay, das, das hängt einfach an der Stelle.

59:45.380 --> 59:46.820
Das ist aber auch okay, dass das hängt.

59:47.080 --> 59:47.800
Weil wir wollen ja,

59:48.660 --> 59:50.860
die einzige mutable reference haben,

59:50.860 --> 59:52.060
dass wir was einfügen können.

59:54.180 --> 59:55.340
Rust 5 hat, ja.

59:55.340 --> 59:57.200
So, also jetzt haben wir unsere

59:57.200 --> 59:59.620
Add-Methode. Das war erstaunlich einfach.

01:00:00.160 --> 01:00:01.180
Das war erstaunlich,

01:00:01.240 --> 01:00:02.840
erstaunlich einfach bis jetzt.

01:00:03.440 --> 01:00:03.560
So.

01:00:05.420 --> 01:00:07.220
Als nächstes brauchen wir

01:00:07.220 --> 01:00:09.020
einen Get. Muss ich hier überhaupt

01:00:09.020 --> 01:00:10.360
public davor schreiben?

01:00:11.700 --> 01:00:13.220
Pub fn

01:00:13.220 --> 01:00:14.060
get

01:00:14.060 --> 01:00:16.720
und self.

01:00:19.250 --> 01:00:20.270
Jetzt brauche ich eine ID.

01:00:25.720 --> 01:00:26.940
Jetzt brauche ich eine ID.

01:00:30.870 --> 01:00:32.050
Moment, wait a minute.

01:00:32.050 --> 01:00:34.030
Wait a minute. Ich hab doch die ID gar nicht.

01:00:34.210 --> 01:00:35.590
Moment, hier muss die

01:00:35.590 --> 01:00:36.470
to do

01:00:36.470 --> 01:00:38.650
generate ID.

01:00:40.070 --> 01:00:42.270
Das funktioniert nicht so wie gedacht gerade.

01:00:45.440 --> 01:00:47.720
Wobei, muss ich jemals

01:00:47.720 --> 01:00:49.320
überhaupt einzelne Elemente

01:00:49.320 --> 01:00:51.080
daraus getten? Ja klar,

01:00:51.260 --> 01:00:52.100
für die Connections.

01:00:53.360 --> 01:00:55.040
Das heißt, mein Add muss

01:00:55.040 --> 01:00:57.320
eigentlich die ID returnen,

01:00:57.360 --> 01:00:58.220
dass das funktioniert.

01:01:00.200 --> 01:01:01.340
Return ID.

01:01:05.370 --> 01:01:06.390
Jetzt weiß ich

01:01:06.390 --> 01:01:06.830
die ID.

01:01:06.830 --> 01:01:08.350
So, jetzt habe ich,

01:01:08.350 --> 01:01:10.430
jetzt habe ich die ID und jetzt kann ich

01:01:10.430 --> 01:01:11.590
wahrscheinlich sagen

01:01:11.590 --> 01:01:13.010
self

01:01:13.010 --> 01:01:16.070
store read

01:01:16.070 --> 01:01:18.270
reicht jetzt. Unwrap

01:01:18.270 --> 01:01:20.490
get Element

01:01:20.490 --> 01:01:22.630
oder sowas. Get Key Value.

01:01:24.210 --> 01:01:24.570
Was?

01:01:24.970 --> 01:01:25.090
Get?

01:01:28.930 --> 01:01:29.150
What?

01:01:30.670 --> 01:01:31.010
Get.

01:01:32.770 --> 01:01:34.630
Und jetzt ID.

01:01:35.410 --> 01:01:37.250
Und das Ganze dann returnen.

01:01:39.090 --> 01:01:39.930
Return Funst.

01:01:39.930 --> 01:01:40.870
Okay, was?

01:01:41.130 --> 01:01:43.130
Unwrap. Unwrap. Nochmal hinten

01:01:43.130 --> 01:01:43.650
drauf. Bam.

01:01:46.660 --> 01:01:47.780
Was? Founds?

01:01:48.560 --> 01:01:53.580
Was willst du, Rust?

01:01:56.790 --> 01:01:57.690
Expected und

01:01:57.690 --> 01:01:58.750
found und T.

01:02:00.550 --> 01:02:01.950
Ach so, der Return Type

01:02:01.950 --> 01:02:06.060
fehlt. Der Return

01:02:06.060 --> 01:02:07.900
Type. Was hat er hier unten für Schmerzen?

01:02:09.540 --> 01:02:09.900
Ah!

01:02:10.780 --> 01:02:11.880
Moment, Moment.

01:02:12.020 --> 01:02:13.940
Get muss eine Referenz sein dahin.

01:02:14.660 --> 01:02:15.620
Okay, okay.

01:02:15.620 --> 01:02:18.080
Und jetzt

01:02:18.080 --> 01:02:19.580
kann ich auch eine Reference

01:02:19.580 --> 01:02:19.620
returnen.

01:02:20.160 --> 01:02:20.800
Dazu.

01:02:20.800 --> 01:02:22.420
Geht aber immer noch nicht.

01:02:22.420 --> 01:02:25.120
Cannot return value reference

01:02:25.120 --> 01:02:26.360
und Tab. Oh je, oh je.

01:02:26.580 --> 01:02:27.920
Was? Was will er von mir?

01:02:34.860 --> 01:02:36.160
Ne, was soll ich denn sonst machen außer

01:02:36.160 --> 01:02:41.590
unwrap? Moment, Moment.

01:02:41.710 --> 01:02:43.330
Das kann ja nicht funktionieren.

01:02:45.710 --> 01:02:47.210
Wobei, warum eigentlich nicht?

01:02:49.090 --> 01:02:49.770
Das ist

01:02:49.770 --> 01:02:51.470
eine Referenz. Ach so,

01:02:51.570 --> 01:02:53.210
ich weiß, warum das nicht funktionieren

01:02:53.210 --> 01:02:55.690
kann. Das ist eine Referenz

01:02:55.690 --> 01:02:57.830
und ich könnte ja jederzeit

01:02:57.830 --> 01:02:59.610
den Inhalt löschen

01:02:59.610 --> 01:03:00.690
hier drin zum Beispiel.

01:03:03.080 --> 01:03:05.520
Heißt im Endeffekt, dann würde, wäre die Referenz

01:03:05.520 --> 01:03:07.600
ungültig und das mag Rust ja nicht.

01:03:08.560 --> 01:03:09.820
Also, was muss ich jetzt machen?

01:03:10.300 --> 01:03:11.900
Cannot return. Was schlägt

01:03:11.900 --> 01:03:13.060
mir denn der Compiler vor?

01:03:15.180 --> 01:03:16.140
Returns the value

01:03:16.140 --> 01:03:17.980
referencing data owned by

01:03:17.980 --> 01:03:19.140
the current function.

01:03:26.650 --> 01:03:28.510
Okay, ich habe was gelernt. Ich glaube, ich weiß,

01:03:28.610 --> 01:03:29.530
wie wir das fixen können.

01:03:30.550 --> 01:03:32.330
Ich glaube, ich weiß, wie wir das fixen können.

01:03:32.770 --> 01:03:34.550
Genauso wie wir es hier gefixt haben.

01:03:35.450 --> 01:03:36.430
Ein ARK

01:03:36.430 --> 01:03:37.250
drumherum rappen.

01:03:42.300 --> 01:03:43.100
Also es ist jetzt nicht...

01:03:43.100 --> 01:03:59.190
es ist jetzt nicht type t sondern es ist type arc of t und dann hier ist es arc new ergibt das so

01:03:59.190 --> 01:04:10.470
sinn und jetzt und jetzt krieg ich nen arc zurück und den können wir klonen was den referenz counter

01:04:10.470 --> 01:04:28.300
erhöht und dann sollte es funktionieren hey es kommt bald five head time es funktioniert ob es

01:04:28.300 --> 01:04:32.680
genau das macht was ich haben will chat hat irgendjemanden plan was der unterschied ist

01:04:32.680 --> 01:04:40.360
zwischen box und arc also arc ist ein referenz counter das weiß ich genauso wie rc warum es

01:04:40.360 --> 01:04:42.500
unterschiedliche sachen gibt habe ich auch noch nicht gecheckt

01:04:42.500 --> 01:04:58.630
aber ich vermute mal dass box keine ahnung ich wollte gerade sagen ich vermute würde das auch

01:04:58.630 --> 01:05:05.510
so funktioniert mit box box of t ja arc ist atomic aber was ist das in dem fall bedeuten soll keine

01:05:05.510 --> 01:05:28.360
ahnung okay das funktioniert expected box found und box und box das ist das gleiche problem wir

01:05:28.360 --> 01:05:30.080
müssen das mit arc machen weil es reds

01:05:30.080 --> 01:05:36.500
threat safety genau so wunderbar also wenn ich das richtig verstehe passiert jetzt folgendes

01:05:36.500 --> 01:05:43.100
der speichert jetzt also der

01:05:43.100 --> 01:05:51.080
arc also das ist ein atomic referenz counter der arc übernimmt ownership of t das ist so rust logik

01:05:51.080 --> 01:05:59.640
für gibt es eigentlich in anderen sprachen oftmals nichts direkt vergleichbares also t gehört dem arc und arc selbst ist ein referenct counter oder auch einfach statisch

01:05:59.640 --> 01:06:01.540
gehört dem Arc. Und Arc

01:06:01.540 --> 01:06:03.660
selbst ist ein Reference-Counter. Und jedes Mal,

01:06:04.300 --> 01:06:05.780
wenn ich den klone,

01:06:06.020 --> 01:06:07.420
wird der Reference-Counter um 1

01:06:07.420 --> 01:06:09.740
hochgezählt. Und erst, wenn der Reference-Counter

01:06:09.740 --> 01:06:11.140
bei 0 ist, wird

01:06:11.140 --> 01:06:13.480
das freigegeben. Das heißt, jetzt

01:06:13.480 --> 01:06:14.560
kann ich safe

01:06:14.560 --> 01:06:17.520
das returnen, weil dadurch, dass

01:06:17.520 --> 01:06:19.760
es in einem Arc ist, immer sichergestellt

01:06:19.760 --> 01:06:21.440
ist, solange ich noch irgendwo

01:06:21.440 --> 01:06:23.360
eine gültige Referenz habe, ein bisschen wie der

01:06:23.360 --> 01:06:25.020
Garbage-Collector in C-Sharp,

01:06:25.340 --> 01:06:27.160
naja, ganz, ganz

01:06:27.160 --> 01:06:28.240
light, ja.

01:06:28.240 --> 01:06:28.880
Ähm,

01:06:30.480 --> 01:06:32.240
sobald ich quasi noch irgendwie

01:06:32.240 --> 01:06:34.400
den Reference-Counter habe, dann

01:06:34.400 --> 01:06:36.420
ist das

01:06:36.420 --> 01:06:38.380
quasi sicher und kann nie out of

01:06:38.380 --> 01:06:42.680
scope gehen. Oh man, die Musik

01:06:42.680 --> 01:06:44.160
ist vorbei. Sack.

01:06:47.870 --> 01:06:49.010
Tüm, tüm, tüm.

01:06:54.320 --> 01:06:56.400
Gut. So, jetzt haben wir,

01:06:56.520 --> 01:06:58.360
jetzt können wir das Element getten. Auch

01:06:58.360 --> 01:07:03.030
schon mal nice. RC

01:07:03.030 --> 01:07:05.290
cannot be shared between threads.

01:07:05.870 --> 01:07:07.010
Ja, deswegen braucht man wahrscheinlich

01:07:07.010 --> 01:07:09.410
Arc, dass der Reference-Counter

01:07:10.410 --> 01:07:10.970
irgendwie

01:07:10.970 --> 01:07:12.670
atomic-mäßig erhöht wird und damit

01:07:12.670 --> 01:07:14.770
thread-safe ist. Rate ich jetzt

01:07:14.770 --> 01:07:18.700
einfach mal. So, so weit,

01:07:18.700 --> 01:07:20.640
so gut. Was hat er hier? Registry is never

01:07:20.640 --> 01:07:22.900
constructed. Die IDE

01:07:22.900 --> 01:07:24.180
ist auch schon ein bisschen pepeger, oder?

01:07:24.820 --> 01:07:26.680
Ja gut, die Funktion wird nicht aufgerufen.

01:07:26.840 --> 01:07:28.740
Ja, okay. Okay, okay. Lass ich mir gefallen.

01:07:29.860 --> 01:07:31.000
So, das brauchen wir als nächstes

01:07:31.000 --> 01:07:32.700
delete. Delete

01:07:32.700 --> 01:07:33.760
brauchen wir als nächstes.

01:07:35.060 --> 01:07:36.520
Fn, nennen wir einfach

01:07:36.520 --> 01:07:36.880
del

01:07:36.880 --> 01:07:40.300
U32, die ID und jetzt,

01:07:40.580 --> 01:07:42.400
das dürfte relativ easy sein.

01:07:42.540 --> 01:07:45.680
Das dürfte relativ easy sein.

01:07:45.800 --> 01:07:47.820
Self, Moment, das kann ich doch eigentlich so lassen.

01:07:48.320 --> 01:07:49.760
Self-Store, jetzt wahrscheinlich

01:07:49.760 --> 01:07:51.620
write, jetzt wahrscheinlich write.

01:07:52.520 --> 01:07:53.000
Ähm,

01:07:54.380 --> 01:07:56.080
wie löscht man, wie löscht man da was?

01:07:56.640 --> 01:07:57.720
Get, insert,

01:07:57.920 --> 01:07:59.000
ether, clear, ne.

01:07:59.860 --> 01:08:02.140
Ich will sowas wie erase, delete oder sowas.

01:08:02.260 --> 01:08:02.620
Remove.

01:08:03.920 --> 01:08:04.420
Remove.

01:08:05.820 --> 01:08:06.780
Remove entry.

01:08:15.520 --> 01:08:17.760
Oh. Was ist der

01:08:17.760 --> 01:08:18.120
Unterschied?

01:08:18.120 --> 01:08:18.280
What?

01:08:21.820 --> 01:08:24.840
Remove the key from the map returning the stored key and the

01:08:24.860 --> 01:08:26.680
value of the key was previously in the map.

01:08:28.840 --> 01:08:29.100
Okay.

01:08:29.980 --> 01:08:31.140
Und, und.

01:08:32.440 --> 01:08:33.300
Remove is?

01:08:33.720 --> 01:08:35.960
Remove the key from the map returning the value

01:08:35.960 --> 01:08:38.040
at the key. Achso, das eine

01:08:38.040 --> 01:08:40.240
returned key value und das andere returned

01:08:40.240 --> 01:08:42.040
nur den value. Ich will überhaupt nichts

01:08:42.040 --> 01:08:42.480
return.

01:08:43.700 --> 01:08:45.860
Gibt sowas wie drop oder so? Hey!

01:08:46.600 --> 01:08:47.620
Moment, ist wieder was anderes.

01:08:48.480 --> 01:08:49.640
Was zum Teufel macht drop?

01:08:51.240 --> 01:08:52.140
Drop ist

01:08:52.140 --> 01:08:53.820
so Nische, das hat auch nicht mal

01:08:53.820 --> 01:08:55.160
irgendeinen Hilfetext.

01:08:55.160 --> 01:09:00.960
Also, remove.

01:09:00.960 --> 01:09:02.960
Einfach nur remove.

01:09:02.960 --> 01:09:04.960
ID.

01:09:04.960 --> 01:09:06.960
Ha? Und da muss auch gar nichts

01:09:06.960 --> 01:09:08.960
returned werden. Einfach so.

01:09:08.960 --> 01:09:10.960
Easy. Eats. Eats.

01:09:10.960 --> 01:09:14.600
Easy as fuck.

01:09:14.600 --> 01:09:16.600
Easy as fuck.

01:09:16.600 --> 01:09:19.970
Moment, es funzt wieder nicht. Warum?

01:09:19.970 --> 01:09:21.970
Achso, und.

01:09:21.970 --> 01:09:25.920
Mit was? Mit Steuerung Q

01:09:25.920 --> 01:09:30.580
kannst du. Meinst

01:09:30.580 --> 01:09:36.260
du hier? Ne.

01:09:36.260 --> 01:09:40.280
Ich hab Visual Studio Key Mappings.

01:09:40.280 --> 01:09:42.120
Keine Ahnung. Ich glaube, das war keine gute Idee.

01:09:42.120 --> 01:09:44.120
Okay.

01:09:44.120 --> 01:09:46.120
Ja, das war's

01:09:46.120 --> 01:09:48.120
doch im Großen und Ganzen schon.

01:09:48.120 --> 01:09:50.120
Und jetzt, jetzt eigentlich nur noch sowas

01:09:50.120 --> 01:09:52.120
wie

01:09:52.120 --> 01:09:54.120
public function

01:09:54.120 --> 01:09:56.120
Ja.

01:09:56.120 --> 01:09:58.120
Nenn ich mal, weiß ich, all

01:09:58.120 --> 01:10:00.120
oder so. All.

01:10:00.120 --> 01:10:02.120
Irgendwas, irgendwas

01:10:02.120 --> 01:10:04.120
in der Richtung.

01:10:04.120 --> 01:10:09.730
All.

01:10:09.730 --> 01:10:11.730
Und jetzt quasi return

01:10:11.730 --> 01:10:13.730
self. Ach, Moment.

01:10:13.730 --> 01:10:17.560
Self.

01:10:17.560 --> 01:10:19.560
Store.

01:10:19.560 --> 01:10:21.560
Ähm.

01:10:23.560 --> 01:10:25.560
Read. Vermutlich.

01:10:25.560 --> 01:10:29.380
Vermutlich read.

01:10:29.380 --> 01:10:32.820
Unwrap.

01:10:32.820 --> 01:10:37.800
Ether. Klingt gut.

01:10:37.800 --> 01:10:39.800
Und das jetzt einfach zurückgeben, oder?

01:10:39.800 --> 01:10:41.800
Das müsste doch sein.

01:10:41.800 --> 01:10:43.800
Ne, ist es nicht.

01:10:43.800 --> 01:10:45.800
Warum nicht?

01:10:45.800 --> 01:10:47.800
Oh Gott, Rust. Warum ist das

01:10:47.800 --> 01:10:49.800
wieder kompliziert?

01:10:49.800 --> 01:10:51.800
Returns a value referencing

01:10:51.800 --> 01:10:53.800
data owned by the current function.

01:10:53.800 --> 01:10:55.800
Was ist

01:10:55.800 --> 01:10:57.800
das eigentlich für ein ultrahässlicher

01:10:57.800 --> 01:10:59.800
return-Wert?

01:10:59.800 --> 01:11:01.800
Ether?

01:11:01.800 --> 01:11:03.800
Single quotes?

01:11:03.800 --> 01:11:05.800
Underscore?

01:11:05.800 --> 01:11:09.300
What?

01:11:09.300 --> 01:11:11.300
Kann man das nicht einfach löschen?

01:11:11.300 --> 01:11:13.300
Naja, bringt nichts.

01:11:13.300 --> 01:11:15.300
Okay, Rust. Ich habe

01:11:15.300 --> 01:11:17.300
legit keine Ahnung, wie das

01:11:17.300 --> 01:11:19.300
funktioniert. Ich hätte, Leute,

01:11:19.300 --> 01:11:21.300
ich hab, ich hab absolute

01:11:21.300 --> 01:11:23.300
pepega Idee, was wir machen könnten.

01:11:23.300 --> 01:11:25.300
Wir können sagen,

01:11:25.300 --> 01:11:27.300
unwrap, clone,

01:11:27.300 --> 01:11:33.170
und wir returnen eine neue

01:11:33.170 --> 01:11:35.170
Hashmap jedes Mal, wenn wir all.

01:11:35.170 --> 01:11:37.170
Aber das kann es ja nicht sein, oder?

01:11:42.530 --> 01:11:44.530
Ich will, ich will einfach nur

01:11:44.530 --> 01:11:46.530
außerhalb eine Schleife machen

01:11:46.530 --> 01:11:48.530
können über alle Elemente in der

01:11:48.530 --> 01:11:50.530
Registry. Wie funktioniert das?

01:11:50.530 --> 01:11:54.480
Ich will sagen können,

01:11:54.480 --> 01:11:56.480
for,

01:11:56.480 --> 01:11:59.800
äh, Moment,

01:11:59.800 --> 01:12:01.800
äh, for,

01:12:01.800 --> 01:12:05.940
er,

01:12:05.940 --> 01:12:07.940
all,

01:12:07.940 --> 01:12:09.940
äh, ja,

01:12:09.940 --> 01:12:11.940
blub, oh.

01:12:11.940 --> 01:12:13.940
Das, das will ich sagen können.

01:12:13.940 --> 01:12:15.940
Das funzt jetzt an der Stelle, klar,

01:12:15.940 --> 01:12:17.940
weil ich eine neue Map mache,

01:12:17.940 --> 01:12:19.940
aber ich will ja, ich will ja nicht

01:12:19.940 --> 01:12:21.940
wirklich die Map einmal komplett

01:12:21.940 --> 01:12:23.940
klonen, bei,

01:12:23.940 --> 01:12:25.940
bei jedem Aufruf. Das ist ja nicht Sinn

01:12:25.940 --> 01:12:29.760
und Zweck der Sache.

01:12:29.760 --> 01:12:31.760
Okay, Stackoverflow, Rust,

01:12:31.760 --> 01:12:33.760
return Iterator,

01:12:33.760 --> 01:12:43.760
oh.

01:12:43.760 --> 01:12:45.760
Returning Iter, oh, was?

01:12:45.760 --> 01:12:47.760
Returning Rust Iterators.

01:12:47.760 --> 01:12:49.760
Depth first.

01:12:49.760 --> 01:12:53.520
Returning an Iterator.

01:12:53.520 --> 01:12:55.520
Ja, genau, das, genau das will ich

01:12:55.520 --> 01:12:57.520
machen und das habe ich auch gerade gemacht, aber

01:12:57.520 --> 01:13:02.180
das funzt nicht.

01:13:02.180 --> 01:13:04.180
The compiler produces an error.

01:13:04.180 --> 01:13:06.180
The type is

01:13:06.180 --> 01:13:08.180
contained within the error messages. Ja, genau

01:13:08.180 --> 01:13:10.180
das, genau das habe ich

01:13:10.180 --> 01:13:12.180
gerade gemacht.

01:13:12.180 --> 01:13:14.180
Genau das habe ich gerade gemacht.

01:13:14.180 --> 01:13:16.180
Beifettige

01:13:16.180 --> 01:13:18.180
Webseite,

01:13:18.180 --> 01:13:20.180
aber,

01:13:20.180 --> 01:13:22.180
Moment,

01:13:22.180 --> 01:13:24.180
Moment, das funzt.

01:13:24.180 --> 01:13:26.180
Ne, das funzt nicht.

01:13:26.180 --> 01:13:28.180
Das ist nicht das, was ich haben will.

01:13:28.180 --> 01:13:30.180
Oh, Mann.

01:13:30.180 --> 01:13:32.180
IDE, please.

01:13:32.180 --> 01:13:34.180
So.

01:13:34.180 --> 01:13:36.180
Genau das habe ich gemacht, aber das funzt nicht.

01:13:38.180 --> 01:13:40.180
Gibt es da nicht Intuita?

01:13:40.180 --> 01:13:42.180
Ja, aber ich will ja nicht Ownership zurückgeben.

01:13:42.180 --> 01:13:47.480
Ich will ja nicht Ownership

01:13:47.480 --> 01:13:50.920
zurückgeben, sondern

01:13:50.920 --> 01:13:52.920
einfach nur eine,

01:13:52.920 --> 01:13:54.920
ja,

01:13:54.920 --> 01:13:56.920
jede Menge,

01:13:56.920 --> 01:13:58.920
die Referenzen auf die Elemente

01:13:58.920 --> 01:14:00.920
in diesem,

01:14:00.920 --> 01:14:07.750
in dieser Hashmap.

01:14:07.750 --> 01:14:09.750
So, also, das, was die Seite vorschlägt,

01:14:09.750 --> 01:14:11.750
funzt nicht, weil dann

01:14:11.750 --> 01:14:13.750
returns a value

01:14:13.750 --> 01:14:15.750
referencing data owned by the

01:14:15.750 --> 01:14:20.530
current function.

01:14:20.530 --> 01:14:22.530
Und da bin ich mir nicht sicher, was es mir sagen möchte,

01:14:22.530 --> 01:14:24.530
ehrlich gesagt. Muss ich vielleicht

01:14:24.530 --> 01:14:26.530
das hier erst nochmal, Moment, muss ich sagen

01:14:26.530 --> 01:14:28.530
let m irgendwie so

01:14:28.530 --> 01:14:34.080
und dann, ne, das funktioniert natürlich

01:14:34.080 --> 01:14:36.080
auch nicht. Okay.

01:14:36.080 --> 01:14:38.080
Geht das, also, das habe ich probiert.

01:14:38.080 --> 01:14:42.040
Laut der Seite geht das

01:14:42.040 --> 01:14:44.040
so. Ist das irgendwie,

01:14:44.040 --> 01:14:46.040
ist das irgendwie so eine AI

01:14:46.040 --> 01:14:48.040
generierte Webseite, aber von 2020

01:14:48.040 --> 01:14:50.040
eher nicht. Irgendeine AI

01:14:50.040 --> 01:14:57.000
generierte Webseite.

01:14:57.000 --> 01:14:59.000
Das ist gut. How to implement

01:14:59.000 --> 01:15:01.000
iterator

01:15:01.000 --> 01:15:03.000
over wrapped vector

01:15:03.000 --> 01:15:05.000
in Rust. Genau.

01:15:05.000 --> 01:15:07.000
Hier, wrapped.

01:15:07.000 --> 01:15:09.000
Und jetzt will der, dass man das

01:15:09.000 --> 01:15:11.000
iteraten kann. Genau das will ich.

01:15:11.000 --> 01:15:24.040
Genau so was will ich haben.

01:15:24.040 --> 01:15:26.040
Actual to call it as you described,

01:15:26.040 --> 01:15:28.040
you don't need to implement iterator.

01:15:28.040 --> 01:15:30.040
For it, you just

01:15:30.040 --> 01:15:32.040
need to return the iterator

01:15:32.040 --> 01:15:37.910
of the inner vec.

01:15:37.910 --> 01:15:44.290
Ja, ich habe das schon gesehen, den Link.

01:15:44.290 --> 01:15:49.200
Okay, six hat time.

01:15:49.200 --> 01:15:51.200
Okay, probieren wir das doch mal so aus.

01:15:51.200 --> 01:15:53.200
Das, das sollte doch nicht

01:15:53.200 --> 01:15:58.560
allzu kompliziert sein.

01:15:58.560 --> 01:16:00.560
So, self, jetzt brauchen wir erstmal

01:16:00.560 --> 01:16:06.120
hier den, den, mal probieren,

01:16:06.120 --> 01:16:08.120
blenden wir das mal aus hier, so, zack.

01:16:08.120 --> 01:16:10.120
M.

01:16:10.120 --> 01:16:13.810
M. Iter.

01:16:13.810 --> 01:16:15.810
Funzt nicht, weil

01:16:15.810 --> 01:16:17.810
unelide

01:16:17.810 --> 01:16:19.810
lifetimes.

01:16:19.810 --> 01:16:21.810
What?

01:16:21.810 --> 01:16:30.370
Weiß nicht mehr, was es will von mir.

01:16:30.370 --> 01:16:34.000
Ich lass mal hier den.

01:16:34.000 --> 01:16:37.320
Okay, und jetzt, jetzt geht das?

01:16:37.320 --> 01:16:39.320
Method

01:16:39.320 --> 01:16:41.320
not found. Achso.

01:16:41.320 --> 01:16:46.420
Moment. Ne.

01:16:46.420 --> 01:16:48.420
Returns the value referencing data

01:16:48.420 --> 01:16:50.420
owned by the current function. Okay.

01:16:50.420 --> 01:16:52.420
Das funzt schon mal nicht.

01:16:52.420 --> 01:16:54.420
So, das geht nicht.

01:16:54.420 --> 01:16:56.420
Also, stackoverflow fail.

01:16:56.420 --> 01:16:58.420
Ne, da fehlt

01:16:58.420 --> 01:17:00.420
kein return. Wenn man

01:17:00.420 --> 01:17:02.420
das Semikolon weglässt,

01:17:02.420 --> 01:17:04.420
wird die letzte Zeile

01:17:04.420 --> 01:17:06.420
automatisch als return verwendet.

01:17:06.420 --> 01:17:08.420
Ist auch ein bisschen,

01:17:08.420 --> 01:17:10.420
weiß nicht, bisschen pepeger irgendwie, dass es

01:17:10.420 --> 01:17:14.950
dafür was extra gibt. Aber

01:17:14.950 --> 01:17:25.240
das funktioniert nicht.

01:17:25.240 --> 01:17:27.240
Also, stackoverflow Antwort

01:17:27.240 --> 01:17:29.240
three hat.

01:17:29.240 --> 01:17:31.240
Okay, nächste Antwort.

01:17:31.240 --> 01:17:33.240
Accepted Antwort. Accepted Antwort.

01:17:33.240 --> 01:17:35.240
Weck it self,

01:17:35.240 --> 01:17:37.240
does not implement iterator. However, it

01:17:37.240 --> 01:17:39.240
implements into iterator in three ways.

01:17:39.240 --> 01:17:44.210
You probably wanted

01:17:44.210 --> 01:17:46.210
to implement these for your wrapper as

01:17:46.210 --> 01:17:49.650
well. Ne, into iterator

01:17:49.650 --> 01:17:51.650
will ich schon mal net.

01:17:51.650 --> 01:17:55.480
Deref.

01:17:55.480 --> 01:17:57.480
We deref to slice

01:17:57.480 --> 01:18:01.430
so that we can. Ich,

01:18:01.430 --> 01:18:04.800
was, was bin

01:18:04.800 --> 01:18:09.270
ich überhaupt sehend hier grade?

01:18:09.270 --> 01:18:11.270
Implementier doch den iterator für

01:18:11.270 --> 01:18:13.270
arg iterator, oder bin ich grad dumm?

01:18:13.270 --> 01:18:15.270
Ja, wie denn?

01:18:15.270 --> 01:18:25.140
Alter, was?

01:18:25.140 --> 01:18:27.140
Okay, implement iterator.

01:18:27.140 --> 01:18:29.140
So, so,

01:18:29.140 --> 01:18:31.140
okay. Also so einfach wie stackoverflow

01:18:31.140 --> 01:18:33.140
das macht, geht das schon mal net.

01:18:33.140 --> 01:18:35.140
Also implement iterator

01:18:35.140 --> 01:18:37.140
for registry

01:18:37.140 --> 01:18:39.140
of, äh, t.

01:18:39.140 --> 01:18:50.480
So. Ähm,

01:18:50.480 --> 01:18:52.480
was? Okay,

01:18:52.480 --> 01:18:54.480
item type, type

01:18:54.480 --> 01:18:56.480
item gleich u32.

01:18:56.480 --> 01:19:03.120
Äh,

01:19:03.120 --> 01:19:05.120
ne, mein item type

01:19:05.120 --> 01:19:09.270
ist t. Und dementsprechend

01:19:09.270 --> 01:19:11.270
ist es auch einfach option of t.

01:19:11.270 --> 01:19:13.270
Und das da oben lass ich

01:19:13.270 --> 01:19:26.980
weg. Und was?

01:19:26.980 --> 01:19:28.980
Ich check's nicht, was der hier macht.

01:19:28.980 --> 01:19:30.980
Was soll das, was soll das,

01:19:30.980 --> 01:19:32.980
was soll das, was soll das heißen?

01:19:32.980 --> 01:19:34.980
Oh, ach, man muss

01:19:34.980 --> 01:19:36.980
das? Moment, man braucht das hier?

01:19:36.980 --> 01:19:38.980
Okay, das ist, das ist

01:19:38.980 --> 01:19:40.980
erforderlich. Das geht nicht.

01:19:40.980 --> 01:19:42.980
Hast du Tipps, wie man am besten

01:19:42.980 --> 01:19:44.980
anfangen kann zu programmieren? Ja,

01:19:44.980 --> 01:19:46.980
der beste Tipp ist, du hast irgendwie

01:19:46.980 --> 01:19:48.980
ne coole Idee, was du schon immer mal

01:19:48.980 --> 01:19:50.980
machen wolltest, und suchst dir die beste

01:19:50.980 --> 01:19:52.980
Technologie dafür raus und fängst damit an.

01:19:52.980 --> 01:19:54.980
Weil dann hast du auch immer Motivation, was, äh,

01:19:54.980 --> 01:19:56.980
was zu machen, weil das ja was ist, was du

01:19:56.980 --> 01:19:58.980
letztendlich schon immer mal machen wolltest.

01:19:58.980 --> 01:20:00.980
Also wenn du sagst, ich würd gerne

01:20:00.980 --> 01:20:02.980
Microcontroller programmieren, ne eigene Webseite

01:20:02.980 --> 01:20:04.980
machen, meinen Rollladen hoch

01:20:04.980 --> 01:20:06.980
und runter fahren automatisch,

01:20:06.980 --> 01:20:08.980
das ist natürlich am besten, wenn du so ein Ziel schon im Kopf

01:20:08.980 --> 01:20:10.980
hast. Das ist motivierend.

01:20:10.980 --> 01:20:12.980
Wenn du gar keine Ahnung hast, wie du anfangen

01:20:12.980 --> 01:20:14.980
sollst und einfach nur gucken willst,

01:20:14.980 --> 01:20:16.980
ob das was für dich ist, kann ich dir

01:20:16.980 --> 01:20:18.980
nur empfehlen, lad dir Visual

01:20:18.980 --> 01:20:20.980
Studio Code runter und fang mit JavaScript an.

01:20:20.980 --> 01:20:24.480
JavaScript,

01:20:24.480 --> 01:20:26.480
ein bisschen HTML, CSS, hat

01:20:26.480 --> 01:20:28.480
die mit Abstand niedrigste Einstiegshürde.

01:20:28.480 --> 01:20:30.480
Du brauchst einen ordentlichen Texteditor,

01:20:30.480 --> 01:20:32.480
wie gesagt, nimm Visual Studio Code, ist

01:20:32.480 --> 01:20:34.480
alles out of the box für JavaScript dabei,

01:20:34.480 --> 01:20:36.480
und du brauchst nen Browser.

01:20:36.480 --> 01:20:38.480
Und nen Browser hast du, sonst wärst du ja nicht im Twitch-Chat.

01:20:38.480 --> 01:20:40.480
Und dann legst du los.

01:20:40.480 --> 01:20:50.520
Ich check nicht, was ich

01:20:50.520 --> 01:20:52.520
machen muss, Chat. Was will, was will das hier

01:20:52.520 --> 01:20:59.090
von mir?

01:20:59.090 --> 01:21:01.090
Here we define a sequence using current und next.

01:21:01.090 --> 01:21:06.520
fn next.

01:21:06.520 --> 01:21:08.520
Okay, Option will ich doch gar nicht.

01:21:08.520 --> 01:21:10.520
Oder?

01:21:10.520 --> 01:21:12.520
Ich will einfach t return.

01:21:12.520 --> 01:21:16.980
Ne, das geht nicht.

01:21:16.980 --> 01:21:18.980
Es muss ne Option, es muss ne Option sein.

01:21:18.980 --> 01:21:24.080
So, also, Moment.

01:21:24.080 --> 01:21:32.770
Kann ich nicht...

01:21:32.770 --> 01:21:38.200
Current, next?

01:21:38.200 --> 01:21:41.700
Self, current?

01:21:41.700 --> 01:21:45.200
What? Kann ich nicht das

01:21:45.200 --> 01:21:47.200
einfach re-usen?

01:21:47.200 --> 01:21:49.200
Store?

01:21:49.200 --> 01:21:51.200
Kann ich das nicht einfach re-usen?

01:21:51.200 --> 01:22:04.050
Von...

01:22:04.050 --> 01:22:06.050
Read. Kann ich das nicht einfach re-usen?

01:22:06.050 --> 01:22:08.050
Von dem anderen?

01:22:08.050 --> 01:22:19.300
Und so.

01:22:19.300 --> 01:22:21.300
Die, die

01:22:21.300 --> 01:22:23.300
Referenzen, wobei, brauchen wir

01:22:23.300 --> 01:22:26.870
eigentlich nicht. Dass ich jetzt sagen kann,

01:22:26.870 --> 01:22:34.150
irgendwie, return m

01:22:34.150 --> 01:22:38.680
next.

01:22:38.680 --> 01:22:40.680
Ja, das kann man doch einfach rappen, oder?

01:22:40.680 --> 01:22:50.580
Return n.

01:22:50.580 --> 01:22:52.580
Wobei, ne, ne,

01:22:52.580 --> 01:23:03.320
Moment, Moment.

01:23:03.320 --> 01:23:07.200
Was muss man returnen?

01:23:07.200 --> 01:23:09.200
Hier return, was? Option?

01:23:09.200 --> 01:23:11.200
Option of

01:23:11.200 --> 01:23:13.200
u32t.

01:23:13.200 --> 01:23:15.200
Oh man, was ist denn jetzt?

01:23:15.200 --> 01:23:17.200
Was? Method next?

01:23:17.200 --> 01:23:19.200
Compar...

01:23:19.200 --> 01:23:21.200
Expected...

01:23:21.200 --> 01:23:25.920
Achso, ah, ah, Moment,

01:23:25.920 --> 01:23:29.940
Moment, Moment.

01:23:29.940 --> 01:23:31.940
Was muss ich sagen?

01:23:31.940 --> 01:23:33.940
Wie haben die gesagt? Self?

01:23:33.940 --> 01:23:37.570
Item? Item?

01:23:37.570 --> 01:23:39.570
Ne, wie haben die das hier gemacht?

01:23:39.570 --> 01:23:43.080
Oh man, shit, das ist,

01:23:43.080 --> 01:23:45.080
das ist ja super komplizierter Shit wieder.

01:23:45.080 --> 01:23:57.670
Self, self,

01:23:57.670 --> 01:23:59.670
cross, okay.

01:23:59.670 --> 01:24:01.670
Item.

01:24:01.670 --> 01:24:03.670
Und Item ist quasi

01:24:03.670 --> 01:24:05.670
u32t.

01:24:05.670 --> 01:24:07.670
Okay,

01:24:07.670 --> 01:24:09.670
ist nicht, weil...

01:24:09.670 --> 01:24:11.670
Achso, weil es und,

01:24:11.670 --> 01:24:13.670
es ist und u32

01:24:13.670 --> 01:24:15.670
aus irgendwelchen Gründen

01:24:15.670 --> 01:24:17.670
und ak...

01:24:17.670 --> 01:24:19.670
Alter, what the fuck,

01:24:19.670 --> 01:24:21.670
man.

01:24:21.670 --> 01:24:23.670
Pounds, was? Okay,

01:24:23.670 --> 01:24:28.580
u32. What the hell?

01:24:28.580 --> 01:24:30.580
Alter, Rust,

01:24:30.580 --> 01:24:32.580
man, ich will einfach ne Schleife

01:24:32.580 --> 01:24:34.580
drüber machen. Was will das denn

01:24:34.580 --> 01:24:36.580
von mir?

01:24:36.580 --> 01:24:40.920
Was will das

01:24:40.920 --> 01:24:47.880
von mir, man?

01:24:47.880 --> 01:25:10.390
Oh, fucking shit.

01:25:10.390 --> 01:25:12.390
Ich mein, okay, würde das dann

01:25:12.390 --> 01:25:17.300
prinzipiell überhaupt funktionieren?

01:25:17.300 --> 01:25:22.280
Würde das...

01:25:22.280 --> 01:25:27.960
Ne, all ist auskommentiert.

01:25:27.960 --> 01:25:29.960
Meine Güte. Okay, also,

01:25:29.960 --> 01:25:31.960
was, was, was will das von mir?

01:25:31.960 --> 01:25:37.990
Und.

01:25:37.990 --> 01:25:39.990
Okay, und und ist nicht erlaubt.

01:25:39.990 --> 01:25:41.990
Warum ist und nicht erlaubt? Weil...

01:25:41.990 --> 01:25:43.990
Missing lifetime

01:25:43.990 --> 01:25:47.430
specifier. Okay, Rust,

01:25:47.430 --> 01:25:49.430
hilf mir, Rust, please.

01:25:49.430 --> 01:25:51.430
Was?

01:25:51.430 --> 01:25:53.430
Und not a.

01:25:53.430 --> 01:25:55.430
Monka W.

01:25:55.430 --> 01:26:13.810
Oh.

01:26:13.810 --> 01:26:17.830
So. Okay.

01:26:17.830 --> 01:26:19.830
Okay. Ich habe absolut

01:26:19.830 --> 01:26:21.830
keine Ahnung, was ich da gerade mache.

01:26:21.830 --> 01:26:23.830
Okay, okay. Moment.

01:26:23.830 --> 01:26:25.830
Moment, Leute. Ne, was ist jetzt?

01:26:34.390 --> 01:26:37.890
Leute, man,

01:26:37.890 --> 01:26:39.890
es kann doch nicht so schwer sein.

01:26:39.890 --> 01:26:46.720
Ich habe absolut keine Ahnung, was

01:26:46.720 --> 01:26:55.160
Rust von mir will, man.

01:26:55.160 --> 01:26:57.160
Nehmen wir mal oben das a raus. Hab ich.

01:26:57.160 --> 01:26:59.160
Aber das, das

01:26:59.160 --> 01:27:01.160
geht nicht.

01:27:01.160 --> 01:27:03.160
Dann will er, dann will er nicht, weil

01:27:03.160 --> 01:27:05.160
lifetime specifier

01:27:05.160 --> 01:27:07.160
missing.

01:27:07.160 --> 01:27:09.160
So, und jetzt sagt er mir hier,

01:27:09.160 --> 01:27:11.160
Lifetime a is not constrained by

01:27:11.160 --> 01:27:13.160
the infiltrate self type

01:27:13.160 --> 01:27:15.160
or predicates.

01:27:15.160 --> 01:27:17.160
Alles klar, jetzt

01:27:17.160 --> 01:27:19.160
sofort. Muss man vielleicht so machen?

01:27:19.160 --> 01:27:21.160
Hier so?

01:27:21.160 --> 01:27:25.110
Ne. Ich habe keine

01:27:25.110 --> 01:27:27.110
Ahnung, man. Alter, Rust.

01:27:27.110 --> 01:27:29.110
Ich mache Fuck teilweise ja so krass ab, ey.

01:27:29.110 --> 01:27:33.830
Also, ich habe, ich habe wirklich,

01:27:33.830 --> 01:27:35.830
ich habe absolut keine Ahnung, was das Ding von mir

01:27:35.830 --> 01:27:48.420
will, man. Du musst es auch

01:27:48.420 --> 01:27:50.420
embracen, naja.

01:27:50.420 --> 01:27:52.420
Massive Embracing am Start.

01:27:52.420 --> 01:28:03.030
Okay, keine Ahnung.

01:28:03.030 --> 01:28:05.030
Wir gucken mal, wir gucken mal weiter.

01:28:05.030 --> 01:28:07.030
Also, das funzt ja schon mal nett.

01:28:07.030 --> 01:28:11.490
Wie das hier.

01:28:11.490 --> 01:28:13.490
Was haben wir denn sonst noch so zur Auswahl?

01:28:13.490 --> 01:28:15.490
Impel deref

01:28:15.490 --> 01:28:17.490
for binary. Okay, dann probier, okay.

01:28:17.490 --> 01:28:19.490
Wenn das mit dem iterator nicht funktioniert, dann probieren wir

01:28:19.490 --> 01:28:21.490
einfach was anderes.

01:28:21.490 --> 01:28:23.490
For registry

01:28:23.490 --> 01:28:31.600
T. Probier mal, Moment,

01:28:31.600 --> 01:28:33.600
was? Moment, wo soll ich

01:28:33.600 --> 01:28:35.600
das, wo soll ich das probieren?

01:28:35.600 --> 01:28:37.600
Wir kommentieren das mal aus, weil, vielleicht brauchen wir

01:28:37.600 --> 01:28:39.600
das gleich nochmal. Probier mal

01:28:39.600 --> 01:28:41.600
self next

01:28:41.600 --> 01:28:43.600
map. What?

01:28:43.600 --> 01:28:49.730
Was, Zeile 26?

01:28:49.730 --> 01:29:04.720
Fifetime.

01:29:04.720 --> 01:29:26.600
Ist ja nicht self, ist ja nur M.

01:29:26.600 --> 01:29:28.600
C++ Level Types würde ich

01:29:28.600 --> 01:29:30.600
sagen, ey.

01:29:30.600 --> 01:29:32.600
So, so, das wird jetzt auskommentiert.

01:29:32.600 --> 01:29:34.600
Okay, next.

01:29:34.600 --> 01:29:36.600
Also, probier mal das mit dem deref.

01:29:36.600 --> 01:29:38.600
Implement deref

01:29:38.600 --> 01:29:40.600
for, okay, T

01:29:40.600 --> 01:29:42.600
registry

01:29:42.600 --> 01:29:44.600
T

01:29:44.600 --> 01:29:48.420
output.

01:29:48.420 --> 01:30:19.640
Moment.

01:30:19.640 --> 01:30:23.330
Das sind die Elemente.

01:30:23.330 --> 01:30:28.180
Das sind, das sind die Elemente.

01:30:28.180 --> 01:30:30.180
Also, mein Element ist

01:30:30.180 --> 01:30:32.180
Output ist

01:30:32.180 --> 01:30:34.180
dann ein

01:30:34.180 --> 01:30:36.180
U32

01:30:36.180 --> 01:30:51.780
Vector of T.

01:30:51.780 --> 01:30:56.370
Self?

01:30:56.370 --> 01:30:58.370
Warum hat er hier noch ein

01:30:58.370 --> 01:31:00.370
und davor? Warum ist hier, warum ist hier

01:31:00.370 --> 01:31:02.370
nochmal ein und davor?

01:31:02.370 --> 01:31:04.370
Ich check's nicht.

01:31:04.370 --> 01:31:08.070
Okay, self

01:31:08.070 --> 01:31:14.260
store?

01:31:14.260 --> 01:31:16.260
Achso, ja, Moment, Moment,

01:31:16.260 --> 01:31:20.080
Hä? Moment,

01:31:20.080 --> 01:31:22.080
deref ist gar nicht importiert.

01:31:22.080 --> 01:31:30.130
Okay, nice. Das gibt's

01:31:30.130 --> 01:31:32.130
überhaupt nicht.

01:31:32.130 --> 01:31:34.130
Output is not member.

01:31:34.130 --> 01:31:36.130
Implement members. Ja, ganz

01:31:36.130 --> 01:31:38.130
toll. Target.

01:31:38.130 --> 01:31:40.130
Heißt das jetzt Target? Wurde das, wurde das

01:31:40.130 --> 01:31:45.880
unbenannt, oder wie? Moment,

01:31:45.880 --> 01:31:47.880
was, was macht deref eigentlich?

01:31:47.880 --> 01:31:49.880
Deref. Rust.

01:31:49.880 --> 01:31:55.170
Was zum?

01:31:55.170 --> 01:31:57.170
Alter.

01:31:57.170 --> 01:31:59.170
Ich will einfach nur ne Schleife

01:31:59.170 --> 01:32:01.170
da drüber machen können, Mann.

01:32:01.170 --> 01:32:07.240
Ist das so kompliziert

01:32:07.240 --> 01:32:09.240
in fucking Rust ne Schleife zu machen?

01:32:09.240 --> 01:32:15.300
Type targets.

01:32:15.300 --> 01:32:17.300
Sized.

01:32:17.300 --> 01:32:24.520
Target self.

01:32:24.520 --> 01:32:26.520
Okay, okay.

01:32:26.520 --> 01:32:28.520
Type T. Type T.

01:32:28.520 --> 01:32:30.520
Okay. Type T. Sehr gut.

01:32:30.520 --> 01:32:32.520
Excellent.

01:32:32.520 --> 01:32:34.520
Deref

01:32:34.520 --> 01:32:36.520
self target.

01:32:36.520 --> 01:32:38.520
Aus welchen Gründen auch

01:32:38.520 --> 01:32:40.520
immer, ähm,

01:32:40.520 --> 01:32:44.020
reference. Und jetzt

01:32:44.020 --> 01:32:54.760
self store.

01:32:54.760 --> 01:32:56.760
Was ich programmiere? Eine Schleife

01:32:56.760 --> 01:32:58.760
in Rust für nen eigenen

01:32:58.760 --> 01:33:00.760
Typ, aber aus irgendwelchen

01:33:00.760 --> 01:33:02.760
Gründen mag Rust das,

01:33:02.760 --> 01:33:04.760
das nicht wirklich.

01:33:04.760 --> 01:33:06.760
Also.

01:33:06.760 --> 01:33:08.760
Und, und jetzt

01:33:08.760 --> 01:33:10.760
Ether oder so? Ne, ne, ne, Moment. Store.

01:33:10.760 --> 01:33:12.760
Unwrap. Ah, ne, Moment, Moment. Self

01:33:12.760 --> 01:33:14.760
store get. Hä?

01:33:14.760 --> 01:33:16.760
Sekunde. Bin verwirrt.

01:33:16.760 --> 01:33:18.760
Self store.

01:33:18.760 --> 01:33:22.390
Read. Ach, read. Read.

01:33:22.390 --> 01:33:24.390
Read. Unwrap.

01:33:24.390 --> 01:33:32.240
Oh, das wird so nicht funktionieren.

01:33:32.240 --> 01:33:39.140
Expected but

01:33:39.140 --> 01:33:41.140
found it.

01:33:41.140 --> 01:33:50.340
Mann! Wie,

01:33:50.340 --> 01:33:52.340
wofür machst du das überhaupt? Lass die Wrapper-Funktion

01:33:52.340 --> 01:33:54.340
weg. Ich will ne Schleife

01:33:54.340 --> 01:33:58.610
machen da drüber, Mann.

01:33:58.610 --> 01:34:00.610
Oh, das geht ja nicht. Irgendwo hier, irgendwie

01:34:00.610 --> 01:34:02.610
hier, muss der Kram

01:34:02.610 --> 01:34:06.440
mehr da dran kommen. Am liebsten,

01:34:06.440 --> 01:34:08.440
am liebsten hätte ich

01:34:08.440 --> 01:34:10.440
ne Funktion, die, die irgendwie

01:34:10.440 --> 01:34:16.180
all oder so heißt.

01:34:16.180 --> 01:34:18.180
DREF hat nix mit ner Schleife zu tun. Laut

01:34:18.180 --> 01:34:20.180
StackOverflow schon. Hier will auch

01:34:20.180 --> 01:34:22.180
ein Typ ne Schleife machen.

01:34:22.180 --> 01:34:24.180
Und er schlägt vor, dass man das

01:34:24.180 --> 01:34:26.180
entweder so macht, so macht oder so

01:34:26.180 --> 01:34:28.180
macht. Moment.

01:34:30.180 --> 01:34:32.180
Der Typ transferiert.

01:34:32.180 --> 01:34:34.180
Ne, der Typ, der Typ, ähm.

01:34:34.180 --> 01:34:41.430
Wartet mal. Was hatten

01:34:41.430 --> 01:34:47.170
wir da vor? Moment, wie

01:34:47.170 --> 01:34:49.170
lang war das gerade nochmal hier unten?

01:34:49.170 --> 01:34:54.980
Iterator next?

01:34:54.980 --> 01:34:59.510
Ne! Hab ich doch!

01:34:59.510 --> 01:35:01.510
Das ist doch das allererste, was ich gemacht hab hier unten.

01:35:01.510 --> 01:35:03.510
Das funktioniert nicht.

01:35:03.510 --> 01:35:05.510
Das funktioniert nicht.

01:35:05.510 --> 01:35:09.140
Das ist das allererste, was ich probiert hab.

01:35:09.140 --> 01:35:15.080
Das, das klappt nicht.

01:35:15.080 --> 01:35:17.080
Ich mein, kann ich nicht, kann ich nicht einfach sowas

01:35:17.080 --> 01:35:23.080
hier machen? Oh.

01:35:23.080 --> 01:35:25.080
Wir klauen das jetzt einfach von hier.

01:35:25.080 --> 01:35:29.350
Der sagt ja bestimmt, dass es nicht

01:35:29.350 --> 01:35:33.040
matcht, oder? Er ist ein

01:35:33.040 --> 01:35:38.720
incompatible Type.

01:35:38.720 --> 01:35:40.720
Was ist das da vorne überhaupt? Kann das mal weg?

01:35:40.720 --> 01:35:44.160
Äh, er ist incompatible.

01:35:44.160 --> 01:35:47.480
Okay. Moment. T?

01:35:47.480 --> 01:35:49.480
Moment, Moment, Moment, Moment.

01:35:49.480 --> 01:35:51.480
Target T ergibt ja auch überhaupt keinen Sinn.

01:35:51.480 --> 01:35:53.480
Target

01:35:53.480 --> 01:35:55.480
ist was? Target?

01:35:55.480 --> 01:35:57.480
Ne, Output. Was?

01:35:57.480 --> 01:36:05.270
Das stimmt doch nicht einmal überhaupt hier.

01:36:05.270 --> 01:36:24.960
Target ist was?

01:36:24.960 --> 01:36:26.960
Target ist das, was man zurückgibt, oder?

01:36:26.960 --> 01:36:30.340
Also, im Prinzip

01:36:30.340 --> 01:36:32.340
ein

01:36:32.340 --> 01:36:37.250
Okay, was haben wir denn hier bei?

01:36:37.250 --> 01:36:51.480
Bei Keys?

01:36:51.480 --> 01:36:53.480
Ja, fuck man.

01:36:53.480 --> 01:36:55.480
Was ist beim ersten Ansatz mit der Hashmap?

01:36:55.480 --> 01:36:57.480
Du meinst das da unten?

01:36:57.480 --> 01:36:59.480
Was, den Iterator muss ich klonen?

01:36:59.480 --> 01:37:01.480
Man kann den klonen? Okay.

01:37:01.480 --> 01:37:06.770
Nice.

01:37:06.770 --> 01:37:10.600
Ne, ne, ne, ne.

01:37:10.600 --> 01:37:12.600
Cannot return values

01:37:12.600 --> 01:37:14.600
referencing local variable m returns

01:37:14.600 --> 01:37:18.680
value. Nope.

01:37:18.680 --> 01:37:26.340
Du musst die Referenz zur

01:37:26.340 --> 01:37:28.340
Hashmap klonen. Die was

01:37:28.340 --> 01:37:32.100
bitte? Die Referenz?

01:37:32.100 --> 01:37:40.080
Was soll ich klonen?

01:37:40.080 --> 01:37:42.080
m.clone

01:37:42.080 --> 01:37:44.080
Ja, Moment. Dann klone ich

01:37:44.080 --> 01:37:46.080
die Hashmap. Das will ich doch nicht.

01:37:46.080 --> 01:37:48.080
Ich will doch nicht die

01:37:48.080 --> 01:37:50.080
Das ist doch das allererste, was ich gemacht

01:37:50.080 --> 01:37:52.080
hab. Das ist doch das

01:37:52.080 --> 01:37:54.080
allererste, was ich gemacht hab.

01:37:54.080 --> 01:37:56.080
Dass das geht ist klar, aber dann erstellt er doch

01:37:56.080 --> 01:37:58.080
ne neue Hashmap. Das ist doch komplett für'n Arsch.

01:37:58.080 --> 01:38:00.080
Der soll keine neue Hashmap erstellen?

01:38:00.080 --> 01:38:02.080
Das ist doch das allererste, was

01:38:02.080 --> 01:38:04.080
ich gemacht hab. Das hat auch funktioniert.

01:38:04.080 --> 01:38:06.080
Aber

01:38:06.080 --> 01:38:08.080
das ist doch bescheuert. Ich will doch nicht ne komplett

01:38:08.080 --> 01:38:10.080
neue Hashmap anlegen, wenn ich einfach nur die

01:38:10.080 --> 01:38:12.080
Elemente durchlaufen will von der schon bestehenden

01:38:12.080 --> 01:38:14.080
Hashmap. Warum soll ich das machen?

01:38:14.080 --> 01:38:16.080
Das funktioniert.

01:38:16.080 --> 01:38:18.080
Das hab ich schon ausprobiert. Das funktioniert.

01:38:18.080 --> 01:38:21.650
Das ist überhaupt kein Problem. Guck, das

01:38:21.650 --> 01:38:23.650
geht. Das ist das allererste, was

01:38:23.650 --> 01:38:25.650
ich gemacht hab.

01:38:25.650 --> 01:38:27.650
Ich will ne Schleife machen, Mann.

01:38:27.650 --> 01:38:29.650
Ne Schleife. Eine

01:38:29.650 --> 01:38:31.650
stinknormale Schleife über nen Custom

01:38:31.650 --> 01:38:33.650
Typ. Und ich hab keine Ahnung, wie man das

01:38:33.650 --> 01:38:41.510
in Rust gescheit macht.

01:38:41.510 --> 01:38:47.060
Also das ist schon mal nix.

01:38:47.060 --> 01:38:49.060
Ja, genau. Ich will ne Schleife machen. Guck,

01:38:49.060 --> 01:38:51.060
ich will vor...

01:38:51.060 --> 01:38:53.060
Ja, keine Ahnung. Vor Blub

01:38:53.060 --> 01:38:55.060
in... Alter.

01:38:55.060 --> 01:38:57.060
Oh, das will ich machen können.

01:38:57.060 --> 01:38:59.060
Okay?

01:38:59.060 --> 01:39:01.060
So, und das geht nicht, weil

01:39:01.060 --> 01:39:03.060
it's not a Iterator.

01:39:03.060 --> 01:39:05.060
Okay, alles klar. Iterator

01:39:05.060 --> 01:39:07.060
implementieren. Hab ich absolut

01:39:07.060 --> 01:39:09.060
keine Ahnung gehabt, was der von mir will.

01:39:09.060 --> 01:39:14.360
Und was sie

01:39:14.360 --> 01:39:16.360
hier auch immer mit DREF wollen, ich hab auch

01:39:16.360 --> 01:39:18.360
keine Ahnung. Okay, wir machen jetzt einfach

01:39:18.360 --> 01:39:20.360
mal... Wir suchen jetzt

01:39:20.360 --> 01:39:22.360
Rust DREF Vector

01:39:22.360 --> 01:39:24.360
Wrapped.

01:39:24.360 --> 01:39:26.360
Was

01:39:26.360 --> 01:39:28.360
hast du lieber? C++ oder Rust?

01:39:28.360 --> 01:39:30.360
Ey, auf keinen Fall

01:39:30.360 --> 01:39:32.360
C++, aber Rust in dem Fall jetzt gerade

01:39:32.360 --> 01:39:34.360
auch nicht. How to create a

01:39:34.360 --> 01:39:36.360
new instance of Wrapped Vector

01:39:36.360 --> 01:39:42.740
in Rust. Oh, was

01:39:42.740 --> 01:39:52.260
ist das? Pfeifertime.

01:39:52.260 --> 01:39:54.260
After the creation of such an object

01:39:54.260 --> 01:39:56.260
you can use the object somewhat

01:39:56.260 --> 01:39:58.260
transparently by implementing

01:39:58.260 --> 01:40:00.260
DREF.

01:40:00.260 --> 01:40:02.260
Moment, hier ist Target?

01:40:02.260 --> 01:40:04.260
Wait a minute.

01:40:04.260 --> 01:40:06.260
Hier ist Target nicht T,

01:40:06.260 --> 01:40:14.050
sondern... Moment.

01:40:14.050 --> 01:40:19.090
Return self

01:40:19.090 --> 01:40:21.090
store. Ne, und.

01:40:21.090 --> 01:40:25.240
Und self store.

01:40:25.240 --> 01:40:27.240
Moin, Kirolo.

01:40:27.240 --> 01:40:31.440
Was für ein Typ ist das jetzt?

01:40:31.440 --> 01:40:34.760
Alter, kann der nicht mal den Typ davon

01:40:34.760 --> 01:40:36.760
ordentlich ableiten, oder was?

01:40:36.760 --> 01:40:38.760
Das ist ein hier

01:40:38.760 --> 01:40:40.760
LWLog, Hashmap, irgendwas.

01:40:40.760 --> 01:40:42.760
Aber und? Und?

01:40:42.760 --> 01:40:48.120
Okay. Ja, ja.

01:40:48.120 --> 01:40:50.120
So.

01:40:50.120 --> 01:40:53.880
So. Shit. Fast.

01:40:53.880 --> 01:40:55.880
Fast.

01:40:55.880 --> 01:41:04.600
LWLog

01:41:04.600 --> 01:41:08.870
Hashmap?

01:41:08.870 --> 01:41:10.870
Ah, ne. Und self.

01:41:10.870 --> 01:41:15.840
Kann ich nicht einfach

01:41:15.840 --> 01:41:17.840
so das ganze Ding returnen?

01:41:17.840 --> 01:41:19.840
Ne, das geht

01:41:19.840 --> 01:41:23.990
nicht. Über den internen,

01:41:23.990 --> 01:41:25.990
über meine interne Hashmap.

01:41:25.990 --> 01:41:27.990
Ich habe eine interne Hashmap

01:41:27.990 --> 01:41:29.990
gerapped quasi

01:41:29.990 --> 01:41:31.990
in einem eigenen Struct und ich will

01:41:31.990 --> 01:41:33.990
über meinen Struct iteraten.

01:41:33.990 --> 01:41:35.990
Angeblich stimmt das so.

01:41:35.990 --> 01:41:55.490
Ne, natürlich. Was?

01:41:55.490 --> 01:41:57.490
Man.

01:41:57.490 --> 01:41:59.490
Ey, super, jetzt kompiliert er so eine Fehler, aber

01:41:59.490 --> 01:42:01.490
gehen, gehen

01:42:01.490 --> 01:42:03.490
tut es trotzdem nicht.

01:42:03.490 --> 01:42:25.110
Und die Funktion gibt es hier nicht.

01:42:25.110 --> 01:42:34.950
Okay, und was war jetzt der Sinn

01:42:34.950 --> 01:42:36.950
davon? Gibt es wenigstens DREF?

01:42:36.950 --> 01:42:48.580
Ah, DREF gibt es, okay.

01:42:48.580 --> 01:42:55.670
Wait a minute. Was?

01:42:55.670 --> 01:42:57.670
Ich weiß nicht, ob ich DREF brauche.

01:42:57.670 --> 01:43:19.350
Das hat irgendjemand aus der Gamerflow vorgeschlagen.

01:43:19.350 --> 01:43:23.560
Und jetzt?

01:43:23.560 --> 01:43:25.560
Ey, Leute, ich habe keine Ahnung, was ist das für ein Scheiß.

01:43:25.560 --> 01:43:31.620
Übrigens die Rotzsprache, Alter.

01:43:31.620 --> 01:43:33.620
A read? Was?

01:43:33.620 --> 01:43:35.620
Read?

01:43:35.620 --> 01:43:37.620
Und was will der hier von mir? Read?

01:43:37.620 --> 01:43:39.620
Log result?

01:43:39.620 --> 01:43:41.620
Ach so.

01:43:43.620 --> 01:43:45.620
Moment, Moment, weil ich

01:43:45.620 --> 01:43:49.320
Wait a minute.

01:43:49.320 --> 01:43:53.140
Weil ich ja das

01:43:53.140 --> 01:43:55.140
returne mit dem Log.

01:43:55.140 --> 01:43:58.770
Sag bloß, wenn das hier

01:43:58.770 --> 01:44:00.770
Wait a minute. Ich wollte mir jetzt erzählen,

01:44:00.770 --> 01:44:02.770
das funktioniert, oder was?

01:44:02.770 --> 01:44:04.770
What the fuck, Alter?

01:44:16.470 --> 01:44:18.470
Ich habe, Alter.

01:44:18.470 --> 01:44:20.470
Was bin ich

01:44:20.470 --> 01:44:23.910
sehend überhaupt, Mann?

01:44:23.910 --> 01:44:25.910
Das geht auf jeden Fall besser.

01:44:25.910 --> 01:44:27.910
Ich habe keine Ahnung, was es überhaupt,

01:44:27.910 --> 01:44:33.080
was mir das überhaupt sagen soll, Mann.

01:44:33.080 --> 01:44:35.080
What the fuck?

01:44:35.080 --> 01:44:46.200
What?

01:44:46.200 --> 01:44:48.200
Was ist der Hashmap Iter?

01:44:48.200 --> 01:44:50.200
Naja, ein Iterator über den Typ in der Hashmap.

01:44:50.200 --> 01:44:55.110
Also der Typ ist das hier, guck.

01:44:55.110 --> 01:44:59.000
Das da.

01:44:59.000 --> 01:45:01.000
Ich habe keine Ahnung, was ich hier gemacht habe,

01:45:01.000 --> 01:45:03.000
warum es kompiliert und was ich jetzt,

01:45:03.000 --> 01:45:05.000
was das überhaupt tut unter der Haube.

01:45:05.000 --> 01:45:10.870
Okay.

01:45:10.870 --> 01:45:16.230
What the fuck, Alter?

01:45:16.230 --> 01:45:18.230
Ich verstehe es auch nicht.

01:45:18.230 --> 01:45:20.230
Mach dir nichts draus.

01:45:20.230 --> 01:45:22.230
Okay, Chatgear ist pfeifert.

01:45:22.230 --> 01:45:24.230
Ich glaube im Next von dem Iterator implementiert

01:45:24.230 --> 01:45:26.230
musst du nur argsref

01:45:26.230 --> 01:45:28.230
Okay, dann.

01:45:28.230 --> 01:45:30.230
Wenn ich das nur, nur das machen muss.

01:45:30.230 --> 01:45:32.230
Easy.

01:45:32.230 --> 01:45:35.990
Es holt den RW-Log

01:45:35.990 --> 01:45:37.990
umwrapt den Read Access Iterator.

01:45:37.990 --> 01:45:39.990
Ja, ja, ja. Im Prinzip habe ich damit

01:45:39.990 --> 01:45:41.990
die Hashtag...

01:45:41.990 --> 01:45:43.990
Im Prinzip könnte ich auch so...

01:45:43.990 --> 01:45:45.990
Das ist nichts anderes, Mann.

01:45:45.990 --> 01:45:47.990
Wie direkt auf die

01:45:47.990 --> 01:45:49.990
auf die Struct-Variable zugreifen

01:45:49.990 --> 01:45:51.990
im Endeffekt. Also

01:45:51.990 --> 01:45:59.010
eigentlich komplett unsinnig.

01:45:59.010 --> 01:46:01.010
Okay. Implement Iterator for Registry.

01:46:01.010 --> 01:46:06.880
So, was muss ich?

01:46:06.880 --> 01:46:08.880
Was? Moment, was muss ich machen?

01:46:08.880 --> 01:46:10.880
argsref

01:46:10.880 --> 01:46:12.880
Was? Wo? Wie?

01:46:12.880 --> 01:46:16.770
Wo muss ich hier was machen?

01:46:16.770 --> 01:46:18.770
Musst du nur argsref

01:46:18.770 --> 01:46:20.770
Hashmap fällt vom Struct.

01:46:20.770 --> 01:46:22.770
Okay, args... Alles klar, alles klar. Easy, easy.

01:46:22.770 --> 01:46:24.770
argsref

01:46:24.770 --> 01:46:26.770
sref

01:46:26.770 --> 01:46:28.770
self

01:46:28.770 --> 01:46:34.070
store

01:46:34.070 --> 01:46:36.070
ähm

01:46:36.070 --> 01:46:38.070
read

01:46:38.070 --> 01:46:42.600
unwrap

01:46:42.600 --> 01:46:44.600
Das ist der...

01:46:44.600 --> 01:46:46.600
Das funktioniert nicht.

01:46:46.600 --> 01:46:48.600
Chat, ich bin froh, dass ihr auch nicht schlauer seid

01:46:48.600 --> 01:46:50.600
wie ich, was das angeht.

01:46:50.600 --> 01:46:52.600
Also hier weiß er noch nicht mal

01:46:52.600 --> 01:46:54.600
was die Referenz überhaupt ist.

01:46:54.600 --> 01:46:56.600
Es ist B auf

01:46:56.600 --> 01:46:58.600
unknown. Alles klar.

01:46:58.600 --> 01:47:02.290
Ich mein,

01:47:02.290 --> 01:47:04.290
es kann doch nicht so schwer

01:47:04.290 --> 01:47:11.890
sein.

01:47:11.890 --> 01:47:13.890
Das hier ist die Hashmap, doch.

01:47:13.890 --> 01:47:15.890
Ah ne, das ist das

01:47:15.890 --> 01:47:17.890
Varmalett-Map gleich.

01:47:17.890 --> 01:47:19.890
Ah ne, es ist die

01:47:19.890 --> 01:47:21.890
LW-Lockguard.

01:47:21.890 --> 01:47:23.890
ähm

01:47:23.890 --> 01:47:25.890
Das da ist die Hashmap. Zumindest

01:47:25.890 --> 01:47:27.890
eine Referenz auf die Hashmap.

01:47:27.890 --> 01:47:31.650
Aber das checkt er trotzdem nicht.

01:47:31.650 --> 01:47:33.650
mismatch

01:47:33.650 --> 01:47:35.650
expected

01:47:35.650 --> 01:47:38.960
arg

01:47:38.960 --> 01:47:40.960
Was, was, was, was expectet er?

01:47:40.960 --> 01:47:42.960
Expected und...

01:47:42.960 --> 01:47:44.960
Ne, ne, ne. Okay, so funktioniert das schon mal nicht.

01:47:44.960 --> 01:47:48.790
Chat, ne, ne, ne.

01:47:48.790 --> 01:47:50.790
Klappt das nicht. So klappt das nicht.

01:47:52.790 --> 01:47:54.790
Ich hab wirklich keine Ahnung, wie es funktioniert.

01:47:54.790 --> 01:47:56.790
Echt nicht. Kein, kein

01:47:56.790 --> 01:48:02.470
Schimmer. Okay, wir suchen

01:48:02.470 --> 01:48:04.470
wieso noch mal stack... rust

01:48:04.470 --> 01:48:06.470
iterator

01:48:06.470 --> 01:48:08.470
implement iterator

01:48:08.470 --> 01:48:10.470
rust

01:48:10.470 --> 01:48:12.470
iterators. Rust by example.

01:48:12.470 --> 01:48:14.470
Ja, das, Moment. Das, das

01:48:14.470 --> 01:48:16.470
example habe ich ja schon

01:48:16.470 --> 01:48:18.470
wrapped Hashmap.

01:48:18.470 --> 01:48:26.070
Okay, genau das. Hier.

01:48:26.070 --> 01:48:28.070
Der hat ne Hashmap

01:48:28.070 --> 01:48:30.070
in nem struct.

01:48:30.070 --> 01:48:37.090
Und jetzt will er für sein struct

01:48:37.090 --> 01:48:39.090
Jetzt will er für sein struct

01:48:39.090 --> 01:48:47.080
äh

01:48:47.080 --> 01:48:50.520
response

01:48:50.520 --> 01:48:54.080
ah, response headers

01:48:54.080 --> 01:48:56.080
will er, will er das... Okay, genau das.

01:48:56.080 --> 01:48:58.080
Im Prinzip, im Prinzip genau das

01:48:58.080 --> 01:49:00.080
was ähm

01:49:00.080 --> 01:49:02.080
was ich auch machen will.

01:49:02.080 --> 01:49:04.080
You are doing right, was

01:49:04.080 --> 01:49:06.080
was you are doing right now is

01:49:06.080 --> 01:49:08.080
delegating to the into iterator

01:49:08.080 --> 01:49:10.080
implement, but you need to delegate

01:49:10.080 --> 01:49:12.080
to the into iterator

01:49:12.080 --> 01:49:14.080
implementation of

01:49:14.080 --> 01:49:16.080
und Hashmap string.

01:49:16.080 --> 01:49:18.080
Because you can't get

01:49:18.080 --> 01:49:20.080
an own version

01:49:20.080 --> 01:49:22.080
Ja, ja, ja. This is easy

01:49:22.080 --> 01:49:24.080
to fix. Thankfully.

01:49:24.080 --> 01:49:26.080
Leute. Easy.

01:49:26.080 --> 01:49:28.080
Es ist easy to fix.

01:49:28.080 --> 01:49:33.760
Alles klar.

01:49:33.760 --> 01:49:35.760
Easy to fix.

01:49:35.760 --> 01:49:41.960
Dann machen wir das doch mal.

01:49:41.960 --> 01:49:43.960
Easy to fix. Let's go.

01:49:43.960 --> 01:49:45.960
Easy.

01:49:45.960 --> 01:49:47.960
For

01:49:47.960 --> 01:49:49.960
ähm

01:49:49.960 --> 01:49:51.960
Wait a minute. For

01:49:51.960 --> 01:49:55.970
registry of

01:49:55.970 --> 01:49:59.600
T

01:49:59.600 --> 01:50:01.600
Okay.

01:50:01.600 --> 01:50:03.600
Was ist das eigentlich für hässliche Sachen wieder?

01:50:03.600 --> 01:50:07.240
Irgendwelche Lifetime

01:50:07.240 --> 01:50:09.240
Sachen. Okay.

01:50:09.240 --> 01:50:15.940
Item type. Ach, hier oben.

01:50:15.940 --> 01:50:17.940
Header map.

01:50:17.940 --> 01:50:19.940
Item type ist

01:50:19.940 --> 01:50:21.940
Hash. Okay.

01:50:21.940 --> 01:50:23.940
Ich kopiere das mal.

01:50:23.940 --> 01:50:25.940
U32 of T. Ja gut. Das ähm

01:50:25.940 --> 01:50:27.940
Das funktioniert so nicht.

01:50:27.940 --> 01:50:34.070
Not member of

01:50:34.070 --> 01:50:36.070
Okay.

01:50:36.070 --> 01:50:38.070
Kann man das vielleicht hier irgendwie reinpappen?

01:50:38.070 --> 01:50:40.070
Nein.

01:50:40.070 --> 01:50:42.070
Kann man das irgendwie

01:50:42.070 --> 01:50:44.070
hier reinpappen? Nein.

01:50:44.070 --> 01:50:46.070
Okay.

01:50:46.070 --> 01:50:48.070
Es ist ja auch wurscht. Wir können das copy-pasten.

01:50:48.070 --> 01:50:50.070
Was ich da mache, das frage ich mich auch.

01:50:50.070 --> 01:50:56.000
Header map.

01:50:56.000 --> 01:50:58.000
Okay. Okay. Das ist das. Okay.

01:50:58.000 --> 01:51:00.000
Alles klar.

01:51:00.000 --> 01:51:02.000
Okay. Ja.

01:51:02.000 --> 01:51:04.000
Nice. Nice. Nice. Okay. Ja.

01:51:04.000 --> 01:51:06.000
Mhm. Mhm.

01:51:06.000 --> 01:51:08.000
Und self

01:51:08.000 --> 01:51:10.000
Okay. Self. Store.

01:51:10.000 --> 01:51:12.000
Read.

01:51:12.000 --> 01:51:16.400
Unwrap.

01:51:16.400 --> 01:51:18.400
Ey, das wäre jetzt zu einfach, wenn es funktioniert.

01:51:18.400 --> 01:51:25.040
Moment. Ist das hier überhaupt

01:51:25.040 --> 01:51:27.040
die Map?

01:51:27.040 --> 01:51:29.040
Let map gleich.

01:51:29.040 --> 01:51:31.040
Ey, wir brauchen wieder hier.

01:51:31.040 --> 01:51:41.520
Und jetzt. Moment.

01:51:41.520 --> 01:51:47.520
Was brauche ich da eigentlich?

01:51:47.520 --> 01:51:49.520
Das wäre jetzt viel zu einfach, wenn das funktioniert.

01:51:49.520 --> 01:51:51.520
Item

01:51:51.520 --> 01:51:55.800
mismatch.

01:51:55.800 --> 01:51:57.800
Ne, ne. Der Store ist nicht die

01:51:57.800 --> 01:51:59.800
Hashmap. Der Store ist ein Rw-Log.

01:51:59.800 --> 01:52:03.430
Was?

01:52:03.430 --> 01:52:05.430
Expected Type Parameter T. Found Arc T.

01:52:05.430 --> 01:52:07.430
Ah.

01:52:07.430 --> 01:52:09.430
Siehste?

01:52:09.430 --> 01:52:11.430
Habe es ja auch verkehrt

01:52:11.430 --> 01:52:27.800
gemacht.

01:52:27.800 --> 01:52:29.800
Aber.

01:52:29.800 --> 01:52:31.800
Aber warum geht das jetzt nicht?

01:52:31.800 --> 01:52:54.920
Wieder

01:52:54.920 --> 01:52:56.920
genau der gleiche Scheiß

01:52:56.920 --> 01:53:00.550
wie vorher, Mann.

01:53:00.550 --> 01:53:05.650
Was will er hier jetzt?

01:53:05.650 --> 01:53:07.650
Temporary value created here.

01:53:07.650 --> 01:53:35.700
Ja und?

01:53:35.700 --> 01:53:37.700
Das kann doch nicht

01:53:37.700 --> 01:53:39.700
so schwer sein.

01:53:39.700 --> 01:53:41.700
Meine Fresse,

01:53:41.700 --> 01:53:43.700
Alter.

01:53:43.700 --> 01:53:49.570
Ich will eine Schleife machen.

01:53:49.570 --> 01:53:51.570
Ich bin ja froh,

01:53:51.570 --> 01:53:59.300
dass es easy to fix ist.

01:53:59.300 --> 01:54:01.300
Glücklicherweise ist es easy to fix.

01:54:01.300 --> 01:54:41.480
Ich weiß,

01:54:41.480 --> 01:54:54.900
was das von mir will, Mann.

01:54:54.900 --> 01:54:56.900
Es ist ja noch nicht mal async.

01:54:56.900 --> 01:55:04.980
Rust.

01:55:04.980 --> 01:55:06.980
Echt.

01:55:06.980 --> 01:55:08.980
Ich habe kein blassen Schimmer.

01:55:08.980 --> 01:55:12.360
Cursor of Hashmap.

01:55:12.360 --> 01:55:17.080
I'm trying a simple

01:55:17.080 --> 01:55:19.080
thread-safe memory key values

01:55:19.080 --> 01:55:21.080
My code looks like this.

01:55:21.080 --> 01:55:27.590
Ja, der macht.

01:55:27.590 --> 01:55:29.590
Obviously. Simple.

01:55:29.590 --> 01:55:34.240
Implement. Cursor.

01:55:34.240 --> 01:55:36.240
Okay, jetzt vielleicht.

01:55:36.240 --> 01:55:38.240
Ich will die Werte nicht klonen, Mann.

01:55:38.240 --> 01:55:47.830
Ich check die Antwort.

01:55:47.830 --> 01:55:51.720
Noch nicht mal.

01:55:51.720 --> 01:55:53.720
Die Antwort ist mir schon zu sick.

01:55:53.720 --> 01:55:55.720
Oh, jetzt habe ich meinen Browser gekillt.

01:55:55.720 --> 01:55:57.720
Leute, mein Browser ist kaputt.

01:55:57.720 --> 01:56:01.730
Ah, da geht er wieder.

01:56:01.730 --> 01:56:03.730
Er lebt wieder.

01:56:03.730 --> 01:56:05.730
Das ist wirklich

01:56:05.730 --> 01:56:17.750
Pains champ, Mann.

01:56:17.750 --> 01:56:19.750
D-Ref.

01:56:19.750 --> 01:56:43.670
Also ich habe keine Ahnung,

01:56:43.670 --> 01:56:45.670
warum das bei denen funktioniert.

01:56:45.670 --> 01:56:58.070
Aber mir funktioniert das nicht.

01:56:58.070 --> 01:57:03.430
Kein LW-Lock.

01:57:03.430 --> 01:57:05.430
Vielleicht ist das das Problem.

01:57:05.430 --> 01:57:14.150
Keine Ahnung.

01:57:14.150 --> 01:57:16.150
Ich meine, das ist doch ein Witz, oder?

01:57:16.150 --> 01:57:18.150
Ich meine, wie scheiße kann eine Sprache sein,

01:57:18.150 --> 01:57:20.150
dass man eine probliche

01:57:20.150 --> 01:57:22.150
Schleife über seinen eigenen Typ

01:57:22.150 --> 01:57:24.150
nicht hinbekommt.

01:57:24.150 --> 01:57:26.150
Wofür brauchst du das LW-Lock,

01:57:26.150 --> 01:57:38.680
dass es thread-safe ist?

01:57:38.680 --> 01:57:40.680
Ich habe keine Ahnung.

01:57:40.680 --> 01:57:44.560
Wir klonen das jetzt einfach,

01:57:44.560 --> 01:57:48.640
weil mir nichts anderes einfällt.

01:57:48.640 --> 01:57:50.640
Wir machen das erste,

01:57:50.640 --> 01:57:52.640
das erstbeste, was mir eingefallen ist.

01:57:52.640 --> 01:57:54.640
Return, self,

01:57:54.640 --> 01:57:56.640
store,

01:57:56.640 --> 01:57:58.640
read, unwrap,

01:57:58.640 --> 01:58:00.640
clone.

01:58:00.640 --> 01:58:05.360
Das ist halt echt nicht schön.

01:58:05.360 --> 01:58:07.360
Der

01:58:07.360 --> 01:58:09.360
kopiert jetzt alles.

01:58:09.360 --> 01:58:11.360
Ich meine, es ist nicht viel, es ist trotzdem schnell.

01:58:11.360 --> 01:58:29.840
Aber es ist scheiße.

01:58:29.840 --> 01:58:31.840
Okay, Chat, ich habe jetzt mal eine ernste Frage.

01:58:31.840 --> 01:58:33.840
Wie genau?

01:58:33.840 --> 01:58:35.840
Was soll mir

01:58:35.840 --> 01:58:37.840
sowas sagen?

01:58:37.840 --> 01:58:39.840
Ich meine, du hast mich gefragt,

01:58:39.840 --> 01:58:41.840
wofür ich LW-Lock brauche.

01:58:41.840 --> 01:58:43.840
Ich habe dir gesagt, damit es thread-safe ist.

01:58:43.840 --> 01:58:45.840
Es gibt eine Menge thread-safe Datentypen.

01:58:45.840 --> 01:58:47.840
Max, es gibt übrigens viele Autos.

01:58:47.840 --> 01:58:49.840
Welcher

01:58:49.840 --> 01:58:51.840
Datentyp wäre deiner Meinung nach besser geeignet

01:58:51.840 --> 01:58:53.840
an der Stelle als LW-Lock?

01:58:53.840 --> 01:58:55.840
Von den vielen thread-safe Datentypen.

01:58:55.840 --> 01:59:01.590
So, jetzt können wir hier sagen,

01:59:01.590 --> 01:59:03.590
oh,

01:59:03.590 --> 01:59:05.590
jetzt findest du es. Ja, das ist klar.

01:59:05.590 --> 01:59:07.590
Aber jetzt kopiert er das auch.

01:59:07.590 --> 01:59:09.590
Das fuckt mich ultra ab, Mann.

01:59:09.590 --> 01:59:11.590
Ich will wissen, wie das funktioniert.

01:59:11.590 --> 01:59:13.590
Wir machen jetzt aber damit nicht weiter.

01:59:13.590 --> 01:59:15.590
Sonst drehe ich echt am Rad.

01:59:15.590 --> 01:59:26.070
Hier, returning wrapped,

01:59:26.070 --> 01:59:28.070
okay, Moment mal.

01:59:28.070 --> 01:59:30.070
Chat, das ist genau das, was ich machen will.

01:59:32.070 --> 01:59:34.070
A, B, D...

01:59:34.070 --> 01:59:37.700
What?

01:59:37.700 --> 01:59:39.700
What the f...

01:59:39.700 --> 01:59:41.700
Ich verstehe noch nicht mal, was er fragte.

01:59:41.700 --> 01:59:43.700
You can't solve

01:59:43.700 --> 01:59:45.700
this with naming your

01:59:45.700 --> 01:59:47.700
lifetimes, as this isn't

01:59:47.700 --> 01:59:49.700
really a lifetime problem, but a problem with

01:59:49.700 --> 01:59:56.720
ownership. You can provide

01:59:56.720 --> 01:59:58.720
access to the HashMap and make the call

01:59:58.720 --> 02:00:06.520
values.

02:00:06.520 --> 02:00:08.520
So was in der Richtung habe ich ja auch schon gebaut.

02:00:08.520 --> 02:00:16.120
Ich meine, das soll mir auch recht sein.

02:00:16.120 --> 02:00:19.430
Trivial.

02:00:19.430 --> 02:00:21.430
Trivial.

02:00:21.430 --> 02:00:23.430
Because

02:00:23.430 --> 02:00:25.430
gut-like FN-Trades don't exist.

02:00:25.430 --> 02:00:27.430
Ah, obviously. Jetzt weiß ich,

02:00:27.430 --> 02:00:29.430
Leute, jetzt weiß ich, warum es nicht funktioniert,

02:00:29.430 --> 02:00:31.430
Mann. Weil gut-like FN-Trades

02:00:31.430 --> 02:00:33.430
not existen.

02:00:33.430 --> 02:00:35.430
Hätte es mal gleich einer gesagt, Mensch.

02:00:37.430 --> 02:00:39.430
Ich hoffe, euch ist jetzt auch alles klar.

02:00:39.430 --> 02:00:41.430
Jetzt

02:00:41.430 --> 02:00:43.430
obviously, jetzt ist alles logisch.

02:00:43.430 --> 02:00:49.490
Yep, easy.

02:00:49.490 --> 02:00:51.490
So, ich mach mal hier.

02:00:51.490 --> 02:00:53.490
Mapped, log, guard, HashMap,

02:00:53.490 --> 02:00:55.490
string, size, user.

02:00:55.490 --> 02:00:59.510
Map, self, item,

02:00:59.510 --> 02:01:01.510
read, what?

02:01:06.100 --> 02:01:08.100
Leuchtet ein, ne? Es leuchtet

02:01:08.100 --> 02:01:15.190
komplett ein.

02:01:15.190 --> 02:01:17.190
Achso, Moment. Item ist

02:01:17.190 --> 02:01:19.190
die HashMap.

02:01:19.190 --> 02:01:21.190
Self, store,

02:01:21.190 --> 02:01:23.190
read,

02:01:23.190 --> 02:01:27.910
äh,

02:01:27.910 --> 02:01:33.080
Alter.

02:01:33.080 --> 02:01:35.080
Use parking lot? What?

02:01:35.080 --> 02:01:54.130
Guck mal, die, hier,

02:01:54.130 --> 02:01:56.130
Rust weiß noch nicht, was will ich hier? Map, Map.

02:01:56.130 --> 02:01:59.700
It's not an iterator. Ja, ach,

02:01:59.700 --> 02:02:01.700
okay. Nice.

02:02:01.700 --> 02:02:03.700
Sehr gut, sehr gut. Excellent.

02:02:03.700 --> 02:02:18.980
Jetzt weiß ich Bescheid, ja, Mann.

02:02:18.980 --> 02:02:20.980
Cannot find. Moment, das gibt es überhaupt nicht?

02:02:22.980 --> 02:02:24.980
Das gibt es einfach überhaupt nicht, was die hier vorschlagen.

02:02:24.980 --> 02:02:26.980
Alter, was ist das für ein pepega post, Mann?

02:02:26.980 --> 02:02:31.640
Lw, log, guard,

02:02:31.640 --> 02:02:33.640
gibt es überhaupt? Ach, Moment, das ist von parking lot.

02:02:33.640 --> 02:02:35.640
Was auch immer parking lot ist.

02:02:35.640 --> 02:02:37.640
Was ist die parking lot?

02:02:37.640 --> 02:02:39.640
Lw, guard, Mensch. Ja, dann,

02:02:39.640 --> 02:02:49.090
ja, dann ist klar.

02:02:49.090 --> 02:02:51.090
Ich glaube, ich weiß, wo...

02:02:51.090 --> 02:03:00.100
Weißt du was? Scheiß drauf.

02:03:00.100 --> 02:03:02.100
Jetzt nicht, jetzt nicht, Leute.

02:03:02.100 --> 02:03:04.100
Jetzt, jetzt nicht. Wir lassen,

02:03:04.100 --> 02:03:06.100
wir lassen es jetzt nicht. Da dreh ich, da dreh ich ab,

02:03:06.100 --> 02:03:17.670
weil... Also, ich bin,

02:03:17.670 --> 02:03:21.810
ich bin erstaunt,

02:03:21.810 --> 02:03:23.810
dass das so krass

02:03:23.810 --> 02:03:36.660
kompliziert ist.

02:03:36.660 --> 02:03:38.660
Okay, was? Playground?

02:03:38.660 --> 02:03:50.420
Ich, ich mach jetzt nicht weiter.

02:03:50.420 --> 02:03:52.420
Das, das, da dreh ich.

02:03:52.420 --> 02:03:54.420
Reicht dir das? Ja, Moment, Moment, mal gucken.

02:03:54.420 --> 02:03:56.420
Moment. Excellent, excellent. Chatgear macht

02:03:56.420 --> 02:03:58.420
mit. Ich bin froh. Chat ist, Chat ist schlau.

02:03:58.420 --> 02:04:07.040
Äh...

02:04:07.040 --> 02:04:10.610
Wo, wo ist der Unterschied

02:04:10.610 --> 02:04:12.610
zu mir? Ah, hier!

02:04:12.610 --> 02:04:14.610
Okay, was, was, was, was macht das jetzt?

02:04:14.610 --> 02:04:16.610
Anders als, als

02:04:16.610 --> 02:04:18.610
meins?

02:04:18.610 --> 02:04:20.610
Zwei, okay.

02:04:20.610 --> 02:04:22.610
Store, read,

02:04:22.610 --> 02:04:27.970
unwrap. Ah, okay, wirklich

02:04:27.970 --> 02:04:29.970
schön ist... Aber dann, da muss

02:04:29.970 --> 02:04:31.970
ich zumindest nicht klonen.

02:04:31.970 --> 02:04:33.970
Das finde ich eigentlich ganz, ganz gut.

02:04:33.970 --> 02:04:35.970
Da muss ich, da muss ich zumindest

02:04:35.970 --> 02:04:37.970
nicht...

02:04:37.970 --> 02:04:41.350
Da muss ich nicht klonen.

02:04:41.350 --> 02:04:43.350
Und es funktioniert, oder?

02:04:43.350 --> 02:04:47.300
Das ist gut.

02:04:47.300 --> 02:04:54.200
Das ist, das reicht mir.

02:04:54.200 --> 02:04:56.200
Also, ich würde sagen, das reicht mir.

02:04:56.200 --> 02:05:02.840
Das ist, das ist im Prinzip

02:05:02.840 --> 02:05:04.840
das einfach nochmal gerappt.

02:05:04.840 --> 02:05:06.840
Das ist die bisschen schönere Variante

02:05:06.840 --> 02:05:08.840
wie von meinem geklonten.

02:05:08.840 --> 02:05:10.840
Wo, wofür ist denn

02:05:10.840 --> 02:05:12.840
hier vorne das Ding? Kann man das wegmachen?

02:05:12.840 --> 02:05:16.340
Äh, anscheinend, okay.

02:05:16.340 --> 02:05:18.340
Ich weiß nicht, wofür das da ist.

02:05:18.340 --> 02:05:20.340
Wofür, es ist irgendwie Lifetime. Aber Lifetime

02:05:20.340 --> 02:05:25.060
für was? Lifetime, die ich

02:05:25.060 --> 02:05:29.080
sonst nirgendswo benutze, oder?

02:05:29.080 --> 02:05:33.090
Lassen wir einfach mal weg.

02:05:33.090 --> 02:05:35.090
Ja, das finde ich, das finde ich gut.

02:05:35.090 --> 02:05:37.090
Alter, was ein

02:05:37.090 --> 02:05:39.090
Akt, man! Ich raste aus, ey.

02:05:39.090 --> 02:05:42.790
Eieiei.

02:05:42.790 --> 02:05:46.870
Boah.

02:05:46.870 --> 02:05:48.870
MonkaS.

02:05:50.870 --> 02:05:52.870
MonkaS, man.

02:05:52.870 --> 02:05:59.380
Okay, können wir jetzt

02:05:59.380 --> 02:06:01.380
eigentlich, Moment, Moment, ja,

02:06:01.380 --> 02:06:03.380
okay, ja, wir machen weiter, aber jetzt

02:06:03.380 --> 02:06:05.380
kommt ja noch was anderes, was das Ding können soll.

02:06:05.380 --> 02:06:17.400
Und zwar, ja, und zwar

02:06:17.400 --> 02:06:22.370
es soll

02:06:22.370 --> 02:06:24.370
ja noch IDs berechnen können.

02:06:24.370 --> 02:06:26.370
Wie, wie könnte man das mit der ID-Berechnung machen,

02:06:26.370 --> 02:06:31.480
Chat? Wie könnte man

02:06:31.480 --> 02:06:33.480
das, habt ihr irgendeine klare Idee? Also,

02:06:33.480 --> 02:06:35.480
wir könnten, wir könnten einfach random was

02:06:35.480 --> 02:06:37.480
generieren. Das ist aber nicht schön.

02:06:37.480 --> 02:06:39.480
Ich meine, die Chance, dass was doppelt generiert wird

02:06:39.480 --> 02:06:41.480
bei meiner kleinen Anzahl, also,

02:06:41.480 --> 02:06:43.480
UID ist raus,

02:06:43.480 --> 02:06:45.480
weil, ja, weil ich UID

02:06:45.480 --> 02:06:47.480
nur etwas komplizierter

02:06:47.480 --> 02:06:49.480
hin- und herschieben kann über ein C-Interface.

02:06:51.480 --> 02:06:53.480
Aber, wir könnten,

02:06:53.480 --> 02:06:58.070
ich habe

02:06:58.070 --> 02:07:00.070
eine Idee, Leute. Ich habe

02:07:00.070 --> 02:07:02.070
eine Idee, was wir machen können.

02:07:02.070 --> 02:07:05.640
Force Champ.

02:07:05.640 --> 02:07:07.640
Was ist mit random oder einem Hash?

02:07:07.640 --> 02:07:09.640
Ich hätte gerne lieber was, irgendeinen simplen Counter.

02:07:09.640 --> 02:07:13.330
Okay, ich habe,

02:07:13.330 --> 02:07:15.330
ich habe nämlich eine Idee, wie wir das ganz

02:07:15.330 --> 02:07:17.330
einfach machen können. Ich meine, unsere Keys

02:07:17.330 --> 02:07:19.330
sind U32, also, wir haben

02:07:19.330 --> 02:07:21.330
4 Trillionen, was auch immer,

02:07:21.330 --> 02:07:23.330
Milliarden, sonst was,

02:07:23.330 --> 02:07:25.330
möglicher,

02:07:25.330 --> 02:07:27.330
ich weiß nicht, was U32-Max ist. Irgendwas mit

02:07:27.330 --> 02:07:29.330
einer 4 vorne.

02:07:29.330 --> 02:07:31.330
Ah, das läuft.

02:07:31.330 --> 02:07:33.330
Mögliche, mögliche

02:07:33.330 --> 02:07:35.330
IDs. So, also, was wir jetzt machen

02:07:35.330 --> 02:07:37.330
können, ist,

02:07:37.330 --> 02:07:39.330
wir machen mal, wir machen mal so eine Function,

02:07:39.330 --> 02:07:45.590
wobei, brauchen wir nicht mal für,

02:07:45.590 --> 02:07:47.590
also, den Store.

02:07:49.590 --> 02:07:51.590
Er ist hier, so.

02:07:51.590 --> 02:07:53.590
Also,

02:07:53.590 --> 02:07:55.590
die ID, wir generieren die ID

02:07:55.590 --> 02:07:59.480
folgendermaßen,

02:07:59.480 --> 02:08:03.680
und zwar,

02:08:03.680 --> 02:08:05.680
wir checken einfach,

02:08:05.680 --> 02:08:07.680
ich habe eine Idee, ich habe eine Idee,

02:08:07.680 --> 02:08:09.680
ich muss mir kurz, nur kurz Gedanken drüber machen.

02:08:09.680 --> 02:08:11.680
Wir machen eine Schleife,

02:08:11.680 --> 02:08:13.680
wir machen eine Schleife,

02:08:13.680 --> 02:08:15.680
und

02:08:15.680 --> 02:08:17.680
wir lassen eine Schleife laufen,

02:08:17.680 --> 02:08:19.680
von 0

02:08:19.680 --> 02:08:21.680
bis U32-Max.

02:08:21.680 --> 02:08:23.680
Und die erste freie ID,

02:08:23.680 --> 02:08:25.680
die noch nicht vergeben ist, nehmen wir.

02:08:25.680 --> 02:08:33.800
Das müsste doch eigentlich gut funktionieren.

02:08:35.800 --> 02:08:37.800
Nee? Warum nicht?

02:08:37.800 --> 02:08:39.800
Warum ist das kacke?

02:08:39.800 --> 02:08:44.960
Dann kannst du auch random

02:08:44.960 --> 02:08:48.720
nehmen. Nee.

02:08:48.720 --> 02:08:50.720
Die erste freie bedeutet immer, dass ich

02:08:50.720 --> 02:08:52.720
eine unique ID finde. Bei random

02:08:52.720 --> 02:08:54.720
habe ich im Zweifelsfall, bei einem

02:08:54.720 --> 02:08:56.720
32-Bit-Random habe ich im Zweifelsfall

02:08:56.720 --> 02:08:58.720
doppelte Werte. Die Chancen sind gering,

02:08:58.720 --> 02:09:00.720
ja? Die Chancen sind

02:09:00.720 --> 02:09:09.160
gering, aber

02:09:09.160 --> 02:09:11.160
sie sind da.

02:09:11.160 --> 02:09:13.160
Und mit einem Counter nicht.

02:09:13.160 --> 02:09:19.800
Also,

02:09:19.800 --> 02:09:21.800
bei einem 32-Bit,

02:09:21.800 --> 02:09:23.800
das ist nicht impossible.

02:09:23.800 --> 02:09:25.800
Bei einem 32-Bit-Int

02:09:27.800 --> 02:09:29.800
hast du, Moment,

02:09:29.800 --> 02:09:31.800
U32-Max.

02:09:31.800 --> 02:09:38.690
Also,

02:09:38.690 --> 02:09:40.690
guck mal, wir haben, was ist denn das?

02:09:40.690 --> 02:09:42.690
Das ist gar nicht mal

02:09:42.690 --> 02:09:44.690
so viel, das sind 4 Milliarden nur.

02:09:44.690 --> 02:09:46.690
Guck mal.

02:09:46.690 --> 02:09:48.690
4 Milliarden. Wir haben nur

02:09:48.690 --> 02:09:50.690
4 Milliarden

02:09:50.690 --> 02:09:52.690
mögliche

02:09:52.690 --> 02:09:54.690
IDs.

02:09:56.690 --> 02:09:58.690
Ich meine, 4 Milliarden bei,

02:09:58.690 --> 02:10:00.690
was weiß ich, 5 gleichzeitigen Connections

02:10:00.690 --> 02:10:02.690
ist die Chance auch sehr gering, okay?

02:10:02.690 --> 02:10:04.690
Gebe ich zu. Aber, nur mal von der Idee

02:10:04.690 --> 02:10:06.690
her, die Chancen sind gar nicht

02:10:06.690 --> 02:10:08.690
so klein. Wir haben 5 Milliarden

02:10:08.690 --> 02:10:12.130
zufällige IDs und

02:10:12.130 --> 02:10:14.130
ab der

02:10:14.130 --> 02:10:16.130
Hälfte, ab 2 Milliarden

02:10:16.130 --> 02:10:18.130
ab 2 Milliarden IDs

02:10:18.130 --> 02:10:20.130
ist die Chance über

02:10:20.130 --> 02:10:22.130
50 Prozent,

02:10:22.130 --> 02:10:24.130
dass die nächste generierte Random-ID

02:10:24.130 --> 02:10:26.130
schon mal vorhanden ist.

02:10:26.130 --> 02:10:28.130
Es sind einfach,

02:10:28.130 --> 02:10:30.130
es sind einfach in einem U32 zu wenig,

02:10:30.130 --> 02:10:36.450
zu wenig Platz.

02:10:36.450 --> 02:10:38.450
UNIX-Timestamp ist, äh, selbst

02:10:38.450 --> 02:10:40.450
in Millisekunden nicht unbedingt so, so sinnvoll

02:10:40.450 --> 02:10:42.450
an der Stelle.

02:10:42.450 --> 02:10:44.450
Komm, wir machen mal das, wir machen mal das, was ich,

02:10:44.450 --> 02:10:46.450
was ich gesagt hab.

02:10:46.450 --> 02:10:48.450
Also, wir machen eine Schleife.

02:10:48.450 --> 02:10:50.450
Wir machen

02:10:50.450 --> 02:10:57.480
eine Schleife von,

02:10:57.480 --> 02:10:59.480
oh, kann man nicht einfach zählen hier irgendwie mit einer

02:10:59.480 --> 02:11:01.480
Schleife, 4i?

02:11:01.480 --> 02:11:03.480
4i in, okay.

02:11:03.480 --> 02:11:05.480
4i in, äh,

02:11:05.480 --> 02:11:07.480
U32

02:11:07.480 --> 02:11:10.980
max. So, und jetzt

02:11:10.980 --> 02:11:17.880
if, ähm,

02:11:17.880 --> 02:11:19.880
wir müssen das hier mal kurz an,

02:11:19.880 --> 02:11:21.880
anwrappen, hier oben schon.

02:11:21.880 --> 02:11:23.880
If

02:11:23.880 --> 02:11:25.880
map, da gibt's noch irgendwie so contains,

02:11:25.880 --> 02:11:27.880
contains key

02:11:27.880 --> 02:11:29.880
i,

02:11:29.880 --> 02:11:31.880
if not contains

02:11:31.880 --> 02:11:33.880
key i,

02:11:33.880 --> 02:11:38.020
dann, Moment, das muss bestimmt,

02:11:38.020 --> 02:11:40.020
dann, return i.

02:11:40.020 --> 02:11:42.020
Das ist alles, was wir machen müssen.

02:11:42.020 --> 02:11:46.230
Schon kriegen wir die erste freie ID.

02:11:46.230 --> 02:11:48.230
Nee, das ist doch eigentlich gar nicht schlecht.

02:11:48.230 --> 02:11:50.230
Weil, das Schöne ist,

02:11:50.230 --> 02:11:52.230
die Verbindung, wir,

02:11:52.230 --> 02:11:54.230
das ist ja nicht nur, das ist ja nicht nur add,

02:11:54.230 --> 02:11:56.230
add, append only.

02:11:56.230 --> 02:11:58.230
Es können ja auch Sachen gelöscht werden.

02:11:58.230 --> 02:12:00.230
Mal angenommen, der erzeugt 5 Verbindungen.

02:12:00.230 --> 02:12:02.230
So, irgendwann schließt,

02:12:02.230 --> 02:12:04.230
irgendwann macht einer den Browser zu,

02:12:04.230 --> 02:12:06.230
und die ersten 5

02:12:06.230 --> 02:12:08.230
Verbindungen werden gelöscht.

02:12:08.230 --> 02:12:10.230
Dann sind die IDs 0 bis 5 wieder frei.

02:12:12.230 --> 02:12:14.230
Und wenn das nächste Mal die Schleife läuft,

02:12:14.230 --> 02:12:16.230
dann gibt er IDs 0 bis 5 neu.

02:12:16.230 --> 02:12:18.230
Das dürfte immer ziemlich

02:12:18.230 --> 02:12:20.230
schnell laufen.

02:12:20.230 --> 02:12:22.230
Übrigens, return i ist an der Stelle

02:12:22.230 --> 02:12:26.560
für Pegatime.

02:12:26.560 --> 02:12:28.560
Leute, wie würde man das, wie würde man das

02:12:28.560 --> 02:12:30.560
jetzt rust, ich hab ne Idee, pass auf, wir machen jetzt,

02:12:30.560 --> 02:12:32.560
wir machen jetzt, wir machen jetzt

02:12:32.560 --> 02:12:34.560
rust idiomatic way,

02:12:34.560 --> 02:12:40.500
das Ganze, match.

02:12:40.500 --> 02:12:42.500
Nee, ich weiß nicht, wie das funktioniert.

02:12:42.500 --> 02:12:45.880
Hahaha.

02:12:45.880 --> 02:12:47.880
Ich hab keine Ahnung.

02:12:47.880 --> 02:12:49.880
Okay.

02:12:49.880 --> 02:12:51.880
Ähm.

02:12:51.880 --> 02:12:53.880
Dann wissen wir.

02:12:53.880 --> 02:13:05.440
Connectest du vielleicht dann so mit dem selben

02:13:05.440 --> 02:13:07.440
Ähm.

02:13:07.440 --> 02:13:11.840
Nee.

02:13:11.840 --> 02:13:13.840
Weil einmal geschlossene

02:13:13.840 --> 02:13:15.840
Connections können glaube ich nicht mal neu aufgebaut werden.

02:13:15.840 --> 02:13:21.720
So.

02:13:21.720 --> 02:13:23.720
Moin für die nicht Programmierer unter uns sind.

02:13:23.720 --> 02:13:25.720
Was wird programmiert?

02:13:25.720 --> 02:13:27.720
Wir programmieren eine,

02:13:27.720 --> 02:13:29.720
ein rust WebRTC

02:13:29.720 --> 02:13:31.720
Backend, mit dem du alle deine

02:13:31.720 --> 02:13:33.720
Webcams im Browser in Echtzeit

02:13:33.720 --> 02:13:35.720
rein streamen kannst.

02:13:35.720 --> 02:13:39.920
Also, wenn's denn dann funktioniert.

02:13:39.920 --> 02:13:41.920
So, also.

02:13:41.920 --> 02:13:43.920
Und wir lernen rust dabei.

02:13:43.920 --> 02:13:45.920
Also, guck mal.

02:13:45.920 --> 02:13:47.920
Kann man hier so ne Art range draus machen?

02:13:47.920 --> 02:13:49.920
Ist, Moment. Range rust.

02:13:51.920 --> 02:13:53.920
Ranges.

02:13:53.920 --> 02:13:55.920
Aha, einfach klammern.

02:13:55.920 --> 02:13:57.920
Also, sowas hier.

02:13:57.920 --> 02:14:04.210
Klammern.

02:14:04.210 --> 02:14:06.210
Und jetzt sagen wir eater.

02:14:06.210 --> 02:14:08.210
Moment, das gibt's nicht.

02:14:08.210 --> 02:14:10.210
Into eater. Ja, soll mir auch recht sein.

02:14:10.210 --> 02:14:12.210
Select. Nee.

02:14:12.210 --> 02:14:14.210
Where. Filter.

02:14:14.210 --> 02:14:16.210
Filter?

02:14:16.210 --> 02:14:18.210
Nee, Filter will ich nicht.

02:14:18.210 --> 02:14:21.590
Moment, Moment.

02:14:21.590 --> 02:14:25.600
Rust. Ähm.

02:14:25.600 --> 02:14:27.600
Find first

02:14:27.600 --> 02:14:29.600
Currents in Vector.

02:14:29.600 --> 02:14:31.600
In Array.

02:14:31.600 --> 02:14:40.770
Position.

02:14:40.770 --> 02:14:42.770
Der Chat sagt find.

02:14:42.770 --> 02:14:44.770
Gibt es find?

02:14:44.770 --> 02:14:46.770
Find.

02:14:46.770 --> 02:14:51.360
Find.

02:14:51.360 --> 02:14:53.360
Filter next. Okay.

02:14:53.360 --> 02:14:55.360
Find takes the

02:14:55.360 --> 02:15:00.850
Closure.

02:15:00.850 --> 02:15:02.850
Okay.

02:15:02.850 --> 02:15:04.850
Ah, yeah. Find is short circuiting.

02:15:04.850 --> 02:15:06.850
In other words, it will stop processing

02:15:06.850 --> 02:15:08.850
as soon as the closure returns true.

02:15:08.850 --> 02:15:10.850
Ja, das ist das, was ich haben will. Okay.

02:15:10.850 --> 02:15:12.850
Find. Ähm.

02:15:12.850 --> 02:15:14.850
Closure in rust. Das ist so,

02:15:14.850 --> 02:15:16.850
glaub ich. Wie in Ruby ist das.

02:15:16.850 --> 02:15:21.190
So. Ja.

02:15:21.190 --> 02:15:23.190
Oder sagen wir mal

02:15:23.190 --> 02:15:26.500
ID. Und jetzt so.

02:15:26.500 --> 02:15:28.500
Nee. Und jetzt?

02:15:28.500 --> 02:15:30.500
Okay, jetzt weiß ich nicht weiter.

02:15:30.500 --> 02:15:34.070
Doch wahrscheinlich

02:15:34.070 --> 02:15:36.070
einfach. Einfach

02:15:36.070 --> 02:15:38.070
Klammer auf, Klammer zu.

02:15:38.070 --> 02:15:40.070
Oder kann man. Moment.

02:15:40.070 --> 02:15:42.070
Oder kann man vielleicht

02:15:42.070 --> 02:15:44.070
sogar

02:15:44.070 --> 02:15:48.280
sagen map

02:15:48.280 --> 02:15:50.280
contains key

02:15:50.280 --> 02:15:52.280
ID

02:15:52.280 --> 02:15:54.280
und dann not.

02:15:54.280 --> 02:16:01.430
Ah.

02:16:01.430 --> 02:16:03.430
Und da jetzt. Moment. Das jetzt.

02:16:03.430 --> 02:16:05.430
Da jetzt ein Match drauf. Da jetzt

02:16:05.430 --> 02:16:07.430
ein Match drauf. Dass wir eine Fehlermeldung

02:16:07.430 --> 02:16:09.430
schmeißen, wenn er keine freien IDs

02:16:09.430 --> 02:16:11.430
findet. Wie funsten das jetzt?

02:16:11.430 --> 02:16:16.280
Match. Jawoll.

02:16:16.280 --> 02:16:18.280
Die Idee hat mal was gebracht. None.

02:16:18.280 --> 02:16:20.280
Okay, wenn er keine freien gefunden

02:16:20.280 --> 02:16:22.280
hat, dann

02:16:22.280 --> 02:16:24.280
würde ich sagen, paniken wir.

02:16:24.280 --> 02:16:26.280
Panic. Äh.

02:16:26.280 --> 02:16:28.280
No free ID found.

02:16:28.280 --> 02:16:35.170
So. Bam.

02:16:35.170 --> 02:16:37.170
Und wenn er was gefunden hat,

02:16:37.170 --> 02:16:39.170
dann soll er

02:16:39.170 --> 02:16:42.610
die ID returnen. Macht das

02:16:42.610 --> 02:16:44.610
so Sinn? Du kannst auch expect machen.

02:16:44.610 --> 02:16:46.610
Mit panic

02:16:46.610 --> 02:16:48.610
killst du den Prozess. Ja, das ist gut so.

02:16:48.610 --> 02:16:50.610
Soll er. Soll er ruhig.

02:16:50.610 --> 02:16:52.610
Also wenn ich es schaffe 4 Milliarden IDs voll zu bekommen,

02:16:52.610 --> 02:16:58.680
ist irgendwas verkehrt.

02:16:58.680 --> 02:17:00.680
Auf der anderen Seite. Ihr habt recht.

02:17:00.680 --> 02:17:02.680
Das macht überhaupt keinen Sinn mit match.

02:17:02.680 --> 02:17:04.680
Sondern wir sagen einfach let ID

02:17:04.680 --> 02:17:06.680
expect

02:17:06.680 --> 02:17:08.680
und dann machen wir eine custom Fehlermeldung.

02:17:08.680 --> 02:17:10.680
No free

02:17:10.680 --> 02:17:12.680
ID found.

02:17:12.680 --> 02:17:16.500
Zack. Easy.

02:17:16.500 --> 02:17:19.940
Das gefällt mir.

02:17:19.940 --> 02:17:21.940
Das finde ich schick.

02:17:21.940 --> 02:17:23.940
Kompiliert. Kompiliert auch noch. Okay.

02:17:23.940 --> 02:17:25.940
So und jetzt haben wir.

02:17:25.940 --> 02:17:27.940
Und jetzt haben wir jedes Mal eine frische ID.

02:17:27.940 --> 02:17:29.940
Sehr gut. Nice.

02:17:29.940 --> 02:17:31.940
Jetzt können wir doch gleich mal testen ob das funktioniert

02:17:31.940 --> 02:17:35.320
was wir gebaut haben.

02:17:35.320 --> 02:17:37.320
Ich glaube mehr brauchen wir in dieser custom

02:17:37.320 --> 02:17:44.470
custom Klasse nicht.

02:17:44.470 --> 02:17:46.470
So dann lasst uns doch mal gucken ob sich

02:17:46.470 --> 02:17:48.470
die Aufregung heute gelohnt hat.

02:17:48.470 --> 02:17:50.470
Gehen wir mal

02:17:50.470 --> 02:17:52.470
in unsere Lipp. So.

02:17:52.470 --> 02:17:54.470
Api State.

02:17:54.470 --> 02:17:56.470
Da gibt es jetzt ein Feld für

02:17:56.470 --> 02:17:58.470
Connections. Das reicht erstmal.

02:17:58.470 --> 02:18:00.470
Connections.

02:18:00.470 --> 02:18:02.470
Ich habe jetzt schon öfters gesehen

02:18:02.470 --> 02:18:04.470
dass die Leute gerne in Rust die Sachen

02:18:04.470 --> 02:18:06.470
abkürzen. Rust

02:18:06.470 --> 02:18:08.470
Fifads. Wie würdet ihr das schreiben an der

02:18:08.470 --> 02:18:10.470
Stelle? Würdet ihr die Variable

02:18:10.470 --> 02:18:12.470
Connections nennen?

02:18:12.470 --> 02:18:14.470
Mojojojo. Danke schön für den

02:18:14.470 --> 02:18:16.470
Sub. Würdet ihr die Variable

02:18:16.470 --> 02:18:18.470
an der Stelle Connections nennen?

02:18:18.470 --> 02:18:20.470
Con?

02:18:20.470 --> 02:18:22.470
Cons?

02:18:22.470 --> 02:18:24.470
C?

02:18:24.470 --> 02:18:26.470
Oder wie ich?

02:18:26.470 --> 02:18:36.880
Connections.

02:18:36.880 --> 02:18:38.880
Der Sensitive Aal hat auch Subscribed.

02:18:38.880 --> 02:18:40.880
Gar nicht gesehen. Danke für den Sub.

02:18:40.880 --> 02:18:45.160
Verbindungen. Ja genau.

02:18:47.160 --> 02:18:58.660
Prime Sub für die Krustentiere.

02:18:58.660 --> 02:19:00.660
Sehr schön. Pogu.

02:19:00.660 --> 02:19:02.660
Von Aqua.

02:19:02.660 --> 02:19:04.660
Dankeschön für den Sub.

02:19:04.660 --> 02:19:06.660
Und für die Fifad Unterstützung

02:19:06.660 --> 02:19:08.660
vorhin.

02:19:08.660 --> 02:19:10.660
Okay. Connections. Also.

02:19:10.660 --> 02:19:12.660
Registry of Tea.

02:19:12.660 --> 02:19:16.290
Kann das sein dass ich schon mal Registry

02:19:16.290 --> 02:19:18.290
irgendwie habe hier?

02:19:18.290 --> 02:19:20.290
Registry.

02:19:22.290 --> 02:19:24.290
Das habe ich schon mal importiert. Was ist das?

02:19:24.290 --> 02:19:26.290
Oh.

02:19:26.290 --> 02:19:28.290
Shit.

02:19:28.290 --> 02:19:30.290
Ne. AppState.

02:19:30.290 --> 02:19:32.290
Registry of

02:19:32.290 --> 02:19:34.290
So. Was brauchen wir jetzt? Testweise

02:19:34.290 --> 02:19:36.290
Connections haben wir gesagt.

02:19:36.290 --> 02:19:38.290
Track local static sample.

02:19:38.290 --> 02:19:48.100
Ne.

02:19:48.100 --> 02:20:00.630
Alter. Wo ist das Problem

02:20:00.630 --> 02:20:02.630
jetzt? Ach ist das nicht public

02:20:02.630 --> 02:20:04.630
vielleicht? Ach ist private.

02:20:04.630 --> 02:20:06.630
Ah.

02:20:06.630 --> 02:20:08.630
Excellent.

02:20:08.630 --> 02:20:23.490
Wie will ich importieren?

02:20:23.490 --> 02:20:25.490
Card Collector. Moin.

02:20:25.490 --> 02:20:27.490
Pluska. Ja auch wieder am Start.

02:20:27.490 --> 02:20:31.700
Pogu.

02:20:31.700 --> 02:20:33.700
Der Name kommt mir zumindest bekannt vor.

02:20:33.700 --> 02:20:37.520
Ich weiß nicht genau woher.

02:20:37.520 --> 02:20:41.540
Aber der Name kommt mir bekannt vor.

02:20:41.540 --> 02:20:43.540
Also hier aus dem Chat auf jeden Fall.

02:20:43.540 --> 02:20:49.220
Aber ich weiß nicht

02:20:49.220 --> 02:20:51.220
mehr mit was ich

02:20:51.220 --> 02:20:53.220
in Verbindung. Zumindest warst du schon öfters hier.

02:20:53.220 --> 02:20:57.560
So.

02:20:57.560 --> 02:20:59.560
Connections. Registry. Track local static sample.

02:20:59.560 --> 02:21:01.560
So. Das müsste doch immer noch

02:21:01.560 --> 02:21:03.560
kompilieren oder? Nein. Natürlich nicht.

02:21:03.560 --> 02:21:05.560
Ach so. Weil ich es da unten vergessen habe.

02:21:05.560 --> 02:21:11.110
Ist okay.

02:21:11.110 --> 02:21:13.110
Registry. New.

02:21:13.110 --> 02:21:15.110
Alles klar.

02:21:15.110 --> 02:21:17.110
Es kompiliert. Yeah.

02:21:17.110 --> 02:21:20.420
Top. Dann können wir das ja auch jetzt

02:21:20.420 --> 02:21:22.420
mal ausprobieren. Connections.

02:21:22.420 --> 02:21:24.420
Dann schmeißen wir das hier mal weg.

02:21:24.420 --> 02:21:26.420
Also das Ziel ist, dass dieses ganze Zeug hier

02:21:26.420 --> 02:21:28.420
reinwandert in AppState.

02:21:28.420 --> 02:21:30.420
Check mal ob die Funktionen

02:21:30.420 --> 02:21:37.830
alle public sind. Aber

02:21:37.830 --> 02:21:41.460
sonst alle. So.

02:21:41.460 --> 02:21:43.460
Und jetzt.

02:21:43.460 --> 02:21:49.200
Wo verwenden wir denn jetzt

02:21:49.200 --> 02:21:51.200
Connections? Ich lösche das hier einfach mal.

02:21:51.200 --> 02:21:53.200
Genau. Da wo es rot geworden ist.

02:21:53.200 --> 02:21:55.200
Connections gleich.

02:21:55.200 --> 02:21:57.200
Also im Prinzip brauchen wir bloß noch self.

02:21:57.200 --> 02:21:59.200
AppState. Nicht self.

02:21:59.200 --> 02:22:01.200
AppState. Get.

02:22:01.200 --> 02:22:03.200
Unwrap Connections.

02:22:03.200 --> 02:22:08.050
Also aus irgendwelchen Gründen

02:22:08.050 --> 02:22:10.050
nicht funktioniert.

02:22:10.050 --> 02:22:12.050
Cannot move.

02:22:12.050 --> 02:22:14.050
Ach so. Muss ich wieder

02:22:14.050 --> 02:22:17.620
und davor machen. Ja.

02:22:17.620 --> 02:22:22.210
Ok. Registry.

02:22:22.210 --> 02:22:24.210
Pair Connections. Connections.

02:22:24.210 --> 02:22:26.210
Get.

02:22:26.210 --> 02:22:30.230
Ne. Moment. Erst mal

02:22:30.230 --> 02:22:34.120
da unten das ganze fixen.

02:22:34.120 --> 02:22:39.730
AppState. Get.

02:22:39.730 --> 02:22:41.730
Unwrap.

02:22:41.730 --> 02:22:47.090
Connections. Und wieder und.

02:22:47.090 --> 02:22:49.090
Soll ich nicht? Ja komm.

02:22:49.090 --> 02:22:51.090
Wir lassen es jetzt mal so.

02:22:51.090 --> 02:22:53.090
So. Insert.

02:22:53.090 --> 02:22:55.090
Insert gibt es nicht. Es gibt

02:22:55.090 --> 02:23:00.840
Add.

02:23:00.840 --> 02:23:02.840
Und es wird einfach nur

02:23:02.840 --> 02:23:04.840
die Pair Connection hinzugefügt.

02:23:04.840 --> 02:23:21.840
Ach so.

02:23:21.840 --> 02:23:23.840
Ja. Wenn man es mal richtig macht, dann wird es auch

02:23:23.840 --> 02:23:28.440
funktionieren. Das hier unten

02:23:28.440 --> 02:23:30.440
brauche ich gar nicht mehr.

02:23:30.440 --> 02:23:32.440
Weil es schon

02:23:32.440 --> 02:23:36.070
initialisiert ist.

02:23:36.070 --> 02:23:44.240
Ja.

02:23:44.240 --> 02:23:46.240
Bleibt im Endeffekt nur noch

02:23:46.240 --> 02:23:48.240
das hier. Pair Connections.

02:23:48.240 --> 02:23:50.240
Get ID.

02:23:50.240 --> 02:23:52.240
Das hier bleibt jetzt noch zu fixen.

02:23:52.240 --> 02:23:54.240
So. Und

02:23:54.240 --> 02:23:56.240
wir getten jetzt.

02:23:56.240 --> 02:23:58.240
Ok. Das sind U32.

02:23:58.240 --> 02:24:00.240
Muss es nur noch sein.

02:24:00.240 --> 02:24:02.240
Wir sind mal hart drauf

02:24:02.240 --> 02:24:04.240
und casten mal schnell das U64

02:24:04.240 --> 02:24:06.240
runter zu einem U32.

02:24:06.240 --> 02:24:12.500
Und get ist bei mir

02:24:12.500 --> 02:24:14.500
ein U32. Ja.

02:24:14.500 --> 02:24:16.500
Moment. Kann man in Rust

02:24:16.500 --> 02:24:18.500
das irgendwie casten?

02:24:18.500 --> 02:24:20.500
Dass ich sage U32 ID?

02:24:20.500 --> 02:24:22.500
Ne.

02:24:22.500 --> 02:24:24.500
Ok. Ich meine das ist unsafe.

02:24:24.500 --> 02:24:26.500
Das wird wahrscheinlich. S. Geht das? Ok.

02:24:26.500 --> 02:24:31.220
S.

02:24:31.220 --> 02:24:33.220
Ach ne. S U32.

02:24:33.220 --> 02:24:35.220
Ah.

02:24:35.220 --> 02:24:39.490
Unwrap.

02:24:39.490 --> 02:24:48.560
Jetzt brauchen wir gar nichts unwrappen.

02:24:48.560 --> 02:24:50.560
Ja doch. Ist doch gut. Passt doch alles.

02:24:50.560 --> 02:24:52.560
Ok.

02:24:52.560 --> 02:24:54.560
Ich glaube das war es schon.

02:24:54.560 --> 02:24:56.560
Das ist übrigens blöd.

02:24:56.560 --> 02:24:58.560
Das müssen wir. Wir machen das mal richtig.

02:24:58.560 --> 02:25:00.560
Ja. Das ist ein U32 hier.

02:25:02.560 --> 02:25:04.560
Und das ist ein U32 hier.

02:25:04.560 --> 02:25:09.160
Und das ist ein

02:25:09.160 --> 02:25:11.160
U32 hier.

02:25:11.160 --> 02:25:13.160
U64.

02:25:13.160 --> 02:25:15.160
Das ist ein U32 hier. Wir machen das mal richtig.

02:25:15.160 --> 02:25:17.160
Sonst habe ich nachher irgendwelche

02:25:17.160 --> 02:25:19.160
merkwürdigen random Bugs.

02:25:19.160 --> 02:25:21.160
Und in .net

02:25:21.160 --> 02:25:23.160
ist das auch ein Uint

02:25:23.160 --> 02:25:25.160
32. Ok.

02:25:25.160 --> 02:25:27.160
So.

02:25:27.160 --> 02:25:29.160
So. Und jetzt können wir mal sehen ob der Bug

02:25:29.160 --> 02:25:31.160
gefixt ist. Das nur einmal

02:25:31.160 --> 02:25:33.160
nur einmalig funktioniert.

02:25:33.160 --> 02:25:35.160
Das sollte jetzt mehrmalig mit reloaden funktionieren.

02:25:35.160 --> 02:25:41.380
Starten.

02:25:41.380 --> 02:25:43.380
Ok.

02:25:43.380 --> 02:25:49.380
Shit. Irgendwo habe ich

02:25:49.380 --> 02:25:51.380
was verkehrt gemacht.

02:25:51.380 --> 02:25:53.380
Ok. 44.

02:25:53.380 --> 02:25:55.380
Zeile 44. Ok.

02:25:55.380 --> 02:25:59.400
Let's go. Zeile 44.

02:25:59.400 --> 02:26:08.150
Hast du die

02:26:08.150 --> 02:26:10.150
lip kopiert? Ja.

02:26:10.150 --> 02:26:14.040
Zeile 44.

02:26:14.040 --> 02:26:16.040
Die ID gibt

02:26:16.040 --> 02:26:39.640
es nicht. Ok. Die ID

02:26:39.640 --> 02:26:41.640
gibt es nicht. Warum gibt es die ID nicht?

02:26:41.640 --> 02:26:43.640
Weil ich irgendwo, irgendwo

02:26:43.640 --> 02:26:45.640
Mist mache hier.

02:26:45.640 --> 02:26:47.640
ID gleich.

02:26:47.640 --> 02:26:49.640
Ok. ID.

02:26:49.640 --> 02:26:51.640
Ach hier. ID gleich 1.

02:26:51.640 --> 02:26:59.360
0. Ja. Hier.

02:26:59.360 --> 02:27:01.360
ID gleich.

02:27:01.360 --> 02:27:15.880
Und jetzt gibt es die ID auch.

02:27:15.880 --> 02:27:17.880
Wenn da immer 1

02:27:17.880 --> 02:27:19.880
drin steht.

02:27:19.880 --> 02:27:21.880
Ne Option return. Das ist gut, dass

02:27:21.880 --> 02:27:23.880
das gecrashed ist. Der konnte

02:27:23.880 --> 02:27:30.320
schlicht und ergreifend nicht weitermachen.

02:27:30.320 --> 02:27:32.320
Ich finde das gut.

02:27:32.320 --> 02:27:39.160
Da weißt du allerdings, dass es kaputt ist.

02:27:39.160 --> 02:27:45.030
So. Nochmal.

02:27:45.030 --> 02:27:49.490
Fuck. Ne.

02:27:49.490 --> 02:27:53.190
Es geht. Der Browser

02:27:53.190 --> 02:27:55.190
war einfach nur pepega gerade.

02:27:55.190 --> 02:27:57.190
Kann das sein,

02:27:57.190 --> 02:27:59.190
dass mein JavaScript

02:27:59.190 --> 02:28:11.720
ein bisschen weirdchamp ist?

02:28:11.720 --> 02:28:13.720
Ich glaube mein JavaScript war ein bisschen weirdchamp.

02:28:13.720 --> 02:28:15.720
gerade.

02:28:15.720 --> 02:28:17.720
Aber es funktioniert. Der Bug ist behoben.

02:28:17.720 --> 02:28:19.720
WebRTC funktioniert.

02:28:19.720 --> 02:28:21.720
Und er funktioniert

02:28:21.720 --> 02:28:23.720
mehrfach.

02:28:23.720 --> 02:28:25.720
Auch wenn man refresht.

02:28:25.720 --> 02:28:27.720
Aber wenn man

02:28:27.720 --> 02:28:29.720
zu schnell refresht, dann

02:28:29.720 --> 02:28:34.950
Moment. Wenn er irgendwas reused,

02:28:34.950 --> 02:28:36.950
dann funktioniert es nicht. Ok. Das müssen wir

02:28:36.950 --> 02:28:38.950
nochmal überprüfen. Ja.

02:28:38.950 --> 02:28:42.320
Der baut aber gar nicht die

02:28:42.320 --> 02:28:44.320
Verbindung auf.

02:28:44.320 --> 02:28:55.190
Nun ja. Der versucht

02:28:55.190 --> 02:28:57.190
irgendwas zu re-usen, was er nicht

02:28:57.190 --> 02:29:08.820
re-usen soll.

02:29:08.820 --> 02:29:10.820
Da stimmt irgendwas doch nicht ganz in der Logik,

02:29:10.820 --> 02:29:12.820
würde ich sagen.

02:29:12.820 --> 02:29:14.820
Wir geben nochmal kurz aus

02:29:14.820 --> 02:29:16.820
die Connection ID.

02:29:18.820 --> 02:29:20.820
Weil das sollte immer eine neue ID sein.

02:29:20.820 --> 02:29:24.580
Es sollte immer

02:29:24.580 --> 02:29:26.580
log

02:29:26.580 --> 02:29:28.580
jasonclientid.

02:29:28.580 --> 02:29:30.580
Es sollte immer eine neue ID sein.

02:29:30.580 --> 02:29:32.580
35, 36,

02:29:32.580 --> 02:29:34.580
37. Es ist auch immer eine neue.

02:29:34.580 --> 02:29:36.580
38,

02:29:36.580 --> 02:29:38.580
39. Ja.

02:29:38.580 --> 02:29:40.580
Der Browser denkt nur,

02:29:40.580 --> 02:29:42.580
er kann die Sache cachen aus irgendwelchen Gründen.

02:29:42.580 --> 02:29:44.580
Und das funktioniert nicht.

02:29:44.580 --> 02:29:46.580
Guck. Manchmal

02:29:46.580 --> 02:29:48.580
cache das und manchmal nicht.

02:29:48.580 --> 02:29:50.580
Keine Ahnung, was mein Browser da für

02:29:50.580 --> 02:29:52.580
pepegasachen macht.

02:29:52.580 --> 02:29:54.580
Aber ich bin mir relativ sicher,

02:29:54.580 --> 02:29:56.580
hier, weil es auch immer neu ist,

02:29:56.580 --> 02:29:58.580
dass das nicht an meinem Backend liegt.

02:29:58.580 --> 02:30:04.640
Weil, weil,

02:30:04.640 --> 02:30:06.640
wenn ich ohne cache refreshe,

02:30:06.640 --> 02:30:08.640
guckt,

02:30:08.640 --> 02:30:10.640
wenn ich ohne cache refreshe,

02:30:10.640 --> 02:30:12.640
dann funzt es immer.

02:30:12.640 --> 02:30:17.880
Bis es nicht funktioniert.

02:30:17.880 --> 02:30:26.820
Kommt das nicht irgendwie in die

02:30:26.820 --> 02:30:34.360
Quere? Das sieht ein bisschen

02:30:34.360 --> 02:30:36.360
so nach Thread-Problemen aus, oder?

02:30:38.360 --> 02:30:40.360
Aber ihr seht, es ist immer eine neue

02:30:40.360 --> 02:30:42.360
Connection. Also daran kann es ja eigentlich

02:30:42.360 --> 02:30:45.920
nicht liegen. Und nachdem ich immer

02:30:45.920 --> 02:30:47.920
alles schön unwrappe und hier nichts abkackt,

02:30:47.920 --> 02:30:52.960
ich schieb das wirklich

02:30:52.960 --> 02:30:54.960
aktuell auf meinen Browser.

02:30:54.960 --> 02:30:58.280
Dass der da nicht so genau

02:30:58.280 --> 02:31:00.280
weiß,

02:31:00.280 --> 02:31:07.240
was er macht.

02:31:07.240 --> 02:31:09.240
Ich schieb's auch auf JavaScript.

02:31:09.240 --> 02:31:13.700
Versuch mal Firefox.

02:31:13.700 --> 02:31:15.700
About WebRTC.

02:31:15.700 --> 02:31:23.300
Ja. True.

02:31:23.300 --> 02:31:31.670
Nö.

02:31:31.670 --> 02:31:36.900
Firefox hat das gleiche.

02:31:36.900 --> 02:31:50.520
Failed. Aber ihr

02:31:50.520 --> 02:31:53.960
seht, er hat die.

02:31:53.960 --> 02:31:57.330
Er bekommt die Offer hier.

02:31:57.330 --> 02:31:59.330
Hat der Probleme mit den Multiplexen

02:31:59.330 --> 02:32:04.760
beim Port oder so?

02:32:04.760 --> 02:32:06.760
Wir machen noch mal ganz kurz den Debug

02:32:06.760 --> 02:32:14.480
rein.

02:32:14.480 --> 02:32:16.480
Das ändert daran doch

02:32:16.480 --> 02:32:22.480
jetzt auch nichts.

02:32:22.480 --> 02:32:24.480
An Rust nirgendwo Error-Handling.

02:32:24.480 --> 02:32:26.480
Also an Rust wird's in dem Fall echt nicht liegen.

02:32:26.480 --> 02:32:28.480
An der Rust-Seite.

02:32:28.480 --> 02:32:30.480
Irgendwie liegt's glaube ich an

02:32:30.480 --> 02:32:32.480
PPGA JavaScript. Ist meine Vermutung.

02:32:32.480 --> 02:32:43.990
Irgendwie.

02:32:43.990 --> 02:32:45.990
Das ist übrigens auch

02:32:45.990 --> 02:32:47.990
da waren sie lustig bei Firefox.

02:32:47.990 --> 02:32:49.990
Das steht in jeder dieser

02:32:49.990 --> 02:32:51.990
Meldungen drinne.

02:32:51.990 --> 02:32:53.990
Das ist SDP.

02:32:53.990 --> 02:32:55.990
Weil das halt das Session Description

02:32:55.990 --> 02:32:57.990
Protokoll ist, weil einer lustig hat geschrieben.

02:32:57.990 --> 02:33:02.580
Das ist Superachter.

02:33:02.580 --> 02:33:04.580
Wenn man das mal sieht, da war Mozilla Mitarbeiter.

02:33:04.580 --> 02:33:06.580
Wollten witzig sein.

02:33:06.580 --> 02:33:08.580
Lull.

02:33:08.580 --> 02:33:10.580
Also das hat funktioniert offensichtlich.

02:33:10.580 --> 02:33:12.580
Sonst hätte er hier ja

02:33:12.580 --> 02:33:30.040
nix geantwortet.

02:33:30.040 --> 02:33:32.040
Wir machen noch mal hier

02:33:32.040 --> 02:33:34.040
Keckel.

02:33:34.040 --> 02:33:36.040
Wintel.

02:33:36.040 --> 02:33:38.040
So.

02:33:38.040 --> 02:33:40.040
Jetzt können wir mal gucken.

02:33:40.040 --> 02:33:47.380
Was? Also das sieht nicht so aus

02:33:47.380 --> 02:33:49.380
als liegt das

02:33:49.380 --> 02:33:51.380
Hä?

02:33:51.380 --> 02:33:53.380
Ich glaube eher das liegt am JavaScript Zeug.

02:33:53.380 --> 02:34:05.970
Ok.

02:34:05.970 --> 02:34:12.680
Zweites ist kaputt gegangen.

02:34:12.680 --> 02:34:14.680
Keckel.

02:34:14.680 --> 02:34:16.680
Bei mir ist alles durchgegangen.

02:34:16.680 --> 02:34:20.690
Also ich vermute das liegt.

02:34:20.690 --> 02:34:22.690
Es ist auch immer ne neue ID

02:34:22.690 --> 02:34:24.690
am Start.

02:34:24.690 --> 02:34:28.900
ID 2.

02:34:28.900 --> 02:34:30.900
Wir können mal gucken ob es in neuen Tabs

02:34:30.900 --> 02:34:34.660
irgendwann auftritt.

02:34:34.660 --> 02:34:36.660
Wenn es nämlich nicht in neuen Tabs auftritt.

02:34:36.660 --> 02:34:38.660
Dann liegt das.

02:34:38.660 --> 02:34:43.000
Ok es tritt auch in neuen Tabs auf.

02:34:43.000 --> 02:34:45.000
Dann ist tatsächlich irgendwas

02:34:45.000 --> 02:34:47.000
kaputt.

02:34:47.000 --> 02:35:09.830
Aber das werden wir nicht jetzt fixen.

02:35:09.830 --> 02:35:11.830
Warte der Browser nicht lang genug?

02:35:11.830 --> 02:35:13.830
Ne das glaube ich nicht so schnell wie das immer geht.

02:35:13.830 --> 02:35:17.720
Aber auf jeden Fall wenn es jeden

02:35:17.720 --> 02:35:19.720
zehntes mal loaden oder so nicht funktioniert

02:35:19.720 --> 02:35:27.760
dann ist schon PP egal.

02:35:27.760 --> 02:35:29.760
Ah hier. Failed.

02:35:29.760 --> 02:35:31.760
Clear History.

02:35:31.760 --> 02:35:33.760
Clear History.

02:35:33.760 --> 02:35:35.760
Clear History juckt dies nicht.

02:35:35.760 --> 02:35:39.460
Clear History.

02:35:39.460 --> 02:35:41.460
Ja das geht.

02:35:41.460 --> 02:35:43.460
Doch in nicht unerheblichen Teil

02:35:43.460 --> 02:35:45.460
der Fälle.

02:35:45.460 --> 02:35:50.180
Geht es kaputt.

02:35:50.180 --> 02:35:52.180
Er bekommt aber den Handshake.

02:35:52.180 --> 02:35:58.370
Ja er bekommt auch Candidates.

02:35:58.370 --> 02:36:06.160
Also ich tippe

02:36:06.160 --> 02:36:08.160
drauf dass das ein Problem der

02:36:08.160 --> 02:36:10.160
Rust Library vielleicht ist.

02:36:10.160 --> 02:36:12.160
Weil ich mache

02:36:12.160 --> 02:36:16.820
hier so Port Multiplexing.

02:36:16.820 --> 02:36:18.820
Ich mache hier so Port Multiplexing

02:36:18.820 --> 02:36:20.820
und das ist

02:36:20.820 --> 02:36:22.820
meine letzte Amtshandlung heute.

02:36:22.820 --> 02:36:24.820
Ich lass das mal weg.

02:36:24.820 --> 02:36:26.820
Das Port Multiplexing und guck mal ob es

02:36:26.820 --> 02:36:31.990
dann weg ist.

02:36:31.990 --> 02:36:33.990
Ohne Port Multiplexing will ich das nicht betreiben.

02:36:33.990 --> 02:36:41.650
Was bedeuten die

02:36:41.650 --> 02:36:43.650
Abkürzungen in Rust?

02:36:43.650 --> 02:36:45.650
Welche Abkürzungen?

02:36:45.650 --> 02:36:47.650
Also unspezifischer Fragen

02:36:47.650 --> 02:36:51.090
hättest du auch nicht mehr können oder?

02:36:51.090 --> 02:36:53.090
Oh du meinst für was Rust steht.

02:36:53.090 --> 02:36:55.090
Rust ist gar keine Abkürzung.

02:36:55.090 --> 02:37:00.520
Rust ist ne Programmiersprache.

02:37:00.520 --> 02:37:02.520
Was ist Port Multiplexing?

02:37:02.520 --> 02:37:04.520
Der macht mehrere Connections über den gleichen Port

02:37:04.520 --> 02:37:09.750
anstatt für jeden Port was eigenes auf.

02:37:09.750 --> 02:37:11.750
Ah.

02:37:11.750 --> 02:37:13.750
Chatge.

02:37:13.750 --> 02:37:15.750
Ich glaube das liegt am Port Multiplexing.

02:37:15.750 --> 02:37:17.750
Guckt mal.

02:37:17.750 --> 02:37:23.490
Seht ihr das?

02:37:23.490 --> 02:37:36.920
Jetzt kackt nix ab.

02:37:36.920 --> 02:37:43.240
Das liegt am Port Multiplexing von der Library.

02:37:43.240 --> 02:37:45.240
Aber ohne Port Multiplexing werde ich das nicht

02:37:45.240 --> 02:37:49.440
betreiben.

02:37:49.440 --> 02:37:51.440
Guckt das wäre schon längst abgekackt.

02:37:51.440 --> 02:37:55.650
Normalerweise.

02:37:55.650 --> 02:37:59.920
Ich kann noch ein paar mal refreshen.

02:37:59.920 --> 02:38:05.800
Passt mal auf.

02:38:05.800 --> 02:38:10.320
Ich hab halt ein paar Ports offen jetzt.

02:38:10.320 --> 02:38:12.320
Was kann man da jetzt machen?

02:38:12.320 --> 02:38:14.320
Ehrlich gesagt vermutlich

02:38:14.320 --> 02:38:16.320
nicht viel.

02:38:16.320 --> 02:38:18.320
Was ich jetzt machen würde

02:38:18.320 --> 02:38:20.320
ist.

02:38:20.320 --> 02:38:22.320
Ich würde nen Retry im Javascript einbauen.

02:38:22.320 --> 02:38:24.320
Also guck mal.

02:38:24.320 --> 02:38:26.320
Zum Beispiel.

02:38:26.320 --> 02:38:28.320
Also sagen wir mal das hier.

02:38:28.320 --> 02:38:30.320
Das ist ja relativ offensichtlich der Bug.

02:38:30.320 --> 02:38:32.320
Der irgendwie im Port Multiplexing liegt.

02:38:32.320 --> 02:38:34.320
Und nachdem ich hier nix großartig einstellen kann.

02:38:34.320 --> 02:38:41.160
Ja wird.

02:38:41.160 --> 02:38:43.160
Man kann ja auch keine großartigen Settings

02:38:43.160 --> 02:38:45.160
sonst einstellen.

02:38:45.160 --> 02:38:47.160
Unip Multiplexing Default.

02:38:47.160 --> 02:38:51.160
Man kann da nicht wirklich viel einstellen.

02:38:51.160 --> 02:38:55.240
Closed.

02:38:55.240 --> 02:39:00.210
Gibt keine großartigen Settings.

02:39:00.210 --> 02:39:02.210
Ich würde nen Retry einbauen.

02:39:02.210 --> 02:39:04.210
Im Javascript.

02:39:04.210 --> 02:39:13.540
Ne da kann man nicht viel.

02:39:13.540 --> 02:39:19.160
Option.

02:39:19.160 --> 02:39:21.160
Warum nicht TCP?

02:39:21.160 --> 02:39:23.160
Würde ich gerne machen.

02:39:23.160 --> 02:39:25.160
Unterstützt die Library nicht.

02:39:25.160 --> 02:39:27.160
Und ist für Echtzeit Video jetzt auch nicht so wichtig.

02:39:27.160 --> 02:39:29.160
Also ich würde nen Retry einbauen.

02:39:29.160 --> 02:39:31.160
Ehrlich gesagt.

02:39:31.160 --> 02:39:33.160
Und zwar.

02:39:33.160 --> 02:39:36.980
Mal.

02:39:36.980 --> 02:39:38.980
Kompilieren das nochmal.

02:39:38.980 --> 02:39:40.980
Dann gehen wir in C Sharp.

02:39:40.980 --> 02:39:42.980
Führen das nochmal aus.

02:39:42.980 --> 02:39:44.980
Machen wir sogar Minus C Release.

02:39:44.980 --> 02:39:46.980
Hier auch mal.

02:39:46.980 --> 02:39:48.980
Gucken ob das Problem noch auftritt.

02:39:48.980 --> 02:39:50.980
Ja Problem tritt immer noch auf.

02:39:50.980 --> 02:39:52.980
Also es liegt echt.

02:39:52.980 --> 02:39:54.980
Es liegt echt am Port Multiplexing.

02:39:54.980 --> 02:39:56.980
Guckt das das manchmal nicht geht.

02:39:56.980 --> 02:39:58.980
Kaum ist das eingeschaltet.

02:39:58.980 --> 02:40:04.020
Bugts wieder rum.

02:40:04.020 --> 02:40:06.020
So was ich jetzt machen würde ist. Ganz ehrlich.

02:40:06.020 --> 02:40:08.020
Retry hier im Javascript einbauen.

02:40:08.020 --> 02:40:10.020
So nach dem Motto.

02:40:10.020 --> 02:40:12.020
Ey.

02:40:12.020 --> 02:40:14.020
Wenn das.

02:40:14.020 --> 02:40:16.020
Innerhalb von.

02:40:16.020 --> 02:40:18.020
Nicht connected hat.

02:40:18.020 --> 02:40:20.020
Dann Retry.

02:40:20.020 --> 02:40:22.020
Das kann ich mir jetzt.

02:40:22.020 --> 02:40:24.020
Das kann ich mir jetzt nicht aus dem Ärmel schütteln.

02:40:24.020 --> 02:40:26.020
Aber ich schreib mir das mal als To Do rein.

02:40:26.020 --> 02:40:29.720
To Do Retry.

02:40:29.720 --> 02:40:31.720
Oder vielleicht kann man das.

02:40:31.720 --> 02:40:33.720
Ich mein 5 Minuten haben wir noch Zeit.

02:40:33.720 --> 02:40:35.720
Vielleicht kann man das sogar relativ einfach machen.

02:40:35.720 --> 02:40:37.720
Der legt hier die Verbindung an.

02:40:37.720 --> 02:40:42.370
So und.

02:40:42.370 --> 02:40:44.370
Okay ich weiß was wir machen. Easy. Easy.

02:40:44.370 --> 02:40:46.370
Ich weiß was wir machen. Guck mal.

02:40:46.370 --> 02:40:48.370
Z Intervall. Es ist Javascript.

02:40:48.370 --> 02:40:50.370
Da können wir auch eklige Sachen machen.

02:40:50.370 --> 02:40:52.370
Z Intervall. Nach einer Sekunde.

02:40:52.370 --> 02:40:54.370
Ja.

02:40:54.370 --> 02:40:56.370
Das wird jetzt.

02:40:56.370 --> 02:40:58.370
Richtig eklig.

02:40:58.370 --> 02:41:00.370
Das wird so eklig.

02:41:00.370 --> 02:41:02.370
Da werdet ihr den Stream ausschalten wollen.

02:41:02.370 --> 02:41:04.370
Also wenn nach einer Sekunde.

02:41:04.370 --> 02:41:08.520
Der Connection State.

02:41:08.520 --> 02:41:10.520
Ähm.

02:41:10.520 --> 02:41:12.520
Der Connection State ungleich.

02:41:12.520 --> 02:41:14.520
Ungleich.

02:41:14.520 --> 02:41:16.520
Connected ist.

02:41:16.520 --> 02:41:18.520
Dann.

02:41:18.520 --> 02:41:22.210
Passt auf.

02:41:22.210 --> 02:41:24.210
Dann.

02:41:24.210 --> 02:41:26.210
Window. Location.

02:41:26.210 --> 02:41:30.740
Reload.

02:41:30.740 --> 02:41:44.740
Oh.

02:41:44.740 --> 02:41:46.740
Das ist ein bisschen schnell.

02:41:46.740 --> 02:41:48.740
Das ist ein bisschen. Okay.

02:41:48.740 --> 02:41:50.740
Vielleicht 2 Sekunden.

02:41:50.740 --> 02:41:52.740
Vielleicht 2 Sekunden.

02:41:52.740 --> 02:41:57.330
Okay 2 Sekunden.

02:41:57.330 --> 02:41:59.330
Jetzt hab ich es gebrokent.

02:41:59.330 --> 02:42:01.330
Jetzt ist es kaputt Leute.

02:42:01.330 --> 02:42:04.710
Ah. Geht doch. Geht doch. Easy.

02:42:04.710 --> 02:42:08.980
Vielleicht sollte man.

02:42:08.980 --> 02:42:10.980
Okay. Vielleicht machen wir auch 3 Sekunden.

02:42:10.980 --> 02:42:18.360
Easy.

02:42:18.360 --> 02:42:20.360
Eventuell noch Clear Intervall im Else Case.

02:42:20.360 --> 02:42:22.360
Äh.

02:42:22.360 --> 02:42:27.520
Moment. Ich will ja auch nicht

02:42:27.520 --> 02:42:29.520
Z Intervall. Ich will Z Timeout.

02:42:29.520 --> 02:42:33.090
Ich will ja Z Timeout. Ich will ja gar nicht

02:42:33.090 --> 02:42:35.090
Z Intervall.

02:42:35.090 --> 02:42:47.490
Ich will ja, dass es nur einmal ausgeführt wird.

02:42:47.490 --> 02:42:49.490
Guck. Und es funzt.

02:42:49.490 --> 02:42:51.490
Ha. Connection Probleme.

02:42:51.490 --> 02:42:53.490
3 Sekunden später. Bam. Seite.

02:42:53.490 --> 02:42:57.570
Reloaded. Connection. Funzt.

02:42:57.570 --> 02:42:59.570
Kannst du nicht das Event Connected abfangen

02:42:59.570 --> 02:43:03.330
für den Reload?

02:43:03.330 --> 02:43:05.330
Doch.

02:43:05.330 --> 02:43:07.330
Aber ich will ja hart nach 3 Sekunden

02:43:07.330 --> 02:43:09.330
gucken ob es Connected ist.

02:43:09.330 --> 02:43:11.330
Das Event Connected fange ich

02:43:11.330 --> 02:43:13.330
hier ab. Ja.

02:43:13.330 --> 02:43:15.330
Ich könnte warten.

02:43:15.330 --> 02:43:17.330
Ich könnte warten bis das auf Failed steht.

02:43:17.330 --> 02:43:19.330
Zum Beispiel.

02:43:19.330 --> 02:43:21.330
Gucken wir mal wie lange es dauert bis es auf Failed sich stellt.

02:43:21.330 --> 02:43:27.940
So.

02:43:27.940 --> 02:43:33.490
Dauert ewig.

02:43:33.490 --> 02:43:40.390
Es dauert ewig bis es auf Failed geht.

02:43:40.390 --> 02:43:42.390
Das geht einfach gar nicht auf Failed.

02:43:42.390 --> 02:43:47.300
Das fängt

02:43:47.300 --> 02:43:52.600
auch gar nicht an erst.

02:43:52.600 --> 02:43:54.600
Z Intervall.

02:43:54.600 --> 02:43:56.600
Wir gucken jetzt mal kurz.

02:43:56.600 --> 02:43:58.600
Alle Sekunde.

02:43:58.600 --> 02:44:00.600
Log PC

02:44:00.600 --> 02:44:02.600
Connection State

02:44:02.600 --> 02:44:04.600
und Log

02:44:04.600 --> 02:44:06.600
PC Ice

02:44:06.600 --> 02:44:14.320
Connection State.

02:44:14.320 --> 02:44:16.320
Ok. New. New. New.

02:44:16.320 --> 02:44:18.320
New. New.

02:44:18.320 --> 02:44:20.320
Das geht nie auf Failed.

02:44:20.320 --> 02:44:22.320
Das macht einfach gar nichts.

02:44:22.320 --> 02:44:24.320
Ihr seht die Logs nicht.

02:44:24.320 --> 02:44:26.320
Ja jetzt habt ihr es gerade gesehen.

02:44:26.320 --> 02:44:40.070
Jetzt gerade hat man es gesehen. Ok.

02:44:40.070 --> 02:44:44.210
Ich mach das da für euch in die Mitte. Ok.

02:44:44.210 --> 02:44:46.210
Das erkennt gar nicht dass es Failed ist.

02:44:46.210 --> 02:44:48.210
Das heißt

02:44:48.210 --> 02:44:50.210
mein Ansatz

02:44:50.210 --> 02:44:52.210
ist einfach bester JavaScript Fix ever.

02:44:54.210 --> 02:44:56.210
3 Sekunden warten. Wenn nicht Connected

02:44:56.210 --> 02:44:58.210
Restart. Easy.

02:44:58.210 --> 02:45:00.210
Guck. Nicht Connected.

02:45:00.210 --> 02:45:02.210
3 Sekunden später Restart

02:45:02.210 --> 02:45:04.210
und Connected. Connected.

02:45:04.210 --> 02:45:06.210
Also ich glaube

02:45:06.210 --> 02:45:08.210
das liegt irgendwie in diesem Port Multiplexing.

02:45:08.210 --> 02:45:10.210
Was man auch gesehen hat.

02:45:10.210 --> 02:45:12.210
Weil sobald ich das Port Multiplexing

02:45:14.210 --> 02:45:16.210
Port Multiplexing raus mache.

02:45:16.210 --> 02:45:18.210
Ach guck mal.

02:45:18.210 --> 02:45:20.210
Irgendwann geht das auf Failed mal.

02:45:20.210 --> 02:45:22.210
Github

02:45:22.210 --> 02:45:24.210
Github

02:45:24.210 --> 02:45:26.210
WebRTCS.

02:45:26.210 --> 02:45:28.210
Wir können noch einmal kurz hier rein gucken

02:45:28.210 --> 02:45:30.210
in die Examples.

02:45:30.210 --> 02:45:33.840
UDP

02:45:33.840 --> 02:45:35.840
Single Port.

02:45:35.840 --> 02:45:37.840
Ne die hatten gar kein Beispiel

02:45:37.840 --> 02:45:39.840
dafür.

02:45:39.840 --> 02:45:41.840
Ne die hatten kein Beispiel dafür.

02:45:41.840 --> 02:45:53.920
Nice.

02:45:53.920 --> 02:45:59.220
Ok die High IQ Leute

02:45:59.220 --> 02:46:03.620
setzen das so.

02:46:03.620 --> 02:46:05.620
Was ist UDP?

02:46:05.620 --> 02:46:07.620
Die verbindungslose Variante von TCP.

02:46:07.620 --> 02:46:09.620
Von TCP.

02:46:09.620 --> 02:46:11.620
Settings

02:46:11.620 --> 02:46:13.620
Engine.

02:46:15.620 --> 02:46:17.620
Ok das hat dir jetzt wahrscheinlich nicht so viel gebracht.

02:46:17.620 --> 02:46:23.880
Aber.

02:46:23.880 --> 02:46:25.880
Settings Engine.

02:46:25.880 --> 02:46:27.880
Z UDP Network.

02:46:27.880 --> 02:46:29.880
Ok die coolen Leute machen so.

02:46:29.880 --> 02:46:31.880
Vielleicht bin ich einfach nicht

02:46:31.880 --> 02:46:33.880
Rust Pro genug.

02:46:33.880 --> 02:46:35.880
Ich meine mal seriously.

02:46:35.880 --> 02:46:37.880
Das hier ist wahrscheinlich nicht viel anders

02:46:37.880 --> 02:46:39.880
zu dem was ich gebaut habe.

02:46:39.880 --> 02:46:45.750
Äh.

02:46:45.750 --> 02:46:51.560
Achso ja. Settings Engine sollte ich vielleicht mal anlegen.

02:46:51.560 --> 02:46:53.560
Ob das jetzt.

02:46:53.560 --> 02:46:55.560
Das müsste die gleichen Probleme haben.

02:46:55.560 --> 02:46:59.760
Es ist kein Unterschied zu dem

02:46:59.760 --> 02:47:01.760
was ich gemacht habe.

02:47:01.760 --> 02:47:05.520
Warum RUST?

02:47:05.520 --> 02:47:07.520
Weil blazingly fast

02:47:07.520 --> 02:47:09.520
und coole Leute verwenden Rust.

02:47:09.520 --> 02:47:11.520
Ich will auch zu den

02:47:11.520 --> 02:47:13.520
coolen Leuten gehören.

02:47:13.520 --> 02:47:15.520
Ne ok Problem gibt es immer noch.

02:47:15.520 --> 02:47:17.520
Jetzt geht es gar nicht mehr.

02:47:17.520 --> 02:47:19.520
Jetzt geht es gar nicht mehr.

02:47:19.520 --> 02:47:24.370
Jetzt ist komplett kaputt.

02:47:24.370 --> 02:47:33.120
Jetzt komplett broken.

02:47:33.120 --> 02:47:35.120
Ne jetzt geht es.

02:47:35.120 --> 02:47:37.120
Hat ein bisschen gebraucht.

02:47:37.120 --> 02:47:39.120
Ne aber es ist immer noch kaputt.

02:47:39.120 --> 02:47:45.000
Ist immer noch kaputt.

02:47:45.000 --> 02:47:47.000
Aber leakst du jetzt nicht eine Connection

02:47:47.000 --> 02:47:49.000
beziehungsweise eine ID?

02:47:49.000 --> 02:47:51.000
Aktuell schon.

02:47:51.000 --> 02:47:53.000
Aktuell schon.

02:47:53.000 --> 02:47:55.000
Wir probieren WebRTC zu streamen.

02:47:55.000 --> 02:47:57.000
Vom Server in den Browser.

02:47:57.000 --> 02:47:59.000
Aber wir sind

02:47:59.000 --> 02:48:01.000
immer mal gleich los.

02:48:01.000 --> 02:48:03.000
Doch aktuell leake ich.

02:48:03.000 --> 02:48:05.000
Ich brauche jetzt noch sowas wie.

02:48:05.000 --> 02:48:07.000
Das muss auch noch ins to do rein.

02:48:07.000 --> 02:48:09.000
To do.

02:48:09.000 --> 02:48:11.000
Clean up old connections.

02:48:13.000 --> 02:48:15.000
Dazu kann man.

02:48:15.000 --> 02:48:17.000
Heute nicht.

02:48:17.000 --> 02:48:19.000
Dazu kann man beispielsweise.

02:48:19.000 --> 02:48:21.000
Ein Event subscriben.

02:48:21.000 --> 02:48:23.000
Da gibt es.

02:48:23.000 --> 02:48:26.310
Per Connection.

02:48:26.310 --> 02:48:30.200
State.

02:48:30.200 --> 02:48:32.200
On.

02:48:32.200 --> 02:48:34.200
On State.

02:48:34.200 --> 02:48:36.200
On Per Connection

02:48:36.200 --> 02:48:38.200
State Changed.

02:48:38.200 --> 02:48:40.200
Wie auch immer man das aufruft.

02:48:40.200 --> 02:48:42.200
Da steckt man

02:48:42.200 --> 02:48:47.300
ein Callback rein.

02:48:47.300 --> 02:48:49.300
Ich lasse hier einfach einen Syntax Fehler drin.

02:48:49.300 --> 02:48:51.300
Da muss ich nix weiter machen.

02:48:51.300 --> 02:48:53.300
Und dann kann ich warten bis der Code quasi.

02:48:53.300 --> 02:48:55.300
Closed ist.

02:48:55.300 --> 02:48:57.300
Und dann lösche ich den aus der.

02:48:57.300 --> 02:48:59.300
Aus der Hashmap.

02:48:59.300 --> 02:49:01.300
Und dann wird nix mehr geleakt.

02:49:01.300 --> 02:49:04.680
Okay.

02:49:04.680 --> 02:49:06.680
Der Rest ist selbsterklärend.

02:49:06.680 --> 02:49:08.680
Deswegen hat das auch keine Tests oder Docs.

02:49:08.680 --> 02:49:10.680
Brauch man nicht.

02:49:10.680 --> 02:49:14.690
Ist alles selbsterklärend.

02:49:14.690 --> 02:49:16.690
git add-a git diff.

02:49:16.690 --> 02:49:18.690
Ah Quatsch.

02:49:18.690 --> 02:49:20.690
git diff--staged.

02:49:20.690 --> 02:49:26.500
Oder so.

02:49:26.500 --> 02:49:28.500
Okay.

02:49:28.500 --> 02:49:32.130
Keine Windows.

02:49:32.130 --> 02:49:34.130
Ich wollte gucken ob Windows Line Endings wieder drin sind.

02:49:34.130 --> 02:49:36.130
Okay.

02:49:36.130 --> 02:49:38.130
git status git commit a-m.

02:49:38.130 --> 02:49:41.510
Qt Chat.

02:49:41.510 --> 02:49:43.510
Okay.

02:49:43.510 --> 02:49:45.510
MVP.

02:49:45.510 --> 02:49:47.510
Leute.

02:49:47.510 --> 02:49:49.510
Wir küren jetzt am Abschluss jedes Streams.

02:49:49.510 --> 02:49:51.510
Chatge-MVPs.

02:49:51.510 --> 02:49:53.510
So.

02:49:53.510 --> 02:49:55.510
MVP.

02:49:55.510 --> 02:49:57.510
Wer ist der heute.

02:49:57.510 --> 02:49:59.510
Was ist euch heute besonders positiv aufgefallen.

02:49:59.510 --> 02:50:01.510
Wir machen Chatge.

02:50:01.510 --> 02:50:03.510
Chatge darf Chatge bewerten.

02:50:03.510 --> 02:50:05.510
Communityge.

02:50:05.510 --> 02:50:20.470
Gut. Keiner.

02:50:20.470 --> 02:50:25.510
Auch gut.

02:50:25.510 --> 02:50:27.510
Von Aqua.

02:50:27.510 --> 02:50:33.060
Ja. Den können wir tatsächlich reinschreiben.

02:50:33.060 --> 02:50:38.480
Von Aqua.

02:50:38.480 --> 02:50:40.480
Ähm.

02:50:40.480 --> 02:50:45.460
Odolmet war auch voll am Start.

02:50:45.460 --> 02:50:47.460
Wen haben wir denn hier sonst noch.

02:50:47.460 --> 02:50:49.460
Wer ist mir denn sonst noch positiv aufgefallen.

02:50:49.460 --> 02:50:51.460
Heute.

02:50:51.460 --> 02:51:09.300
Was Rust Knowledge angeht.

02:51:09.300 --> 02:51:11.300
Zwei MVP's reichen.

02:51:11.300 --> 02:51:13.300
Ja.

02:51:13.300 --> 02:51:31.270
Und uns Deck Overflow.

02:51:31.270 --> 02:51:35.540
Git Status.

02:51:35.540 --> 02:51:37.540
Gut.

02:51:37.540 --> 02:51:39.540
Git Log. Alles da.

02:51:39.540 --> 02:51:41.540
Git Push Origin Master.

02:51:41.540 --> 02:51:43.540
Bestimmt die ersten getriggert wieder auf Twitch direkt.

02:51:43.540 --> 02:51:45.540
Der Brand schreist.

02:51:45.540 --> 02:51:52.690
Master und nicht Main.

02:51:52.690 --> 02:51:57.800
Anzeige ist raus.

02:51:57.800 --> 02:51:59.800
So. Mal gucken ob alles auf

02:51:59.800 --> 02:52:01.800
Shithub ordentlich drin ist.

02:52:01.800 --> 02:52:03.800
Ja. Sieht gut aus.

02:52:03.800 --> 02:52:08.770
Okay Chatge.

02:52:08.770 --> 02:52:10.770
Nice. Schön dass ihr am Start gewesen seid.

02:52:10.770 --> 02:52:14.660
Ich geh jetzt pennen.

02:52:14.660 --> 02:52:16.660
Wir sehen uns. Bis denn. Macht's gut.

02:52:16.660 --> 02:52:18.660
See you.
