nach wo das deine E-Mails nach gültigen Trackingnummern durchsucht und dann
automatisch trackt. Das ist eigentlich der Sinn und Zweck der Sache. Heute machen wir es
mal so, dass man die Trackingnummern manuell hinzufügen muss, einfach um zu
gucken, ob das Tracking im Hintergrund prinzipiell funktioniert. Wahrscheinlich
probieren wir es auch nur mal mit DHL aus. Das reicht ja, dass man sieht, dass es
prinzipiell geht und dann kann man den anderen Kram noch einbauen. Wann kommt
ein Sub-Icon? Sobald ich eine gute Idee für einen Sub-Icon habe. Hat jemand eine
gute Idee für einen Sub-Icon? Mir fällt, mir fällt wirklich, ich bin bei
sowas unglaublich unkreativ. Ich bräuchte halt irgendwas, was passt, was
ein bisschen raussticht. Dein Face. Also selbst wenn ich mein Face, ja, reveal,
reveal, wo haben wir es denn? Reveal. Suppe. Wo ist die Suppe, wo ich mich
reveale? Wo ist es denn? Ich finde das Bild gar nicht mehr.
Ja, reveal. Ja, ja. Das, das halt in, was ist denn das? 32 mal 32 ist dann halt ein
bisschen, bisschen klein so. Ist dann irgendwie, man kann es gar nicht so klein
machen, wie das dann wäre. Warum findet die Windows-Suche eigentlich nicht, wenn
ich nach reveal suche? Die Windows-Suche ist so beschissen schlecht.
Das findest du nicht mal, wenn ich nach reveal suche. PNG. Das ist so lächerlich
schlecht, ey. Musst du erst so einstellen, dass es funktioniert. Wie, ich muss, warum
funktioniert das nicht von Haus aus? Totaler Fail. Und jetzt, und jetzt hängt
mein Explorer. Ey, komm, ich mach zu, oder ist mir zu dumm? Mal ganz davon abgesehen,
ich brauch's ja eh nicht. Und, und warum, warum kann der, warum kann der in GIFs, warum
kann der in GIFs nicht zoomen? Sogar meine komische, sogar mein selbstgestrickter GIF-Player
kann GIFs zoomen. Ja, der Keks ist doch, ist doch viel zu fett. Das, das Sup-Icon, das
ist ja im Endeffekt, was ist denn das? 32 mal 32 oder so. 32 mal 32 Pixel, da brauchst
du irgendwas, was in 32 mal 32 Pixel gescheit aussieht. Weder der Keks noch irgendwas anderes,
einfach nur das... Ich glaube nicht, dass
das gescheit aussieht.
Man könnte höchstens
das Auge nehmen.
Und es muss halt auch
noch
quadratisch sein irgendwie.
Irgendwie
so
den Ausschnitt oder so. Keine Ahnung.
Aber ich glaube, das erkennt man nicht, wenn
das so klein ist. Ich glaube, das sieht man nicht richtig.
Man müsste das mal
ausprobieren. Ich glaube nicht, dass das ordentlich
ausschaut. Weil das müsste ja noch
viel kleiner sein. Das geht jetzt, kann man diesem Windows-Ding
ja nicht nachmachen. Das müsste noch viel kleiner sein.
Nö, das gibt keine
Webseite. Webseite müsste ich das ja irgendwo hosten.
Das gibt eine fertige App.
Die kann man sich dann downloaden.
Ich brauche ein paar Leute, die das dann nochmal ausprobieren, weil
ähm...
Ich meine, ich habe jetzt ein paar Tests.
Tracking Number.
Aber das ist
halt von Paketen, die schon
angekommen sind. Damit kann man natürlich
den Status nicht so gut tracken.
Ein Pock-Champ,
das immer mehr zu Pock wird.
Welche 1TB SSD
würdest du empfehlen?
Mit den Samsung-Dingern kannst du
eigentlich nichts verkehrt machen.
Also ich habe mir jetzt bei Amazon Prime
bei diesem Prime Day
habe ich mir hier eine...
Moment.
Habe ich mir jetzt eine
970 EVO NVMe
N2 SSD bestellt.
Die muss ich immer noch einbauen.
Ich weiß, dieser Prime...
Prime Day ist jetzt schon eine Weile her.
Aber die ist glaube ich ganz gut.
War beim Prime Day
relativ günstig.
Kostet jetzt... Ach, so viel mehr hat die auch nicht.
So viel teurer ist die jetzt auch nicht.
Terabyte.
Na okay, doch.
Dürfte so 40 Euro oder so
war die glaube ich billiger beim Prime Day.
Ungefähr.
Ist die Tracking App schon fertig?
Nee, ich bin seit 5 Minuten on.
Sandwich Maker.
Nee, ich habe einen gekauft
vor ein paar Jahren, aber der ist kacke.
Kann ich nicht empfehlen.
Der ist Müll, den ich vor ein paar Jahren gekauft habe.
Da ist schon vorne die Lasche abgebrochen.
Nach irgendwie
20 Mal benutzen oder so.
Was sagst du zur Crucial MX500?
Ist auch okay.
Habe ich ja auch 2 Stück.
Aber nicht hier im PC.
Habe gestern auch beim Mixer reingeschaut.
Da hat Microsoft auch so viele Funktionen in der App
nicht, welche Twitch hat.
Könnte ich programmieren.
Das verstehe ich auch immer nicht.
Wenn man nämlich dem Service schon Konkurrenz machen will,
was die ja mit, mit, mit, mit.
Hätte das gerade fast falsch ausgesprochen.
Mit Mixer machen wollen, dann verstehe ich immer nicht,
wie man quasi so Funktionen, die die Leute halt richtig geil finden,
nicht einbauen kann.
Ich meine, zumindest haben die schon, haben die Emote Support.
Es sind halt nicht die Twitch Emotes, aber ich, was richtig cool wäre,
also was, was richtig Big Brain und Next Level wäre.
Also es richtig huge wäre.
Wäre, wenn Mixer mit Better Twitch TV und mit FFZ.
Wenn die mit denen mal reden würden und dass die FFZ und Better Twitch TV Emotes
quasi included werden in Mixer.
Das wäre schon mal, das wäre schon mal huge.
Warum alle gerade auf Mixer so abgehen?
Ich glaube, es geht ehrlich gesagt kaum einer auf Mixer ab.
Ohne Addon, genau.
Direkt einbauen.
Ich glaube, es geht keiner so wirklich auf Mixer ab.
Die einzigen Leute, die jetzt halt notgedrungen auf Mixer gehen,
sind die, sind die, die Ninja Fans, die weiter Ninja gucken wollen.
Aber ich gehe, ich habe es ja gestern schon gesagt,
ich gehe davon aus, dass das, weil es gibt ja nur zwei Möglichkeiten.
Entweder führt das dazu, dass Mixer sich voll durchsetzt
und ernsthaft Twitch Konkurrenz macht.
Oder aber, dass Ninja an Bedeutung verliert.
Oder aber, dass Ninja an Bedeutung verliert.
Oder aber, dass Ninja an Bedeutung verliert.
Die Sache ist, bloß die Ninja ist mittlerweile so groß,
ich weiß gar nicht, ob der überhaupt noch
Bindung an Plattformen so richtig nötig hat.
Keine Ahnung.
Der hat so viele, so viele Anhänger und Fans.
So ganz, so ganz in der Bedeutungslosigkeit verschwinden wird der nie.
Und der hat auch Masse YouTube Subs und alles.
Aber ich glaube nicht, dass sich Mixer groß durchsetzen wird.
Ich glaube eher, Mixer wird genauso ähnlich unbeliebt bleiben,
wie die ganze Zeit schon.
Und Ninja wird einfach weniger Zuschauer haben auf Mixer.
Was ein bisschen bitter ist, ehrlich gesagt,
für die Leute, die beispielsweise jetzt Ninja schon gesubbt haben
auf Twitch für irgendwie zwei Jahre.
Und da ist jetzt einfach mal so der Sub weg.
Also der zwei Jahre Sub weg.
Jep.
Es sei denn, die verlängern den immer wieder auf Twitch,
was auch beknackt ist.
Es würde Twitch nicht...
Also es wäre auf jeden Fall nicht schlecht,
wenn es einen ordentlichen Konkurrent gebe zu Twitch.
Aber was ich halt cool finden würde ist,
wenn die, wenn die Twitch machen
und halt das von Twitch, was richtig gut ist, einbauen.
Es gibt ja kaum was auf Twitch, was so richtig kacke ist.
Ähm...
Wenn die das nehmen, was Twitch gut macht und einbauen
und halt noch Sachen einbauen, was sie irgendwie abhebt von Twitch.
Wo du halt sagst, oh, das ist ja nice.
Mixer zu verwenden.
Ich weiß, ich weiß nicht, was man da machen könnte,
aber das ist ja auch ehrlich gesagt nicht mein Job, mir das auszudenken.
Das müssen sich die Mixer-Dudes von Microsoft ausdenken.
Ja.
Genau, und YouTube Live, das ist ja...
einfach nur vorhanden.
Das interessiert keinen.
Es gibt ja noch mehr, ne?
Es gibt ja noch mehr.
Ich mein, es gibt noch Facebook-Stream,
es gibt noch Periscope,
es gibt noch was, YouNow?
Ne. Doch.
TikTok haben wir auch noch heutzutage.
Ähm...
Was haben wir denn sonst noch?
D-Live, das da, wo PewDiePie streamt.
Genau.
Ähm...
Dailymotion, na gut, das interessiert keinen.
Chatrubate.
Ne, es gibt ja ein paar Sachen, aber nix irgendwie im Gesamtpaket,
was da mit Twitch großartig konkurrieren könnte.
Mixer-App nur mit Microsoft-Account.
Das ist schon mal Fail.
Zerleer ich mir schon mal nicht.
Es gibt ein paar Sachen, die mich an der Twitch-App auch abfucken,
aber im Großen und Ganzen ist die okay.
Was mich am meisten, ehrlich gesagt, nervt, ist
an der Twitch-App und an der YouTube-App,
dass es für iOS keine alternativen Apps gibt.
Das sagt ein bisschen.
Für Android gibt's welche.
Weil mittlerweile nimmt mir auf YouTube zumindest die Werbung überhand.
Ich mach's ja gerne, wenn ich abends im Bett lieg, dann mach ich mal YouTube an.
Das Problem ist, du kannst YouTube gar nicht mehr anmachen abends im Bett,
weil wenn du einpennst, du wirst instant durch Werbung wieder aufgeweckt.
Du machst irgendwas an, was ein bisschen länger ist,
und dann kommt dann nicht nur mal Werbung,
da kommt dann auch gleich diese YouTube-Double-Werbung hintereinander.
Kennt ihr das, wo YouTube jetzt neuerdings doppelt Werbung hintereinander abspielt?
Weil, weil's geht.
Und das geht mir auf den Sack.
Ja, Cheat 1,5, das find ich auch bescheuert.
Dass man überhaupt nen Tool für den Grafik-Treiber braucht.
Das ist wirklich beknackt.
Naja.
Aber.
Warten wir das Ganze mal ab.
Weil ändern können wir da dran nix.
Ehrlich gesagt will ich da auch gar nix dran ändern.
Das einzige, was schön wär, wenn's ne ordentliche alternative App
sowohl für YouTube als auch für Twitch für iOS gäbe.
Weil ein einfacher
Adblocker-DNS-Proxy,
äh, einfacher DNS-Adblocker
geht mittlerweile nicht mehr.
Wie P-hole oder, oder
wie heißt das andere?
Ad...
Adblock-DNS oder so.
Ich hab vergessen, wie das andere Zeug heißt.
Das, das
bringt's mittlerweile nicht mehr.
Und theoretisch würd nur noch helfen,
macht ihr den Proxy dazwischen.
Aber nachdem, nachdem das Ganze halt TPS ist,
wird's auch ein bisschen schwieriger.
Ja.
YouTube, naja gut, auf Android hast du zumindest den Vorteil,
du kannst dir das APK so installieren.
Ich meine, klar, das hat's bei den Noobs schwieriger.
Allerdings, ich kann mir auf iOS noch nicht mal
ne Custom-App sideloaden gescheit.
Ich weiß gar nicht, ob's ne gescheite Twitch und ne gescheite
YouTube-Alternativ-App für iOS überhaupt gibt.
Kann mir halt da drauf nix sideloaden, weil das
nicht mal ein privates iPhone ist,
sondern, ich darf's zwar privat benutzen,
aber immer noch das, was die Firma mir
bereitstellt, ja, und da kann, da,
da kann ich nix drauf sideloaden.
Ich weiß gar nicht, ob's überhaupt App's dafür gibt.
Nee.
Nee, Online-Redata passiert.
In der Regel nix.
Wer hat gefragt, wenn man während des,
während des laufenden PCs auf das Mainboard
oder die Grafikkarte fasst, bekommt man da einen Schlag?
Nein, da passiert in der Regel nix.
Wo ich aufpassen würde, ist dort, ähm,
irgendwelche Metallgegenstände,
oder, oder Schrauben, die reingefallen sind,
und das dann bewegen und übers Mainboard rollen lassen.
Da würd ich ein bisschen aufpassen.
Da kannst du, wenn's ganz doof läuft,
was kurzschließen, ähm, oder das kann jetzt ein Netzwerk,
ähm, oder das kann jetzt ein Netzteil rollen,
oder irgendwie sowas in der Richtung,
das muss nicht unbedingt sein.
Kann man ein YouTube-Video im Vollbild laufen lassen,
aber gleichzeitig im Fenstermodus?
Wie soll das denn aussehen, bitteschön?
Ach ja, das geht mir auch auf iOS auf den Keks.
Stimmt, dass, ähm,
dass du fast nichts im Hintergrund abspielen kannst.
Ist das Tracking-Tutorial fertig?
Nee, ich bin seit 10 Minuten on oder so.
20 Minuten.
Wir haben noch, wir haben nicht angefangen bis jetzt.
Kennst du die Track-App auf Telegram?
Auf welchen Subreddits bist du unterwegs?
Auf allen möglichen.
Datahorder ist ganz interessant.
Äh,
PC Master Race,
Unix Porn,
was nichts damit zu tun hat, wie sich der Name anhört.
Es gibt so viele
Subreddits.
Moin, hast du nun mal nach dem neuen Cod geguckt?
Ja, ein bisschen. Optisch sieht das schön aus.
Ähm, dass die Minimap
teilweise nicht da ist, ist komisch.
Es, es sieht schon, ehrlich gesagt,
halbwegs ordentlich aus.
Ich bin mal gespannt. Ich mein, Cod, das kommt ja immer.
Wann kommt das immer? November?
Oder Oktober?
Also, ich guck's mir wahrscheinlich dieses Jahr mal an.
Ich mein, es scheint... Wann gibt's eigentlich, Beta
gab's August, ne? Irgendwann 20. August?
Oder so? Ach, Quatsch.
September.
Ja, das
Playstation 4 juckt mich, ehrlich gesagt, überhaupt nicht.
Ah, Early Access.
Das Lustige ist, wahrscheinlich
pre-order ich das sogar.
Das Spiel.
Ähm, mal gucken, wo
man das pre-ordern kann, damit ich
aber, es muss ne Plattform sein, wo ich pre-order canceln
kann. Also ich pre-order mir das
dann, und ähm
cancel danach gleich wieder den
pre-order. Oder aber,
wenn das nicht geht, wenn das nicht
richtig funktioniert,
mit dem pre-ordern
und canceln, dann
kauf ich mir bei irgendeinem Keyshop
bei irgendeinem Keyshop für 50 Cent
nen Beta-Zugang.
Jetzt bestimmt wieder. Gibt's 100 Pro,
irgendwelche Leute, die ihre
Beta-Codes, ähm, verscherbeln.
Gab's jedes Mal.
Kennst du einen guten Gaming-Laptop
für 1400 Euro? Ne, Gaming-Laptops
kenn ich gar keine.
Im Zweifelsfall wahrscheinlich eher kein Alienware
oder sowas. Die Dinger sind ja meistens,
ich mein, die sind nicht schlecht, aber meistens viel zu teuer
für das, was drin ist.
So, dann würd ich sagen, fangen wir mal an.
Will ich Preview?
Ich hab so viel Visual Studio-Zeug mittlerweile
interessiert. Übrigens, es kam jetzt
gestern oder vorgestern
kam, ähm,
die .NET Core 3 Preview
7, ach nee, ist schon,
ist sogar schon ne Woche her, äh,
raus und
da sagt sogar Microsoft zu, ey,
die kann man schon
für Projekte verwenden, die man
quasi in nächster Zeit vorhat,
ähm, rauszubringen.
Also, es gibt
eigentlich gar keinen so richtigen
Grund mehr, jetzt
mit .NET Core
2.2
was anzufangen. Deswegen bin ich
gerade am überlegen, ob wir das nicht einfach schon installieren.
Ich glaub, wir installieren
das einfach schon.
Wenn Microsoft sagt, es ist stable, warten wir noch einen Monat.
Das ist lustigerweise nur bei Windows
so, bei diesen ganzen .NET Sachen geht das eigentlich.
Was ist das denn?
Ja, das ist die neue .NET Version.
Aktuell ist 2.2 und das ist 3
und das wird die erste .NET Version.
Die 2.2 Sachen,
jaja, klar, die laufen ohne Probleme auf 3.
Das Schöne ist, also,
ähm, .NET 3 ist ja die erste
Version, wo quasi
so der neue Plan
von Microsoft
drinnen
anfängt, also sie haben ja
geplant, dass sie alle
.NET Versionen zusammenfassen wollen.
Also sprich, dass es nicht mehr Mono gibt,
kein .NET Core, kein .NET Framework,
sondern dass das alles in .NET Core
zusammenfließt.
Das haben sie, glaube ich, für .NET Core
5 oder so sich vorgenommen, allerdings
mit 3.
Mit 3, ähm,
geht es jetzt zum ersten Mal in die richtige Richtung,
sodass man angeblich kein
normales .NET Framework mehr braucht.
Mit .NET Core 3
kann man Windows Anwendungen entwickeln,
sowohl WPF als auch Windows Forms
und man braucht kein .NET Framework mehr.
Das geht auf jeden Fall
in die richtige Richtung.
Haha, der Jörgs, ja.
Jörgs, was spielst du gerade? Gibt es irgendwas,
was man gerade zur Zeit spielen müsste?
Laden wir mal hier den, den,
den Installer.
Ja, Download.
Go, go, go.
BDO, pff, nee.
BDO spiele ich ja, habe ich ja schon
eh nicht mehr gespielt, mittlerweile spielt
der Fabian ja meinen Account weiter.
Das heißt, wenn ich, wenn ich dann mal
irgendwann online gehe mit meinem Account,
ist der wahrscheinlich voll gemaxed und
und am Cap.
Jetzt geht euer Bildschirm gleich wieder weg,
weil der nach Admin-Freigaben
Okay, Moment.
Ich hoffe, den, den Bug fixen sie mal im OBS,
dass der, wenn, wenn
Admin-Dialog kommt, nicht immer abkackt.
Overwatch.
Ach, übrigens, Jörgs, hast du gesehen,
es gibt jetzt in, es gibt jetzt
auf dem PTR in Overwatch,
gibt es jetzt 222 Role Queue.
So, und jetzt müssen wir hier noch
mal nach unserem Visual Studio
Briefview gucken, wobei, das kann man einfach
aufmachen. Und dann müssen wir da
wahrscheinlich updaten.
Aufgogoge.
Als Tank würdest du dich nicht anmelden.
Ja, Orisa ist also absolut Meta zurzeit.
OBS als
Admin starten. Ja, das kann schon sein, aber das kann ja
nicht sein, dass ich OBS als Admin starten muss,
dass das funktioniert.
Okay, wir machen mal Update.
Das ist aber ein komischer Bug.
Der, guck mal, jetzt ist nichts passiert, ne?
Jetzt ist nichts passiert, oder? Ist bei euch
auch, ist bei euch wieder weg. Ne, jetzt ist bei euch wieder da.
Obwohl ich nichts gemacht habe.
Ist es Absicht, dass
irgendwelche Recording-Tools oder ähnliches beim Admin-Dialog
nichts machen können? Ja, mit Sicherheit ist es Absicht.
Allerdings sollte es nicht schwarz
werden. Früher war es so, es
wurde, es ist einfach kurz eingefroren
und dann ging es weiter.
Oder zumindest sollte es danach weitercapturen.
Aktuell in Overwatch
spielen sie halt alle,
also Mei ist wieder übelst beliebt.
Und die spielen
zum größten Teil halt so ihr
Roadhog-Bunker-Zeugs da.
Ah,
du hast dann sowas wie
teilweise D.Va, hauptsächlich
hast du allerdings Roadhog, Orisa.
Manchmal siehst du noch einen Reinhard rumrennen,
das kommt aber relativ selten vor.
Aber meistens ist es wie der Knäbel sagt,
meistens hast du Orisa, Roadhog, Mei,
als Support hast du
Ana, Mercy
und dann hast du,
was hast du denn als DPS
noch dabei?
Ich glaube das ist, ach ja, Widowmaker ist auch
übelst krass zur Zeit.
Ähm,
das wäre was für einen Eax eigentlich.
Du kannst mal deine Widow rausholen,
kannst du alle scopen.
Dann sind sie alle weg, weggeflickt.
Hier.
Bam, bam, ba, oh, fast.
Weggetrackt.
Hanzo haben sie auch oft,
ja genau.
Es gibt ein paar,
es gibt ein paar Helden, die siehst du halt kaum.
Sowas wie Reaper oder so.
Ganz selten.
Ganz auf einen vereinzelt auf manchen Maps.
Pharah hast du so gut wie auch nicht.
Weißt du manchmal noch.
Zumindest sieht das in Streams so aus.
Ich spiel da selbst nicht.
Ich guck ja nur Streams ab und zu.
Wann kommt eigentlich dein
erstes RPG Maker Game raus?
Warum sollte ich
ein RPG Maker Game machen?
Aber diese Sache mit,
was Blizzard jetzt gemacht hat,
dass du dich 2-2-2 rollqueuen kannst,
das ist wirklich endlich mal eine gescheite Sache.
Ich verstehe gar nicht, warum das so lange gedauert hat.
Das haben die Leute in der Beta schon gesagt.
Und es ist ja nicht automatisch gesagt,
das was die Spieler sagen,
dass es sinnvoll immer ist.
Aber man kann es ja wenigstens mal ausprobieren.
Und es wäre sinnvoll gewesen.
Es sorgt für ordentlichere Comps
und wahrscheinlich auch
auf lange Sicht für bessere Balance.
Ich frag mich nur, wie sie das
in der Overwatch League machen,
weil die werden ja wahrscheinlich nicht
im Ranked 2-2-2 einführen
und in der Overwatch League dann
weiterhin alles ist erlaubt spielen.
Also ich glaube nicht,
dass die...
Ne, das kann ich mir nicht vorstellen.
Die werden Overwatch League dann auch auf 2-2-2 umstellen.
Oh, GOATS,
geh mal weg.
Ja, den GOATS Song kenn ich schon.
Was ist 2-2-2?
Dass du dich im Ranked
jetzt entscheiden musst, was du spielen willst.
Ob du DPS, Tank oder Support spielen willst.
Und
das Matchmaking sucht sich automatisch
2 Tanks, 2 DPS und 2 Supporter
raus.
Und du kannst, du darfst dann auch nur das spielen.
Also du kannst...
Wobei ich weiß gar nicht, ob die anderen Sachen gelockt sind.
Oder ob die anderen, die das ausgewählt haben,
einfach nur schneller picken dürfen.
Keine Ahnung. Wahrscheinlich sind die Sachen gelockt.
Was ja auch sinnvoll wäre.
Ach ja, und was
richtig nice ist, dass
das Matchmaking, also sprich,
dass der SR abhängig von der Rolle ist.
Das ist,
das ist richtig nice.
Weil,
da kann man zum ersten Mal
seit 2,5 Jahren Overwatch
tatsächlich mal was üben.
Ne, mal angenommen, ich bin richtig guter Support
oder vielleicht richtig guter Tankspieler,
allerdings DPS nur so mittelmäßig
und ich würde mich gern mit DPS-Helden
verbessern.
Dann ging das vorher nicht.
Du hattest,
ein SR
und du musstest das spielen,
was du gut konntest, weil
sonst hast du dein Team verarscht quasi
und dein SR
auch irgendwo.
Das heißt, du konntest nicht üben.
Das war lange Zeit ein richtiges Problem in Overwatch.
Und jetzt kannst du zum ersten Mal
üben.
Jetzt kannst du sagen,
ich bin jetzt zwar Tank, irgendwie 4k,
aber DPS irgendwie nur 3,5
oder 3k.
Ich spiele jetzt mal eine Weile DPS und dann hat es keinen Einfluss auf
dein anderes Ranking.
Und du kommst halt nicht in Grandmaster Games,
wenn dein DPS eben nicht Grandmaster ist.
Oder du kommst nicht in Top 500 Games,
wenn dein DPS nicht Top 500 ist.
Das ist eigentlich ganz nice.
Ich glaube, ich spiele, ich glaube,
ich installiere es mir echt mal wieder.
Ich hatte es mir ja schon installiert
und dann habe ich einen Stream
angemacht und das erste, was ich gesehen habe, war 2CP
und habe wieder deinstalliert.
Man muss halt sagen, dass Overwatch
hat schon ein paar Helden,
die übertrieben Bock machen.
Wenn das 2-2-2 rauskommt.
Ja, ja, ich spiele, wenn schon, nur auf dem PTR.
Ein bisschen, ein bisschen.
Ich spiele garantiert nicht ohne
Roll-QR.
Overwatch hat schon ein paar
geile Helden. Ich meine, Lucio ist übelst nice.
Ana ist übelst nice.
Roadhog ist übelst nice.
Zarya ist übelst nice.
Also es gibt schon ein paar richtig geile
Helden und die sind auch richtig gut durchdacht
und machen übelst Bock. Ana ist eigentlich somit
der Held, der am meisten Spaß macht, weil man gut spielen kann.
Lucio ist auch nice, aber Ana ist
schon eine Skillnummer
höher als Lucio spielen.
Restart?
Microsoft, willst du mich verarschen?
Restart.
Restart, weil ich Visual Studio
geupdatet habe.
Big Brain.
Okay, dann starten wir das Ganze mal.
Dann machen wir jetzt eine
Wir machen eine
.NET Core 3 ASP.NET Web
Anwendung.
Weil Microsoft ja sagt, das ist live
ready.
Und ich hoffe,
sie haben wieder nicht so viel geändert,
dass ich wieder die Sachen nicht finde.
Grill, genau.
Ich glaube, ich installiere nachher mal Overwatch
und, aber nicht Onstream.
Und probiere mal auf dem PTR eine Runde.
Nehme ich mir irgendwie,
ich habe ja drei Overwatch-Accounts.
Nehme ich mir irgendwie mal
Oder sogar vier? Ey, weiß nicht.
Ähm.
Werde ich mir dann mal angucken.
Siegmar habe ich noch nicht ausprobiert.
Keine Ahnung.
Ich spiele ja nicht.
Und aus Videos erkennt man zu wenig.
Kann ich überhaupt nichts zu sagen.
Okay, also wie nennen wir das Ding jetzt mal?
Versand
Tracksor.
Das ist doch mal ein Name,
den kann man sich merken.
Und so heißt garantiert noch nichts anderes.
Tracker MonkaS.
Okay, was kann man hier machen?
Wie kann ich hier eigentlich mittlerweile alles auswählen?
GRPC
ASP-900 Courser.
Ich weiß gar nicht, was das ist.
Also ich meine, ich weiß nicht, für was RPC steht.
GRPC, ist das irgendeine Google-Geschichte?
Oder ist das?
Also ich würde sagen,
wir machen ein API-Projekt.
HTTPS. Wer braucht sowas denn?
Was haben wir denn sonst zur Auswahl?
Angular App, React, JS App.
Gibt es ein View-Template mittlerweile?
Das müssen wir mal kurz schauen.
Gucken wir mal.
Nö.
Okay.
Dann nicht.
Dann müssen wir das selbst einbinden.
Also, wir machen eine API.
Eine API-Anwendung.
Ohne irgendwelche Sperenzien.
Create.
Versand Tracksor.
Warum haben manche,
warum haben manche
hier Chill, Step,
sonst was, Playlisten immer
so komische Voice-Sample-Sachen drin?
Das geht mir immer voll auf den Keks.
Wenn ich erzähle im Hintergrund,
in der Musik labert jemand.
Wo haben sie eigentlich den Witcher-Hintergrund?
Na gut, 2017, da war das angesagt.
So.
Wettervorhersage.
Wat?
Okay, was auch immer.
Das ist wahrscheinlich einfach nur ein Test.
Ja, das ist das Test,
so wie halt
die Anwendung kommt,
beziehungsweise wie halt das Template kommt,
dass man es ausprobieren kann.
Mal gucken, was jetzt der Weather-Forecast
uns sagt.
Kann man damit auch sehen, wie lange die Gamer-Girl
Badewasser-Lieferung dauert, ja?
Kann man.
Warum macht der jetzt erst mal 30 Browser auf?
Äh.
Kann das sein, dass das irgendwie
ein bisschen rumsch...
Ah, Moment, Moment.
Meine andere Anwendung läuft auch
auf dem gleichen Port. Kann das sein?
Äh.
Moment mal, Leute.
Ich glaube, jetzt kommt er gerade
ein bisschen durcheinander.
Dass ich zwei Anwendungen auf dem gleichen Port habe.
Ne, 5000.
Das ist...
Das ist ja auch ein geiles Template,
äh.
Geiles Template.
Startest die Beispiel-Anwendung und sie geht nicht.
404, perfekt.
Okay, dann starten wir das hier nochmal ohne
Debug und Gedöns.
Oh.
Was spackt das?
Ja, ist okay.
Alles gut.
So, geht's jetzt?
Ah, jetzt geht nämlich noch ein Browser auf.
Allerdings macht er voll das falsche...
Die falschen...
Voll die falsche Uhr auf.
Also, das Template ist noch nicht so ganz ausgereift, würde ich sagen, ne?
Welchen Pfad muss ich denn?
Slash-AP...
Ne, Slash...
Weather Forecast, oder so.
Ah, geht doch.
Ähm.
Okay.
Also, das Beispiel-Projekt kann man mal voll in die Tonne kloppen.
Wir ändern das jetzt ganz normal.
Launch Settings.
Wir wollen direkt...
Wir wollen nix spezielles aufrufen.
Wir wollen das einfach...
Ja, direkt auf
gut starten und gut ist.
Da gibt's natürlich noch keine Seite drauf.
Das ist irgendwie klar.
Ähm, diesen ganzen Wetter-Vorhersagen,
Beispiel-Kram schmeißen wir weg.
Brauchen wir nicht.
Den lassen wir mal da.
Schauen wir uns mal an.
Ah, ne, den Controller lassen wir nicht da.
Den schmeißen wir auch weg.
Bäm. Piss dich.
Weg. So.
Startup. Also.
Jetzt müssen wir uns...
Oh, das sieht anders aus als vorher.
Da haben sie ein paar Sachen...
Okay, da haben sie ein paar Sachen geändert im Vergleich zu
äh...
.NET Core 2.2.
Das sieht anders aus.
Information brauchen wir schon mal nicht.
Use Routing.
Okay.
Use...
So was machen. Wobei, das brauchen wir eigentlich gar nicht.
Hm.
Okay, lassen wir's
mal so. Lassen wir's mal so.
Ähm, was wir auf jeden Fall brauchen ist,
wir brauchen einen Ordner für unser HTML.
Gedöns.
Ja, wwwroot.
Und da brauchen
wir Index HTML.
drinne.
Index, ja.
Index
HTML.
Mal gucken, ob das jetzt schon ausreicht.
Ich vermute mal nicht.
Das ist ASP.NET Core, ja.
Nein, das reicht noch nicht
aus. Ähm...
Wir müssen nämlich noch sagen, dass der überhaupt
die Sachen aus wwwroot
ähm...
use file...
müssen wir machen, dass er die Sachen überhaupt
äh... bereitstellt.
Ja, sonst geht das gar nicht.
So, jetzt sollte es funktionieren, wenn das
noch so funktioniert wie letzte Version.
Ja, da ist es ja.
Okay, nice. Funktioniert.
Äh, das muss ich mal durchlesen.
Was... Das ist auf jeden Fall
neu in ASP.NET Core 3.
Das war vorher nicht so.
Das hat man anders gemacht.
Das ist glaube ich... Ist das die
wichtige Variante zu usemvc?
Wahrscheinlich.
Wahrscheinlich ist das...
Hm.
Tja, schauen wir mal.
So, dann brauchen wir noch ein paar Ordner.
Nämlich brauchen wir hier noch einmal
Models
und äh...
Data.
Und jetzt brauchen wir
noch für SQLite
die ganzen Datenbank
Abhängigkeiten.
Das schlimme ist, ich weiß mittlerweile fast auswendig, wie der
ganze Mist heißt.
Microsoft
Entity Framework
Core
Oder auch nicht.
Habe ich mir verschrieben.
Und wie heißt das Kram?
Fuck, jetzt habe ich so kurz...
Das hieß doch, hieß das nicht so?
Wir suchen erstmal SQLite.
Diese Sachen wird es da nicht geben.
Vielleicht haben sie es jetzt auch unbedingt
in EF Core oder so.
Entity Framework Core
Das habe ich doch geschrieben.
Oder?
Microsoft?
Ah,
das nervt mich rum.
Ist das nicht geschrieben?
Na gut, was auch immer.
Dann können wir es halt...
Dann installieren wir es halt von hier.
Mal gucken, ob die Suche kaputt ist oder
ob ich mich einfach verschrieben habe.
Ich glaube, ich habe mich verschrieben.
Wahrscheinlich habe ich mich verschrieben.
Ja, das ist richtig Pipega Suche hier.
So, SQLite Zeug installieren.
Weil wir brauchen ein bisschen Datenbank.
Brauchen wir ja.
Omegelul.
Einfach nur so.
Bis gerade danach.
Du hattest glaube ich Entity geschrieben.
Achso, ja, das kann natürlich sein,
dass ich da verkackt habe.
Das kann natürlich sein.
Da kann man sich schon mal verschreiben.
Ja, ich accepte.
Ne, ich glaube, ich habe mich einfach verschrieben.
Ich habe mich wahrscheinlich einfach verschrieben.
Denke ich mal.
Ich werde mich auch verschrieben haben.
Ähm...
Service...
UseSQ...
Warte mal, war das ein Service?
UseSQlite...
SQLite?
UseSQlite war das hier?
Warte mal, lass mal überlegen.
Wo war das?
Wobei, ne.
Das musste man hier gar nicht machen.
Das war...
Das musste man ganz früher machen.
Das muss man überhaupt nicht mehr machen.
Das muss man einfach mal in einen anderen Kontext anlegen.
Und da drin sagen, man möchte SQLite verwenden.
Mal gucken,
wie gut mittlerweile das automatisch generieren
von solchen Sachen ist.
Aber wir legen jetzt erstmal unser Model an
für unsere Pakete.
Oh, Class.
So.
Und das Ding nennen wir dann mal...
Das nennen wir einfach mal ganz normal.
Shipment.
Also wir können Shipment oder Package nennen.
Eigentlich...
Was ist ein sinnvoller Name?
Über welchen Versandanbieter
das Ganze verschickt wird.
Wann es zuletzt geupdatet wurde.
Und was dann auch wieder
einen Link auf die History hat.
Shipping.
Shipping ist glaube ich
kein guter Klassenname.
Chinashipment.
Covenant wie nennt man das?
Covenant geht ja mittlerweile relativ einfach.
So. Da brauchen wir
sowas wie ein
Carrier. Das ist dann sowas wie
DHL oder so.
Public. Enum.
Das haben wir letztens schon mal alles gemacht.
Deswegen wissen wir jetzt schon
ganz gut was wir da alles brauchen.
So. Wir haben nen Carrier.
Das ist DHL.
Amazon.
Sorry. Amazon. Natürlich. Amazon.
Hermes.
UPS und DPD.
Supporten wir standardmäßig erstmal.
Hier. Carrier.
So.
Dann brauchen wir sowas wie
die eigentliche
eigentliche
Trackingnummer brauchen wir.
Gibt es ein schönes Wort für?
Trackingnummer.
Trackingnumber. Ergibt eigentlich keinen Sinn.
Weil das ist keine Number.
Das besteht aus Buchstaben
und aus Zahlen.
Also das ist eigentlich keine Nummer.
Code. Tracking ID.
Tracking ID finde ich gut.
Tracking ID.
Wobei ich Code auch nicht
verkehrt finde. So Barcode
oder so. Aber das ist ja kein Barcode.
So. Dann brauchen
wir. Was
was. Machen wir mal
als erstes hier hin. So ein ID
Feld braucht jede
Klasse die man mit
Entity Framework verwenden will. Sonst sagt
er ohne ID geht nix.
Der Sibaro hat hier Gains gemacht.
Dann brauchen
wir sowas wie
Created. Add.
Ähm. Dass ich es Created
Add nenne ist noch so ein bisschen übrig gebliebene
Ruby Angewohnheit.
Wahrscheinlich sollte man es einfach
nur Created nennen.
So also das ist im Prinzip
hier kommt der Timestamp rein, wann das Ding
angelegt wurde. Weil ich mein
es kann ja auch mal sein, dass man sich
vertippt.
Ähm. Wenn man sich vertippt hat
oder man oder vielleicht auch
der Scanner aus der Mail die falsche
Trackingnummer extra erinnert, die es gar nicht
gibt. Dann kann ich sagen
okay, wenn das Ding innerhalb von
7 Tagen ab
Erstelldatum keine
Trackinginfos findet, dann stellen
wir das auf
nicht auffindbar oder so.
Kommt Created Add und
Updated Add nicht schon aus Entity
Framework? Das kann sein, dass das
alte Entity Framework das gemacht
hat, aber EF Core macht das nicht.
Oder
nicht, dass ich wüsste, dass es das macht.
So. Ähm.
So was braucht man sonst noch? Created Add.
So und jetzt wird es ein bisschen
komplizierter, weil jetzt bräuchten wir sowas
wie ne
das wird keine Stringliste.
Sowas wie ne History bräuchten
wir jetzt.
Sowas wie ne History.
So.
Dazu brauchen wir ne neue Klasse, die heißt
dann Shipment
Progress oder so.
So und meine History
besteht aus einzelnen
Fortschrittseinträgen.
Also da habe ich dann zum Beispiel in
meiner History fünf Einträge
für
für wann halt ein Event
aufgetreten ist. So nach dem Motto
ist jetzt unterwegs an diesem Standpunkt,
ist jetzt unterwegs an diesem Standpunkt, ist jetzt unterwegs
dahin, ist jetzt im Auto,
wird ausgeliefert und ausgeliefert.
So das wären dann die fünf Einträge
halt in der History. Progress. So und
jeder Progress hat
selbst mal wieder ein
ein Updated Add
ein
ähm
eine Message.
Wo der Text drinsteht, so nach dem Motto
das Paket wurde
in das Zustellungsfahrzeug geladen
wie es bei DHL immer drinnen steht.
ähm
und was braucht
man sonst noch?
Einen Status braucht man noch. Also was das gerade
ist.
Also in Transit,
im Auto,
Scat und Set, ne Up-Art von .net.
Das ist keine Up-Art, das ist in
eine kurze Schreibweise
für ansonsten
nervige Sachen.
Also du kannst das, also das ist die
Kurzschreibweise, ich glaub mal
es gibt mittlerweile auch so einen Refactor für, der das für einen macht.
Das ist die
Kurzschreibweise von
äh
ne, kann man
das nicht mehr?
Ach doch hier.
Die richtig lange Schreibweise
geht glaube ich gar nicht mehr.
Doch, das ist die
lange Schreibweise.
Passt.
Das ist die lange Schreibweise
davon. Du hast ne Backing Field,
ne Private Backing Field und das
ist dann quasi ähm
das Public Property, wo du drauf zugreifst
auf dieses Field.
Das ist einfach nur die kurze Schreibweise
davon. Und macht im Prinzip
genau das gleiche, spart aber ganz viel
Geschwubbel.
So ähm Message.
Dann brauchen wir sowas wie Status.
So und Status wird sowas sein wie
brauchen wir nochmal
ein Enum. Sowas wie
ähm Shipment
Status.
Ähm
Das
das hatten wir schon mal. Das ist sowas wie Transit,
Delivery, das hatten wir
schon mal in unserem DHL Tracker.
Dann hatten wir es genannt, da kann ich mich
doch dran erinnern.
Der Auskenn Fuchs hat abonniert. Dankeschön.
Nice.
Unser CSS Pro.
Kein CSS Pro, sondern
CSS Pro ist das.
Poggers.
Switch Prime, dafür hab ich doch jetzt sogar einen eigenen Sound.
Ne, hier, Moment.
Hab ich mir extra doch dafür angelegt.
So, okay, wo sind wir stehen geblieben?
Ähm, wir brauchen einen Status, dazu
brauchen wir hier einen
wieder einen Enum. So, und eine Sache,
die wir noch einführen, ich nenn's mal Stale.
Ähm
Das ist ein
Status, den wir verwenden können.
Mal angenommen,
irgendjemand addet was
und
man findet einfach eine gewisse Zeit
keine, keine Sendeverfolgungsinformationen
zu, dann können wir es auf Stale
stellen. Das ist halt, oder
oder vielleicht fällt ja jemand dem noch was
schöneres, schöneres Wort für ein.
Ähm, dann stellen wir den Status nämlich einfach auf
Stale, so nach dem Motto, ey, das
da stinkt was
nicht so ganz richtig mit.
Find dazu keine Sendeinformation.
Man könnte ja
quasi sagen, sowas wie
ähm,
also hier, ne, dass man stellt es auf Stale,
wenn, äh, innerhalb
sieben Tage nichts gefunden wurde
oder
Error counter irgendwie größer zehn.
Also, da könnte man es so machen,
wenn das Ding älter als sieben Tage ist, wurde nichts gefunden,
oder aber, wenn beim Suchen
nach dem Sendecode irgendwie zehnmal
einen Fehler gab, dann stellen wir das auf, ist wahrscheinlich
verkehrt.
Paket verloren Status, ich glaube, das kriegen wir
nicht abgezapft richtig einheitlich.
Ich beschränke mich mal auf
die Sachen, die wir auf jeden Fall einheitlich von jedem
Anbieter kriegen können.
Nämlich, dass das Ding unterwegs ist,
dass das Ding im Auto ist, und dass das Ding
fertig ist. Und, dass
das Ding nicht gefunden wurde.
Dass die Nummer falsch ist.
So, die zwei Sachen, diese vier Sachen
werden wir wahrscheinlich bei jedem Anbieter rauskriegen.
So, ähm,
okay.
Hallo, Beatbrot.
Das reichte eigentlich erst einmal.
So.
Dann legen wir jetzt unseren App-Kontext
an. Da will ich ja mal
ausprobieren, ob
man, ob dieses, ähm,
das war bisher immer
ziemlicher Mist, ob man, äh,
ob dieses Code generieren mittlerweile in
Visual Studio ganz gut funktioniert.
Probieren wir mal aus. Also, was
wollen wir?
AP Controller mit Actions
using Entity Framework.
Brauchst du das Ganze noch
abstrakt, also mit Interface?
Kommt drauf an, was man da noch alles braucht.
Also, die eigentlichen Paket-Tracker,
die kriegen auf jeden Fall ein Interface,
weil, das, ähm,
sind ja mindestens
mal vier verschiedene Paket-Tracking-Sachen,
die wir brauchen.
Und das muss man ja irgendwie
einheitlich machen über den Interface.
Oder über irgendeine Base-Class oder irgendwie
sowas.
Müssen wir mal gucken.
Okay, AP Controller mit
Actions using Entity Framework. Mal gucken, wie gut
die Code-Generierung mittlerweile funktioniert.
Model-Class ist unser
Shipment.
Data-Context-Class wollen wir uns
erstellen lassen.
Die heißt
Versand-Traxor-Context. Ne, die heißt
Up-DB-Context. Das ist so der Noob-Name,
den alle nehmen, wenn ihnen nichts einfällt.
Und die wollen wir allerdings in Data
erstellen.
Hab ich mich irgendwann mal so angewöhnt. Ich weiß gar nicht, ob das
krass im Best Practice
sind, das so zu machen.
Moin, wie ist die Lage?
Also aktuell funktioniert alles, aber wir haben noch nicht
allzu viel gemacht.
So, mal gucken, ob das
Code-Generieren
ordentlich funktioniert.
Ne, was ist hier los? Warum darf
sich...
Was ist los, Visual Studio?
Warum darfst du dich vor meine Overlay schieben?
Was ist hier los? Warum darf der das?
Mein Overlay ist always on top
eingestellt.
VS zeigt Dominanz.
Genau.
Könnte man echt so
interpretieren.
Oder man könnte es auch so interpretieren...
Oh, das habe ich vergessen.
Man könnte es auch so dominieren.
VS Code zeigt PPGA
Dominanz.
Das habe ich vergessen. Das stimmt.
Das Ding braucht auch noch
eine ID und funktioniert jetzt nicht.
Weil hier
haben wir das... Hier verwenden wir die Klasse
drinne. Ohne ID kann er die ja nicht in der Datenbank
anlegen. Das stimmt.
Da gebe ich ihm recht. Das funktioniert
nicht.
Microsoft 1
Max 0. Okay, also machen wir
das Ganze nochmal. Add.
Model Class. Ad.
Zack.
App DB
Context. In Data.
Add.
Add. Okay. Gucken wir mal, ob das
jetzt funktioniert. Zweimal Context?
Oh je. Monka Shake.
Abbrechen geht nicht.
Abbrechen geht nicht.
Ab DB Context.
Context. Ja, aber das ist kein Ding.
Man kann das einfach umbenennen.
Ja. Zack.
Und schon.
Heißt er richtig.
Unter Data hat er das jetzt angelegt?
Also, dass er den Context
darunter angelegt hat, ist okay.
Dass er den Controller darunter... Na gut,
ich habe hier auf den Ordner geklickt.
Okay, ähm, ähm, wir moven das
Ganze mal. Äh, wir
moven das Ganze mal hier unter Controllers.
Ah.
Und jetzt ändern wir
noch den Namespace in
Controllers.
Jetzt meckert er natürlich rum, dass er es nicht
findet. Ah, alles
gut. Okay.
So, und das Ding
benennen wir um. Ich nenne das Ding
immer CTX. Weil.
Also angewendet CTX.
Gut. Sehr schön.
Ja, so das Code
generieren funktioniert ganz
anständig. Okay, was hat
er da? Was hat er uns da alles generiert?
Also, unter
slash api slash controller name
also, also
api slash shipments
haben wir jetzt einen Controller, der
uns
auf dem Index, als Index
gibt er uns alle Shipments zurück.
Das ist richtig. Das sollte man dann
das sieht vor als Standard so.
Ähm, ein Get auf
eine ID gibt uns das
einzelne Shipment
mit dieser ID zurück.
Das ist auch okay.
Das ist alles schon ziemlich modern gemacht
hier mit TaskActionResult
und schönem
await, findAsync und alles.
Viel ordentlicher als ich das gemacht
hätte, wie der das generiert hat.
Put für ein Update
auf die ID ist auch implementiert.
Verwende ich so gut wie nie, ehrlich gesagt.
Ähm,
ein Pause zum neuen Anlegen.
Delete mit der ID.
Und so eine Testmethode, ob das Ding
existiert.
Okay, wir schmeißen die Sachen
weg, die wir nicht brauchen gleich, aber erstmal
lassen wir das so wie es ist.
Okay, so, jetzt müssen wir erstmal
unsere Webseite basteln.
Ähm, unsere Webseite machen wir mit
ähm
machen wir mit
Visual Studio Code auf. Achso,
vorher laden wir uns nochmal ein paar Bildchen runter.
DHL Logo
brauchen wir.
Ein DHL Logo brauchen wir.
Machen wir mal hier Add.
Links hier Image.
Image.
So, ein DHL Logo. Was nehmen wir denn?
Kleines brauchen wir. Nicht High Resolution.
Wir brauchen ein kleines.
Icon.
Icon klingt gut.
2000.
128 x 128.
Das klingt
nicht gut.
Ähm,
256 x 256.
Also 128 x 128
wäre mir eigentlich lieber.
Aber das ist nicht transparent.
Und da ist ganz, da ist
weißes Zeug drum rum.
Sackt irgendwie, ne?
Hier, da haben wir noch was. Das ist doch gut.
Das nehmen wir.
DHL.
So.
DHL Logo und dann machen wir noch
Hermes. Hermes Logo.
Oh, Hermes gibt es auch Handtaschen, okay.
Hermes Logo.
Warum sieht das Hermes Logo so schlecht
aufgelöst aus? Können die,
können die ihr eigenes Logo noch nicht mal ein ordentlicher
Nehmen wir mal das. Das sieht ganz gut aus.
Brauchbar aus.
So, save.
Hallo Clocks HD.
Was hältst du eigentlich von Springboot, auch wenn du Java hast?
Ganz ehrlich, meine Erfahrungen mit Springboot
halten sich ziemlich in Grenzen. Ich weiß, was es ist.
Das ist quasi so
nen, so, so, so,
wo ich bisschen, bisschen weiter ausruhe.
Früher war es ja irgendwie so, du hast dein Java Zeug
in irgendeinem Applikationsserver
wie Tomcat laufen lassen und ich glaube Springboot ist es
jetzt quasi umgedreht,
dass du quasi deinen eigenen Applikationsserver
irgendwie mitbringst. Also dass du quasi jetzt
nicht dein Java im Tomcat laufen lässt, sondern
quasi den Tomcat im Java laufen lässt.
So ungefähr. Korrigiert mich, wenn das, wenn
das nicht stimmt.
Aber so in der Richtung
habe ich das bei uns mitbekommen.
Das wohl
einfach ein anderer Ansatz ist.
Und
anscheinend sehr beliebt
in der Java Welt.
Mehr weiß ich dazu nicht.
Außer, dass es wohl
nicht schlecht sein kann,
weil das viele
unsere Entwickler ganz doll finden.
Und da sind auch ein paar dabei.
Ein paar einzelt.
Obwohl es Java Programmierer sind,
denen traue ich tatsächlich einiges zu, ja.
So hier, Hermes. Bam.
Als nächstes
Save Image.
DHL.
Bam.
Ok. Reicht jetzt.
Hermes und DHL Logo.
So, dann machen wir ein div.
ID. App.
Zack.
Da drin brauchen wir eine Form.
Action.
Slash API.
Slash
Shipments.
Shib...
Shipments.
Post.
So, da haben wir eine Form.
Ähm...
Da was...
...mit dem Chat wieder los?
Ok, Action Shipments.
muss ich mir mal überlegen, ob wir das als JSON
oder als, wir schicken das mal
als Form.
Data.
So, und jetzt was brauchen wir? Also wir machen jetzt mal
zwei Sachen. Wir machen eine Liste
hier unten.
Wir machen eine Liste mit allen
mit allen
laufenden, wir machen eine Tabelle.
Wir machen eine Tabelle.
Mit allen laufenden, warum mache ich das
überhaupt in Visual Studio?
Ich habe doch gesagt, ich will das in
ich will das in VSCode machen.
VSCodera.
Open Folder.
Zack.
Oh, Mistschalter.
Okay, weg damit.
Weg damit.
Index, jawohl.
Das ist doch gleich viel angenehmer, weil dann kann ich
mein Backend-Krempel in Visual Studio
machen und den Frontend-Kram
mache ich in VSCode und muss mich da nicht so viel
nicht so viele Gedanken drum machen.
Hat das auch ein Table-Template?
Table? Ne, hat es nicht.
Nein, braucht man eigentlich auch nicht.
So, also, was ich jetzt vorhabe ist,
ich würde gerne
eine Form machen zum
neuen Anlegen von Tracking-Nummern.
ASP oder Blazor?
Naja, Blazor ist
du brauchst ja auf jeden Fall irgendeinen
Backend, also in der Regel verwendest du Blazor mit
ASP.
So,
also hier oben machen wir
einen Input, wo
man eine neue Tracking-Nummer eingeben
kann und einen Anbieter auswählen.
Wie gesagt, Plan
ist ja, dass man sowohl manuell
Tracking-Nummern hinzufügen kann, als
auch
automatisch, dass der automatisch
ein E-Mail-Postfach scannt nach Tracking-Nummern, aber
wir machen es mal heute zum, dass wir
so grundsätzlich mal was Funktionierendes
hinkriegen, dass man es von Hand addet
und wenn das funktioniert und im Hintergrund
updatet, ist ja das automatische Scannen dann
der nächste logische Schritt und
unten drunter macht er eine Tabelle,
machen wir eine Tabelle mit
den aktuellen Einträgen,
also
wie
funktioniert der gerade nochmal,
Tablehead, TH, ne,
mach mal nochmal ordentliche
Tabelle, so ne, TR,
TH,
blubblubblub,
mal gucken,
mal gucken wie meine Tabelle ausschaut,
äh, ja gut,
ähm, TD, blubblubblub,
hatte ich hier nicht irgendwo
ne,
hatte ich hier nicht irgendwo
den, den, den, den, den,
Live-Reload-Server laufen.
Dass er das automatisch
updatet. Na gut, wir werden
nicht sterben, vor allem zu mal Refresh drücken.
Okay, so.
Dann brauchen wir hier oben noch einen Style.
Und zwar brauchen wir
diesen, muss ich jetzt mal googeln,
danach.
CSS Table
Second
und genau sowas
hier. Ja.
Das will ich haben.
Das ist jetzt nämlich jede zweite
jede zweite Reihe
jede zweite Row in der Tabelle
kriegt eine andere Farbe.
Probieren wir mal aus.
Ups, was mache ich denn?
Moment, Moment, da stimmt was von der Logik her nicht.
Ich brauche noch
eine weitere Row.
Ja, guck, jetzt funktioniert das.
So.
Okay.
Also, was brauchen wir? Wir brauchen
sowas wie, wie, wie,
nennen wir es mal, wir
schreiben es mal auf Deutsch. Sowas wie Sendung
brauchen wir oder Paket.
Komm, wir machen es eigentlich.
So, dann brauchen wir
ähm
Status, was der aktuelle Status
ist. Also sowas wie
ähm, auf dem Weg, im Auto
oder, oder zugestellt.
Dann brauchen wir
sowas, ich glaube so viel brauchen wir
hier gar nicht. Dann brauchen wir sowas
wie, äh, updated.
Also und, und
was es für ein Anbieter ist.
So, ähm,
ja, das sieht jetzt natürlich
extrem hässlich aus.
Deswegen binden wir erstmal
eine ordentliche Schriftart ein.
Welche Schriftart verwende ich denn hier?
Ich glaube, das ist, ich glaube, Google, Google gedönst, ne?
Wollen wir gleich schon mal einbinden.
Roboto
Schriftart, beste.
Achso, Titel brauchen wir auch noch.
Versand,
Traxor, okay.
So, ähm,
dann sagen wir jetzt,
Body soll
Font-Family
wahrscheinlich das ist Roboto oder so.
Wie das so?
Ja.
Sieht schon mal viel besser aus.
Und Font-Size
machen wir mal irgendwie 20.
So wie das ausschaut.
Das sieht doch schon mal besser aus.
Moment mal Leute, ich muss mein Live-Reload-Zeug
mal konfigurieren. Das geht mir extrem auf den Keks.
Dass ich jedes Mal
Click-to-Run-Live-Server
Hello. Wow.
Oh ne, jetzt ist euer Bild wieder weg.
Aber vielleicht kommt ja euer Bild jetzt gleich wieder.
Wie sieht's aus, Leute? Kommt's Bild wieder?
Ne, ne? Kommt nicht wieder.
Oder?
Kommt's wieder? Doch, kommt wieder.
POG!
Huge.
Äh, hat das jetzt...
Ey, es funktioniert, nice.
Das, ah, Moment, Moment, Moment, das kann nicht funktionieren.
Das geht jetzt ja, Moment,
der muss das Proxy, ne?
Oh fuck, wie macht man das mit dem Live-Reload-Server jetzt richtig?
Ich mein, guckt, prinzipiell funktioniert's jetzt.
Wenn ich jetzt hier was ändere und speichere, dann updatet's automatisch.
Allerdings ist das ein eigener Server, der nicht weiterleitet zu, zu meinem
äh, Backend-Ding.
Also das heißt, das kann nicht richtig funktionieren.
Äh, ich glaube, das ist wieder viel komplizierter, als ich mir das vorgestellt hab.
Live-Reload-Server-OS-Code-Proxy.
Der muss das jetzt irgendwie proxien, dass das funktioniert.
Proxy, Proxy, Proxy. Gibt's da ne...
Doch, kann man bestimmt, wenn ich wüsste wie.
Proxy.
Live-Server-Settings-Proxy. To enable Proxy. Settings-Proxy.
Proxy-URL.
Das sieht eigentlich ganz...
...brauchbar aus.
Settings.
So.
Äh.
Demnächst können wir wieder rausschmeißen.
So, also was war...
Aber die Settings?
Die sehen doch sonst irgendwie anders aus, oder?
Leute, was ist denn da los?
Das ist doch gar nicht das richtige Setting.
Ah, das da meine ich. Genau.
Ähm, also was brauchen wir jetzt? Live-Server.
Live.
Live-Server. So, hier.
Was müssen wir da jetzt einstellen? Proxy.
Proxy.
Ah, nice. Der kopiert einem gleich das Beispiel.
Live-Server-Settings-Enable-True. Wir wollen alles proxien. Und zwar auf...
Wohin wollen wir proxien?
Auf Localhost.
Auf Localhost 5000.
So, mal gucken, ob der Kram jetzt funktioniert. Da bin ich mal gespannt.
Ob das jetzt geht?
Anscheinend.
Oder?
Funktioniert das jetzt?
Na gut, werden wir gleich sehen, ob das funktioniert.
Ähm.
Wir müssen mal einen Request machen.
Gucken wir mal.
Äh.
API-Shipments. Blablabla. Machen wir mal einen Submit-Button.
Submit.
Gucken, ob das funktioniert.
Anscheinend.
Aber es aktualisiert nicht mehr.
Ich bin verwirrt.
Also, es hat funktioniert, aber es hat nicht aktualisiert.
Guckt, wenn ich jetzt hier ändere.
Dann updatet es nicht mehr.
Ja, das ist ja Fail.
Dann brauche ich den Kram auch nicht.
Canada.NET Server TLS, ja.
Jetzt proxiet er zwar, aber reloadet nicht mehr.
Wozu brauche ich denn das dann?
Mache ich das vielleicht verkehrt?
Ist das vielleicht falsch, wie ich das mache?
Live Reload Fully Controlled by Live Server Web Extension.
Web Extension.
Probieren wir mal aus.
Vielleicht geht es ja damit dann besser.
Dann machen wir es halt nicht im...
Dann machen wir es halt nicht im...
Okay, das funktioniert jetzt.
Ich glaube, es geht.
Ich glaube, es geht.
Ich bin mir nicht so ganz sicher, ob das jetzt wirklich das ist, was ich haben will.
Vielleicht geht es jetzt auch auf dem Server.
Ne, ne?
Don't want proxy setup.
Ne, das geht nicht.
Das geht jetzt nur, wenn ich auf dem richtigen Server auch bin.
Okay, was auch immer.
Aber prinzipiell scheint es zu gehen.
Okay, gucken wir mal.
Wir schauen, ob das Ganze...
Das war auch schon mal einfacher.
Ja, ja, ich habe es gestartet hier.
Klar, Port 5500.
Okay, ähm...
Also.
Updated.
Updated.
Overrated.
Overrated.
Chebated.
Okay.
View.
JS.
Getting started.
Da ist immer...
Da ist immer die URL drinne, wo der aktuellste Download ist.
Da.
Zack.
Okay, dann machen wir mal ein bisschen was Dynamisches.
Ähm...
Skript.
Ah, App.
Gleich.
New.
View.
Zack.
Zack.
Zack.
Zack.
Zack.
So.
Data.
Ähm...
Element.
Element.
Ähm...
Element, wo die App geladen werden soll.
App...
Und mounted...
Mounted...
Ähm, also sprich...
Das ist die Funktion, die einmalig ausgeführt wird, wenn das Ding geladen wird.
Schauen wir mal, ob es irgendwie abkackt oder so?
Oder, ob es funktioniert?
Failed.
Ach so.
Fav êtes piel.
Favicon.
Wen juckt's dann.
Das heißt, es wird auch ordentlich geproxied, das ist schon mal schön zu sehen.
So, ähm, Data.
Data brauchen wir jetzt ein Shipments Array.
Ich denke mal wie immer nur laut, ne.
So, und das Ganze müssen wir jetzt abrufen von unserem Backend.
Der Backend hat allerdings, muss ich nochmal ausmachen, unser Backend Close.
Kann man dem auch sagen, dass der nichts starten soll?
Ja, hier, Launch Browser Falls.
Brauchen wir nämlich nicht, weil wir haben ja hier unseren eigenen Tab.
Ähm, ist viel besser, soll ja kein Browser starten.
So, wir haben jetzt allerdings weder die Datenbank angelegt, noch, was hat denn der da eingefügt?
Use SQL Server? Ne, ne, ne, ne.
Use SQLite wollen wir haben.
Übrigens habt ihr es gesehen, das ist ein neues Feature von Visual Studio 2019.
Ähm, hab ich jetzt verkehrt?
Ne, ich brauch das hier hinten gar nicht.
Ähm, das ist ein neues Feature von Visual Studio 2019.
Was, da haben sie den riesen Aufriss drunter gemacht, äh, drüber gemacht, in, in einem, in einem Build Video.
Dass diese, diese Auto-Completion, die hier vorgeschlagen wird, also quasi,
die, was die beliebtesten Methoden sind, aus diesem, aus diesem Framework,
dass sie das mit super krassen, hochkomplexem Machine Learning, ähm, rausgefunden haben
und jetzt quasi diese super neue, tolle Bleeding Edge Technologie endlich ihren Benutzern zur Verfügung stellen.
Ich weiß nicht genau, wozu man da Machine Learning braucht, das, wahrscheinlich reicht es nicht, einfach zu zählen,
wie oft, welcher, also welche Methode besonders oft verwendet wird.
Aber, aber Machine Learning hört sich, hört sich auf jeden Fall gut an, ja.
So, und jetzt müssen wir nämlich noch einstellen, dass der überhaupt unsere SQLite verwendet.
So, Context.
Das erste, was wir noch machen, müssen wir sicherstellen, dass die Datenbank angelegt ist.
Okay, und jetzt müssen wir noch, ab db Context, Context, der immer noch, äh, einmal Context zu viel im Dateinamen hat,
und müssen ihm,
zu sagen, das brauchen wir nämlich gar nicht mehr.
Ich habe jetzt gelesen, man macht das jetzt unter, man macht das jetzt anders unter, ähm, ASP.NET Core 3,
macht man das jetzt anders, und zwar, man überschreibt jetzt, onConfigure,
und dann sagt man, Option Builder, use SQLite.
Was da dran jetzt besser ist, als das in, im, im Startup zu machen, keine Ahnung,
aber, äh, es ist besser.
shipments.db, so, und nun sollte der eigentlich, wenn ich es wieder starte, eine Datenbank anlegen, eine SQLite-Datenbank anlegen,
und dann sehe ich allerdings immer noch nichts.
Probieren wir mal.
Er sollte seine SQLite-Datenbank zumindest schon mal anlegen.
Ich sehe da jetzt verhältnismäßig wenig, ehrlich gesagt.
Dann hätte ich ein bisschen mehr stehen müssen.
Ah, ne, da hat die angelegt, die Datenbank, da ist sie, ja.
Da ist sie.
Open in Explorer, please.
Open in Explorer.
Wir gucken, wir gucken mal rein, wie die aussieht.
SQLite, wir haben ja hier unseren SQLite-Brosa.
Der, der braust.
So, was haben wir da drin?
Der Shipment, Shipment Progress, und Data ist logischerweise nichts drin, weil wir noch nichts hinzugefügt haben.
Okay, das Datenbank anlegen hat funktioniert.
Nice.
Auch wenn er,
auch wenn er noch keine Debug-Ausgabe gemacht hat.
Aber wir wollen uns ja mal nicht so anstellen.
Okay, Datenbank anlegen hat funktioniert.
Das heißt, dann probieren wir doch jetzt einfach mal, was zu erstellen, oder?
Ne, wir erstellen nichts, wir schreiben, wir schreiben einen Test,
wir schreiben einen Test-Eintrag, machen wir rein.
Direkt beim Starten der Anwendung, dass wir auf unserer Web, dass wir in unserem Web-Interface auch was sehen.
Äh, machen wir nämlich hier.
X-Database,
X-Database, also wir, wir löschen die, wir löschen die Datenbank und legen sie danach wieder neu an, das heißt, das Ding ist jedes Mal leer, äh, und dann fügen wir, fügen wir mal was Neues an, an Tests, Testshipment hinzu und gucken, ob das funktioniert.
Und dann nehmen wir eine Tracking-Nummer, die uns jemand letztens im Stream zur Verfügung gestellt hat, probieren das damit aus.
So, Carrier ist, ähm, nehmen wir mal DHL, Created At ist Date, Time, Now, äh, History haben wir noch nicht, ID macht er selbst, also, und Tracking-ID ist, äh, die muss ich mir raussuchen, die habe ich hier in meinem Notizprogramm gespeichert, vom letzten Stream.
Nun die Tests, wer schreibt schon, komm mal jetzt mal ernsthaft, habt ihr mich schon einmal einen Test schreiben sehen im Stream?
Ich glaube einmal, ich glaube sogar einmal haben wir einen Test gemacht, aber normalerweise machen wir nie Tests, weil wir immer fehlerfrei programmieren, brauchen wir keine Tests.
So, nehmen wir mal die Tracking-Nummer, wir gucken erstmal, wir testen erstmal, ob die geht, Chipment-Tracking, da, ja, Chipment, Hannover, okay, nice.
Ähm, ja, übrigens danke für alle, die mir der Test...
Test-Tracking-Nummern zur Verfügung gestellt haben, jetzt, jetzt brauche ich sie.
Okay, das haben wir jetzt drin, Chipment, save, save.
Wofür braucht man eine Datenbank, wenn man eh keine Daten nach einem Stoppen der Applikation hinterlässt?
Ja, dann, dann brauchst du in der Regel auch keine Datenbank, je nachdem, was du da für Beziehungen zwischen deinen Daten hast, vielleicht schon, oder zumindest eine In-Memory-Datenbank, dann brauchst du in der Regel keine.
Wäre ja auch reichlich sinnlos.
So, gucken wir mal, welche hinzufügt.
Ja, die Debug-Ausgabe ist wirklich nicht sonderlich, ähm, erhellend, irgendwie.
Gucken wir mal mit unserem tollen SQLite-Explorer, ob da jetzt was drinsteht.
Ja, da ist es, hier, guck, da.
Created-Add, eben gerade, Tracking-ID da, Carrier ist 0, wahrscheinlich ist 0 DHL, weil das das erste ist, was in der Liste drinsteht.
Okay.
Okay, so, dann müssen wir das jetzt noch in unsere Webseite reinkriegen.
Okay, mounted.
Äh, fetch, und zwar, wir rufen das Ganze ab von slash api slash ship, shipments, ähm, await, so, async, und dann sagen wir, this shipments is await,
result, JSON, in der Hoffnung, dass das auch kein...
Error gibt beim Abrufen.
Schauen wir mal.
Okay, anscheinend geht das, sonst hätte es einen Fehler geschmissen.
Können wir hier mal Netzwerk, Netzwerk gucken, Shipments-Fetch, ja, funktioniert.
Ist ja auch nicht, nix, äh, kompliziertes bis jetzt.
Ähm, so, da können wir jetzt hier mal unseren, unseren Reload-Geschichten wieder benutzen.
Wir machen die, wir machen die Browser-Tools mal unten hin, weil sonst sieht man so wenig.
Okay, der reloadet immer noch.
So, ähm, das heißt, jetzt müssen wir unsere Tabelle mal malen lassen damit.
Und zwar, oh, mal gucken, ob ich das aus dem Kopf hinkriege, view for, gleich, shipment in shipments,
und dann machen wir den Kram weg und sagen so, eine Klammer zu viel, shipment, Punkt, carrier,
zum Beispiel, null, das ist richtig, weil null ist DHL.
Guckt, guckt, null, null ist, Moment, falsche, falsche App.
Null ist DHL, sieht man nämlich hier, da, weil es der erste Eintrag ist.
Null ist DHL.
Müssen wir noch schauen, dass das dann hier DHL drin steht und nicht null, aber das kriegen wir schon noch gebacken.
So, ähm, also, shipment ist, da wollen wir die Tracking.
Tracking ID anzeigen, ja, sehr schön.
Ähm, dann machen wir hier nochmal sowas wie TR, machen wir ein bisschen Abstand dazwischen, hä?
Padding und Pixels.
Ach, nee.
Äh, Margin?
Auch nicht.
Ja, wie geht denn das?
TD?
Hm, wie ich will immer nicht den Unterschied zwischen Padding und Marging lernen können.
Ah, ja, jetzt, okay.
Ah, dann, dann, so will ich's haben.
Ah, dass wir ein bisschen, bisschen Rand haben.
Fünf Pixels sind da, glaube ich, ganz, ganz okay.
Ähm, du kannst mit ERV auch den Enum-Wert auch als String in der DB speichern, da musst du das nicht wieder übersetzen.
Wie?
Da muss ich wahrscheinlich bei meinem Model irgendein Attribut oder so drüber, drüber schreiben, ne?
Weißt du wie?
Genau.
Okay, Status null, updated null, carrier null.
Ja, genau mit Attribut.
Dann, dann suchen wir mal danach.
ERV-Core, Enum.
Nee, nicht JSON, nicht JSON-Enum, einfach nur Enum.
String.
Geh fort.
Was, was, was brauch ich da für nen?
Enum-Sint, Enum-S-String.
Genau, das wollen wir haben.
Enum-S-String.
What?
On-Model-Creating?
Entity...
Warte, Moment, was?
Ach, hier.
So, ja?
Kann man das so machen?
Können wir mal ausprobieren, vielleicht funktioniert das ja.
Machen wir mal hier wieder aus.
Gehen in unseren, äh, in unsere Datenbank-Dings rein.
So, und überschreiben jetzt On-Model-Creating.
Bei der Gelegenheit könnten wir eigentlich auch Created-Add automatisch setzen.
So, Entity, äh, Entity-Dings hier, wie, wie hab ich's genannt?
Shipment, Property, Carrier, S-String-Conversion.
Okay.
Schauen wir mal, ob das was bringt.
Äh, Moment, wo sind wir?
Ne, das bringt nix.
Auskennen, Fuchs, ich glaube, im alten Entity-Framework ging das genau so.
Aber ich weiß nicht, wie das in EF Core geht.
Irgendeinen Vorteil muss Java ja haben.
So, schauen wir mal.
Doch, das wird richtig gespeichert.
Ah, ich glaube, ich weiß, woran das liegt.
Also, es ist vollkommen egal, wie das gespeichert wird in der Datenbank.
Der JSON-Converter, der JSON-Converter beim, beim, äh, bei der Antwort hier, der schickt da Null zurück.
Wartet mal.
100 pro Discord ausmachen.
Das wird's wahrscheinlich sein.
Äh, Moment, was, was, was spackt der, was, wow.
Hab ich, Moment, hab ich irgendwas verkehrt gemacht?
Ach, ich hab die Datenbank noch auf.
Äh, das kann natürlich nicht funktionieren.
So, wenn wir jetzt mal hier reingucken.
Genau, ha, der JSON-Converter ist das Problem und nicht, wie das Ding in der Datenbank gespeichert wird.
Der JSON-Converter konvertiert das als Int und nicht als String.
Das heißt, wir können den Kram hier schon mal wieder rausschmeißen.
Jetzt müssen wir das irgendwie unserem JSON-Converter beibringen, dass der das richtig macht.
Äh, Spinnet, Core, Enum, JSON.
JSON-String.
Also im Prinzip hab ich eben aus Versehen sogar schon das Richtige eingegeben.
Ähm.
JSON-Serializer-Settings-Enum-String, okay.
JSON-Serializer-Settings-Enum-String.
Ne, wir wollen es deserializen.
Enum-Names-Instead-of-Int-Values.
Jawohl, das zeige ich her.
JSON-Converter-Type-of-String-Enum-Converter.
Ja, oh, das klingt, das klingt gut.
Das klingt gut.
Das klingt gut.
Ina-Member.
Hier, JSON-Converter-Type-of-String-Enum-Converter.
Das können wir da drüber schreiben, okay.
Was, was schreibt der GitHub-Typ hier noch?
Äh, Add-JSON-Options.
Options, Serializer-Settings-Converter.
Hab ich da irgendwie Zugriff drauf?
Ne, haha, das bringt ja gar nichts mehr.
Leute, das, das geht so gar nicht, weil.
Das ist, ASP.NET Core 3 hat keinen, verwendet kein JSON.NET mehr.
Das funktioniert so gar nicht.
Also, wenn ich das jetzt hier eintrage.
Hier, hier wollen wir es ja haben.
Sagt, da geht nicht.
Äh.
Oder doch?
Geht auch mit dem neuen.
Use-System-Text-JSON-Serialization.
Okay, was auch immer.
Ja.
Jetzt für Dinge einbinde.
Value-Conversions-Internal.
Ne, ne, das, das wollen wir nicht.
Ne, ne, das funktioniert so nicht.
Was, was kann ich da angeben?
JSON-Converter.
JSON-Converter.
Type.
Das ist, das ist Preview 7.
Type-of-String.
JSON-String-Enum-Converter.
Aha.
POC.
Oh, äh, Moment.
Ach, da.
So, mal gucken, ob es jetzt, jetzt funktioniert.
Ah.
Guck mal da, jetzt steht DHL drin, ne.
Easy.
Boah, überhaupt kein Problem.
Eats AF.
Okay.
Können wir weiter basteln.
Also, DHL, DHL, blablabla.
Äh, so, updated.
Wie habe ich das genannt?
Updated at.
Ne, created at.
Habe ich das genannt, glaube ich.
Created at.
Das müssen wir mal gucken, wo ich die Zahl jetzt herkriege.
So, und Status.
Ähm.
Status kriege ich aus meiner History.
Also, jetzt muss ich jetzt irgendwie sowas machen wie,
History.
Allerdings ist die History leer in dem Fall.
Die History ist leer, weil,
ne gut, da gibt es keinen Eintrag.
Das ergibt irgendwo Sinn.
History.
Wir machen das mal anders.
Wir wollen, dass da zumindest immer
eine leere Liste drin ist.
Wenn nicht null, null, null abfangen ist,
wenn nicht null, null abfangen ist,
ist es immer doof, wenn es nicht
wirklich unbedingt nötig ist.
Genau.
Ja. Moin Max, hatte Donnerstag
meinen ersten Ausbildungstag. Wie hieß
mein Azubi-Kollege wohl? Genau, Max.
Tja, Max ist überall.
So, ähm.
Jetzt
müssen wir ihm noch sagen,
Table-Style, machen wir 100% von der
Seite.
100%.
Gut, ähm.
So.
Und jetzt wird es ein bisschen unschön,
weil,
wenn,
wenn das hier
größer null ist,
dann
zeige ich mal,
weiß was ich, äh, äh,
äh,
zeige ich denn da mal an?
Irgendwas.
So. Und wenn
das, und wenn das nicht
größer null ist, dann zeige ich an
Pending.
Das heißt, er hat noch nicht, also wenn hier
Pending drinsteht, dann hat er noch
nicht den aktuellen Status
zu dieser Sendungsnummer abgerufen.
Anstatt irgendwas
soll dann natürlich später an der Stelle drinstehen,
was er abgerufen hat. Aber
probieren wir das erstmal so aus,
äh, und Created At
soll natürlich auch nicht drinstehen, sondern
der Updated, Updated Zeitraum.
Wir gucken jetzt erstmal, dass wir das ordentlich
aktualisieren, gleich im Hintergrund.
Das, das reicht erstmal. So,
als nächstes sorgen wir jetzt dafür, dass wir, äh,
Sendungsnummern submiten können.
Das heißt,
wir brauchen ein, eine
Form mit einem Submit-Knopf.
Und
dann brauchen wir
einen Input
äh, Radio Button
oder Checkbox.
Und einen Radio
Button, weil wir wollen immer nur eins
aktiv haben.
Man kann die Sicherheitslücke schon förmlich riechen.
Ach was.
Content-Sicherheitslücken jucken doch eh keinen.
Wenn dein
Server ein Problem hat, ist es eher schlecht.
Ähm,
Type Radio Button,
ähm,
Ja, Cheat so in der Richtung, dass man das aufklappen
kann. Oder dass man es anklicken kann
und es geht ein, geht ein Popup auf. Irgendwie
sowas. So, Radio Button,
oh Gott, wie, wie, wie funktioniert der Kram nochmal?
Irgendwie Name,
und da muss man jetzt eingeben,
Carrier, was das sein soll.
Wenn ich jetzt mehrere
Buttons habe, geht nur einer, ne?
Genau.
Es geht immer nur einer mit dem gleichen Namen.
Stimmt's?
Ja, stimmt.
So.
Ähm.
So, und das hier ist, ähm,
Value, das, das hier oben
ist DHL.
Chat über Code, echt? Zeig mal her.
Ja.
Könnten, wir können das hier sogar ein bisschen kleiner machen.
Dann sieht man hier mehr.
Cute to chatte.
Ähm.
So, jetzt müssen wir irgendwie gucken, wie wir den Kram stylen
können hier oben.
Weil da hätte ich gerne ein DHL Logo
und da hätte ich gern,
da hätte ich gern ein
Hermos Logo.
War das Voice to Weep Voice? Ja klar.
Ja, mittlerweile
so viel Blödsinn da drin, ne?
Wobei, mein, meine, mein Lieblingstext zu
Speech ist, ist immer noch einmal das da.
Und, und der hier.
So, wie stylt man
jetzt ordentlich Radiobuttons?
Sind wir, jetzt wird dann wieder
Max krasse CSS-Künste
gefragt hier.
Links hier.
Das sieht jetzt auch wieder besser aus.
Ja.
Ähm.
Übrigens, Leute, habe ich euch schon erzählt.
Wenn ihr ein Amazon Prime Account habt,
könnt ihr das ganze kostenlos verbinden
mit eurem Twitch Account.
Und dafür bekommt ihr im Monat kostenloses
Twitch Prime Loot
und ihr könnt einen Streamer
eurer Wahl mit einem Sub unterstützen.
Dem Streamer bringt das die ganz normalen Vorteile.
Wie jeder andere Sub auch.
Plus, mit dem Bonus, dass es
euch nichts kostet.
Nur mal so angemerkt, ich hatte auch gestern Geburtstag.
Vielleicht soll ich das jetzt an der Stelle auch nochmal erwähnen,
wenn ich gerade schon sehr laut mache.
Das heißt, wenn ihr noch ein Twitch Prime
übrig habt,
ähm, habe ich natürlich nichts dagegen einzuwenden,
wenn ihr das, ne.
Wenn ihr damit macht, was ihr wollt, natürlich.
So, ähm.
Weiter im Text.
Wonka Windows.
So, pending.
Es funktioniert tatsächlich.
Pog.
Jumper 2020.
Und da
Flamongo
auch am Start.
Dankeschön für die beiden Prime Subs.
Hallo Portal Ghana.
Portail? Ghana?
Würde gerne subscriben, geht aber nicht.
Jaja, macht nichts.
Kannst natürlich auch so gucken, ne.
So, aber bin nicht so stehen geblieben.
Habe ich vor
Was habe ich jetzt gerade gemacht?
Habe ich vor lauter Sellout vergessen?
Ach ja, genau.
Radio Buttons stylen.
Wie stylt man ordentlich Radio Buttons?
Input.
Wir müssen Google gucken.
CSS Radio Buttons.
How to create custom checkbox and radio buttons.
Benutz
Vuetify.
Das ist irgendein CSS
Vue CSS Framework oder sowas.
Sieht ganz hübsch aus.
Brauchen wir da echt ein CSS Framework
für ein bisschen Tabelle?
Gibt ja zig CSS Frameworks im Endeffekt.
Components.
Haben die hier irgendwo eine Anzeige?
Was die alles für Komponenten haben?
Wollen wir mal, dass ich
so eine Übersicht angucken kann?
Das ist mir viel zu kompliziert.
Da muss ich mir das komische CSS Framework
merken.
Label Container.
Span. Ne, ne, ne.
Das macht man bestimmt so nicht mehr.
Wir suchen mal nach Checkbox.
Weil Checkbox werden wahrscheinlich
mehr gestylt.
How to create custom checkbox.
Siehste mal, das haben wir uns anscheinend schon mal
angeguckt. Ne, das hatten wir gerade eben auf.
Input type
Checkbox. Einfach. Easy.
Hätte schon so drauf kommen können.
Aber bloß nicht Checkbox.
Sondern
Format.
Sondern Radio Button.
Und schon ist der Radio Button groß. Easy.
Border.
Machen wir jetzt mal irgendwie.
Keine Ahnung. 20 Pixels.
Solid. Blue.
Funktioniert nicht.
Warum funktioniert das nicht?
Warum geht die Größe?
Aber ich kann keinen Border drum herum machen.
Jetzt sowas wie
Background Color.
Geht auch nicht.
Warum nicht?
Da braucht man die
Big CSS Brains.
Hm.
Checkbox with just CSS.
Appearance None.
Ok.
Copy Paste. Easy as fuck.
Oh, Copy Paste.
Ok, das scheint schon mal zu funktionieren.
Ähm.
So, jetzt machen wir erstmal alles weg, was so aussieht, als braucht man es nicht.
Webkit Appearance.
Kann man nicht einfach Appearance nehmen?
Ne, anscheinend nicht.
Webkit Appearance.
Gibt es dann auch sowas
wie Mods?
Mods Appearance.
Mods Appearance.
None.
Warum kann man nicht einfach Appearance nehmen?
Images instead of Radio Buds.
Ok.
Ja, die machen da aber irgendwie ein Label drum herum.
Ah, aber das ist trotzdem
ein ganz guter Hinweis.
Dieses Stack Overflow Posting.
Nämlich,
dass man. Ok, wir stellen das erstmal ordentlich ein.
Also.
Also wir wollen jetzt erstmal hier haben
Höhe, Breite.
Ja, 64, 64 Pixels.
Ähm.
Weil wir wollen ja dann Hintergrundbild
mit dem DHL Logo drin haben.
Ähm.
Dann machen wir die Background Color ist egal.
Die brauchen wir nicht.
Border 2 Pixel.
Border brauchen wir auch nicht.
Shadow Box brauchen wir eigentlich auch nicht.
Padding und so, das brauchen wir eigentlich auch alles nicht.
Vielleicht den Radius mal gucken.
So, jetzt ist durchsichtig natürlich klar.
So, Background
Image
World
äh
Slash, Image, Slash. Was haben wir denn da gehabt?
Hermes PNG, ne?
Bam, da ist es.
Ich mein, fast.
Ich mein, das Hermes Logo ist
128, 128.
Da ist es drinne.
So, das wollen wir jetzt natürlich nicht, den kompletten
Radio Button, sondern
der Radio Button braucht natürlich ne
Class, der kriegt Class DHL
und der kriegt
Class Hermes.
So, ähm.
Dann machen wir hier mal
das alles Default.
Guck mal hier,
haben wir so abgerundete Ecken haben wir sogar,
wenn wir das so machen.
Und das machen wir weg. Und dann sagen wir hier,
sagen wir hier DHL
und da sagen wir Hermes.
So.
Sehr gut.
Gut, und dann brauchen wir hier noch DHL und ich glaub das waren
JPG
...
Ja, das sieht doch jetzt eigentlich schon...
Guck mal, man kann es sogar markieren.
Das sieht doch jetzt eigentlich schon mal ganz
nice aus. So, Outline.
Machen wir
die 0, wenn das geht.
Ja.
So, und jetzt brauchen wir nämlich den Kram hier,
wo dann Checked dahinter steht.
Hier, Checked.
Ähm, hier.
Checked.
Das ist, wenn man das angeklickt hat.
Muss man da sowas dahinter machen? Ne, ne.
Einfach mal so. Checked.
Ähm, und da
sagen wir jetzt Border
Solid
2 Pixel und
Blau.
Ha! Guckt euch das mal an.
Okay, das packt ein bisschen rum,
aber
im Prinzip ist es doch ganz gut, oder?
Wenn wir jetzt vielleicht noch einen ordentlichen
Farbton dafür finden.
Ja, Solid White, dann
packt es auch nicht mehr rum.
Ah.
Ist doch eigentlich ganz nice, so.
Jetzt müssen wir nur gucken, dass wir es ein bisschen kleiner kriegen,
weil so ist das zu, zu fett.
Ähm, wir machen
und jetzt müssen wir nur gucken, dass wir das
Bild resizen können.
Wie resizet man ein Bild hier? Background.
Image.
Image.
Ne, Background. Wie resizet man ein
Bild? Clip.
Clip. Color. Position.
Position vielleicht.
Center. Ah, fast.
Wie kann man das skalieren irgendwie?
Scale. Size.
Ah, guck mal da.
64 Pixel.
64 Pixel.
Aha. POC.
Ein gescaltetes Hermos
Logo.
Und Background Size Contain.
Ah, interessant.
Das habe ich glaube ich schon mal irgendwo
gesehen. Oh, schön. Sehr schick.
Sagt doch, der Auskern-Fox ist
unser absoluter CSS-Pro hier.
Dem macht da keiner was
vor. Wir brauchen noch eine Monka
CSS.
Monka Windows haben wir schon.
Oh, das gefällt mir. Das ist schick.
Okay, die Farbe außen drum sieht noch ein bisschen hässlich aus.
Aber irgendwie.
Color Picker. Sollen wir uns mal was schönes
raus. Color Picker.
Irgendein schönes Blau.
Gut, das sieht man bei Hermos jetzt nicht richtig
gut, ne?
Aber.
Komm, wir können. Oder wir machen
aber gucken mal, wie das aussieht mit Black.
Das ist auch okay, oder?
Ja, das ist ganz schick. Das machen wir mal.
Was machst du denn beruflich?
Also arbeitest du dort auch
mit .NET? Selten.
Mach mal Ausrufe, Zeichen, Beruf.
Wir haben sogar einen eigenen Clip dafür, wo ich das
erklärt habe, was ich mache.
Schwarzer Rand mit Schatten drum herum.
Ach was, wir müssen
das jetzt nicht übertreiben. Ich meine, wir gewinnen heute
keinen Schönheitswettbewerb damit.
Geht ja einfach darum zu gucken, ob es funktioniert.
So. Also, wir können jetzt auswählen, ob
DHL Hermos. Wir können
das Ganze submitten.
Ähm. Jetzt brauchen wir noch
ein Input-Feld. Wir brauchen noch ein Input-Feld
für die eigentliche Tracking-Nummer.
Also brauchen wir
hier ein Input.
Text.
Sieht ganz schön hässlich angeordnet
aus, oder?
Dem kann man bestimmt
dem kann man bestimmt irgendwie sagen
Irgendwie sowas wie Position.
Gibt es nicht sowas wie
Vertical?
Vertical Align?
Oder irgendwie sowas sagen kann hier wie
Middle oder sowas?
Ha!
Easy.
Oh. Sieht das schon mal besser aus.
Nehmen wir mal ein Break
dazwischen. Bisschen Abstand.
Ich meine, er weiß, als letzter Schluss ist es nicht.
Das machen wir dann oben als Pop-Up, ne?
Also machen wir hier einen Button für hinzufügen.
So, jetzt haben wir hier was, das braucht als
Name.
Braucht das
Tracking-ID haben wir es glaube ich genannt.
Und dann braucht es noch einen Placeholder.
Hier Track
Tracking-ID
Ja.
Ja, ist nice.
Ist schick.
So, und jetzt möchte ich das hinzufügen
können und submitten.
Wir haben ja noch mehr.
Wir haben ja noch mehr DHL Codes
zum Tracken.
Mal gucken, ob das funktioniert.
DHL Track Trace
oder was auch immer.
Scheint es zu geben, aber gibt noch keine
Infos zu. Ist auch gut.
Oder war das
eine falsche Tracking-Nummer vielleicht?
Sowas hätten wir noch zu bieten
hier.
Ja. Okay.
So, und das da. DHL Submit.
Bäm. Funktioniert nicht, weil
mein Backend das nicht checkt.
Und zwar checkt mein Backend das nicht,
weil es JSON haben will höchstwahrscheinlich.
Genau.
Ich glaube, da kann man jetzt entweder From Body
sagen oder From Form. Eins von beiden.
Geht glaube ich.
Ich glaube, From Body ist dynamisch, je nachdem was es
für einen Content Type hat.
Schauen wir mal.
Sehen wir ja klar, ob es funktioniert.
Stop. Unsupported Media Type.
Ja, ja.
From Form.
Funktioniert.
Wir haben was angelegt.
Allerdings ist
das ganz schön Fail, was wir angelegt haben.
Wir haben nämlich vergessen
die Zeit zu setzen.
Da sehen wir schon das nächste.
Wir brauchen unbedingt noch einen Delete Knopf.
Wir brauchen unbedingt einen Delete Knopf.
Weil sonst ist der Mist
permanent drinnen.
Also, wir brauchen noch einen Delete Knopf.
Delete sollte ja schon
standardmäßig implementiert sein in dem Controller.
Delete.
Wir brauchen noch einen Delete Knopf.
Ne, den Delete Knopf, den machen wir hier vorne daneben.
Machen wir neben das
hier rein, neben das Shipment
machen wir den.
Delete Knopf.
Einen Button.
Funktioniert.
Natürlich ist er nicht gestylt, aber das ist schon ganz okay.
Wir haben die Material Design Icons
glaube ich schon
eingebunden hier drinnen.
Ja.
Das heißt, die könnten wir verwenden.
Class.
Materialize.
Oh, fuck.
Ich weiß gar nicht, wie es Leute gibt,
die sich das alles aus dem Kopf merken können.
Icons.
Light oder so gab es da.
Wie ging das nochmal?
Ja.
Da ist bestimmt irgendein Beispiel
zu drinnen.
Ach ne, Punkt Material Icons brauchen wir.
Worum war das?
So rum war das.
Ah.
So, und jetzt brauchen wir
ein Icon, was es gibt.
Oder auch nicht.
Warte mal, können wir uns
das nicht hier abgucken, wie ich das hier gemacht habe?
Ja, da.
Material Icons.
Dann habe ich das genommen.
Na ja, geht doch.
Man muss einfach nur
ein Icon nehmen, was es auch gibt.
Kennst du ein Programm, mit dem man unter Linux
einen 6 in 4 Tunnel zwischen zwei Server herstellen kann?
Nein, aus dem Kopf nicht.
Aus dem Kopf nicht.
Okay, gibt es vielleicht Delete?
Direkt.
Ah ja, der Mülleimer.
Genau. Der Mülleimer.
Jetzt können wir uns
das CSS vom Auskennfuchs abgucken,
was wir das letzte Mal...
Fuck.
Meine Rider Evaluation
ist abgelaufen.
Gucken wir jetzt einfach mal rein, wie wir das das letzte Mal
gemacht haben.
Wie haben wir da unser...
Ja.
Click Button Delete.
Wie haben wir das?
Wie haben wir das?
Button Delete.
So haben wir das gemacht.
Das haben wir irgendwie
Class Message, Class User.
Ah gut, das machen wir jetzt vielleicht ein bisschen einfacher.
Was benutzt du? Das ist ein GNOME Terminal.
Oh, diesen Button, den machen wir jetzt erstmal weg.
Button...
Wir machen dann
auch noch ein extra CSS-File, weil
das ist ganz schön geschwubbelt
hier. Das JavaScript-Zeug, HTML,
CSS, alles in einem
File drin.
Background...
Transparent...
Oh.
Border...
Einmal auch Transparent.
Transparent machen.
Ja, ist doch schon...
Ist doch schon mal ganz schick.
Kann man jetzt einfach so was sagen hier wie
Float Right? Geht das?
Nee.
Oder?
Und dann...
Wie kriege ich denn das Ding jetzt in die Mitte?
Wie kriege ich das Ding jetzt in die Mitte
vom Text?
Wahrscheinlich muss ich da
ein div drinnen machen.
Oder? So?
Näh.
Vertical VF?
Float Left of the Tracking Number?
Geht das nicht einfach so?
Center?
Nee.
Geht ja mit Vertical allein nicht.
Wie kriege ich den Button da jetzt rechts daneben?
Display Flex!
Ah, ja, ja, ja.
Allerdings nicht auf dem Button, sondern auf dem Container
oben drüber.
Ähm...
Class...
Class...
ID.
Ah, ja, da kommen wir der Sache doch schon näher.
Da kommen wir der Sache doch schon näher.
Ah, so ist das doch sehr, sehr schick.
Da machen wir noch irgendwie
ein Padding rein von 5 Pixels.
Nee, brauchen wir kein Padding.
Eine Margin von 5 Pixels brauchen wir.
Nee, was?
Doch, nee, wir brauchen...
Brauchen wir ein Padding? Nee, Moment.
Ach nee, der Button. Der Button braucht das.
Der Button.
So, und der Button
kriegt das erst mal weg und dann kriegt er hier einen...
So, so, eigentlich ist das doch okay.
Kann ich jetzt...
Kann ich irgendwie sagen, ich will
den Löschen-Button
immer rechts, immer rechts...
Also kann ich irgendwie sowas wie...
Du kannst noch justify content...
Komm jetzt, komm jetzt, komm aber hier die...
Die übelst krassen CSS
Bros an.
Tatsache. Ich weiß zwar nicht so genau,
was ich da jetzt gemacht habe, aber ich finde das sehr schick.
Das ist
online auf GitHub dann, ja.
Ich finde das sehr schick, das gefällt mir jetzt echt gut.
So, und da machen wir jetzt nur noch
den Button.
Den Button machen wir jetzt nicht background-transparent,
sondern... Achso.
Äh, nee.
Font.
Nee, nicht. Color.
Color Red.
So. Oder nicht Red.
Aber nicht Red.
Wo haben wir unseren
Color Tracker eben gehabt?
Color... Nicht Color Tracker.
Color Picker.
Guide to Flexbox.
Das ist mein Problem ist, ich mache nicht so viel
Webseiten-Zeug. Ich vergesse das immer
zwischen den Sachen, wo ich es mache. Wenn ich es dann wieder
sehe, stelle ich fest, ah, das hast du
schon mal irgendwo gesehen. Ich habe mir auch schon
Guides angeguckt, Guide to Flexbox,
wie du da geschrieben hast, oder ich habe mir...
Es gab auch ein richtig gutes Video zu irgendwie
so Ultimate Guide zu Flexbox
und sowas. Aber ich mache
das einfach nicht jeden Tag. Und
wenn man das nicht jeden Tag oder öfters mal macht,
dann vergisst man das immer wieder dazwischen.
Machen wir mal sowas hier.
So.
Ja.
Das sieht ein bisschen aus wie mein
PPGA-Board, oder?
Mit dem Mülleimer und dem...
Sieht recht ähnlich aus, was wir da
gebastelt haben. So.
Okay. Sehr schön.
Ähm. Dass der hier
aber kurz blau
drumrum wird, kann ich mit leben,
wenn man ihn anklickt. So. Und jetzt müssen wir
das Ganze löschen. Das heißt...
Was für Musik
da im Background läuft, da läuft gerade
Beautiful Chillstep
Collection
Juni 2017.
Wir gucken mal, ob es da noch mehr von gibt.
Beautiful Chillstep Collection
Gibt es denn auch 2018?
Ah, ja, ja.
Hintergrund.
Kann man auch mit leben.
So. Jetzt müssen wir dem noch beibringen, dass wenn man da draufklickt,
dass er den Kram löscht.
Ähm. Das heißt,
ich brauche ein Event an diesem Button.
Wo ist der Button?
Da ist der Button.
Äh. Klick.
Und wir hier
irgendwie delete. Delete.
Und zwar delete
Shipment.
So. Da sagt jetzt hier, oh, hier delete Shipment.
Ups.
Jetzt war es Doppelpunkt?
Es war schon Add, ne?
Ich glaube, es war Doppelpunkt.
Ähm. Zumindest die Methode gibt es ja auch gar nicht.
Methods.
Delete.
Shipment.
Sehen wir gleich,
ob das passt.
Äh.
Doppelpunktklick.
Anscheinend war es Doppelpunktklick.
Log.
Ah, ja, ja.
Schauen wir mal.
Äh.
Oder auch nicht.
Ich meine, es war ein Add.
Das ist einfach das, weil ich es nicht so oft mache.
Ich vergesse die Details immer.
Mir ist prinzipiell
eigentlich die ganze Zeit klar, was ich machen will.
Aber, okay.
Ein Klick.
Eventuell ein Klick.
Ja, das brauchen wir nicht. Das ist die alte Schreibweise.
Das habe ich mir gedacht. Das geht anders.
Doch, dann war es doch Doppelpunkt.
Doppelpunkt on Click.
Doppelpunkt on Click war das.
Doppelpunktklick.
Kann das sein, dass er nicht mehr klickt?
Das ging doch so. Wir können einfach abgucken,
wie wir es hier gemacht haben.
Addklick. Okay, es ist doch Add.
Nicht Doppelpunkt. Es war Add.
Addklick.
Naja, dann ist es doch ein Add.
Und was hat er jetzt? Vielleicht darf ich es nicht delete nennen.
Sondern irgendwie delete.
Ne, das ist die
die Kurzschreibweise. Das ist okay.
Ah, jetzt geht es.
Ich darf es nicht delete nennen.
Delete ist anscheinend
reserved für irgendwas.
Okay, also.
Fetch.
Async brauchen wir das Ganze.
Fetch. So.
Ähm.
ID brauchen wir da jetzt.
Shipment.
ID.
Shipments.
Dann die ID.
Ja, wahrscheinlich
Keyword delete. Ja, das ist irgendwie so.
Mit der Zeit
hat man manche Sachen einfach im Gefühl,
dass wenn sie nicht gehen und es sieht alles richtig aus,
dass es dann vorher mal was anderes sein könnte.
Okay, äh.
Gucken wir mal, ob das Deleten funktioniert.
Was er da macht.
Ähm.
So, jetzt müssen wir ihm noch
sagen, dass wir
method
wollen wir
delete.
So, method.
Hä, warte mal.
Geht doch so.
Muss man vielleicht so schreiben.
Okay, dann schauen wir mal, ob er das jetzt macht.
Äh, network.
Okay.
Ah, der ist weg. Nice.
Okay, funktioniert. Pock.
Äh, welche Nummer war das denn jetzt?
Die da, ne?
Die da.
Ne, ich muss kein await hinschreiben. Das ist einfach so
fire and forget.
Alternativ? Ne, haha.
Ich weiß, wir machen das anders.
Wir, ähm.
Wir könnten redirecten
noch. Es gibt ja sowas wie
follow oder redirect.
Ne.
Äh.
Äh.
Redirect. True.
Redirect.
Kann man, dann, dann leitet er
einen nämlich um, wenn einen der Server umleitet.
Das wollen wir übrigens schon mal nicht
beim adden, dass der uns auf diese Seite schmeißt.
Worum geht's jetzt denn da?
Das ist doch awaiten, aber es ergibt
doch eigentlich keinen Sinn. Warum soll ich das awaiten müssen?
Soll es sein, dass das redirect
das irgendwie kaputt macht?
Okay, das redirect macht das kaputt.
Ich weiß nicht
so genau warum. Aber ich meine,
wir können, wenn wir jetzt awaiten, können wir einfach sagen,
hier, wenn.
If result, result
code. Ne, äh, was kriegen wir da
zurück? Statuscode, okay.
Status.
Weiß ich was, gibt's da 200.
Übrigens, wir machen
vorher nochmal was anderes.
Ähm, wenn ich was adde,
wenn ich was adde,
will ich redirecten
auf die Hauptseite wieder, weil dieses komische
Debug-Ding brauche ich an der Stelle gar nicht.
Machen wir hier nochmal Stop.
Wenn man
einen Post schickt.
Wenn man einen Post schickt,
will ich
redirect
auf
dahin.
So.
Damit.
Ah, defaultenmäßig nimmt er DHL, das ist auch gut.
Jetzt hat
er mich redirectet, habt ihr gesehen? Zack.
Bam.
Redirect. Ach, das muss ich auch noch
checken, dass man keine Sachen doppelt
hinzufügen kann.
So.
Jetzt will ich nur noch, dass er mich
redirectet, also wenn,
jetzt habe ich natürlich nicht geguckt, ich noob.
Was kriege ich für eine Antwort beim löschen?
200, okay. Also wenn,
wenn Status
200 ist, dann
redirecten wir.
Mal gucken, wie
das offiziell geht. Fetch, redirect.
Response redirected.
Fetch.
Hier, Fetch.
Blablabla. Function response.
If response.
Ah, okay, da müssen wir das gar nicht machen.
Können wir einfach hier so gucken. Response
result redirected.
If redirected.
Done.
Detecting redirects.
Disallow redirects.
Kann ich jetzt einfach.
Ach,
jetzt weiß ich woher,
das allow redirect
bezieht sich überhaupt nicht drauf,
dass der
Browser redirected wird,
sondern nur, dass der Fetch
einem
redirect folgen würde.
Also sprich, ich mache einen Fetch,
ich mache irgendwie einen Get oder so,
auf eine Uhr und die redirectet
mich, dass er dann quasi die Uhr nochmal
fetcht, auf die ich redirectet habe.
Ach, das.
Ja, da muss ich, da muss ich von Hand,
von Hand,
das von Hand machen.
Vielleicht gibt es dann aber auch einen Abweg.
Ja.
Reload. Ja, wir können einen Reload machen,
stimmt, wir können wirklich einfach einen Reload machen.
Da hast du, da hast du recht.
Ne, wie geht das, Window, Reload, Reload?
Ne, ach, tut schon.
Oder ist es wirklich Location?
Ja, Location, Reload,
genau. Weil wir sind ja schon auf der Seite.
Okay, gucken wir mal.
Submit.
Ah, wir redirecten
ja auch nicht.
Wir redirecten ja auch nicht.
Ähm, da müssen wir das hier nochmal einstellen,
dass wir auch hier redirecten beim
löschen. Ach, wir returnen
das, was wir gelöscht haben.
Gut, das ist
redirecten auch mal dahin.
Wobei, ganz ehrlich,
brauchen wir nicht, brauchen wir nicht.
Ähm,
wir sagen ihm einfach,
wenn, wir scheißen auf redirect,
wir machen das wirklich so, wie wir es ursprünglich,
äh, weil das, was
was, ähm,
STBA42 geschrieben hat,
das wollte ich ja eben schon machen, mit, mit
200. Hab ich mir gedacht,
okay, wenn da auch schon redirect drinne steht, können wir das
checken, aber ist ja egal. Wir können einfach,
können einfach so gucken. Und wenn erfolgreich,
dann weg.
Damn. Zack.
So, und jetzt machen wir nochmal eine Sache,
die wahrscheinlich, äh,
sehr hässlich
empfunden wird. Wir lassen
den mal alle,
alle Sekunde
lassen wir den mal die Sachen neu laden.
Dass ich mitkriege, wenn was
ist. Oh.
Ach hier, Async.
Das lag zwar beim ersten Mal laden ein bisschen,
aber es ist immer aktuell.
Wenn wir das dann fertig gebaut haben, machen wir das
noch ein bisschen schöner mit dem, mit dem, mit dem
permanente Verbindung zum Server und
gucken, wenn, also, wir lassen uns dann vom Server
Bescheid sagen, wenn sich was aktualisiert hat und
fetchen das nicht jede Sekunde.
Wäre nicht gleich, gleich, gleich besser, doch
wir sind, es ist ja JavaScript, stimmt, wir sind
JavaScript. Boah ey, ich muss doch mal
Async lassen, weil einmal,
einmal muss ich den Kram direkt beim
Start ausführen.
Okay, nice, das funktioniert ganz gut.
So, pending, blablabla,
da kann ich löschen, sehr schön.
Das gefällt mir schon mal gut.
Das reicht doch erstmal,
um weiterzumachen.
Jetzt versuchen wir mal was abzuf- achso,
ha, ne, eins müssen wir noch
machen, nein, das ist die falsche App.
Wir müssen hier im Controller
noch setzen,
beim hinzufügen,
die Uhrzeit von dem Ding.
Äh,
created at
datetime now.
So ist gut.
Passt.
Und das da gefällt mir auch noch nicht.
Die Zeit müssen wir auch mal parsen wieder.
Das können wir hier machen.
So, ähm,
ja, geh weg.
Können wir hier machen, da können wir hier sagen
created at
new date, da hab ich mir gemerkt,
dass das, das JavaScript
die, ähm,
.NET Timestamp ganz gut parsen
kann und umgedreht .NET kann die
Java Timestamps ganz gut parsen, ohne dass man
einen großen Akt machen muss.
Und jetzt können wir sowas machen wie to local
string.
Oder auch nicht. Lokale string.
Ja, sieht doch schon gleich viel schöner aus.
Ja, Air Worker, da hast du recht.
Aber die simplere Variante
ist, ich lade einfach neu.
So, okay, das passt. Also ich kann jetzt
neue Sachen hinzufügen und, ähm,
er fügt einmal beim starten zum testen
was hinzu.
Und jetzt würde ich sagen,
prüfen wir im Hintergrund,
ob es
Updates von DHL
gibt.
Also, das wird jetzt ein bisschen komplizierter.
Hauen wir mal aus.
Äh, ich mach das nicht
mit Vue, weil das eine super tolle
Single Page Application sein soll, sondern weil
ich es einfach viel einfacher finde, als
mit irgendwas anderem.
Ich werd's dann aber auch so machen in Zukunft,
also ich werd das Ding nicht jede Sekunde neu
laden lassen. Ich mach dann irgendwie ne,
irgendeine Websocket Verbindung oder sowas.
Der Bescheid sagt, wenn sich auf dem Server
was geändert hat.
Und er dann immer seine lokalen,
lokalen Sachen mit aktualisiert.
So, ähm,
okay, also ich brauche einen neuen
Ordner.
Nennen wir Services.
Neue Klasse brauchen wir.
Neue Klasse. Gibt's da für eine Abkürzung so eine Klasse?
So, den nennen wir jetzt mal Tracker.
In Anbetracht
der Tatsache, dass ich
immer schlecht bin in der Namensfindung für sowas.
Background Tracker
heißt der jetzt.
So, und der
muss ein Interface implementieren, weil
das ASP.NET Core so will, nämlich
I Hosted Service.
So.
Und wenn ich das habe,
Implement Interface,
Return.
Wir faken einfach, dass wir fertig sind
jetzt mal.
Und wenn ich das habe, startet er das nämlich im Hintergrund.
Und, ähm,
also beim Start mit
der Anwendung automatisch im Hintergrund
und hat mit der
restlichen Sache nichts zu tun.
Ähm,
Services
Add, ne wie ging das?
Hosted
Hosted Service
Background
Background
Tracker habe ich das genannt.
Okay.
So, und jetzt startet er den Kram im Hintergrund
und da drinnen können wir jetzt die Abfragen
machen
zu unserem DHL
Zeug.
Und den DHL Tracker, den
haben wir ja hier gehabt, den haben wir ja schon gemacht
vor ein paar Tagen.
Den hatten wir hier irgendwo. DHL Test.
So, da ist
unser DHL Gedöns.
So, wir ignorieren jetzt mal was wir hier
gemacht haben und kopieren nur mal diesen
diese DHL Tracker Klasse darüber.
Machen wir das
auch gleich wieder zu.
DHL Tracker
Lass es hier mal inline in dem Pfeil stehen,
weil das ist ja nicht so lang.
So, DHL Client, äh, HTTP Client
brauchen wir.
Task Shipment
Ja, gucken wir mal.
JObjectPath
Ja gut, das können wir jetzt hier nicht mehr verwenden.
Key leaked.
Ja, so war, so war
toller AP Key leaked.
Den haben wir On-Stream live erstellt.
Und ich hab auch,
es ist auch problematisch, ne.
Ich hab auch meine IP permanent hier
leaked. Ups.
IP leaked.
Wir wollen
übrigens gar nicht ein Shipment, sondern ein
Shipment Progress zurückgeben.
Ähm
Wie verwendet man den neuen
ASP.NET Core Parser?
So, wie geht das?
Hab ich noch nie verwendet.
Ähm
System Text Jason
Serialization. Mal gucken wie
der funktioniert. Jason
Parser?
Ne, Jason.
Jason Reader?
Jason Reader?
Warum, warum laggt mein Intellisense?
Zu viel, zu viel
Machine Learning im Hintergrund mittlerweile.
Ok, ich hab keine Ahnung
wie man diesen neuen ASP.NET Core 3
Jason Dings
3 Pars Jason
Ja,
zeig mal her. Zeig her.
Wie funktioniert's?
Wie funktioniert's?
Try new System Text Jason
APs
Ja
Do you care about Jason?
In this case you should watch today's
That shirt.
Sehr, sehr leiser Nick.
Ich will eigentlich einfach nur
auf ein paar Keys zugreifen.
Using
Jason Document Pars
Ja, das will ich haben.
Jason Document
Pars
Result
Das will ich haben.
Pars Jason, ja.
So, mal gucken wie's jetzt weitergeht.
Pars
So, Jason.
Wie kann ich jetzt, wie kann ich jetzt da weiter
drauf zugreifen? Jason Element
In Root Element
What?
Get Property
Dann hätte man da auch mal den Index
da überschreiben können, oder?
Root Element
Kann ich jetzt hier sowas machen?
Ah, was meint ihr?
Int?
Anscheinend muss man das mit Get Property machen.
Get
Object
Okay, so vielleicht?
Links hier, Shipments
Null
Get. Oh, das ist aber net schön.
Da gefällt
mir das andere aber besser.
Das sieht kacke aus.
Guck dich das mal an.
Root Face
Ugly as fuck.
Was ist das?
Ugly as fuck.
New Shipment Progress
Pars das Jason noch in ne Klasse?
Naja, kann ich
schon machen, aber ich dachte
mir halt, es ist vielleicht
einfacher
einfach mir zwei Keys rauszuholen
anstatt da ne Klasse für zu basteln.
Aber das sieht ziemlich
eklig aus.
Aber mit den Klassen ist doch, da brauch ich ne Klasse
ne Unterklasse wieder.
Das muss jetzt so erstmal hinhauen.
So, Message
Get Property
Ups
Description
Ach ne
To String
Ist gut.
So, dann brauchen wir noch
Updated
Add
Kannst du in ne Map
reinparsen?
Das ist ne gute Frage.
Ich hab noch ne andere Idee, vielleicht kann ich die in
Dynamic Object
reinparsen.
Das probieren wir tatsächlich mal aus.
Das probieren wir mal aus hier in
in dem
unabhängigen Projekt davon.
Also das müssen wir jetzt nicht in unserer
Web-Anwendung ausprobieren.
Was ist mit meinem Headset los?
Genau, probieren wir das mal aus
hiermit.
Und zwar System Text
Jason brauchen wir
Okay,
anscheinend nicht. Wahrscheinlich weil sie Konsolen
Verwendung ist, kann ich sie nicht drin verwenden.
Probieren wir gleich mal aus, ob man das in
ne Map parsen kann.
So, dann haben wir hier
Status
Alter, mein Intellisense
leckt übelst rum.
Was macht
Microsoft denn da wieder? Guckt euch das mal an.
Äh
Status
Äh
Dann
Das kannst du ja vergessen.
Ich glaub ich muss Visual Studio neu starten.
Typische Windows-Kram.
Windows-Krankheit.
Maschinen-Learning.
Genau.
Zu viel Maschinen-Learning im Hintergrund.
Du verstehst nur Bahnhof, wenn es ums
Programmieren geht.
Ah ja.
Das kann ich nachvollziehen.
Auf jeden Fall.
Ich verstehe auch oftmals nur Bahnhof.
Obwohl ich das schon seit 15 Jahren mache.
Oder länger.
So ungefähr seit .NET
.NET 2 damals rausgekommen ist. .NET 4.0.
.NET Framework 2.
2014 oder so.
2002.
Ein bisschen davor habe ich ja auch schon angefangen.
Also ich programmier schon eine Weile.
Und ich verstehe auch vieles nicht.
Message
Contains delivery
Vehicle. Dann ist es
in Delivery.
Genau.
Status
Delivery. Zack.
Und
der letzte, der Default ist, ist in Transit.
Was anderes kann es gar nicht sein.
In Transit. Okay.
Mal gucken, ob dieses
DHL-Zeug jetzt im Hintergrund funktioniert.
Da bin ich ja mal
echt gespannt. Das können wir wirklich
vereinfachen.
Da bin ich ja mal gespannt, ob
das mit diesem neuen JSON-Parser richtig funktioniert.
JSON-Parser.
Probieren wir das
einfach mal initial aus.
Ich finde es auch nicht
schlecht. Ich bin...
JSON.net kann halt alles irgendwie.
Hat aber dafür halt 100.000
Möglichkeiten,
irgendwas zu machen.
Ich finde es prinzipiell gut, dass
es einen neuen eingebauten
JSON-Parser gibt.
Okay. Wir machen jetzt unser übliches
Debug mit... Wobei, komm.
Wir setzen
mal einen Breakpoint.
Ich bin ja normalerweise
so der... Ihr wisst ja, der Command-Line-Debugger.
Aber...
Wir setzen mal einen Breakpoint.
New DHL-Tracker.
Ich muss nämlich einfach mal kurz
gucken, ob da Kram funktioniert.
Nachdem wir es jetzt angepasst
haben.
Receive-Info. Jetzt brauchen wir hier
die Tracking-Nummer. Die machen wir da
hardcoded noch mal rein jetzt zum testen.
So.
Zack.
Result.
So. Und jetzt
gucken wir mal, was in R drin steht, nachdem wir
gestartet haben.
Funktioniert.
Shipment has been successfully delivered.
Status is done. Updated at
am 18.07.1548.
Okay. Also wir haben es zumindest richtig angepasst,
den ganzen Kram.
Dann können wir jetzt mal probieren, ob man das vielleicht
schöner parsen kann.
Ähm...
Wir parsen es jetzt einfach noch
mal. Temp.
Und gucken mal, ob wir
das vielleicht dynamic...
Dürfen wir das dynamic machen? Geht das?
Darf man das vielleicht dynamic machen?
Oh.
Die DHL-API mag nicht.
Okay.
Dann sammeln wir das jetzt. Das hatten wir in einem der letzten
Streams. Das ist die Stelle, wo wir jetzt unseren
Try-Catch-Block drum herum machen.
Und zwar relativ easy mode.
Bam. Wir loggen
den Krams noch.
Die DHL-API ist manchmal nicht so geschwind.
So. Was steht denn in Temp drin?
Dynamic Documents.
Shipments.
Na gut. Aber selbst wenn das dynamic ist,
kann ich da jetzt...
Kann ich da jetzt so drauf
zugreifen?
Temp. Ship...
Ne. Ähm...
Was brauche ich?
Temp. Shipments.
Geht das so?
Darf man das jetzt so machen? Wahrscheinlich nicht.
Also die
DHL-API mag nicht
oft angefragt werden.
Das ist nicht so ihrs irgendwie.
DHL-API darf man
bloß alle paar Minuten mal anfragen,
wie es aussieht. Das ist natürlich kacke zum ausprobieren jetzt.
Das suckt.
Massiv.
Wenn man da nur alle Furzklang mal
anfragen darf. Ach ne.
Hier. JSON does not contain definition.
Ok. Ne. Das funktioniert so nicht,
wie ich mir das gedacht habe.
Pass. Was haben wir denn hier für Varianten?
Pass. Pass Value.
Was kann man damit machen?
Try Pass Value.
Root Element.
Also ich glaube viele andere Möglichkeiten
haben wir da nicht.
Können wir das irgendwie in den
Dictionary
in den Dictionary
irgendwie parsen oder so?
In den Dictionary Strings
oder so in Dictionaries
Ne. Ach keine Ahnung.
Ach das fällt
mir jetzt nichts irgendwie gescheites ein zu.
Dann lassen wir es jetzt erstmal so.
Ich mein es funktioniert ja.
Wir parsen uns jetzt hier den Kram aus bei der Telekom raus.
Gut.
Dann können wir das jetzt machen.
Also ich würde sagen wir führen die Sache mal im Hintergrund aus.
Alle.
Alle.
Ne. Wir führen es mal alle 10 Sekunden aus.
Was bedeutet eigentlich
das Add von dem String?
Ist in dem Fall total überflüssig.
Das bedeutet, dass du manche Sachen
nicht escapen musst.
Ah. Zum Beispiel hier Backslash und so.
Ist ja normalerweise Escape.
Das schmeißt das alles raus.
Ok. Wie machen wir das jetzt?
Wir machen das mit einem Timer.
Wir machen mal einen Timer alle 10 Sekunden.
Timer.
New Timer.
Callback.
Machen wir mal eine Methode hierfür.
Dass das nicht so
gequetscht ist alles.
Private, Void. Nehmen wir einfach mal Tick.
Tick.
Ähm.
Object State 0. Haben wir nichts
zum Austauschen.
Ähm.
New Time.
Das ist dann ab wann es anfängt.
Timespan.
So was wie Timespan. Ne 0 ist es.
Timespan 0.
Timespan.
From seconds.
10.
So das ist jetzt ein Timer der alle 10 Sekunden tickt.
Und Tick aufruft.
Oder aufrufen sollte.
Object State war das
glaube ich.
Ja. Sehr schön.
So der Timer tickt jetzt alle 10 Sekunden.
Äh.
Zwischel Studio gebetet mich.
Guckt euch das mal an.
Bam. Gebetet.
Drücken wir halt Alt Punkt.
Gebetet.
Bam.
Ja wann geht es auf Mixer. Alter Mixer.
Hört mal auf.
Gut.
So und das kommt jetzt hier unten
in Tick rein.
Try DHL Receive Info.
Ok. Also.
Was wir jetzt machen müssen.
Ich glaube jetzt wird es ein bisschen komplizierter.
Wir müssen jetzt gucken.
Wir brauchen jetzt erstmal eine Verbindung zur Datenbank.
Hast du noch die
Preview installiert. Ja ja.
Das ist die aktuellste. Die aktuellste Preview.
Und wahrscheinlich wird es deswegen auch rumbacken.
Das ist .NET Core Preview 7.
Zwischel Studio Preview 16.3.
Also.
Wir brauchen jetzt hier.
Ah die Musik.
Wir brauchen jetzt hier eine.
Eine.
Wie hieß das Ding.
Scope.
I Scope Factory oder sowas.
Die Sache ist die.
Wir haben hier jetzt einen Hintergrund Thread im Endeffekt laufen.
Der alle 10 Sekunden nachgucken soll.
Ob sich an unserem Status von unseren
Paketen was geändert hat.
Die Sache ist jetzt nur die.
Um auf die Datenbank zuzugreifen.
Braucht man eine aktive Session.
Also quasi wie wenn man einen HTTP Request schickt.
Nachdem wir ja keinen HTTP Request schicken.
Intern in unserem Programm.
Was auch ziemlich beknackt wäre.
Müssten wir ihm sagen.
Er soll quasi so tun als ob.
Und dazu brauchen wir eine.
Wie hieß das.
I Scope.
I Service Provider.
I Factory.
Ach du.
Moment ich muss nachgucken wie der Kram heißt.
I Factory Scope.
Irgendwie so.
Blade Scope Factory.
I Service Scope Factory heißt der Kram.
Das ist so typisch Java Style.
So.
Wie kommst du eigentlich auf deine Projekte.
Indem ich selbst irgendwas brauche.
Visual Studio.
Hör mal auf mich zu Cheat Baten die ganze Zeit.
Immer wenn ich das anklicke.
Geht es weg.
Cheat 105.
Warum Visual Studio will das du dich registrierst.
Ehrlich gesagt keine Ahnung.
Wahrscheinlich denkt sich Microsoft.
Wir werden es schon kostenlos zur Verfügung stellen.
Dann können wir auch ein paar Daten sammeln.
Vermute ich mal.
Wir müssen eine Verbindung zur Datenbank aufbauen.
Verbindung zur Datenbank aufbauen.
Zu viel gesagt.
Wir müssen uns den Datenbank Kontext holen.
Dass wir aus der Datenbank lesen können.
Was unsere aktuellen Pakete sind.
Unsere aktuellen Pakete sind.
Wo wir noch keinen Status.
Keinen aktuellen Status von heute zu haben.
Keinen aktuellen Status von heute zu haben.
So.
Using.
Das heißt wir müssen jetzt diese Scope.
Scope Factory.
Scope Factory.
Nehmen und sagen.
Create Scope.
Scope.
Wir sind noch auf.
Ach wir können die neue Sachen.
Das ist übrigens auch ein neues C Sharp Feature.
Man kann jetzt Using wahr machen.
Man braucht jetzt kein extra.
Kein extra Einrückungsscope.
Mehr machen.
Und auch kein.
Context.
Context.
Service Point.
Das ist halt ein bisschen mühselig.
Das ganze Kram hier.
Ähm.
AppDB.
Context.
So.
Gut.
Jetzt müssen wir den Kram noch importieren.
Und jetzt haben wir eine Verbindung zur Datenbank.
Ja geht.
Jetzt können wir nämlich unsere Shipments.
Aufrufen.
Und zwar suchen wir jetzt alle Shipments.
Die.
Für History.
Nichts.
Nichts drinnen stehen haben.
SirEddyTemple.
Twitch Prime.
POC.
Warum nicht einfach.
Dankeschön für den Prime Sub.
Warum nicht einfach den Context über Dependency Injection importieren.
Das geht nicht.
Weil der.
Background Tracker.
Also dieser Hosted Service.
Ist als Singleton registriert.
Und meine.
Mein DB Context.
Ist als Scoped registriert.
Es gibt zwei Varianten was man machen kann.
Man könnte den DB Context.
Auch als Single.
Registrieren.
Was aber.
Keine schöne Lösung ist.
Oder man kann wahrscheinlich auch.
Den hier als Scoped registrieren.
Gibt es Varianten das zu machen.
Oder.
Die schönere Variante auf jeden Fall.
Ist einfach hier drinnen.
Wenn man darauf zugreifen will.
Explizit einen Scope erzeugen.
Dann ist das alles schön aufgeräumt immer.
Und die Sachen leben nicht länger als sie leben müssen.
Shipments.
Can anyone here help me with a VPN config problem?
Which VPN are you using?
Which VPN are you using?
Machen wir ja wieder Max PC Support.
Machen wir ja wieder Max PC Support.
Shipments.
Where history count gleich 0.
Das heißt die die leer sind.
So dann haben wir jetzt eine Schleife.
Shipments.
Shipments.
Und jetzt müsste man gleich im Web Interface sehen.
Dass er sich Informationen von DHL zu der Sendung abruft.
Dass er sich Informationen von DHL zu der Sendung abruft.
Dass er sich Informationen von DHL zu der Sendung abruft.
Wenn alles funktioniert.
Okay also.
Dann sagen wir jetzt hier.
New DHL Tracker.
New DHL Tracker.
Shipment.
Tracking ID.
Ach Quatsch.
Noch nicht hier.
Progress.
Progress.
Tracking ID.
Von dem DHL Tracker.
Hier Receive Info.
Das müssen wir nochmal anders benennen.
Info hier ist jetzt der aktuelle Progress von der Sendung drinne.
Info hier ist jetzt der aktuelle Progress von der Sendung drinne.
Und jetzt können wir sagen.
Shipment.
History at den Progress.
History at den Progress.
So.
Und dann.
Safen wir das ganze.
Und dann sollte im Web Interface beim nächsten Refresh.
Und dann sollte im Web Interface beim nächsten Refresh.
Muss man auch warten an der Stelle.
Muss man auch warten an der Stelle.
Oder wir machen es Async.
Ne wir können es nicht Async machen.
Das ist auch ein Fallstrick.
Wenn man hier nen Scope anlegt.
Dann kann ich kein Async Code verwenden.
Dann kann ich kein Async Code verwenden.
Weil im Async reurnt der und Scope ist weg.
Das funktioniert an der Stelle.
Wahrscheinlich nicht.
Müssten wir mal ausprobieren.
Hallo Lai Bumster.
Ich habe dich übrigens letztens fällt mir gerade auf.
Jetzt wo ich deinen Namen sehe.
ich ja letztens aus Versehen ein paar mal falsch ausgesprochen. Jetzt habe ich gerade
extra darauf geachtet, dass ich auch das T dabei ausspreche. So, jetzt haben wir hier
den Grafisredner, Save Changes. Also, jetzt müsste das eigentlich funktionieren. Der
müsste jetzt alle 10 Sekunden im Hintergrund, wir machen hier mal wieder Right Line Debugging,
der müsste jetzt im Hintergrund alle 10 Sekunden den Status abfragen und hinzufügen. Sofern
es noch keinen Status gibt. Das ist jetzt erstmal ganz gut. In Zukunft wird das so natürlich
nicht funktionieren, weil ich will ja mehr als einen Status speichern. Aber das probieren
wir mal. Gucken wir mal, ob das funktioniert. Ich habe so meine Bedenken, dass ich irgendwas
vergessen habe. Ja, Pending. Wow. Okay, irgendwas habe ich vergessen.
Okay, Moment, was? Warte mal. Lief das noch im Hintergrund? Kann das sein, dass das noch
im Hintergrund lief? No such table ship? Was? Warte mal, was? Ach, ich weiß, woran das
liegt. Der startet den Service, der startet den, ah, das ist natürlich doof. Der startet
den Service, bevor, bevor die Datenbank angelegt ist. Der startet den Service, bevor die Datenbank
angelegt ist.
Das ist natürlich doof. Dann warten wir hier einfach, wir warten hier einfach, wir warten
hier einfach mal 2 Sekunden. Das kann man schöner lösen. Das ist nicht, ja, ja, jetzt
geht das nämlich auch. Pending, steht immer noch auf Pending. Sollte eigentlich nicht
mehr auf Pending stehen. Aber das Abrufen funktioniert von Infos bei der Telekom. Also
von der Idee her sollte das eigentlich funktionieren.
Klappen. Warum sage ich eigentlich Telekom? Von DHL. Ne, hier. Ich habe vorhin schon ein
paar Mal Telekom gesagt, ne? Vielleicht weiß ich auch einfach nur schon was, was ihr noch
nicht wisst. Ich muss erst mal gucken. DHL-Tracker. Also, Status Pending. Warum? Safe ich das
nicht richtig, oder was? Status Pending. But why? Warum? Warum? Warum? Warum? Warum? Warum?
Was habe ich vergessen? Was habe ich vergessen? Ah! Vielleicht soll ich, ich habe hier den
Try-Catch-Block drum gemacht. Das ist vielleicht gar nicht so clever an der Stelle. Vielleicht
mache ich, ich mache den Try-Catch-Block da drum, wo ein Fehler auftreten kann. Nämlich
hier. Aber so ganz sicher bin ich mir immer noch nicht, warum der das, warum der das nicht
macht.
Gehen wir mal in den Progressor.
Progress aus. Message. Wobei, wir gucken mal in die Datenbank nicht, dass er das macht
und mein Webinterface einfach nur Mist anzeigt. Mein Webinterface zeigt Mist an. Ach! Ich weiß,
woran das liegt. Ach! Okay. Ich kann euch sagen, woran das liegt. Und zwar, das ist,
das passiert mir laufend. Das passiert mir laufend, wenn ich das eine Weile nicht verwendet
habe. Und zwar, wenn ich in meinem Webinterface abrufe.
Was ist für...
Jaja. Ich, ich starte gerade mal. Wenn ich in meinem Webinterface abrufe...
What?
Moment. Wo habe ich jetzt, was habe ich verkackt?
Hier. Äh.
Hab ich... Moment.
Äh.
Wo habe ich, wo habe ich irgendwas vergessen?
Ich glaube, ich habe etwas zu viel. Kann das sein?
Ich habe was zu viel.
Return task completed.
Ach nee. Braucht der nur.
Brauchst du ja gar nicht.
Jetzt geht's, ne?
Ne, also, was ich euch sagen wollte, also was ich vergessen habe, ich bin mir ziemlich sicher, dass es das ist.
Wenn ich das abrufe...
Alter, was ist denn jetzt...
Ah, ich habe die Datenbank immer noch offen.
Nein, gut, äh...
So, also, wenn ich das Ganze starte und dann hier abrufe, meine Liste,
dann ist das Problem, dass ich, das sieht man jetzt wahrscheinlich auch hier,
dass ich hier keine History mitkriege.
Und warum kriege ich keine History mit, obwohl es eine History gibt?
Das liegt daran, dass ich ihm nicht gesagt habe, dass er die aus der Datenbank mit abfragen soll.
Da müsst ihr nämlich drauf achten, das vergesse ich jedes Mal, wenn ich eine Weile nichts damit gemacht habe,
dass wenn man hier in der Methode fürs Get, dann sagen wir ja hier,
gib uns alle Pakete, die wir haben, mach eine Liste draus und gib die ans Frontend zurück.
Die Sache ist die,
die Shipment-Klasse besteht aus den Einträgen hier und einer Liste mit diesem Shipment-Progress.
Und standardmäßig lädt der nicht modelübergreifend die Sachen, wenn ich es ihm nicht explizit sage.
Ich muss ihm jetzt hier nämlich sagen,
ähm,
include doch mal das Model für die History.
Das ist auch ganz logisch, weil wenn ich ein Model habe, was irgendwie zig Abhängigkeiten hat,
dann wird das Laden unnötig lange dauern.
Wenn ich davon vielleicht nur eins brauche.
Und jetzt wird es auch funktionieren.
Jetzt steht hier nämlich irgendwas drin.
Mein Status irgendwas ist natürlich bescheuert, aber wir sehen, dass es funktioniert.
So, und wenn ich jetzt eine neue Tracking-Nummer reinpaste, was jetzt passieren sollte ist,
ich warte mal, bis der Background-Task einmal durchgelaufen ist,
zehn Sekunden später,
so, fügen wir es mal hinzu,
zehn Sekunden später sollte er jetzt nachgeguckt haben,
was es zu dieser Tracking-Nummer gibt und den Status aktualisieren.
Bam, hat funktioniert.
Guck, macht der im Hintergrund, alle zehn Sekunden.
Funktioniert.
OData, das ist Overkill.
Also das hier ist das Problem hier.
Man muss ihm sagen, er soll die History includen.
An der Stelle.
Dann funktioniert das nämlich auch.
Big Brain.
Huge.
So, ähm, was kann OData denn?
Das ist so eine Daten-Query-API.
So, ähm, was kann OData denn? Das ist so eine Daten-Query-API.
Das ist so ein bisschen –
Du kannst quasi ohne, dass du für jeden Mist hier irgendwie eigene Controller-Methoden-Sonstwas brauchst,
kannst du besser deine Daten, deine Datenbank querien.
Durfte ich REST nennen, ne-ne. ÜberREST.
Das ist so ein Abfragedialekt, wo du quasi über eine API besser deine Datenbank abfragen kannst.
Auch mit Filter und so was.
Das ist aber total overkill, das braucht man hier nicht
Vor allem wüsste ich gar nicht wozu
Okay, und jetzt schreiben wir da noch was sinnvolles rein
Würde ich sagen
Weil irgendwas interessiert uns ja nicht so ganz
Dass da irgendwas drin steht
Das ist ja langweilig
Irgendwas juckt mich
So, Status
Kommt nicht irgendwas rein
Sondern wir schreiben da erstmal die normale History rein
Und gucken was dann da drin steht
History 0
Und dann
Die Message
Das müssen wir auch noch
Schöner machen, zack
Guck mal
Chipment bla bla bla
Chipment has been successfully delivered
Updated am
Das stimmt übrigens auch nicht
Das müssen wir noch miteinander verknüpfen
Das mit Updated
Stimmt, stimmt, stimmt auch nicht
Ja, das ist nicht schön hier
Da muss ich mir was anderes überlegen
Also quasi
Ein Web2DB Connector
So ein bisschen
Wir könnten hier ein If machen
Wir könnten hier ein If machen
Hier so, hier
Vif
Wenn das da größer 0 ist
Äh, oh fuck
Wie ging das nochmal so?
Äh
Ah, UF
Warum geht das nicht?
Warum geht das an der Stelle jetzt nicht?
Hä?
Nicht Luigi
Ich weiß, ich will aber noch was
Chipment ist noch 0
Nee, Chipment kann nicht 0 sein
Wir sind hier in der Vorschleife mit Chipment drinnen
Das verstehe ich jetzt ehrlich gesagt nicht
If inside loop
Okay, das ist anscheinend nicht so gedacht
Das geht anscheinend nicht so
Wie ich mir das vorgestellt habe
Warum aber eigentlich nicht?
Kannst du zeigen, was nicht geht?
Ja, das hier
Kann kein
Ich kann kein If
Ich kann kein If in der Schleife verwenden
Aber wenn ich das jetzt richtig verknüpfe
Wenn ich das richtig gesehen habe auf den ersten Blick
Das geht, dann ist das so nicht gedacht
Dann ist das anscheinend so nicht gedacht
Ich meine, es ist eh nicht gedacht, dass man hier
Großartige Logik drinnen macht, ne?
Warte mal, rückgängig machen
Da muss ich, da muss ich die Logik umbauen
Weil so viel hier oben Logik inline
In HTML machen ist eh doof
Dann machen wir irgendwie sowas wie
Format
Chipment
Message oder sowas
Wie Show, ja das kann man auch mal ausprobieren
Aber ich glaube, es ist schöner
Wenn man das so machen
Dann machen wir nämlich den Kram hier drinnen
Format
Das ist glaube ich die schönere Variante
Das hier drinnen zu machen
Computed Properties, das ist doch aber nur was, was sich auf
Auf eine Data Variable
Bezieht
Habe ich doch gar nicht jetzt
Ob das geht an der Stelle nicht?
Genau, this message
Nur was sich auf Data Sachen bezieht
Habe ich ja hier gar nicht
Format
Format Chipment Message
Das ist doch okay so
Okay, ähm, dann brauchen wir jetzt noch
Format
Chipment
Time
Date Time
Ist dann besser
Aber ein bisschen weniger Logik
Da oben drinnen
So, und da können wir jetzt nämlich auch gucken
Wenn
Wenn quasi
Die History Length
Größer als das ist
Dann machen wir return das
Und ansonsten
Machen wir nämlich das
History
Null
Updated Ad
Haha
Ja, jetzt funktioniert das nämlich auch gescheit
Wobei
Ich will da gar nicht Created Ad anzeigen
Sondern
Einfach nix
Einfach nix
Weil
Ja, einfach nix
Auch wenn die Logik in Format Null ist, dann ist das einfach nix
Ich weiß aber nicht wie ich das machen soll
Ich weiß jetzt nicht wie ich ein Computed
Property erstelle
Auf dem ich ne
Variable, also dem ich ne Parameter
Übergebe, dafür sind die ja nicht gedacht
Genau, Methode, sag ich doch
So, ähm
Dann passt das nämlich
Wenn ich das jetzt hier ein reinschmeiße
Chippe hier so
Dann stimmt auch die Anzeige hier
Ansonsten
Machen wir da mal
Einen
Einfach ein Updated Nix
Nix rein
So, und ähm
Hier steht Pending drinnen
Solange der noch nix
Gefunden hat
Okay, also probieren wir es nochmal aus
Adden wir nochmal was
Zack, Pending, Pending, Pending
Zehn Sekunden später
Sollte sich's aktualisieren
Solange die Telekom nicht abkackt
Äh
Okay
Ja, ja ich hab's mit der Telekom heute
Wo, wo ist mein Hintergrund Thread
Warum läuft er nicht
Warum, warum läuft mein Hintergrund Thread nicht
Wo ist er, wo ist er, warum läuft er nicht
Was ist hier los
Zehn Sekunden
Zehn Sekunden
Zehn Sekunden
Ist der abgekackt oder was
Der ist regelmäßig ist der immer hier
Ich starte mal neu
Sehen wir was der jetzt für Schmerzen hat
Ehrlich gesagt
Das ist gar nicht gespeichert oder so, hä
Jetzt hat's funktioniert
Okay, keine Ahnung was der vorher für, für Probleme hatte
Was passiert denn eigentlich
Wenn ich was adde, was es nicht, was es nicht gibt
Dann müsste er, müsste er abkacken
Weil
Ja, ja, genau, findet er nicht
Genau, da brauch ich jetzt ne Logik
Die quasi sagt, okay, wenn das ein paar mal
Fehlgeschlagen ist, dann
Setzt das hier nicht auf Pending, sondern auf
Es ist kaputt
Also okay, delete
Was war das da noch, Pending
Plop
Plop
Funktioniert
Fügst was hinzu
Und er ruft sich den letzten, den letzten
Status von der Telekom ab
Das ist nice, das gefällt mir
Wir können's jetzt noch sortieren, wir sortieren's noch nach
Updated
Das ist dann so die letzte Amtshandlung
Heute, weil ich muss jetzt mal was essen
Ich hab Hunger
Schon wieder dreieinhalb Stunden on
Das ist jetzt
Er hätte noch ne DHL-ID
Bin die nicht angekommen, ist ja schick, probieren wir mal aus
Mal gucken was er macht
Äh, was hab ich gesagt will ich machen
DHL-ID, dankeschön
Probieren wir mal aus
Ähm
Was wollte ich gerade machen, ich bin vergesslich gerade
Aber ich sitz wahrscheinlich auch wieder
Viel zu lang hier davor
Wenn die Nummer nicht gibt den Status
Setzen, nee, ich wollte irgendwas anderes gerade machen
Du kannst dir die Aufnahme
Auch so angucken
Wusste nicht warum ich auf bin, ist auch egal
So, ähm starten wir mal
Probieren wir mal
Probieren wir mal die Nummer aus
Ach sortieren, genau
Jetzt ist mir das auch gerade eingefallen
Ich wollte gucken, dass die Dinger
In der richtigen Reihenfolge kommen
Ähm, und zwar
Hier, get
Wollte sagen
Order by
Absteigend
Und zwar Order by
Äh, by history
Muss ich das hier auch machen
Da muss ich mir was schöneres überlegen
Ist ja 0
Und, und
History first
Updated at
Ob das funktioniert
Nee, ne
Das funktioniert so nicht
Hä, Moment
Ja, aber das funktioniert nicht
Geht das
Kackt doch ab
Wenn da nichts drin ist
Wir sortieren das mal
Wir sortieren das erstmal nach Erstelldatum
Kommt mal nicht verkehrt
So, und jetzt
Ich werd mir in der Haupt
Ich werd mir hier noch nen updated at
In der, in der Mainklasse machen
Hier noch
Hier machen wir noch nen
Updated at machen wir hier noch rein
Will jetzt immer auf das Zugreifen des letzten History eintrags
Ist nervig
Als Nicht-Informatiker ist der Gedanke einfach krass
Dass man sich eigene Apps schreiben kann
Klar
Äh, dass man das Apps nennt ist ja auch schon
Neu
Früher hat man einfach gesagt Programm
Aber jetzt
Sieht man mal von Yojkel
Die Tracking Nummer aus
Mal hier Background
Ist das DHL?
Pending
So, gucken wir mal
Ob er es findet
Shipment, da funktioniert
Shipment has been processed in the parcel center of origin
Und zwar
Um 17.14 Uhr
Heute
Also das ganze kommt dann wahrscheinlich am Montag erst
Ach, okay
Das ist doch nice, dass das so gut funktioniert, oder?
Fällt dir nicht auf?
Das hat was.
Ayaya, clap!
Ist gut, magst nicht durchdrehen.
Ah, ich bin echt begeistert, wie gut das klappt.
Ich hab das Gefühl, der Background-Service hängt sich nach einer gewissen Zeit auf.
Nö, macht er nicht.
Sind diese Sounds eigentlich alle aus Animes?
Nö.
Gar nicht!
Das ist eine japanische Text-to-Speech-Seite, wo das herkommt.
Meinst du, es gibt wirklich irgendwie eine Sendung, wo jemand Monkaes sagt?
Das wär's ja noch!
Doch, ey!
Oder Dings hier, oder?
Das kommt garantiert nicht aus irgendeinem Video.
Das ist japanisches Text-to-Speech.
Da haben wir uns mit einer Fake-E-Mail-Adresse registriert, bei so einem japanischen Text-to-Speech-Provider.
So, Leute.
Das war anstrengend heute, muss ich sagen.
Aber wir haben doch jetzt schon mal...
Man kann jetzt jetzt ungefähr ausmalen, wo das Ganze hingeht.
Ja.
Das war doch ein relativ primitives UI.
Das Scannen von E-Mails funktioniert noch nicht.
Und es macht auch aktuell nur DHL.
Aber es geht in die richtige Richtung, oder?
Nautsch-Zone haben wir hier.
Was denn?
PHP.
Monka PHP.
PHP ist mittlerweile besser als sein Ruf.
Wirtschaftswissenschaften im Studio.
Der hat wieder einen Viewer.
Der 3D-Printer hat mittlerweile...
Ne, der 3D-Printer hat 0.
Der 3D-Printer hat 4.
Und der Wasserkühlung...
Der ist immer noch an der Wasserkühlung.
Der hat jetzt wirklich eine Woche gebraucht, um die Wasserkühlung einzubauen.
Ich weiß nicht, was da abgeht.
Muss ziemlich Monka-essig sein, das Ganze.
Study with me.
Das ist kein Bot.
Das ist irgendeine Aufzeichnung.
Der ist ja 24-7 online und streamt irgendwelche komischen BWL-Dinger.
Nein.
BWL.
Ne, hier.
Monka Smoked mit Wasserkühlung.
Grillprogrammiert.
Grillprogrammiert.
Grillprogrammiert.
Müssen wir gucken.
Ne, das ist Blender.
POG.
Unity Shader Coding Tutorial.
Nicht schlecht.
Ich bin immer überrascht, wie viele hübsche Mädels es gibt hier in der...
Sowohl bei Science & Technology und auch generell bei den ganzen...
Nicht-Gaming-Kategorien.
Bei den Gaming-Kategorien auch.
Aber vor allem bei Nicht-Gaming-Kategorien.
Auf der Arbeit haben wir davon nicht viel abbekommen.
Wir haben zwei Stück, die sehen gut aus.
Ansonsten hält es sich in Grenzen.
Wenn du hier auf Twitch guckst, sehen fast alle gut aus, die streamen.
Also von den Mädels, von den Typen nicht.
In der Arbeit sind die bei HR.
Ja, bei uns sind die tatsächlich auch zum größten Teil in der Finanzabteilung.
Und bei Apple, bei iOS App-Entwicklung sind bei uns auch viele.
iOS App-Entwicklung.
Ist bei uns voll mit Mädels.
Wer im Glashaus sitzt.
Ja und?
Ich darf mich dazu doch äußern.
Ja, ich wollte eigentlich gucken, wenn wir hosten können.
Da war irgendwie niemand dabei.
Games for Linux.
Das sieht jetzt grafisch irgendwie ein bisschen sehr minimalistisch aus.
Ich will aufhören.
Ja, ich gehe jetzt was essen.
Schieb!
Ultra High Res hier.
Hühner.
Hühner.
Wo sind die Schiebs?
Wo sind die Schiebs?
Ich sehe keine Schiebs.
Ich sehe nur Chicken.
Chicken Snacks.
Snacks ist mal irgendwie nicht das beste Emote, wenn man ein Hähnchen da hat.
Die meisten Leute würden damit jetzt nicht assoziieren, dass man einen Snack für die Hühnchen gibt,
sondern eher, dass man die Hühnchen snackt.
Ist dann Frau Kapeta angesagt.
NES programmieren.
Wasserkühlungstyp wieder.
Jetzt fangt ihr das zu.
Ihr wisst ja, es ist ein Schiebesort.
Das kommt unter uns aber ganz gut zum Teil nicht rein.
Wir sind ein Team.
Wir müssen unser Spiel.
Aber das soll richtig ك.
Und ich bin ein Team.
Wenn ich ein Team sein muss, bin ich ein Team.
Ich bin ein Team.
Wir müssen die Äquation nutzen.
Wir müssen die Hühner besitzen.
Wir müssen diesen Entscheid Sorgen mitnehmen.
Wir müssen die Hühner versperren.
Wir müssen die Hühner versperren.
Wir müssen dann eben hele Tschechisch, aber leider nicht überholt werden.
Aber es ist wirklich gut.
Wunder der Zeit gehabt.
Klar machen wir jetzt die Aufmerksamkeit.
Und jetzt habe ich nicht das Gefühl, nicht zu verhandeln zu können.
Aber...
Ja.
Macht's gut, bis morgen, ciao.
