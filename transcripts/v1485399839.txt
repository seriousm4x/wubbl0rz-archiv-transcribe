EASY AS FUCK
EASY
EASY
HOK CHAMP
Moin
DJSW
77
Und der Enriksle ist
auch am Start
Massive
Macht ihr um die Uhrzeit alle hier?
Es ist 12.40 Uhr, müsst ihr nicht arbeiten?
Ich muss nicht arbeiten
Ich muss morgen wieder arbeiten, muss ich nach Frankfurt fahren
Hab ich gar keinen Bock drauf
Ach du hast auch am Montag Feierabend, das ist natürlich 5 Header Time
6 Header
7, 8, 9, 10 Header ist das
Selbstständig, ja da würde ich auch
noch den ganzen Tag streamen, wobei ich bin selbstständig
zur Hälfte
Wie gesagt, da würde ich auch noch die ganze Zeit streamen
den ganzen Tag gucken
Ja das Streamen wird heute wahrscheinlich
ein bisschen länger dauern, mal gucken ob ich das alles rausbekomme
Ich habe im Vorfeld schon ein bisschen geguckt
Ja
Übrigens
Wollte mal kecken
Microsoft hat mir gerade folgende Werbung geschaltet auf Twitter
Passt mal auf
Das habe ich gerade als Werbung bekommen auf Twitter
Microsoft möchte mir erklären
welche Risiken es hat, wenn man sich
Microsoft Lizenzkeys irgendwo kauft
und den Hashtag finde ich geil
Bleib echt
Was soll mir das denn sagen?
Bleib echt
Das ist irgendwie so schlecht
ins Deutsch übersetzter Hashtag, Alter
Bleib echt
Bleib echt
Das ist richtig schlecht
Bleib echt Talk
Das ist der Schau
Der Bleib echt Talk Nummer 3
Den kann man sich jetzt sogar anschauen, wenn man will
Den wollen wir uns jetzt nicht anschauen
Aber Microsoft, guck mal
Nehmen wir mal, der Link funktioniert
Oder ist mein Internet am abkacken
Ne
Der Microsoft Link funktioniert nicht
Keck WHD
Tja
Vor allem die Antworten da drauf auch wieder
Hahaha
By the way, es ist ja echt
Ne
Also du kannst ohne Probleme
Einen echten Key kaufen für 20 Euro
Wenn der nicht echt wäre, würde Microsoft den Kram ja gar nicht aktivieren
Hahaha, ja
Ich kann mich noch dran erinnern
Natürlich würde ich das auch, hätte ich
Damals hätte ich auch gesagt
Sind sie Opfer einer Software-Fälschung
Ja, klar, das muss gefälscht gewesen sein
Ich wusste von nichts
Aber wie gesagt
Die letzten Jahre
Ich kaufe eigentlich mittlerweile wirklich alles
Nachdem man auch
Streaming
Videos
Musik
Und sonstige Sachen
Heute halbwegs erschwinglich bekommt
Kein Ding
Einziges, wo ich ab und zu mal
Auf irgendwelche Streaming-Seiten gucke
Ist, wenn es das nicht gibt
Weil das sehe ich nicht ein
Aber das sind dann meist irgendwelche Nischen-Dinger
Die keinen interessieren
Oh, das ist Dings
Ich habe heute eine neue Playlist angemacht
Erkennt ihr das?
Wobei man hört kaum was
Ich muss mal kurz ein bisschen lauter machen
Erkennt das jemand?
Ich erkenne das sofort
Das ist Terranigma
Müsste das sein
Wenn ich nicht ganz falsch liege
Ja
Richtig
Poké-G-Game
Ich war zu jung für das Game damals
Ich habe es nicht gecheckt
Was sie mir sagen wollten
Die Story ist auch ein bisschen konfus
Aber
Ja
Ja
Ja
Japan
RPG halt
Ja
Ja
So
Also was wir heute machen ist folgendes
Nein
Wir gucken uns nicht Microsoft an
Und wir gucken uns auch nicht Vodafone an
Den ganzen Mist muss ich mal zumachen
Und dann
Dann
Dann
Dann
Dann
Dann
Dann
Dann
Dann
Dann
Dann
Dann
Dann
Dann
Dann
Dann
Dann
Dann
Dann
Dann
Dann
Dann
Dann
Dann
Dann
Dann
Dann
Dann
Dann
Dann
Dann
Dann
Dann
Dann
Dann
Dann
Dann
Dann
für den access point ist wirklich painstamp richtiger painstamp deswegen habe ich mir
gedacht wir gucken einfach mal was das web interface für request schickt und dann gehen
wir über die api vom web interface und gucken uns das an wer entwickelt denn sowas rugus macht das
anscheinend zum beispiel ich logge mich mal kurz ein also admin pass auf passwort liegt leute
passwort ist aber nicht schlimm weil der access point ist nicht von außen erreichbar und ich werde
nach dem stream auch das passwort ändern achtung leute passwort liegt gleich moment habe ich das
passwort ihr passwort ihr werdet gleich sehen wir werden es gleich hardcoded ins code reinschreiben
also
ich habe auch alles disabled zum beispiel zum beispiel was man was man also wenn man wlan
passwörter generiert für user ja kann man die sich zum beispiel hier im web interface anzeigen
lassen inklusive passwort mittlerweile man kann sogar sich einen passenden qr code dafür anzeigen
lassen das geht alles über die kommandozeile nicht und auch das generaten in quasi dass das
batch generator
das heißt wenn ich jetzt ein gäste wlan habe ich habe hier testweise mal ein gäste wlan angelegt was
wir jetzt was wir jetzt benutzen werden also ich habe ein gäste wlan angelegt mal angenommen es
kommt jemand zu gast ihr kennt mich was was was ähnlich passiert aber für den fall der fälle ich
bin ja nicht der einzige wird so was verwendet ist mir aufgefallen ich könnte gar nicht hergehen und
was bringt man für einen fewer easy tu villagers jetzt auf jeden fall eine in m 에�l maybe go to
hacen your own way euer eigenes gameこんにちは
this is an easy to do einfach doch auch scratched up
die leute die das das ist einfach toll ver Earl
beschreiben aber es hat bestimmt einen sehr dimensionellen ab vieles negatives euros habe ich 타ucciure
ist einfach dazu zu sagen die haben genau die else aber ich glaube der mãe söder natürlich auch richtig so bin ich nichts tahu ins online verwendet Revie football für sie zusammen wie
aber ich glaube das sind gar keine java server pages das sieht nur aus wie java server pages
weil wer würde denn auf irgendeinem low power also nicht low power auf irgendeinem low performance
embedded ding wirklich java laufen lassen wer macht denn so was dass die seiten heißen
wahrscheinlich einfach nur aus rückwärtskompatibilität gründen so und unter der
haube ist es wahrscheinlich php oder sonst was oder node oder so keine ahnung so zumindest habe
ich mir gedacht wir schauen einfach mal nach und bauen uns ein kommando zeilen tool wo wir
user auflisten können user adden können und so was aber wir müssen erst mal gucken wie man sich
da prinzipiell einloggt so und ich sehe da zwei möglichkeiten zu das zu machen entweder das haben
wir das letzte mal gemacht also entweder das müssen wir jetzt mal raus bekommen entweder
entweder
nehmen wir den chrome fernsteuern das ist die möglichkeit dass wir den chrome nehmen und den
fernsteuern und dann quasi sagen dem chrome er soll hier klicken oder er soll da klicken er
soll er soll da klicken er soll da klicken er soll dann da klicken und so das ist aber nicht
so schön vielleicht und das hoffe ich eher drauf ja bekommen wir raus wie die api funst ja also
sprich wir gucken entweder hier mit dem wir gucken entweder hier
mit dem mit dem tool nach was der wasser überträgt und oder wir probieren mit postman ein bisschen
bestimmt gibt es eine einfache jason api online spoiler spoiler es wird richtig eklig ich habe
ein paar fahrer nachgeguckt es ist keine jason api es ist xml 6 r biscuits xml ihr werdet gleich seht
es ist java skript in xml 4x2,30,90 focus ck6 und xml finanzиров und paypal 24 k begräbодate jetzt
ist es ja was klickt in zahlen xml ist das ein zähler hinzu und gleich das sch 60 page RPM Liquid resolution und
es ist javascript in v buch von angesprochenen Leuten keinen attraktivem beispiel und das ist 000 réal der madre perbooks exploring plays online und
auch wenn du jetzt noch nicht zweiter mal sogar Fool gehabt hast also welche sch еmann kamen zwei lagen diese automatisk existiert
XML. Ihr werdet euch
denken, wer hat sich das denn ausgedacht?
Ich habe im Vorfeld schon ein bisschen
auf GitHub rumgeguckt, was andere Leute so
rausbekommen haben. Es ist teilweise
JavaScript in XML.
Und das ist richtig, richtig
abartig. So, und als erstes
müssen wir mal rausbekommen, wie lockt man sich ein
und sonst was. Ich habe was gefunden
auf
ShitHub.
Da hat nämlich jemand schon ein bisschen was rausbekommen.
Und zwar irgendjemand
hat, was heißt irgendjemand,
der M.M.Mollinari
hat das rausbekommen, ja.
Der hat hier so ein Postman
Jason gebaut,
damit man mit Postman ein Request schicken kann.
Da bin ich nicht so wirklich
daran interessiert, wenn ich ehrlich bin.
Mich interessiert, was er gemacht hat. Und es geht schon
los. Ich zeige euch mal so ein bisschen was, was ihr
gleich seht, was auf uns
zukommt. Ja, also das geht schon
mal mit dem Login los.
Das Login ist
kein Post-Request, sondern das Login ist
ein Post-Request, der
ne, ist gar kein Post-Request, ist so ein Get.
Der das Ganze natürlich
in irgendeiner Art und Weise in der Url
encoded, weil
ja, muss so sein,
weil macht man ja 2022
noch so.
Inklusive Passwort und so, alles in der Url
encoded. Der Glück, was die
haben ist, dass das HTTPS
ist. Wäre das nicht HTTPS, wäre das hochgradig
unsicherer Krempel.
Gut. Aber man, wer ist
im Post-Body auch.
So, ähm, und
jetzt kommt der Hit.
Um sich sein Session-Token zu besorgen,
muss man folgendes
machen. Man muss eine
JSON-Response, äh, eine XML-Response
umwandeln zu JSON, zumindest macht der Typ
das hier so, zu JSON und sich das
dann rausparsen. Also man muss
quasi JavaScript aus XML
rausparsen, nachdem man das in JSON
konvertiert hat. Wobei man das in JSON
konvertieren nicht unbedingt braucht. Das macht
der Typ hier jetzt nur. So, und die API,
die sieht dann ansonsten so aus, ungefähr.
Hier.
XML
mit vereinzelt
JavaScript in XML.
Das wird richtig,
richtig abartiger Shit.
Das kann ich euch jetzt schon sagen.
Das wird ganz, ganz furchtbar eklig.
Ja.
Schauen wir mal.
Ich bin gespannt,
ob wir das auf die Reihe kriegen.
Ja, kann man echt nur
das zu sagen.
No!
Oh Gott, please, no, no!
Oh, ich sollte mal updaten, sehe ich hier gerade.
Updaten? Hallo? Wo ist die Toolbox?
Warum ist die Toolbox aus?
Was startest du rein? Wo sollst du die Toolbox ge...
Was?
Toolbox sollst du starten.
So.
Open Toolbox.
Update, update.
Service tab.
Got it. Juckt mich überhaupt nicht.
A wine time, beste API.
Was ist denn wine time?
Ist das irgendeine Test-API?
Wie die Star Wars-API?
Wine time, das finde ich viel besser zum Testen
als die Star Wars-API.
Das ist für alle exquisite Five-Header unter uns,
die sich nur immer 5000 Euro
teuren Wein beim Programmieren
und beim High-IQ-Tätigkeiten nachgehen
reinhauen.
So wie ich nicht.
Wir haben das Emote auch. Too smart ist das
Emote bei mir.
So, hat er geupdatet? Ja. Kann man die Toolbox updaten?
Check for updates.
Ja, übrigens ist euch immer aufgefallen,
wie kreativ ich meine...
Ich mach den ganzen Krempel hier mal kurz zu.
Ist euch aufgefallen, wie
ultra kreativ
ich meine User benannt habe,
zum Testen?
Also es geht von keku, kekus, kekus,
batch, user, omega, lul und poggers haben wir zum Start.
Hab ich gestern angelegt, zum ausprobieren.
Ja.
Gäste, WLAN, das... Leute, ich sag's jetzt nochmal,
bevor jetzt wieder irgendwie 20.000 Leute schreiben,
ah lul, user leak, WLAN leak, Mac leak, alles leak.
Das ist ein Test-WLAN,
was ich angelegt hab für den Stream,
beziehungsweise zum Ausprobieren,
mit Usern, die ich niemals in echt verwenden werde
und mit einem deaktivierten WLAN.
Es ist kein WLAN auf dem Access Point aktuell auf.
Es kann also noch so viel geleakt werden,
es passiert einfach gar nix.
Aber das wird natürlich trotzdem mich die Leute davon
abhalten, was von Leaked alle 5 Minuten zu schreiben.
So, ihr seid quasi schon drin.
Ja, ich weiß, ich kenn euch ja, kenn euch ja.
Gut, so, dann legen wir mal ein Projekt an.
Äh, Leute, sagt mir mal, wollen wir in Just Chatting bleiben?
Oder wollen wir in Software-Entwicklung gehen?
Ist ja bei mir immer so ein Zwischending.
Ich mach Software-Entwicklung mit irgendwie gefühlt 50% Just Chatting.
Und wir brauchen einen guten Projektnamen.
New Solution, weiß hier.
TheRogosChamp.
Put same directory.
Create.
In Beach und Pool.
Moment, streamen da überhaupt noch Leute?
Twitch, Beach, Pool.
Whirlpool und Strände.
Okay.
Okay.
Man weiß, man weiß Bescheid, was da läuft.
Ja.
Morgen, KS, Alter.
What the fuck?
Aber, dass das, ähm,
außer Amorant,
oder wie man die genau ausspricht,
hat kaum noch Zuschauer.
Was ist eigentlich aus Indie-Fox geworden?
Gibt's die noch?
Lange, lange nix mehr gehört hier auf Twitch.
Wurde die nicht sogar gebannt?
Ach, keine Ahnung.
Ehrlich gesagt ist mir's auch ziemlich wurscht.
Ist mir doch grad so eingefallen.
Wisst ihr, was schlimm ist?
Wisst ihr, was schlimm ist?
Dass man sich sogar die Namen merkt.
Ich hab das nie geguckt,
und ich weiß, jetzt sagt der Chat wieder,
aber man hat genug mitbekommen,
dass man sich die Namen merkt.
Das ist so eigentlich marketingtechnisch
alles richtig gemacht.
Die ist gebannt.
Na gut.
Dann hat sich das ja wohl erledigt.
Okay, auf geht's.
Also, probieren wir das mal aus,
wie man sich einloggen kann.
Äh, Hello World ist schon mal nicht das,
was wir brauchen.
Ach nee, ich wollt mal was anderes ausprobieren.
Und zwar der normale Poki W Virgin Check Chat.
Poki W Virgin Check, I'm safe.
Ich hab die Kopie Pasta grad nicht zur Hand.
Aber alle einmal
Poki W Check im Chat hier.
Hier, keine versteckten Poki Subs
am Start, alles klar.
Nicht, dass es schlimm wäre,
soll jeder Subscriber erwähnen.
Gibt so viele Channels,
die übelst gefeiert werden,
die ich nicht gucke und umgedreht.
I'm safe, jawoll, nice.
Nochmal Kluck, ja, ja.
Ganz knapp.
Also, ich wollte nämlich was anderes verändern.
Und zwar, weil mir der Standard
HTTP Client in .NET so auf den Keks geht.
Ich hab nämlich letztens
was anderes gefunden, was ich mal ausprobieren wollte.
.NET HTTP Client
und zwar
Flur
Flurl hieß
das glaube ich. Ja.
Fluent
HTTP, Moment, wo
Wo kommt denn das
Wo kommt das R und das R?
Wo kommt das L her?
Fluent?
Oh, ich hab keinen Pflastenschimmer.
Ach, URL.
Da hätte ich auch selbst drauf kommen können.
Ja.
Das wollte ich mal ausprobieren.
Keine Ahnung, ob das jemand von euch schon verwendet hat.
Wenn ja, kann das ja mal im Chat schreiben.
Das sah mir deutlich angenehmer aus,
als
den eingebauten HTTP Client.
Weil der geht mir regelmäßig auf den Keks,
der eingebaute HTTP Client.
Deswegen dachte ich, probieren wir das mal aus.
Und das coole daran ist,
man kann zum Beispiel solche Sachen jetzt machen.
Guck, also ich zeige mal. Normalerweise macht man
sowas. HTTP Client
gleich new http-client
http-client
oder irgendwie, keine Ahnung,
get. Mittlerweile haben wir sowas wie
get-string und sowas. Das gab es glaube ich am Anfang gar nicht.
So, get-string
google.de
und dann kann ich das ausgeben.
So, das macht man normalerweise
so. Hallo?
Und wenn ich das jetzt ausführe,
kann man Terminal hier unten auf
.NET run, dann kommt jetzt gleich
Google als Antwort.
Im Terminal. So.
Nee.
Warum nicht? Achso, weil
HTTPS
wahrscheinlich davor muss.
Jetzt?
Was zum? www?
Mach ich denn falsch? Achso, ich hab
drei Slashs. Lull.
So, jetzt kriegt man hier ganz viel Google
Gedöns zurück. So, das ist normal.
So macht man Request
mit dem eingebauten http-client.
Und mit Flurl, habe ich gesehen, kann man sowas hier machen.
Guck mal. Das finde ich mega nice.
Man kann das alles weglassen.
Man kann das alles weglassen und sagt
einfach
get-string async.
Fertig. Ich meine,
spart jetzt an der Stelle nicht so viel, aber
http-handling ist in .NET eh etwas
painstampig. Da ist das auf jeden Fall die schönere
Variante. Und man kann da wohl noch
mehr machen. Man kann da nämlich auch einfach Header
setzen und
basic auth kann man, wer schon mal
basic auth gemacht hat mit dem standard.net
Client, wird wissen, das ist mega
mega eklig, weil du musst dich selbst darum
kümmern, dass du die Sachen in
base64 encodest und sowas.
Das ist richtig
hängen geblieben. Ich weiß nicht, warum.
Ja, guck, man muss sowas
machen hier.
Encoding, get-bytes, authorization,
header, convert to base64.
So viel Boilerplate
für einen basic auth Request. Das finde ich cool, dass
man das hier alles eingebaut hat. So.
Aber wir wollen ja kein Request auf Google machen.
Wir wollen ein Request machen auf
Ja, wohin eigentlich?
Login.
Login.
Da wollen wir ein Request hin machen.
So Leute, ich werde jetzt mal ein Passwort
leaken. Achtung.
Das wird jetzt nach dem Stream resetet, aber das ist
der Moment, den mag der Chat immer, wenn irgendwas
geleakt wird. Also erstmal IP von dem Ding.
192.168.2.
2.143.
Das ist die IP da.
Das sieht man ja hier oben.
War
User gleich Admin.
Wer hätte das gedacht? Und jetzt war
Passwort. Achtung.
Massive Passwort Leak.
Ähm.
Das ist mein
Passwort für den Access Point.
Jetzt ist es raus.
Wer sich fragt, wie ich das Passwort generiert habe,
ganz einfach. Dazu gibt es das schöne
Programm pwgen.
Wie, habe ich das nicht installiert?
Wenn man das nicht gerade über einen Passwort Manager macht.
pwgen
Und der generiert euch
halbwegs gut merkbare
Passwörter mit unterschiedlicher Länge.
Ich glaube minus D ist es oder so.
Ah ne, einfach hinten dran.
32. Dann bekommt man solche
Orogeheins
Heini
Eidwakotai
kriegt man dann da.
First try erraten. Ja, war klar. Der Chat
ist so sickset, der kann in Zukunft quasi meinen
Gendermeister auslesen und weiß schon,
was ich für Passwörter
erzeugen werde.
Das war mir aber schon klar. Predicted
alles. Alles predicted.
Also pwgen ist da ganz praktisch und ich glaube,
dass pwgen auch
human readable
Passwords machen kann. Wobei er macht standardmäßig schon
human readable Passwords. Ist ganz praktisch.
Ist ganz praktisch.
Ja.
Was mit sy?
Ja, das ist, dass er alle Zeichen
nimmt. Das will man dann wahrscheinlich nicht unbedingt.
haben. Das ist das irgendwie schöner.
Wie gesagt, jeder
Passwortmanager kann sowas generieren, aber
auf die Schnelle ist
pwgen eigentlich ganz nützlich.
Also, wir machen jetzt mal ein Request und zwar
wir müssen jetzt gucken, wohin der Request geht. Dahin
geht der Request. Also.
So.
Dahin geht der
Request.
Mach mal den Krempel mal kurz
hier dicht. Also base
url ist die IP.
User ist user.
Und pw
Passwort.
Okay. Von der Theorie her,
wenn das jetzt alles funktion...
Warum kann ich das nicht erraten? Achso,
weil ich noch sagen muss, get
get
string async.
So, von der Idee her,
sollte ich jetzt einfach
in den Login Bildschirm
oder so als Antwort bekommen.
Ist das auch ein Post?
Äh, ein
get? Ist das ein get? Ja, das
ist ein get-Request.
Mal gucken.
Leute, ob ich alle, ob ich alle
gebräuchlichen
http-Dinge aus dem Kopf hinkriege. Was haben wir denn?
Get-Post ist klar.
Patch. Delete.
Äh.
Ich hab keine Ahnung.
Gibt noch mehr.
Head. Genau. Options.
Und da gibt's auch noch Zeug, was webdav
und so verwendet.
Put. Put hab ich vergessen. Natürlich.
Genau. Put ist eigentlich das
normale. Patch verwendet kaum noch irgendjemand.
Ähm.
Hier.
Header. Das ist ein, ein
quasi ein Zero-Header. Da hat weder
keine Zahl davor.
Post. Put. Delete. Connect.
Ja, das ist für SSL gedöhnt.
Options. Patch. Trace.
Äh, hab ich noch nie verwendet.
Trace. So sieht's aus.
Wieder was gelernt. Genau.
Gut.
Also. .NET. Run.
Hallo. Was ist denn mit meiner
Shell unten da? Okay, Leute. Wisst ihr
was? Wir brauchen eine ordentliche Shell.
Machen wir so.
Wobei, wir brauchen dann nicht mal
RiderProjects
LogosChamp.
.NET. Run. Ordentliche Shell.
Au.
Was jetzt?
Ach. Zertifikat.
Zertifikat nicht gültig.
Ach so. Ja, das war klar.
Dass der sich dran stört.
Mal gucken, ob sie das auch einfacher
gemacht haben.
Äh. Ignore?
Gibt's da sowas? Ignore?
Äh. SSL?
Nee. Oh, nee. Haben die da nix
einfaches eingebaut? Weil Zertifikatserrors
ignorieren ist auch was, was mir
richtig extrem auf den
Sack geht. Äh.
Bei dem Standard .NET HTTP Client.
Da muss man immer einen extra Händler einfügen
und haste nicht gesehen.
Plurl und untrusted
Certificates.
Five Header Time. Was?
Untrusted
Third Client Factory.
Na, wenn das hier nicht mal OOP
of Doom ist, dann haste...
Untrusted
Third Client Factory
erbt von default HTTP
Client Factory und macht im Prinzip
das, was man beim normalen
HTTP Client auch machen muss. Man
überschreibt das. Okay.
Ich hab ne Idee. Wir machen
mal was Five Header mäßig ist. Ich sehe nämlich schon
kommen, dass wir jede Menge
HTTP Helper Methoden hier brauchen.
Deswegen
machen wir einfach mal eine extra Klasse HTTP
Helper. Nur nicht ganz sicher, was
da alles reinkommt, aber da kommt auf jeden Fall
JSON to XML und so gedönst
rein. Ne, ne. XML to JSON und sowas.
Was jetzt?
Ah.
Chrono Trigger Musik. Fuck.
So. Also machen wir irgendwie so wie void.
Äh.
Global. Global
Ignore Third Error.
Bam.
Müssen bloß auch schauen, was man da reinschreibt.
Public. Fertig.
So. Also was braucht man da jetzt?
Untrusted Client Factory.
MonkaS, alter.
So.
Und jetzt? Alter, was ist das für
High IQ Shit wieder?
Warum machen die es einem immer so schwer, so
simple Sachen wie Zertifikatswarnung zu
deaktivieren? Eins muss ich das pro...
Ich muss das...
Pro Uhr? Kann man
das nicht irgendwie global überschreiben?
Also irgendwie...
Also irgendwie, keine Ahnung.
Was macht der hier?
Flurl?
Wieso nicht einfach curl ausführen und insecure setzen?
Na, weil das ein bisschen nervig ist, wenn du
Kommandozeilen-Tools aufrufst
und dann zu checken, keine Ahnung,
was ist der Return Code? Das musst du dir irgendwie
aus der Response rausparsen.
Du kriegst kein fertiges JSON als
Response. Kein fertiges...
Das kannst du machen, aber
schöner ist es, wenn man irgendeine
integrierte HTTP Library verwendet.
Wenn gar nichts
hilft, kann man curl aufrufen, ja.
So, gibt es hier nicht irgendwas
Global Settings? Das ist doch schon mal gut.
Sowas wie Händler oder so? Ne.
Wollen wir
Factory? Ah, guck mal da.
Flurl
Client Factory. New
Untrusted
Client Factory.
Leute, warum fresst ihr den
eigenen Kram nicht, wenn es doch extra davon
abgeleitet ist? Ah, Moment, das ist
eine HTTP Client Factory.
Alles klar, so.
Moment, jetzt mal gucken, ob das jetzt
funktioniert. Zack.
Got net run. Immer noch das...
Moment, ruft er diesen Krempel überhaupt
auf?
Dass man sich immer mit so einem
Bullshit aufhalten muss, man.
Ich will was machen. Heck. Führt er das
denn überhaupt aus? Er führt
es aus, okay.
Ihr kennt mich, Breakpoint setzen ist
nicht meins.
So.
Das interessiert den nicht.
Ist das vielleicht gar kein Problem
mit dem Zertifikat?
Weil da steht ja nix von Zertifikat.
Da steht einfach nur
SSL Handshake failed.
Also quasi hier.
Okay. Google, Google
.net
5, äh ne, 6, 6.
Moment, da ist doch schon was.
Was?
Wie? Wollt ihr mich verarschen?
Kann man keine Zertifikatsmeldung
mehr deaktivieren? Das macht das...
Das kann net sein. Das wär ja komplett unbenutzbar.
Die Hälfte der Seiten, die man automatisch
auslesen will, intern oder sonst was, die haben kein gültiges
Zertifikat. Okay, was machen
die da für Dinger? Was?
Ich soll ne eigene OpenSSL
Conf... Im Leben mach ich keine
eigene OpenSSL Conf
dafür. Was kommt denn als nächstes? OpenSSL
selbst...
Selbstkompilieren oder was? Oder wie?
Äh, ich glaub,
dass da SSLv3 steht, ist
einfach nur in der Fehlermeldung.
Ich denk, das heißt einfach
so, die, ähm, ich bin mir gar nicht
sicher, ob das wirklich...
Wobei, TLS, SSL3
ist doch im Endeffekt.
TLS 1, 2.
Kann man das hier vielleicht
einstellen?
Kann man hier vielleicht einstellen, TLS
oder SSL?
SSL-Protokolls kann man da einstellen.
Guck mal da. Benutzt du Rider? Ja.
New.
Okay, was muss man da angeben? SSL-Protokolls.
Liste?
Irgendwie sowas, ne Liste
vielleicht?
SSL-Protokolls?
TLS?
Ne. Ach, das ist ein
E-Nom, den muss man wahrscheinlich
mit und zusammen machen oder
äh, mit oder zusammen machen.
Sowas da.
Okay, was passiert jetzt?
In Python
wäre das nicht passiert. Du wirst immer
was finden, was in anderen Programmiersprachen nicht passiert
wäre und umgedreht.
Ciphers available.
Aha.
Max, du machst das echt gut. Wollte ich dir sagen.
Dankeschön.
Schön, dass es dir gefällt. Aktuell läuft es zwar nicht
so, aber kann ich ja nichts für.
No ciphers available.
Was zum Teufel will
der Dude mir sagen? Mann, was ist das?
Okay, wir müssen glaube ich die Runde
googeln noch. Aha.
Okay. Sobald man das aktiviert,
kommt das mit dem
Handshake failed.
Ich aktiviere jetzt einfach alles.
Ich aktiviere jetzt alles, inclusive
None. Mal gucken, was passiert.
Beim SSH hatte ich auch
Probleme, ja. Weil RSA
deaktiviert war, aber das muss jetzt ja was anderes
sein. Oder, kann in die
ähnliche Richtung gehen.
Okay, also.
Das ist es schon einmal
nicht. Aber wir haben
eine neue Fehlermeldung, nach der wir suchen können.
.net. No ciphers
available.
Ah. Guck mal, wir finden...
MySQL-Connector.
Ne.
Onker.
No ciphers available.
Ich hatte sowas schon mal.
Ich bin mir aber nicht mehr sicher,
wie man den Krempel...
Das ist OpenSSL.
Oh Gott.
Also, was ich nicht machen werde, ist
das hier. Ich werde
definitiv nicht...
Hier. Das werde ich nicht machen.
Das sage ich euch. Das sehe ich nicht ein.
Ich werde mir definitiv
keine eigene...
Jetzt blicke ich schnell mal durch.
Wir hatten doch eben irgendwo was,
wo sie geschrieben haben, man soll sich eine eigene...
Ähm...
CipherSuite's
Policy? Man soll sich eine eigene
OpenSSL
Conf machen.
Das sehe ich nicht ein.
Hier.
OpenSSL Conf.
Das mache ich nicht. Das kannst du auch
jemand, der vielleicht das Tool verwendet, doch nicht
zumuten. Ich bin eh der Einzige, der das verwendet, aber...
Ne.
Das sehe ich nicht ein.
Ich mache mir garantiert keine
eigene OpenSSL Conf, weil
.NET irgendwelche komischen Default Settings hat.
Okay.
Was haben die gesagt? Alternativ kann man
CipherSuite's Policy verwenden.
Okay.
CipherSuite's Policy HTTP
Client. Wie setzt man das da?
Aha.
Sockets HTTP Händler.
Aha. Was haben wir da denn? Der Ghost hat
gepostet. Also da sind User, die es nicht mehr auf GitHub
gibt.
SSL Client Authentification
Options New.
Das man für so einfachen Kram in den
Untiefen wieder rumsuchen muss, ist doch
absolut für'n Bobbes,
Mann. Also, was machen
die Dudes hier?
SSL Client...
Okay. Okay.
Das machen wir hier rein. Das machen wir hier rein.
SSL Authentification
Options New. CipherSuite's.
Jetzt müssen wir bloß noch die CipherSuite
rausbekommen, die wir brauchen.
Sockets HTTP
Händler. New
Sockets HTTP Händler.
HTTP Client. Ne, das brauchen wir an der Stelle gar
nicht. Kann man diesen Kram hier
returnen, anstatt den da unten?
Okay, das funktioniert.
Das ist schon mal gut.
Jetzt müssen wir nur rausbekommen, was der für
Ciphers haben will, dass das funktioniert.
Gleiche
Fehlermeldung.
Okay, wie viele Ciphers gibt's denn? Vielleicht
können wir einfach Try and Error machen.
Oh.
Ähm.
Ich hab ne andere Idee. Wir aktivieren einfach
alle. Wir aktivieren
einfach alle. Oder im Browser
nachschauen. Okay.
Zwei Sachen. Wir aktivieren einfach mal alle.
Wir
aktivieren einfach mal alle. Richtig
pfeifert wusste ich auch lange Zeit nicht, dass
es das gibt. Guck mal. Das ist ja nen
Inum hier, dieses TSL
CipherSuite's. Wenn ihr eine Liste erzeugen
wollt, mit allen möglichen Values
für einen Inum, geht das folgendermaßen.
Inum
Get
Values
Und jetzt bekommt ihr eine Liste
mit allen Inums da drinnen.
Also das, was das Ding frisst.
Schau mal, ob's jetzt funktioniert.
Oh Mann.
Ah. Guckt mal.
Das ist jetzt eine andere Fehlermeldung.
Das ist jetzt die Fehlermeldung, dass das
Zertifikat nicht gültig ist. Das heißt,
die Cipher-Geschichte haben wir um Shift.
Jetzt müssen wir dem Ding nur
noch beibringen,
wie man das Zertifikat
accepten kann.
Also.
Vielleicht irgendwas mit SSL?
Ne. CERT?
Richtiger Pfeifert-Stream, ja.
Local Certificate
Remote Certificate
Validation Check.
Ich hab da... Alter, also
ich benutze selten Methoden mit...
Wie viele Buchstaben hat das?
36 Buchstaben, alles klar.
Importier das doch
einfach in deinen lokalen CERT-Store.
Da könnte ich mir genauso gut auch
custom OpenSSL-Config anlegen.
Das will ich nicht.
Okay, wie geht der Krempel? Wie funktioniert das?
Aha.
Aha.
New Validations
Return da einfach true
und gut ist.
0w
Ups.
So machen?
Noch mehr?
Sekunde.
Alles klar, so machen wir das jetzt.
Jetzt wissen wir Bescheid.
Was ein Krampf, man. Bevor man überhaupt anfangen kann.
Okay, dann
wrap ich das mal hier rein.
Jetzt sagen wir
einfach, dass es auch
ein bisschen sprechend ist am Anfang.
Global Ignorance
Assert Error.
Dann weiß man gleich, was passiert.
Fix me im Response.
Ja, da weißt du Bescheid.
Fix me. Remove this one after using
User Legacy Code Refactor.
Ich sag euch mal eins,
das wird nie passieren.
Die werden nie den User Legacy Code Refactor.
JQuery.
Ah, wir haben jetzt mit einem absoluten Bleeding Edge
Hook modernstem
modernstem GUI zu tun, überhaupt.
Ja, seh ich schon, ich seh ich schon.
Ist aber egal, wir sind ja auf die API scharf
und nicht etwa so sehr danach,
was denn jetzt da in den ihr Frontend
passiert. Ist mir ehrlich gesagt ziemlich egal.
Also, gut.
Response.
Seh ich das jetzt richtig?
Wir konnten uns jetzt anmelden?
Hat das mit dem Anmelden jetzt funktioniert?
Wahrscheinlich. Okay, jetzt brauchen wir
unser Token. Unser Token bekommen wir
Leute, ich muss mal kurz husten. Ich muss mal ausmachen.
Excellent. Okay.
So, und jetzt brauchen wir unser Token.
Das da.
Und das
bekommen wir mit
dieser Url.
Wahrscheinlich Sachen mit
private API. Aber es gibt eh keine
public API, also können wir auch eine
private private API verwenden.
Müsste ich jetzt nicht irgendein
Session Cookie oder
Session Header oder
irgendwas zurück
bekommen eigentlich?
Moment.
Den muss ich mir bestimmt merken, den
Header.
Header. Headers.
For each.
Header.
Header. Schauen wir mal.
Weirdchamp.
Ne, es gibt kein Session
Header oder sonst was.
Woher weiß der denn jetzt, dass
ich eingeloggt bin?
Cookie. Cookies.
Cookies.
Cookie. Name.
Cookie. Value.
Dass ich weiß, wo es aufhört.
Gibt keine Cookie. Ja Moment,
wie merkt er sich denn dann, dass ich mich überhaupt
korrekt eingeloggt hab?
Vielleicht hab ich mich auch nicht korrekt
eingeloggt. Der Access Point
ist, kann hellsehen,
der ist richtig high IQ.
Machine Learning
trainiert. Egal,
wir machen einfach mal weiter in der Hoffnung, das funktioniert
jetzt also. So.
Also Response, das
ignorieren wir mal. Ich weiß nicht, was ich damit machen soll.
Und jetzt brauchen wir
einen weiteren Get Request.
Auf
JSP,
oder?
Auf CSRF Token
war. CW.
Alter, warum kann der mein
Makro für die Konsole nicht
fanden? So, run.
Mal gucken, was wir jetzt zurückbekommen.
Ich sag doch, wir bekommen
JavaScript in XML zurück.
Beziehungsweise in HTML, aber
HTML ist ja quasi XML, so.
Was zum Geil.
Was ist das für eine bescheuerte Response?
Was ist das für
eine beschissene Response, Alter?
Den Script Tag Return.
Alter.
Normalerweise würde ich jetzt sagen,
was haben die China-Chinesen da programmiert,
aber das waren gar nicht die China-Chinesen.
Kann man da irgendwie sagen, Content-Typ
oder so? Content?
Nee. Content?
Media? Nee.
Irgendwie, äh, äh,
Header?
Was ich dann sagen kann, irgendwie, Content
Type, äh,
Application
JSON. Gucken wir mal, ob das funktioniert.
Nö. Wobei, nee.
Das ist, was ich sende, oder?
Wie kon... gibt es
denn Header mit was, was, was
die erlaubte Response ist?
Wer das programmiert? Accept
Header. Accept.
Accept.
Einfach so? Okay, ist egal.
Kommt immer das Gleiche zurück.
Also.
So, dann müssen wir das jetzt irgendwie
parsen. Das ist an der Stelle
tatsächlich sogar noch relativ einfach.
Guck mal, wir bekommen hier
zurück in den JavaScript Tag, das
können wir alles ignorieren. Wir sagen
einfach, ähm,
Response
Split, Split
am,
am Gleichheitszeichen
und dann
das Zweite, weil, also wenn wir
am Gleichheitszeichen splitten, dann ist das hier
das nullte Element und das hier das erste Element.
Und dann einfach
das
1, 2, 3, 4,
5, 6, nee, Moment, das muss ich ja gerade
mitzählen. 1, 2,
zweite, nee,
1, weil bei 0,
nee, ab dem zweiten
Zeich, also ab dem dritten Zeichen
bis zum
1,
2, 3, 4, 5, 6, 7, 8,
9, 10. Hatte der nicht
sowas hier drin stehen?
12, alles klar.
12.
Kannst du auch gleich am Quotes
richtig,
wir können bei den Quotes splitten, da hast
du vollkommen recht. Ist noch
besser, ja, hast recht, ist noch besser.
Aber wir haben es auch so schon. Aber du
hast recht, wir können an den Quotes splitten, das ist eigentlich noch
viel, viel sinnvoller.
Wir splitten an den
Quotes, kann man eigentlich sowas hier machen?
Der Chat ist wieder richtig pfeifert.
So, wenn wir splitten an den Quotes, dann
ist es nämlich direkt 0 bis
8 oder so. Also
Anfang bis, ähm,
nee, nicht bis 12, dann bis 10.
10. Was?
Ah, wieso?
Habe ich doch gerade weggemacht. Okay,
alles klar, gut. Ich meine, man könnte
jetzt sogar noch, man könnte jetzt noch weitergehen
und an der Stelle 1 könnte man noch sagen.
Last? Weil das ist dann
auch nicht schöner.
Nee, wobei, Last geht an der Stelle nicht, 1.
Wir brauchen das in der Mitte. Wobei, Leute,
das geht so. Ich lasse es jetzt so.
Ähm, das hier ist
unser, du kannst
auch 2 von hin, oh, noch besser.
Noch, noch 6-headiger.
Also, das hier ist jetzt mein
Cross
Request Forge, oh, nee,
wie rum sind die Wörter da drinnen?
Cross Side
SCF, heißt das nicht?
CSR?
Cross Side
Forgery Request, nee, ist doch richtig, richtig
so, glaub ich, ne?
Ähm, Token,
und jetzt so. Gut.
So.
Alter, kann der mal
ordentlich meine Sachen
expanden hier, anstatt mir das einzufügen?
Der Rüpel, danke für den Sub.
CSRF, oder ist es
CSFR?
CS, haben die sich da
auch noch verschrieben drin, oder was?
Die, die, die haben sich, die haben sich,
die haben sich verschrieben, oder?
Also, das lässt
mir sehr viel
Mut, macht mir das für diese,
tolle, für diesen Access Point.
Also, korrekt, korrekt
heißt das Ding. CSRF
Token.
Alles klar. Im Request
ist richtig geschrieben, ja. Okay,
jetzt haben wir unser Token. Was passiert denn jetzt,
wenn ich das Token anfordere, ohne mich vorher
eingeloggt zu haben?
Ich würde sagen, irgendein Error wahrscheinlich,
weil ich den immer noch nicht, ah ja.
Okay. Wenn ich mich vorher
nicht eingeloggt habe, dann gibt's keine
Response. Aber was ich
immer noch nicht gecheckt habe, ist, wie der sich das
merkt. Der muss hier
irgendwelche Cookies setzen, aber er hat
keine Cookies.
Was, zwei von hinten? Noch besser.
Katschibas.
Ne, stimmt nicht.
Eins von hinten.
Ne, Moment. Ich brauch das
gar nicht, oder? Weil da nachher noch
ein Quote kommt. Das so müsste
es doch eigentlich reichen.
Siehste?
Unnötig obfuscated.
So, jetzt haben wir unser Token hier.
Finally.
Ja, der Chat hat's natürlich schon wieder fünf Meter gegen,
fünf Kilometer gegen den Wind gesehen. Alles
klar.
So.
Alles klar.
Gut. Schön. Wunderbar.
Ähm.
Jetzt hab ich mein Token. Und wie geht's weiter?
Get system information.
Aha.
Dann muss man das hier setzen als, als
Header.
Mhm.
Kann ich nicht? Ne, kann ich
nicht.
Kann das Ding irgendwie Default?
Default
Header? Header HTTP?
Ne, wie hieß das Ding?
Global Settings
Header? Ne.
Default Header müsste ich jetzt
setzen können. Das wär natürlich sehr praktisch.
Wie heißt der Krempel nochmal?
Default Header.
Also, sonst müssen wir das ja bei jedem
Request dabei schreiben. Na gut, gibt's
Schlimmeres.
So, System Settings.
Wobei, will ich System Settings überhaupt abrufen?
Nicht, dass ich jetzt vielleicht hier wirklich
irgendwelche Sachen leake, die ich nicht leaken will.
Weil, was soll ich?
Ich resetze den Access Point je nach dem Stream. Was soll
passieren? Was soll
passieren?
Was? Oh, jetzt kommt XML,
Leute. XML in
Wisst ihr was?
Scheiß drauf. Wir machen kein, wir machen
kein Get Stats.
Wir gucken,
Admin, wir gucken
was der, was der schickt.
Weil, was ich eigentlich
machen will ist,
ist aufgeploppe, da geht mir auch auf den Piks.
Was ich eigentlich machen will ist,
ähm,
mir die User auflisten lassen.
Nicht diese User hier, sondern
die DPSK User.
So, wenn ich
hier drauf klicke, sollte er das ja eigentlich laden.
So, Conf, guck mal da.
Conf. Request.
Get Conf.
What?
Response.
Hallo, ich möchte da unten drauf...
Hallo.
Alter!
WLAN
SVC User
Encryption WPA
Provisioning
Ne, DPS.
Ne, das ist das Pass, das ist das
die Pass Phrase von meinem WLAN.
Das wollt
ich nicht haben.
Ich will die Pass Phrase von
den Usern haben. Conf?
Also, ich will ne Liste mit Usern
haben. Alter, warum geht das
immer weg, wenn ich da drauf klicke?
Pains Champ.
Hier, hä?
Request. So kann man sich
das doch net angucken. Guck mal!
Das ist verbuggt!
Ne, das ist der Access Point.
Wie soll man denn das jetzt bedienen, Mann?
DPSK List, das sieht gut aus.
DPSK List.
Mac. Ja, hier sind die User.
Alles klar. Die User.
Die brauch ich.
Mac. Pass Phrase.
IP Address.
IP Address?
Man kann sogar die
IP auslesen. Das ist ja nice.
Das seh ich dann aber nur, wenn
einer verbunden ist da drin. Da seh ich auch gleich
was der für ne IP hat.
Das ist gut.
WLAN ID.
WLAN ID.
Oh, die kann man dann auch direkt
da drüber setzen. Ja, das ist nice.
Da kann dann sogar mein Tool dann mehr als das Web Interface.
Start Point
Pass Phrase.
Ja, du ich glaube
aber sind gar keine Java Server Pages.
Weil das ist irgendein Embedded Ding. Ich glaub nicht,
dass die da Java drauflaufen haben. Ich glaub das ist Gbait.
Also, Request.
Was müssen wir für nen Request machen, dass wir das bekommen?
Get Stat
Updater.
Und dann hab ich als Response...
Was? Alter.
Wer hat sich das ausgedacht?
Schon wie die WLAN. Die WLAN Performance
ist richtig gut.
Ich hab gestern das ganze mal angeschaltet.
Ich hab mein altes
WLAN auf vergessen geklickt.
Beim Handy. Und ich bin...
Also aktuell ist es so.
Ich komme mit dem WLAN bis in den Garten.
Mit 4 Access Points.
Access Point im Keller.
Access Point im erster Stock.
Access Point im Erdgeschoss.
Access Point auf der Terrasse.
Access Point eingeschaltet.
Ich hatte überragenden Speed.
Ich mein, das ist kein Wifi 6, nur Wifi 5 Access Point.
300-400 Mbit.
Und das
bis an Eingang.
Also bis die Terrasse runter.
Mit einem Access Point.
Nicht mit 4.
Also die WLAN Performance ist wirklich gut.
So, also das müssen wir da jetzt schicken.
Oder wie?
Also, Leute, wir müssen jetzt XML Zeug schicken.
Jetzt wirds...
Jetzt wirds eklig.
So, das können wir uns glaube ich wahrscheinlich
sparen.
GetStat.
DPSK List brauchen wir.
Ob irgendjemand diesen
Kram schon mal irgendwo gemappt hat
im Internet?
Aha. Aha.
So, so.
Da haben auch schon ein paar andere Leute dran geforscht.
Wie heißt der
Access Point? Das ist ein
Rogus
R710.
Lass dich nicht abschrecken von dem Neupreis.
Der Neupreis würde so halt keiner mehr
kaufen, weil das ist die letzte Generation, nicht die
aktuelle. Die aktuelle Generation ist
der R750.
Der R750 gibt's für
1242, also ein Schnapper.
Du musst auf Ebay gucken.
Schauen wir mal. Ebay.
Also ich hab irgendwie
260, 270 Euro für bezahlt.
Aus Vereinigten Staaten.
Ne.
Ich mein, kann man machen, aber
guckt euch mal den Versand an.
Das will man wahrscheinlich nicht haben.
Okay, neu eingestellt.
405 Euro.
Alter, was ist denn mit euch los?
Was ist denn mit euch jetzt verkehrt hier?
Guck mal da.
Aus Großbritannien. Aber
376, also wie gesagt, ich hab 260, 270 Euro
bezahlt. Was kann denn mehr als
ein 60 Euro Access Point? Einiges.
Kann jetzt schlecht alles
aufsehen.
Haben wir uns gestern im Stream alles angeguckt.
Der kann zum Beispiel eines
der Features, die ich ja persönlich mega nice
finde. Moment, muss ich mal
kurz was trinken.
Eines der Features, die ich ja persönlich mega nice finde ist,
dass der Passwörter kann für
jedes Pro Gerät.
Also du kannst quasi
ein WLAN aufmachen und
jedem Gerät ein eigenes WLAN Passwort
geben, was du dann löscht, wenn du das
Gerät wegschmeißt.
Unify hab ich aktuell.
Oh, mal kurz da drauf einzugehen.
Also Unify hab ich aktuell, aber da bin
ich an einigen Stellen nicht so wirklich damit zufrieden.
Vor allem, dass sie sich
dagegen sträuben, schon seit Jahren
eben das
zuletzt genannte Feature einzubauen,
dass man unterschiedlichen Geräten unterschiedliche
Passwörter geben kann. Und ich rede nicht von
WPA Enterprise, sondern
von IoT-Geräten, die kein
WPA Enterprise können.
Das kann fast jeder mittlerweile.
Mikrotik kann's,
Rakus kann's,
Cisco kann's,
Aruba kann's, aber
die haben andere Probleme. Und warum nicht
von Cisco? Weil Cisco den Krempl nur
in Zusammenhang mit irgendeiner komischen Network
Appliance von ihnen kann.
Und Aruba ähnlich. Da brauchst
du irgendeine Cloud
Clearpass, Cloud-Lizenz
oder sowas, dass das funktioniert.
Und sonstige Sachen. Und
Preis-Leistungstechnisch und
Handlingstechnisch
war das Ding das Beste, was ich gefunden hab.
Zumal man die ohne
Controller betreiben kann mit der Unleashed-Firmware.
Und für alle anderen man Controller
braucht. Und ich bin nicht so scharf drauf
für einen Access-Point noch einen Controller
daneben zu stellen.
Okay, also jetzt probieren wir das mal aus.
Er kann vor allem mehr als 60 Euro kosten.
Das stimmt.
Wobei das Unify auch kann. Ganz ehrlich,
ein neuer Unify-Access-Point
oder gebraucht hier ein für 260,
270 würde ich sofort den nehmen.
Aber, also ihr könnt
euch entweder ein R710 oder ein
R610 kaufen.
Ich würde keine wirklich, aber nicht für den
Preis. Nicht für die Preise, Leute.
Wie gesagt, ich hab 260, 270 Euro.
irgendwie in dem Dreh bezahlt.
Da muss man ein bisschen abwarten und
gucken. Man kann auch mal gucken, ob es
R720 gibt, aber es macht eh keinen großen
Unterschied. Ähm, ne, das
wird schon zu teuer.
Das muss man einfach mal abwarten.
Einfach abwarten, bis es
gute Angebote gibt und dann zuschlagen.
Also wie gesagt, unter 300 Euro ist ein guter Preis
dafür. Und die Dinger
sind, obwohl sie quasi jetzt nicht mehr verkauft
werden, weil die schon ein Nachfolgeprodukt haben,
trotzdem
sehr, sehr nice.
So, wie schenken
wir denn jetzt hier einen Request?
Get Stats
DPSK List
Was muss ich denn aufrufen?
Leute, jetzt hab ich hier schon zugemacht.
Wo waren wir denn? Hier.
CMD Stat
JSP muss ich aufrufen.
Also.
Okay, jetzt wird's
jetzt wird's spannend.
Äh
CMD
CMD Stat
Stats
Stats JSP
So, und ich will nicht
Get Strings, sondern Post
Post
Post will ich wahrscheinlich
einfach nur machen.
Und jetzt will ich ihm
sagen, http
Content, also
New String Content
Und zwar will ich ihm
Oh, hab ich das hier nicht
eingestellt in meinem Rider, das Alt und
Moment, das muss ich mal kurz
einstellen.
Äh
Shortcuts
Keyboard Shortcuts
Shortcuts
Ich möchte
Move Line Up
Line
Äh
Sieht's irgendjemand
Move Line
Wenn's irgendjemand sieht, sagt mir Bescheid.
Move Line Up
Move
Line Up, genau.
Keyboard Shortcut
Alt Pfeil Up ist
dafür schon, ja das ist mir egal.
Yes
Und jetzt
Edge Down
Ja, viel besser.
So, also, New String Content
Wir wollen das XML posten
Kein Encoding mitschicken
Soll er standardmäßig machen, was auch immer er will
Und
Jetzt wollen wir ihm sagen, das
ist, weiß jemand zufällig aus dem Kopf
den Meme
Mime Type für XML
Ist das Application
XML
M-Type XML
Warum C Sharp und nicht JavaScript
Warum nicht Python, warum nicht Rust, warum nicht Go
Kannste genauso gut fragen
Hat keinen
tieferen Grund, außer dass ich gerne C Sharp
Moment, Text XML
Und was war das andere
Application XML
Aha
Moment, was nehmen die denn hier, XML
Hier nehmen sie Text
XML, was sagt denn mein Browser
Was macht denn mein Browser beim Request
Header
Request Header
Content Type
Er sagt es ist Form
Es ist eine Form, aber es ist überhaupt keine Form
Come on, hier hat er doch
einen Session Cookie gesetzt
Warum hat er denn sonst kein Cookie bei mir gehabt
vorhin
Nur mal, dass ich das richtig verstehe
Die halten sich selbst nicht dran, es ist angeblich
Hier
Eine URL encodete Form
Und es ist offensichtlich keine URL encodete Form
Sondern ein XML String
Na geil, alter
Da kann ich auch Application
XML setzen
Wird wahrscheinlich egal sein, okay
Ich setze Text XML
Weil das Beispiel auch Text XML macht
Und wo ist jetzt das Problem
Okay
Ja gut
Da ist es halt nicht Response
Sondern Resp
Headers
Get String
Einfach nur mal gucken, ob das funktioniert
Run
Fuck
Ah, ich muss das Token
Ich muss das Session in dieses Token ja dann noch irgendwie setzen
Sonst bin ich ja gerade gar nicht authentifiziert
Oder authentifiziert schon
Aber nicht
So wie er das haben will
Wie heißt denn der Header hier
C
Okay, also muss ich jetzt hier noch zusätzlich sagen
Header adden
Add, ne Header
X CSRF Token
CSRF Token
Und jetzt Bäm
Please, Pregge, Pregge
Da sind wir
Nice, Massive XML Response
Alter
Leute, wir haben jetzt zwei Sachen die wir machen können
Entweder
Nehmen wir einen XML Parser
Und parsen aus dem XML den ganzen Krempel raus
Oder
Wir machen das so wie der Typ hier
Ähm
Und konvertieren das XML
Zu JSON
Und bearbeiten das dann so mit
Regex
Regex ist auch noch eine Möglichkeit
Vielleicht ist das mit Regex
Gar keine so schlechte
Idee, Leute
Kennt irgendjemand einen schönen
Einen schönen
XML Formatter für
Kommandozeile
Oder Python XML Format
Bash, das geht auch bestimmt relativ well
Pretty, Pretty Print
XML Lint
XML Lint
Siehst du mal hier
X, habe ich das überhaupt installiert
Minus, minus Format
Okay
Habe ich witzigerweise installiert
Ich weiß ehrlich gesagt nicht warum, aber okay
Es ist noch nicht mal gültiges XML
Es ist noch
Nicht mal gültiges XML
Meine Güte, was haben die da programmiert
Mann
Hä, was ist das
Wo kommt
Ah, ich, ich, ich, ah okay, okay
Ich habe nichts gesagt, ist okay
Ich habe nichts gesagt, ist alles in Ordnung
Nichts Schlimmes, ich printe das ja selbst
Okay
Boah, Painstamp
Alter
Okay, Leute, wir könnten
Wir könnten Regexen, wir könnten
Regexen
Massive, da brauchen wir jetzt aber den
Massive Fifehead Regex hier
Dafür, okay
Regex
Wir können es auch lassen
Ja, was ist, ich bin mir jetzt gar nicht sicher
Also wir haben, wir haben drei Varianten
So wie ich das sehe
XML Parser
Benutzen, in .NET eingebaut
XML
In JSON konvertieren
Oder Regex rauscrappen
Komm, wir machen mal
Ne, Test String so rum
Also, also, komm
Unsere Regex Skills, das ist doch gar nicht so
Schwierig, das sieht doch gar nicht so schwierig aus
Also, Punkt Sternchen sollte alles matchen
Okay
Wir matchen
Mac
Mac
Gefolgt von Quotes
Punkt Sternchen
Non-Creedy
Quote
Und eigentlich will ich das hier matchen
Das geht doch, Leute, das geht doch
Das ist doch in Ordnung
Das kann man sich doch so rausholen
Okay, als nächstes
WLAN ist
Dings, User
Interessiert mich als nächstes
User
Äh
Moment
Muss jetzt so machen
Ah, Regex
Okay, Group 1
Okay, das geht, das klappt, das klappt
Ähm
Warum funktioniert denn das so
Mit einem Leerzeichen dazwischen
Das ist kein gültig
Das matcht überhaupt nicht, weil hier nichts dazwischen ist
Das müsstest du eigentlich schon so machen
Kann das sein, dass das der Regex-Tester
Einfach für mich macht
Um Fifat zu sein
Egal
So, also wir brauchen den User
Wir brauchen
Last Rekey
Next Rekey
Expire
Startpoint
Passphrase brauchen wir noch
Passphrase
IP vielleicht
Ja, ist doch gut
Leute
Die fachfertigste Methode wäre, dass du nach
Dass du nach Space splittest
Dann jeden Part nach
Dann hast du die
Was?
Nach Space splitten?
Stimmt
Das würde tatsächlich funktionieren
Aber nur in dem Fall
Aber nur in dem Fall würde es funktionieren
Ich könnte, ich könnte splitten
Ich könnte splitten am
Am Space
Dann bekomme ich diesen ganzen Müll hier
einzeln und dann muss ich gucken,
Contained das Split
ein Gleichheitszeichen und
dann Splitten am Gleichheits...
Oh, nee, das ist aber...
Das ist aber eklig.
Nee, nee, nee, nee. Aber wir machen jetzt
Regex, Regex-Stells.
Ähm.
Okay, also.
Wie nennen wir das denn jetzt hier?
Das müssen wir dann nachher noch irgendwie
rappen in der eigenen Klasse. Wie nennen wir das Ding jetzt hier?
Ähm. XML
Response.
Nee, per Line kann ich nicht machen,
weil das ist nur die Line, weil ich es XML
formatiere. In Wirklichkeit
sieht der Output so aus.
Gibt keine Lines.
Oder ein bisschen
XPath. Jaja, das klingt auch. Aber ich hab
ehrlich gesagt seit 15 Jahren kein
XML mehr gepasst. Ich weiß gar nicht, wie man das
.NET-Gescheit macht.
Document. XML-Document.
Irgendwie war es Load und dann
sonst wie.
Zeig mal. Vielleicht ist es noch... Vielleicht ist es ein
einfach. XML-Document.
Pass. C-Sharp. Wie sieht denn das aus?
X-Object. X-Node.
Nimm X-Document.
Was ist das? Warum gibt es da schon wieder verschiedene Sachen?
Okay. X. X-Document.
MonkaS. Dann, okay, probieren wir es.
Probieren wir es erst mal so.
Also.
X-Document.
Pass.
X-Document.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
Elements. Wie funktioniert
das? Kann ich da sowas wie
im Browser Selector schreiben?
X-Pass Select C-Sharp.
Wie funktioniert das?
Habe ich noch nie
gemacht. Legit noch nie.
Also.
What?
Geht das auch in einfach?
Geht das auch in
normal? Nehmen wir lieber
Punkt Elements. Okay.
Elements.
For each. Mal gucken, was da rauskommt. Ich habe keinen
Plan. Element.
Ups. Okay.
Guck mal, aus irgendwelchen Gründen
habe ich das jetzt gleich pretty printed.
Elements.
Das war einfach nur
ein Element, oder?
Wie?
Meine Güte. Wie macht man
das jetzt gescheit? Gibt es, warum gibt es
nicht sowas? Und dann
Response und dann
Okay. Also. Sehe ich das jetzt richtig?
Ich mache jetzt mal Root. Root Element ist
ja das oberste in dem Fall.
Ich bei
Feather XML Bearbeitung.
So. Root. So.
Root Element sollte jetzt ja alles sein, wenn er
es printet. Gut. Gut. So.
Elements. Ne. Element.
First. First.
First Node.
Okay. First.
Element.
Mein Gott.
Ah.
Wie macht man sowas?
Elements. Element.
Element.
Get the first.
First Element.
Specified X-Name.
X-Name ist der Elementname.
Also quasi
sowas da?
Ich habe keine Ahnung, ob ich das richtig...
Ne.
Was? Root Descendants?
DPSK. Ich glaube euch jetzt
einfach mal, Chat.
Tatsächlich. Das scheint was zu
funktionieren. Da geht was.
Habt ihr schon was von
auskommentiert?
Kommentaren gehört? Gibt's in dem Tool, mit dem ich gerade entwickle?
Was? Habt ihr schon etwas von
auskommentierten Kommentaren gehört?
Hä? Du meinst sowas hier?
Und dann wieder
ankommenten? Oder was?
Ne.
Okay. Jetzt. Feifert-Check für den Chat, Leute.
Wenn das funktioniert,
gibt es einen neuen Feifert-Award
für den Chat.
Haha. Es funktioniert.
Excellent.
Massive IQ.
Die Spatzgranate.
Ja, du wusstest.
Okay. So.
Jetzt haben wir die Elements davon.
Und jetzt müssen wir da was rausbekommen.
Kann ich das jetzt
mit Attribute
drauf zugreifen?
Also quasi Element
Attributes
Attribute und dann sowas
sagen wie
Mac.
So. Und dann printet er mir die
Mac-Adresse.
Ah.
Poggers.
Aber jetzt will ich nur den Value haben.
Aha.
Guck mal da.
Ha. Das funktioniert ja tatsächlich
relativ gut.
Relativ gut.
Man kann sich jetzt drüber streiten,
ob das wirklich gut funktioniert.
Funktioniert relativ gut.
Okay. Dann machen wir jetzt mal eine extra Klasse.
Public Class
Rokus
User.
So.
So. Und der User hat
ein String.
Was?
Name.
Also Name.
Haben die Dinger.
Dann
eine Mac.
String.
Mac.
Dann haben wir
WLAN-ID. Brauchen wir eigentlich gar nicht.
Äh. Mac.
Created wäre natürlich noch cool.
Klasse erstellen
und reinziehen.
Ja, wenn du mir sagst, wie man das mit XML-Documents macht,
würde ich, mache ich das.
Dürfte ja echt am einfachsten sein.
Achso. Pass.
Pass. Phrase. Brauchen wir noch.
Gibt es auch was wie Element2?
Oder Serialize?
Äh.
Keine Ahnung, wie das funktioniert.
Also das bedeutet doch jetzt im Endeffekt,
ich kann jetzt hier sagen,
Ah. User. Gleich.
Ups.
Das ist ja so richtig.
Ah. User. Gibt es schon.
Aha.
XML-Serializer.
New.
Was?
Get-Type?
Was ist P?
So sehen auskommentierte Kommentare im Code
meines Strongs Automatisierung zu...
Warum gibt es einen Status über auskommentierte Kommentare?
Äh.
Mac.
So.
Ich kann doch nicht mal Auto-Compliten.
So kaputt ist das, was ich hier baue.
So. User.
Alter.
Der kann doch nicht mal meine...
Ah. Jetzt kann er es. Okay.
Element.
Äh. Wie hieß der Krempel jetzt?
Chat. Hochscroller.
Wie hieß der Kram jetzt?
User. Einfach nur User.
User.
Und Passphrase.
Ist das Passphrase?
Passphrase.
Passphrase. Okay.
So. Und wenn das jetzt funktioniert, dann sollte ich für jeden User...
Da kann man einen Rekord draus machen übrigens.
Dann kann ich es einfacher printen.
Okay. Funktioniert das jetzt?
Ha!
Easy XML gepasst.
So einfach kann es gehen.
Sehr gut.
Keine Ahnung, was geht.
Ja, wir haben die User vom Webinterface abgefragt.
Mit Mac, mit Passphrase.
Vielleicht sollten wir uns dann die WLAN-ID nochmal holen.
Weil die WLAN-ID könnte tatsächlich relativ praktisch sein.
Wobei, jetzt müsste man doch gucken, wie man die WLAN-ID zugeordnet bekommt zum eigentlichen WLAN-Name.
Denn aktuell haben wir nur die WLAN-ID.
Max docks sich da. Wie soll ich mich bei sowas denn docksen?
Resette den Access-Point danach doch.
Beziehungsweise, ähm...
Mach, mach das WLAN und das Passwort raus.
Vor der Online-App.
Online geht.
Access-Point hängt da mit gestoppten WLANs überall dran.
So, Passphrase.
Jetzt haben wir hier noch WLAN.
Und das ist...
Was? WLAN?
WLAN SVD-ID.
Wo? Jetzt müssen wir natürlich noch rausbekommen, wo denn da jetzt drinne...
Äh.
Achso. Ja.
Dann ist die Zahl halt ein String.
Was soll's.
Kannst du ja noch einen Vendor zu Mac raussuchen.
Ne, ne.
Wobei, die Idee ist gar nicht...
Ich mein, mehr Features schaden eh nicht.
Warum nicht?
Finde ich...
Nein, lustige Sache. Nicht, dass man das brauchen würde.
Ähm...
So, jetzt haben wir den ganzen Krempel.
WLAN-ID.
Wie krieg ich zur WLAN-ID passend jetzt raus, wie der Name vom WLAN ist?
Das müsste doch hier auch irgendwo drinne stehen.
Alter.
Yes. Skip.
Ähm...
Gucken wir mal.
Service.
DPS-K.
Generate.
Okay.
Hier.
Request.
Response.
Hier, WLAN.
WLAN-SVC-List.
Guckt mal.
WLAN-S...
Aha.
Und was ist die ID?
ID?
Ne, WLAN.
Das war was anderes.
Enable Type.
Äh.
Ja.
Ja.
Und woher weiß ich?
Jetzt die ID von dem Ding?
Da müsste irgendwas 1 drinne stehen.
Alter. Hört das nochmal auf.
WTF?
ID.
Hier ist es.
ID.
Okay.
Noch mehr XML-Shit.
Also, Conf. Underscore.
Request.
Das ist jetzt...
Das ist halt so bescheuert, Alter.
Diese API, wer hat sich das denn ausgedacht, man?
Okay.
So, jetzt müssen wir uns nämlich noch die WLANs abrufen.
Und dann können wir den User printen.
Und dann...
Machen wir das in der eigenen Klasse.
Weil aktuell blick ich schon gar nicht mehr durch, was hier überhaupt wie wo passiert.
Also, das müssen wir irgendwo hier davor machen.
Also...
So, also XML-Request.
Das da.
XML.
Also, decrypt x truecaller.
Das kann wahrscheinlich alles weg.
Ich denke mal, comp.
WLAN-SVC.
Das werden wir wahrscheinlich brauchen.
Schauen wir mal, ob da jetzt der ganze Mist drinne steht.
Das ist wirklich...
Also, diese API zu bedienen ist wirklich hochgradigst painstamp.
Ich kann schon verstehen, dass die keinen Bock...
Äh...
Muss ich doch was anderes schicken.
Muss ich doch den kompletten schicken.
Achso!
Ist doch die falsche Uhr.
Null.
Ich kack noob.
Falsche Uhr.
Äh...
Es muss ja auch nach Conf.
Conf.
Ich sag dir gleich, was das für einer ist.
Brage.
Aha!
ID 1.
Sehr schön.
So.
So.
XML-Format.
Hier.
Passwort-Leak, Leute.
Ähm...
Alles klar.
Guckt mal da.
WLAN-SVC brauchen wir jetzt.
Und dann dort das Attribut für ID.
Das ist ein...
So einer.
Die sind ganz...
Die sind furcht...
Die sind sehr günstig, diese Access-Points, wenn man die sich neu kauft.
Aber I beregelt.
So, mal gucken, ob ich das jetzt richtig gelernt habe, wie man diesen Krempel...
Wie man diesen Kram passt.
Also.
So.
X-Document.
Pass.
Und jetzt sag ich X-Document.
Descendants.
So wie hier unten.
Im Prinzip kann ich mir das Copy-Pasten.
Descendants.
Bloß, dass ich jetzt nicht DPSK haben will.
Sondern WLAN-SVC.
Und wenn das jetzt funktioniert, krieg ich meine WLANs geprintet.
Der kann...
Der hat deutlich mehr Features als das ganze Unified-Zeug.
Das sieht doch prinzipiell ganz gut aus.
So, und da will ich jetzt Attribut...
Attribut, Name und ID haben.
ID und Name.
Schauen wir mal.
Pock!
So haben wir die ganzen WLANs. Nice.
So, dann brauchen wir noch...
Da brauchen wir mal ein Dictionary jetzt.
Äh, keine Ahnung.
WLANs.
WLANs.
Dictionary.
Dictionary.
Dictionary.
Wobei, warum soll ich ein Dictionary...
Na doch, weil die IDs ja nicht bei Null anfangen.
Aus Int und String.
Und dann sagen wir WLANs.
Add.
So, und das hier ist die ID.
Alles natürlich als String.
Und das hier ist der Name.
So, und da machen wir irgendwie eine hübsche Kommando-Zeitanwendung draus.
Du würdest einen Counter begrüßen.
Ja, das müsste man höchstens mit...
Haben wir nicht bei Nightbot...
Kann Nightbot nicht counten?
Nightbot hat doch Counter.
Äh...
Übrigens, String wollen wir haben.
ID.
ID.
Name.
Gut.
Und jetzt können wir sagen, an der Stelle hier unten,
wo wir die ganzen WLANs auflösen.
WLAN.
So, wir wollen nämlich haben WLAN.
Und dort an der Stelle,
das WLAN mit dieser ID.
Und wenn das jetzt funktioniert,
dann habe ich jetzt den Namen da drin, anstatt die ID.
Bam!
Okay, also, wir haben User,
wir haben Mac,
wir haben Passphrase und wir haben das WLAN.
Damit kann man doch schon mal was anfangen.
Gut, und daraus machen wir jetzt ein Kommando-Zeilenprogramm.
Ich bin ja geneigt dazu,
das jetzt endlich mal auszulagern
in irgendeine eigene API-Klasse.
Weil so kann das doch niemand handeln auf Dauer.
Ja.
Gerade, wenn ich mir dieses Upfuck-XML-Zeug ansehe,
kriege ich ja Anfälle.
Okay, wir machen eine eigene API-Klasse.
Also, das Ding heißt roguz-api.
So, das Ding, ähm,
das Ding kriegt kein Constructor,
das Ding kriegt eine Factory-Methode,
oder wie man das genau nennt.
Public static,
wenn wir das einfach mal loggen.
Was?
Load, was?
Achso.
Ne.
Login.
Äh, ich hab montags immer frei.
Allerdings, was die ganzen Leute hier machen,
das weiß ich nicht.
Ich bin natürlich froh, dass ihr da seid.
Also, Login.
Oh, pmonks, ja.
Ich hab montags immer frei.
Also, Login, gut.
Also, wir, wir machen das jetzt mal,
wir schmeißen mal die Sachen hier raus.
Also, Login funktioniert folgendermaßen.
Das hier ist mein Login.
Mein Login-Code.
Codera.
Async.
Task.
So, IP.
Ähm, die IP wird einfach hardcoded.
Wobei, ne, die IP, die sollten wir eigentlich bei Login bringen.
IP.
Sollten wir eigentlich bei Login übergeben.
Okay.
So, weil jetzt kann ich nämlich sagen,
API, Login,
IP, User, Passwort.
Und das kann man sich dann auch per Kommandozeile
ordentlich, ähm, einlesen.
Das sieht schon mal deutlich besser aus.
So, jetzt bekomme ich das hier zurück,
wenn ich mich einlogge.
Ähm, so, Private.
Jupp.
User brauchen wir nicht mehr.
Passwort brauchen wir auch nicht mehr.
String, die IP brauchen wir eigentlich nur.
Und das Token brauchen wir.
Ansonsten eigentlich nix.
Spectre, die nehmen wir auch gleich.
Die ist richtig pock.
Mit der habe ich schon ein paar Sachen gemacht.
Die ist richtig gut.
Da kann man dann auch Tabellen und Spinner und so machen.
Spectre-Konsole ist richtig nice.
Sowohl das CLI-Parser als auch das, äh, Highlight für Farbe und so.
Das ist richtig nice.
Das werden wir auch gleich verwenden.
Ja.
Okay, wenn das Ding, wenn das Ding Exceptions,
das ist übrigens der Grund, warum ich das in eine, äh,
Static-Methode zum Klasse-Erstellen angelegt habe.
Und nicht in einem Konstruktor.
Weil, man sagt ja so aus Pauschal, man sollte in einem Konstruktor
keine Exceptions vorkommen lassen.
Ja.
Und hier kann es natürlich jede Menge Exceptions geben.
Also von, von, Ding ist nicht erreichbar auf der IP
bis Return-Code stimmt nicht oder sonst was.
Jetzt haben wir das hier drinnen stehen.
Das brauchen wir als nächstes.
Brauchen wir eine, eine, äh, Public.
Public, Static, Async-Task, I-Read-Only-List.
Jetzt wird's aber hier sowas von, oh.
Objekt-Oriented.
Objekt-Oriented.
Mehr geht nicht.
Äh.
Nicht Static.
Was mach ich denn da?
Achso, vielleicht soll ich das Ding auch mal irgendwie nennen.
List-User heißt das jetzt.
So.
List-User.
List-User funktioniert folgendermaßen.
Und zwar so.
Monkel ist.
Api-List-User.
Wait.
So funktioniert List-User.
Bloß ein bisschen schöner gemacht noch.
Was?
Nein, nein.
Das ist Underscore-IP.
So.
Das sieht doch jetzt schon ein bissl schöner aus.
Und jetzt ist das hier die User.
Da machen wir eine Liste.
List-New-List mit den Usern.
Und sagen ihm hier List-Add den User.
So.
Äh.
So richtig schreibt.
Und dann hier unten.
Return-List.
Das kann man natürlich alles noch schöner machen.
Weil das ist jetzt ein riesenlanger Blob in sowas hier drinne.
Aber das solls jetzt erstmal tun.
Beispielsweise das XML-Parsen.
Das würde ich später.
Das würde ich später noch auslagern.
Ich mein, ich mach ja hier immer das gleiche.
Ich könnte sowas sagen wie, keine Ahnung.
Äh.
Get XML-Element.
Und dann.
Ja.
Sowas.
Wasser-Esser.
Dankeschön für den Sub.
Das solls jetzt aber erstmal so tun.
Damit kann ich leben.
Das ist jetzt natürlich in der Handhabung.
Deutlich, deutlich schöner.
Weil jetzt kann ich einfach sowas hier machen.
Äh.
User.
Gleich.
Achso.
Tja.
Ist halt blöd.
Das.
Wie nennt man das?
Login-User.
Login.
Passwort.
Passwort.
So.
Wenn ich jetzt alles richtig gemacht hab.
Lässt es sich jetzt deutlich schöner handeln.
Und.
Hallo.
For each.
Please als Makro.
For each.
User.
In.
Users.
User.
Schauen wir mal.
Müsste das gleiche rauskommen jetzt.
Hey.
Kommt das gleiche raus.
Okay.
Nice.
Und jetzt machen wir da richtig.
Poggers.
Five-Hertige Konsolenausgabe.
Spektakonsol.
Spektakonsol.
Das Ding ist wirklich nice.
Also hat ja auch gerade im Chat einer geschrieben.
Damit kann man wunderbares CLI auf der Konsole machen.
Äh.
Ja.
Command Line Interface und Colors und Gedöns.
Das ist wirklich cool.
Das ist ein bisschen wie.
Ich hab das Python Gegenstück vergessen.
Das gibt's quasi in nahezu jeder Programmiersprache gibt es irgendwie so paar coole Konsolanwendungen.
Libraries.
Und für C-Sharp ist es halt Spektakonsol.
Spekture.
Spektre.
Konsol.
Gut.
Und jetzt können wir nämlich sowas hier sagen.
Anstatt das hier einfach nur so eklig zu printen.
Können wir jetzt sagen.
Table.
Jetzt haltet euch mal fest was das Ding für nice Sachen auf der Konsole machen kann.
Table.
Add Column.
So.
Wir wollen ausgeben.
User.
Weil jetzt wird's jetzt wird's auch optisch nicht schlecht.
Äh.
User.
Wollen wir ausgeben.
Wollen wir noch ähm.
Haben wir denn hier.
Mac.
Passphrase.
Wlan.
In welchem Wlan die sind.
Dann ähm.
Welche Mac die haben.
Und am Ende welches Passwort die haben.
Weiß jemand was in IoT so die gängige Sprache sind.
Ja leider C++.
Also im Handelsübrige so im Heimbereich ist es viel Arduino kompatibles Zeug.
Von äh.
ESP 2866 bis ESP 32.
Und das ist leicht.
Leider leider.
Äh.
Ausschließlich C.
Hauptsächlich C++.
Was halt ziemlich suckt.
Aber man kommt halt nicht drum herum.
So.
Ähm.
Table.
Table.
Add row.
User.
Bam.
Also.
Zuerst der User Name.
Dann User Wlan.
Dann User Mac.
Dann User Passphrase.
Also.
Zuerst der User Name.
Dann User Wlan.
Dann User Mac.
Dann User Passphrase.
Also.
Zuerst der User Name.
Dann User Wlan.
Dann User Mac.
Dann User Passphrase.
Dann User Passphrase.
Passphrase.
So.
Und jetzt.
Table.
Render.
Ne.
Äh.
Vergessen.
Table.
Kein Schimmer.
Table.
Achso.
Einfach so.
Ok.
Table.
So.
Und jetzt passt mal auf.
Wie.
Wie.
Wie nice das auf der Konsole jetzt aussieht.
Bam.
Ist das nicht eine huge, fiveheadige, optisch ansprechende Ausgabe von den Usern auf der
Kommandozeile.
Das ist doch richtig nice.
Oder?
Richtig pock.
Guck mal hier.
Bam.
Zack.
Jetzt brauchen wir.
Also am besten wäre es natürlich, wenn man sowas ausführen könnte später dann irgendwie.
Was weiß ich.
Äh.
Irgendwie so.
Äh.
List.
User.
Oder sowas.
Oh.
Girls.
Ja.
Kommen die Franzosen sogar an.
So.
Und jetzt können wir noch sagen.
Table.
Table.
Expand.
Expand.
Und jetzt ist die Tabelle auch gleich.
Guckt mal.
Ist die Tabelle auch gleich über den ganzen Bildschirm.
Massive.
Das ist doch.
Das ist doch schonmal deutlich besser als über das Webinterface so gedöhnt zu machen.
Das gefällt mir jetzt schonmal sehr gut.
So.
Jetzt haben wir rausbekommen.
Also erste Hürde ist genommen.
Wir haben rausbekommen wie man User abruft.
Die nächste Hürde ist wie kann man User anlegen.
Nach Namen sortieren.
Äh.
Moment.
Stand da Expire irgendwo drinne?
Stand da irgendwo drinne wann die Expire?
Moment.
Ich muss mir mal kurz das XML.
Ich muss mir mal kurz das XML ausgeben hier.
Ähm.
Oder Created.
Was hat man da drin stehen?
Mac Last Next.
Ist das hier quasi Created?
Macht der.
Erzeugt der daraus Created?
Das ist doch garantiert irgendein Unix Timestamp.
Unix Time.
Alter.
Was ist das für ne?
15.
5.
Gestern.
15.35.
Ja.
Okay.
Das ist.
Das brauchen wir noch.
Da kann man das nämlich nach Änderungsdatum, nach Modified Datum machen.
Last Rekey.
Das brauchen wir unbedingt.
Das ist.
Das ist Pogge.
Was bei dir hat sich jemand neulich beschwert, dass CLI voll veraltet ist?
Ja.
Das sind die ganzen Kacknoobs die keine Ahnung haben.
Das sind auch die Leute die unter Windows dann so klicken.
Wenn du denen sagst so nach dem Motto mach mal den Explorer auf und werft den USB Stick
aus.
So.
Dann machen die Leute so.
Auswerfen.
Das sind die gleichen Leute die sagen, dass CLI veraltet ist.
Die 10 Minuten.
Die 10 Minuten brauchen sowas.
Sowas zu machen.
Ja.
Anstatt.
Bam.
Bam.
Bam.
Auswerfen.
Gut ist.
Das ging mir ein bisschen schnell.
Ja.
Das ist schon.
Das ist grenzwertig gewesen.
Ja.
Modified.
Ja.
Aber.
Am.
Am.
Am.
Ab.
Dated.
At.
Das nennt man das so.
Date.
Time.
Jetzt müssen wir dem bloß sagen, dass der updated at last Rekey, und jetzt, Oh!
Wie ging das nochmal?
Unix time zu einem Date time.
Das war neu.
Das geht noch nicht so lang.
Zíschab.
und unix unix time to date time das ist noch nicht so lange her dass sie dafür was geändert
haben das ist müll was die hier schreiben das ist nicht mehr aktuell dass da genau date time
offset from unix time seconds offset from unix time seconds moment jetzt musst du noch als
in passen jetzt wird es jetzt wird es abartig long pass da habe ich glück wenn es hier nicht
knallt date und wie mache ich das jetzt zu einem date time tix utc date time local date time ja
das ist gut so jetzt schauen wir mal ob das an sich funktioniert programm
moment
modified ist wahrscheinlich sogar ganz sinnvoll updated wenn man das als erstes macht user
updated ach nee ach jetzt muss ich noch formatieren to string das hätte ich eigentlich gleich machen
können an der stelle wie willst du etwas sagen man versteht hier nicht auf den ersten blick was
da passiert ich finde es auch interessant
ich finde es äußerst beruhigend also umso mehr die idee orange unterkringelt umso sicherer ist das
ganze umso mehr ist das überprüft umso öfter ist es schon quasi während der entwicklungszeit
überprüft da kann ja nichts mehr schief gehen so short date short time ist okay das ist das
ist kokona kokona schreibformat custom das will ich haben das will ich haben
ohne zz ach so im moment ich will ich will den tag ja noch dabei haben
ddd oder was ist das tag ja so war es im endeffekt was ja schon besser also ich will dd ja genau dd.mm.jaja genau oder
ich will dd ja genau dd.mm.jaja genau oder ich will dd ja genau dd.mm.jaja genau oder
will ich vielleicht so ne will ich nicht ja dass sie dann chat stimmt nicht was sie geschrieben habt
ich glaube ich das jetzt einfach nein nein fast aber yy ist richtig so aha so und jetzt moment
wir wollen monat monat wir wollen das haben und das doppelt beistelle ich immer so will ich das haben
in der fünfte 2002 15 35 so ist das nice und jetzt sorten wir das danach und zwar users oder bei user
updated at manchmal macht ihr aus was autocomplete komisches zeug so und jetzt
haben wir das ganze aufsteigend sortiert kann man den zeilenabstand vergrößern
du kannst das ziemlich genau konfigurieren aber wollen wir den zeilenabstand vergrößern also du
kannst relativ viele machen bei dem kram hier weiß ich aber aus dem kopf nicht wie man das
macht du kannst den border ändern kannst alignment ändern den titel die breite man kann bestimmt auch
irgendwie noch extra zeilen einfügen die zeilen abstand nicht du kannst extra zeile an machen die
kannst du nichts ändern aber du kannst die du kannst ja nur extra zeilen rein machen also du kannst so
viel gedöns hier einstellen wirst du nicht mal wie das überhaupt genau funktioniert aber so so
ehrlich gesagt reicht es mir so erstmal aber das ist doch sehr schick jetzt oder und wie schnell
das geht besser als besser als mit einem ferngesteuerten chrome ist es auf jeden fall
das war ja meine erste idee wir könnten chrome fernsteuern anstatt das so zu machen die so ist
viel besser damit kann man jetzt richtig was anfangen damit kann man tatsächlich nicht jetzt
müssen aber noch user anlegen das wird auch noch mal das wird auch noch lustig also jetzt kann man
sich user anzeigen lassen und man kann user bald updaten beziehungsweise user anlegen also sprich
wenn irgendjemand six herrliches kommt und sein passwort vergisst und wisst ihr was das coole ist
dadurch dass wir jetzt hier das über kommando
zeile laufen haben kann ich das dann auch direkt in label champ pipen und ein etikett drucken lassen
mit der zugangs mit dem mit dem zugang also sprich theoretisch mal angenommen was kommt
jemand zu besuch dann gehe ich hier hin tippe dann ein was weiß ich hier es gibt den user namen
ein cq user und dann kann ich irgendwie noch sagen output als png oder als qr code und das wird dann
in den label champ gepiped und der label champ druckt es dann aus bei cico alles fit ja die liegt
irgendwo im hof draußen gerade und rollt sich darum die mac ist ja noch nicht ganz sauber doch die mac
stimmt wenn keine mac drin steht heißt das nur dass einmalig sich jeder jede mac adresse anmelden kann
und es erst dann gelockt wird also wenn mac leer ist heißt es hat sich einfach noch nie jemand mit
diesem user angemeldet was richtig ist weil das hat sich noch keiner mit dem user angemeldet ich
werde das jetzt auch nicht einschalten
das wlan weil ich habe schon alles geleakt von passwörtern bis sonstwas also werde ich jetzt hier nichts einschalten
ne ne das ist access point spezifisch also die machen das so du kannst user anlegen im access point und du kannst mac adressen vergeben dann kann nur dieses gerät mit diesem passwort und dieser mac rein du kannst aber auch die mac leer lassen dann musst du das wlan passwort eingeben und beim ersten mal einloggen merkt er sich dann die mac dazu
kann man noch ein last logon zeile oder sowas hinzufügen
ne das haben die in der api nicht drin stehen guckt wir können nur wir können nur das machen was die also es sei dann man klickt das über das web interface irgendwie raus also wir können bloß id rollen id mac wlan name wlan id angelegt expire die ip könnten wir noch uns auslesen für eingeloggte geräte aktuell
ja mehr kriegen wir nicht raus aber die ip ist tatsächlich gar nicht so schlecht
die ip sollten wir uns das schreibe ich mal zumindest als to do noch auf irgendwo
hier unten wo ich das andere to do hin hab das war einfach noch just for fun keck weh
aber ip ausgeben für ein geloggte devices das ist das ist nicht verkehrt
das könnte man tatsächlich machen an der stelle weil wenn es die api hergibt warum nicht
sollen jetzt legen wir user an da bin ich mal gespannt alles wieder dicht machen user anlegen
ok also leute user anlegen ist ziemlich eklig wenn ihr user anlegen wollt könnt ihr nicht einfach sagen
ad user ihr müsst eine csv datei hochladen die so aussieht und in dieser csv datei kann man dann
bescheid man dann sagen wie der user heißen soll
w user
so
und welche mac adresse der hat wenn man die mac adresse leer lässt dann ist es halt einfach nur
ein user der sich einloggen kann mit dem passwort ohne bestimmten gerät bis zum ersten mal
und das heißt wir müssen jetzt der csv generaten
Aber was ist nicht schlimm ist weil man unsere csv wird so aussehen also unsere erst csv heißt
user komma dass unsere csv
mehr braucht sie nicht
Es csv xml
Die haben wirklich jeden bullshit drin oder was fehlt noch leute xml csv
Jsp server java server pages
Was was gibt es noch für bullshit den man den wir vielleicht noch finden drin
ok wir müssen uns das ganze aber mal in ruhe anschauen und zwar
Also wenn man jetzt hier user
hochlädt
braus
downloads batch dps k example
So dann macht er diese zwei requests
requests
Doc md system check memory
das ist bevor ein upload startet aber genug speicherplatz hast hat
ich denke mal das ist ok
und danach gibt es ein upload
upload
request
Das ist jetzt eine form form encoded pdf pdf ist ja kein schritt
also wohin geht denn der request
hier
ok boah boah das wird das wird ja abfuckt also create user create user machen wir jetzt
Public void create user
String name
Rest können wir dann machen also da wollen wir hin
Das bedeutet wir müssen einen post machen
gerade mal wieder kopieren
Create User
wir meinen an der stelle return
api create user
Und wir legen jetzt user user cute chat task
ok
wie wir das dann machen.
Wie füllen wir das Ganze?
Also wir brauchen ein Post-Request dahin.
IP ist richtig, Admin, Upload, Request, XHR, ja, soll mir recht sein.
So, dahin machen wir ein Post-Request.
Mit dem Header auf jeden Fall dran.
Brauchen wir sonst noch irgendwelche Header, Request-Headers.
Content, ah, das ist glaube ich nicht so wild.
Hier, alles klar.
Stop, das Admin in der URL fehlt.
Oh, ihr habt recht, tatsächlich, Pog.
So, with Header, Post Async.
Okay, Moment, ich brauche keinen Post, ich will einen Form.
Kann das ein Form-Upload machen?
Wie macht man ein Form-Upload?
Leute, da bin ich überfragt.
Äh, Form, Post-Form.
Form-Post, ah, da gibt es Form-Post.
Guck mal, da gibt es doch schon.
Post-Url-Encoded-Async, alles klar.
Das ist doch mal was, wenn diese Seiten ordentliche Hilfe-Pages haben.
Dann weiß man ja nichts, was man macht.
Okay, Post-Url-Encoded-Data.
Was poste ich denn da jetzt eigentlich, genau?
Doc is King, genau.
Request.
Ja, die XML-Post.
Das wusste ich doch.
Theoretisch muss ich nur die XML posten.
Content-Type muss ich noch setzen.
Ne, der Content-Type ist der in der Form-Data mit drinne?
Oh, jetzt bin ich aber...
Boah, kein Schimmer.
Hoffen wir mal, dass das funktioniert.
Ich bin jetzt etwas ratlos, wie man das jetzt postet.
Form-Data.
Äh, ach nein, das muss ich machen.
Ein Multipart-Form-Data, oder?
Request.
Multipart-Form-Data muss ich machen.
Post-Multipart-Async.
Okay.
Jetzt wird's aber noch 6, hätte ich ja was.
Multipart...
Ich mach das mal, wie bei denen im...
Das in der Hilfe drinsteht.
Also...
Post...
Warum ist das nicht erlaubt, da zu erwaiten?
Ah, weil ich das Ding nicht Async genannt hab.
Ach so.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Also...
Oh.
Okay.
Ja dann.
Ich peg was.
Deswegen kommentieren wir den ganzen Shit jetzt mal aus.
So.
Gucke ob's tut.
Also...
Await api creadooser.
Gut.
Post-Multipart...
Add String...
Ah!
Das sind jetzt die Files, oder?
Also sprich...
Request platform...
Name?
Okay, die zwei Sachen braucht man.
Name U.
Name Action.
Boah, was ist das denn?
Wie funktioniert das?
Okay, das kriege ich nicht so einfach nachgebaut.
Also, wie geht das jetzt?
Add.
Okay, Add String Content.
So.
Dort poste ich jetzt meine CSV rein.
Also, meine CSV wird ja im Endeffekt ganz einfach so aussehen.
Name, Komma, fertig.
Das ist meine ganze CSV.
Also, meine CSV.
Kein Encoding extra setzen.
Aber Media Type will ich haben.
Text CSV.
Boah, das ist ja Best of Bullshit Dateiformate, was die hier machen.
Name U.
Oder?
Name U.
Oh Gott, ich check das nicht.
Was sehe ich denn hier überhaupt?
Fuck, Alter.
Um was geht's?
Ich versuche meinen Access Point über die nicht offizielle API zu steuern.
Gerade User anlegen.
Alter, fuck, Mann.
Ich habe keine Ahnung, ob das so funktioniert.
Wo würde ich denn jetzt File Name noch hingeben?
Wo würde ich denn jetzt hier das File Name angeben?
Ich meine, ich würde jetzt davon ausgehen, dass da jetzt sowas rauskommt,
wie...
Wir lassen es mit File Name einfach mal weg.
Content Typ.
So, das ist der Content.
So, und jetzt brauche ich noch was anderes.
Jetzt brauche ich noch was mit dem Name.
Add String.
Ah, ein Add File.
Add File.
Ah.
Ich bin extrem verwirrt.
Ich habe keine Ahnung, wie das funktioniert.
Was ist für ein Access Point?
Ist so einer hier.
So einer.
Ich habe keine Ahnung, was ich hier mache.
Also, wir probieren es jetzt einfach mal.
Es wäre cool, wenn das Ding irgendwie eine ordentliche Debug-Ausgabe hätte,
weil ich kann halt nicht mitschneiden, weil das HTTPS ist.
Okay, Add.
So, wir brauchen auf jeden Fall noch ein Action.
Name Action.
Das ist einfach nur ein String.
Add String.
Name Action.
Und das ist jetzt Upload Batch PSK.
Und nochmal Add Callback.
DPSK.
So.
Jetzt bin ich ja mal gespannt, ob das...
Add String.
Jetzt bin ich ja mal gespannt, ob er das jetzt macht.
Kostet das wirklich 1000 Euro?
Ja, wenn du es neu kaufst, was ich nicht machen würde.
Weil der 710 ist die Vorgänger-Generation.
Also, der aktuelle ist der 750.
Der R750 ist die...
Also, der R750 ist WiFi 6.
Und der hier ist WiFi 5.
Und das reicht der Dicke.
Und kriegst du...
Also, ich habe ihn für 260, 270 Euro bei Ebay gekriegt.
So.
Okay, Leute.
Ich habe keine Ahnung, ob das funktioniert.
Ich führe das jetzt einfach aus.
An error while sending the request.
Ja, das ist jetzt ein bisschen nichtssagend, oder?
Error while sending request.
Das kann ja alles bedeuten.
Busy...
Vielleicht ein busy sinnvolleren Hilfe...
Exception Text.
Irgendwas Aussagekräftigeres.
Ich würde das gerne...
Kann man das irgendwie debuggen, was der jetzt eigentlich genau schickt?
Before call, after call...
Okay, das scheint äußerst six-headig wieder zu sein.
Ich würde halt gerne sehen, was ich poste.
Schau doch noch mal eins drunter in die Docs.
Äh, Cookies.
Cookies macht er ja anscheinend automatisch.
Nee, ich will kein Error-Handling haben.
Ich will einfach den Request...
Wie er ihn schickt, loggen.
Before call, after call...
Wireshark geht nix.
Das ist HTTPS.
Ich meine...
Ich könnte ein Netcat aufmachen und es mir dahin schicken lassen.
Na Quatsch, ich mach...
Nein, nein, nein.
Ich könnte mir einfach ein Netcat aufmachen.
Äh...
So hier.
Es bringt mir doch nix, wenn Wireshark HTTPS kann.
Wireshark kann nur, wenn das Zertifikat...
Also wenn ich irgendeinen Proxy hätte...
Okay.
So.
Ford 8000.
Ich schick mir das einfach an meine eigene IP.
127.0.0.1
Ford...
8000.
Was hab ich jetzt gemacht?
Was hab ich jetzt kaputt gemacht?
Achso, weil HTTPS...
Lull.
Äh, HTTP.
Aha.
Leute, da haben wir es doch.
Also...
Das sieht doch von der Idee her...
Ja, gar nicht mal so falsch aus.
Also so müsste es aussehen.
So müsste es aussehen.
Also die Nummer ist egal.
Ähm...
So.
Das hier geht hier los im Endeffekt.
Text CSV.
Das ist gut.
Form, Data, Name, U.
Okay.
Das ist schon mal das Problem.
Das müsste sein.
File Name gleich.
Das ist eigentlich hauptsächlich der Unterschied, den ich hier jetzt sehe.
Der Rest ist doch in Ordnung, oder?
Chat.
Der Rest sieht wirklich ziemlich, ziemlich gut aus.
Das ist richtig.
Uploader, bla bla.
Callback.
Action.
Es fehlt nur beim CSV.
Ja.
Beim CSV fehlt...
Der File Name.
Da müssen wir uns mal überlegen, wie wir das hinbekommen.
Wie kriegen wir da einen File...
Also, String Content ist es schon mal nett.
Also ist es wahrscheinlich Add File oder Add String Parts?
File?
Ja, Moment.
Ich hab den File...
Ich hab das als String.
Ich will ja nicht wirklich ein File senden wie Random String.
Was?
Das ist random hier, ja?
Das ist okay.
Das darf immer anders sein.
Also, wie kriege ich denn jetzt hier...
File Name.
String Value.
String Name.
String Content Type.
Muss ich hier File Content machen?
Vielleicht?
Add File Content?
Sowas hier?
Ja, da passt.
Ja, das will ich ja nicht.
Okay.
HTTP Client.
File Name.
Post.
How to send File.
Ja.
Zeig hier.
Media.
Okay, das ist ja bescheuert.
Das...
Multipartform Content.
What?
Multipartform Content.
Was?
Was?
Was?
Was?
Was?
Was?
Was?
Was?
Was?
Was?
Was für was?
Apart Form.
Multi Part...
Form...
Data...
Content?
Okay.
Was zum...
Hä?
Alter, das ist ja High...
High IQ Shit, man.
Ne.
Das ist was Anderes.
Ich mein...
Ich will jetzt...
Ich will doch jetzt kein File schreiben.
Nur, dass ich ein File da...
Ich mein, okay.
Wir...
Wir können...
Wir können ja den String zu nem Stream machen und dann String...
Stream?
Ne.
Äh...
Wie?
Ne, äh, äh, äh, String Reader.
So, ging das, ne?
Jetzt wird es aber kompliziert.
Äh, ja.
Da kann man nämlich so tun, als wäre das ein File.
CSV, so.
Was habe ich jetzt verkehrt gemacht?
Ah, Using war String Reader.
Jetzt sagen wir nämlich Add File.
Name U.
Okay, also.
String Path Stream.
S-R.
File Name.
Jetzt können wir den File Name nämlich mitgeben.
So, File Name ist in dem Fall Batch.
Ich nenne es einfach mal so.
Irgendwas mit Punkt CSV.
Vielleicht checkt der nämlich am Ende auch die Endung.
Man weiß ja nie.
So, das ist der File Name.
Äh, String Content Type.
Text CSV.
So, Buffer Size brauchen wir nicht.
So, warum geht das jetzt nicht?
Was ist das Problem?
Ist das kein Stream oder was?
C-Sharp.
String S-Stream.
Weißt du, das brauchen wir normalerweise nicht.
Memory Stream.
Gut, Memory Stream.
Auch gut.
Memory Stream.
Und was jetzt?
Wie kriegt man da jetzt den String rein, ohne irgendwie sich das Bein auszurenken?
Encoding UTF-Get Bytes.
Alles klar.
So.
CSV.
Stream.
So, gut.
Jetzt kann man das posten.
Mal gucken, was jetzt dabei rauskommt.
Äh, Tommy, was, wie?
Verstehe ich...
Jetzt verstehe ich es gerade nicht.
Äh.
Wie, jetzt kommt gar nichts an?
Arrow while copying content to stream?
Was?
Wie jetzt?
Ey.
Das ist...
Wo ist denn das Problem?
Das Using muss weg?
Warum?
Das soll den danach doch wieder aufräumen.
Äh.
Tatsächlich.
Hä?
Was macht denn das Using jetzt da?
Warum...
Warum...
Macht das Probleme?
Verstehe ich nicht.
Also, das bekommen wir da jetzt als Antwort.
Alles klar.
Guck mal, File Name.
Das sieht besser aus jetzt.
Äh.
Warum hat er hier File Name Sternchen?
Was...
Was ist das jetzt für ein Müll?
Wo kommt denn das jetzt her?
Warum...
Hä?
Das Using sollte das eigentlich nicht sofort schließen.
Das Using sollte das schließen am Ende.
Das ist ja der Unterschied, wenn du es so schreibst, zu der alten Schreibweise mit den Klammern.
Egal.
Was auch immer.
Was ist denn...
Also, das sieht doch jetzt eigentlich alles gut aus.
Warum hat er denn jetzt File Name Sternchen UTF-8 nochmal da hinten dran stehen?
Okay, das ist das Encoding.
Das Encoding will er aus irgendwelchen Gründen unbedingt...
Unbedingt da drin haben.
Meinetwegen.
Schauen wir mal, ob es funktioniert.
Wir gucken einfach mal, ob es funktioniert jetzt.
IP.
Run.
Please.
Br...
Oh, das sieht gut aus.
Das ist nicht abgekackt.
Was ist das eigentlich für eine Response?
Was ist das für eine Response schon wieder?
Ach, Moment.
Ich kack Noob.
Ich muss HTTPS machen.
Lul.
Shit.
Ah, ich mach's falsch, Leute.
Ich mach irgendwas falsch.
Was mach ich falsch?
Okay, nochmal.
Wir gucken uns...
Wir gucken uns das nochmal an.
Also, wir gucken uns das hier nochmal an.
Nein, nervt mich jetzt nicht mehr.
Nein, ich will kein Admin recoveren.
Okay, ähm...
Services.
Upload.
Example.
Hier.
So.
Cookies.
Ja, die Session setzt er ja hoffentlich von alleine.
Weil die anderen...
Die anderen gehen ja auch so.
Guck.
Der setzt überall das.
Der setzt überall das.
Der setzt überall das Cookie.
Und das macht mein Client auch.
Sonst könnte ich das ja...
Sonst könnte ich das ja gar nicht benutzen.
Vorher.
Request.
Header.
Hab ich da irgendwas vergessen?
Request Header.
Wenn ihr Ideen habt, nur her.
Also, das Cookie setze ich ja auch.
Das Cookie...
Mist, ich dachte, ich hätte das Cookie vergessen.
Dann wäre das ja relativ einfach gewesen.
So, die UL stimmt auch.
Es ist ein Post.
So, Admin.
Slash Upload JSP.
Äh, Moment.
Ach, das ist...
Soll ich das mal wegmachen?
Wann passiert?
Ähm, so.
Also, das mit dem Accept und so wird, denke ich, keinen Einfluss haben.
Content Length.
Multipart Form Data.
Das ist genau das, was meiner auch schickt.
Multipart Form Data Boundary.
Das ist überhaupt kein Unterschied.
Soll ich mal das uploaden?
Soll ich mal uploaden, das, was ich hier auch uploade?
Also, quasi, äh, Downloads und dann...
Batch.
Das, das da?
Was, was upload...
Was, was upload ich hier eigentlich immer?
Ich uploade das gleiche mal.
Was der Raspberry Pi tut, was...
Was, hä?
Moment.
Was, was zum...
Was, was, was...
Was, was, was...
Was, was, was...
Was, was, was...
Was, was, was...
Was, was, was...
Was, was, was...
Was, was, was...
Was, was, was...
Was, was, was...
Was, was, was...
Was, was, was...
Was, was, was...
Ach, Buffer Size?
Moment, die, die...
Was zum...
Pass?
Content Type muss dann da hin.
Das ist natürlich, haben sie sich jetzt super, super feifertig überlegt.
Content Type?
Buffer Size?
Ah, jetzt brauche ich Buffer Size, meinetwegen.
Okay, alles klar.
Dann, äh, machen wir nochmal Netcat auf und schauen, ob das funktioniert.
Machen wir lokal.
Das, das, das ist eklig jetzt.
Weil es könnte sein, dass er sich an alle möglichen stört.
Weil die sich, die müssen sich ja, wenn sie ihr eigenes Frontend und ihr eigenes Backend passen.
Ähm.
Achso, ja doch, das sollte man vielleicht schon...
Ja, ja, ist recht, sollte man machen.
Ähm.
Ach, das kann man noch weglassen hier, oder?
Das kann man weglassen, weil das wahrscheinlich selbst einfügt, wenn du aus einer Datei öffnest.
So.
Also, schauen wir mal.
Was?
Ah, ne, es ist ja nicht Port, es ist Port 8000.
8000.
Was?
Was macht der denn da jetzt?
Ich, ich blick nicht mal durch.
Was ist denn jetzt wieder da?
Warum sind da jetzt so komische, so komische Leerzeichen und Gedöns dabei, ey Mann?
Wegen dem Encoding vielleicht?
Kann man Encoding setzen?
Nein, kann man nicht.
Ne, das ist nicht HTTPS.
Filename?
Das sieht nicht, nicht richtig...
Das sieht nicht richtig aus.
Warum hat der denn jetzt da so komische, so, so komische Dinger drumherum?
Die hat er doch vorher auch nicht gehabt.
Guck, vorher sah das noch gut aus.
Alter, ich hasse diesen Krempel, ey, das ist der Wahnsinn.
Ah, Mann.
Egal, wir testen jetzt einfach, ob es funktioniert.
Vielleicht geht es jetzt ja auf magische Art und Weise.
Ach so, welches Encoding hat denn dieser Krempel hier?
Vielleicht liegt es ja daran.
Äh.
Kriege ich denn das raus?
Was ist das?
Äh.
Wort noch weg.
Äh, wie kriege ich denn das File Encoding raus?
Bash, get File Encoding.
How can I file encoding?
File minus I.
Okay.
Aha.
Aha.
Es ist, es ist nicht UTF-8, aber das ist egal, weil US-ASCII ist kompatibel mit UTF-8.
Es ist bestimmt irgendein ekliges Encoding-Problem, ich sag's euch.
Ach, HTTPS, fuck, Mann.
Boah.
Ist irgendwas an der Uhr falsch, oder?
Ich meine, ich mach Login und danach führ ich das aus.
Also, es ist ja nicht so, als würde ich in dem anderen mehr machen.
Da rufe ich ja dann auch fertige Sachen auf, die Login brauchen.
Tja, jetzt bin ich echt ein wenig überfragt, warum der Request sogar schon, warum der endet.
Prematurely endet.
Was?
War ich irgendwas?
Falsch.
Okay.
Wir machen jetzt mal eine Sache.
Wir machen das mal weg.
Header.
Sagen einfach get.
Einfach ganz normal ein get.
Mal gucken, was passiert, wenn ich ein get mache.
Warum ist die Methode überhaupt da?
Internal Server Error.
Gut.
Also, das geht schon mal nicht.
Post.
Einfach ein leerer Post machen.
500.
Internal Server.
Gut.
Das ist doch schon mal, also, dass das vom Prinzip her erst gar nicht funktioniert,
bis ich...
...anfange, bis ich das, bis ich prinzipiell, sagen wir mal, das Richtige mache.
Also, kann man das im Prinzip wieder so lassen.
Stream.
Der hat keinen Platz mehr zu speichern.
Doch, klar, da Platz zu speichern.
Habe ich irgendwas übersehen?
Werft er den Fehler, weil der User schon existiert?
Nee, das glaube ich nicht.
Der hat den User ja noch gar nicht, der hat den User ja noch gar nicht angelegt.
Was, jetzt will er noch File nehmen?
Ah ja.
Äh.
Batch.
Content Type Text CSV.
Ja, das ist gut so.
Äh.
Test Port.
Einfach mal.
7.0.0.1.
1.8000.
Test Port.
So, jetzt gucken wir nochmal.
Wir vergleichen den Kram jetzt nochmal.
Ich bin jetzt nämlich echt ratlos, was der für Schmerzen hat.
Ach, es ist immer noch HTTPS.
Okay.
Ja.
Aber einfach, weiß ich nicht.
Real.
Ich weiß nicht.
Es ist nur, dass ich es einfacher austauschen kann.
Äh.
Ist nämlich.
HTTPS.
IP.
Gut.
Also.
Dann wollen wir mal.
Gut.
Also.
Das ist alles gut, was der hier macht.
Ab hier geht's los.
Das ist alles richtig.
Post.
Dahin.
Guckt es euch an.
Post.
Was macht der denn da eigentlich?
Vorher.
Request.
Vorher guckt er irgendwie, ob er noch genug Speicher hat oder sowas.
Keine Ahnung.
Das muss ich.
Das muss ich wahrscheinlich nicht machen.
Das wäre ziemlich beknackt.
So.
Upload.
Cookies ist das ist gesetzt.
Pfeil nehmen.
Ja, das ist.
Es geht auf diese Uhr.
Ja, das mit dem Pfeil Name ist anders.
Ne.
Das ist gut.
Der Rest ist der Rest ist auch richtig.
Content.
Längst.
Längst.
Längst.
Er sagt Content Type Text CSV.
Also einmal hier hat das gequotet hier nicht, aber ich gehe mal davon aus, dass er standardtechnisch alles okay ist, wenn das nicht gequotet ist.
Und er hatte irgendwie so komischen Scheiß hier drinne mit Pfeil Name Sternchen UTF acht.
Das checkt der Server bestimmt nicht hier.
Wie kriege ich ihm das?
Wie kriege ich ihm dann das ab abgewöhnt?
Ed.
Kann man nicht einfach sagen, dass das von Hand edden String Parts oder so muss man das muss man das wohl ein Coden, aber das sollte eigentlich auch für mich machen, also Ed Ed Pfeil hängt irgendwie so ganz ekliges Zeug hier hinten dran an, was ich, was ich nicht haben will.
Nee, der braucht keine Hederao.
Brauche nicht.
Ihr wisst ja was wir machen mal.
Kann man das mit einem Curl machen?
Hören.
Gar nicht.
Habe ich keine.
Nee, nee, brauche er nicht.
Guck mal, ich kann es, ich kann es euch zeigen, dass das prinzipiell funktioniert.
Wir gehen jetzt mal in nach Downloads.
Wim.
Batch.
Das da nehme ich, glaube ich immer Batch Sample.
Das da guck mal.
Ich nehme jetzt mal nur die Datei und versucht, die hochzuladen.
Ja, muss ich noch mal refreshen.
Und das ist auch nervig mit diesem Bitte.
Bitte lockt dich mal als Admin ein und.
Und mach Passwort Recovery an und so.
Ich will keine Passwort Recovery.
Ich setze mein Access Point einfach zurück.
So, also Sample.
Liste Funst Upload.
Keck, wie User Bärm, der macht aber halt immer aus irgendwelchen Gründen dann noch
ein New Line unten dran.
Meiner nicht, nicht, dass man das bräuchte und und und Content.
Type Text und so ist vertauscht, aber okay.
Der Rest ist ja alles gut.
Ich meine, soll ich auch mal einen New Line unten dran machen?
Vielleicht kann man das einfach hier dran machen.
Dann geht's.
Ja, jetzt haben wir da, jetzt haben wir da auch einen New Line dran.
Http 1.1.
Was ist das?
Http Version steht nicht dabei.
Kann es sein, dass einer der Aufrufer sagt, da kommt gleich jetzt hier.
Ist Frau nee, das einzige, was es gibt, ist, er fragt, ob es genug Speicherplatz gibt.
Aber man das hat er mit dem.
Was ist das?
Ich hab keine Ahnung, was das für ein Request ist.
Vorher.
Xcmd Badge dps K.
Muss ich das vielleicht doch vor dem Upload machen?
Weil ansonsten Chat.
Wir sind uns einig.
Das ist eigentlich alles gut.
Das einzige, was der für Probleme hat, ist, dass er hier irgendwie.
Irgendwie.
diesen komischen Pfeil-Name
dran hängt, wo ich gerade nicht weiß, was er
sonst machen soll.
Ja, das mache ich doch. Dann mache ich
diesen Krempel vorher nochmal hier.
Das hier.
Das mache ich vorher nochmal. XML.
XML-Request an
CMD-Stats. Der Rest
ist doch eigentlich alles okay.
Weil der sagt mir ja auch schon,
dass er vorher abbricht.
Okay, da muss ich vielleicht wirklich vorher doch
das Ding machen. Das da.
Also, noch ein Request.
Mein Gott, ist diese API kacke.
Ich weiß, warum die keine offiziellen API-Docs
haben, weil das einfach Müll ist.
Was ich machen will, ich will
User anlegen auf meinem Access-Point über
die nicht-offizielle API.
User auslesen funktioniert wunderbar.
User anlegen ist noch etwas
eklig, weil die eine sehr
merkwürdige API haben. Die verwenden CSV-Dateien,
XML und JavaScript
in XML.
Warum macht man sowas eigentlich?
Jemand feifertige
Idee, warum man sowas macht?
Wo muss das hin?
CMD-Stats.
Also, ich muss jetzt folgendes
posten hier.
Ich muss jetzt folgendes posten.
Was gibt es denn hier für eine Response zurück?
Was auch immer.
Das muss ich posten.
Was ist das für Schmerzen?
Define below.
Ja, null.
Post XML.
XML ist das da.
XML ist das da.
Und ich vermute mal, dass man von diesem XML
Ich vermute mal, dass man
Ich bin nicht froh, wenn wir String-Literals haben.
So.
Okay, ist das fertig jetzt?
Ja, okay.
XML posten.
Okay, und jetzt schauen wir mal, was da als Antwort kommt.
Vielleicht darf ich es ja jetzt uploaden.
Pregue, prege.
Fuck, man. Die Antwort ist richtig.
Oder?
Oder?
Response.
Warum will man User anlegen?
Ich weiß nicht, wie ich dir das erklären soll, warum man User anlegen will.
Warum möchte man User anlegen?
Weil man User anlegen will.
Warum möchte man aufs Klo gehen, weil es drückt?
Also, ich meine, was soll ich dazu sagen?
Man will User anlegen.
Panda 2, danke schön für den Sub.
Also, daran liegt es auch nicht.
Irgendwas stimmt mit meinem Request nicht.
Jemand, der programmieren kann, mir schnell eine Lösung gibt.
Was willst du denn wissen?
Das ist wahrscheinlich irgendwas.
Irgendwelche Hausaufgaben oder so, keck, wait.
Also, unser Request ist falsch.
Unser Request ist falsch.
Wir müssen diesen Müll rausbekommen hier aus dem Request, was der da noch uns noch mitschickt.
Also, dieser Müll muss raus hier.
File name.
File batch DPS-K-Dingsgedöns.
Der Rest ist ja okay.
File name, was war das?
Content-Type.
Nur, dass der diesen File name UTF-Gedöns noch hinten dran ist.
Und er hier dran schreibt.
Das muss weg.
Das muss weg.
Wie kriegt man hier jetzt sowas rein?
Header?
Äh.
Soll ich extra Header setzen?
Ja, dein Access Point kann wahrscheinlich nicht mehrere User haben.
Uploade deine Aufgabe mal, falls das geht.
Nicht, dass du dich hier outest, dass dein Lehrer das sieht oder so.
Mal ein Pastebin oder so.
Da können wir hier im Stream reingucken.
Weil ich weiß hier eh grad nicht so wirklich weiter.
Ich...
Ich...
Ich weiß gar nicht, wie ich das jetzt richtig ausfüllen soll.
CSV.
Mein String-Content bringt's ja nix.
Content-Type-Encoding.
Ich muss ja File-Name angeben können.
Ich muss ja File-Name angeben können.
Das ist Paints-Champ. Ich weiß nicht, wie's funktioniert.
C-Sharp-HTTP-Content.
Was gibt's denn da alles für komische Klassen?
Was gibt's denn da alles für komische Klassen?
Es gibt String-Content.
JSON-Content.
Stream-Content. Byte-Array-Content.
Wie, String-Content gibt's gar nicht?
Doch.
String-Content?
Microsoft weiß selber wieder nicht, was es da gibt.
Microsoft weiß selber wieder nicht, was es da gibt.
System-Net.
System-Net.
http.
Was haben wir da?
http-content,
multipath-content, stream-content,
form-incoded-content?
particip.
multipath-form-content?
Ja, nee, der bringt uns ja nix.
Der bringt uns ja nix.
Na ja. Schreiben Sie einen Algorithmus in Pseudocode.
Oh, du darfst bestimmt noch ein Struktogramm malen, oder?
Da bist du bestimmt der Hecht beim Lehrer, wenn du ein Struktogramm abgibst.
Oder der Lehrer denkt sich...
Egal. Schreiben Sie einen Algorithmus in Pseudocode zur nachfolgenden Aufgaben.
Das Programm soll einen String erzeugen, der als Abrufcode genutzt werden kann.
Die ersten zwei Zeichen sollen SQ sein.
Dann sollen acht Zufallsziffern generiert werden, von eins bis neun.
Am Ende soll eine Prüfzahl eingeführt werden, die folgenden Bedingungen entspricht.
Die Quersumme der Stellen... Aha.
Das kann man doch mehr oder weniger eins zu eins so hinschreiben.
Die folgenden Bedingungen entspricht.
Die Quersumme der Stellen... Ach, drei bis zehn?
Drei bis zehn? Achso, plus Prüfzahl.
Hat er nicht gesagt eins bis neun?
Ne, das mache ich jetzt nicht.
Das mache ich jetzt nicht, Chat. Da muss man tatsächlich kurz drüber nachdenken.
Hast du schon irgendwas gemacht, was du uploaden kannst? Dann können wir uns das angucken.
Aber sonst, ich programmiere es jetzt nicht.
Außer im Chat hat einer da Bock drauf.
Was anderes?
Ja, was könnte man denn da jetzt einfügen?
Ich bin wirklich... Kann man nicht einfach einen String einfügen, anstatt so, dass ich eins zu eins schreiben kann, wie es geht?
Ein String-Content ist es ja offensichtlich nicht.
Ich meine...
Ich hätte noch eine andere Idee.
Kann man... Ich weiß nicht, wie ich das bediene.
Ah, das ist ja schlimm.
So, und hier kann man keine... Hier kann man jetzt kein...
Mehr angeben von File-Name.
Also, die wollen ernsthaft, dass man, wenn man Files verwendet, Add-File benutzt.
Ich will aber nicht Add-File benutzen.
Gibt es sonst... Kann man die Parts irgendwie editieren?
Parts? Keine Ahnung. Null.
Is read only.
Weil sonst könnte ich das hinzufügen und danach nochmal einfach was rauslöschen.
Add-String-Parts.
Data.
Add multiple Strings-Parts.
Wie kriege ich den Krempel da weg?
Kann ich nicht das Ding irgendwie...
Kann ich das nicht irgendwie manipulieren von Hand?
Ja, anscheinend nicht.
Boah, man.
Was ein...
Ja, was passiert denn... Was kommt denn da bei Part 0 jetzt raus?
Stream-Content.
Stream-Content?
Ah, weil... Weil File.
So, und da gibt es jetzt was.
Read a String.
Aber das kann... Ich will es ja nicht lesen.
Ich will es ja...
Was?
Was ein Gefuddel.
Ja, super. Den Content weiß ich. Den habe ich selbst reingeschrieben.
Ich will das Gesamte ausgeben.
Ich glaube, ich muss das irgendwie...
Irgendwie selbst spawnen. In dem Fall...
Post-Multi-Part-S-String.
Also, das Problem ist jetzt,
dass der aus irgendwelchen Gründen,
und ich glaube, daran liegt es,
aus irgendwelchen Gründen hier hinten
so ganz ekliges Zeug mitsendet.
Also, der sendet den File-Name
und dann sendet er den File-Name nochmal in UTF-8
und ich glaube, damit kommt der Server nicht klar.
Weil der Rest ist genau das Gleiche,
was das Web-Interface auch schickt.
Aber ich bin mir nicht sicher,
wie man das mit dieser Library überschreiben kann,
dass er eben nicht das hinten nochmal anhängt.
Also, ich sehe hier nichts.
Ich sehe hier nichts.
Ich meine,
wenn ich hier das Encoding ändere,
dann wird das wahrscheinlich auch nichts bringen.
Ich weiß gar nicht, woher weiß er eigentlich,
was das für ein Encoding ist?
Oder rät er das?
Ja, der hängt immer File-Name UTF-8 gedünst.
Ah, Moment.
Das ist ja das Encoding vom Inhalt,
nicht vom File-Name.
Ja, dann weiß ich auch nicht, ganz ehrlich.
Also, dann natürlich,
und zwar bin ich mir sicher,
dass ich auch nicht ganz sicher,
wenn ich tatsächlich ein bisschen
irgendwie davon eine Idee kümmern muss.
Ich weiß nicht,
ob der vielleicht nicht richtig ausgeht.
Ich weiß nicht,
ob der jetzt wirklich
so ein extremer Painschamp ist.
Ich würde mal sagen,
weil ansonsten habe ich keine ahnung wie man das hinbekommt post ok wir können es
auch von hand anlegen wir können den mist auch von hand anlegen
ich weiß nicht ob es ein bug ist oder ob das okay ist im html aber der solver
das da nicht checkt multiform ok content gleich new multipart content multipart form
data content alles klar kann man das da irgendwie add string name file name ok
dann vielleicht so dann dann dann vielleicht so add ok ok new
string
string content csv da brauchen wir hier oben die dieses komische stream ding gar
nicht mehr ok csv das soll encoding ja komm na ich will gar ich will kein
encoding setzen geht mir nicht auf den keks text text csv so das da soll als
name haben und als file name weil nehmen wir einfach die file name war
batch dps things car okay gut jetzt als nächstes content at new string content
batch batch upload things bums name action
und jetzt und nochmal uploader was auch immer das macht callback okay und jetzt
wenn das hier oben ist post asynch content so jetzt bin ich ja mal gespannt
ob das jetzt funktioniert schauen wir mal was der macht was sendet der weird
champ wie kann ich das dem abgewöhnen dass der diesen müll da hinten dran
schreibt
man wird wird champ aller so das ist anscheinend im dotnet framework so eingebaut was ist das
überhaupt was man in dem utf 8 das irgendwie erlaubt auto ein code file name parameter
content aha das ist wes interessiert rfc 59 87 alles klar ganz toll ja das kann sein aber ich
will dass er das weglässt stripes ich will ja dass er das das soll er nicht hinschreiben kann
man das irgendwie search und replacen kann ich irgendwie low level darauf zugreifen und einfach
sagen ried es string okay okay ja da kann ich da kann ich jetzt schon die place und drinne
ok ich schneide das einfach ab jetzt hier replays das ist jetzt zwar nicht schön 0 w aber replay
replays durch nichts und jetzt sollte es eigentlich gut ausschauen ja jetzt ist der
krempel nämlich weg und es endet mit einem moment denn im semicolon ok so ist richtig so ist gut so
ist gut so das heißt ich sende jetzt super variablen namen bei the way weiß man sofort
bescheid ich sende jetzt lull kann man direkt
string senden moment das kann ich das überhaupt nicht senden richtig ist das ein abfaktor jetzt
kann ich das nicht jetzt kann ich das ja so nicht senden weil es ja dann kein multipart
dingsbums content mehr ist das zu replays hat mir also mal gar nichts gebracht ich will kann ich da
nicht drin herum editieren irgendwie einfach nur dass es weg kommt hätte ein coding selektor jetzt
die codes
keine ahnung wir brauchen mehr iq ja was anders da fällt mir nicht mehr an ich muss wahrscheinlich
irgendeine eigene klasse implementieren für http content was anderes fällt mir da jetzt nicht ein
weil ich krieg's ich krieg's sonst raus hilft das remove ja ja bloß weg damit die move from ja
string content ich habe keine ahnung was der typ
da macht aber ich will es als form senden also was soll ich
machen multipart content político macht aber ich willst es als form senden also was soll ich machen multipart content
ach der baut sich das hier selbst zusammen den kreml oder
das ist mir zu hajar iq
das ist mir zu hoch aber wenn er sich da selbst zusammenbaut das können wir das können wir machen
das können wir machen also ich lösch diesen ganzen kreml mal wieder weil sonst blick ich blick ich nicht mehr durch jetzt kommt es kommt auch weg es kommt auch hin aber das selbst zusammenbauen das can er mal auswähnt aber wir müssen indem wir jetzt hier nochmal richtig hin erfahren sind, wo man efforts office klick habe die katastrophe wird oder nicht der buenas afp elle kann von dem 15rendap 집OT
ja hier tun wir aber das auf ktesinn das können wir eine serische messe machen den hasupunkel
mal wieder was das blicke ich mir nicht mehr durch
Kommt, das kommt auch weg.
Das kommt auch weg.
Aber das selbst zusammenbauen, das können wir ja mal ausprobieren.
Vielleicht muss man es echt selbst zusammenbauen, weil der Server sonst nicht mit klarkommt.
Okay, also.
Ähm, String-Content, Content, hier CSV.
UTF-8 soll mir recht sein.
Charset.
Braucht man das?
String-Content.
Ne.
Okay, das ist Blödsinn hier.
Also, String-Content, CSV.
Äh, Text, CSV.
Empty.
Form, Data.
Ja, ja, das ist richtig.
Pile, Name.
CSV.
Name.
U.
Warum auch immer, aber die haben das U genannt.
Das hier läuft das.
Okay, Moment.
Moment, das ist doch genau das gleiche, was ich hier schon habe.
Ähm.
So, und jetzt.
Multipart-Content.
Ja, dann testen wir das doch jetzt mal.
Upload.
So.
Also.
Ich weiß, da fehlt was.
Ich will jetzt bloß gucken, ob es richtig rauskommt am Ende.
Also, Post.
Ja, ich will nur wissen, ob das Richtige rauskommt.
So, Post-Multipart-Content.
Okay.
Schauen wir mal.
Äh.
Test-Port.
Okay.
Jetzt ist es Multipart-Content.
Jetzt ist es Multipart-Mixed.
Wobei, ist das jetzt gut oder schlecht?
Ich habe keine Ahnung.
Okay.
Boundary.
Wir probieren das jetzt einfach mal so.
Alles klar.
So, und jetzt muss dazu noch.
Noch ein weiterer Content.
Oh, ich kann aber Leute, ich muss gleich Schluss machen.
Ich kann mir keine Gedanken mehr machen.
So, also das ist String-File.
So, jetzt brauchen wir noch.
Ja, String.
Was weiß ich.
Header 1.
Header 1.
Ähm.
So, was braucht man jetzt noch?
Name-Action-Upload.
Name-Action.
Und dann.
Content.
Einfach nur.
Einfach nur das.
Okay.
Das kann auch weg.
Das kann auch weg.
Action.
Okay.
So.
Zwei.
Okay.
Und jetzt gibt es das da.
Nicht File-Name.
Moment.
Es ist.
Ah.
Äh.
Content.
Content.
File-Name kommt weg.
File-Name brauchen wir nicht.
Action.
Das ist Callback.
So, und das heißt, das kommt jetzt so hin.
Und das zwei.
Okay.
So, mal gucken, ob da jetzt was halbwegs korrektes bei rumkommt, wenn ich das ausführe.
Ja.
Das sieht doch prinzipiell ganz gut aus.
Chat, oder?
Ja.
Das sieht doch passend aus.
Hier.
Also, uploaden wir das mal.
Charset ist da irgendwas drinne.
Das hat er hier nicht drin.
Content-Type.
Text-CSV.
Ah, Moment.
Content-Type.
Content-Type ist doppelt.
Media-Type brauchen wir gar nicht.
Encoding brauchen wir auch nicht.
Was?
Content-Type ist CSF?
Wo?
Wehe, ich nicht.
Content-Type ist CSV.
Aber das mit dem Charset muss noch raus, ne?
Wo hatte man das hier?
Charset.
Das startet nirgendswo drinne.
Ja.
So.
Und jetzt, please, einfach funktionieren, Mann.
Okay.
Das sieht jetzt ziemlich Content-Type.
Warum steht da überhaupt Content-Type drinne?
Gehst du fort?
Da soll kein Content-Type drinne stehen.
Okay, muss ich das jetzt auch noch überschreiben, oder was?
Oder kann ich hier eben sagen, Content-Type 0 oder so?
0.
Content-Media-Type 0.
Geht das so?
Bringt das was, wenn ich das auf 0 setze?
Ne.
CSF gleich Tippfehler, ich weiß nicht, um was es geht.
Also da muss ich wahrscheinlich jetzt sagen, Header.
Muss ich einfach Content-Type komplett auf...
Kann man das nicht komplett auf 0 setzen, so?
Dass dann Ruhe ist?
So, please, leer sein, leer sein.
Ah, ja.
Okay.
Leute, das sieht ziemlich gut aus jetzt, oder?
Genau so, wie wir es brauchen.
Alles klar.
Hoffentlich uploadet er jetzt.
Ich kann mich nicht mehr konzentrieren, irgendwas.
Real-Time.
Okay.
Ah, ne, was mach ich denn hier?
Auf-Breake.
Oh.
Moment.
Oh, siehste mal Leute, das passiert, wenn man das zu lange macht.
Dann copy-pastet man irgendwas, was keinen Sinn ergibt.
500.
Das ist schon mal was anderes jetzt.
Das ist jetzt schon mal was anderes.
Hm.
Aber warum hat es jetzt ein 500?
Ich meine, es ist ein Post.
Es ist ein Multipart-Content.
Ich meine, es ist aber halt kein Multi...
Es ist halt explizit ein...
xwwwurl...
Ne, Moment.
Es ist halt explizit ein Multipart-Form-Data.
Es ist halt nicht einfach,
einfach multipart-mixt.
Es ist Form-Data.
Kann ich das jetzt noch überschreiben?
Kann ich ihm jetzt noch irgendwie sagen,
kann ich ihm jetzt noch irgendwie sagen,
ähm,
header,
type,
und dann
einfach,
ne,
mediatype.
Ne, Alter.
Einfach so?
Ey, ich hab keine Ahnung, was der für Schmerzen hat, Mann.
Aber jetzt stimmt's.
Jetzt stimmt's ja, was ich mache im Prinzip.
Jetzt, ich hab keinen Plan mehr.
Es ist,
es ist genau das, was
der Browser auch sendet.
Form-Data.
Name.
File-Name.
CSV.
Multipart-Form-Data.
Multipart-Form-Data.
Token.
Also, ich wüsste beim
besten Willen nicht,
was der denn da nicht dran mögen kann.
Das Komma über den
User. Ne, ne, das ist egal. Ich hab das schon mal
in einer anderen Datei gemacht, vorhin.
Hier, guck mal.
Ähm,
ich mein, das einzige ist,
dass da noch ein Leerzeichen unten drunter,
dass da, hier, guck mal,
äh, da ist auch sonst nix.
Die Quotes, das glaube
ich nicht, dass es an den Quotes liegt,
ehrlich gesagt.
Hm. Also, eine Sache probieren wir
jetzt nochmal, und zwar,
äh, was wollte ich jetzt machen?
Irgendwas wäre eben noch
aufgefallen. Ach, so ein
Leerzeichen.
Hier, CSV.
Oh. Jetzt haben wir,
jetzt haben wir auch noch ein Leerzeichen unten drunter,
guck mal.
Nicht, dass es was machen sollte,
aber, ne.
Okay, das muss irgendwas ganz
obskures sein,
warum er das nicht mag.
Das muss man wirklich mal sich ganz haarklein
daran halten, und das,
der bricht halt zwischendrin ab.
Wir gucken nochmal in den Request ran, ob ich irgendwas übersehen hab.
Also, Header.
Was heißt TypeXHR?
Was sagt mir das überhaupt?
Im Prinzip
mach ich das schon richtig.
Ja, also,
das hier ist richtig.
Ich ruf admin slash upload
jsp auf.
Upload jsp.
Das ist genau das Richtige.
Ich kann mal hinten den Kram weglassen,
aber das hatte ich vorhin schon mal gemacht,
das ändert sich nix.
So, ähm.
Das ist gesetzt, das muss gesetzt sein.
Ja, das ist wurscht.
Connection, Keep Alive, Content Length.
Cookie ist
auch gesetzt.
Jetzt würden die anderen Requests gar nicht funktionieren.
Post
ist auch gut.
Also, ich wüsste jetzt wirklich beim besten Willen
nicht,
was man da, was da großartig
noch verkehrt sein kann. Ich hab keine Ahnung.
Ich meine, es sind ein paar Sachen, ne.
Content Type und Disposition
ist beispielsweise vertauscht
bei mir. Hier ist Content
Type oben und da ist Content Type unten.
Ich meine, das kann das potenziell
alles sein, weil wenn du Frontend
und Backend komplett kontrollierst,
wie bei denen, da können die ja sonstige eklige
Dinger machen, ja. Vielleicht muss es auch
exakt gepaddet sein mit so
und so viel, äh, Dingern,
ja. Ja, das kann alles
Mögliche sein. Aber ich hab
ja schon andere Requests gemacht, die gehen.
Einmal, wir könnten das mal im Versuch
mit Curl. Curl
Multi
Part Form Data
Kann Curl das irgendwie?
Aber ne, mit Curl bringt mir das
ja gar nix. Äh, mit
mit Curl bringt mir das ja gar nix, weil ich hab
ja kein Token und nix.
Auf der anderen Seite, ich kann
mir nen Token einfach ausgeben lassen. Aber da
hab ich kein Cookie. Ne, mit Curl
krieg ich das nicht gescheit gebaut.
Äh, ich könnte
ich könnte das mit Chrome nachbauen,
dass es funktioniert.
Ja, können wir mal.
Weiß ich nicht. Hab ich noch nie gemacht.
Resend
Edit and Resend
Ok, ja.
Ja, da müsste ich mir aber erst nen Cookie
besorgen, rauskopieren.
Also Edit and Resend
Send
Das
funktioniert. Ok.
Edit and Resend
Post. Das ist
genau
das, was
ich auch mach. Query
String. Ja, gut, äh,
ja, das hab ich auch.
Das hab ich auch.
Ok.
Request Body. Ok, also
wir testen das jetzt mal systematisch durch.
In meinem Fall macht der
nur
Ups, äh, ok, also
diesen ganzen mal weg.
Send.
Geht immer noch.
Edit and Send.
Ah, da hängt das eh wieder dran.
Blul.
Die Headers kann ich gar nicht großartig editieren,
oder? Ähm,
so.
Wir machen mal nur zwei.
Weil bei mir sind das auch nur zwei
und nicht so viele.
Vielleicht liegt das ja an der Anzahl
von den, von den Boundaries
oder so. Aha.
Guck doch mal da.
Hat das was mit der Anzahl der, der
Minusse zu tun? Man weiß
ja nicht. Wie könnte man das
jetzt gescheit überprüfen?
Wir ändern das mal. Wir machen einfach nur
zwei hinten dran. Und gucken, ob's
da noch funktioniert. What the fuck?
Funktioniert.
Äh. Ist das hier
irgendein Big Brain? Oder ist das eine random
Nummer? Was ist denn das?
Äh.
Ich glaube, ich hab die auch im Header geändert, ja.
Guck hier.
Mach jetzt hier einen weg.
Und mach hier einen weg.
Da einen weg.
Und da einen weg.
Send. Dann funktioniert's
nicht mehr. Moment, macht
der irgendwelche Five Head Berechnungen
von dem?
Ich meine, es sollte doch eigentlich noch gehen, oder?
Wie, wie, wie, wie
errechnet er denn die Boundary?
Wisst ihr, was ich jetzt mache? Ich nehme jetzt
Ist die Boundary vielleicht irgendwie
abgeleitet aus dem?
Moment, wir checken mal was. Ist es immer
die gleiche? Ist es immer die gleiche? Mal
gucken. Ich hätte jetzt eigentlich gedacht,
das ist randomized.
6995?
Nö, das ist randomized.
Aber, jetzt mal Leute, wenn ich das richtig sehe,
ich mach das doch richtig, oder?
Ich meine, ich nehme hier einen Strich raus.
Okay. Oder besser gesagt, ich kann ja theoretisch,
ich kann ja alles bis auf zwei Striche rausnehmen.
Das muss ja, soweit ich weiß,
einfach nur nicht im Content
vorkommen, diese Zeichenfolge.
Der Rest ist doch egal. So, so ist gut.
Oh, jetzt wird alles gelöscht bis auf zwei.
Alles gelöscht bis auf zwei.
Alles gelöscht bis auf zwei.
Und dann geht's nicht.
Als was,
was genau erzeugt
Okay, als was
erzeugt der das denn?
Doch mal angucken, was der vorher macht.
Steht ja nix drinne.
In diesem
Response
Memory
Check.
Ich hab keine Ahnung, ehrlich gesagt, Leute.
Das ist mir jetzt gerade zu hoch.
Ja, und danach kommt das gleich.
Also, da kann man nicht so viel
falsch machen.
Ne?
Check Memory.
Sag mal!
Soll ich mal diesen Check Memory
vorher absetzen?
Nein.
Daran wird's nicht liegen.
Das kann ich mir nicht vorstellen.
Ne, daran wird's nicht liegen, weil
ich mach ja, bei nem Replay geht
es ja auch.
Hat diese Nummer irgendwas hiermit zu tun?
Ne.
Ich hab keine Ahnung.
Wenn ich das editiere, dann geht's nicht mehr.
Boah.
Ne, ich hab keinen Bock mehr.
Keine Ahnung.
Was das Ding für Schmerzen hat, warum er nicht will.
Im Zweifelsfall
mach ich nen Headless Chrome
und lass ihn da draufklicken und gut ist.
Wobei man das doch irgendwie
so hinbekommen muss.
Haben die hier irgendwas mit Upload drinne?
Nö, natürlich nicht.
Natürlich haben die hier nix drinne.
Upload, das wär ja auch zu schön.
Äh.
Oh, ich kann mich auch nicht mal konzentrieren.
Wir machen jetzt Schluss.
Genug rumgewurschtelt, ey.
Was ein Akt.
Ich muss jetzt aufs Klo.
Leute, wir hören uns.
Nö, funktioniert nicht.
Wir hören uns.
Macht's gut, bis denn.
Cu.
