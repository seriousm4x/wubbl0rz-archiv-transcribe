So Leute ich bin da, ich muss nur warten bis Twitch das kapiert hat, dass der Stream richtig
an ist.
Und ich muss die Musik glaube ich auch ein bisschen leiser machen, könnte ein Tick zu
laut sein.
Übrigens guckt mal was ich gemacht habe, ich habe endlich an Visual Studio registriert.
Registert ist es, funktioniert, wobei wir das wahrscheinlich heute wieder unter Linux
machen werden.
Ja genau, Poggi.
Ich glaube jetzt hat Twitch kapiert, weil jetzt steht bei mir, also ich mache das immer
daran fest.
Wenn bei mir in der Vorschau auch steht wie viele Leute zugucken, dann weiß ich immer
dass es Twitch kapiert hat.
So ich glaube das ist nicht jedermanns Sache vermute ich mal, deswegen machen wir jetzt
mal was anderes an.
Wobei, wir lassen es erstmal laufen.
Ja also wir machen heute, wobei ich zeige es einfach mal.
Wir haben ja das letzte Mal, na auf geh auf, Mont Bra.
Wir haben ja das letzte Mal so ein Mini Vorschau Tool gebastelt.
Was aktuell nur die Sachen in der Konsole anzeigt.
Und zwar connectet sich das zum Twitch Chat, also zu meinem Channel, Twitch Chat, Q Chat,
genau.
Qt AF und connectet sich zum Chat und zeigt alle, warum ruckelt denn das so, Java in 2019.
Ich kann auch mal kurz zeigen was das macht.
Song of Storms 24 Stunden.
Ja das machen wir vielleicht schon mal.
Ja das machen wir vielleicht schon mal.
Ich glaube das nachher ist heute wieder übertrieben warm oder?
Können wir mal den Klimaanlag anmachen?
Mach ich wahrscheinlich auch gleich.
So, also kurz was wir das letzte Mal gebastelt haben.
Heute bauen wir da ein kleines Web Interface drum herum, was im Endeffekt darauf rausläuft,
dass wir den Scheiß nochmal komplett neu machen müssen.
Ähm, also zumindest im Prinzip macht es folgendes.
Wenn ihr jetzt mal im Chat eine Frage mit Adwublos schreibt, dann sollte die hier auftauchen.
Sollen wir mal ausprobieren, ob es noch funktioniert.
Ist der Kram von Chatplains überhaupt in Kotlin geschrieben?
Wahrscheinlich nicht.
Ja, genau.
Guck da.
Jetzt taucht das hier auf.
Und das Ziel heute ist, ich meine das ist ein bisschen blöd, ich kann hier nichts abhaken,
ne.
Ich sehe auch keine Uhrzeit, das könnte man relativ einfach machen.
Ich sehe keine Uhrzeit, ich kann das vor allem auch nicht löschen.
Das ist das Problem dabei.
Also sprich, wenn jetzt irgendwie einer mal eine Frage gestellt hat, also das Tool dient
eigentlich dazu.
Was?
Poggers heißt wieder Poggers?
Tatsächlich.
Heißt nicht mehr Poggy.
Jetzt habe ich mich gerade daran gewöhnt, dass das Poggy heißt, jetzt heißt es wieder
Poggers.
Warum eigentlich?
Moment.
Poggers, Poggy.
Does anyone know why Poggers was renamed?
Natürlich muss das im xQc-Reddit sein, wo sonst, ja?
Okay, es hat keiner, es hat keiner eine Ahnung, es schreibt bloß jeder dummen Spam-Blödsinn.
So wie das halt bei xQc im Chat nun mal so ist.
Petition to remove, haha, change Poggy from Poggers.
Was auch immer mit den Leuten da verkehrt ist, ich weiß es nicht.
So und zumindest der Sinn von diesem Tool ist, dass man halt, dass ich die Fragen nicht übersehe,
die kommen.
Weil ich hatte die letzten Streams immer öfters, dass ich irgendwas, irgendwas nicht gecheckt
habe, was irgendwo drin, ne, vor, vor irgendwie einer Stunde oder so und irgendwann sagt dann
einer, äh, Max hast du nicht gelesen oder so?
Was?
Nee, keine Ahnung.
Ich hab nicht gelesen.
Ja, und da bauen wir heute ein, da bauen wir heute ein Webinterface zu.
Was wir jetzt als erstes vielleicht nochmal machen könnten, habt ihr, weil ich hab noch
gar nicht, krasser Satz, ne, habt ihr schon, ähm, ach geh weg, habt ihr schon die, habt
ihr was schon von der Build geguckt?
Gibt's da irgendwelche, ach guck mal, hier gibt's ne ordentliche Zusammenfassung.
Habt ihr schon, habt ihr schon was von der aktuellen Build geguckt?
Mach mal kurz die Musik aus.
Wollen wir mal, wollen wir mal, ähm, wollen wir mal die 14 Minuten Zusammenfassung von
der aktuellen, von der Build 2019 gucken?
Da gab's einen 2-Stunden-Talk, na, insgesamt gab's da, keine Ahnung, 20-Stunden-Talks.
Das ist jetzt nur die Keynote.
Und auf der Keynote ist ja meistens, zumindest außerhalb von den Sachen, wo man sich interessiert,
also wenn man sich jetzt irgendwie für Visual Studio und .net und so interessiert, da ist
meistens in der Keynote relativ wenig zu sehen.
Allerdings die Sachen außerhalb davon, die sind eigentlich immer ganz interessant.
Ja, also zum Beispiel, keine Ahnung, wen's interessiert, was es Neues bei, was weiß ich,
Cortana oder so gibt.
Ich mein, wen, wen juckt Cortana?
Ja, aber gibt's ja genug Leute.
Ja, oder genau das neue Windows Terminal oder so.
Müssen wir mal gucken, was, was die da, was es da gibt.
Ja, lass dir, gucken wir uns das mal an, so zum, zum Warmwerden, ja.
Wir müssen jetzt mal gucken, dass die Quali, Quali und die, die Sound-Lautstärke stimmt.
Yeah!
Der macht immer so gern die Hände zusammen.
Das, das, das macht der irgendwie auch bei jeder, bei jeder Präsentation, wo er so auf die Bühne geht,
faltet er irgendwie so die Hände zusammen.
Das ist genauso wie der Xbox-Typ, wo du das Gefühl hast, dass wenn er redet auf der Bühne,
dass der immer so, dass er immer so jemand schlagen will, der neben sich steht.
Der macht immer so mit der Hand, der Xbox, ich hab vergessen, wie der heißt.
Wie heißt der Xbox-Typ?
Don, Den, Den, Den, Den, Metric oder so war der alte, ne?
Phil Spencer, Spencer, genau.
Ähm, der, der Phil Spencer, der, der sieht immer so aus, als will er jemand schlagen, der neben sich steht.
Obwohl, obwohl eigentlich keiner neben ihm steht.
Der, der holt immer so aus dem Handgelenk aus.
Ähm, ja, was auch immer.
So, gucken wir mal, was, was, was es für, für Sachen auf dem Bild gibt.
Ich wette ja, das wird eher in der Richtung wieder zum Fremdschämen, aber man weiß ja nie so genau.
Oh, ist das fantastic.
Ey, was geht mit denen ab?
Oh.
Warte.
Moment.
Was ist das für eine komische Zusammenfassung?
Erst kommt der Typ auf die Bühne, ja, hallo, was geht?
Und dann kommt irgendwie...
Das war ein komischer Schnitt.
Okay, gucken wir mal, wo was interessantes kommt.
Okay, es geht gleich los jetzt.
Jetzt kommt wahrscheinlich, kommt jetzt wieder most awesome, so easy...
...
...grandiose, beste Produkte ever, ja.
Das, das wird übelst fremdschämen.
Diese ganzen Konferenzen sind immer übelst fremdschämen.
...capability within Azure Speech Services...
...azure speech services...
...come on, let me show you.
...we are going to show you this demo using just the microphones built into this laptop and these two smartphones we have in front of us.
With these we create a microphone array in the cloud that enables Azure Speech Services to provide accurate in-person meeting transcription even without a special meeting device.
...for the next two minutes...
...we're going to have a rap battle of sorts...
...but for all of us geeks here in the room...
Oh Gott!
Cringe ist hart!
...and he's gonna give us an example of some dev speak.
...and Yusef is in healthcare marketing.
...and he's gonna dazzle us with a little bit of healthcare tech jargon.
...and he's gonna dazzle us with a little bit of healthcare tech jargon.
...and he's gonna dazzle us with a little bit of healthcare tech jargon.
...Azure speech services are built with VM...
Ach so!
Das wird live übersetzt in, also quasi voice to text?
Das wird live übersetzt in, also quasi voice to text?
Das ist gar nicht schlecht.
Aber man weiß jetzt halt nicht in wie weit das wirklich jetzt gerade live gemacht wird.
Aber man weiß jetzt halt nicht in wie weit das wirklich jetzt gerade live gemacht wird.
Ich meine das ist cool.
Das ist richtig nice.
Es gab ja schon so ein paar Versuche...
YouTube hat ja auch probiert, dass die Videos teilweise übersetzt wurden.
Das hat zumindest am Anfang nicht so gut funktioniert,
das hat zumindest am Anfang nicht so gut funktioniert,
aber live ist das nice!
Es gibt ja genug Leute, die können das halt nicht hören,
was die Leute aus einer Konferenz sagen.
Und es hat bestimmt auch nicht jede Konferenz
Und es hat bestimmt auch nicht jede Konferenz
oder jede Veranstaltung so ein Gebärden-Mensch dabei,
oder so einen Gebärden-Mensch dabei, oder so einen Gebärden-Mensch dabei,
Weil, also an sich ist das eine richtig coole Geschichte.
Wobei, ich weiß nicht, ob wir uns jetzt hier die restlichen Dinge angucken müssen.
Denkst du, dieses Jahr noch Bad Company 3 angekündigt wird?
Ja, denke ich.
Okay, ich glaube, das können wir überspringen.
Moment, was geht mit dem...
Moment, was labert er da?
Was?
Das war jetzt der Bullshit-Bingo-Test, oder was?
Also, ob es das wirklich live versteht, ich weiß ja nicht.
Also, ich könnte mir vorstellen,
dass das...
dass das exakt jetzt halt darauf trainiert wurde,
dass es die Microsoft-Buzzwords versteht, die da kommen.
Aber wenn ich mir jetzt irgendwie was anderes ausdenke,
wenn ich jetzt was erzähle von, keine Ahnung,
Linux-LXC-Containers oder sowas,
ich glaube, das Ding tut sich schon schwer damit,
das live tatsächlich so korrekt zu übersetzen.
Also, ich...
Da bin ich mir nicht sicher, ob das so gut funktioniert,
wie sie das dann darstellen.
OSI ist noch nicht fertig.
Er hat Zugabe, ja.
Er will es messen.
Hat er gerade gesagt, es ist HIPPA?
Wann hat er gesagt, es ist HIPPA?
Habt ihr das richtig verstanden?
HIP... HIP...
Also, ich muss euch ehrlich sagen,
ich hab...
Selbst wenn ich den Text lese,
verstehe ich nicht mal, was er uns mitteilen möchte.
Also...
EHR-Integration durch ISV-Hersteller
äh...
Enthält...
Info-Clover-Leave-Rettung...
Was?
Was zum Teufel ist das?
Okay, ich hab keine Ahnung, was es hier geht.
Das ist ein Ami-Ding.
Ach, deswegen kann man das...
Checken wir das nicht.
Okay.
HL7-FHIR ist HIPPA.
Okay, Ami-Gesundheitsteu, keine Ahnung.
Oh.
Ist eigentlich die Lautstärke okay?
Bisschen lauter.
Okay.
Moment, was erzählt er jetzt?
Geht's um Cortana, oder?
Er hat irgendwas von Voice Assistant, glaube ich, erzählt.
So, okay.
Was?
Also, wenn ich das richtig verstanden habe,
wollte er uns sagen, dass
quasi
äh...
äh...
äh...
äh...
äh...
äh...
äh...
äh...
äh...
äh...
äh...
äh...
äh...
äh...
äh...
äh...
äh...
äh...
äh...
äh...
äh...
äh...
äh...
äh...
äh...
äh...
äh...
äh...
äh...
dass es aktuell problematisch ist, irgendwie,
wenn die Dialoge quasi mit Dialogsystemen oder sowas zu lang sind.
Und wahrscheinlich, dass es jetzt viel geiler ist mit dem, was Microsoft da ähm...
äh...
jetzt zeigt.
The second real challenge is today most of these assistants are command systems,
where you have to invoke these skills one at a time.
What if we can imagine a future where you can cross domains without having to invoke
Also, dass man nicht sagen muss,
okay, Google, oder wie muss man bei Alexa sagen,
Alexa, wenn du bei Alexa, ich verwende den Kram nicht,
deswegen weiß ich es nicht,
wenn du bei Alexa beispielsweise deinen Müllkalender fragen willst,
da sagst du ja auch nicht, Alexa, wann kommt die Müllabfuhr?
Dann sagst du quasi, wie ging das bei Alexa?
Alexa, talk to Müllkalender?
Und dann kannst du fragen, wann kommt die Müllabfuhr?
Wie geht das bei Alexa nochmal?
Ich sehe, ihr habt auch keine Ahnung.
Ach, Alexa, starte Müllkalender.
Okay, irgendwie so.
Ich benutze das nicht.
Ich habe das nur ein paar Mal ausprobiert.
Und bei Google, mit dem Google Assistant geht es ja auch irgendwie so.
Du kannst ja nicht einfach sagen, okay, Google, mach das Licht an.
Ich glaube, so einfach ist das nicht.
Du musst dann sagen, okay, Google,
tell Home Assistant to shut the lights off oder sowas in der Richtung.
Egal.
Jetzt erzählt er, wahrscheinlich wird er uns die nächsten zwei Minuten noch erzählen,
wie grandios ihre neue Cortana ist oder sowas.
Multi-Domain Assistant.
And of course, lastly, most importantly,
we need a multi-agent world.
The idea that you're always going to start with one wake world and one assistant,
it's just not like how we started.
It's not like we started on the web, for example, just imagine what is an open assistant future look like.
Ich habe keine Ahnung, aber ich bin mir sicher, du wirst es uns gleich erzählen.
Oh, oh, oh, jetzt kommt Cringe Video.
Diese Videos sind immer übelst zum Fremdschämen.
Ich mache mal ein bisschen leid, das ist die Videos, ich sehe schon die Eröffnungsszene von diesem Video und weiß, es wird.
Du musst dich fremdschämen.
Okay, also.
Okay, Moment, Moment, Moment, Leute, das müssen wir uns nochmal angucken.
Also, wenn ich das jetzt, also das ist ja ein Video, was uns jetzt quasi demonstrieren soll,
so wie die Zukunft der Voice Assistants,
die Zukunft der Voice Assistants aussieht, ne, wie Microsoft es vorstellt.
Was mir jetzt auffällt ist, die, ich mach mal ein Tor aus, die läuft quasi auf hier rum,
guckt immer noch auf den Bildschirm, läuft hier rum, in der Zeit,
die hätte quasi schon längst, während sie auf die nächste Drehtür gewartet hätte,
einfach mal kurz den Finger nehmen können, hoch swipen können, hätte den Kalender gesehen.
Das ist auch mein Punkt, der für mich persönlich gegen Voice Assistants spricht.
Dass ich in der Regel alles viel schneller und viel direkter machen kann,
entweder mit Maus und Tastatur, gar keine Frage, oder aber auch mit Touch und ordentlichen Shortcuts auf dem Handy.
Und vor allem überlegt euch mal, die läuft so durchs Büro, das fängt das Fuck doch alle ab.
Ja, okay, im Auto. Ey, ohne Mist, Auto und beziehungsweise,
generell halt Sachen, wo du die Hände für irgendwas anderes brauchst,
ich weiß, jetzt kommen die Leute gleich wieder hier mit irgendwas an,
da ist so ein Voice Assistant nicht verkehrt.
Ja, also Navigationsgeräte, die man mit Stimmung und so bedient,
es ist ja nicht so, als hätte das alles gar keine Daseinsberechtigung.
Aber das zeigen sie uns ja hier nicht.
... outside at 8am, you're one-on-one with Anjali at 10am, lunch with Tom at noon, and your app kickoff at 3pm.
Go ahead and reschedule my walk to tomorrow at the same time.
Sure, I can move take a walk outside to tomorrow at 8am, is that right?
Yeah, that sounds great.
Okay, I...
Stellt euch mal vor, jeder läuft mit dem Handy so redend durchs Büro.
Das geht doch übelst auf den Sack, oder?
Jetzt ist es hier nur Angela, oder? Ne, wer auch immer.
Jetzt ist es nur die.
Stellt euch mal vor, das macht jeder so.
Da kommt jeder morgens rein.
Und erzählt dann zuerst mal, ja, was sind dann meine Termine und hört dann dem Handy zu.
Und was noch viel witziger wird, wahrscheinlich beeinflussen diese Dinger sich dann untereinander.
Das ist so, wie wenn ich, ich sag's jetzt nicht, weil ich weiß, das ist immer problematisch,
wie wenn ich im Stream dann sowas halt sage, wie so, ne, hallo, A-L-E-X-A oder so.
Dann springen die immer an.
Oder wenn ich dann sag, okay, G-U-U-G-L-E, dann springen die Dinger an.
Und das könnte ich mir da auch so vorstellen.
Die läuft wirklich durchs Büro und schwätzt die ganze Zeit.
Und vor allem ist keiner da.
Und push back my one-on-one with Anjali to tomorrow.
Alright, I've booked your meeting.
And here are a couple of options to meet with Anjali Bot tomorrow.
Das funktioniert auch alles nur so lang, wie du wahrscheinlich unten drunter als System Exchange nimmst.
Wenn überhaupt, wahrscheinlich musst du Microsoft 365, Office, Cloud, sonst was Service verwenden, dass der Kram funktioniert.
Is there anything later in the day?
Let's see.
How about this one?
Yeah, that'll work.
And is she invited to...
Die steht einfach im Büro und labert mit ihrem Handy.
Die hätte alles innerhalb von zwei Minuten mit dreimal touchen erledigen können, anstatt fünf Minuten mit Cortana zu schwätzen.
...the app kickoff this afternoon?
No, she's not on the invite.
No, please send it to her.
Okay, I've forwarded the app kickoff to Anjali Bot.
The app kickoff.
Great.
Hey, after my last meeting today, schedule 30 minutes to pick up the birthday cake.
Oh, wow.
Ich mach mal weiter.
Sure, pick up the birthday cake at 4 p.m.
Is that right?
Yep.
And remind me, where is my lunch meeting today?
Lunch with Tom is at Liberty...
Hey, so weit sind wir schon.
Die hat eine Verabredung am Tag, ja, wo sie irgendwo anders hin muss und kann sich jetzt schon nicht merken,
dass sie zum Liberty Café hin muss.
Eine Verabredung hat sie am Tag.
Eine Verabredung.
Außer irgendwie komisches Rumgemiete mit Angela, ja.
Eine Verabredung und sie kann sich nicht merken, wo die Verabredung ist.
Alzheimer ist raus.
Ah, das haben sie immer gerne als Beispiel, weil das easy ist.
Okay.
Can we eat outside there?
Yes.
Liberty Café has...
Funktioniert in Deutschland schon mal gar nicht.
Ich mein, guckt euch mal die Webseiten und wie gut die Restaurants und Sachen eingebunden sind in Deutschland.
Guckt euch das mal an.
Wenn du Glück hast, findest du hierzulande eine Speisekarte auf der Seite von irgendeinem ordentlichen Restaurant.
Geschweige denn, dass die in irgendeiner Form, einer Art und Weise Microsoft mitteilen, sie haben eine Terrasse.
Outdoor seating.
And can you send directions?
Und wenn ich da hinten sitzen würde?
Und mich würde das übelst anpissen, wenn da alle zwei Minuten...
Wie willst du denn arbeiten?
Wenn da alle zwei Minuten vorbeirennen die Leute, sie reden mit Cortana und vor allem Cortana redet mit ihnen.
Oh je.
Jetzt, jetzt, jetzt Security-mäßig problematisch, hä?
Sure, directions to Liberty Café have been sent to your car.
When's our next review with Cyrus?
Your next quarterly review with Cyrus Nafani is Tuesday, June 11th at 10am.
Schedule a two-hour dry run with Benjamin McIntosh the Friday before that.
Die haben, die haben auch alle immer so krass griffige Namen.
Benjamin McIntosh.
Mittlerweile ist es bei den ganzen Werbevideos so, die Leute heißen nicht mal normal.
Du hast da keinen, keine, keine Ahnung, keinen John Parker oder sowas.
Du hast da dann Benjamin McIntosh.
Does this work for you?
Yep, that looks great.
I've scheduled your dry run with Benjamin.
Thank you.
Happy to help.
Ja, wunderbar, wie das passt.
Ist euch eine Sache bei der ganzen Geschichte aufgefallen?
Die erzählen die ganze Zeit, dass sie irgendwie nachmittags einen App-Launch haben.
Ich frag mich, wann hat die eigentlich ihre App programmiert?
Also wenn der ganze Tag so aussieht, dann wird das schwierig.
Cortana hat programmiert, genau.
Oh nee, jetzt kommt Office.
Igitt.
Jetzt wird es eklig, Leute.
Jetzt wird es richtig schlimm.
Jetzt kommt Office.
Unglaubliches Feature.
Unglaublich.
Das kann nur Edge.
Und mit Microsoft Search, was eine Enterprise Search Offering ist,
mit Bing Technology und Microsoft Graph.
Edge kann...
Enterprise Search, Bing Technology.
...contextually relevant search results from my organization.
Warum schreit die so?
Weil ich wahrscheinlich zu laut hab.
Let's say I'm looking for my vacation tracking tool.
You can see that it's the first result and even includes a snapshot.
Mein Gott!
But what we're excited to announce today is that Edge will offer built-in support for Internet Explorer.
What?
Was zum Teufel?
Krasses Feature.
Da hab ich drauf gewartet.
Moment, Moment.
Das meint er erst, glaube ich.
For Internet Explorer.
Wow, jawoll!
Da hab ich ja echt drauf gewartet.
Endlich, endlich.
Also ich...
Ich hoffe, ich hoffe,
Sie zeigen jetzt noch ein Beispiel, weil ich kann es kaum erwarten zu sehen, wie Internet Explorer Embedded in Etched irgendwie aussieht.
Das konnte ich mir in meinen kühnsten Träumen noch nicht vorstellen.
Allerdings Microsoft zeigt es uns jetzt.
Teufel weiche, Alter.
Oh Gott.
Ich weiß gar nicht, was für ein E-Mode drücken soll dazu.
Wie geht das so?
2019.
BVS, genau.
Nee, ja, den eigentlich.
Gibt es auch die Möglichkeit, dass mich Third Parties gar nicht tracken?
Ach ja, doch hier, Strict.
Ich bin immer noch für sowas wie Dings hier, sowas da.
Beste.
Äh, hier.
Beste.
Uplog Origin oder im Firefox NoScript.
Da kannst du einfach genau einstellen, welche Seite denn was darf und welche Seite was nicht darf.
Strict, abgesehen von Microsoft-Seiten.
So sieht es aus.
Strict ist eine gute Option, wenn du gut bist, wie es heute funktioniert.
Strict ist eine gute Option für diejenigen, die sich preferieren, alle Third Party-Tracker zu blockieren,
auch wenn das einige Limitationen bedeutet.
Das Balance-Setting blockt Tracker aus Seiten, die du noch nicht besucht hast.
Ja, Fabi.
Da ist was dran.
Oh, Drag & Drop 2019.
Hyper S.
Was ist jetzt da, was ist denn jetzt da jetzt neu?
Man kann Bilder und Text in irgendein Eingabefeld rein-Track & Droppen.
Und weiter?
Oder übersehe ich die Genialität davon?
E-Mail, Copy to Clipboard, but I'm gonna go with Export to Word and show you how it works.
Edge creates a clean document, even automatically includes citations.
How cool is that?
Ultra cool.
Now let me open another collection I started earlier, so you can see how Export to Excel works.
These are some of the cameras I've been saving up to compare earlier.
Going back into Share, I'm gonna click on Export to Excel.
Warum um alles in der Welt muss ich das in Excel machen?
Collections does all the copy and pasting for me and categorizes it for me into a table that lets me do quick side-by-side comparison.
Warum muss ich das in Excel machen?
Frag mich mal, was reitet die Leute, sowas in Excel zu machen?
Was reitet die Leute, sowas in Excel zu machen?
Was, der Typ neben dem Bildschirm?
Was, der Typ neben dem Bildschirm?
War jetzt den hier?
Ja, der guckt ein bisschen angestrengt.
Ja, der guckt ein bisschen angestrengt.
Ja, was kommt als nächstes?
Was kommt als nächstes?
...that developers can use to build experiences for any browser, that break down barriers between people and barriers between apps.
My colleague Chika is typing on a machine backstage...
Chika?
Wie meine Katz?
Auch Chika.
...that break down barriers between people and barriers between apps. My colleague Chika is typing on a machine backstage...
Wo ist meine Chica? Sieht so aus. Und die typet garantiert nicht den Internet Explorer.
Das ist ganz cool. Ist jetzt aber auch nichts Neues, dass man zusammen irgendwie an einem Textdokument arbeiten kann.
Also, aber warum nicht? Das ist ganz nice.
Great. As I was typing that text, hopefully you noticed that it was being translated into nine different languages.
Moment. Moment.
Wie soll Live Editing, also Collaboration Dingsbums, also wie wird man es auf Deutsch?
Also quasi geteiltes, also zusammen an einem Dokument editieren.
Wie soll das zusammen mit On-The-Fly Translation funktionieren?
Wie soll das funktionieren?
Wie soll das funktionieren?
Es kann doch nie jemand auf Kyrillisch editieren am gleichen Text, wo jemand auf Englisch dran editiert und schreibt.
Die Wörter sind doch teilweise sogar in einer ganz anderen Reihenfolge.
Das kann doch nicht funktionieren.
Das glaube ich. Also das glaube ich erst, wenn ich es sehe.
Ja, aber manche Sätze bestehen in der einen Sprache aus fünf Wörtern, in der anderen irgendwie aus acht, dass sie Sinn ergeben.
Oder da gibt es das eine Wort nicht, dafür gibt es andere.
Das bringt nichts, wenn du einfach die Wörter einzeln identifizieren kannst.
Ich kann mir nicht vorstellen, wie das On-The-Fly funktionieren soll mit verschiedenen Sprachen.
Ja, jetzt überlegt euch mal zum Beispiel, da würde ich hier irgendwie das Wort acht löschen
und in einer anderen Sprache ist das Wort acht nicht acht, sondern irgendwie zweimal vier, jetzt blöd gesagt.
Ja, aber sinngemäß kommt ja sowas in unterschiedlichen Sprachen vor und das sind dann zwei Wörter.
Das funktioniert nicht.
Nee, Sibaro ist tippen, nee, wer hat gesagt, einer tippt, nee, die haben doch gerade gezeigt, dass sie Collaborative Dingsbums,
editen können, guck, der Dude da unten.
Ach nee, ah, ja, das ergibt Sinn.
Die Typen hier editieren, die haben die gleiche Sprache und die anderen gucken nur zu.
Ja, das funktioniert, das lasse ich mir gefallen.
Das lasse ich mir gefallen, dass die zwei Typen, die es in der gleichen Sprache haben, editieren können
und die anderen, die es übersetzt kriegen, gucken nur zu.
Das lasse ich mir gefallen, das kann ich mir gut vorstellen, dass es funktioniert.
Ja.
Also, Chica is actually backstage editing data.
Of course, I can edit data right here in the main document.
And what's happening, one of us is working in teams, Chica backstage.
Wir sind aber ganz schön, ganz schön, äh, collaborative hier am Start.
I'm working in Word and together we're collaborating on the same data on the same underlying table.
Later this year, this technology will come to Microsoft 365 Experiences and be exposed to developers through an SDK.
365 Experiences.
I'm excited to show you, our fellow developers, how we at Spatial,
enabled and enriched our existing holographic collaboration app with HoloLens 2,
Azure Spatial Anchors, the Microsoft...
Das wird HoloLens, das wird...
So cringe, das war jetzt jetzt schon.
Die Dinger sind immer übelst zum Fremdschämen.
Teams, why don't we upgrade this to a live Spatial meeting to get everyone on the same page?
I'm actually just gonna click over to the Spatial tab in Teams.
Ach nee, das ist Teams, das ist...
Hat der nicht gerade was von HoloLens erzählt?
And I get this really cool 3D dollhouse view.
I'm gonna click into the room.
Where I can see everybody, but...
Ach nee, VR hat er erzählt, oder AR.
Why don't I take this off a 2D screen into a 3D meeting?
All I have to do is scan the QR code in the corner.
I'm gonna put on the device.
And scan the code.
Here we go.
Oops.
Hey, Amanda, what's up? It looks like you're already in here.
Oh Gott, sieht das schlecht aus.
Yep, I'm here in my office also wearing a HoloLens 2.
So you'll see me in the room show up as an avatar.
Aber sieht das schlecht aus.
And all of our content that you just saw from that Teams Channel is already up here on the wall.
You can even see some of the comments thanks to the Microsoft Graph API.
Cool.
Und with the...
Quai fragt, wofür braucht man sowas?
Ich glaube sowas braucht man eigentlich in der Art und Weise gar nicht.
Allerdings Microsoft möchte halt einem erzählen, dass man es braucht.
Es gibt ein paar coole Sachen, ja.
Zum Beispiel diese...
Das Microsoft Surface Hub.
Also quasi ein großer Bildschirm, wo du dann zusammen dran malen kannst.
Und du kannst das dann auch Leuten sharen, die nicht live dabei sind im Konferenzraum und so.
Das ist ganz cool.
Ja.
Aber das da mit HoloLens und... und... und Zeug auf dem Kopf.
Ich glaube, das wird keiner wirklich...
...wissensmäßig verwenden.
Und was... das sieht übel schlecht aus.
Ich mein...
Das sieht überhaupt nicht aus nach der.
Und die Animation.
Und erst mal gegen die Wand rennen.
Wow, das sieht großartig aus.
Und nur um zu beurteilen, was hier passiert ist.
Ich habe ein holographisches Bild auf der Wand als echte Person in dieser Wohnung.
Und habe es zu einem Avatar gebracht, der...
...jemand in der Welt sein könnte.
Und lass uns diesen Lebensraum machen.
Und das ein bisschen größer zoomen.
Und du weißt, Amanda.
Ich denke...
Warum machen wir nicht die neuen freihandigen Annotation-Kapazitäten...
...und geben ihr ein paar Accessorien?
Absolut.
Ich denke, sie könnte...
Was gucke ich mir da an?
...ein Bracelet benutzen.
Und natürlich der beendete Touch.
Ein HoloLens.
Jeder braucht ein HoloLens.
Toll.
Alter.
Hey, Lynn.
Es sieht so aus, als ob Lynn gerade mit dabei ist.
Hey, alle.
Ich liebe das.
Oh, das ist mir zu...
Mit meinem PC kann ich immer noch in der Erfahrung teilnehmen.
Selbst ohne HoloLens.
Also, bist du bereit, zu sehen, worauf ich gearbeitet habe?
Ja, lass uns das anschauen.
Seitdem ich mit meinem...
Das sieht irgendwie nicht gesund aus.
... mein Laptop durch den Spatial-Tab in Teams, den du vorhin gesehen hast.
Ich kann einfach aufbauen und Content direkt aus meinem PC abladen...
...und es in die Medien abladen.
Schau dir das 3D-Modell eines Hoverpacks an.
Oh, das ist cool.
Du weißt, Amanda, da das eine Mischung der Realität ist...
... warum würdest du nicht reingehen und es aufspielen lassen?
Natürlich. Lass uns das probieren.
Wow, es ist sogar cooler auf der Erde.
Oh nein.
Das tut so weh.
Das tut so weh.
Das schmerzt. Es gibt wirklich Sachen, die tun weh, wenn du zuguckst.
It's even cooler on the inside. Wow.
Oh, this is so dope.
So dope ist das.
Great work, Lin.
With Azure Spatial Anchors, this mixed reality experience...
War ASP.NET Core schon dran?
Nee, ich bin jetzt 20 Minuten unter der Zornhöfe.
Wir haben doch nicht, gar nicht angefangen.
Zum Glück ist das gleich vorbei. Ich kann mir das nicht länger angucken.
Zum Glück ist das gleich vorbei. Ich kann mir das nicht länger angucken.
Das bedeutet, dass ich die ammerste Erfahrung auf einem Holo-Lens habe...
... oder ich kann mit diesem Android-Helm hier nicht nur sehen, was alle anderen sehen...
... sondern aktiv teilnehmen und den Inhalt auch modifizieren.
Ich kann nicht warten, die Magie, die ihr baut, zu sehen.
Aber zuerst möchte ich euch einen kleinen Blick auf die Magie...
... die unser Team außerhalb dieses Konventionenzentrums erzeugt.
Vielen, vielen Dank. Ich habe eine fantastische Bildung.
Jetzt kriegen wir noch Special gezeigt.
Bin ich schon 42 Minuten an?
Wie kann ich 42 Minuten an sein und wir sind erst bei 12 Minuten von dem Video?
Und noch nicht mal gesperrt.
Fuck.
Ey!
Man kriegt ein neues Handy, weil man von Microsoft vor dem Hauptquartier rumschimmelt.
Das ist auch nice.
Hä?
Okay.
Also anscheinend gibt es irgendwie ein Minecraft-Handy oder so.
Was auch immer.
Man weiß es nicht.
Huh.
Na gut.
Machen wir mal an.
Wupp, wupp, wupp.
Gechilltes Wupp, wupp, wupp.
Oder weiter eine Runde Heavy Metal.
Was wollen wir anmachen?
Wupp, wupp, wupp. Okay.
Ich habe es ja schon geahnt...
...dass das ein bisschen zum Fremdschämen wird.
Aber es war schlimm, oder?
Ja, es war echt schlimm.
Super Intelligence Memory Music.
Skamas, kann ich da nur sagen.
Okay.
Also jetzt sieht man doch mal ganz schön, was dieses Tool eigentlich machen soll.
Bloß dann im Webinterface, was wir heute bauen.
Man sieht hier nämlich alle Fragen, die hier ankommen bei mir im Chat.
Nämlich mit AdWublo.
Also hier bla bla bla bla bla.
Was war Copernetis noch?
Der Sibaro, das hat jetzt mit dem Thema gar nichts zu tun gehabt, oder?
Copernetis ist quasi ein...
Wie nennen sie es?
Ein Orchestrierungswerkzeug für Linux-Container.
Sagen sie glaube ich selbst so oder so ähnlich.
Also im Prinzip ein Cluster-Manager, so ein bisschen.
So.
Bing Weather.
Ah gut, warum sollte Microsoft nicht Bing verwenden?
Das wäre ja irgendwie bescheuert, wenn Microsoft auf einmal dann Google Maps oder so aufmacht.
Du glaubst nicht, wie viele Leute doch noch IE benutzen.
Oh doch, das glaube ich.
Kannst du eine Seite empfehlen, wo man sich am besten eine Domain kaufen kann?
Ähm, also...
Ich kann dir die Seite zeigen, wo ich meine 2 von 3 Domains habe.
Ich habe ja einmal ein Max-FPS-Programm.
Die ist noch seit Ewigkeiten bei Nitrado, weil da hatte ich mal einen Server.
Aber da würde ich jetzt nicht einfach nur eine Domain kaufen.
Ich habe meine Domains hier bei denen.
Die sind allerdings günstig und sonst haben sie nicht allzu viel.
Bei denen habe ich die 2 anderen Domains.
Aber die haben...
Die sind nicht so toll in manchen Bereichen.
Die haben zum Beispiel keine ordentliche API, wo man DNS-Einträge anlegen kann.
Ja.
Max-FPS.de
Da gibt es aber nichts drauf.
Die habe ich mir einfach nur reserviert.
Timestamp, ja, das machen wir alles.
Und wie gesagt, ich habe meine Domains bei denen.
Das liegt aber auch daran, wenn ich ein Let's Encrypt-Zertifikat haben will,
dann gehe ich halt einmal von Hand in die DNS-Verwaltung
und lege das Token an und dann kannst du es ja danach aktualisieren.
Können wir mal gucken.
Also die Domains bei denen sind relativ günstig.
Oder war zumindest der günstigste Anbieter für die 2 Sachen, die ich mir damals holen wollte.
Deswegen habe ich sie da geholt.
Es gibt zig...
Also die funktionieren ganz gut.
Ansonsten gibt es noch zig andere.
Genau.
Namecheap ist auch relativ beliebt.
Ich glaube, das dürfte somit auch das sein, was ich am häufigsten so auf Reddit und so lese,
wenn es um Domains und sowas geht.
Da kannst du eigentlich nicht allzu viel verkehrt machen.
Ich würde gucken,
dass ich nach Möglichkeit irgendeine Domain, irgendeine Top-Level-Domain nehme,
die nicht so verbreitet ist.
Du kannst zum Beispiel hier irgendwie...
Keine Ahnung.
Nimmst du irgendwie...
poggy.xyz
Ups.
Tja, wenn man sich...
Das ist so eine Domain, die kann man sich gut merken.
Allerdings die ist billig
und kein Mensch will die haben.
Wobei, neun Euro im Jahr, das geht noch viel, viel, viel billiger.
Genau.
GoDaddy gibt es auch noch.
Pog, pog, poggy.law.
Das law ist bestimmt teuer.
Ja, ja.
Und was richtig teuer ist, sind so die normalen Dinger.
So geht...
Poggy.de, nett.
Poggy.de.
Also die anderen, teilweise sind die richtig teuer.
Ich würde einfach mal gucken jetzt zum Beispiel.
Ich weiß nicht.
Poggy, was gibt es für Möglichkeiten?
Was haben wir hier?
Poggy.com.
Ist unavailable.
Poggy.net ist unavailable.
Ja, poggy.eq.
Was auch immer das für ein Land ist.
Oder was auch immer das...
Was auch immer.
Keine Ahnung.
Ich kann mir überhaupt nichts vorstellen.
Eq ist eine Unicorn Library eigentlich.
Aber ich glaube nicht, dass das damit gemeint ist.
Sechs Euro im Jahr.
Ich würde einfach mal ein bisschen gucken.
Poggy.charge.
Genau.
Da habe ich drauf gewartet.
Poggy.club.
Ja, was auch ganz cool ist.
Poggy.house gibt es tatsächlich auch.
Habe ich nämlich.
Eine meiner Domains für Heimautomatisierung ist poggy.
Also nicht poggy.house, sondern was.house.
Allerdings.
Ganz irgendwie günstiger als das hier.
Muss man gucken.
Also du kriegst eine Domain schon für 5 Dollar im Jahr.
Wenn du dir die passende Domain aussiehst.
Poggy.sax.
Es gibt mittlerweile ernsthaft Poggy.sax als Domain.
Hahaha.
Genial.
Also könnte man da sowas machen wie keine Ahnung.
Das ist bestimmt schon belegt.
100 pro.
Unavailable.
Ist voll klar.
Ist voll klar.
Youtube.law ist noch frei.
Oh man.
Jetzt hier.
Omega0.net.
Relativ günstig.
10 Dollar.
Punkt US ist übelst günstig.
Aber ich glaube das darf nicht jeder beantragen.
Naja ok.
Genug Domains geguckt.
Ähm.
24 Stunden Stream.
Nein.
Wie immer.
Kein 24 Stunden Stream.
Aber ich bin echt froh, dass Microsoft uns jetzt erklärt hat, dass wir demnächst Internet Explorer in Edge verwenden können.
Da habe ich echt drauf gewartet.
Zum Glück kommt das jetzt endlich.
Ok.
Eine Sache warum wir das heute unter den Linux machen ist.
Ich würde gerne .NET Core 3 als Preview probieren.
Weil .NET Core 3 hat ein neues ganz lustiges Feature.
Und zwar.
Das da.
Das kann man mit anderen Tools schon ewig machen.
Ja.
Es ist nicht so als wäre das jetzt super neu.
Also man kann beispielsweise seit Jahrzehnten schon.
Selbst extrahierende Zip Archive oder sowas machen.
Da hast du aber immer noch ein bisschen Logik drum herum gebaut.
Und in .NET Core 3 bauen sie das zum ersten Mal ein.
Dass du jede Anwendung relativ easy als Single File Publishen kannst.
Das ist wirklich sehr praktisch.
Was du bisher machen konntest ist.
Du konntest .NET Core Selfcontained machen.
Dann kam ein Ordner raus.
Der alles enthält was du brauchst um deine Anwendung laufen zu lassen.
Allerdings war es dir dann immer noch selbst überlassen.
Dass du den Ordner irgendwie verteilen musst.
Ja.
Also du konntest dann natürlich den Zip Archive draus machen.
Oder irgendwas anderes.
Oder irgendeinen Installer der sich dann in AppData installiert oder so.
Allerdings hat man immer noch zusätzlich was gebraucht.
Ja in Go.
So wie es der Quay sagt.
In Go ist das natürlich schön.
In Rust ist das auch schön.
In Rust kannst du auch super statisch Compile so an.
Ähm.
Und es gibt schon.
Ich glaube Pucker hieß das Ding.
Ne.
Es gibt schon eine Weile ein ganz cooles Tool.
Auf Rust Basis.
Ich weiß jetzt aber nicht mehr wie es hieß.
Hieß das nicht Pucker?
Warp hieß das genau.
Das ist ganz nice.
Ähm.
Das ist von der Idee her eigentlich ziemlich simpel.
Das ist ein Programm.
Was quasi deinen.
Deinen Applikations Ordner nimmt.
Ihn.
Zippt.
Und sich merkt welches Programm quasi das.
Der Einstiegspunkt ist in deinem Ordner.
Und dann packst du da draus quasi eine.
Self.
Self.
Contain File.
Mit ein bisschen.
Mit ein bisschen Code am Anfang.
Der dafür sorgt dass die Anwendung quasi.
Immer im User Verzeichnis entpackt wird und geupdatet wird.
Und sich auch.
Nicht jedes mal neu installiert.
Und sowas.
Das ist ein ganz cooles Ding.
Da kannst du quasi alle möglichen Anwendungen.
Zusammenpacken zu einer Single.
Single Excel.
Das ist ganz nice.
Ja.
Und das ist mit .NET Core 3 ist das dann eingebaut.
Die machen das wahrscheinlich unter der Haube relativ ähnlich.
So.
Und das wollte ich mal ausprobieren.
Ich meine gut.
Was du immer noch angeben musst.
Ist was für eine Architektur.
Ne.
Nicht Architektur.
Was du für eine.
Für ein Target hast.
Also was du für eine Plattform hast.
Aber.
Das ist natürlich relativ simpel an der Stelle.
Dann nimmst du Windows 10 x64.
Linux x64.
Und.
Wahrscheinlich Darwin x64.
Ich habe ehrlich gesagt.
Noch nie was für Mac gemacht.
Und das wollte ich mal ausprobieren.
Deswegen müssen wir uns jetzt als erstes mal.
.NET Core 3 BriefView installieren.
Und ich habe gesehen.
Es gibt einen Snap.
Was ganz nützlich ist.
Weil da muss ich überhaupt nichts von Hand machen.
Wenn ich jetzt noch finde was das richtige ist.
Install using Snap.
Okay.
Das da brauchen wir.
Das ist nämlich ganz nice.
Da versau ich erstens meine Windows Installation nicht.
Mit irgendwelchem Zeugs.
Und.
Ich kann es danach einfach wieder entfernen.
Willst du wissen wieviel ich für den Renew der .TV Domain zahle?
Ja.
Kannst du mal reinschreiben.
Ich denke mal das ist nicht so teuer ist.
Oder?
Okay.
Installieren wir den Krabbel mal.
Das schöne ist halt.
Wenn man das als Snap installiert.
23 pro Domain pro Jahr.
Geht im Prinzip.
Eigentlich.
Aber.
Ich weiß nicht.
Ich weiß nicht.
Ich weiß nicht.
Ich weiß nicht.
Ich weiß nicht.
Ich weiß nicht.
Ich weiß nicht.
Ich weiß nicht.
Ich weiß nicht.
Ich weiß nicht.
.tv ist beliebt.
Geht eigentlich.
Aber du musst nicht 50 Domains irgendwie bezahlen oder so.
Aber ich glaube 28 Euro ist ganz okay für eine .tv Domain.
Oh hier ist es warm.
Ich muss mein Klima da reinschalten.
So.
Installieren wir mal.
Go.
Go.
Ge.
Okay.
Ist installiert.
Net 3.
Die Anleitung ist irgendwie fail.
Okay.
Ich habe nämlich letztens eine viel bessere Anleitung gefunden.
Da konnte man nämlich.
Weil es ist jetzt so.
Dass man.
Das nicht mit .NET starten kann.
Weil .NET ist das normale was ich installiert habe.
Sondern man musste irgendwas.
Ach genau.
.NET SDK .NET musste man jetzt nehmen.
Das ist nämlich das was das Snap installiert hat.
Das ist ganz cool.
Weil wenn ich fertig bin.
.NET Core 3 zu testen.
Dann kann ich nämlich einfach sagen.
Snap remove .NET Core.
Und es ist weg.
Komplett.
Hallo in 60.
Okay.
Also sagen wir mal .NET SDK new.
Und da gucken wir uns mal an was es für Projekte gibt.
Die wir erstellen können.
ASP.NET Core Web App.
MVC App.
MT.
Web API.
Was wollen wir haben.
Jawoll.
Wir wollen eine .NET Web API Anwendung haben.
Und dann starten wir mal.
Unsere IDE.
Mit dem Verzeichnis.
Und schauen wir mal.
Ob der das auch erkennt.
Ich habe gelesen.
Das Rider das kann.
Der kann.
Der erkennt wohl automatisch.
Wenn man eine .NET Preview Version installiert hat.
Ich habe es jetzt ja im Prinzip nur hier im Stream verwendet.
Und ein bisschen so nebenbei.
Ich muss sagen.
Ich finde das ist wirklich.
Haben sie wirklich gut gemacht.
Ja.
Das muss ich von Visual Studio echt nicht verstecken.
Und hat ein paar Sachen dabei.
Die sogar schöner sind als in Visual Studio.
Allerdings finde ich die Performance von Visual Studio besser.
Zumindest die Performance von Visual Studio ohne zigtausend Plugins.
Open Solution Project.
.NET 3 haben wir das.
.NET 3 haben wir es genannt.
Hier.
Zack.
Open.
Gucken ob das funktioniert.
.NET SDK.
.NET.
.NET.
Ja ey.
Da muss ich nichts draus machen wie die Benamung hier ist.
Das ist wirklich Big Brain Benamung.
Huge.
Massive Brain ey.
Restoring Packages.
Oh er rödelt.
Warten wir mal ab was er macht.
Restoring Packages.
Restoring Packages.
Der restort aber ganz schön lang Packages.
Wird gar nicht mehr auf Packages zu restoren.
Vielleicht hätte ich einmalig die Sache hier per Kommandozeile starten sollen.
Aber wir gucken mal in die Settings was er ausgewählt hat für einen .NET SDK.
Ähm.
Weiß gar nicht wie der Punkt heißt.
.NET Version.
Toolset and Build.
Klingt eigentlich gut.
Hier.
Ah.
Guck mal.
Guck mal da kann man die neue .NET Version auswählen.
Also ich muss sagen.
Also ich muss sagen.
Rider find.
Also die haben wirklich sich die Mühe gegeben.
Ich mein das ist.
Das ist super easy jetzt.
Ne.
Warten.
New hat einen Fehler gegeben.
Oh.
Wie.
Ja was ist das denn.
Moment Leute.
Ähm.
Ich mach mal zu.
Ich hab gar nichts gesehen.
SSL.
Oh das ist bestimmt jetzt irgendwie ein.
Fuck.
Moment.
Warum kann ich jetzt nicht weiter hoch scrollen.
Da fuck.
Guck mal.
Da.
Da.
Da.
Da.
Da.
Da.
2.
3.
4.
5.
6.
7.
8.
9.
1.
2.
1.
2.
1.
1.
1.
1.
2.
3.
1.
1.
1.
1.
1.
1.
1.
1.
1.
1.
1.
Ich versuche das mal zu runnen, dann wird er wahrscheinlich auch meckern.
.NET, SDK, ne, ach fuck, wie war das, .NET.
Moment, new.
Ach, ich habe keinen T-Maxx-Bahn, deswegen hat es rumgespackt.
Ähm, run.
Okay, unable to get report...
Da machen wir mal so, ja, okay, bam.
Nope.
Was ist deine Meinung zu Bitcoin?
Ich habe mal ein Video dazu gemacht, wo im Prinzip das Fazit war,
dass man auf keine selbsternannten Profis hören soll,
die einem erzählen, wie es funktioniert und was demnächst passieren wird,
sondern sich jeder selbst überlegen muss, ob das was für ihn ist
und ich persönlich gar keine Ahnung von Kryptowährungen habe.
Deswegen bin ich der Falsche, der dazu was sagen kann.
Äh, gut, das hat den Fehler doch mal nicht gefixt.
Wir suchen da jetzt einfach mal.
Remote Certificate is invalid, according to, to was?
According to GitHub.
Da suchen wir einfach nach einem Issue, wo das drinne steht.
Ah, ähm, das ist bestimmt easy as a fuck zu lösen.
Nein, das ist was anderes.
So ist das, wenn man BriefView-Versionen verwendet.
Das ist irgendwie was anderes.
Ich muss ja noch eine .NET Core 3 suchen.
Mal Linux dabei suchen.
Obwohl, wir haben ja schon...
...einen Teil SSL-Sort hier.
Aha!
Open SSL Verify, was?
Was machen die da?
Wub, wub, wub, wub, wub, wub.
Tja.
Aha!
Hier ist doch schon was.
Aha, sehr gut.
Export.
Oder aber export.net system net use socket...
Was war hier? Keine Ahnung.
Hä?
Hä?
Geht das jetzt?
Äh, äh, äh, er macht zumindest was.
Geht, sehr schön.
Easy as a fuckle.
Okay.
.NET Run.
Wunderbar.
So, können wir Rider wieder starten und loslegen.
Hast du zu Hause eigentlich die Ducky One 2 oder die K70?
Ich hab die...
Ist das Ding K70?
Das Corsar-Ding.
Die Ducky One Skyline hab ich auf der Arbeit.
Ich weiß nur, dass das Ding irgendwas mit Platinium, Corsar, Platinium...
Hast du nicht gesehen, heißt.
Wenn man...
Wenn die Taster...
Wenn der Tastaturname schon so kompliziert ist, dass man ihn sich nicht merken kann,
stimmt eigentlich irgendwas nicht, ne?
Okay, stellen wir's mal um auf das Neueste.
.NET 3 SDK.
Und dann machen wir Rider nochmal zu.
Und wieder auf.
Oh, nee!
Oh, funktioniert direkt.
Nice.
Muss man gar nicht schließen und wieder öffnen.
Okay, machen wir die Schriftgröße mal ein bisschen rauf.
.NET 3 SDK.
.NET 3 SDK.
.NET 3 SDK.
Warum ohne Material-Theme-UI-Plugin?
Ich wusste gar nicht, dass es das gibt.
.NET 3 SDK.
.NET 3 SDK.
.NET 3 SDK.
Sieht doch aber auch so ganz gut aus.
.NET 3 SDK.
Es sieht vom Farbschema ziemlich genau aus wie Visual Studio Dark Mode.
.NET 3 SDK.
.NET 3 SDK.
.NET 3 SDK.
.NET 3 SDK.
.NET 3 SDK.
.NET 3 SDK.
.NET 3 SDK.
Was nicht schlecht ist, weil ich so gut wie nie Rider sonst verwende.
.NET 3 SDK.
.NET 3 SDK.
.NET 3 SDK.
Deswegen kann ich mich da wenigstens besser zurechtfinden.
So, Startup.
.NET 3 SDK.
.NET 3 SDK.
.NET 3 SDK.
.NET 3 SDK.
.NET 3 SDK.
.NET 3 SDK.
.NET 3 SDK.
.NET 3 SDK.
.NET 3 SDK.
.NET 3 SDK.
.NET 3 SDK.
.NET 3 SDK.
.NET 3 SDK.
.NET 3 SDK.
.NET 3 SDK.
.NET 3 SDK.
.NET 3 SDK.
.NET 3 SDK.
.NET 3 SDK.
.NET 3 SDK.
.NET 3 SDK.
.NET 3 SDK.
.NET 3 SDK.
.NET 3 SDK.
.NET 3 SDK.
.NET 3 SDK.
.NET 3 SDK.
.NET 3 SDK.
.NET 3 SDK.
.NET 3 SDK.
.NET 3 SDK.
.NET 3 SDK.
.NET 3 SDK.
das, was Steuerung-Shift-P ist
in Visual Studio Code.
Das gab's, das gab's
hier auch. Ich weiß bloß nicht, was
für ein Shortcut das ist.
Doppel-Shift?
Schaft. Tatsächlich!
Oh.
Doppel-Shift.
Alt-F4. Nope. Das funktioniert
hier nicht. Wir sind unter Linux. Da gibt's kein Alt-F4.
Ähm.
Ja, gut. Aber wenn ich das hier
so mache, ist das wie wenn ich das hier mache und beim
nächsten Öffnen ist es
wahrscheinlich wieder klein.
Font-Size.
Ah, hier.
Ah, das ist cool!
Das ist sehr, sehr, sehr
nice.
Das ist doch sehr, sehr nice.
Ähm.
Jetzt können wir hier einstellen. Font-Size.
Ach nee. Custom-Font.
Ich will nicht.
Ich will Dings haben. Hack. Will ich haben.
Hack-Beste. Hack.
Driftgröße 18.
Bam. Moment.
Ach, fuck! Das war
für's Interface.
Lull.
Lull.
Das war für's Interface. Wie mach ich das für den Editor?
Font.
Hier.
Size. 18.
Ja, das ist eine schöne Größe.
Hallo?
Macht das jetzt was?
Hä?
Datei neu öffnen?
Hä?
G-Bated.
Editor?
Font?
Font?
Ah, Moment. Das kann man nicht überschreiben.
Ah.
Ah, ja.
Okay. Ähm.
Das heißt, ich muss auf...
Ach ja. Okay. Das heißt, hier kann ich jetzt auch umstellen.
Auf Hack.
Und auf 18.
Und nochmal 20.
Jetzt geht das bestimmt, hä?
Ah.
Ja, so ist das doch schön.
So gefällt mir das.
Okay. Nice.
Ähm, dann starten wir den Krempel mal.
Und gucken mal, was passiert.
Ey, ich hab's ja schon.
Ich wollte... Oh, warte. Moment.
Ey, ich glaub, Ryder hat das kaputt gemacht,
weil wir es gestartet haben mit...
mit der alten .NET-Version.
Kann das sein?
Ich lösch das nochmal und öffne es nochmal neu.
Mal gucken...
Ja, jetzt funktioniert der Krempel hier auch.
Reader.
Doch, man kann das mit STRG-Plus machen.
Das Problem ist, der merkt sich das nicht.
Wenn man das zumacht und wieder neu aufmacht, dann...
Ja, das ist doch nicht so.
Ja, das ist doch nicht so.
Ja, das ist doch nicht so.
Ja, das ist doch nicht so.
Ja, das ist doch nicht so.
Ja, das ist doch nicht so.
Ja, merkt er sich's halt nicht.
Und ich will ja, wenn ich ein neues Editor-Fenster aufmache,
dass der immer eine ordentliche Fontgröße hat.
Und ich ab und zu mal...
Oder ich jedes Mal jedem Öffnen
das einstellen muss.
Deswegen muss man es anscheinend in Settings machen.
Gibt übrigens auch Doppelt-Control.
Aha.
Okay, ich glaub, jetzt hat er's gecheckt.
Warte mal. Start.
Building.
Yay!
Und sogar ein...
Ein Browser geht auf.
Ein Chrome geht auf.
Sehr schön.
Warum auch immer der genau mit dieser Seite jetzt startet, weiß ich nicht.
Das ist bestimmt irgendwo hardcoded.
Erstmal den Explorer zumachen.
Ein bisschen kleiner machen, sonst hat man wieder überhaupt nix von der...
Sieht man ja überhaupt nix.
Ich glaub, können wir die Schriftgröße noch eins kleiner machen?
Oder sieht man's dann schlecht?
Ich glaub, wir können's noch eins kleiner machen, oder?
Und wo war das jetzt?
Editor.
Ich glaub, vergessen, wo's war.
Ja.
Hammer.
16?
Ich glaub, 16 ist okay.
Ja.
Schick, ein kleines ein.
So, oder?
So ist doch schick.
So sieht man alles und ich hab ein bisschen Platz.
Oder? Ich glaub, das sieht man jetzt ganz gut.
Ja.
Okay, die ganze Geschwurbel machen wir hier weg.
Brauchen wir alles nicht.
Develop my pages.
Use MCs.
Use MCs.
Use HTTPS.
Use HTTPS.
Redirect schon.
Hat er überhaupt das Richtige jetzt erstellt?
Hat er ein Web-API-Projekt erstellt?
Ja, hab ich gesagt, dass er ein Web-API-Projekt erstellen soll.
Was haben wir sonst noch zur Auswahl eigentlich?
Äh, ein Web-API-Projekt.
Ein leeres, ein leeres.
Wir können noch MVC erstellen.
Ich glaub, Web-API müsste ganz gut passen.
Ist das jetzt auch...
ASP.NET Core?
3?
3?
Kann ich Version oder so machen?
Minus, Minus Version.
2.
Was?
Ah, ich hab das Falsche installiert.
Oh, meine Fresse.
Ghetto Recto.
So, und jetzt sieht man aber eine schöne Sache an dieser ganzen Geschichte, wenn man es mit Snap installiert.
Snap install.
.NET SD.
Ich muss wahrscheinlich Beta-Version oder sowas angeben.
.NET SD.
.NET SD.
.NET SD.
.NET SD.
.NET SD.
.NET SD.
.NET SD.
.NET SD.
.NET SD.
.NET SD.
.NET SD.
.NET SD.
.NET SD.
.NET SD.
.NET SD.
.NET SD.
.NET SD.
.NET SD.
.NET SD.
.NET SD.
.NET SD.
.NET SD.
.NET SD.
.NET SD.
.NET SD.
.NET SD.
.NET SD.
.NET SD.
.NET SD.
.NET SD.
.NET SD.
.NET SD.
.NET SD.
.NET SD.
.NET SD.
.NET SD.
.NET SD.
.NET SD.
.NET SD.
.NET SD.
.NET SD.
.NET SD.
.NET SD.
.NET SD.
.NET SD.
.NET SD.
.NET SD.
.NET SD.
.NET SD.
.NET SD.
.NET SD.
.NET SD.
.NET SD.
.NET SD.
SDK. Ich muss auch das Richtige
removen.
Okay.
Jetzt muss ich nämlich mal gucken, wie man
Wir wollen nämlich den 3er installieren.
Da muss man bestimmt minus minus
Preview oder sowas
sowas machen.
Schnapp.
Allerdings wollen wir nicht den 3er haben.
Sondern ich glaube der 6er ist das
letzte.
Schnapp install.
Minus minus Beta muss man machen.
Gut.
Wenn man das Richtige installiert, dann geht es wahrscheinlich
auch direkt.
Moin Matt, 9908.
Jetzt habe ich das gleiche nämlich nochmal installiert,
wie ich es schon installiert hatte. Das ist eigentlich total beknackt.
Übrigens Leute, wir müssen uns insgesamt
heute vielleicht ein bisschen beeilen, weil
18.30 oder so wird gegrillt.
Hot gegrillt.
Bis dahin muss ich fertig sein.
Oder mal gucken, wann gegrillt
wird. Aber so in dem Dreh wird es wahrscheinlich sein.
So.
Und jetzt gucken wir mal Version, was
wir jetzt haben. Jetzt haben
wir dort Preview 6.
Jetzt können wir auch nochmal
eine neue Web-AP anlegen.
Hätte ich nämlich
eben mal richtig geguckt, hätte ich festgestellt, dass ich
im Rider wahrscheinlich auch gar nicht das Richtige ausgewählt
habe. Was für ein Grill.
Ich sage doch, einen hotten Grill heute.
Kein hottes Grill heute,
ist ja wirklich ein hotter Grill.
Aber ich meine, Grills dürfen auch hot sein.
Und nicht nur Grills.
Dot-Net-Version.
Wow.
Ah, jetzt hat er das Richtige.
Sehr gut.
Hoffentlich funktioniert er gerade jetzt auch.
Loading, Loading,
Starting, bla bla bla.
Startup.
Da sieht das nämlich auch schon anders aus.
Ja, jetzt sind wir wieder bei der alten
Frage angekommen. Routing oder
Routing?
HTTPS Redirection braucht keiner.
Security Features, overrated,
debated.
Deactivated.
Aber nicht.
Ah, run.
Hallo, Klarname.
Value, 1, 2.
GG Eats.
Easy.
Hat es geklappt mit dem Zoom?
Ja, ich habe einfach eingestellt, dass die Schriftgröße
jetzt immer 17 ist.
Security, wer braucht das schon?
Das ist schon komplett überbewertet.
So, also,
wo fange man jetzt am besten an?
Ich würde sagen, wir machen einfach mal
eine statische Webseite,
die eine Liste
anzeigt mit Fragen aus
dem Chat.
Also,
mal gucken, ob das hier funktioniert. Wir machen
einen neuen Ordner,
der www.root
heißt.
Ich hoffe, das funktioniert
und ein .NET Core 3 immer noch so,
beziehungsweise ASP.NET Core 3.
Dann sagen wir App, File Server,
dass er auch die,
dass er auch aus diesem www.root
die normalen statischen HTML-Seiten
auch ausliefert.
HTML-File, Index
und da kommt jetzt irgendwie was rein.
Bla, bla, bla, bla, bla, bla, bla.
So, und jetzt starten wir mal
und gucken,
ob das funktioniert.
Warum startet er immer
diesen komischen API-Controller
und warum
warum startet er den
API-Controller und startet nicht einfach Index?
Okay, aber Index-Seite funktioniert, das ist schon mal
schön.
Der Editor ist ein bisschen klein.
Da unten braucht eigentlich auch kein Mensch.
Kann man nämlich irgendwie abgewöhnen, dass der einfach
gar keinen Browser startet?
Dass der gar keinen Browser startet?
Das kann man bestimmt in Run machen, hä?
Run?
Ach, hier steht drinnen.
Kann ich das nicht ändern?
Ich will das
editieren. Warum habe ich das nicht?
Kann ich das nicht editieren?
Hallo?
Das darf ich editieren? Das darf ich nicht editieren.
Ist nur in der Pro-Version, ja?
Hä?
But why?
Ich, ich, wir
debaten den jetzt einfach. Ich stelle das jetzt einfach
auf Edge, weil Edge gibt es bei mir nicht.
D-D-Debated.
Ha! Mist!
Der Scheit macht
ein dummes Pop-Up. Der soll kein Pop-Up machen.
Wie ist das in der Projektdatei
drin?
Ne?
Ach stimmt, vielleicht muss man, stimmt.
Das kann sein, dass man stoppen muss, bevor man das editieren
darf. Aber das wäre merkwürdig.
Ups.
Ja, ja.
Stop.
Tools.
Run. Edit.
Hm.
Ah.
Warum darf ich das nicht ändern?
Das ist doch, das ist doch
doof. Mach ich einen neuen?
Kann ich einfach einen neuen machen?
Copy Configuration. Aha!
Beste, Alter.
Ne.
Moment, warum darf ich das nicht anpassen?
Ich komme ja, ich komme ja,
echt debated vor.
D-D-D-D-D-D-Debated.
Ja, okay, ich weiß nicht,
warum ich meinen Browser nicht ändern darf.
Wir suchen mal danach.
Autostill.
What?
Edit.
Run Build Configuration.
Environment Variable
Ich bin verwirrt
Was? Wo?
Click on Environment Variables Box
Ach da
Ach ne
Steht da nichts drin
Das verwirrt mich jetzt echt
Warum ist das so blöd gemacht
Click plus symbol to add new environment variable
Ich habe hier kein plus
Seht ihr hier irgendwo ein plus
Oder Auskennfuchs
Der hat was gepostet
Der kennt sich aus
Der ist schon öfters hier gewesen
Ganz unten
Aha
Just found all things can be changed by adding
Launch settings JSON under properties in the project
Was?
Launch settings
Wo habe ich launch settings
Hier
Ich bleck da nicht
Was ist das
Launch settings JSON under properties in the project
Das haben wir doch hier
Ja
Bin ich doch
Properties
Das ist most immersive user experience ever
Ich sehe das ist nicht so einfach wie ich gedacht habe
Properties ist ein Ordner
Da ist nichts drin hier
Ach da
Moment da drin
Da ist aber
Ne
Das glaube ich nicht dass ich da irgendwas drin editieren muss
Das wäre schon ganz schön merkwürdig
Ne
Im
Im File Browser im Writer
Was wo
App Settings da ist nix drin
Da ist was anderes
Ich sehe schon das ist schon unglaublich schwierig das einzukriegen
Wo könnte das denn sein
Unter Dependencies
Ne Dependencies kann nicht sein
Dependencies sind meine Libraries die ich eingebunden habe
Chat she baited
Chat ist
Chat ist übelst she baited
Tja
Ach das da vielleicht
Ach da tatsächlich
Tatsächlich
Tatsächlich
Tatsächlich
Ah
Okay das ist ja beknackt gemacht ey
Könnte man das nicht hier drüber ändern
Wenn es ja schon da drunter steht
Okay
Launch URL
Slash
Application URL
5000
Wir brauchen keinen
Ah okay und jetzt
Jetzt geht's
Sehr sehr nice
Aber was noch viel schöner wäre
Ich würde gerne noch ein paar Dinge machen
Ich würde gerne noch ein paar Dinge machen
Wenn der
Wenn der
Launch Browser falls machen wir einfach
Weil dann bleibt der Browser einfach auf
Und Klima da raus machen wird zu kalt
Die URL ist jetzt ein Doppel Slash
Ach das werden wir überleben
Ich kanns jetzt auch noch
Ich glaube ich glaube das liegt aber
An meinem Browser
So gut wir haben es geschafft
Nach 50 Stunden haben wir jetzt im Browser mit Fenster auf wo
drin steht.
Sehr, sehr nice.
Okay, also Leute, wie fangen wir denn am besten an?
Als erstes
machen wir mal einen
Controller oder wir funktionieren den
Controller hier um.
Der heißt nämlich nicht Values Controller,
sondern den nennen wir um in
Questions
Controller, weil letztendlich
geht es ja darum, dass wir Fragen
aus dem Chat in die Liste
reinhauen.
So, was brauchen wir?
Wir brauchen ein Get auf alles.
Was brauchen wir?
Wir brauchen ein Get auf eine einzelne
Nachricht, brauchen wir nicht. Ein Post zum
Updaten brauchen wir nicht, ein Put zum Updaten
brauchen wir nicht, ein Delete brauchen
wir. So, das war's.
Da sieht der Controller doch schon wieder deutlich übersichtlicher
aus.
Dann brauchen wir einen
Background Service,
der
sich zum Twitch Chat
connectet
und die Chatnachrichten
abfragt.
Directory Services
Da machen wir jetzt eine
neue Klasse, die nennen wir
Twitch Chat
Twitch Chat
Service
Irgendwie so. Da machen wir das rein,
was wir im letzten Stream programmiert haben.
Allerdings wird das
ein iHosted
Service.
Das Schöne daran ist, dass ASP.NET
Core den Campbell für mich starten, stoppen,
starten und stoppen kann.
Und im Hintergrund läuft.
Mein Thread muss ich selbst noch aufmachen.
Warum schreibst du das in C-Sharp, weil das mein Lieblings, äh, C-Sharp, äh, C-Sharp, Alter, hört sich an wie in irgendeinem MMO.
Was spielst du für ne, für ne, ich spiel C-Sharp, ähm, weil das mein Lieblings, mein Lieblings-Framework eigentlich ist.
Die Sprache ist, ist, würde ich sagen, so halbe halbe mit Ruby.
Ruby ist, finde ich auch super.
Aber das .NET Framework fehlt.
Gefällt mir gut.
Und das, also das Gesamtpaket gefällt mir in .NET eigentlich am, macht mir am meisten Spaß.
Und ich komme auf der Arbeit sehr selten dazu, überhaupt irgendwas in .NET zu machen.
Deswegen mache ich hier im Stream ganz gern mal Zeug mit .NET.
Okay, return task completed.
Wir tun einfach so, als hätten wir was gestartet.
Also wir werden jetzt, wir werden jetzt, weil, das ist massiv debaten, das Ding.
Dann gehen wir in unseren Startup und sagen service add
Posted service, ja, äh, und dann Twitch Chat Service.
So, und da müssen wir jetzt den Krempel reinmachen vom letzten Mal.
Welche Sprachen brauchst du auf der Arbeit?
Äh, also ich habe relativ viel in Ruby, das ist das Zeug von mir, was ich gebastelt habe, äh, das ist zum größten Teil in Ruby.
Dann braucht man natürlich ganz viel Bash, also im Shell-Skript kommt, um, um, um, um Shell-Skripts kommt man, kommt man nicht drum rum.
Ich habe ein kleines Ding in Rust.
Ich habe eine automatisch generierte Übersicht über, äh, unsere Systeme, die ich mal gebastelt habe, die ist in Groovy.
Ähm, muss man mal überlegen.
Also hauptsächlich, tagtäglich braucht man eigentlich hauptsächlich Bash und halt, äh, jede Menge System, wie nennt man das, so, so, Automatisierungscode, also das ist bei uns, bei uns ist das Puppet.
Puppetcode mag ich überhaupt nicht, ist voll, ist total eklig.
Ähm, in Go, Go habe ich nicht viel gemacht, Go habe ich ein bisschen rumgewurstet.
Ähm, Rust finde ich ganz nice, Rust ist aber ein bisschen gewöhnungsbedürftig mit ihrem Checker.
Also ich finde Rust überhaupt nicht komfortabler als .NET.
Rust ist, äh, Rust ist eigentlich designt, dich zu nerven, dass du es richtig machst.
Äh, was hältst du von Vim oder Emacs als IDE für C++?
Als IDE für C++?
Ähm, Emacs vielleicht, Vim, Vim tut sich ein bisschen schwer, damit ich weiß, es gibt ganz viele Leute, die sagen, ja, braucht einfach nur Editor, aber ich finde so die, die, ähm, advanced Funktionen sind in Vim nur mit sehr viel Gefrickel möglich.
Außerdem ist Vim-Skript ganz, ganz schlimm.
Ähm, also ich würde als C++ IDE, würde ich, wenn es was kostenloser sein soll, würde ich, äh, den Qt Creator nehmen.
Ähm, es gibt von Jetplanes, gibt's auch den C-Lion, den habe ich aber noch nicht verwendet.
Ähm, ich verwende meist den Qt Creator für C++.
Ja, genau, Qt, Qt Chat.
Ähm, und C-Sharp IDE gibt's eigentlich nur zwei sinnvolle, meiner Meinung nach, nur zwei sinnvolle Sachen.
Das ist, ähm, entweder Visual Studio unter Windows oder meinetwegen auch Rider unter Windows oder Rider unter allem anderen als Windows.
Wie gut Visual Studio für Mac ist, keine Ahnung, habe ich noch nie verwendet.
So, äh, Question Controller, Service, Dings hier, da sind wir stehen geblieben.
Task completed.
So, dann machen wir den jetzt mal auf, wo hatte ich denn das letzte Mal hier, Twitch Chat, da habe ich den Krempel gespeichert.
Ähm, da.
Jetzt gucken wir uns jetzt mal ab.
Ähm, also wir brauchen, das Ding ist jetzt dazu da, um uns zum Twitch Chat zu connecten.
Ähm, das heißt wir brauchen auf jeden Fall.
Ein Private Task, irgendwie Worker oder so.
Worker.
Dann brauchen wir einen, das kann ich mir kopieren.
Äh, Channel Name.
Ups.
Kann ich mal so ordentlich kopieren hier, ist das möglich?
Ah.
Ähm, Private Channel.
Channel ist ganz einfach.
Ach.
Äh.
Äh, das ist nämlich mein Channel hier, der Wubblos.
Wubblos Channel.
Äh, Host ISC Twitch, Nickname, den Nickname randomisen wir mal.
Ähm, können wir hier randomisen oder auch da unten randomisen, ist eigentlich wurscht.
Ähm.
Achso, na gut, die kann ich natürlich nicht konstruieren.
Ähm.
Port machen wir noch.
Äh, vielleicht brauchen wir doch mal einen anderen Port.
Port, äh.
Äh, 6667, ne?
Genau.
Gut, und da müssen wir das doch hier oben machen.
Weil, ähm, Read Only dürfen wir nicht hier zuweisen, darf man nur im Konstruktor zuweisen.
Ähm.
Nickname.
Nickname, äh, der Big Name.
Nickname ist, ähm, Justin Fan, Dings.
Wobei wir das nicht so machen, sondern wir machen einen Random Generator.
Äh.
Der uns den, den Random Anteil von der Nummer generiert.
Next.
Und dann von, es muss glaube ich immer 5-stellig sein, sonst mag er nicht.
Von 10.000 bis, nein, nein, nein, nein.
Ist dringend.
So.
Und jetzt können wir sagen, mein Nick, oh, das geht nicht.
Alt, Alt-Pfeiltasten geht in Rider nicht.
Kann man bestimmt einschalten.
So, und Nick ist Justin Fan plus meine ID.
Ja.
So, da haben wir unser Nickname.
Typo in Justin.
Ich glaube kaum, dass das Rider einschätzen kann.
Glaubst du, dass Homo System auf dem Raspberry Pi 4 gut läuft, oder empfiehlst du immer noch
dieses Asteroid Board?
Das Asteroid Board ist auf jeden Fall schneller als der Pi 4.
Du hast Steuerung, Steuerung plus Shift-Taste?
Ich will das da eigentlich verschieben hier.
Steuerung, Shift.
Steuerung, Shift.
Nö, mag er nicht.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Entschuldigung, wenn das nosso
weißosedi im Internet ist, warum?
Kleiner Kumpelvey.
Gib mir das mal was.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
und wenn du da eine minute auf neustart warten muss ist immer nervig shift alt
pfeil das habe ich auch schon probiert
shift alt pfeil warum sollte es anders sein keine ahnung wahrscheinlich ist es
anders kann man diese rechtschreib korrektur abschalten die geht man
nämlich auf den keks muss man ausschalten spell
die weg hat jetzt nicht interessiert oder die spieler jetzt der spieler aber
aus der hat keinen bock was man das jetzt neu öffnet mich aber heftig das
ding die spieler ist aus check nix check nix check mit dem spieler alter
ich will das nicht im dictionary hinzufügen ich will dass er gar nichts
dann gar nichts spell checkt das alles ausgeschaltet das sind so
advanced funktion die mich irgendwie nervt alt enter ja dass das ja was ich
will ja ich habe alles ausgeschaltet aber anscheinend doch nicht so was habe
ich jetzt gemacht was habe ich jetzt gemacht die compiler
ach so das ist so scott ansicht
einfach ich du ach guck mal jetzt ist
es aus das hat einfach eine weile
gedauert bis es ausgeht okay kann ich mit leben so wir müssen also wir machen
jetzt hier private war irgendwie loop so ein bisschen arduino style wie das
ding heißt dann machen wir hier einen neuen task da brauchen wirCause 짱eler
Worker gleich New Task und der Task heißt loop der nicht ausführen will und dann sagen wir
und dann sagen wir Worker
Start.
Gut. Und hier
drinnen machen wir jetzt das, was wir das letzte Mal
mit dem Twitch Chat gebastelt
haben. Nämlich erstmal
müssen wir uns connecten.
Also brauchen wir jetzt erstmal
einen TCP-Client.
So. Wacht.
Dann müssen wir sagen,
dann wollen wir den
Stream vom
TCP-Client haben.
Das ist ein bisschen
altertümlich gemacht, so der TCP-Client
der im .NET-Framework
drin ist, finde ich. Da musst du
viel mit Streams
hantieren. Response hin, dann
Read, äh, nee hier. Request reinschreiben,
Response lesen.
Es wäre, man kann oder könnte
es bestimmt einfacher machen, ja.
So. Und jetzt muss ich mit dem Stream
nehmen und da was reinschreiben.
Das sorgt im Endeffekt dafür,
dass ich das, was ich in den Stream reinschreibe,
zum Server schicke.
Dieses Doppel-Klammer-Feature muss ich
irgendwann auch nochmal ausschalten.
Kannst du jetzt nicht in .NET Core 3
using WarStream machen? Das kann
sein. Ich muss mal gucken, wo man
überhaupt die...
Man muss doch
bestimmt irgendwie diese Sharp-Version
kann man doch bestimmt irgendwo einstellen.
Ach nee, da hat schon die Neueste
eingestellt. Du musst dich
dran gewöhnen, das Klammern-Feature ist doch... Ja, kann sein!
Aktuell geht's mir eher auf den Keks.
Äh, Zargonet, was meinst du denn?
Kannst du jetzt nicht using WarStream
gleich machen?
Das kann man doch schon
länger machen. Oder meinst du
was anderes?
Ich hab mir letztens
von der Build
einen Webcast angeguckt,
viel hängen geblieben ist nicht.
Nee, ich glaub, das geht schon
länger mit diesem WarStream gleich.
Ich glaub, das geht schon länger.
Ohne einklammern?
Ach so. Du meinst,
kann man sowas hier...
Ups. Oder hier noch die
Klammern drumherum?
Neu sind die Sharp-8-Essing-Streams.
Stream.
Using.
Aha!
Ja, richtig, guck mal, anscheinend geht
das. Anscheinend geht das
jetzt. Aber er zeigt immer
noch einen Fehler an. Warum macht er das?
Ja gut, das machen wir doch eigentlich so,
oder? Das ist doch im Prinzip...
Das ist jeder jetzt nicht. Viel Unterschied zu dem, was wir
machen.
Muss ich mit dem Stream was machen?
Ach, ich bin ja auch ein Noob. Guck mal, ich hab die Klammer kaputt gemacht.
Lol.
Ja, stimmt.
Stimmt, das soll jetzt funktionieren.
Das ist viel schöner ohne einklammern.
Weil man hat oftmals, man sieht's ja hier,
du machst ein Using, ein Using und da drin
eine Schleife. Du bist schon eine halbe Seite nach rechts.
Das ist ganz nice.
Okay, also was brauchen wir da jetzt?
Das müssen wir da reinschreiben.
Copy und Paste ist on point
heute.
Coding.
Gut gemacht, Biles.
User, Host, Nick.
Ja, Nickname müssen wir noch reinschreiben.
Den Nickname haben wir schon reingeschrieben.
Den Konstruktor sollten wir auch oben lassen
und nicht irgendwie so komisch da unten hinwursten.
Ähm, JustinFan,
bla bla bla, Connect.
Jetzt funktioniert das. So, und als nächstes
haben wir dann gesagt,
wir brauchen
einen Streamreader.
Das ist ja, das ist wirklich cool.
Das können wir jetzt auch wieder so machen.
Das ist ein Feature,
das finde ich jetzt schon mal ganz nice.
Dann spart man sich nämlich Eindrückungstiefe
und hat nicht gleich, und ist nicht auf
der Hälfte der Seite, nur weil man ein paar Usings hat.
Das ist wirklich cool.
Gefällt mir jetzt schon.
So, Streamreader.
Dann readen wir den Stream.
Und zwar bis
Reader end
of stream.
Bis es, bis es, also solange,
solange es nicht end of stream ist.
Und im Prinzip
können wir uns dann den Kram
eigentlich copy und pasten vom letzten
Mal, den wir gemacht haben.
Link.
Achso, na gut, das haben wir jetzt nicht.
Brauchen wir auch nicht.
Pong Twitch.
User Index Message.
Ja.
Gut, ähm.
Jetzt brauchen wir auf jeden Fall noch einen
Typ für
die Chat Messages. Ich mach den mal kurz
hier oben rein zum ausprobieren.
Class Chat
Message
So, und der kriegt
eine ID.
Weil vielleicht machen wir da noch eine
SQLite Datenbank oder so hin.
Mal schauen, das ist ja mit
ASP.NET übelst simpel.
Einfach Entity Framework
plus SQLite einbinden und
zwei Sachen eintragen.
So, dann brauchen wir
den User, der das ganze
von sich gegeben hat. Dann
brauchen wir, oh man kann
vorwärts und rückwärts springen, das ist cool.
Dann brauchen wir
den, äh
ne, dann brauchen wir den, den, den, den
Text. Und
dann brauchen wir am Schluss noch,
merken wir uns nämlich noch, die Zeit
wann der User
das gepostet hat.
Das sieht doch schon mal ganz sinnvoll aus.
So.
Und nun lassen wir
den lesen.
Und geben mal hier
aus, wenn eine neue Textnachricht kommt.
Oh, hat der gerade
abgekackt?
Na ja, Test.
Macht der nicht.
Warum nicht?
Bild.
Ich glaube, der hat gar keine Probleme.
Kann ich jetzt erwarten, dass die Chat
Message hier jetzt kommt?
Kann aber nicht.
Kann es sein, dass wir das nicht richtig starten?
Wartet mal.
Loop.
Start.
Und habe ich sie registriert?
Hm.
Dann setzen wir mal
einen Breakpoint da rein.
Machen wir einen Breakpoint
irgendwie hier oben hin.
Breakpoint da unten rein.
Dann gucken wir mal.
Was passiert?
Das juckt hier überhaupt nicht. Der geht da überhaupt nicht rein.
Ich habe irgendwo was vergessen zu starten.
Omegalo.
Start.
Wir machen das genauso,
wie der Zargor sagt.
Eure Lieblings-Debug-Ausgabe.
Gucken wir mal, ob er den gerade überhaupt
startet.
Ja, geht doch. Macht er doch.
Okay, starten tut er den Krempel schon mal.
Ich glaube, das funktioniert
hier nicht. Hä?
Moment.
Ich bin verwirrt. Was hat er denn für Schmerzen?
Warum startet der mal Task nicht?
Hä?
Ich bin
hochgradig verwirrt.
Ja, das
blockt. Das wird auch an der Stelle hängen.
Wahrscheinlich. Ja, da hast du recht.
Aber warum blockt das?
ISC Twitch TV.
ISC Twitch TV.
6667
Port.
Ach, oh Mann.
Leute.
Richtig, richtig
dumm, ey. Guck mal.
Lull.
So, erstmal die Message ausgeben.
So.
Test.
Geht nicht.
Doch. Bam. Da ist es.
Nice. Funktioniert.
Funktioniert.
Hallo Jorik Moron.
Da ist er wieder am Start, ja.
Simpel Fehler.
Ja, so einfach. Die meisten Sachen sind
einfach.
Okay, das funktioniert.
Jetzt
ähm
machen wir eine Chat
Message da draus.
Und zwar kriegt die Chat Message
jetzt einen Text.
Nämlich das da.
Kriegt ein User.
Nämlich das da.
Und kriegt eine Time.
Nämlich jetzt.
So. Äh, und jetzt müssen wir
den gerade natürlich irgendwo her,
irgendwohin speichern. Das heißt,
wir brauchen wahrscheinlich, entweder
nehmen wir eine In-Memory-Database.
Das ist wahrscheinlich, ähm
das
einfachste. Exceptions
könnten jetzt kommen. Das ist jetzt aber echt advanced.
Wir programmieren so gut,
dass wir keine Exceptions haben.
Okay, äh
könntest du bestimmt die neuen Async
Enumerable für Yield dafür benutzen?
Äh, ja. Ich erinnere
mich, dass ich da irgendwas
im
im Stream gesehen hab, dass man
dass der jetzt Async, Async
äh, wait for each oder irgendwie sowas
kann man jetzt machen, ne?
Wait for each.
Ich hab 8.
Das muss man aber selbst,
das muss man aber irgendwie selbst
basteln, ne? Oder?
Das hab ich noch nie verwendet.
Keine Ahnung, wie das funktioniert.
Ich hab keine Ahnung. Also, wenn da einer
einen guten Vorschlag hat, ich will mir jetzt nicht
3 Seiten Tutorials durchlesen.
Ähm,
ähm, das kann man als Ersatz für,
für das hier verwenden irgendwie.
Ich hab, das hab ich im Stream gesehen.
Der hat irgendwie gesagt, äh, quasi, äh,
wait for each und das war im Prinzip
genau das. Der hatte, das war dann
unter der Haube irgendwie eine Endlosschleife,
halt so lange, wie der Stream offen ist.
Ich weiß jetzt aber nicht, wie es genau funktioniert
und ich will jetzt nicht ewig Tutorials lesen.
Ähm,
wahrscheinlich so eine Sache, wo man sich dran gewöhnen muss.
So.
Chat-Message.
Ähm, wir machen mal
eine SQLite-Datenbank,
dann haben wir theoretisch auch die Möglichkeit,
Fragen zwischen den
Streams zu behalten.
Machen wir das mal so. Äh,
dazu muss ich allerdings
erstmal in diesem riesengroßen Fenster
hier unten drinnen
nicht das da installieren. Das ist
Gbait.
Das ist HyperGbait.
Entity Framework. Was wir wollen ist
Microsoft
Enti...
Ne, äh, Microsoft
Entity
Framework Core wollen wir haben.
MySQL.
Ne, SQLite. Nicht My...
Hab ich MySQL gesagt?
MySQL.
Nein, nicht MySQL.
SQLite.
Big Brain. Ähm.
Was da wollen wir haben?
Ähm. So.
Yes. Seht ihr das jetzt?
Ja.
Irgendwie ist Handling so schön.
Was hast du vor zu programmieren?
Ähm, wir haben letztes Mal im Stream
schon, ähm,
ein Tool gebastelt, was
sich einloggt im Twitch Chat
von meinem Channel und alle Sachen
mitloggt, die AdWoblos am Anfang
haben. Und
dass ich keine Fragen mehr übersehe,
beziehungsweise eine History habe, was, wie,
wo, wann gefragt wurde.
Und jetzt basteln wir ein ordentliches,
äh, ein ordentliches, ein
minimales Webfrontend dazu,
wo ich dann auch Sachen abhaken kann. So nach dem
Motto hier, der, äh,
FlyingMeat hat gefragt, äh, was hast du vor
zu programmieren? Dann hab ich das beantwortet, dann
klick ich's an und dann verschwindet's.
So. Und man sieht ja, du siehst ja auch hier unten
schon, die Chat-Nachrichten
mitlesen, funktioniert halbwegs.
So, und jetzt müssen wir ihm
sagen,
ah, ich kann ja schnell,
AddDB-Kontext?
Genau,
AddDB-Kontext.
Und jetzt muss ich erst mal überlegen, wie
wir das machen. Da machen wir einen eigenen Ordner
für, nämlich einen Ordner,
äh, Data
oder so. Und da machen
wir eine Klasse, nämlich
ein AddDB-Kontext.
Der kriegt nicht allzu
viel, er kriegt
einfach nur eine Collection,
DBSet, der kriegt einfach nur eine Collection
von unseren Chat-Messages.
DBSet,
Chat-Messages,
ähm,
Messages.
Fertig.
So, und jetzt, äh,
kann ich mir das nicht mehr, Moment,
fuck, man muss jetzt noch irgendwas machen
mit einem DB-Kontext, dass er den
laden kann. Gucken wir mal, was der
für einen Fehler, was der denn für einen Fehler wirft.
Wenn ich's versuche zu starten.
Irgendwas musste man auch machen.
Ähm,
und man musste ihm doch noch sagen, dass es,
dass es SQLite, dass, ich, ich spick
das mal ab. Ich spick das mal
ab von,
von dem hier.
Von meinem
Bilder-Einplant-Board.
Wir gucken uns das jetzt mal ab.
Ähm,
wo ist denn hier Startup?
Bla, bla, bla, bla, bla, bla.
Add, bla, bla.
DB-Kontext, Options.
Ja, das da wollen wir haben.
Copy, Paste, Beste.
Ha.
IzaF.
So, das heißt das alles nicht beamen.
Messages.db.
Fertig.
Ja, müssen wir nicht machen.
So, jetzt haben wir eine SQLite-Datenbank.
Jetzt müssen wir dem natürlich noch sagen, dass er die,
wir machen's jetzt erstmal
uns total einfach.
Wir sagen, wir löschen die Datenbank jedes Mal
nach einem Neustart, was natürlich nicht
Sinn und Zweck der Sache ist, weil wenn wir das machen,
könnten wir einfach ne List im, äh, oder einfach
im Arbeitsspeicher den Kram halten.
Was erreichst du mit dem DB-Kontext?
Das muss man verwenden,
äh, das ist quasi die Klasse, die
das, ähm, die
ASP.NET Core haben möchte für alle möglichen
Injection-Geschichten,
wenn du die in den Controller verwenden willst,
oder wenn du Sachen persistent speichern willst.
Das muss alles in dem DB-Kontext drin sein,
sonst mag er das halt einfach nicht.
Sonst muss man's von Hand machen.
Was irgendwie sinnlos ist, wenn man das eh schon verwendet.
So.
Wir machen das jetzt richtig
Noob-Style, wir sagen database deleted
und dann
sagen wir create.
Das ist natürlich nicht Sinn und Zweck der Sache, weil
dann könnten wir uns auch zu speichern in der Datenbank sparen.
Ne, das ist komplett sinnlos, wenn ich die jedes Mal
lösche und wieder neu anlege, dann kann ich einfach ne,
ne, ne Liste im Speicher halten,
und gut ist.
Aber vielleicht wollen wir halt jetzt ein oder
andere Persistent speichern.
Ich hab schon so oft
gesagt, ne, ich hab schon so oft
in Streams gesagt, Leute, das gucken wir uns
nächsten Stream an, und es ist nie dazu gekommen.
Das wird jetzt gar nicht mehr passieren.
Weil das geht nur weg, wenn ich's
abhake.
Da vergessen wir nix mehr.
Wieso machst du das nicht für Text-Dateien?
Das ist mir,
das ist mir zu, zu einfach.
Zu Noob-Style, Text-Dateien.
Da ist alles mit Dependency
Injection, ja. Wisst ihr, ich hab's hier oben,
registriert, jetzt kann ich hier unten,
hier unten injecten.
Ähm, okay.
Und jetzt müssten wir in unsere Datenbank
die Chat-Message reinschreiben.
Das ist leider nicht ganz so einfach.
Ähm,
ich mach mal hier weg, dass man ein bisschen mehr vom Editor sieht.
Das ist leider nicht ganz so einfach,
weil, ähm,
das hier ist quasi
ein eigener Thread, der im Hintergrund läuft,
und der hat gar keinen Zugriff auf meinen
Datenbank-Kontext.
Und ich kann auch nicht einfach so
sagen,
ab DB-Kontext,
ich kann das auch nicht so einfach injecten,
weil die Lebensdauer
unterschiedlich ist. Ist im Prinzip
recht logisch, man kann,
klär ich das jetzt am besten?
Also was man, was man
hier hinzufügt, was der kennt für Klassen,
ja, der kennt jetzt, also ich kann
jetzt hier sagen, okay, es gibt jetzt hier einen Twitch-Chat-Service,
es gibt einen ab DB-Kontext,
und die haben unterschiedliche Lebenszeiten.
Der Twitch-Chat-Service,
das ist ein Hintergrund-Service, der lebt so lange, wie die ganze
Anwendung lebt. Der DB-Kontext
lebt nur so lange, wie ein Request
lebt. Ich kann auch den ab DB-Kontext
in Singleton, das geht genau, ja,
das funktioniert auch. Allerdings ist es wichtig,
sich anzusehen, dass die Lebenszeiten unterschiedlich sind,
ähm, und ich kann
logischerweise keinen
Service, oder keine, keine Klasse,
die
eine Lebenszeit hat pro Request,
injecten in eine Klasse,
die Lifetime, also
Application-Lifetime Lebenszeit hat, weil das passt irgendwie
nicht, weil das eine ist viel größer als das andere.
Umgedreht geht's natürlich.
Ich hoffe, man hat das jetzt halbwegs verstanden,
was ich da versucht habe von mir zu geben.
Deswegen muss ich hier drinnen jetzt
sagen, ich will einen neuen
Lifetime-Scope anlegen, und da drinnen
kann ich dann den ab DB-Kontext
verwenden. Microsoft hat sich gedacht,
so muss das sein, und das hat man
irgendwie gemacht, ich kann mir das immer nicht merken,
irgendwas mit Scope hieß das.
Scope Logger, nee, es war ein
Interface, irgendwas mit Scope
heißt der Kram.
Service Scope?
Service Scope?
Scope?
Service Scope Factory war's.
Das liest sich fast schon Java-mäßig, oder?
iService Scope.
Wobei, eigentlich
müsste das heißen, iScoped
HDX oder sowas.
460.
720.
420.
Scope
Factory.
Ähm.
Weiß jemand, wie ich den,
weiß das jemand auswendig, wie ich bei dem
JetBrains Zeug den Style
umstellen kann? Ich will nämlich nicht
den Unterstrich-Kram verwenden.
Style. Oh,
Coding-Style.
Coding-Style.
Intents-Style.
Tabster.
Ah ja, das schauen wir gleich wieder.
Ähm.
Wie kann ich hier einstellen?
Nested Statements. Ich will eigentlich nur
einstellen, was der für
Properties verwendet, beim
Automatischen.
Boah.
Boah, das ist mir zu kompliziert, da schreib ich lieber von Hand.
Ähm.
Instant Member.
Use this quali-
Ich will dem
sagen, dass ich nicht diese
Underscore-Geschichte verwenden will,
sondern this.
Bis ich das
gecheckt hab, wo ich's finde, hab ich wahrscheinlich das Ding fertig
gebastelt.
Ähm.
So, wie formatiert man jetzt neu?
Eigentlich hab ich ihm doch gesagt,
Einrückungen will ich.
Wie formatiert man neu?
Ah!
Ah, sehr schön.
War viel besser.
Ist voll die, ist voll die Verschwendung
irgendwie, ähm.
Vier, äh.
Vier Leerzeichen-Einrückungen.
So, ähm.
Wo ist hier mein
Konstruktor?
Da.
MyServiceScope.
Da, Mann.
QuickScoped.
So, und jetzt kann ich ihm hier
drinnen sagen,
also, ich gewöhn mich hier immer mehr an
diese neue
Schreibweise ohne die
Klammern drumherum. Das find ich nice.
So.
Scope.
Jetzt kann man sagen, das ist
ein bisschen doppelt gemoppelt alles, aber man muss
das halt so machen, weil Microsoft sagt,
das geht so.
So, und jetzt kann ich nämlich aus meinem Hintergrund-Service
in die Datenbank
schreiben.
Was eigentlich ganz nice ist.
Wir machen da mal ne eigene,
ne eigene Methode für, irgendwie,
private world, save,
save to DB oder sowas.
Chat-Message.
Und da
drinnen machen wir jetzt den Kram.
Scope.
Oh, guck, ey, meine Tastatur, das ist so
fail. Das ist so fail.
Die hat immer doppelte Anschläge.
Warum ist da ein using, was bewirkt das?
Das using, also das using ist die
Kurzschreibweise davon.
Und was das using bewirkt,
ich kann uns auch wieder,
ich kann auch wieder 4 Spaces machen.
Äh, und was das using bewirkt,
ist folgendes.
Ich formatier mal
neu.
Kann man jetzt überschreiten, was schöner ist.
Ähm.
Wo war ich denn jetzt?
Using. Ja, was macht der da?
Äh, das using sorgt dafür, dass
am Ende von diesen Klammern
der Scope disposed wird. Ja, genau.
Automatisches Dispose, so sieht's aus.
Und das hier ist die Kurzschreibweise
mit C-Schreib 8.
Ist eigentlich ganz gut.
Das ist auch noch nicht raus.
Das kommt erst im September oder so.
Es ist die Preview-Version, die wir hier gerade haben.
Äh, Scope.
Was? Get.
Ne, haben wir doch schon gemacht.
So, und jetzt will ich einfach so ein Context.
Add. Die, die, die, die Message
hier oben.
Soll in die Datenbank geschrieben werden.
So.
Danach save.
Bam. Ah, dieses Klammer-Feature.
Save.
Jetzt kann ich das hier nämlich drinnen.
Äh. Moment.
Irgendwie hat er
gerade die Formatierung zerrissen.
Ah, so.
Ich muss erst mal gucken, wo ich hin muss.
Da.
Genau. Jetzt kann ich die Chat-Message
in die Datenbank schreiben lassen und danach
gucken wir mal, ob es auf der Webseite theoretisch
angezeigt wird. Das ist oftmals
so, wenn man, wenn man was
anfängt. Man muss erst mal gucken, dass die Backend-
Geschichten halbwegs funktionieren, bevor man auf der
Seite was machen kann. Die Seite sieht jetzt
rechts, äh, kacke aus, ne?
Save.
DB. M.
So.
Jetzt speichert er die Chat-Nachricht
in der Datenbank.
Machen wir mal so ein bisschen
so eine Mini-Debug-Ausgabe
dazwischen.
So.
Ähm. Ich schreib einfach nur
saved. Ich muss die Nachricht gar nicht sehen.
Hauptsache, dass ich weiß, wird gespeichert.
So.
Jetzt speichert er den Kram in
Ist das jetzt
abgekackt?
Wow.
Was hat er für Schmerzen?
What the fuck?
Eieieiei.
Okay, was haben wir für Probleme?
Ach ja, stimmt.
Das müssen, das wollten wir uns, das mussten wir uns auch noch
abgucken, weil
einfach so DB-Kontext anlegen ging ja nicht.
Microsoft hat sich gedacht, das wär zu einfach.
Man muss da irgendwie noch diesen, diesen Blödsinn
hier reinschreiben. Dann
funktioniert's. Fragt mich nicht, warum.
Aber das muss so sein.
Äh.
Achso. Vielleicht soll ich das auch in die Klasse
gruppieren.
Dann geht's nämlich.
Weil Microsoft sagt, das muss so sein.
Wenn man
einen agilen Developer
einen agilen Developer im Stream
mit User-Stories und Sprints
Ja, man kann's auch echt übertreiben.
Da brauchen wir erst mal
ein Kanban-Board brauchen wir noch. Oder?
Ein Kanban-Board und ein Jira.
Jetzt sag ich auch schon Jira.
Jira heißt's.
Jira und ein Kanban-Board.
Dann sind wir so richtig agil.
Dann sind wir richtig hier
Agile.
Ich bepeger
Agile sind wir dann.
Oh ja. Speichern da die
Chat-Nachrichten zwischendurch.
Gut. Funst.
Chat-Nachrichten werden in der Datenbank
gespeichert.
Äh. Jetzt können wir die Webseite
machen.
Chat-Nachrichten kommen in die Datenbank.
Wir antworten auch mit nem Ping, dass es nicht abkackt.
Immer noch besser als
Jira.
Jira.
Jira ist das Schlimmste.
Die Typen, das sind die
gehen wir auch auf den Sack.
Jira.
Es gibt auch Leute, die git-shit aussprechen.
Shit.
Hab ich auch schon gehört.
Shit.
So wie Shit, genau.
Shit.
So fail.
Oder view
als Fü.
Fü hab ich noch nicht gehört.
Es gibt
ja auch die Unterschiede, ob das China
oder China ist. Gibt's ja auch noch.
Okay.
Also. In unserem
Questions-Controller
müssen wir uns jetzt
unseren DB-Context
injectoren.
Was macht der da?
Unseren DB-Context injectoren.
Und als Antwort
äh.
Moment Leute, ich mach das mal anders.
Ich mach mal aus meinem Startup raus,
dass der die Datenbank löscht,
weil dann sind die das nächste Mal einfach
die Chat-Nachrichten von euch das nächste Mal einfach da.
Ähm.
Und jetzt returnen
wir hier einfach mal alle
alle
Messages. Bam.
Allerdings nicht zwingen, sondern
Chat-Messages. Das ist ein
super
simpler Typ. Den kann der einfach
in JSON serialisieren, ohne dass ich da
irgendwie großartig Magic machen muss bei.
So. Gut.
Und jetzt gehen wir an unser HTML
Gedöns.
Müssen wir uns eine Runde
Vue.js
Vue.js einbinden. Weil Vue
beste. Kann sogar HTML
und CSS Noobs wie ich was damit machen.
Ähm.
Question Board.
Pega
Board. So.
Äh. Haben wir Vue eingebunden.
Dann machen wir jetzt ein Diff.
ID.
ID App.
Gucken wir mal ob ich das aus dem Kopf zusammen krieg.
Ähm. Äh. Äh. Äh.
Äh. New Vue.
Ne. Ich kriegs nicht zusammen.
Ich muss nachgucken.
Ich muss nachgucken.
Ich kann mir das immer nicht merken. Wobei.
Wir sind bescheuert. Warum guck ich nach?
Hier machen wir es doch schon.
Das ist hier das Image Overlay Ding.
New Vue. EL App Data.
Genau. Das brauchen wir.
Zack.
Äh.
So. Auch noch schließen.
So.
Data. Ähm.
Questions.
Leeres
Array.
Ähm.
Wir machen mal irgendwas. Test rein.
So. Jetzt müssen wir nämlich eine Schleife
in Vue machen. Das heißt wir brauchen hier eine
unordert List. Da drinnen machen wir
List Elements. Dann sagen wir V
vor. Kann ich mir auch nicht merken.
Das da.
Ja. Sagen wir dann.
Ich mein wozu auch merken.
Wenn man es nicht einfach Copy und Pasten kann.
Vor.
Question in Questions.
So. Und jetzt sollte da
blub blub blub stehen auf der Seite.
Ja. Gut.
Ähm. Und nun müssen wir
abrufen.
Die Chat Messages.
Die von euch in den
Chat
geschrieben wurden.
Und das machen wir folgendermaßen.
Wir sagen ihm.
Wenn diese.
Wenn die Seite quasi gestartet wird.
Zum ersten Mal.
Dann.
Waited.
Was hat er denn für
Schmerzen.
Definition. Ach da muss man die Javascript Version erst
umstellen. Äh.
Javascript Version.
Wo kann man das umstellen.
Version.
Javascript. Ah da kann man so.
Sehr sehr nice.
Sehr sehr nice.
Gut. Ähm.
Jetzt haben wir das erstellt.
Jetzt müssen wir ihm sagen.
Wir wollen abrufen.
Und zwar von.
LPI.
Questions.
Da machen wir.
Da machen wir eine eigene.
Eine eigene Methode draus.
Die das macht.
Die nennen wir ähm.
Fetch.
Fetch questions.
Und ähm.
Was hat er denn hier wieder für Schmerzen eigentlich.
Was vergessen.
Glaube nicht. Ja.
Die machen wir Async.
Weil.
Doch ich habe irgendwas vergessen.
Ach so. Ha. Das darf ich nicht machen.
Doppelpunkt muss das sein.
Äh. Async. Fetch questions.
Weil jetzt können wir sagen. Wait.
Fetch. Wir wollen.
Das da machen.
Wir wollen die äh.
Also hier das wo der Controller jetzt dran hört.
Api. Slash.
Questions. Und dann.
Index. Aufrufen. Index ist einfach alle Nachrichten.
Jetzt als JSON zurückgeben.
Ähm. Wir fetchen alle.
Questions. Wait.
Result.
Ähm.
Und dann sagen wir hier.
Questions.
Is await.
Result. JSON.
Ich hoffe das funktioniert jetzt.
So. Gucken wir mal.
Gucken wir uns mal hier an.
Ob er das macht.
Ne. Geh fort.
Achso. Ne. Das macht er nicht.
Ich muss ihm erstmal sagen das er das ausführen soll.
Äh. This. Fetch. Questions.
Da muss ich wahrscheinlich nochmal das Backend neu starten.
Result.
Is not defined.
Da hätte er selbst drauf kommen.
Hey. Guck mal Leute.
Das sind eure Chat Nachrichten.
Das sind eure Chat Nachrichten.
Sehr sehr nice.
Eine nice Chat Nachricht.
Jetzt können wir noch einstellen.
Und ab wann ist es eine
Question und ab wann nicht.
Es ist eine Question wenn es anfängt mit
Adwoblors. Aktuell ist es aber
zum testen noch jede Chat Message.
Aktuell ist es noch
jede Chat Message stellen wir dann nachher um.
Das die Sache mit Adwoblors anfangen muss.
Aber zum testen ist es viel einfacher
wenn wir das einfach mit jeder Chat Nachricht machen.
So. Jetzt müssen
wir ihm noch sagen.
Dass der das doch mal bitteschön.
Falls der eine eine schönere Variante
kennt das mit Vue zu machen.
Sagt Bescheid. Mir fällt da jetzt nichts anderes ein.
Der soll das hier ausführen.
Alle Sekunde.
Das ist so die Easy Mode.
Wir könnten das mit Callbacks
machen vom Server. Wir könnten irgendwie
Signal R oder sowas verwenden.
Um zu sagen wenn was oder Websockets
oder sowas wenn was neues da ist.
Aber hey. Für Chat Nachrichten reicht es
einfach wenn man einmal in der Sekunde nachguckt
ob was da ist.
Doch das reicht.
So und wenn ihr jetzt
was schreibt sollte sich das eigentlich
updaten hier drinne wenn ich es richtig gemacht habe.
Ja ne passt.
Dachte du bist
beruflich eher in der Serveradministration
unterwegs. Ja prinzipiell schon.
Zumindest das was ich gelernt habe.
Allerdings mache ich schon
seit Jahren eigentlich kaum noch Serveradministration.
144
Hertz Chat.
Also muss ich es alle 16
Sekunden updaten. Ne 144 Hertz war
schneller oder?
Ja alle 6 Millisekunden. 7 Millisekunden.
Updaten.
Sekunde ist zu langsam.
Also Developer. Nein ich bin so
ich bin so die. Eigentlich ist
das was ich mache so DevOps
in so der
Alter Sibaro was geht ab.
Ist eigentlich genau das was man so
unter DevOps versteht. Ich mach den
bin quasi so an der Schnittstelle
zwischen
ähm
dort wo Source Code verwaltet wird
und da wo Serveradministriert wird.
Inklusive bisschen
Release Management. Also genau so was was
man sich eigentlich mit DevOps vorstellt.
Ihr könnt Ausrufezeichen Beruf machen
im Chat. Da hat der Sibaro ein
äh Kommando eingerichtet wo ich mal irgendwie
versucht habe zu erklären was ich mache.
20
Sekunden oder so geht das.
Das stimmt nicht das man 25 FPS
sehen kann. Du kannst nur 12 FPS sehen.
Easy as fuck.
Ähm
Okay also die Chatnachricht. Ich meine es sieht
hässlich aus ja wie die Nacht.
Aber das können wir jetzt ja noch
schöner machen.
Als erstes würde ich sagen
sorgen wir mal dafür das wir immer
nach unten scrollen.
Weil das ist doof wenn man von Hand scrollen
muss.
Ähm
Wie macht man das?
Ich prüfe einmal pro Sekunde hier.
Ähm
Hm. Kann man das mit dem? Wie macht man das?
Wie macht man das mit dem scrollen jetzt gescheit?
Gibt es hier sowas?
Windows scroll
Scroll
Scroll 2
Scroll Y
Scroll 2
Scroll 2
Scroll 2
Okay
Ähm X von 0
zu
Das ist wahrscheinlich die loop style
Variante aber ich hoffe mal es funktioniert.
Bam funktioniert.
Ha
Jetzt schreckt.
Funktioniert.
Javascript Logik.
Ob das ordentlich funktioniert können wir
mal ausprobieren.
Indem wir uns mal zu einem Twitch Chat
connecten der ein bisschen mehr
Action im Chat hat als
bei mir. So irgendwie
Warte mal. Ist der noch on?
Okay der ist noch on.
Dann nehmen wir jetzt mal den Chat von
xQc nehmen wir jetzt mal.
Dann wird hier nämlich voll gespammt ohne Ende.
Bin ich ja mal gespannt was
jetzt abgeht ey. Das wird voll gespammt.
Alter
Hahaha
Okay mein scrollen
kommt nicht mehr hinterher.
Das scrollt zu langsam.
Ähm
Ach ich weiß warum das nicht funktioniert
richtig mit dem scrollen.
Das ist ähm weil
wir sagen hier
quasi an der Stelle
an der Stelle
sagen wir scrollen.
Ich mach mal wieder in meinen Chat.
Ich wechsel den Chat
mal wieder.
Da ist ein bisschen viel los.
Komm wir gucken mal
wie groß das
werden würde hier.
Können wir auch. Das ist ja nix.
Ist ja easy.
Ist einfach nur Text. Ähm
Gehen wir weg Chat.
Der ist ein Gespammer alter.
Hahaha
Okay
Ich mach mal wieder in meinen Chat.
Lad ist
List all reverse time
human readable.
Dazu kann ich nur sagen
Ich find das Bild gerade nicht.
Big brain.
Okay ähm warum mein scrollen
nicht richtig funktioniert
liegt glaube ich da dran. Wir sagen
nämlich hier direkt nachdem er
die neuen Ergebnisse abgerufen hat
scroll ganz runter. Die Sache ist die
das Rendern der neuen
Sachen ist noch gar nicht fertig.
Das heißt er scrollt runter und
rendert dann erst die neuen Elemente.
Das heißt wir müssen ihm sagen nachdem
er gerendert hat
soll man das machen. Und da gab's
bei Vue irgendwie was in der Richtung von
next tick oder so hieß das.
Das führt er dann immer einmalig
aus. Nachdem
er das nächste mal
gerendert hat.
Also können wir ihm einfach sagen
zack next tick
dann soll er scrollen. Wow.
Und dann soll er scrollen.
Ich glaub
das ist besser.
Jetzt äh funktioniert das.
Also jetzt sollte das funktionieren.
Was ist denn hier übrigens die schönere Variante
das hat doch irgendwie einer vorhin was geschrieben.
Irgendwie was document body
oder so. Hier kommen jetzt schon
die SQL Injection Tests
ey.
Ich seh's schon ey.
Omegalo. Document Body
Offset. Okay.
Ah scheint zu funktionieren.
Ja scrollt er scrollt er.
Okay der scrollt jetzt immer runter jede Sekunde.
Das ist natürlich auch doof.
Der soll nur runterscrollen wenn sich
was geändert hat.
Und wie krieg ich mit ob sich was geändert hat?
Hier die ganzen
die ganzen. Eieiei Leute.
Questions mit Result vergleichen.
Ich hab ehrlich gesagt keine Ahnung wie man ordentlich
ähm Arrays mit
JSON Objekten drin in JavaScript vergleicht.
Ja die ID
stimmt. Klar die ID könnte man vergleichen.
Wir könnten.
Das ist ganz easy wie wir das machen.
Das ist. Das ist. Das ist.
Und zwar wir nehmen einfach
ähm
Übrigens das da können wir
Kunst machen. Das mögen die JavaScript
Leute.
Genau. Genau das.
Genau das hatte ich vor. Äh choosen by name.
Bloß ein bisschen anders. Ich wollte das letzte
Element nehmen. Weil es könnte ja auch sein
dass ich unglücklich was lösche.
Kommt was neues dabei. Ich wollte das letzte Element
nehmen und gucken ob die ID gleich ist.
Ähm
Also sowas hier irgendwie. Oh keine Ahnung.
Last ist
irgendwie. Last ist irgendwie
Quest. Questions.
Questions. Ähm
Achso. Was ist denn Last?
Last Element in JavaScript. Können die
sowas? Kann JavaScript
sowas?
Last.
Last ist natürlich gut wenn es das gibt.
Last.
Gucken wir mal ob das funktioniert.
Ähm
Console read äh ähm nicht
Console ähm Console
Log Last.
Mal schauen ob das funktioniert.
Uäh.
Okay äh ist gut dann.
Was passiert bei Minus 1?
Undefined.
Aber längst Minus 1 ist irgendwie sehr hässlich.
Ach das. Moment das ist doch
ein Array oder?
Kein Array? Kein Array?
Das ist doch ein Array. Natürlich ist das ein Array.
Warum geht das mit
Last nicht?
Warum geht das mit Last nicht? Ich hätte das eigentlich gedacht.
Wow.
Der Browser ist abgekackt.
War zu viel.
Grip.
Das war zu viel.
Ja. Questions. Slice. Okay.
Aber warum geht das denn nicht?
Das müsste doch eigentlich funktionieren.
Achso.
Ich musste den Browser vielleicht mal selbst starten.
Äh.
5000 ne.
Achso Last gibt es gar nicht.
Achso.
Und dann finde ich das mit dem Slice
eigentlich am hübschesten noch.
Äh.
Irgendwas. Questions.
Slice.
Minus 1.
Okay.
Oder auch nicht.
Ja doch funktioniert.
Da ist halt ein Object drinne.
Gut ähm das ist Last.
Hier Punkt ID.
Und jetzt sollten wir eigentlich
die ID vom letzten.
Warum nicht?
Ach das ist jetzt ein Array.
Dääh.
Ach ist das Slice. Achso.
Ist ja logisch.
Der teilt das im Zweifelsfall an einem gewissen Index das Array.
Kein Wunder dass das nicht funktioniert.
Ne dann ist das andere doch schöner.
Naja.
Zumindest 8001 das letzte.
Das heißt wenn sich das geändert hat.
Dann machen wir das doch so.
Ich finde es zwar blöd
das es da nichts gibt.
Aber doch.
Questions.
Length. Minus 1.
Meinetwegen.
Okay.
Achso jetzt müssen wir das weg machen.
Und jetzt kann ich sagen ID.
Ja.
Okay. Wenn.
Muss ich das ganze nochmal machen.
Last Old.
Äh.
Last.
New.
So und das heißt wenn.
Nur wenn es eine
neue Nachricht gibt.
Dann wird gescrollt.
If.
Und wir können auch einfach sagen äh.
Nur wenn
New größer ist als Old.
Machen wir
das hier.
Ansonsten machen wir das nicht.
Das heißt jetzt kann ich scrollen. Das passiert nichts.
Und erst wenn einer eine Nachricht
schreibt geht es nach unten.
Warte ich mal drauf bis einer eine Nachricht schreibt.
Und gucken ob es dann runter scrollt.
Ne macht es nicht.
Warum nicht.
Warum macht es das nicht.
Achso.
Ja klar.
Stimmt.
Kann ja nicht funktionieren.
Jetzt wird es funktionieren.
Nochmal einer was schreiben. Blitz.
Ja jetzt funktioniert es.
Pizza F.
Easy.
Proger. Easy.
Okay.
So jetzt müssen wir das ganze noch ein bisschen hübscher machen.
Und zwar.
Wir wollen hier als erstes.
Die ID interessiert mich nicht.
Was mich interessiert ist der User.
Der User.
So und wir brauchen noch ein bisschen CSS.
Und zwar brauchen wir hier Style.
Style von den List Elements.
Von Li.
Der Style soll nach Möglichkeit.
Lists.
Lists Style.
Das kann ich mir mal nicht merken.
Ja genau.
Lists Style None.
Wie kriege ich denn hier neben den Kram weg.
Das Projekt veröffentliche.
Ja das ist so simpel und übersichtlich.
Das veröffentliche ich auf jeden Fall.
Da muss ich irgendwie sagen.
ulmargin 0 oder so.
Ne.
Padding 0.
Aha.
Der Max langsam wird er hier richtig der CSS Pro.
Nicht der CS Go.
Sondern CSS Pro.
Roman Bro.
Oh hier sieht man alle.
Die Chat Nachrichten geschrieben haben.
So User wollen wir haben.
Dann wollen wir haben.
Da war nämlich ein Doppelpunkt.
Dahinter User.
Da wollen wir den eigentlichen Text haben.
Ja sehr schön.
So und jetzt wollen wir.
Noch ein bisschen mehr Abstand dazwischen haben.
Hier Padding.
Oder Margin.
Margin ist komplett aus.
Und Padding ist in.
Ich werde mir den Unterschied nie merken können.
Padding Bottom.
10 Pixel.
Ah.
So und jetzt müssen wir das natürlich ein bisschen schöner machen.
Von der Schriftart.
Das sieht ja nämlich super hässlich aus.
Das gefällt mir überhaupt nicht.
Ähm.
Das da will ich machen.
Das da will ich machen.
Genau.
Das da will ich machen.
Allerdings nicht rot.
Sondern irgendwie grau oder sowas.
Dann ist jetzt.
Ach ne.
Ähm. Nicht 2.
Man muss sagen irgendwie odd.
Aha.
Da kann man es nämlich viel besser erkennen.
Grey.
Dark Grey.
Light Grey.
Das ist doch schon mal ganz hübsch.
So und da sehen wir auch das wir kein Padding wollen.
Sondern wahrscheinlich Margin.
Margin wollen wir haben.
So ähm.
Dann machen wir jetzt.
Das ganze noch ein bisschen größer.
Font.
Size.
20.
Ah.
Und.
Font Family.
Oh my god.
Ach ja.
Was nimmt man da so?
Schriftgröße.
Bissi groß ist das ganze.
Roboto.
Ja Roboto haben wir bei dem anderen.
Haben wir ja hier auch.
Wir nehmen wieder Roboto.
Genau Roboto hatten wir hier auch.
Ja.
Dann nehmen wir auch gleich die Material Icons.
Die werden wir nämlich auch noch brauchen.
Roboto.
Klingt irgendwie übelst Japanisch.
So.
Alter.
Es ist ja mal gut Leute.
Wie ihr versucht wie verrückt irgendwas zu injecten.
Ey.
Ich weiß schon warum ich es immer in HVM laufen lassen werde.
Better Twitch TV Emotes anzeigen.
Oh das wird schwierig.
Okay ähm.
Wo sind wir stehen geblieben?
Roboto wollten wir haben.
Robo.
Roboto.
Ja.
Oh das sieht doch viel schicker aus jetzt oder?
Das ist doch schön.
China.
China Farmer.
Emojis kann er schon mal.
Aber kann er ja auch nur weil es der Browser kann.
Äh.
Konnte man nicht so sagen.
Konnte man nicht irgendwie so Default sagen.
Wie sagt man eben Default.
Wenn er das nicht findet.
Ging das nicht so?
Nö.
Ah mit Komma trennen.
Ah ja gut.
Okay ähm.
Pipiga.
China.
So ähm.
Das funktioniert.
Ja. So. Ach ja.
Genau was wir jetzt noch machen müssen.
Das das das das äh.
Das wichtigste ist ja.
Eigentlich das ich die Dinger löschen kann.
Muss die Dinger ja löschen können.
Das heißt.
Alter jetzt laggt es.
Es geht ab.
Ich glaub der Browser ist am Ende hier.
Mit äh.
Mit RAM kann das sein.
Eieiei.
Das spackt aber ganz schön rum.
OKS.
Bitte schön so viel RAM.
Läuft doch nix.
Ja gut wir haben da jetzt auch irgendwie.
50.000 Chat Nachrichten drin oder so.
Weil wir mal kurz bei X2C drin waren.
Im Chat.
Pipiga Board.
Da ist das Pipiga Board.
So OK.
Jetzt ist das wichtig wir müssen das machen das man löschen kann.
Guck mal.
Kann das sein das das Runterscrollen nicht richtig funktioniert?
Doch wird.
Dark Mode ah ne das ist OK so.
Ähm.
Ich weiß auch woran markiert.
Woran markiert war.
Das finde ich sehr schick.
Weil da kann ich mir das merken so nach dem Motto.
Äh wir wollten hier irgendwas beantworten.
Und dann kann ich es gespeichert.
Markiert lassen.
Gut ähm.
So und jetzt kommt das interessante.
Jetzt muss ich das löschen.
Also sprich wenn ich jetzt da drauf klicke will ich das das weg geht.
Wie machen wir das jetzt am besten.
Wir machen hier einmal.
Ne neue.
Methode.
Delete Question.
Delete Question.
Die wird.
Ups.
Die wird ziemlich simpel aussehen.
Ähm die wird ziemlich simpel aussehen.
Und zwar.
Ne Fetch.
Auf Api
Questions.
Äh Fetch auf Api
Questions.
ID.
Ähm hier muss das
Object rein. Question.
ID.
Kann mir jemand vielleicht kurz gebraind haben.
Was genau das wird.
Und wie eine Frage erkannt werden soll.
Die Frage wird ganz einfach erkannt.
Indem sie mit AdWoblos anfängt.
Wenn die Frage an mich gerichtet ist.
Oder halt theoretisch kann man es auch customizen halt.
An denjenigen der es haben will.
Dann wird sie geloggt.
Und kommt in die Liste rein.
Aktuell logge ich noch alles.
Weil es zum testen einfacher ist.
Await.
Result.
So.
Und jetzt müssen wir nur noch
Dafür sicherstellen das.
Das auch gelöscht wird.
Auf dem Endpunkt.
Und wir machen noch was.
Wir löschen es.
Und danach.
Rufen wir es direkt.
Direkt neu ab.
Das sich die Seite aktualisiert.
Wenn es weg ist.
So und jetzt.
Machen wir hier noch nen.
Noch nen.
Emoji Mülleimer.
Oder irgendwie sowas dahinter.
Ups.
Er möge starten.
Chrome will nicht starten.
Okay was auch immer.
Starten wir halt noch in Firefox.
Auch gut.
Get Emoji.
Da gibt es doch bestimmt nen schönen Mülleimer.
Wobei wir brauchen keinen Emoji Mülleimer.
Wir haben doch Material Design Icons eingebunden.
Dann machen wir nen Button.
Da hinten dran.
Glas.
Gleich.
Material.
Muss ich abgucken.
Aus dem alten.
Hier.
Da.
Da müssen wir uns aber mal suchen.
Nach Material.
Material Design Icons.
Was es da gibt.
Für nen Mülleimer.
Meine Browser sind alle buggy.
Das liegt glaube ich an wenig RAM in der VM.
Trash.
Das ist ja alles in der VM hier wohlgemerkt.
Trash.
Delete Circle.
Delete Circle Outline.
Delete Empty.
Was ist denn hier das schönste von?
Delete.
Einfach nur Delete.
Gar kein großer Akt.
Hallo?
Moment.
Einfach nur hier.
Delete.
Achso.
Click on Click.
Delete Question.
Bam.
Der ist ein bisschen groß der Button.
Huge Button.
Massive.
Massive Button.
Sollen wir das vielleicht in den Diff machen?
So.
Sieht immer noch kacke aus oder?
Ja weil das unter Linux läuft.
Und ich hab Windows drauf.
Deswegen in der VM.
Eigentlich ist der Button doch gar nicht so schlecht oder?
Der ist schön fett.
Da kann man sich nicht verklicken.
Großartig.
Man könnte jetzt noch hier irgendwie sagen.
Display Flex.
Dann ist es nebeneinander.
Aber das andere ist schöner oder?
Das sieht kacke aus.
So.
Wir machen jetzt nochmal einen neuen Button.
Weil der Button der gefällt mir nicht so richtig.
Der Button.
Der kriegt erstmal.
Background.
Kriegt der Transparenz.
Könnte eigentlich auch mal Browser Sync wieder anmachen.
Dass das hier nicht Browser Sync.
Wie heißt?
Live Reload.
Dass ich nicht jedes Mal drauf klicken muss.
Okay.
Das sieht schon nicht mal ganz so hässlich aus.
Outline.
Ne Border.
Border.
Null.
So und jetzt haben wir hier nur noch ein Ding.
Nur noch ein Button.
So und dann sagen wir hier Cursor.
Hand.
Also wenn ich drüber gehe.
War das nicht Hand?
Ne Pointer.
Pointer ist es.
Jo.
Kann man doch lassen.
Jetzt geben wir dem noch ein Color.
Dark Red.
So.
Da haben wir einfach Red.
Kacke aus.
Fire.
Fire Prick.
Oh gut.
So wenn man da jetzt drauf geht.
Gelöscht.
Allerdings wird das jetzt noch nicht funktionieren.
Weil er sagt 500.
Was auch logisch ist.
Dass er sagt 500.
Weil die Delete Methode.
Ist ja noch gar nicht richtig implementiert.
Ne.
Ach ne Moment.
Haha ich mach das falsch.
Fetch und jetzt müssen wir ihm ja sagen.
Dass er.
Method soll er Delete verwenden.
Deletet er jetzt?
Gucken wir mal.
Wo passiert der Delete?
Wir machen ja da noch gar nichts drinnen.
Lull.
Omega Lull.
Machen wir wieder.
Beste Debug Ausgabe.
ID. Mal gucken ob die ID ankommt.
Das heißt wenn wir jetzt auf den Mülleimer klicken.
Sollte es die ID von der Message ausspucken.
Und wenn das funktioniert.
Können wir danach die Message einfach löschen.
Eins.
Sieben.
Ok das scheint zu funktionieren.
Das heißt dann sagen wir jetzt.
Kontext.
Find.
Find.
ID.
Ne hier.
Item.
Ne nicht Find.
Find.
Ne.
Ach ne.
Messages Find.
Find ID.
Wenn.
Er es nicht gefunden hat.
Dann.
Sagen wir.
Was kann man da für einen schönen.
Fehlercode nehmen.
Error.
Oder so.
Not found.
Not found sagen wir einfach.
Der Sinnvollste.
Dann müssen wir ihm sagen.
Das wir nicht Void zurück geben sollen.
Sondern ein Result.
Ok und wenn er den gefunden hat.
Dann sagen wir.
Delete.
Ich kann echt nicht tippen.
Ne.
Messages.
Delete.
Remove.
Item.
Und dann speichern wir das ganze.
Und die Message müsste weg sein.
Dann sagen wir Return.
Ok.
Schauen wir mal ob das jetzt funktioniert.
Also jetzt sollte die Nachricht verschwinden.
Bam.
Nice.
Und er.
Er behält auch als Target.
Gleich den nächsten Button bei.
Ich kann jetzt alles ganz schnell löschen.
POG.
Richtig POG.
Huge POG.
30 Milliarden Messages drin.
Ich meine.
Ich könnte einfach die Datenbank löschen lassen.
Alter da sieht man mal wie die bei XQC spammen.
Wir waren da 10 Sekunden drinnen oder so.
Und der komplette.
Der komplette Datenbank ist voll.
Guckt euch mal an.
Wie viel 3 Milliarden Messages da drin sind.
Ah.
Krass.
Ich kann übrigens einfach die Taste gedrückt halten.
Fällt mir gerade auf.
Muss gar nicht immer wieder neu drücken.
Wäre es nicht einfacher die DB zu.
Natürlich wäre das einfacher.
Ich kann auch einfach sagen.
DB Delete.
DB Create.
Aber ich wollte mal gucken wie er sich verhält.
Wenn ich ihn löschen lasse.
Ich meine ich halte jetzt die Taste gedrückt.
Und man sieht schon.
Das wird alles.
Vernichtet.
Jetzt sind wir gleich.
Jetzt sind wir gleich fertig.
Flop.
Welche Datenbank.
Das ist äh.
Das ist doch cool.
Das gefällt mir.
Das ist sehr sehr nice.
Ja das ist doch jetzt echt schick.
Das gefällt mir.
Das gefällt mir ganz aus.
So was wir jetzt noch machen müssen.
Wir müssen filtern.
Jetzt gibt es 2 Möglichkeiten.
Entweder.
Wir filtern das direkt hier raus.
Direkt hier raus.
Das Nachrichten.
Die nicht mit AdWoblos anfangen.
Erst gar nicht in die Datenbank kommen.
Oder ich log einfach mein Chat.
Jetzt mal eine Weile mit.
Vielleicht können wir nämlich.
Wenn ich mein Chat mit logge.
Deswegen werde ich einfach mal so einrichten.
Das ich.
Jede Message mit logge.
Ich meine der Kram ist ja nicht groß im Endeffekt.
Guckt es euch mal an.
84k oder so ist das jetzt.
Ach wir machen.
Stimmt wir sagen nicht fängt mit AdWoblos an.
Sondern wir machen ähm.
Enthält AdWoblos.
Und das filtern wir nicht hier.
Das filtern wir nicht hier.
Sondern das filtern wir einfach im.
Controller.
Das wir einfach nur sagen.
Hier Dings bla.
Und dann sagen wir Select.
Select Message.
Die ähm.
Im Text.
Die im Text ähm.
AdWoblos.
Enthalten.
Leerzeichen.
Was hat der für Schmerzen.
Ach Quatsch nicht Select.
Where.
Megalo.
Wo ist jetzt das Problem.
Was hat der jetzt für.
To Array oder was.
Ich glaub jetzt gehts.
Emotes ist zu viel Aufwand.
Ehrlich gesagt.
Ich hab überhaupt keine Ahnung.
Wie viel Emotes.
Also wie viel Aufwand Emotes sind.
Ich hab keine Ahnung.
Also sollte Beta Twitch TV.
Und ähm.
Franker Faces Z.
Und Twitch und so.
Sollte es irgendwo eine.
So eine Datenbank geben die ich abfragen kann.
Was ist für Emotes.
Gibt.
Dann ist es glaube ich.
Oder beziehungsweise am besten noch.
Was es für Emotes gibt.
Und ähm.
Gleich die passende Uhr zum Bild.
Wenn es sowas gibt wäre das einfach.
Api Beta Twitch TV Emotes.
Ja gut.
Wenn es das dann auch für alles gibt.
Das müsste ich mir mal überlegen.
Das können wir.
Das können wir eigentlich noch machen oder.
Also jetzt nicht unbedingt heute.
Aber das muss ich mir erstmal Gedanken drüber machen.
Das ist eigentlich ganz.
Ganz nice.
Genau die Nightbot.
Könnten wir noch rausfiltern.
Ähm.
Und Message Text.
Ne Message User.
Ist nicht.
Der.
Nightbot.
Mailedwoblos.com
Ja das ist mir klar das das passt.
Also das das passieren kann.
Ähm.
Wollte ich jetzt nicht sagen.
Es muss Leerzeichen da vorne hinter sein.
Die Leute schreiben es teilweise auch einfach mitten rein.
Oh Nightbox.
Das gefällt mir.
Also das hat was.
Das hat was ich finde das echt nice.
Was wir noch machen ist.
Ich glaube das haben wir sogar schon.
Haben wir das?
Haben wir das?
Ne haben wir nicht.
Ich will das alles.
To lower.
User to lower.
Kann ich mich immer drauf verlassen.
Da ich hier keine Probleme mit.
Große Kleinschreibung krieg.
Ich finde das cool.
Das gefällt mir richtig gut jetzt gerade.
Doch Nightbot wird gefiltert.
Doch hier drinne.
Steht doch drinne.
Wenn Name Nightbot nicht Nightbot ist.
Dann geht es durch.
Mit Nightbot.
Du musst addwoblos Nightbot oder so schreiben.
Das es testen kannst.
Aber das funktioniert nicht.
Das sollte jetzt nicht durchkommen.
So.
Das ist doch echt praktisch.
Stimmt das mit dem to lower.
Ist richtig bei den Emotes.
Aber ich habe hier eh noch keine Emotes drinne.
Das mit den Emotes.
Das muss ich mir erstmal in Ruhe angucken.
Das machen wir heute nicht mehr mit den Emotes.
Was können wir jetzt nochmal.
Gibt es noch irgendwas was man einbauen könnte.
Was man relativ easy machen könnte.
Timestamp.
Ja stimmt.
Timestamp wäre nicht verkehrt.
Das stimmt.
Zumal wir haben den ja schon.
Wir haben den ja schon.
Wir machen jetzt einfach Question User Text.
Ähm.
Da machen wir ganz am Anfang.
Machen wir Time.
Oh.
Wonka ist weak.
Oh Gott.
Das müssen wir jetzt parsen irgendwie.
Timestamp neben dem Delete Icon.
Ich muss erstmal den Timestamp schöner hinkriegen.
Ich muss erstmal den Timestamp schöner hinkriegen.
Ich muss erstmal den Timestamp schöner hinkriegen.
Machen die da für komische Dinge alle.
Das geht doch bestimmt schöner.
Ja das stimmt.
Das könnte auskennen.
Fuchs das ist auch eine gute Idee.
Ich rufe ja jedes mal alles ab.
Wobei dann.
Also wenn wir sowas machen.
Würde ich sogar noch einen Schritt weiter gehen.
Ich würde dieses einmal pro Sekunde Pollen irgendwie abschaffen.
Ich würde dieses einmal pro Sekunde Pollen irgendwie abschaffen.
Und ähm.
Ich würde irgendein Signalisierungsding noch einbauen.
Ich würde irgendein Signalisierungsding noch einbauen.
Dass der quasi nur reloadet.
Wenn ne neue Nachricht reinkommt.
Wenn ne neue Nachricht reinkommt.
Und dann auch nur die neue Nachricht.
Sowas könnte man schon.
Sowas könnte man noch machen.
Was das Launchfeld war.
Das ist hier.
Das da.
Das ist Rofi.
Rofi heißt es wahrscheinlich.
Das ist ein Launcher.
Ich habe es bei mir so.
Steuerung P ist quasi Zwischenablage.
Durchsuchbare Zwischenablage.
Durchsuchbare Zwischenablage.
Kann ich sagen.
Guck mal hier unten.
Ich hatte doch irgendwann mal was in der Zwischenablage mit Next Tick.
Kann ich die Zwischenablage durchsuchen.
Wähle das aus und dann ist es wieder in der Zwischenablage drin.
Steuerung D ist bei mir der Application Launcher.
Steuerung D ist bei mir der Application Launcher.
How to convert Java DateTime in CSS.
Gibt es da nichts schöneres?
Gibt es da nichts schöneres?
Ah ja.
Next Tick Date.
Should work.
Bin schon mal gespannt ob das funktioniert.
Probieren wir mal aus.
You Date.
Ha.
Tatsächlich. Es funktioniert.
Klappt.
Das ist ja easy as a fuck gewesen.
Steuerung P.
Nee was ist Steuerung P.
Default ist anscheinend Drucken.
Was ist bei dir Steuerung P.
Pornhub.
Ich wollte es gerade sagen.
ist. PP-Ga-Shortcut. Ähm, hab ich voll vergessen. Genau, so, wie, wie, wie, wie formatiert man
Dates in, in, ja, Havascript? Wie macht man das? Gibt's da nicht sowas wie Striftime oder
sowas? Oh, warum hat er nicht nach unten gescrollt? Direkt. Mozilla Date, da gucken wir uns mal
die Date-API bei Mozilla an, was wir da Schönes haben. Die Zeitanzeigen, wie es her
ist, äh, wann die Nachricht gesendet wurde. Oh, das ist auch eine gute Idee. Ähm, ich
will jetzt ja eigentlich erst, ich, ich, das, das merke ich mir, das merke ich mir, das
ist eine gute, eine gute, eine gute Idee, dass man dann quasi sagen könnte, irgendwie
bla bla bla, five minutes ago oder sowas, das, das wäre, das wäre ganz cool. Aber erst
einmal schauen wir mal, wie wir das hinkriegen, dass wir dem Ding einfach nur die Uhrzeit
entlocken.
Get date, get full year, get date, get hours, get milliseconds. Gibt's nicht sowas wie
get local date oder sowas oder get local time oder irgendwie so? Ah, to local time string.
Ah, das wollen wir haben. Das klingt gut. To local time string. Oh, äh, haben's kaputt
gemacht. To local, ach, lokale.
Lokale, nicht local. Ja, ja, das ist doch schön. Und wenn wir ihm jetzt noch sagen
können, dass wir 24 Stunden, dass wir 24 Stunden Dings haben wollen, kann man jetzt
einfach sagen, hier, de, de. Oh, Pog, nice. Das ist ja recht, recht easy. Was möchte
er denn programmieren? Ja, man sieht's eigentlich schon. Ich will einen, äh, einen Log haben
von meinem Chat.
Mit allen, mit allen Fragen, die an mich gestellt werden. Und wenn ich die dann beantwortet
hab, dann kann ich sie löschen. Da vergesse ich nix mehr. Weil ich hab schon so oft in
Streams gesagt, ja, das gucken wir uns dann an und hab's nie gemacht. Warum ist das alles
so easy? Weil, easy as fuck. Deswegen. Ähm, ich könnte vielleicht noch hier den Wubblors
highlighten. Wie könnte man das denn jetzt schön machen? Also die Uhrzeit ist jetzt
schon mal schick. Das gefällt mir irgendwo. Die Uhrzeit ist schick. So.
Also, die Uhrzeit lassen wir so. Dann machen wir die, okay, warte mal, wie, wie machen wir
das? Also. Date lassen wir so. Date lassen wir so. Den User, den machen wir fett. Sick,
sick User. Ja. Und den Text lassen wir so. Wäre es nicht sinnvoll, auch Nachrichten markieren
zu können, nicht nur löschen? Was mach ich mit der markierten Nachricht dann? Du meinst
du bei der Nachricht, wo die Nachricht ist? Ja. Ja. Ja. Ja. Ja. Ja. Ja. Ja. Ja. Ja. Ja. Ja. Ja.
Ja. Ja. Ja. Ja. Ja. Ja. Ja. Ja. Ja. Ja. Ja. Ja. Ja. Ja. Ja. Ja. Ja. Ja. Ja. Ja. Ja. Ja. Ja. Ja. Ja.
Ja. Gut. Den kann ich immer noch so markieren. Da sehe ich jetzt nicht so den.
Ja, B benutzt man nicht mal. Stimmt. Stimmt. Das ist eigentlich richtig.
Aber scheiß drauf. Wie könnte ich das jetzt noch machen, dass
Adwobblors eine andere Farbe kriegt? Da müsste ich jetzt irgendwie
den Text nochmal parsen. Und dann irgendwie
einen Div oder so drumherum machen, was eine andere Class mit
einer anderen Color kriegt. Weil das ist glaube ich ein bisschen zu großer Akt.
da müsste ich irgendwie so
ein bisschen HTML
zusammen
plussen
naja
ich glaube ich kann auch erstmal so damit leben
ähm
ja also was wir, wir haben noch
wir haben noch ein bisschen Zeit
also was wir noch machen könnten ist
aktuell ist es ja nicht
sonderlich schön
der macht es jetzt ziemlich
noob mäßig hier
alle Sekunde fragt er ab, ob es was Neues gibt
wir könnten
schon noch einbauen, wir haben es ja vorhin
kurz besprochen, wir könnten schon noch einbauen
dass der das dynamisch macht
also sprich, dass der
nur updatet
wenn eine neue Nachricht
da ist
das könnten wir noch machen, übrigens danke für die ganzen Follows
ich gucke mal kurz nach, wenn wir hier alles
haben, login
hat mich wieder ausgeloggt
bei Steam Labs
also wen haben wir denn am Start
ähm
Jody76
FSTCC
haben wir am Start
dann haben wir
ZuckSelzData am Start
P925Q
Jak5Krangelia
die Namen sind heute echt schwierig
Kriegs
ZirksBrandi
MopiniaTV
Maxeri
und
Rolf
Rolt
und
Avivatzxnz19
FVR
der Hauflord
ja das war es, mehr sehe ich nicht heute
aber ich meine so blickt man doch schon
so blickt man doch schon ganz gut durch hier
hallo
BloodPact81
also wir können jetzt auch probieren mal
einzurichten, dass der
wobei eigentlich ist das
voll die vergebene
Mühe irgendwie, weil das funktioniert.
Also ist scheißegal,
ob das eine Sekunde später aktualisiert
oder eine Sekunde früher.
Das ist vollkommen egal, ey.
Wir könnten noch, eine Sache,
die der Auskernfuchs hier geschrieben hat,
könnten wir vielleicht wirklich mal
zur Sicherheit einbauen,
dass er nur
die letzten
Moment, wo muss ich denn hin?
Dass er nur die letzten
irgendwie, keine Ahnung,
die letzten 50 oder so.
Ach ne, das ging gar nicht mit Lars, das war top.
Ne.
Moment, wie ging das jetzt nochmal?
Take, take? 50 war es glaube ich, ne?
Take 50.
Genau.
Dann nimmt er nämlich nur die, ne, wir brauchen
nicht die 50 erst, wir wollen die 50 letzten
haben. Also müssen
wir die vorher noch sortieren.
Sort.
Sort.
Ne, Order, nicht Sort.
Order. Order by
äh
absteigend, aufsteigend.
Oh fuck, wie ging das jetzt?
Ähm.
Wann ist das Partnership soweit?
Äh, ja, müsste ich jetzt langsam aber sicher
wieder machen können.
Ist ja was Schöneres als das, was ich
jetzt machen will.
Delete last end records.
Ja, wie würde man das machen?
Ja, okay.
Ja, der macht es so ähnlich
wie ich.
Order by.
Dann muss man ihm wahrscheinlich sagen,
ähm, ID.
Und dann die letzten 50.
Hallo, Iax.
Ah, Moment, ha!
Das ist ja Fail.
Ne, ne, ne, ne, so einfach ist das
gar nicht. Ich will ja die Neuesten unten haben.
Wobei, warum will ich eigentlich,
warum will ich eigentlich die Neuesten unten
haben? Ich könnte mir doch mein ganzes
Gescrolle sparen, wenn ich die Neuesten einfach
oben hin mache. Ja,
Big Brain, dann machen wir das so.
Guck mal, dann wird das hier viel kürzer.
Bam. Wo ist das denn?
Ja, da ist es.
Ja, da ist es.
Und wenn ich jetzt lösche hier.
Zack. Nice.
Ja, das ist doch noch viel schöner.
Ja, und oben bleibt er automatisch.
Ja, das ist da. Siehst du?
Manchmal macht es Sinn, wenn man sich einfach mal
ein bisschen, einfach mal ein bisschen Gedanken macht.
Test. Ja, funktioniert.
Nice.
Nice.
Sehr nice, so richtig nice.
Nice. Ja, und das bleibt auch oben.
Dann lassen wir das so.
Dann kann ich mir nämlich diesen ganzen Scrolling Mist
sparen. Dann sortieren
wir es einfach absteigend, aufsteigend,
äh, absteigend.
Und
nehmen die letzten 50 Elemente,
weil die letzten 50 reichen.
Sobald ich dann quasi eine davon beantwortet
habe, kommt ja beim nächsten Update wieder
eine neue dazu, die dann vorher nicht dabei
war.
Und so verhindern
wir auch, dass der Browser
50G RAM frisst.
Die letzten 50
Messages ist okay. Man könnte
noch einen Knopf machen für weit mehr laden.
Oh, der Auskennfuchs hat Dinger gebastelt.
Kann ich das jetzt aufmachen,
ohne dass was passiert?
Okay, was macht das jetzt? Ah, ja.
Oh, das ist schick. Das gefällt mir.
Das gefällt mir. Das ist schick.
Das sieht viel, viel, ähm,
Messenger
stylisch aus.
Wow, ist das viel Zeug.
Ah, ja, ja.
Könnte man das schon machen.
Das ist eine gute Idee, ja.
Da sieht man, dass ich das eigentlich viel zu wenig mache.
Ja, das machen wir.
Das ist doch schicker als meins, was der Auskennfuchs
da gebastelt hat, oder?
Ne, Sibaro, das lasse ich drin, weil das steht immer
mitten im Satz und so. Das finde ich
besser.
Dann machen wir das so.
Äh, ja.
Das, ähm,
Time. Ups.
Hallo, der Boss ist back.
Das da haben wir.
Das da haben wir.
Time. User.
Text.
Da kommt die Time rein.
Der User.
Der User. Und da unten kommt
der Text rein. So.
Da können wir uns wahrscheinlich sogar
den Diff sparen drum herum.
Oder? Brauchen wir den?
Brauchen wir den Diff jetzt noch? Ne, brauchen wir nicht, ne?
Achso. Ne, doch. Brauchen wir.
So, und jetzt sagen
wir hier.
Versucht das mal nachzubauen.
So, und jetzt sagen wir hier
Class
Text.
Weil viel interessanter ist Class Time.
Da können wir jetzt hier nämlich sagen, ähm,
Font
Size
10.
Ja, oh, das ist schön.
So, dann gucken wir mal, wie er das gemacht hat hier.
Huiuiui.
Ganz schön, ganz schön viel Zeug.
Class Content. Ach, so hast du das
gemacht. Ah, das ist natürlich auch nicht schlecht.
Du hast das quasi getrennt. Du hast hier,
Diff und dann noch so ein
Container Diff.
Ja, das ist ganz sinnvoll.
Big Brain, ja.
Ah, ja, das ist
Das ist nice.
Kann man das hier irgendwie neu formatieren lassen?
Format? Ne.
So, und jetzt
können wir auch wirklich den
Jetzt könnten wir das echt
wegmachen, dann ist es nämlich hinten auf der gleichen
Doch nicht.
Ach, CSS
gefuddelt.
Zumindest escapt er den Mist.
Class Time.
Kopier mir jetzt einfach mal
deinen. Ich kopier mir
das jetzt einfach mal komplett von dir.
Easy. Easy weg
weggerippt.
Lol.
Bäh. Ähm, das sind
ein bisschen, das sind mir zu viele Browser-Fenster.
Da sieht man wieder was.
Ich bin der übelste CSS-Pro,
wie man wieder sieht, ey.
So, also, jetzt hat er hier
den, den, oh, da hat er auch keinen Button mehr
drinne, ne? Was ist alles?
Sind alles, sind alles Diffs?
Doch. Ach, ne, das ist nur
der Delete-Button. Okay, hat der hier den Button
hier oben irgendwas drinne?
Ach, den hab ich einfach nur
nicht kopiert. Ey.
Oh, das finde ich schick.
Wobei das nicht ganz stimmt, was ich da
kopiert hab, ne?
Darf ich das überhaupt kopieren?
Sonst ist die Einzeige gleich raus.
Ja.
So, hab ich's, hab ich's
richtig, hab ich das hier richtig gemacht
oder hab ich irgendwas vergessen?
Diff Class
List Item
Diff Class Time. Ah, ne.
Okay, er hat das Diff hier nicht mehr drumherum.
Dafür
jetzt Diff Class, ach so.
Aha.
So. Dann hat er Diff Class
Content hat das Ding hier.
Content?
Ah,
es wird.
Es wird.
Diff Class Content.
Dann haben wir noch
nen extra Diff.
Oder? Nochmal nen Diff.
Da drum.
Der CSS Pro ist am Start.
Man sieht's schon wieder.
So, und dann kommt User.
Dann kommt Message. Ach so, Message hieß das.
Das hieß gar nicht Text, hieß Message.
Ah,
sehr schön. So, und der Button,
der Button geht in den Diff hier rein, ne.
Der Button, der geht in den
in den, den Diff
ist der mit drin, ne.
Schick!
Sehr, sehr schick.
Sehr, sehr nice.
Hab ich das jetzt richtig nachgebaut?
Achso, du hast das Diff mit
Content nicht? Doch, hab ich.
Die Nachricht ist einfach nur älter, oder?
Okay.
Das ist doch schick. Das gefällt mir.
Wir sagen jetzt Vue.js noch,
dass wir warten sollen, bis alles geladen ist.
Da weiß ich aber aus dem Kopf nicht mal, wie das ging.
Äh,
wait until loaded.
Da gab's irgendwie was.
Ne, ne, ne, ne, das ging anders.
Das ging anders.
Das ging anders.
Man konnte Vue direkt sagen,
ähm,
dass der erst anfangen soll,
wenn alles geladen ist.
Da gab's irgendwas.
Ne, ne, ne, ne, es gab.
Man konnte das, glaube ich, hier oben in dem Diff,
konnte man irgendwas setzen noch direkt.
Das war, oh, wie ging das nochmal?
Man konnte ihm sagen,
mach erst, wenn fertig geladen ist alles.
Ne, ne, ne, ne,
das war total easy, das weiß ich noch.
Das war easy as a fuck.
Da muss man
einfach eine Sache eintragen und dann
ging das.
Haben wir's vielleicht hier drinnen?
Haben wir's im Memeboard vielleicht
drinnen?
Ähm, nee, nee, nee,
wie ging das nochmal?
Total einfach.
Wie viel Gedöns wir jetzt schon drinnen haben
bei dem anderen.
Ähm,
man konnte dem,
Differ? Nee.
Nee, nee, nee, nee.
Ich weiß es nicht mehr.
Ähm, man konnte dem sagen,
nach dem Motto, fang erst an.
Oh, wie ging das denn?
War's einfach Differ?
Nee, das war aber,
glaube ich, anders.
Nee, nee.
Nee, man konnte,
man konnte hier direkt beim,
beim Start was setzen.
Krieg's jetzt echt nicht mehr, ich weiß nicht mehr,
wie der Mist hieß.
Ach, vielleicht fällt's mal, vielleicht's, man,
nee, ich weiß es nicht mehr.
Dann hatte man das Problem hier nicht,
mit dem, ich mein, es ist ja kein wirkliches Problem,
wenn du komplett reloadest, zeig das mal kurz an,
bis er die Material-Icons
geladen hat, das ist ja kein, kein...
Ich bilde mir ein, wir haben
das trotzdem hier, haben wir das gemacht?
Popup...
Gucken wir mal hier im HTML vom
Popup...
Popup ID visible...
Ich muss mal gucken,
ob ich das jetzt hier auch drinne hab.
Nee. Ach, keine Ahnung.
Ich, ich weiß es jetzt grad nicht, wie das, wie das,
wie das hieß. Aber ich find's schick.
Gefällt mir. Ähm...
Funktioniert
genauso, wie man das
braucht.
Naja, nächsten Stream können wir dann tatsächlich mal gucken.
Ich hab mich beinahe nicht
sicher, das ging irgendwie anders.
Hatte ich das ja hier drinne?
Nee, hatte ich.
Ach doch, hier.
Ah ja, gut. Das hatte ich drinne.
Da hatte ich's aber
ausgelagert.
Nee, nee, man konnte irgendwie ganz, ganz
einfach was setzen.
Dann hat er erst angefangen, wenn
alles geladen ist.
Gut, ähm...
Nächsten Stream gucken wir mal.
Ich mach mich mal schlau,
wie das ist mit Emotes.
Wie man Emotes
einbinden kann. Muss ich mal
die Belladridge TV oder Frank
FFZ, äh,
ARP hier angucken.
Wie man da Emotes abfragen kann.
Ich hab hier eben schon ein paar
Links gekriegt hier. Zum Beispiel das da.
Und, ähm...
Das da.
Wann ist der nächste
Stream? Vielleicht morgen.
Wie funktioniert denn die ARP?
Omega lul.
Nee.
Genau. Wie kann man jetzt die komplette...
Kann man irgendwie die ARP
auflisten lassen von meinem
Channel? Oder wie
funktionieren diese Dinger?
Das muss ich mir mal im Detail angucken.
Wie das ordentlich funktioniert.
Fetch Info vor... Also ich brauch ja erstmal
ne Liste.
Ich brauch ne Liste mit, äh,
Namen von Emotes in meinem
Channel. Ach hier, Room
ID, Twitch ID.
So.
Room? Room Lords?
Ne.
Ah nee,
Room. Room ist's ja nicht.
Da muss ich mich mal in Ruhe mit beschäftigen,
wie das geht. Gibt es, also gibt es
ne ordentliche ARP, wo man Emotes abfragen kann?
Da können wir das noch einbauen.
Das können wir noch einbauen, dass der, äh, Emotes
abfragt. So, Leute.
Ähm, wie lang war mein On?
Oh.
Drei Stunden. Okay. Ich geh jetzt grillen.
Hotter Grill am Start.
Wir sehen uns das nächste Mal.
Macht's gut. Bis dann.
CU.
