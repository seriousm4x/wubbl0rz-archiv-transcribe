So, da bin ich.
Weiter geht's.
Soll ich euch mal was Nicestes erzählen?
Ich hab den ganzen Tag nichts anderes
mehr vor.
Sportstelz ist erledigt.
Jetzt wird gebroggert
bis 22 Uhr, bis ich ins Bett gehe.
Okay, vielleicht nicht
10 Stunden. 10 Stunden ist vielleicht ein bisschen zu lang.
Gibt's das wirklich?
Das ist die Low-IQ-Variante
von 10++. Ne, das gibt's nicht.
Aber das ist
ungefähr mein Skill-Niveau
in 10++.
So, allerwichtigstes.
Acht, by the way.
Ich muss mal mein Linux starten
und Package-Updates machen.
Und mal meine Uhr ausziehen.
Ich brauch kein Herzfrequenz-Tracking.
Wobei,
wobei, es ist 10++.
Vielleicht,
vielleicht soll ich das anlassen und mal
meine durchschnittliche Herzfrequenz von 10++
programmieren.
Zeichnen.
Vielleicht gar nicht so schlecht.
Ey, das wäre tatsächlich echt, das wäre,
das ist eine neue Videoserien-Idee.
Ich meine, werde ich eh nicht machen, aber
so nach dem Motto, Puls
bei verschiedenen Programmiersprachen.
Wie nervig ist das?
Also ich kann jetzt schon prädikten,
dass 10++ ganz weit oben
sein wird.
Und vom Frustfaktor
dicht,
also vom, ne, der Frustfaktor
ist falsche Formulierung.
10++ ist ganz,
ganz vorne, äh,实 padre fre kuente
sich dadurch den üblichen
dplusplus frust Pacco,
aber ist das auch ganz vorne,
zu recht übelst nervt
und 이제 war super langsam in was でっと
konntest, weil super langsam in Anyast,
aber, aber zu programmieren,
zum Ausbilden.
Es ist schnell.
Ich glaube, was ist gar nicht so viel
grunter von Brillz Rickert
dass Herz lokal themed
des wäre was tenían zu formeln
notwendiges Übel.
Ja, das ist für 10++.
immer noch kein Offiziell13
oplich merkheeckardi haber Siz würden 수
happiness S-Manager
ệt
ordentliche Module. Ich weiß, dass das
alles in irgendeiner Art und Weise existiert,
aber halt nix, wo man sich drauf
verlassen kann. Es gibt ein paar Third-Party-Package-Manager,
es gibt
diese
C++23, glaube ich,
theoretisch. Die werden für immer
mit Make, CMake
und irgendwelchen obskuren
Dinger wie Ninja und hast du nicht gesehen, rumhantieren
und mit Header-Files um sich schmeißen.
Die kommen dann nie wieder raus.
Die zählen die C++-Leute.
Ich sag ungern C, C++,
weil C ist eine gute Sprache, C++
nicht.
Ich muss ein Windows-Update machen, wirklich?
Ah ja, tatsächlich.
The device needs to restart, install update,
select the time. Du kannst mich mal.
Geh mal fort. Jetzt nicht.
Es gibt jede Menge Task-Runner.
Das Problem ist,
das bringt ja gar nix.
Das ist ja
bei C++ so eine Kombination
aus Compiler-
Konfiguration,
Programmier-Projekt-
Management,
welche Dateien included werden sollen
und sonst was und Task-Runner.
Das ist ja alles in einem.
Also insofern, das wird's
wahrscheinlich nie ohne geben.
So sad geht das.
Stellt euch mal vor, wie
halbwegs erträglich
C++ sein könnte
mit...
Okay, es gibt, ohne Mist, es gibt
drei Sachen.
Drei Sachen.
Wenn die in C++
eingebaut werden,
dann
würde es die Sprache
schon mal 50% besser machen.
Aus meiner Sicht, ja.
Das sind natürlich die krassen Hardcore-C++-Hackermans
nicht so. Da muss das, ist das
schon zu viel, ja.
Kennst du das Buch Linux Basics
for Hackers? Ne.
Kenn ich nicht. Das Beste, um Linux
zu lernen ist, so banal es sich anhört,
Linux täglich zu verwenden.
Du brauchst auch keine super
Hackerman-Distribution hier. Du musst nicht mit
Arch oder irgendwie sowas in der Richtung anfangen.
Installier den Linux Mint,
wenn du Einsteiger bist.
Und benutze das einfach täglich.
Dann lernst du mit Abstand am meisten.
Klar, paar gute Videos,
Tutorials und sonst was.
Sicherlich nicht verkehrt, aber die wirst du eh
früher oder später dir gezielt suchen, wenn du Probleme
hast, wo du so nicht weiterweißt.
Und du musst ja Linux
auch gar nicht auf deinem Hauptrechner installieren.
Du kannst es auch so machen, wie ich hier hab.
Auf der Kiste und Linux hier in der VM.
Dann kannst du sogar easy dazwischen umschalten.
Ich benutze das so. Windows auf dem Host
für alles, was
Performance braucht, ja, von
Video-Stells
für YouTube bis Gaming.
Windows, restliche Technik-Sachen, Linux.
Fertig.
Was wir heute machen?
Ich hab mir...
Achso, ne, Moment. Ich muss jetzt vielleicht mal
meinen Satz noch... Fertig, fertig.
Was ich vorhin sagen wollte. Drei Sachen,
die man für C++ machen könnte.
Und was die Sprache gleich 50%
verbessern würde. Okay?
Also, das erste ist
ein Package-Manager.
Einen offiziellen
Package-Manager.
Ja? Sowas wie Nougat,
sowas wie Pip,
Gem, NPM,
whatever. Irgendwas in der Richtung.
Offiziellen Package-Manager.
Und der halt
auch offiziell ist, das heißt,
jeder, der möchte, dass
seine Pakete ordentlich
verfügbar sind, muss halt
sich an
diese Sache halten. Das klappt
bei Cargo, bei Rust oder bei
Nougat. Wunderbar.
Im JavaScript-Ökosystem
ist es so,
JavaScript-Ökosystem ist es so,
existierst du nicht als NPM-Package,
existierst du nicht.
Und so könnte das auch ohne Probleme
für C++-Libraries sein.
So. Einen offiziellen
Package-Manager. Ja, und ich weiß, jetzt kommen
die Leute wieder und sagen, aber Max, was ist
denn mit den tausend verschiedenen Architekturen?
Was ist denn mit unterschiedlichen
Compilern? Das hat doch erst mal gar
nichts damit zu tun. Das ist
Compiler- und Architektur-unabhängig.
Man kann da natürlich, Rust
kriegt es auch hin, NPM-Package, man kann da
natürlich Support für einbauen, das bei unterschiedlichen Architekturen,
aber es braucht einen
offiziellen Package-Manager
und eine offizielle
Package-Registry. Das würde das schon
so viel besser machen.
Und auch dieses unsägliche
Rumhantieren von, ich klone mir
einen GitHub-Repo, referenziere
irgendwelche Header-Files und hoffe, dass ich es in der
richtigen Reihenfolge inklude, dass
es funktioniert. Endlich mal ein bisschen
aufräumen und auch
das fördern, dass C++ eigentlich
ja mittlerweile angeblich, ich hab's noch nie in the wild
gesehen, Module unterstützt.
Also nämlich auch der zweite Punkt,
ordentlicher Modulsupport, der auch benutzt
wird und nicht mehr Header-File-
Geschiss.
Und das dritte, ein Feature, was
aus meiner Sicht auch C++ enorm
viel besser machen würde, ist, aber ich weiß,
das ist sehr umstritten und das möchten die
ganzen C++-Leute nicht und kommen
mit allerlei
fadenscheinigen Sachen, warum das
eine schlechte Idee ist. Ich bin der Meinung,
Extension-Methods
wäre mit Abstand das Beste
für C++, weil
die C++-Standard-Library ist
berühmt, berüchtigt, wirkt
inkonsistent und
Feature-Lacking.
Wobei die Standard-Library gar nicht mal
so extrem Feature-Lacking ist,
sondern die Sachen zu finden,
ist schwierig und
manchmal gibt es halt auch Sachen gar nicht.
Und das führt
dazu, dass jeder, der was
machen will in C++, irgendwie
eine eigene String-Klasse bastelt
und sowas. Gäbe es Extension-Methods,
könnte ich einfach
Standard-String-Extenden mit sinnvollen
Methoden. Wir dürfen nicht vergessen,
der C++-Standard-String,
der hatte bis vor ein paar Versionen
nicht mal sowas Popliches wie
toUpperCase
oder toLowerCase. Das gab es.
Das gab es nicht früher.
Guck mal hier, C++
toUpper.
Ah, das ist übrigens auch wieder mal nicht im
Standard-String, das ist so eine extra Funktion.
Was auch immer die sich da wieder denken
dabei, das gab es ganz lange
einfach nicht. Muss ich das
mal überlegen.
Das gibt es erst seit
C++
Standard...
Ist das da irgendwo dabei? Ja, und diese Hilfe-Seite
ist auch immer
abartig. Keine Ahnung.
Ja, man weiß nicht, ab welchem Standard es
das gibt. Und die drei Sachen,
die würden meiner Meinung nach C++
enorm viel verbessern. Gerade
Extension-Methods um die
lacking Standard-Library. Ja, zum Beispiel, dass
man dann sowas machen könnte wie
array.filter. Einfach
Extenden sich selbst.
Wieso so früh? Ja, weil wir heute ein bisschen was schaffen müssen.
Ich habe Windows als Haus-System
und ein paar Linux-Distros als VM laufen.
Da ich MrRobot
sehr fasziniert finde, habe ich den
David Bombal entdeckt,
welcher eine Serie...
Kenn ich den?
Muss ich mal gucken, ob mir der Name
was sagt.
Ja, von dem habe ich schon mal ein paar Sachen
geguckt. Gucke ich aber nicht oft.
Aber den habe ich schon mal gesehen.
Ja,
also, guck mal, wenn das
jemand ist, den du gerne verfolgst und
er das Buch empfiehlt, ist sicherlich nicht verkehrt mal
reinzugucken. Du kriegst auch viele Bücher heute
auch als Leseprobe.
Und kannst dir das mal angucken.
Ob es was taugt. Und wenn es was taugt, dann kannst du
das ja kaufen.
Ich muss übrigens gerade mal meine Emotes ein bisschen kleiner machen.
Die sind vielleicht ein bisschen sehr pepo-fett heute.
Ja, so.
So viel zu meiner
Meinung, wie man C++
verbessern könnte. Also, wo wir gestern
stehen geblieben sind. Ihr habt Glück, wir haben noch nicht wirklich
viel gemacht. Ich muss gerade mal meinen Controller anschließen.
Und zwar,
es ist noch übersichtlich alles.
Es sind nur ein paar Zeilen.
Ich habe mir ein ESP32
bestellt.
ESP32 S3.
Das ist der neue Flagship
Microcontroller von Espressif.
Es ist Wahnsinn,
was da mittlerweile alles an
Möglichkeiten
drinsteckt. Und auch an
Hardware. Das Ding kostet 15 Dollar
bei AliExpress.
Bringt mit ein ziemlich gutes
Display, direkt drauf gepappt.
Dual Core
CPU, 2x 240
MHz.
V5 Ultra Low Power
Prozessor.
Neustes
Bluetooth BLE,
Bluetooth Mesh,
Wifi. Leider kein 5 GHz Wifi.
Aber ich glaube
Wifi 6, allerdings nur Wifi 6
über 2,4 GHz, was im Prinzip
vollkommen egal ist, ob es Wifi 6 ist.
16 MB
Flash, was
richtig massive ist.
Die alten hatten 4 MB Flash.
Also für die Firmware.
Das ist quasi die SSD
von dem Ding. 8 MB RAM.
Das ist auch richtig fett. Die alten
hatten 520 KB.
Das ist gerade für
grafische Sachen sehr, sehr nice.
Tja. Und ein Display
Controller, der weit unterstützt ist
von so ziemlich allen Libraries.
Ja, das Teil habe ich mir gekauft
und mein Ziel
ist es,
darauf einen Webserver laufen zu
lassen. Über HTTPS.
Und darauf
eine vollwertige Svelte
Web-Anwendung. Das haben wir gestern schon
die Basics hingekriegt. Heute müssen
wir das natürlich noch etwas verbessern.
Und auch mal halt auch sinnige Funktionen
einbauen, ja. Also zum Beispiel
Sensorwerte anzeigen, Webinterface und solche
Geschichten.
Und als erstes werden
wir uns um das Thema
Websockets kümmern. Weil ich habe gelesen,
dass der ESP32
bzw.
ESP-IDF, das ist das
die Standardentwicklungsumgebung
vom Hersteller, dass
die Websockets unterstützen mittlerweile.
Und das gucken wir uns
jetzt mal an. Und wir bauen
Websocket-Support in den Webserver ein.
Also bis jetzt ist das alles noch
enorm übersichtlich, was wir programmiert haben.
Es gibt einmal
hier
das Main-File. Da passiert im Prinzip
nichts großartig, außer
sich mit WLAN zu verbinden.
Ah ja, ich benutze
ESP-IDF plus
die Arduino-Komponente
für Teile, wo es einfacher ist,
sie mit dem Arduino-Framework zu machen.
Das ist quasi ESP-IDF
plus Arduino oben drauf.
Aber man kann auch die Low-Level-Sachen
aus ESP-IDF verwenden.
Und das WiFi-Handling über
die Arduino-Library ist viel, viel angenehmer
als 500
Zeilen mit
ESP-IDF. So, also, das macht
nichts weiter aktuell, wie sich zu
verbinden mit dem WLAN, zu gucken, ob
die WLAN-Verbindung klappt, wenn die WLAN-Verbindung
nicht klappt, dann crasht es. Und
einen Web-Server zu starten. Moin
SebiDev. Und einen Web-Server zu starten auf
https. Web-Server ist hier.
Der Code ist auch sehr übersichtlich.
48 Zeilen. Da passiert aktuell auch noch
nicht allzu viel.
Es wird ein
Zertifikat eingelesen. Das Zertifikat
befindet sich hier. Das
generieren wir mit einem Bash-Skript.
Das ist quasi Binary
meine Zertifikate.
Und es wird
das Zertifikat eingelesen.
Was man braucht. Dann
wird der Web-Server gestartet.
Und es gibt eine Wildcard-Route.
Quasi Slash-Fairhandling.
Also sprich alles, was an Requests kommt.
Noch nicht geleakt, aber ich muss es auch noch
rüberkopieren. Alles was an Requests,
alle Get-Requests, die reinkommen,
werden hier gehandelt. Und zwar
wird geguckt, okay,
ist entweder der Pfad, der
angefragt wird, Slash oder
Slash-Index-HTML.
Oder nicht. Nicht.
Slash-Index-HTML.
Dann, also alles was nicht Index-HTML
oder Slash ist, gibt es 404.
Und ansonsten wird
Index-HTML ausgeliefert.
Als Gzip encoded.
Das ist alles,
was wir gestern hinbekommen
haben. Aber ich muss echt sagen,
Hut ab von den Espressifleuten. Das war
sehr problemlos und easy möglich.
Wir haben ein ziemlich
abartiges Bash-Skript gebaut.
Ach ja, hier in dem
Verzeichnis, wir gehen jetzt mal hin.
In dem Verzeichnis...
Hier. In dem Verzeichnis
liegt eine Svelte-Web-Anwendung.
Die haben wir hier in Visual Studio Code offen.
Die macht aktuell nichts, außer
Kackel anzuzeigen.
Aber
es ist eine vollwertige
Svelte, keine Svelte-Kit, eine vollwertige
Svelte-Web-Anwendung, die wir dann auf den ESP
rüber
kopieren mit der Firmware.
Das steckt alles hier in dieser
Web-App, in diesem Web-App-Header drinnen.
Was
die Zertifikate generiert und
was die Web-Anwendung zusammenbaut,
ist ein relativ
ekliges Bash-Skript.
Das generiert erstmal zwei SSL-Zertifikate,
also Private Key und Public Key.
Server-Zertifikate und Private Key.
Dann
wird das Ganze mit
XXD in C-Arrays umgewandelt,
was man hier sieht. Das ist ein bisschen hacky,
aber eine ziemlich nice Sache, um alles
embedded in der Firmware zu haben. Hier, guck.
Das erzeugt XXD,
erzeugt uns hier C-Style-Arrays aus
einer Datei.
Dann hänge ich noch
Null-Terminator
an, also
an den String. Ich lösche die letzte
Zeile raus, remove die alten
Zertifikate, baue die Web-App,
zippe die Index-HTML
und kopiere die Index-HTML
mit
XXD rein. Also im Endeffekt kommt eine
Web-App.h raus, die
Zertifikate enthält,
Private Key enthält, Server-Zertifikat
enthält und meine
gesamte Index-HTML
gezippt als Binary.
Beziehungsweise als C-Byte-Array.
Und das war's. Das haben wir gestern gemacht.
Und wenn man das Ding startet, ich zeige es euch mal.
Ich schließe es mal an. Ich brauche mal ein USB-Kabel.
Das war's auch. Da haben wir gestern
aufgehört. Das ist, denke ich,
sehr übersichtlich noch.
Und ja, ich lade das, wenn es denn irgendwann mal tut,
auch auf GitHub hoch.
So. Monitor.
So.
Jetzt starte das Ding.
Sollte sich mit dem WLAN verbinden?
Ach nee.
Es kann sich nicht mit dem WLAN verbinden.
Lasst mal gucken, ob es sich
richtig verhält. Ich habe das WLAN-Passwort
ja geändert mittlerweile wieder. Das muss ich gerade mal
rüber copy-pasten. Ihr dürft
nicht hingucken, Leute.
Der sollte nach 20 Sekunden jetzt eigentlich
crashen, wenn er sich nicht authentifizieren kann
gegen das WLAN. Macht der denn das auch?
20 Sekunden müssten
so langsam aber sicher mal um sein, oder?
Warum crasht der nicht?
Der sollte an der Stelle eigentlich
crashen.
Ach, Moment. Ha!
Ich habe kein Timeout angegeben. Ich kack, Noob.
Ja.
Default-Timeouts
sind 60 Sekunden.
Ja, das ist natürlich Blödsinn. Ja, guck.
Aber seht ihr? Jetzt sind die 60 Sekunden
um gewesen. Jetzt Wifi fällt.
Wir machen mal 20 Sekunden. Das ist sinniger.
Es crasht, dann fangen wir von vorne an.
Alter, ich bin seit 5 Minuten hier
lurk, habe Kopfschmerzen für die ganze Woche, bin neu.
Ich würde nicht,
auf gar keinen Fall mit C++ anfangen,
wenn du neu bist. C++ ist
eines der größten
Dreckssprachen, die es gibt.
Und das meine ich wörtlich so.
Ich weiß nicht, was das C++-Gremium
und die Leute, die diese Standards machen,
immer sich einschmeißen,
bevor die irgendwelche Standard-Meetings haben.
Die Sprache ist die letzten
Jahre über
nicht besser geworden. Die ist umfangreicher
und noch verwirrender geworden, bietet noch mehr Möglichkeiten.
Eine meiner Meinung nach
gutes Beispiel dafür, wie man
gute Standardarbeit
macht, ist JavaScript.
JavaScript hat immer noch sehr viel wirres Zeug,
aber hat sich die letzten Jahre über
kontinuierlich verbessert.
Ich muss mal die Musik ausmachen,
ist mir zu wenig gechillt.
Wupp, wupp, wupp. Jawoll.
Ja, sehr entspannt.
Wupp, wupp, wupp.
Wupp, wupp, wupp. Viel entspannter.
Und,
was wollte ich jetzt gerade sagen?
Ja, also JavaScript genau.
JavaScript ist ein gutes Beispiel für,
wie man die Sprache mit Standards besser machen kann.
JavaScript hat sich die letzten Jahre über
kontinuierlich verbessert.
Das, was eingebaut wurde, das war die letzten
Jahre über jetzt nicht mehr ganz so viel,
wie die Jahre davor, aber das, was
eingebaut wurde, macht zu 95%
komplett Sinn und waren
sehr gute Features.
Guck mal, die haben in JavaScript
async await eingebaut. Und?
Wie ist es? Es funktioniert einfach.
Es ist ziemlich gut. Sie haben versucht
async await in C++ einzubauen.
Keine Sau versteht, wie es funktioniert,
beziehungsweise keine Sau benutzt es,
obwohl das theoretisch geht.
Was aber auch daran liegt, dass die
Standard Library selbst komplett draufscheißt.
Also C++ ist ein
wirklich riesen Negativbeispiel
in ganz vielen Bereichen.
Ich will jetzt JavaScript sicherlich nicht als
das klühende Beispiel
der besten Programmiersprachen ever hinstellen,
aber die Entwicklung der
letzten Jahre in JavaScript haben
eindeutig gezeigt, die Sprache hat sich fast
durch die Bang-Fact nur
verbessert.
Und C++ wurde kontinuierlich
nicht schlechter gemacht, es ist gleich kacke geblieben,
aber noch komplexer.
Warum das?
Das dürfte zum größten Teil an Unreal liegen
und weil es eben einen historischen
ähm
wie nennt man das?
Einen historischen
Hang zu C++ in der
Spieleentwicklung gibt. Und dementsprechend
sau viel Erfahrung
vorhanden ist, was Spieleentwicklung
angeht. Sau viele Library
und man darf nicht vergessen
eine Sache, die C++
das liegt aber jetzt nicht so sehr an C++
dass es das jetzt
explizit macht, sondern kommt halt aus der Zeit
wo C++ stand, dass
C++ selbst halt auch
sehr viele
Möglichkeiten hat
sich selbst ins Bein zu schießen
und das ist wichtig für Spieleentwicklung.
Weil bei Spieleentwicklung kommt es
weniger drauf an, dass das
sagen wir mal 100%
NASA Raum, Weltraum
Flug stable ist,
sondern es muss einfach
egal mit wie viel ekligen Tricks
und Hacks, schnell sein.
Und das ist das
an C++
wahrscheinlich besser
als jede andere Sprache
eklig und schnell.
Das ist eine gute Beschreibung für C++
glaube ich. Ja, eklig
und schnell.
Also C++ ist quasi die Ausgeburt
der Hölle an Programmiersprache,
aber schnell. Ja und das ist
eines der Gründe. Aber eines der Hauptgründe
dürfte tatsächlich Unreal sein.
Bin ich mir ziemlich sicher.
Meinst du Javascript oder eher Java?
Wenn ich Javascript sage, meine ich Javascript.
Und wenn ich Java sage, meine ich Java.
Ich sage nicht Java für
Javascript und umgedreht.
So, ich muss mal mein WLAN Passwort rüber
kopieren. Zu Java könnte ich mich auch auslassen,
aber zu Java habe ich nicht so viel Plan.
Deswegen.
Ich lasse mich
nur zu Sprachen aus, die ich
semi oft selbst verwende.
Und das ist sowas wie
C Sharp, Go,
Javascript,
ab und zu mal ein bisschen Python, wobei ich da
wirklich weit davon entfernt bin, mich wirklich gut auszukennen.
Microcontroller, C++,
ab und zu ein bisschen Rust.
Aber mit Java habe ich nicht so viel am Hut.
So, ich muss mal kurz mein WLAN Passwort rüber kopieren.
Dazu muss ich
mein Clipboard ausschalten.
Clipboard ist ausgeschaltet.
So Chat.
Kann ich euch...
Warte mal.
Egal.
Ich wollte hier in gibt es nichts zu sehen einblenden oder so.
Ihr dürft jetzt...
Ihr müsst jetzt mal kurz weggucken.
Ich weiß, ich kann euch trauen Chat.
Kappa. Ihr würdet auch so nicht hingucken.
Richtig?
Okay. Nice.
So, WLAN Passwort ist
am Start.
So, dann schauen wir mal
ob die...
Also, jetzt kann ich meine
Clipboard History wieder einschalten.
Schauen wir mal,
ob die WLAN Verbindung jetzt funktioniert,
wenn ich das nochmal neu flashe.
Was hat der für Schmerzen?
Web Server 44, Missing Initialize...
Okay, whatever.
Die Warnings von GCC, da scheißen wir einfach mal drauf.
By the way, wusstet ihr, dass
C und C++ nicht wirklich kompatibel sind?
C unterstützt Sachen,
die C++ nicht kann.
Und C++ unterstützt obviously jede Menge Sachen,
die C nicht kann.
So, also, wir sind on Port.
On Port 443 sind wir am Start.
Mal gucken, ob die Webseite wieder funktioniert.
Mindshake, Error erstes Mal, ja klar.
Zack. Kackel. Da sind wir am Start.
Pog. Okay.
Kunst wieder.
Dann können wir uns jetzt ja mal um das Thema
Websockets kümmern.
Und da bin ich echt gespannt drauf,
wie gut oder schlecht sie das Ganze jetzt
umgesetzt haben.
Also, Websockets.
Websockets werden wir erstmal ganz ohne Browser,
der kann sich hier mal ein bisschen verstecken,
ganz ohne Browser testen.
Nämlich mit
WS,
nee, äh, ähm, ähm,
wie heißt das Ding?
Das habe ich sogar installiert.
So ein Websocket Curl.
Ich vergesse immer, wie das heißt.
Äh, Moment hier.
Websocket CLI GitHub.
Webs, Webs?
Nee.
WS Cat?
Das kann sein.
Ich nehme das erste, was im Standardrepo drin ist.
Gibt's denn da sonst noch, ähm,
Websocket?
Aha, hier, Command Line Interface.
Nice.
Yes.
Okay, also dann starten
wir mal hier, wobei, wir machen
das jetzt erstmal mit Curl.
Da blickt man da ein bisschen besser durch.
Also, W
Socket, wie führt
man das jetzt aus? So?
Einfach mit, alter.
Warum ist mein,
warum ist meine Tastatur so lahm?
Ähm, WSS, so?
Minus K.
Okay.
Bad Request, nice.
Okay.
Das ist schon mal gut.
Der versucht sich zumindest zu verbinden per Websocket.
Received Unexpected Status Code.
Bad Request.
Okay, wie benutzen wir Websockets?
Mit dem
ESP32
integrierten Webserver.
Also, integrierter Webserver ist vielleicht ein bisschen viel gesagt.
Ich habe ja hier selbst sowas gebaut.
Im Prinzip, äh,
liefert das Framework, also das
ESP-EDF-Framework, ähm,
so die Bausteine für
einen Webserver aus. Dass der im Endeffekt
dann aber auch das macht, was wir haben wollen, da müssen wir
uns selbst drum kümmern. Ja,
aktuell macht der ja noch nichts wirklich, außer
eine Index-HTML ausliefern.
So, jetzt müssen wir mal gucken, wie das geht mit
Websockets. Ich bin mir
relativ sicher, dass wir auf jeden Fall schon
mal einen eigenen Händler
brauchen. Nennen wir mal WS.
Machen wir mal alles
raus hier, dass es ein bisschen übersichtlich ist.
Aber wenn ich das richtig in Erinnerung habe, hat das Ding
jetzt hier sowas wie Websockets.
Kann man hier noch reinschreiben?
Method? Nicht Websockets?
Ah, ich glaube,
ich muss Websockets Support erstmal
aktivieren. Lass uns mal
das Beispiel angucken von den
China-Chinesen.
Wie das Funs Websockets Server C.
Ja, ist ja übersichtlich. Gut.
Bla bla. Start Web Server.
Stop Web Server. Handle.
Ja, ist Websocket
gleich true? Was willst du
mit Websockets machen? Ich möchte
den Sensorwert auslesen, den alle
Connected-In-Clients in Echtzeit
zurückpushen, ohne dass das Laufen pollen muss.
Und außerdem ist es
nice, wenn das Ding Websockets
kann. User
CTX, das können wir tatsächlich noch setzen.
Dann meckert er auch nicht mehr.
Hä?
Null.
Ich weiß, es ist in der falschen Reihenfolge.
Okay.
Warte mal.
Hier.
Jetzt.
Brauchen wir noch nicht.
Okay, Websockets gibt es nicht. Das liegt, glaube ich,
daran, weil ich Websockets
Support noch nicht aktiviert habe.
Websocket.
Websockets Support. Yes.
Muss man HTTPS
Websocket-Kram aktivieren oder geht
das auch so? Websocket.
MQTT Transport Websocket
WS Buffer Size Dynamic
Buffer. Okay, Dynamic
Buffer klingt erstmal cool, dass ich mich
nicht so sehr mit C-String-Längen
und so auseinandersetzen muss.
Dynamic Websocket.
Da muss man jetzt erstmal in der Hilfe
gucken, was sie damit meinen.
Was ist das? Hä?
Irgendwas
soll ich brauchen.
Dynamic
Websocket Transport Buffer.
Was soll das bedeuten?
If enabled, this option
Websocket Transporter will be freed
after connection succeeded
to save more heap
Okay,
scheiß drauf. Ganz ehrlich,
das Ding hat genug RAM.
Das hat mehr RAM
als, also deutlich mehr RAM als der alte
ESP32. Wir lassen es einfach mal.
Okay, und jetzt sollte ich, wenn ich Glück habe,
Build
sowas wie IsWebsocket da drinnen
haben. Und wir
gucken uns das Beispiel mal weiter an. Okay.
IsWebsocket muss auf True,
das machen wir gleich. Ah, Endpunkt
machen wir auch mal hier, Slash WS.
Händler,
das machen wir wieder mit einem Lambda.
Also hier mit so einer
Inline-Funktion.
Aber was
braucht denn der Händler für alle...
Ich muss übelst husten gerade, was denn los?
MonkaS.
Also, Echo Händler. Okay, ganz
normal wie das andere auch.
Alright.
Oin.
So, hat das Zeug jetzt kompiliert?
Jawohl. Jetzt habe ich jetzt ein IsWebsocket.
Is...
Händler.
Okay, das ist einfach wieder
pepega. IsWebsocket True.
True 0 W.
Ah, ich habe
ein Komma vergessen.
IsWebsocket True.
So, das heißt, wenn ich jetzt versuche
eine Websocket-Verbindung aufzubauen,
das testen wir jetzt mal. Logger.
Loginfo.
WS Keckel.
Sollte das dann ausgeben.
Ich glaube, das ist die
beste Error-Message, die man sich
denken kann. Weiß jeder sofort Bescheid.
Moin, da war Bro.
Oh,
mir juckt es echt im Hals, was denn jetzt gerade los.
Kennt ihr das? Ganz teilweise
weird, wenn ihr mal so richtig
husten müsst, dass ihr dann für so eine
10, 20 Sekunden so Sternchen
habt in den Augen.
Und dann ist es wieder weg.
So,
jetzt schauen wir mal, wer ist...
Aha, aha.
Es hat funktioniert.
200 OK und danach
kackt es halt ab mit Websockets.
Guck, man hat ja auch gesehen.
Performing Session Handshake.
Websocket. Read Error. Nice.
Okay, der Websocket Support
scheint drinnen zu sein.
Ich mache halt mit der Websocket-Verbindung noch nichts.
Ja,
das stimmt.
Aber
ich glaube nicht, dass das was Schlimmes ist. Das habe ich schon immer.
Wir machen...
Wir loggen hier an der Stelle nochmal.
Request to...
Leute, ich muss mal kurz meine Tastatur
rausziehen. Mein RGB geht nicht.
Und das ist ja undenkbar.
RGB
muss funktionieren.
Ohne RGB geht ja hier nichts.
Keine FPS.
Keine high FPS auf der
Tastatur. Request...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
Okay, httpget, da bin ich mir sicher, dass das ein httpget ist, weil ich habe nur einen httpget-Händler registriert.
Okay, jetzt braucht man...
Eine Güte, ey, warum muss ich denn gerade so übertrieben husten, Alter?
Alter, wisst ihr, was ich jetzt mache?
Oder vielleicht...
Alter, warum KS?
Wisst ihr, wisst ihr, was ich jetzt mache?
Ihr müsst mal kurz...
Das mache ich jetzt.
Genau das.
Alter, echt...
Das habe ich eigentlich nicht vor, jetzt im Stream zu machen, aber...
Bleibt mir jetzt nichts anderes übrig, meine Güte.
Ich mache jetzt kurz das Fenster auf.
Und dann gehe ich runter.
Und hole...
Inhalationsding und ein bisschen Salzlösung.
Mach das schnell, warte mal.
Ey, man, KW, Mann.
Weiß nicht, was das ist, aber...
Ey, übelst eine Hustenstelle ist hier.
Weiß nicht, ob die Polen wieder fliegen oder sowas.
Wobei, ich habe eigentlich weder Heuschnupfen noch sonst was, aber irgendwas muss das sein.
Keine Ahnung.
Ja.
Die Polen fliegen bestimmt.
Okay, Chat.
Ich muss jetzt mal eine Runde...
Kaupium inhalieren.
Pass mal auf, ja.
Aha.
Okay.
Ich kann viel besser.
Ich kann viel besser.
Ich kann viel besser.
Ich kann viel besser.
So, passen wir dazu.
So, eine Runde entspanntes Aquarium.
Ich schlage mal das Fenster auf, ja.
Okay, Leute.
Das dauert jetzt drei, vier Minuten, dann geht es weiter.
Das kann ich euch eh auch nur empfehlen, ohne nichts.
Wenn ihr öfters trockenen Hals habt, es gibt nichts Besseres ohne Nebenwirkung.
Okay.
Wenn ihr öfters trockenen Hals habt, es gibt nichts Besseres ohne Nebenwirkung.
Wenn ihr öfters trockenen Hals habt, es gibt nichts Besseres ohne Nebenwirkung.
Anstatt eine Runde Salzwasser inhalieren.
Also Salzlösung.
Ihr kommt euch vielleicht vor, wie ein Rheinblätter kurz vorm Abwachsen ist.
Aber was macht das?
Das hilft.
Da fehlt man nicht überhaupt.
Nicht gut, das dachte ich mir.
Okay.
Dann lasst uns aber das Websocket-Example angucken in der Zeit.
Ist da noch bessere Exzampel für...
SP?
Ja.
Star Wars Cosplay
Was ist jetzt los?
Was ist das hier jetzt los?
Ich hab den übelsten Wustenstelz gerade
Das war viel besser
Jetzt
Guck uns doch ein paar andere Beispiele an
Was anderes
Ist das halt mal leer hier?
Genug, genug
Kaupjungs
Die Audioqualität ist vollkommen okay
Aber ich kann grad nicht ins Headset reden
Ich kann grad nicht ins Headset reden
Weil ich Kaupjum inhalieren muss
Das ist gleich vorbei
Okay, das ist ein besseres Exempel
Keine Sorge
Ich bin nicht am Sterben
Das ist ein gutes Beispiel
Das ist ein gutes Beispiel
Exzellent
Sag mal, ist das bald mal alt?
Das sind nur 0, irgendwas Milliliter
Sind nur
5 Milliliter
Wie lang hält denn das dann?
Ich atme zu wenig
Das könnte ein Problem sein
Auf Dauer
Er hat es fertig
Okay
Überlebt
Besser
Okay
Alles gut
Okay
Okay, auch geht
Nochmal alles abgewendet hier
Alles wieder gut
Audioqualität auch in Ordnung
An das Trinken erinnern
Ja, ich hab ne halbe Tasse Tee gerade gesoffen
Doch, doch, ist alles in Ordnung
Weil ich
Weil ich so husten musste
Okay
Weiter geht's
Das ist ein viel besseres Beispiel hier
Wir sind im Prinzip gerade dort
What?
Was machen die hier denn für Zeug?
WS Frame?
Mems?
Okay, jetzt kommt Low Level C++ Shit
Was?
Was geht denn hier ab?
Was machen die hier?
Geht das nicht auch ein bisschen einfacher?
Was macht Memset?
Das, das initialisiert das gesamte Memory auf 0
Oder wie?
Quasi Size of
Von diesem Struct
Und dann alles auf 0 setzen
Oder?
Vermutlich
Ah, das muss der machen, weil's kein
Weil's, weil's ein Stack
Allocated Ding ist, oder?
Weil wenn ich was mache, dann muss ich es auf 0 setzen, oder?
Wenn ich was mit malloc, äh, anfordere
Das ist doch alles genullt, oder?
Deswegen wird das hier, okay
Ich hab so keine Ahnung, was das, was das hier treibt, aber
Wir, wir fügen das einfach mal ein, okay
Aber ich mag den ihre Schreibweise nicht
Das ist ein
Ein Packet, ja, oder ein
Eigentlich nennen wir das Frame
Warum soll ich es, warum soll ich es Websocket Packet nennen, wenn das ein Frame ist?
Das ist doch hängengeblieben
Websocket Frame
Wir müssen jetzt ja nicht alles von irgendwelchen
C-Entwicklern abgucken
Die alles abkürzen, oder?
Das Ding heißt schlicht und ergreifend auch einfach Buffer
Okay
Jetzt wird der Speicher
Auf 0 gesetzt
Geht das nicht, geht das nicht in C++ so?
Blöde Frage
Kann ich in C++ nicht so machen, da wird auch alles genullt?
Hi, HiIQ C++
Kenner
Chatgis
C++ 0 Struct
Nein, nein, äh, äh
C++ Initialize
Struct 0
Auch so Initialize Struct in C++
Ja
Genau, sowas in der Richtung
Äh
Alter, warum braucht man
Für so eine simple Frage
Ein halbes Buch wieder
Okay, das geht auch
Okay, dann habe ich es doch richtig gemacht
Achtung, man kann auch so machen
Warum gibt es für den gleichen
Chip die gleiche Syntax, was soll das?
Ne, das muss ich nicht machen
Aber ich bin mir schon auf low level
Ziemlich sicher, das wird schon funktionieren
Schauen wir mal
Memset, schmeißen wir schon mal raus
Ok, wofür brauche ich den Buffer?
Den Buffer brauche ich bis jetzt noch nicht
Wofür braucht der hier den Buffer?
Ach hier unten dann
Für gedöns
Ok, schauen wir mal
http vs receive frame
Und
Hm
Dann gehen wir die Länge aus
frame blog info wie es frame länge ist web socket längst schauen wir mal ob das frunzt jetzt bin
ich mal gespannt jetzt würde ich erwarten dass als nächstes schon einmal hier eine andere error
fehlermeldung kommt lasst uns mal während das pusht auf den schau mal weiter gucken so was
kommt jetzt also sprich wenn es irgendwas enthält sagen wir mal ja dann alokierte der irgendwie
bot dann alokierte der an dieser speicher position einen buffer in dieser größe und
zwar in der größe wie es package punkt längst plus 1 plus 1 wahrscheinlich für
zero string termination vermutlich und dann was ist heute das ziel websocket verbindung auf
dem sp 32 zu machen und wir haben ganz viele ziele weil ich habe den ganzen tag nichts anderes vor
ich kann bis ich heute pen je prog erstellt machen okay die ganze ganz so lange ohne pause
vielleicht nicht aber so und dann sagte acht
und jetzt jetzt verstehe ich dass das hier ruft die länge ab von dem frame und das hier ruft den
frame inhalt ab aha das ist aber auch schon ein bisschen durch die brust ins auge aber gut ich
meine so macht man die sachen halt in szene so schauen wir mal ob das jetzt besser funzt
handshake beim ried error das ist jetzt gut oder schlecht ich weiß ich mache einfach mal weiter
also ich habe ja noch nichts zurückgeschickt vielleicht deswegen okay also gucken wir jetzt
wie wir bauen das einfach mal nach wir gucken jetzt websocket frame länge größer null ich finde
die schreibweise einfach schöner größer null ich weiß die c leute sagen was so schutze auch aber ich
finde größer nur trotzdem schöner
aber wie ich kopfste mir das mal an der stelle ok websocket frame länge plus eins
sehr schön was ist er nur mit karsten los okay wir das jetzt setzen wir das und das ist ja super
fertig schaue mal ob wir das später vielleicht ein bisschen vereinfachen können und jetzt ist das super
fertig ich schaue mal ob wir das später vielleicht ein bisschen vereinfachen können und jetzt ist das
gut sehr schön wenn ihr hier in der karte das hier was auf den linken schreibt und jetzt in die nachricht
und ich kämpfe hier auf den linken schreibt ein bisschen besser mal ein bisschen einfacher ist das jetzt
Und jetzt lese ich die Daten ein.
Das ist mir schon ein bisschen durch die Brust ins Auge.
Red gibt es nicht.
Macht nichts.
Return-Wert juckt mich jetzt an der Stelle auch nicht.
Wird schon alles funktionieren.
Error-Handling ist für Noobs.
Got Package with Message.
Okay.
Ah, da ist ein Zero-Terminated-String drin.
Also heißt im Endeffekt, dass ich jetzt sagen kann, Logger, Log.
Und jetzt einfach den Buffer, oder?
Ah, das mag der so nicht.
Und jetzt einfach den Buffer loggen.
Und was passiert jetzt?
Äh, warum soll ich das machen?
NVS-Flash-Init werden wir später verwenden.
Du meinst einfach, weil Sektor 69 ist.
Ah, Moment.
Ich muss damit auch noch eine Message schicken.
Repso-Card-Send-String.
Wie sieht das aus?
Wie sende ich denn hier eine Message?
And send request in command line.
Aha.
Da muss man rein-echoen.
Gachi-Buzz.
Okay, Read-Error.
Das ist okay.
Noch rede ich es ja auch nicht.
So, vielleicht sollten wir trotzdem an der Stelle noch mal schauen.
Äh, wo ist denn hier mein Beispiel?
Ja.
Vielleicht sollten wir an der Stelle doch noch mal schauen, ob das geklappt hat.
Machen wir mal hier.
Wenn das hier gleich-ungleich-ESP okay ist, dann Log-Error.
Bäm.
Eigentlich egal.
Ich werde das später eh nicht so lassen.
Und jetzt wird die Message geloggt.
Und dann vergleicht er.
Okay, dann vergleicht er, ob der Payload, was da drin ist.
Wir wollen es ja eigentlich aktuell nur einlesen.
Ja, das reicht.
Reicht er schon mal.
Zack.
Bin ich...
Äh, what?
Ah.
Mag der das nicht?
Will er das als Char haben, oder?
Okay.
Warum auch immer.
Das nicht geht.
Sollte ich mal einbauen, dass das funktioniert.
Gehen wir mal hier in meine Helper-Class.
Sagen wir mal dem String-Formatter,
dass der auch ohne Probleme
Uint8T-Dinger
formatieren darf.
Nämlich, indem er das einfach als Char interpretiert.
Gut ist.
Ich hoffe, das funzt jetzt, weil ich da gebaut habe.
Erstmal gucken, ob ich jetzt das wegmachen kann.
Ups.
Äh, ob ich das...
Ne, hier.
Ob ich jetzt den Cast wegmachen kann.
Schauen wir mal.
Nein.
Äh.
Okay.
Whatever.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
TIMON!
Oh.
Oh.
Oh.
Okay, wohl so.
Oh.
Oh.
Ah.
Oh.
Oh.
Uh oh.
Uh oh.
Uh oh.
Oh.
Uh oh.
Oh.
Oh.
Und ich bin in...
Oh.
Oh.
Und jetzt bin ich mal gespannt.
Also, es sollte jetzt eigentlich...
Do you chat?
In dem Websocket ausgelesen werden oben.
Äh, nein?
Wird es nicht.
Chat wieder richtig 3-Hand, nicht am aufpassen
Slash WS muss ich aufrufen
Zack
Nothing matched to Uri, was?
Ach, ich kack Noob
Ich hab den Händler gar nicht registriert
Ich teste die ganze Zeit
Was, was, was überhaupt nicht aufgerufen wird
Oh
Das wurde die ganze Zeit nicht aufgerufen
Deswegen war auch die Antwort so
Weird Champ
So, jetzt
Jetzt können wir das nochmal ausprobieren
Wenn jetzt alles funktioniert
Sollte da oben eigentlich Q-Chat erscheinen
Was?
Äh
Muss ich das vielleicht als erstes registrieren
Weil das hier ein Wildcard Händler ist
Jetzt wird's
Jetzt wird's etwas advanced
Oder ich geh das von oben nach unten
Weil das ist Slash WS
Und das ist Slash Sternchen
Na?
Äh, Failed?
Das ist doch schonmal besser
Failed to receive Payload
Hier, WS Framelength 77
Und
Failed to receive Payload
HTTPD
Okay, der macht auf jeden Fall was
Es funktioniert noch nicht richtig
Aber der macht was
Es ist schonmal
Es ist auf jeden Fall schonmal richtig
Ja, es ist auf jeden Fall schonmal richtig
Ähm, ich bin mir jetzt allerdings nicht ganz sicher
Was ich da verkackt habe
Waren wir mal kurz hier das weg
Hä, okay, warum?
Warum geht das jetzt nicht?
Muss da, muss da irgendwie noch was hinterher
WS Receive Frame
Ja, das hat nicht funktioniert
Aber warum nicht?
Da sagt doch eindeutig Länge
Ist okay
Da hat er gesagt, Länge ist 7
Ist denn die Länge 7?
Ähm, ne
Die Länge ist mindestens 8
Eigentlich müsste die Länge 9 sein
Wegen
Zero Termination
Wieso?
Schauen wir mal, was der jetzt sagt
Okay
Nochmal
Endshake
Was?
WS Frame is not properly masked
WS Frame Length 72
WS Frame Länge
Äh
Äh
Äh
Funktioniert das doch nicht, was ich mir hier oben so gedacht habe?
Was ich hier geskippt habe mit dem Memset
Wo sich das doch macht?
Äh
Das ist ja das einzige, was ich geskippt habe
Okay
Lock Warning
Dann fällt es mir besser auf
Und wir machen mal hier
Die Anzeige
In Main
Bisschen
Langsamer
Was könnte das jetzt sein?
Was habe ich jetzt verkehrt gemacht?
WS Frame Length 1
Die Frame Length ist doch garantiert nicht 1
Wenn ich jetzt hier nur CU reinschreibe
Ist die weiterhin 1
Jetzt ist es verkehrt gemacht
Jetzt hat es funktioniert
What the fuck?
Ich mache irgendwas falsch, Leute
Ähm
Und warum wird das doppelt aufgerufen?
Äh
Moment
Ach so
Ich glaube, der ruft das zweimal auf
Okay
Ach so, das habe ich
Siehst du mal
Das ist anscheinend wichtig für die Funktion
Das erste
Ah ja
Endshake was done
Connection was offed
Okay, okay
Nee, nee, nee, nee
Ich glaube, das liegt daran
Dass der ein Upgrade machen muss
So ein Websocket-Verbindung ist ja immer
Ist ja ein HTTP-Get mit einem Upgrade
Und ich vermute mal
Dass das so geht
Das Method zum ersten Mal HTTP-Get ist
Dann wird die Connection geupgradet
Und dann wird es nochmal aufgerufen
Das heißt
Ich muss beim ersten Mal nur checken
Ob es ein Get ist
Dann muss ich rausgehen
Und wenn dann hier nicht mehr Get drin steht
Sondern
Dann muss ich rausgehen
Ich hoffe mal
Dass da ein Websocket oder sowas noch gibt
Whatever
Dann
Aber da müsste es irgendwas in der Richtung geben
Upgrade wahrscheinlich
Wir geben einfach mal
Wir geben einfach mal
Logger
Login
Wir geben einfach mal aus
Was da drin steht
Method
Request
Method
,
Ja das ist jetzt ja leider
C++ und C-Sucker-Zeug
Da kommt jetzt hier ein Int raus
Und keine schöne Ina-Benahmung
Ja genau
Ich denke auch
Dass das ein Get ist
Und der nächste Request ist dann das Upgrade
Das heißt
Das war hier nicht einfach nur zur Safety
Dass es eben nur Gets durchgeht
Sondern es ist tatsächlich wichtig für die Funktion
Okay schauen wir mal
Okay schauen wir mal
Okay schauen wir mal
Okay schauen wir mal
Okay schauen wir mal
Okay schauen wir mal
Okay schauen wir mal
Okay schauen wir mal
Okay schauen wir mal
Okay schauen wir mal
Gut Chat
Gut Chat
Gut Chat
Gut Chat
Gut Chat
Gut Chat
In C++ was ist der Unterschied zwischen Punkt und Pfeil?
Das ist Pointer-De-Referenzierung
Und das hier ist
Funktionsaufruf oder Methodenaufruf
Ohne Pointer-Referenzierung
De-Referenzierung vorher
Also
Zeig dir das
Wenn du eine Variable anlegst
Okay ich weiß wie wir das machen
Wenn du eine Variable anlegst
String
String
Hecke W
gleich null dann rufst du das so auf mit einem punkt warum weil das eine ganz normale variable
ist hier im kontext von deiner funktion quasi stack allocated nennt man das dann wird auch am
ende der funktion automatisch wieder aufgeräumt wieder aufgeräumt punkt so wenn du jetzt
allerdings sagt okay ich möchte nicht dass das ganze stack allocated ist sondern ich will dass
das weiterlebt auch nach der funktion dann sagst du in c++ so was wie new string aber so geht das
jetzt oder anscheinend geht das nicht ach so ja sternchen muss ich dann hin machen sternchen und
jetzt hast du ein heap allocated string das wird nicht mehr automatisch aufgeräumt am ende der
funktion das kannst du jetzt quasi irgendwo anders aufrufen und es bleibt bis du es explizit löscht
da
das ist jetzt allerdings ein pointer aufnen string und kein direkt direkt
aufrufbareバ터s wii muss zu sagen jetzt keck we pointer der fö Pv 했z hierou jetzt
kannst du darauf zugreifen also im prinzip was hier passiert ist als erstes wird als erstes
wird keck dereferenziert und dann wird darauf zugegriffen also im prinzip ist der pfeil ja im mann setzt die Tastatur fest
im prinzip ist der pfeil
was dann Gao
im prinzip ist der Pfeil
ähm
ja im prinzip ist der pfeili
ähm
ja im prinzip ist der pfeil
ähm
im berecher ist etwas möglicher als zuds greensHealth im prinzip ist der Pfeil
ist der Pfeil ein Ersatz
dafür. Chat, wenn ich
Mist erzähle, müsst ihr mir sagen, weil ich bin nicht der
große C++-Checker, was solche Details
angeht. Also der
Pfeil ist im Prinzip das gleiche
wie das hier. Pointer-Dereferenzierung
und dann drauf zugreifen
und nachdem das halt so eklig zu
schreiben ist, gibt es dafür einen Pfeil.
Das macht aber im Prinzip das gleiche.
Erst den Pointer dereferenzieren
zu einem String und dann auf den String zugreifen.
Ich verstehe nichts.
Wenn du was Konkretes wissen
willst, frag.
Wahrscheinlich ist es für dich aber gerade so ein bisschen
wie in der Schule im Unterricht, wo
dich der Lehrer fragt zu und
was hast du nicht verstanden?
Und dann kommt als Antwort, ja alles.
Da kann ich dir
doch nicht helfen. Aber wenn du was wissen willst, frag.
Dafür ist das Stream da.
So.
Jetzt wollen wir gucken, ob es jetzt funktioniert
hier. Aha.
Handshake
done. Method 1, Method 0.
Okay.
Was ich jetzt nicht so ganz checke
ist,
warum wird das überhaupt mehrfach
aufgerufen jetzt? Guck mal.
Das wird dreimal aufgerufen.
Frame 9?
So ganz checken tue ich das noch nicht,
was da passiert, ja?
So.
Was ist denn hier jetzt
0? What?
Delete?
Ne, ich glaube, das ist einfach nur
einfach nur Mist.
Okay, das
gibt ja so schon mal irgendwie halbwegs Sinn.
Was ich jetzt nicht verstehe, ist.
Also das passt ja soweit.
Das passt ja soweit schon mal.
Okay, alles, alles gut.
Jetzt. Ich mache ja noch gar nichts weiter.
Ich hole mir einfach nur die Länge raus.
So die Länge erkennt er die Länge.
Die Länge ist 9.
9 ist korrekt.
Länge 9 ist richtig.
Warum auch immer was von 61
da jetzt noch zwischendurch kommt, das checke
ich nicht so ganz.
Genau, wenn ich ehrlich bin.
Ach guck mal, wenn.
Das ist ja interessant.
Wenn method 0 ist,
dann wird auch gar keine URL mehr gesetzt.
Also das ist wirklich so, wie als wäre es nicht
mehr http jetzt da drüber.
Das heißt, man kann man das eigentlich mal komplett
knicken.
Das okay, das wird noch spannend, bis das
funktioniert.
Aber das hier funzt schon mal hier.
Guck mal.
Das ist auch keine http mehr.
Ja, man sieht es ja auch hier.
Guck.
Der Request ist leer.
Im Endeffekt, das hier stimmt Frame längst 9.
Ich gehe mal davon aus, dass dieser Mist hier nur
passiert, weil ich am Anfang nicht richtig, weil ich hier
auf den ersten Request nicht richtig reagiere, gehe ich
einfach mal von aus.
Deswegen machen wir mal machen wir mal weiter.
Ich glaube, soweit ist es bis jetzt okay.
Also dann, dann verschieben wir also die die die Request
Uri, die brauche ich ja nicht.
Die juckt mich eigentlich hier drinnen überhaupt nicht.
Ich weiß, ich komme auf Slash wie es raus und gut ist.
Methods kann man vielleicht noch mal ausgeben.
Okay, so Websocket Frame Länge ist 9.
Das ist richtig.
Also können wir diesen anderen Krempel mal einkommentieren.
Websocket Frame Länge größer 9.
Okay, das sollte doch jetzt einfach funktionieren.
Und wieso immer wissen wir ja, wir praktizieren hier ja
Errorless Programming.
Dementsprechend funktioniert ja immer alles zuerst.
Deswegen, deswegen brauchen wir auch keine Tests, keine
Dokumentation und keine Kommentare, weil wo niemals jemand
Fehler beheben muss, brauchst du auch nichts dokumentieren.
Easy eigentlich.
Das sollten wir mal irgendwie unter die Leute bringen als
neue Development Strategie und reich werden.
Einfach keine Fehler machen.
Easy.
Jutschat, es hat funktioniert.
Guck mal, er hat es ausgelesen.
Wir haben alles richtig gemacht.
Die FDP, FDP Flawless Driven Programming.
Der Markt regelt das.
Nice, das funktioniert.
Ich bin begeistert.
So, und jetzt und jetzt gucken wir mal, ob meine ursprüngliche Sache,
die ich eigentlich vorhatte, nämlich das Memset wegzulassen.
Ob das besser funzt jetzt so gut, dann lasst uns schon mal gucken,
wie es weitergeht.
Das haben wir alles durch Gott Package with Message.
Da da da da so jetzt guckt er.
Ob.
Der Typ hatte TPD WS Dings Textes haben wir doch hier oben schon mal gekocht.
Nee, da haben wir die nur gesetzt.
Okay, aber wir setzen den doch selbst.
Der muss immer Text sein, oder gucken wir mal mit im offiziellen Beispiel.
Nee, die setzen das auch so.
Vielleicht wird es hier beim Read überschrieben.
Ja, schauen wir mal.
Okay, also mal gucken, ob das noch funktioniert.
Aufräumen.
Keck Wait, Alter, aber brauchen wir sowas?
Ja, eigentlich.
Also ich muss auf jeden Fall den.
Den Buffer aufräumen.
Wobei jetzt mal eine blöde Frage.
Ne, brauche ich das überhaupt?
Kann ich nicht einfach sagen, ich weiß nicht, wir sind ja jetzt hier plus plus.
Kann ich nicht einfach sagen New?
Uint?
Äh, sowas?
Geht sowas?
Ja, oder?
Das ist doch viel schöner.
Macht das das gleiche?
Was ist denn da?
Also die C++ Leute, ne?
Die sagen ja immer, dass das Memset will ich nicht.
Das wollte ich nur für hier oben und da mache ich das.
Ach so, du meinst, dass es genullt ist?
Stimmt, ist das nicht genullt?
Wenn ich es in New int?
Also die sagen ja immer.
Die ganzen C++ Checker-Mens, die sagen ja immer, man soll New und so eigentlich nicht verwenden.
Können wir nicht, weil C++ irgendwie sowas, irgendwie, keine Ahnung, irgendwas anderes für verwenden.
Gibt es da nicht irgendwas, irgendwas C++ mäßiges dafür?
Also quasi, ja, weiß ich nicht.
Ja doch, oder?
Wir können doch sagen, hier wir wollen Standard Array.
Array.
Waffe.
Haben.
So.
Geht so nicht, okay.
Äh, ne.
Äh, wie benutzt man das?
Ja, wir haben ja die ganz normale C++ Standard Array.
Ach so, da muss man die Größe angeben.
Das geht nicht.
Ne, das funktioniert nicht.
Das, das klappt so nicht.
Ne, das, das funktioniert nicht.
Brauchen wir dann Vektor oder was brauchen wir da?
Vektor nicht.
Ich versuche es mal C++ig zu machen.
Ja, Vektor auf Typ Uint.
Okay.
So.
Ne.
Okay, jetzt bin ich, jetzt bin ich überfragt, wie man, wie man sowas C++-Style-mäßig gescheit macht.
Okay.
So.
Ne.
Okay.
Jetzt kann ich wahrscheinlich sagen Size oder sowas hier, ne.
C++ wäre Initialisierung nur mit.
Ja, wie jetzt?
Wie, wie würde ich das machen?
Kann ich jetzt sagen Size?
Ne.
Set?
Äh, Resize?
Resize.
Resize?
Und jetzt brauchen wir allerdings hier einen Uint-Pointer.
Ja, und äh, Two-Pointer, gibt es sowas?
Äh.
Ja.
Ja.
Ja.
Da ist Zeta.
Ja.
Auf ich das jetzt so schöner finde ...
Ich, wir haben C++23 haben wir.
Also ob ich das jetzt so schöner finde, bin ich mir unschlüssig, ehrlich gesagt.
Ich glaube, ich find das nicht schöner.
Aber ich bin ja auch hier ein bisschen um C++-Kram zu lernen immer mal wieder.
Ne, kann ich nicht, weil ich die Size hier oben noch nicht weiß.
Wobei.
Na klar.
Weiß ich die Size.
Moment.
Ich bin doch blöd.
Ich weiß die Size doch von vorher.
Stimmt.
говорить.
Ich weiß die Size doch.
Ich weiß doch die Size hier.
Da können wir auch mal ein Array...
Wo kann man...
Ah, man kann...
Was, glaube ich, nicht geht, ist, dass ich jetzt sage...
Hier, oder?
Nee, das funktioniert nicht an der Stelle.
Aber ich kann einen Vektor nehmen mit...
Und...
Ist das hier die Größe?
Kann man hier jetzt einfach die Größe angeben?
Okay, nice.
Jetzt kann man uns das nämlich hier plus 1.
Jetzt kann man uns nämlich das Resizen sparen.
Nee, können wir uns nicht, weil wir erst hier unten checken, ob es Größe 1 ist.
Okay, das war schon besser, so wie ich es gemacht habe.
Ich glaube, ich mache das doch mit C-Arrays.
Aber das müsste ja so jetzt auch funktionieren.
Mein schön, ist es nett.
Ich will einfach nur mal testen, ob es funktioniert.
Was hat jemand hier noch geschrieben?
Man kann es mit was?
Mit Unique Point...
Mit what?
Unique Pointer U8.
Jetzt wird es aber...
Wir können es doch einfach mit C-Style-Arrays machen, weil...
So, schauen wir mal, ob das jetzt funzt.
Q-Chat, ja, hat funktioniert.
Sogar das New Line ist drin.
Also schöner finde ich es jetzt ehrlich gesagt auch nicht, wenn ich ehrlich bin.
Aha, okay.
Guck mal, ich brauche mal das, was der Gyrosgeier sagt.
Ja.
Aber die Size habe ich ja noch nicht.
Das ist ja echt abartig, Alter.
Ich habe jetzt ja die Size nicht.
Warum ist das überhaupt ein Ding?
Warum geht das hier?
Was ist das jetzt?
Buffer überhaupt für einen...
Wisst ihr was?
Scheiß drauf.
Scheiß drauf.
Wir machen das mit C-Style-Array.
Das andere ist ja wirklich mal voll für den Arsch.
Oder?
Wobei, komm Leute, das mit dem Vector ist doch gar nicht so eklig gewesen, oder?
Ist denn jetzt?
Nein, wobei, da muss ich mich um 0 Termination und so...
Sachen nicht kümmern.
Ich glaube, das ist okay.
Ich glaube, das ist gut so.
Ja.
Ich glaube, das können wir so lassen.
Benutzt du was?
Rule of...
Was soll das sein?
Okay, also das ist in Ordnung so.
Okay, das können wir so lassen.
Ich will jetzt erst mal, dass es funktioniert.
Schön machen können wir das dann immer noch.
Also...
Und jetzt müssen wir sagen Return, weil...
ESP, keine Ahnung, ESP Fail oder so.
Mit was?
Mit was returnt denn der hier?
Ach so, der returnt natürlich mit dem Error, der da oben...
So, und jetzt müssen wir Free?
Nee, haha.
Jetzt muss ich nix freeen, oder?
Das wird doch automatisch gefreed, sobald es out of scope geht.
Dann ist das schon mal besser.
Als das selbst allocated Array.
Da muss man sich nicht mehr drum kümmern.
Also, sobald ich hier returne, freed sich der Buffer automatisch.
Hoffe ich mal.
Hoffe ich mal.
Hoffe ich mal, dass der das macht.
So, Receive Length.
Okay.
So, das Funst.
Okay, wie geht's weiter?
Also, das müsst ihr jetzt alles so tun.
Doch auf den ESP Dingern.
Die haben relativ viel modernes Zeug.
Die haben sogar zum coolsten Teil schon...
Kann ich dir zeigen?
Die unterstützen sogar C++23.
Aber nicht alles, nicht alles.
Also Format ist beispielsweise nicht da.
Die haben auch ein paar andere, bisschen obskurere...
Ja stimmt, die brauchen also für super ultra low power, brauchen die ein bisschen zu viel Strom.
Wobei man, wenn man die mit Deep Sleep...
Ah, du hast schon recht.
Aber was geht ist, wenn man jetzt nix braucht, was permanent läuft, sondern nur alle vier Stunden mal aufwacht und einen Sensor ausliest und dann wieder schickt.
Dann funktioniert das mit Deep Sleep, wenn man einen Controller hat, ohne LEDs und ohne Spannungswerte.
Die versorgt werden sowas ziemlich gut.
Da kannst du das zwei, drei Jahre laufen lassen mit so einer normalen 800 Mikroampere Stunden Akku.
Ja, Rauchmelder ist wieder was anderes.
Rauchmelder muss ja viel aktiver sein.
Das alle vier Stunden Rauch melden und dann wieder Deep Sleep ist nicht so gut für einen Rauchmelder.
Monka Smoke.
Hatten wir nicht sogar mal einen Emote dafür?
Mikroampere.
Nicht Milliampere, Mikroampere.
Achso, Moment, sorry.
Der Akku hat Milliampere Stunden, der Verbrauch im Deep Sleep sind Mikroampere.
Ja, kommt mal durcheinander.
So, was macht der denn jetzt hier?
Hier liest er den Text aus und jetzt antwortet er drauf.
So, jetzt, da wird es jetzt nochmal interessant.
Träger Async Send.
Äh, what?
Das muss ich mir mal rauskopieren.
So, also Buffer.
So, das hier unten können wir auslesen.
Wir kommen ja nur hier hin, wenn das Auslesen funktioniert hat.
Glaube ich, wenn wir das richtig gemacht haben.
Ja, genau.
Wir kommen hier nur hin, wenn das hier funktioniert hat.
So, jetzt machen wir das hier.
Also, was ist hier am passieren?
Async Respark.
Moment, nee, das hat der Typ angelegt.
Das, dann müssen wir uns mal das offiz...
Das offiz...
Moment, das legen die hier auch an.
Das hat er einfach aus dem Beispiel kopiert.
Dann gucken wir uns mal das offizielle Beispiel an hier.
Träger Async Send.
So, was, was macht der hier jetzt?
HTTP Request to Socket.
Okay, ich vermute, was hier passiert ist.
Der Request-Händler wird aufgelöst zu einem TCP-Socket-Endpunkt.
Den man dann sich speichern kann und da drauf eine Antwort schickt.
Irgendwas in der Richtung.
Und dann HTTPT-Queue-Work.
Gut, man möchte ja nicht synchron antworten, dass es hängt.
Sondern man legt das jetzt in irgendeine Queue, die dann abgearbeitet wird.
Okay, leuchtet auch ein.
Okay, also wie funktioniert das jetzt?
Also, was muss man hier übergeben?
Man übergibt hier einen Handle.
Das Handle ist...
Handle?
Request-Händle?
Okay.
Dann übergibt man eine Methode.
Die aufgerufen werden soll.
Und jetzt übergibt man...
Ah, jetzt übergibt man irgendwas.
Irgendeinen Kontext.
Okay, macht Sinn.
Jetzt weiß ich auch, warum die das in den Struck packen.
Jetzt verstehe ich das auch.
Okay.
Weil ich könnte wetten, hier in dem, was dann aufgerufen wird.
Ja, Queue, wo ist das denn?
Hier, Send.
Hier wird das wieder ausgewählt.
Und zwar, genau, holen sie sich jetzt das Handle raus.
Oh, ey, okay, das hier ist die Antwort.
Die Websocket-Antwort, die geschickt wird.
Ne, jetzt weiß ich, was der macht.
Der schickt die Antwort an alle connecteten Websocket-Clients.
Oh, da können wir ja auch gleich sehen, ob Websockets, so Broadcast-Messages funktionieren.
Der schickt die an alle connecteten Websocket-Clients.
Ach so.
Oh.
Jetzt verstehe ich auch, warum der sich den Kram merken muss.
Wofür braucht er dann dieses Ding jetzt nochmal hier?
FD.
Äh, gar nicht?
Er braucht es gar nicht?
Ja, dann können wir uns das auch schenken, oder?
Lul weh.
Der braucht im Prinzip nur das Client-Handle.
Braucht er das überhaupt?
Ja.
Das braucht er, damit er überhaupt eine Antwort schenken kann.
Was muss da rein?
Vielleicht brauche ich das nämlich auch gar nicht.
Warte mal.
Was muss da rein?
HTTPD-Handle.
HTTPD-Handle.
Also das da im Prinzip, was da drinne steht.
Und das ist nicht das...
Doch, das ist der Websocket.
Ja, den habe ich doch hier in meiner Klasse drinstehen.
Dann ist doch easy.
Dann muss ich dieses ganze Geschiss hier doch gar nicht machen, was der macht.
Dann ist doch eigentlich ganz einfach.
So, dann...
So, das ist erstmal 0, bis auf weiteres.
Und das hier gibt...
So, was braucht man da als Argumente für?
Void, ja, irgendetwas.
Okay.
Void, Sternchen, Kontext.
So.
Und das war es dann im Prinzip.
So, und jetzt müssen wir uns überlegen, wie kann man...
Also das können wir alles ignorieren hier.
Ja.
Bla, blub, für LED-Handling.
Das wollen wir nicht haben.
Buffer, LED-State.
Du musst 0 Pointer benutzen.
Warum?
Ist doch genau das Gleiche.
Ist das Best Practice?
Ich...
Ich calle...
Das ist Kekalu Best Practice.
Moment, wo hat der jetzt Server her?
Ach, hier oben hat der Server her.
Okay.
Ja gut, das haben wir ja hier auch.
Also.
Dann machen wir das doch mal.
Holen wir uns mal den...
Holen wir uns jetzt mal Client List.
Client List?
Und dann sendet er die Messages.
Das ist jetzt das im Prinzip, was wir machen wollen.
Der sollte mir jetzt irgendwas antworten.
Äh.
Äh.
Kann das sein, dass meine IDE leicht überfordert ist mit...
Autoformat?
So ein bisschen?
Oder habe ich einen Sonntagsfehler drin?
Ich glaube, ich habe einen Sonntagsfehler drin, oder?
Ich glaube, ich habe einen Sonntagsfehler drin.
Lass mal kurz gucken.
Also das brauchen wir auf jeden Fall.
Ey, ey, ey!
What the fuck?
Da ist ja kein Sonntagsfehler drin.
Hä, jetzt kannst du das auf einmal?
Alter, Whistle Studio.
Please.
Was machst du denn da?
No!
Was wird hier formatiert, man?
Was ist das für eine ultra hässliche Formatierung, man?
Packt das Lambda mal in eine extra Zeile.
So meinst du?
Juckt das nicht.
Juckt das nicht.
Vielleicht so?
Das nicht.
Das ist unfähig, das Ding, ey.
Kann ich so machen?
Ne.
Das ist das Format.
Das Format hier ist immer wieder gleich.
Du meinst es nicht inline schreiben, sondern hier.
Ja, ist der Übersichtshalber wahrscheinlich die bessere Variante.
Machen wir es mal so.
Ja, hast du recht.
Moment.
Dann muss ich jetzt aber auch wieder hier.
Kannst du es jetzt besser?
Ja, okay.
Das sieht schon besser aus.
Aber kann man das vielleicht auf einer Zeile machen?
Will ich das returnen an der Stelle?
Moment, hier, ja.
Ja, das ist okay.
Okay, Server.
Also.
Jetzt wird es eklig, weil ja immer noch C++ und C Interop teilweise richtiger Paintschamp ist.
Also, wenn ich jetzt will, dass ich...
Ich muss das jetzt static machen, dann funktioniert es vielleicht besser.
Also.
Den Server...
Was muss ich denn hier rein...
Den HTTPD...
So, bei mir heißt das Underscore, glaube ich, Server.
Ne.
Ne.
Es ist einfach nur Server.
So, und das funktioniert jetzt nicht, weil der mir jetzt gleich sagen wird, dass ich das nicht capturen kann.
So, und wenn ich das capturen will, dann muss man hier so ein Und davor machen.
Das ist richtig abartig.
Und dann funzt es aber nicht.
Äh, was?
Okay, whatever.
Das...
Und dann funktioniert hier unten der Händler wieder nicht.
Das heißt, wir müssen das im Prinzip static machen.
Das geht gar nicht anders.
Kann ich...
Kann ich sagen static?
Funzt das an der Stelle dann?
Also, das heißt, wir müssen das hier...
Müssen wir zu einer static Function machen.
Oder?
Müssen wir das?
Ne.
Müssen wir nicht.
Wartet mal.
Wir probieren das jetzt mal auf zwei Arten.
Ich habe eine Idee.
So, also.
Wir können nämlich als User-Kontext auch this übergeben.
Lass mal was ausprobieren.
Also.
Wir machen jetzt hier, äh, private, static, void, oh, äh, oh, WS-Händler, so, da kommt
der Kram hier rein, äh, alter, wie lahm die Auto, die Auto-Formatierung ist, so, ich will
hier übergeben, httpd-Server, so, und der Rest, den Rest kann man ja hier selbst anlegen.
So, mal gucken, ob das jetzt theoretisch überhaupt kompilieren würde.
Max-Clients ist, okay, das da, kopieren wir uns mal aus.
Okay, ob das jetzt, schauen wir mal, ob das überhaupt bilden würde.
Ich habe da so meine Zweifel.
Ne, weil, achso, WS-Händler.
WS-Händler?
Äh, nö, es geht.
Es funzt.
So muss man das wahrscheinlich angeben, das Auto-Complete-Funst.
Okay, so.
Jetzt, okay, jetzt bin ich mal gespannt, ob das, ob das klappt.
Also, das hier kann...
Definition.
Ich weiß nicht, was er für Schmerzen hat.
So, und jetzt müssen wir uns noch gucken, wie das hier, hier wird zurück, hier wird
was zurückgeschickt.
Und wenn das jetzt funktioniert, HD, was war HD nochmal?
HTTPD-Händel.
Ja, ist denn das HTTPD-Händel gleich dem Server-Händel?
Wahrscheinlich nicht, oder?
Dann brauche ich doch was, wie das übergeben wird.
Was?
Schauen wir mal.
Ich glaube nicht, dass es gleich dem Server-Händel ist.
Schauen wir, gucken wir mal.
WS-Packet ist undefined.
Ja, WS-Packet.
Muss WS-Packet hier noch irgendwie initialisiert werden?
Aha, wieder mit diesem Krempel da.
Okay.
Copy-Paste jetzt einfach mal ganz wild hin und her.
In der Hoffnung, dass es dann funktioniert.
Wenn es funktioniert, bin ich erstmal...
Ja, das wollen wir doch gar nicht, ja.
Da soll überhaupt nichts rein.
Hier, wir schreiben, wir schreiben da jetzt was rein.
In den Buffer kommt, okay.
Packen wir da jetzt einfach rein.
So, jetzt bin ich mal gespannt, ob ich eine Antwort kriege.
Flash.
Meines...
Fuck.
Äh.
Achso, mein D muss eine Nummer sein.
Eins.
Okay, meint ihr, es funktioniert?
Meint ihr, ich kriege jetzt als Antwort...
Ich müsste sogar auf beiden Sachen eine Antwort kriegen.
Guck mal.
Ich müsste einmal, wenn ich mich nur connecte, eine Antwort kriegen.
Das probieren wir mal aus.
Ich müsste, ich müsste als Antwort hier jetzt Cute Chat bekommen.
Äh, nee.
Eins als Antwort bekommen.
Mach ich nicht.
Moment.
Wie, wie, wie listet man dann mit Websocket?
Einfach listen?
Äh.
Das funktioniert nicht so, wie ich mir das gedacht habe.
Macht der überhaupt was?
WS-Händler.
Wird das irgendwo aufgerufen?
Ja, hier.
QWork.
Äh.
Äh.
Äh.
Machen wir noch mal, was da rauskommt.
Logger.
Machen wir mal Error, falls das irgendwie, falls das ein Error ist.
Ich kenne mein eigenes Zeichen.
Achso.
Ja, irgendwie, keine Ahnung.
Q-Error.
Und jetzt returnen wir das.
So, jetzt müssen wir da oben noch ein bisschen Debug-Ausgabe reinmachen, weil ich keine Ahnung habe, ob das funktioniert.
Und ich ja auch hier nix drinne logge.
Wir machen uns jetzt, wir machen uns jetzt keine große Arbeit.
Wir loggen jetzt.
Eins.
Zwei.
Drei.
Muss außer uns keiner die Debug-Ausgaben verstehen.
Oh, fuck.
Was jetzt?
Ups.
Was habe ich verkehrt gemacht?
Hä?
Was, was hat er für, für Schmerzen?
Äh, warum nicht?
Sollte aber doch eigentlich funktionieren.
Log-Error?
Kann er doch?
Nee.
Okay, mein eigenes Logging-Zeug funktioniert nicht richtig.
Ich gebe jetzt einfach sowas aus.
Oh.
Oh.
Besser.
Ah, ich will ja einfach nur sehen, ob es funktioniert.
Ja, warum auch immer der fehlt, ich weiß es nicht.
Der müsste eigentlich da sein.
Im Prinzip ist das ja gar nicht so, wie es bleiben soll.
Ich will einfach wissen, was der macht.
Weil ich hätte jetzt eigentlich vermutet, es funktioniert.
Aber anscheinend nicht.
Okay.
Error null ist okay.
Kann es sein, dass diese Message-Queue einfach nie funktioniert?
Nie läuft?
Ich sage httpd, Queue work.
Aber es wird nirgendswo die work end queued.
Weil Error null heißt, er hat, Moment, hier kommt eins.
27.
Ey, hat auch funktioniert.
Hat funktioniert.
Aber danach geht es nicht weiter.
Okay, dann stimmt das doch nicht, was ich hier gemacht habe.
Dann ist das hier nämlich, äh, okay.
Also, das hier funktioniert nicht.
Client list funktioniert nicht.
Warum funktioniert Client list nicht?
Okay, da muss ich mir, da muss ich mir die Ausgabe jetzt nochmal angucken.
Was, was, was, was passiert hier?
Server list.
Der greift auf was gerade?
Auf Server, wo kommt denn das her?
Das ist bei dem static.
Auf das httpd-Handle.
Also, eigentlich doch okay, oder nicht?
Oder nicht?
Okay, dann machen wir das mal anders.
Das Server-Handle kommt hier raus.
Ja, das ist immer ein bisschen eklig, das zu machen.
Das Server-Handle kommt hier raus.
Das geht hier in diesen globalen Scope da.
So.
So, hier kann ich jetzt aber nicht drauf zugreifen, ne?
Ich kann jetzt nicht hier auf Server zugreifen, weil es das nicht gibt.
Das heißt, im Endeffekt, hier brauche ich jetzt wirklich nur,
hier brauche ich jetzt wirklich sowas.
Und da muss ich das jetzt übergeben.
Hier unten, wo ich das aufrufe.
Warte mal.
Oh Mann, ich blick da immer durch.
What?
Queue.
Queue work.
So, da muss ich das übergeben, den Pointer.
Und das funktioniert.
Oh, ich raste aus.
Ah, warum ist das so kompliziert schon wieder?
Wonka ist.
Oh.
Die Sprache macht mich fertig.
Da muss ich den, muss ich den Pointer.
Na gut, wir haben, wir haben hier.
Fuck, ist das wieder abartig, ey.
Alter.
Okay.
Kommando, Kommando zurück.
Kommando zurück.
Ich will es erst mal funktionierend machen.
Sobald es funktionierend ist, kann man immer noch dran rumwurschteln.
Also, es scheitert daran, dass List Clients nicht geht.
Das liegt bestimmt daran, dass Server nicht richtig übergeben wird.
100 pro.
Könnte ich wetten.
So.
Und das macht ja auch Sinn.
Weil das überhaupt, weil das überhaupt nie richtig.
Moment, das wird überhaupt nirgendswo übergeben, gell.
Ja, kein Wunder.
Das wird nirgendswo übergeben.
Und ich kann.
Boah, fuck.
Alter.
Wie mache ich denn das jetzt?
Wie kriege ich denn das Ding jetzt hier rein?
Wie kriege ich das hier?
Kann man das hier static machen oder so?
Wie kriege ich denn das jetzt hier rein?
Weil das wird ja, das wird ja so auf jeden Fall nicht funktionieren.
Oder?
Oder doch?
Und?
Wait, funktioniert das jetzt?
Nee, natürlich nicht.
Weil.
Server was not declared in the scope.
Ja, das ist klar, dass das.
Moment, das funktioniert jetzt.
So.
HTTPD.
Server.
Nee, wie heißt das?
HTW.
Händel.
Händel.
So, das ist jetzt ein Pointer da drauf.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Fuck.
C++.
Please.
Server.
Gleich.
Das ist ein Pointer auf den Server Händler.
Warum kann ich da einen Pointer übergeben?
Sollte das eigentlich nicht gehen?
Ich bin verwirrt.
Chat.
Warum?
Das müsst ihr jetzt mal erklären.
Warum darf ich, wenn diese Funktion ein HTTPD Händel T haben will, einen Pointer übergeben?
Das macht doch gar keinen Sinn.
Oder?
int unter der Haube und mein
Pointer decayt dann quasi
irgendwie wieder zu einem int
und ich, er
interpretiert eigentlich die Speicheradresse
jetzt als den Content,
was auch weirdchamp wäre, aber
ja, das hat schon mal nicht funktioniert.
Doch, das ist eins
weitergekommen jetzt.
Zwei, ist jetzt bis hierhin gekommen.
Moment, ist
http, Moment, Moment,
httpd-handle ist was?
Ach, das ist ein Void-Pointer.
Boah,
da fuck!
Das heißt, ich kann das direkt übergeben, ohne
einen und davor zu machen.
Ich hatte jetzt einen Pointer zu einem
Pointer drinnen.
Wo geil ist das?
So, das heißt, im Endeffekt, wenn ich einfach nur einen Server
haben will, dann sage ich
im Endeffekt, ich mach einfach
gar nix. Ich mach einfach
gar nix und sage ihm
nur, ey, du bist eigentlich
ein httpd-Handle.
Das ist der Kontext, okay?
Vielleicht sollte ich es noch Server nennen.
Pointerstells, ja.
Im Prinzip
sowas hier dann, ne?
Okay. Kannst du nicht direkt
ctx übergeben? Stimmt, du hast
recht, das müsst
er doch eigentlich checken, oder?
Wenn ich jetzt hier direkt ctx
übergebe? Ja, check da.
Geht.
Da kann ich das auch nicht ctx, sondern das direkt
Server nennen.
So. Und das hier muss ja
gar nicht. Das ist ja
falsch an der Stelle.
Das stimmt ja. Ich glaube
gar nicht, dass ich hier den Server-Kontext überhaupt
brauche an der Stelle.
Schauen wir mal, was er jetzt macht.
Ah!
Es kommt eine Antwort!
Es hat funktioniert!
Easy as fuck! Easy, easy, easy,
easy as fuck!
Okay, es kompiliert nicht mehr. Ich hab's kaputt
gemacht.
Was not declared in this scope.
Wie jetzt?
Da ist es doch.
Wie?
Achso, ich kack nur. Ich hab's unbenannt
in Server.
Alter Pointer-Stelz, man!
Harter
Pointer-Stelz.
Ja, ist Funst. So, und viel
interessanter. Was ist jetzt, wenn ich
mich anderweitig attache? Krieg ich dann
auch eine Antwort?
Bäm! Guck mal!
Der ist broadcasten. Der Message ist
über Websocket funktioniert.
Das ist ja nice.
Oh, ich hab jetzt drei...
...Websocket-Verbindungen und alle drei kriegen die
Message. Die Antwort.
Excellent.
Excellent. Five head time.
Failed to read header.
Socket FD invalid.
Closing now.
Vielleicht doch nicht so ganz richtig, was ich da
gebaut hab.
Nee, oder war das, weil ich die jetzt alle so schnell
nacheinander geclosed hab?
Gucken wir noch mal.
Ja, tatsächlich. Das war nur, weil ich die Session irgendwie
geclosed hab.
Ah, jetzt funzt das nämlich alles.
Ja, ja. Failed.
Das ist nur, wenn ich die Session close.
Oh, das ist ja cool, dass das funzt.
Ich bin begeistert. Okay, das war ein bisschen
schwere Geburt, aber Websocket-Stells
funktioniert.
So wirklich, so wirklich schön
finde ich das noch nicht. Hier ist auch ein bisschen
unübersichtlich, aber es funktioniert.
Was? Moment, aber warum?
Ich hab ein Tool, um eine Mausbewegung
per Websocket an OBS zu schicken und damit
eine Branche zu schicken.
Eine Browserquelle auf die Maus reagieren
kann. Aber
also, und dann?
Also, was ist der Anwendungszweck?
Ich kriege übrigens auch viele Websocket-Events.
Hups.
Wenn ich ganz viele
Emotes spamme,
kriege ich auch Websocket-Events.
Weil die über, äh, nicht
Emotes spamme, weil die auch über Websocket
gehen. Aha.
Byfett-Time.
Ja, Maus-Cursor-Events.
Hast du viele.
Okay, können wir das jetzt irgendwie
vielleicht ein bisschen für normale Menschen
verständlicher machen, was wir hier gebaut haben?
Sodass man, sodass man es irgendwie
halbwegs checkt, was, was hier
passiert, ja? Ich muss mir noch mal
eins angucken.
Bei, nee, das Fundst...
FD-Info?
HD. Was ist HD
in dem Fall nochmal?
HTTP-D-Händel.
HTTP-D-Händel-D.
Okay.
Das ist im Prinzip...
Ja, nee, dann haben wir das richtig. Dann ist das richtig,
so wie wir das gebaut haben. Alles gut.
Okay, können wir das vielleicht noch ein bisschen schöner
machen? Weil das hier ist wirklich super
zu lesen. Jeder checkt, was passiert.
Das hier so
Semi.
Aber das da oben ist ganz schlimm.
Da checkt man gar nix.
Wenn ich Static wegmache,
wird's nicht mehr funktionieren, oder? Dann break
das, ja. Kann ich das
Static hier rausschieben irgendwie?
Das Fundst? Nee, das Fundst nicht.
Was?
Äh, Static konstant, meinetwegen?
Äh,
alles klar.
Warum ist das nicht
erlaubt? Darf ich sowas hier machen?
Okay, das
ist aus irgendwelchen Gründen erlaubt.
Was? Was auch immer?
Leute,
jetzt war ne blöde Frage.
Also, wenn ich jetzt...
Wenn das
hier Static ist,
dann ist das...
Dann gilt diese Variable hier
für jede Instanz von
EasyWebServer. Das heißt, wenn
ich zwei EasyWebServer anlegen
würde, was ich nicht mache, aber
was ich machen könnte,
dann würde die zweite
Instanz die erste kaputt machen,
weil es die Server-Variable
überschreibt. Richtig?
Und wenn ich das hier reinschreibe,
dann
nicht?
Fragezeichen.
Was ist der Unterschied zwischen
Static, so,
ist das jetzt,
ist das hier?
Ich könnte wetten, Leute, das ist im Prinzip
das Gleiche, nur das Scope
ist unterschiedlich. Das hier ist
auch in der zweiten
Instanz dann kaputt,
gehe ich mal von aus.
Also, das heißt, eigentlich ist so, wie ich das gebaut
habe, suboptimal.
Es ist nicht schlimm,
weil ich
im Endeffekt eh
keine zweite Instanz vom Web-Server
anlege. Schön ist es,
allerdings nett.
Das heißt, schöner wäre es,
wenn man das hier nicht Static machen
müssten, dann ist aber die Frage,
wenn das nicht Static ist,
wie kriege ich das hier rein?
Wenn du mehrere Instanzen
gibt es trotzdem nur eine, genau.
Ja, aber auch Static, wenn es innerhalb
von einer Funktion ist, dann wird es nämlich
kaputt, man. So,
Lambda Capturen
geht nicht, weil,
wenn ich in dem Lambda Capturen will,
Moment, wo will ich Capturen?
Ja.
Wenn ich hier Capturen will,
dann sagt er mir,
das kann man nicht mehr zuweisen, weil
das dann eine C++ eigene Sache ist
und das hier ein C Callback haben möchte.
So, das heißt,
im Endeffekt, doch, das könnte ich machen,
ich könnte den Server
hier übergeben.
Und zwar als User
Context
und Server
könnte ich
den übergeben und dann
kriege ich hier oben,
wo ist denn der User Context?
Stimmt, in Request.
Request, User Context.
Genau, so.
So, jetzt müsste es auch funktionieren.
Kannst du nicht
This Capturen? Doch, das habe ich mir auch
überlegt. Das habe ich mir auch schon
überlegt, das müsste auch funktionieren.
Also,
erst mal so checken,
erst mal so checken, dass es geht.
By the way, und dass das hier static ist, ist auch
eine richtig dumme Idee von mir, oder?
Weil es dann auch wieder kaputt gehen würde.
In der zweiten Instanz.
Das habe ich aus dem Beispiel so
rauskopiert.
Oh, fuck.
Es ist gecrashed jetzt.
Okay, da ist
irgendwas broken.
Ah ja, natürlich,
das, ne, wobei, das hier ist
doch schon ein Void. Moment, ich muss da
immer noch, ich muss immer noch keinen Pointer nehmen
dafür, weil das ist immer noch ein Void.
Also, das finde ich echt
grenzwertig,
einen Pointer zu aliassen auf irgendwas,
was nicht nach Pointer aussieht.
Das kann, das macht dich ja nur verrückt, im Endeffekt.
Aber
This Capturen wäre vielleicht auch keine schlechte Idee,
ja.
Haha, es hat funktioniert. Okay.
Jetzt schauen wir mal, ob das mit This Capturen
vielleicht nicht doch irgendwie
schöner ist, weil dann kann ich auch auf alles
drauf zugreifen.
So, das heißt, im Endeffekt, dann müsste
jetzt Server allerdings
hier raus, ne.
So, und auf
Private hier oben und dann heißt es auch anders
Underscore Server.
Das müsste da hin.
Dann muss ich das übrigens auch nicht mehr static machen.
Eigentlich noch viel nicer.
So.
Jetzt gibt es Server natürlich nicht mehr.
Aber ich kann
ja hier und Server
sagen.
Ja, das funzt ja. So, und überall,
wo Server steht,
muss jetzt Underscore
Server hin. Ne, Moment. Muss gar nicht
hin. Hier muss This gecaptured
werden. Ja.
Das, das funktioniert besser. So, jetzt Auto.
Nehmen wir das mal irgendwie, keine Ahnung, Context
oder sowas.
Request.
User Context.
Und das ist jetzt im Endeffekt
ein Eats Web Server
Pointer.
Und da drauf kann ich zugreifen.
Äh.
Ich bin innerhalb von der Klasse.
Ich glaub, okay.
Es, es buggt einfach.
Auf Server.
Ja.
Das müsste eigentlich auch funktionieren.
Das ist glaube ich sogar die schönere Variante
an der Stelle.
So, und jetzt müsste
ich eigentlich
Muss das static sein?
Ne, das muss jetzt nicht mehr static
sein, oder?
Ja, ob ich will oder nicht.
Wir lassen mal Zwischenschritt machen.
Ob das noch funzt.
Aber das mit This Captured war schon mal ne
Fuck.
Was not declared? Warum? Hier?
Wo? Achso, ja, ja, okay.
Underscore, underscore, server, underscore, server.
Bei der Gelegenheit machen wir das hier auch
gleich mal nicht mehr static const.
Weil es glaube ich keine allzu sinnvolle
Idee ist. Okay.
Jetzt bin ich mal gespannt.
So, und dann muss ja,
dann muss das hier ja eigentlich auch nicht mehr static
sein, zwangsläufig.
Guck mal, ob noch alles funzt.
Ja, funzt noch alles.
Sehr schön.
Ich bin begeistert.
Ja, das ist viel schöner jetzt. Das ist viel schöner.
So, und.
Wobei doch, das muss immer noch static sein.
Sonst kann ich das ja hier nicht übergeben.
Weil ich kann hier nicht
Ne, ich kann hier keine Member Function
übergeben. Das funzt nicht.
Wir könnten das um drei Ecken
machen, aber das passt
so schon. Das ist erstmal in Ordnung.
Ist zwar ziemliches Pointer,
Ping-Pong, aber echt
ganz okay. Gut, so.
Das finde ich, das ist jetzt halbwegs
übersichtlich.
Jetzt die Frage,
lass uns mal das hier oben noch ein bisschen aufräumen.
Also,
WS-Händler, so,
Method interessiert mich eigentlich gar nicht.
Handshake done, juckt mich
juckt mich jetzt
im Prinzip auch nicht wirklich.
Das
muss ich nicht, muss ich nicht loggen.
Dann machen wir das, was hier super
gehasst ist.
Machen die Klammern raus.
Ja, okay.
Das hier müssen wir so lassen.
Das müssen wir auch so lassen.
Das ist zwar alles ein bisschen eklig, aber
funzt. Framelänge,
nachdem ich jetzt weiß, dass das
richtig ist, was ich da programmiert habe, passt schon.
Die Message, die würde ich
tatsächlich mal weiterhin
als Debug
WS hier
auf Message,
die würde ich mal weiterhin rauspumpen.
Ja, und ob das
ein Error ist oder nicht. Ich meine, wir händeln den
Error ja eh nicht.
Also insofern,
können wir das tatsächlich returnen.
So, okay, dann sieht das
doch jetzt schon mal ein bisschen übersichtlicher aus.
Und jetzt widmen
wir uns mal
Chat, was sagt ihr?
Klammern drum oder klammern nicht drum bei einem
einzeiligen If?
Jetzt widmen wir uns mal diesem Krempel, weil das ist wirklich
potthässlich hier oben.
MaxClient16, gut, das
brauchen wir. WSPacket.
Kannst du es nicht vereinfachen,
indem du das direkt über Lambda
capturest? Du meinst hier?
Ne, das geht nicht.
Das geht nicht,
weil sobald ich hier das capturen will,
dann sagt er mir,
das geht nicht mehr, weil dann die
Funktionsdefinition nicht mehr übereinstimmt
mit dem, was das hier haben will.
Weil sobald
ich hier was reinschreibst, wird das automatisch
zu irgendeinem C++-Ding.
Und das hier möchte einen reinen C-Style
Callback haben.
Das funktioniert leider nicht.
Ganz ehrlich, ich finde es
richtig, richtig dumm, dass
das nicht kompatibilitätsmäßig eingebaut
ist in der Sprache.
By the way, das hier können wir übrigens
schöner handeln, wenn wir
ihm einfach so sagen.
Ne, können wir nicht.
Can't wait.
Ja okay, machen wir.
Klammern drum.
Richtig dumm, dass es das nicht kann.
Wo war das andere if?
Ich habe es doch gerade noch aus dem if rausgeschmissen.
Hier oben.
Ja ne, das lassen wir.
Das ist auch so ganz gut lesbar.
So, WebSocketFrame, das brauchen wir gleich wieder.
BufferVector brauchen wir oben auch gleich wieder.
Das können wir jetzt ein bisschen
verschönern hier oben.
So, WSWebSocketFrame.
So, dann brauchen wir
MaxClients.
Im Prinzip,
braucht das hier eine extra Variable.
Warum nehme ich nicht einfach immer das Ding hier?
Warum?
Das brauche ich doch überhaupt alles gar nicht.
Kann ich auch alles hier mitmachen?
Ah Moment, FDs
brauche ich.
Aber das muss auch.
Kann ich im Prinzip auch das gleiche setzen.
So, das muss Frame
sein.
Kann man schon gleich viel besser lesen.
So, das haben wir gesagt, das brauchen wir nicht.
MemSet, weil
das hier schon
alles initialisiert, korrekt.
Buffer, MemSet,
Gedöns brauchen wir auch nicht.
Weil wir hier schon
unseren Buffer haben,
können wir uns auch sparen.
Ja, siehste, wird gleich viel.
So, Payload
wird
BufferData
BufferLength
Size
Ja.
Siehste, passt schon viel besser.
Text
Kann man hier vielleicht auch direkt was initialisieren?
Ah
Kann ich hier direkt?
Haha
Guck mal hier.
Ist das jetzt schöner? Ich weiß nicht.
Ist das schöner?
Ne, Moment, das funzt nicht so, wie ich mir das gedacht habe.
Die
Hier setze ich ja erst den Content.
Ne, das mache ich ja noch nicht.
Ne, ne.
Sagt ihr mal, Leute.
Warum bin ich eigentlich so ultra
Pepega?
Warum verwende ich den Vektor
Uint8? Warum verwende ich nicht einfach
einen Arduino String?
Das kommt doch aufs gleiche raus.
Oder nicht? Length?
Und jetzt?
RC String.
Ah, dann muss ich es casten.
Ja, aber das kommt trotzdem aufs gleiche
raus. Das ist doch viel angenehmer.
Uint8
So.
Das ist doch viel angenehmer, weil jetzt
kann ich auch einfach sagen, hier Buffer,
plus, gleich.
Ja, was schreiben wir denn da rein? 0w.
Fertig. Das ist doch viel besser, als
mit irgendwelchen Low Level C Sachen
rumzuhantieren.
So, das kann man sogar noch Auto machen.
Ja.
Okay, das können wir uns dann hier sparen.
Das setzen wir alles auf 0 und initialisieren
das unten dann. So, das
Logging hier lassen wir erstmal drinnen.
So, wir gucken jetzt im Prinzip,
ob Get Client List funktioniert hat.
Wenn nicht, dann
Bäm. Das ist okay.
So, und das heißt Frame Socket.
Was macht der denn hier
im Endeffekt? Der
iteratet einmal über
Client
FDCs drüber.
Äh.
Was ist das hier überhaupt für eine Syntax gerade?
Das ist ein Int Array.
Moment.
Ach nee, warte mal. Das ist die Size.
Ach ja, okay.
Jetzt check ich's.
Also heißt im Endeffekt,
wir können noch
an der Stelle
wahrscheinlich muss das hier ein
Ne, das muss ein Int
Pointer sein auf
Da kann ich, ich kann doch hier auch
wieder einen Vektor nehmen, oder?
Oder einen Array sogar.
Warte mal.
Standard Array.
Ach nee, kann ich. Moment, aber das
funktioniert doch jetzt. Int.
So, weil das ist ja
Compile Time jetzt.
Das funzt doch so.
So, dann
brauch ich das hier nicht mehr.
Client. FDCs.
Was ist eigentlich ein FDC?
Filedescriptor wahrscheinlich.
So.
Und hier brauch ich
jetzt Length oder so.
Äh, hallo?
Autocomplete.
Nice.
Ich glaub mein Autocomplete hat sich gerade
verabschiedet.
But why?
Das kann selbst C++ nicht mehr sehen.
Starte sich das Autocomplete neu, wenn ich
sag Reload, Reload Window?
Reload anyway.
Leute, ich glaube es ist broken.
Ich mach mal kurz
neu auf. Ich glaube es hat
das Zeitliche gesegnet gerade.
Nein.
Nein.
Äh, ehrlich gesagt auch nicht.
Ich hab ne ernst gemeinte Frage.
Warum ist das jetzt auf einmal random kaputt?
Wie kann das sein?
Wie kann das sein, dass das einfach random
sich destroyed hat?
Was?
Warum hat sich das random
destroyed jetzt?
Ja wie jetzt? Ja was denn jetzt?
Reload Window hab ich gerade gemacht.
Äh, okay.
Es hat sich, es hat sich gefixt.
Es hat sich selbst, es hat sich von selbst
gefixt. Okay.
Es, das musste wahrscheinlich einfach nur
indizieren im Hintergrund nochmal schnell.
Also, wir brauchen nen Pointer auf die
Insta. Das geht bestimmt so mit Data.
So.
Und das ist jetzt
was? Ein
Was? Ein Pointer auf
Size?
Oh, jetzt bin ich, jetzt bin ich sehr verwirrt.
Ach so!
Ach so!
Jetzt, jetzt check ich
das!
Man gibt dem nen Array
mit Max,
Maximum möglicher Size
und man kriegt hier zurück
die Nummer, wieviel dann am Ende
wirklich drin sind.
Ey, wer hat sich das wieder ausgedacht, Mann?
Dann, dann brauchen wir, dann brauchen wir
das doch hier. Keine Ahnung.
Aber nein, es muss, es muss
ein Size T sein.
Jetzt verstehe ich das, was die da
vorhaben. Okay.
Moment, das ist
Size T
ist ein Pointer? What?
Ich hinterfrag's
gar nicht. Das findest du einfach, okay?
Ach nee, das hier ist, es passt
schon. Da ist ein Unterform.
Kann ich hier die
Null weglassen eigentlich an der Stelle?
Macht das nen Unterschied? Ist das
ein Unterschied, ob ich so schreibe oder so?
Das Type Gedeffe geht mir auch extrem
auf den Sack, Mann.
Ist das ein Unterschied?
Stack Variable
Null
or Uninitialized
Difference
Da müsste man, da müsste man's
ChatGPT jetzt fragen, aber ich bin nicht eingeloggt.
Was der Unterschied
ist zwischen so und so.
Also ich will wissen, was der Unterschied ist zwischen dem
und dem. Ich würd sagen gar
nix in dem Fall.
So, dann können wir das hier,
muss das wieder ein Vector sein, dass das funktioniert?
Mit
der Size von dem hier.
Okay, und jetzt,
danach kann ich sagen,
Client FDs
Resize, ne Resize ist auch doof,
ne, Resize of
Okay, ich weiß nicht, ob das
funzt, was ich hier gebaut hab.
Schauen wir mal.
Zumindest ist es nicht
wirklich lesbar, ist das was ich hier gebaut hab
jetzt auch net.
So, aber das kann man
jetzt zumindest übersetzen
nach Length oder Size.
Ah, wir können jetzt ne
For Each Loop machen.
Das ist schöner.
For Range
in Client FDs
Das ist dann ein bisschen schöner.
For Range
äh, FD
File Descriptor
Wir können das da ausschreiben.
Okay, das ist doch
tatsächlich ein bisschen besser lesbar jetzt.
Mal gucken, ob's noch funktioniert,
was ich jetzt gebaut hab. Ob das so
quasi immer noch äck, äckvivalent
zu dem ist, was vorher in C
da, da gestanden hat.
Schauen wir mal.
Meint ihr es geht, Chat? Ich bin recht
zuversichtlich.
Das schöne ist, wir sehen, ob's nicht geht.
Es wird einfach instant crashen, wenn's nicht geht.
Funst.
So.
Nochmal hier zum checken.
Zack.
Ich schick hier oben die Message und bei beiden
kommt lul weh. Zack, nice.
Funst. Ja, also ein bisschen
widerstrebt mir ja dieses
hier voll
um die Ecke Gesetze von der Size.
Schade, dass man das nicht
schöner machen kann. Vielleicht fällt
euch noch was schöneres ein, aber mir nicht.
Das lassen wir jetzt einfach so. Wir halten uns
nicht so sehr an Kleingram aus.
Auf. So.
Das Return machen wir genau dort, wo das
Problem entstehen kann.
Sonst checkt's da unten keiner mehr.
Kann ich nicht sagen, gleich
0? Das, das wenigstens
initialisiert das auf irgendwas?
Dann wird's hier resized.
Weil, weil
jetzt mal ernsthaft, wenn ich das so dastehen hab, ne?
Mal angenommen,
das hier schlägt fehl.
Was steht an
dieser Stelle dann in FDs drinne?
Es ist
defined, oder was?
Also jetzt schreiben wir doch lieber 0 rein.
Dann crasht's an der Stelle auch nicht,
wenn da irgendein Müll
drinne steht.
Okay.
Was gleich 0
ist, oder?
Defaultmäßig. Aber dann
schreiben wir doch lieber 0 rein, dann
versteht man's auch.
Gibt es sowas hier in C Sharp?
In C++ für
C Sharp, dass man den Kram
irgendwie so, oder zu size
oder so? Sowas gibt's nicht, gell?
Oder irgendwie 0.0d?
Ne, sowas. Das wär zu lesbar
dann. Okay, wir lassen das jetzt so.
Ist in Ordnung.
Passt. Buffer kommt jetzt
noch hier runter.
An der Stelle, wo man braucht.
Ich finde, Chat,
das haben wir ganz gut aufgeräumt.
Ich finde, man kann jetzt durchaus verstehen,
was hier passiert, oder?
Es passt ohne Probleme hier auf ne Seite.
Man kann, wenn man das liest, eigentlich
relativ gut erkennen, was passiert.
Das finde ich gut.
Das gefällt mir.
Es ist insgesamt, es ist jetzt gar nicht so lang geworden.
Man kann das echt gut erkennen.
Okay, also, unsere Websocket-Verbindung
funktioniert.
Websocket-Funst. Kommentare.
Wozu braucht man da Kommentare? Das ist
obviously self-documenting.
Außerdem hat's keine Fehler.
Muss es nie jemand anderes debuggen.
Es gibt übrigens ein schönes Makro dafür.
Für dieses ESP-Okay.
Es gibt, ähm,
ESP-Return oder sowas.
ESP-Check.
Sowas hier, genau.
Ha.
Es gab so nen Return-Makro.
ESP-Return.
Das ist
eigentlich, ich hab, das hätt so
ESP-Return heißt das.
Da kann man sich sowas nämlich
ESP-Return on
False. Genau.
So, was muss man dafür includen?
Was braucht man dafür?
ESP-Return on Error.
Welches File muss ich dafür
includen?
Es ist zu obvious.
Äh.
ESP-Check.h
ESP-Check.h
Include.
ESP-Check.h
Äh.
Warum ist das nicht?
Ah, hier ist's doch. ESP-Return on Error.
Ja, da ist es doch.
Es ist doch definiert.
ESP-Return on Error.
Und wie benutzt man das jetzt?
Ich hätte jetzt einfach gesagt, man gibt da den Return-Code und gut ist's.
Aber das ist, so funktioniert das ja anscheinend nicht.
ESP-Return on Error.
Wie muss ich das jetzt aufrufen?
ESP-Return
on Error.
Alter, wer soll denn
diesen Scheiß lesen?
Jetzt mal ernsthaft.
X.
Beste Bezeichnung.
X. Achso, und der, der lockt
dann auch noch.
Ah, dann ist es doch irgendwie
busy. Also im Prinzip
möchten die jetzt, dass man
sagt, ah, ähm
WS-Händler
Äh, ja.
Failed.
So, sowas, sowas wollen die haben.
So, und jetzt funzt es auch, hm?
Näh.
Also, es ist teilweise schon
ein bisschen abfacke, oder?
Was hat der denn für Probleme?
Ah, obviously. Jetzt ist klar.
Jetzt ist, jetzt erkenne ich alles.
Hätte das nicht mal früher sagen können.
Chat, ich glaube, jetzt ist
uns alles klar, wenn wir das gesehen haben.
Obviously.
Self-Documenting.
Es ist wirklich sehr gut lesbar.
Es ist wirklich exzellent.
Also, ich behaupte
immer noch, ich rufe das eigentlich richtig auf, aber
anscheinend nicht.
Ja, wie, wie, wie
benutzt man diesen Chat denn überhaupt?
Habt ihr da nicht mal ein Beispiel
für? Ja,
X.
Log-Tag? Format.
Mach ich doch. Und was ist X?
X weiß man nicht.
X ist X.
Ich will das jetzt rauskriegen. Da muss es doch ein
Exempel für geben.
Das triggert mich jetzt schon wieder.
Alter.
Clarify. Ist schön, wenn ihr clarifiet.
Okay, hier.
Hier, hier.
Äh, hallo? Angeblich ist das hier drinnen.
Ist es nicht, okay.
Tag. Ja, genau.
Ich rufe das doch richtig auf.
Log-Tag.
Alter, wer soll denn den
Scheiß lesen, Mann?
Logge.
Moment, ist der Tag zu hoch?
Also,
sorry, ich habe absolut keine Ahnung, wie man den Kram
aufrufen soll.
Ja, Software muss auf Disketten passen.
Es ist mir komplett
schleierhaft, wie das funktionieren soll.
Okay, weißt du was?
Scheiß drauf.
Wir machen es leserlich.
Okay?
Wir checken, ob es nicht okay ist.
Und dann
returnen wir. Fertig.
Das kann man, ganz ehrlich,
besser lesen als den anderen Schrott da.
Okay, gut. Websocket.
Funst.
Mission accomplished.
Das packen wir noch.
Das machen wir dann aus.
Gut, also.
Partitionstabelle.
Als nächstes jetzt gemacht.
Wobei, muss nicht wirklich gemacht werden.
Geht auch ohne.
Das Ding hat genug RAM.
Aber als Funst. Jetzt haben wir unsere Websocket-Verbindung.
Jetzt können wir ja testen, ob unsere
Websocket-Verbindung auch ordentlich funktioniert.
Das testen wir jetzt als nächstes.
So, Websocket-Verbindung funktioniert.
Ich muss jetzt natürlich von außen irgendwas
verschicken können über Websocket.
Also, machen wir sowas hier.
Irgendwie Hue
oder, wie nennen wir das Ding?
WS
Broadcast, wir nennen das Broadcast.
Broadcast.
Websocket
Broadcast.
Und zwar einen Ring.
Hier, Message.
Okay.
Und jetzt,
okay, wir machen es einfach so.
Wir generieren random.
Ne, wir
generieren nicht random.
Wir senden einfach die Millisekunden,
die das Ding oben ist, per Websocket.
So, alle
100 Millisekunden
senden wir das jetzt.
Also, Web-Server,
Websocket
Broadcast,
Broadcast,
eines, eine, eine,
ja,
Millisekonds
als String.
Okay, so, und jetzt müssen wir gucken, wie wir das Ganze machen.
Das hier ist
ja eigentlich ziemlich unsinnig,
wie wir es gebaut haben, weil das wollen wir an der Stelle
ja gar nicht.
Message juckt null,
weil wir mit der Message nichts machen.
Eigentlich ist das doch ziemlich,
ja.
Das kommt auf jeden Fall hier raus.
Return, Return,
ESP okay.
Weil das Queuen wollen wir ja nicht
hier bei jeder eingehenden Message
machen,
sondern immer,
wenn wir einen neuen Wert haben.
Heißt im Endeffekt,
Broadcast,
Broadcast,
hier machen wir das drinnen.
Da kann ich auch mal ein ordentliches
Error-Objekt returnen, mit dem man was anfangen kann.
Request Handle.
Ich habe an der Stelle kein
Request Handle. Ne, Moment, das muss
nicht das Request Handle sein. Blödsinn.
Warte mal, warte mal.
Hätte ich mir den ganzen Kram sparen können?
Bei den
Request Handle steht ja alles drin, was man braucht.
Schreibst du eine Wetterstation?
Ne.
Aber ich will trotzdem da
Daten auf einer Webseite anzeigen.
Okay, geil. Das kann ich mir sparen hier drin.
Das brauche ich gar nicht. Nice.
Gut, dass wir das gemacht haben.
Aber zum Testen war es ja notwendig.
So, Request Handle
ist eigentlich ganz easy.
Request Handle ist
unser Server Handle.
Server.
Und
wir übergeben wieder unser
Server Handle. So.
Ja, okay.
Das sollte eigentlich jetzt funktionieren,
was ich gebaut habe.
Hoffe ich mal.
Wir sollten jetzt über Websocket
alle 100
Millisekunden was
bekommen.
Wir bekommen nichts.
Warum nicht?
Was habe ich, was habe ich
falsch
gedacht?
Was habe ich falsch gedacht?
Was haben wir nicht?
Aber was ist denn da jetzt der große
Unterschied zwischen?
Das verstehe ich jetzt nicht.
Okay, das müssen wir dann doch nochmal
rückgängig machen.
Also das lassen wir so.
Aber ich weiß,
ich war blöd, dass ich das hier
gelöscht habe.
Wartet mal. Okay.
Machen das, wir machen das jetzt nochmal.
So, also
ich lasse mal checken, ob noch alles funktioniert.
So, was
habe ich jetzt gemacht? Im Endeffekt
ESP Error
Server Handle.
Ist denn Request Handle überhaupt
das gleiche? Request Handle?
Warte, ja, das ist das Server.
Okay. Hm.
Äh.
Chatgear, was habe
ich kaputt gemacht?
Anno & Echo.
Fuck! Was habe ich jetzt kaputt gemacht? Shit!
Ah!
Kann das sein, dass einfach die Queue voll ist?
Lass mal kurz raus.
Was habe ich denn jetzt, was habe ich denn jetzt zerstört?
Was die,
ich habe doch gar nichts mehr großartig geändert.
Eben ging es doch noch.
Hä? What the fuck?
Was habe ich denn kaputt gemacht jetzt?
Da hat sich doch gar nichts dran geändert, Mann.
Ich hätte mal einen Comet
machen sollen. Okay, scheiß drauf, ich muss mal
kurz rückgängig machen. Wo hat es dann
funktioniert?
Wenn ich das finde, mache ich jetzt erst mal einen Git Comet.
Ja, hier habe ich den komischen
ESP-Check gedönst gemacht.
Was
unsinnig war. Und dann
habe ich die Logs rausgeschmissen.
Ach!
Oh Mann, ich bin so dumm!
Ich füge einfach nichts mehr ein!
Das funzt wahrscheinlich alles!
Wahrscheinlich funzt das alles.
Ich habe vergessen, Text einzufügen.
Ah, shit.
Naja.
Was soll ich so machen, ne?
Okay.
Okay, präge Chat, präge.
Chat, bevor ich es jetzt ausprobiere.
Eine Runde präge.
Eine Runde präge in Chat.
Ich habe echt Schiss, dass es jetzt nicht funktioniert
und ich nicht finde, woran es liegt.
In der Zwischenzeit
trinke ich mal was. Fuck!
Es funzt nicht.
Warum? Scheiße!
Warum?
Was habe ich kaputt gemacht?
Okay, ich muss doch noch mal rückgängig
machen.
Shit.
Okay, ich mache jetzt einen Git-Commit, wenn es funktioniert.
Ich habe doch gar nichts groß geändert hier.
Ich habe die Logs
hier wieder reingemacht.
Wir haben den String-Buffer.
So.
Aber hier ging das doch noch. Erzählt mir doch nichts.
Hier ging das doch noch.
Chat, hätte ich mal einen Commit gemacht,
anstatt weiter zu basteln.
Ist das nicht noch die richtige IP?
Hä?
Das hat doch noch... Der ruft, das hat doch noch...
Der ruft das gar nicht mehr auf.
Jetzt blicke ich da mal durch.
Ist das hier, dass das gleich Null ist, ein Problem?
Ich weiß nicht, ob ich es seitdem ausprobiert habe.
Wie hat es doch noch funktioniert?
Wie hat es doch noch funktioniert?
Oder
war ich jetzt total durch...
Hä?
Ja, hier geht's!
Moment, ist wirklich das Problem, das ich gesagt habe,
gleich Null?
Ist das das, was kaputt gemacht hat?
Darf man das nicht?
Jetzt könnte man ein bisschen schneller flashen.
Da pennst du dir ein, weil...
Ist das gleich Null, das was das kaputt gemacht hat?
Ist das gleich Null, das was das kaputt gemacht hat?
Ja! Warum?
Warum ist das überhaupt ein Unterschied?
Warum ist das überhaupt ein Unterschied?
Sollte Null nicht default sein?
Sollte Null nicht default sein?
Und hier wird es doch eh überschrieben.
Und hier wird es doch eh überschrieben.
Okay, was macht der hier?
Ach, das ist ne...
Nee, ist es nicht.
Nee, nee, ist okay.
Der checkt, ob es gleich Null ist.
Und dann sagt er
invalid args.
Es muss im Endeffekt...
Nee.
Doch.
Nee. Hä?
Jetzt bin ich...
Jetzt, jetzt, jetzt bin ich verwirrt.
Ja doch, der checkt, ob es
Null ist, und dann...
Aber, aber warum geht das so?
Warum geht das so?
Ach!
Der checkt den Pointer, ob der Null ist.
Dann...
Und hier checkt er den Wert.
Also, es darf explizit nicht...
Es darf nicht auf Null gehen.
Warum denn nicht?
Das ist ja mal so krass häng...
Ja, was ist denn...
Was ist denn der Default-Wert von
SizeT?
Ist das jetzt hier...
Undefined, oder was?
Und deswegen schreiben sie gleich Null.
Oh Mann, ey, Alter,
diese Sprache, das ist so
Painschamp, Mann.
Ultra-Painschamp.
Okay, wir sagen,
wir tun das einfach mal so, als geht's.
git add
minus a
Möchte einer einen onlinefähigen
Bad-Company-1-Port für PC machen?
Eventuell PS3-Modell.
Ich glaube nicht, dass das mal jemand so einfach
aus dem Ärmel tuttelt hier.
Wobei ich mit meinen krassen C++-Skills...
Viel Erfolg,
Sgt2918.
Äh,
jetzt geht's nicht mehr?
Hä? Muss das wirklich explizit
auf un-initialize
stehen, dass es funktioniert?
Das macht mich fertig.
Aber sogar
in der
Demo
Size... Moment, was?
FDs?
Wo haben wir's denn
jetzt?
Äh...
Ach, das musste auf Max
Clients.
Alter, bin ich doof.
Ja.
Deswegen funzt das auch, wenn es un-initialized
ist.
Okay, git commit.
git add
minus a
minus m. Okay, komm.
Wir schreiben keine Meme-Message rein.
Irgendwas Sinnvolles.
Funzt.
Ja, alter.
Meine Güte, was ein Rumgefrickel
wieder. Okay, voll.
Okay, jetzt.
Meine Güte.
So, Debugshit raus, braucht
keiner. So, das hab ich
hier hochgemoved, weil es
bescheuert war da unten.
Und die Buffer-Geschichte,
die hab ich runtergemoved,
dass das ein bisschen besser hier dazu passt.
So. Gut.
So. Funzt
immer noch. Jetzt können wir das
ganze nochmal machen hier. Also,
public void
websocket broadcast
string
message
Das da.
Und zwar mit
server
und das Handle ist auch der Server.
Erhol.
Message.
Achso, haha. Wie übergeben
wir denn jetzt die Message an den Handler?
Dann ist es doch nicht mehr so
einfach.
Wie gedacht.
Okay, wir returnen das einfach mal so
und schauen, dass das funktioniert.
Okay, kannst
nochmal neu kompilieren.
Warum er jetzt random einfach
der Meinung ist, ich muss mal neu kompilieren, weiß ich
auch nicht. So, mir ist es jetzt einfach danach
mal 3000 Dateien neu zu kompilieren.
Äh, jetzt nicht mehr.
Jetzt hat er doch, jetzt will er es doch nicht mehr machen.
Ey, die Sprache macht mich so fertig.
So, also
von der Idee her
sollte es jetzt ja immer noch punzen. Hoffentlich.
Ja.
Okay, im Main
broadcasten wir jetzt mal unsere
Milliseconds.
So, das heißt hier, wir machen hier unten
Webs, wir machen ein
Cat hier unten drauf.
Okay, das funzt
schon mal. Es sind keine
Milliseconds, aber es
kommen alle 100
Millisekunden
kommt da was rein.
Das ist schon mal gut. Okay.
Hat das übrigens so was wie einen
Timeout Reconnect?
War eine blöde, blöde Frage.
So was wie, wenn ich jetzt Reset drücke an der
Kiste. Reset.
Dann hängt
das und dann gibt es ein Failure.
Na okay.
Webs, so Cat. Gibt es irgendwie
einen
Reconnect?
Auto Reconnect.
Can Auto Reconnect be
used?
Auto Reconnect
Punkt.
Ja, obviously. Was denn sonst?
Minus T?
Minus.
Bisschen kryptischer
noch vielleicht.
Was ist Minus T?
Text.
Send Message to Websocket as Text. Wollen wir nicht.
Das ist nicht die ESP-Lib.
Das ist
das Dings für Websocket.
Invalid Command Line Parameters.
Nice. Excellent.
Oder was muss man machen?
Minus T. Minus.
Ach das geht.
Ich hinterfrage das jetzt
einfach mal nicht. Okay und jetzt mache ich Reset.
Und Auto Connectet
sich das jetzt?
Es Auto Connectet sich wieder. Nice.
Da können wir das hier unten
nämlich jetzt einfach laufen lassen.
Und bei
jedem Reboot sehen wir, ob es funktioniert noch.
Da muss ich nicht immer den Kram neu starten.
Also sehr nice.
Nice.
Jetzt ist nur die Frage, wie kriegen
wir den eigentlichen Text da rein?
Weil den Server
übergebe ich aktuell hier
als Händler. Und das ist ja nicht
so Sinn und Zweck.
Ich übergebe einfach
Ne, ich muss mir
ein eigenes
Strukt bauen, dass das
funktioniert. Etwas anderes sehe ich
jetzt hier nicht. Oder
kann man, meine blöde Frage.
Kann man einen Tuppel oder sowas
Anstatt so ein eigenes Struct kann ich quasi so was machen wie
Also ich so als C++, C++, Keckel, gleich, New, Standard, Pair, besteht aus HTTP-Händler und nem String
Jetzt mal seriously
Wie hässlich möchte eine Sprache eigentlich sein?
Okay, ich gebe zu, das sieht in C-Sharp fast genauso aus, aber irgendwie ist es trotzdem in C++ einfach meilenweit hässlicher
Kann man sowas da jetzt übergeben?
Also, würde das gehen?
Und wer cleart das dann wieder?
Ja, C++
Okay, weiter im Text
Wir übergeben dem Ding wirklich sowas
Es besteht, ey, darf man das benennen irgendwie?
Ne, ne, natürlich, das wäre auch zu einfach, wenn man das benennen würde
Aber ich glaube, man kann sowas destructen
Wobei, das ist ein Problem, wie das funktioniert
Es würde theoretisch funktionieren
Ah, jetzt müsste ich casten dann
Vielleicht mache ich doch ein eigenes Struct, hä?
Weil ich müsste im Endeffekt das jetzt
Das jetzt quasi casten zu dem da
Was kann man damit machen? Auch per Daten?
Sim-Sensoren, Daten übertragen auf einer
Könntest du machen?
Also, was ich als Controller habe, ist das Ding
Sogar mit einem eingebauten Display
Du kannst damit potenziell so ziemlich alles machen
Weil du hast 36 GPIOs, glaube ich
Irgendwie, ne?
Oder 28 GPIOs, glaube
Und du kannst alle Sensoren der Welt gefühlt daran anschließen
Die 3,3 Volt kompatibel sind
Du kannst damit nahezu alles machen
Und
Sehr vieles
Des Smart Home Equipments, was du so kaufen kannst
Basiert ja auch auf ESP32
Der ESP32-Familie
So, Data
Data ist immer die beste Bezeichnung
By the way
Kann man nicht
Sowas hier machen?
Und das dann hier drinnen verwenden?
First, Second
Äh
Moment, Moment, Moment
Wusstet ihr, passt mal auf
Wusstet ihr
Dass
Ähm, C++
Äh, Tuple Destructing kann?
Ich hab keine Ahnung, was das sein soll
Also, was ich schon gebaut habe, ist damit
Bodenfeuchtigkeitssensoren
Hört sich ein bisschen sowas an hier
Ja
Ja, mit Levelshifter geht auch 5 Volt, ja
Und die meisten Boards
Behaupte ich mal, die verkraften
Wenn du Glück hast, 5 Volt sogar
Wenn es nicht wirklich viel mehr ist auf den 3,3 Volt GPIOs
Weil die doch recht tolerant gebaut sind
Aber ich würde es nicht darauf ankommen lassen
So, wusstet ihr, dass das destructen kann?
Guck mal, ich kann jetzt hier sagen
Server
Und Message
Gleich
Äh, muss ich, muss ich die Dingsen?
Guck mal
Das kann C++
Das ist eines der wenigen sinnvollen C++ Features, die dazu gekommen sind
Kannst Tuple destructen
Eigentlich ganz cool, oder?
Okay
Server, Message
Und dann kann ich hier noch was machen
Und dann kann ich hier noch was machen
Message wird hier an den String dran gehängt
Wobei, ha
Message ist der String
Den brauche ich hier gar nicht mehr
Message
Message
So, Length
Äh, what?
Ach man
Okay, Leute, ist okay
Dann halt meinetwegen hier
Okay, weil es besonders hässlich sein muss
Oh ne
Die Syntax würde, Alter
Die Syntax würde, Alter
Die Syntax
Ich kann es mir nicht wieder angucken
Wie hässlich will eine Sprache sein, man
Okay, kann ich nicht
Okay, pass mal auf
Kann ich nicht einfach den Pointer dereferenzieren
Und dann, ne, Void Pointer
Deferencing geht nicht, ne?
Wäre ja auch sehr weird
Kannst du, kannst du auch keinem
Keinen lesen lassen hier
So, und jetzt
Brauche das hier nicht Server
Auf jeden Fall, sondern
Kannst du die Funktionen
Nicht so schreiben, dass es eine
Rampage und Pointer
Ne, weil die nicht
Weil ich nicht die Definition dafür
In der Hand habe, wie die aussehen muss
So
Standard, make, pair
Fucking shit, man
Es kann es doch keinem
Zumuten
Guckt euch das an
Ah ne, das muss
Was ist das Problem jetzt?
Achso, ähm, ja
HTTP, äh, Server
Und Message
Achso, das geht ja so natürlich wieder nicht
Äh, ja
Sondern
Da muss man jetzt
Was will der denn von mir?
No instance of function
Template matches the argument list
Warum nicht?
Ist doch vollkommen richtig alles
Wie muss denn die
Argument list aussehen?
Ah ja, mhm, mhm, okay, alles klar
Alles klar, verstehe, verstehe
Also jetzt mal ganz ernsthaft
Int
Int
1, 2
Hä?
Okay, prinzipiell funktioniert
Aber warum stimmt das nicht?
Das ist ein HTTPD-Handle
T
Und das ist ein String
Was hat der denn für Schmerzen?
Warum matcht das nicht die Argument list?
Das ist exakt die Argument list
Ja, mhm, alles klar, verstehe
Ja
HTTPD-Handle
Das ist Type-Default-Handle
Das läuft auf Void-Sternchen
Was auch immer
Pass mal auf, so
Es ergibt für mich echt keinen Sinn
Warum das nicht funktioniert
Würde es denn mit String-String
Funktionieren?
Können da vielleicht einfach nur keine Pointer rein?
Hä?
Es ist doch genau das gleiche, Mann
Exakt das gleiche
Hä?
Wait a minute
Warum geht das nicht?
Warum geht das nicht?
Macht es aus eurer Sicht irgendwie Sinn?
Dass das nicht funktioniert?
Hä?
What?
Wie kompliziert möchte man eine Sache bitte schön noch machen?
Okay, wisst ihr was?
Scheiß drauf, juckt mich nicht
Private, Struct
Ähm
WS
WS Data
Es ist eh übelst der Abfuck
Soll ich euch das mal sagen?
Übelst der Abfuck
Dass ich nicht hier drinnen einfach da drauf zugreifen kann
Warte mal, das Problem war
Äh
Was war das Problem nochmal?
Ah, ja, weil man das hier nicht queuen kann
Genau
Wobei
Moment
Moment
Wie, das kann man nicht queuen?
Moment
Wartet mal
Man kann es davon abgesehen haben, dass mir das auch nichts bringt
Oder? Doch, doch, doch, das bringt was
Warte mal, warte mal, warte mal, warte mal
So, jetzt wird das so nicht mehr funktionieren
Ja, diesen Shit kann man mal rausschmeißen
Moment
So
This WS Händler
Das funktioniert so
Obviously nicht
Aber
Was funktioniert ist
Das WS Händler
Da reinstecken
Hier
Das Ding in den Lambda Wrappen
Der
Sich selbst
Als Kontext bekommt
Und das
Dann da drinnen
Aufrufen
Richtig?
Korrekt
So, und brauche ich nicht mehr
So, und sich jetzt hier selbst
Drinnen aufrufen
Oh, jetzt ist mein Auto
Auto komplett wieder kaputt
Oh, jetzt ist mein Auto komplett wieder kaputt
Oh, jetzt ist mein Auto komplett wieder kaputt
Mein Auto queuen
Äh, und jetzt kann ich sagen
CTX WS Händler
Alter, fuck mich schnell ab
CTX WS Händler
Alter, fuck mich schnell ab
Doppelt kann ich das nicht nennen
Self heißt es jetzt, okay
Weil Python, okay, genau
WS Händler
Der ist vor uns doch jetzt an der Stelle
Krasser Auto complete
Function hier
Nice!
Genau so möchte ich das immer
Äh, nicht Auto complete
Genauso möchte ich das immer formatieren
So und nicht anders
Genau, genau das ist the way
Das zu formatieren
Exakt so, Leute, exakt
Nicht irgendwie anders, genau so
So muss das formatiert sein
Warum ist das eigentlich so kaputt?
Okay
Ab, ab da geht das nicht mehr
Okay, mehr als zwei, mehr als zwei Zeilen kann das nicht
Moment
WS Händler Auto
WS Code
CPP Auto Formatting
WS Code CPP Auto Formatting
Shit
Gibt's nicht, oder?
Alles klar, okay, mhm
Funktioniert ja richtig gut
Es ist so hässlich
Es ist so hässlich
Es kann's doch jetzt nicht sein
Dass das, dass das das Formatieren
Nicht
Wie dem auch sei
Wie dem auch sei
So
Funktionieren
Und hier kann ich jetzt an der Stelle
Meine Message übergeben
So, die Message
Die kann ich
Fuck
Die krieg ich da jetzt ja nicht rein
Ah
Shit
Boah, warum ist das so scheiße gemacht?
Warum ist das so scheiße
Gemacht, man
Du kannst versuchen in den WS Code Settings
Den C++ Formatter zu changen
Von Clang zum Beispiel Google
Okay
Äh, Settings
UI
Wo muss ich denn da hin?
Extensions, C++
Code Formatting
Äh
Formatting
Aha
Wir haben zur Auswahl
WS Code
Das ist wahrscheinlich der Default, oder?
Ach nee!
Okay, das sieht noch kaputter aus jetzt
Äh
Ich mein
Der macht das wenigstens nicht komplett kaputt
Vielleicht ist das
Einfach sogar besser
Ich mein, der interessiert sich nicht dafür
Aber wenigstens rückt das richtig ein
Oder?
Ich mein, besser
Besser als das andere
Okay, das kann er jetzt schon wieder nicht mehr handeln
Guck
Das ist jetzt zu viel für den, das kriegt er jetzt nicht mehr gehandelt
Wahnsinn!
Welche Basics man sich hier rumschlagen muss, oder?
Würde man eigentlich vermuten
So, so, so Code Formatting
Ist ein gelöstes Problem
Für so eine bekannte Sprache
Haha, guckt euch das mal an, Alter
Äh, wie installiert man denn den Google Formatter?
Probieren wir jetzt mal aus
Chat, wenn der Chat das sagt
Dass das, dass das gibt
Das wird immer besser, das Format
Oder?
Es sieht immer besser aus
Anscheinend ist das jetzt wieder was anderes
Als Default
Was ist denn, wenn ich jetzt Default einstelle?
Ne, ne, das ist Default
Also Default, Default ist anscheinend
Diese hässliche Code Formata
Du kannst da oben den verwendeten Style einstellen
Äh
Ah
Coding Style, Current Support, Visual Studio
File
Use file to load the style from a
.clang Format
File in the Chrome, hab ich ja gar nicht
Okay, ich möchte formatieren
Wie Google
Und jetzt?
Hey
Boah
Er kann es, ich fass es nicht
Und er kann sogar den hier formatieren
Einzige, was mich abfuckt
Jetzt ist
Warum muss die Klammer auf gleicher
Ebene, auf gleicher, auf gleicher
Auf gleicher, auf gleicher, auf gleicher, auf gleicher
Das ist was ich meine, ne
Wie würde der mal Main umformatieren
Jetzt? Der macht die Klammern auf die
Gleichen Zeilen, ich mag das
Nett
Okay, dann machen wir hier
Alman Style
Ja, der ist gut
Ach ne, Break Before Braces
Alman
Was? Okay
Visual Studio Style
Äh
Ah ja, okay
Damit kann ich, damit kann ich leben jetzt
Gefällt mir, wobei jetzt hier die Einrockung
Wieder nicht checkt
Leute, ich, ich werd verrückt
Ah doch
Ich glaube, ich glaube es passt, ist okay
So lass ich's jetzt, so lass ich's, okay
Leute, ja
Das hier, das triggert mich richtig hier mit dem
Das Funst Nett
Egal wie ich's dreh und wende
Ich krieg in meinen Callback
Den Krempel Nett rein
Ja, ich muss sagen
Man kann sich bei Go auch
Drüber streiten, aber Go gibt's halt kein
Eine Diskussion, wie das, wie die Formatierung
Auszusehen hat, bei Go ist es ja
Ganz krass, das kompiliert einfach
Nicht, das, das kompiliert
Einfach Nett
Du hast Pech, es wird einfach nicht kompiliert
Wenn die Formatierung
Nicht stimmt, wenn du bei Go
Die Klammer auf die untere Zeile machst
Anstatt in die gleiche Zeile, kompiliert's einfach nicht
Wie viele
Programmiersprachen gibt's eigentlich
Unendlich, obviously nicht
Aber ich würd sagen
Unendlich minus 1 gibt's es
Jetzt kommt gleich wieder die
Die Matheexperten, actually
Unendlich ist keine Zahl
Oder sowas
Das nervt mich
Das nervt mich echt richtig mit dem
Können wir das hier nicht irgendwie rappen
Ok, pass mal
Auto
Gleich
Jetzt, jetzt, jetzt probieren wir das nochmal
Standard
Make Pair
Ich bin immer noch unschlüssig
Warum das hier nicht funktioniert
String, String
Message
Message
Vielleicht, weil es nicht kopiert
Ja das kann schon sein
Ja, ok
Das Make Pair
Muss den Content quasi
Ownen, wie man in Rust sagen würde
Dass das
Funst verstehe
httpd
T
Ne
Server
Wie, wie ist der Krempel?
httpd Server handle
Server
Man kann da echt keine Pointer rein
Pappen
Das ist schon
Ein wenig cringe, oder?
Dass das nicht geht
Was gibt es denn sonst noch?
Make
Promptruppel
Move? Ich will es nicht moven
Kann man sowas hier machen?
Müsste doch im Prinzip das gleiche sein, oder?
Ja, gleiches Problem
Warum kann man da keine Pointer rein machen?
Das ist doch echt bescheuert
Ich meine, ich könnte den Kram jetzt hier
Das ist, das ist, das ist
Das ist echt
Make Pair Pointer
C++
C++ Pairs and Pointers
What?
Ich verstehe das Beispiel noch nicht mal
What the
Ja genau, const char
Ok, geht anscheinend nicht
Moment, ein Star
Ok, Pointer darf man da drinnen nicht
Nicht reinpappen
Ja, wie useless ist das denn?
Ok, was sicherlich geht
Was sicherlich geht
Ist
Standard Shared Pointer
Oder wie geht das?
Make Shared
Jetzt wird es aber richtig abartig, Mann
Server?
Ne
Moment, wie funzt denn das überhaupt?
Alter, das ist so abfuck
Sprache, Mann, what the fuck
Ok, wie funzt das jetzt?
Ah ja, ja ich finde, ich finde ja auch übrigens
Die Autocomplete-Hilfen immer so hilfreich
Mhm
Const, Standard, Remove, Extend
TP, Type
Leerzeichen und
Underscore, Underscore, U
Logisch, oder?
Ist doch ganz klar
Jetzt vielleicht auch irgendwie ne
Warum nimmst du nicht einfach C?
Ganz ehrlich, ich bin ja kurz davor einfach ein Struck
zu machen und das zu übergeben, ja
Was ist C in dem Fall?
Alter
Ach Moment, damit rappt man nicht schon den bestehenden Pointer
Was muss für ein
Shared Pointer
Aber da kann ich auch keinen
Ne
Ok, Leute
Ich mache ein eigenes Struck zum übergeben und gut ist
Alles andere
halte ich geistig gerade nicht aus
Wir brauchen
ein Struck im Endeffekt
mit
Ja
Mit ner Referenz zu nem Server und
Ok
Dann kann ich diesen ganzen Krempel auch wieder rückgängig
machen und wir müssen
Wir müssen uns kein Bein ausreißen
Der Speiseplan
Heute gab's, äh, Mozzarella Sticks
Ne, stimmt gar nicht
Heute gab's
Chicken Nuggets
Wo bin ich jetzt hier?
Achso, ich hab jetzt die ganzen Formatierungssachen
hier ausprobiert, na ok, dann machen wir's von Hand wieder
Ok
Dann lassen wir das jetzt hier, komm
Wir lassen das Static, dann ist das wurscht
Dieses ganze
Schmodderzeug hier kommt weg
Wir machen ein Struct
Das enthält nen String
Message
Und das enthält nen Serverhandle
Fertig, easy
So einfach kann's sein
Ich wollte fast C++ Build-In mäßiges nehmen
Aber das war anscheinend
Zu viel des guten
Auto
Constructs
Deconstructen
Ne, oder?
Ich mein, macht auch nicht wirklich viel Sinn
Aber vielleicht geht das ja
Ähm
Pointer auf WSData
CTX
Sternchen
Ne, warte mal
Der Sternchen muss dahin
Jetzt haben wir nen Struct
Data
Server
Ne, Handle
Ähm, Data
Message
Data
Message
Kann man, ich bin immer noch, kann man nen
Struct deconstructen
Also quasi jetzt hier in
Message
Handle
Ne, das geht natürlich nicht
CPP
Deconstruct
Man würde eigentlich vermuten, dass ein Struct
Das erste ist, was man deconstructen kann
Aber
Ne
Ah, dann machen wir's so
Ok
Message
Length
Data
Handle
Handle
Ok
Und diesen Shit hier, den können wir uns jetzt einfach mal komplett sparen
Den ganzen Schmodder
Serde bringt uns jetzt hier nix, oder?
Das ist doch irgendeine JSON-Serialisierungsgeschichte
So
WSData
Gleich
Handle gleich Server
Und dann
Und das war Server
Ähm, wir müssen uns übrigens eine richtige Reihenfolge machen
Message gleich Message
Ne, ach hier muss man jetzt Kommas machen
Ah
Gerade die Formatierung nochmal gesaved
Und?
Und davor?
Ah, ne, ne, ne, ne, ne, so einfach ist das
Geht das an der Stelle nicht
WS Handle
Das, es geht out of Scope
Und wird dann aufgeräumt
Das funzt nicht.
Das heißt, wir müssen da einen Pointer draus machen und das danach wieder selbst freeen.
Aber in Ordnung, können wir machen.
So, jetzt, ich hoffe, okay, das ist eigentlich das, was ich umgehen wollte.
Aber seriously, das ist wahrscheinlich trotzdem immer noch die saubere Variante.
Einfach einen Struck übergeben und fertig ist. Easy.
Warum in C++ und nicht in Go?
Weil du auf dem ESP32 mit Go nur schwerlich programmieren kannst.
Es gibt Tiny Go, aber da hast du wieder die Probleme, dass du die ganzen Libraries drumherum nicht hast.
Äh, New? Wie machen wir das jetzt richtig? New, WS-Data?
Chatge, punzt das so jetzt?
Ist das jetzt ein Pointer zu WS-Data? Ja, ist es.
Okay, nice.
So, und wenn wir hier fertig sind, sagen wir Delete.
Ne, Delete.
Aber wir müssen es auch hier sagen.
Ja, das ist jetzt ja wieder...
Oder können wir das mit einem Shared Pointer machen?
Ich weiß, C++ gebastelt.
Aber ich meine, wir müssen ein bisschen was lernen.
Kann man jetzt hier sagen, make charrette.
Make charrette.
Und dann, okay, so, schau mal, nett.
Wo kommt denn hier die Klammer her?
Ah, von hier.
Äh, wait a minute, what?
Irgendwie funktioniert das jetzt.
Make construct.
Hä?
Ich will einfach einen fucking Pointer erstellen da drauf.
Das ist super advanced wieder hier.
Aber ich habe keinen Constructor.
Ich will den Kram so initialisieren.
Warum geht denn das nicht?
Also diese Sprache ist wirklich echt abfuck.
Du musst dafür keine Instanz erstellen.
Ja, aber wie würde ich das denn jetzt machen?
Also, sagen wir mal so hier, ne?
WS-Data?
Aber das funktioniert ja nicht.
So.
Was sagt er? Das tut nicht.
Muss ich dem vielleicht sagen, dass das so ist?
Nee.
Aber so wäre doch viel schöner.
Message?
Server.
Oh, oh.
Okay.
Und das hat jetzt den Vorteil,
dass er das automatisch aufwendet.
Aufräumt.
Oder?
Räumt er das jetzt automatisch auf,
wenn das überall aus dem Scope ist?
Weil das ist ja, glaube ich, der Sinn davon, ne?
Moment.
Wie kann ich das zu einem Void-Pointer casten?
Wie kriege ich denn das Ding jetzt in eine Funktion,
die nur Void-Pointer akzeptiert?
Ich kann das nicht einfach zu einem Void-Pointer casten, oder?
Get.
Aha.
Ups.
What, what?
Get.
Ein was?
Standard-Remove-CV?
What the f...
Nach dem Return ist der Pointer dangling.
Nee, mit einem Shared-Pointer ja eben nicht.
Dafür ist es ja da.
Was?
Moment.
Control reaches end of function 101?
What?
Äh...
Was?
Was?
Da habe ich doch seit 100 Jahren nichts mehr dran gemacht.
Hä?
What?
Was?
Wie jetzt?
Was will der von mir?
What?
Was?
Damit habe ich doch überhaupt nichts gemacht.
Alter.
Wollt ihr mich komplett verarschen oder was?
Was?
Warum reached das das End?
Vor allem, warum erkennt meine Idee das nicht?
Moment, Return?
Ich habe hier einen Return rausgeschmissen.
Ah, jetzt weiß ich, was der will.
Die Meldung ist einfach nur wieder richtig dumm.
Ich habe keine Ahnung, Mann.
Mit irgendwelchen random Dateien, Mann.
Die Fehlermeldungen sind so scheiße.
Guckt euch das mal an.
Was will der überhaupt von mir?
Wo ist das?
Wo ist das Problem, Alter?
Wo ist das Problem?
Was?
Was?
Ich habe nie in meinem Leben in FNT in Clued irgendwas editiert.
Ich habe die Datei noch nicht mal geöffnet.
Und Mann, was soll uns das sagen?
Seriously, ich habe absolut keine Ahnung, wo das herkommt.
Sonst sieht man ja auch sonst.
Sonst sieht man nichts, ne?
Erkennt man da vielleicht noch irgendwas?
Helper, Zeile 12.
Main CPP-Zeile.
Helper, Zeile 12.
Okay.
Aha, das ist irgendein Log.
Irgendein Logging mag nicht.
Irgendein Logging mag nicht.
Zeile 12.
Zeile 12 ist ziemlich weit oben.
Ne.
Ey, es kann auch alles kompliziert sein, Mann.
Ist Significant überhaupt richtig geschrieben?
Ne.
Significant.
Okay, ich meine, seriously, was hat sich hier getan?
Was kann das sein?
Ich meine, wo habe ich denn was gemacht?
Ich habe hier gesagt Null?
Ey, das ist doch wieder absoluter grausamer Scheiß, Mann.
Ich mache das jetzt einfach rückgängig.
Dass es geht.
Ich drehe echt am Rad bei dem Scheiß gerade.
Ich sehe das nicht ein, jetzt alles rückgängig zu machen.
Ich sehe es nicht ein.
Was könnte das sein?
Okay, wir machen wieder die übliche Geschichte.
Wir kommen hier hinaus.
Was sollen wir machen?
Nachdem die Fehlermeldung ja nicht zuordnenbar ist,
irgendwie,
kommentieren wir auch.
Gucken, ob es funktioniert.
Das ist schon mal nett.
Also, in der Funktion ist es schon mal nichts.
Ist es was in WS-Händler vielleicht?
Ist hier irgendwas in Main oder so?
Ey.
What the fuck?
Der Aufruf in Main ist es?
What?
Wollt ihr mich komplett verarschen?
Der Aufruf von der leeren Funktion ist es?
Ne.
Doch nicht.
Okay.
Los, auskommentieren wir da.
Okay, funzt.
Einkommentieren wir da.
Funzt.
Einkommentieren wir da.
Funzt.
Ey, das war's.
Das haben wir exakt den Stand erreicht, der eben nicht ging.
Wir haben exakt das, was eben nicht lief.
Haben wir wieder.
Und es läuft jetzt.
Ja gut, das haben wir noch.
Das ist ja ein Fehler, den habe ich ja nachvollziehen können.
Can't wait, man.
So.
Jetzt habe ich aber ganz vergessen, wo er stehen geblieben ist.
Hat das jetzt hier eigentlich, war das hier jetzt fertig?
Ey, passt doch eigentlich soweit, oder?
Okay.
Zack.
Data.
Diesen Shared Pointer Shit, den lassen wir jetzt einfach sein.
Shared Pointer.
S-Void Pointer.
Geht das?
Ne, ne, umgedreht.
Shared Pointer.
Shared Pointer.
To.
Void Pointer.
Ach komm, scheiß drauf.
Mir doch egal.
Wir lassen es weg.
Wir sagen jetzt WS-Data.
New WS-Data.
Das kannst du doch alles knicken, oder?
Punkt.
Visual Studio Code.
Please.
Handler.
Gleich.
Server.
Oder auch nicht.
Ach ne, Handle.
Blöde Frage.
Aber warum geht das mein Auto komplett nicht mehr?
Warum geht mein Auto komplett nicht mehr?
Message.
Gleich Message.
Egal, Autocomplete, Overrated, Outdated, Cheap Aided, brauchen wir nicht.
Oh, und das ist jetzt Casten zu Void Pointer, okay, nice.
So, jetzt müssen wir natürlich noch gucken, dass das richtig aufgelöst wird, aber mein...
Okay, wurscht.
Äh...
Moment, was?
Warum?
Ah, mein Autocomplete ist wieder kaputt.
Warum ist mein Autocomplete wieder kaputt?
Äh, WS-Händel?
Sollte eigentlich funktionieren.
Ach so, ESP-Error.
WS-Code ist ganz schön oft block...
Okay.
War's das jetzt?
Kann ich jetzt endlich Text per Websocket anzeigen?
Wir haben nur 3 Stunden 45 Minuten dafür gebraucht?
Kompiliert das überhaupt?
Okay.
Pausechamp.
Ist compiled.
Das Daumen ist übrigens mittlerweile hängen geblieben, was kein allzu gutes Zeichen ist.
Äh...
Ja, alles klar.
Jetzt bin ich mal gespannt.
Es crasht jetzt garantiert, weil ich irgendwas beim Umbauen übersehen hab.
Äh...
Ne, es geht, Leute!
Es geht!
Ich kann per Websocket mir Zeug schicken lassen.
Wobei das bisschen hakelig ist, oder?
Guck mal.
Wenn ich Enter drücke, dann geht's?
Hä?
Wie sie verbuggt.
Wie sie verbuggt, das Ganze, hä?
WS...
Ja!
Und das auf so vielen Verbindungen, wie ich will.
Irgendwas ist noch sass.
Nee.
Ich glaube, das liegt...
Oh.
Ach, wenn ich Enter drück...
Wenn ich Enter drück, da kommt jedes Mal die neue Message.
Wett?
Brauch ich das ganze Zeug überhaupt?
Moment, wenn ich Enter...
Ach so, wenn ich Enter drücke, dann schick ich ne Text-Message dahin.
Ja, nee.
Das ist ja nicht wirklich das, was ich... was ich haben will.
Aber das klappt schon mal ganz brauchbar jetzt, oder?
Mein Besser?
Ich mein, der macht ja hier nix.
Ja, der... der gibt einfach den Text aus, der geschickt wird und gut ist.
Und ich will ja auch nicht vom Client zum Server kommunizieren.
Ich will ja nur vom Server zum Client kommunizieren, wenn's neue Sensorwerte gibt.
Okay, dann probieren wir das doch mal aus, hier.
Schicken wir doch mal JSON-Werte zurück an unser Webfrontend.
Und lassen das mal darstellen.
Da bauen wir mal irgendeine JSON-Response da draus,
die irgendwie halbwegs sinnvoll aussieht.
Moment, nee, nicht hier, an der Stelle hier.
Irgendwas, was man in JavaScript Frontend verarbeiten kann.
Da ist sogar ne JSON-Library dabei, glaube.
Wobei man diesen kur... dieses kurzes Zeug hier können wir auch...
Können wir auch so bauen.
Ähm, also, wir... wir antworten jetzt mal irgendwas mit...
Einfach nennen wir's Uptime, okay?
Ja, hier.
Message.
Message gleich.
So.
Ähm.
String-Template.
String-Templates gibt's ja net.
Wir probieren das jetzt mal aus.
Das heißt C-JSON.
Heißt das Ganze C-JSON.
Irgendwie so.
Kann man das includen?
Oh.
C oder groß geschrieben.
Wobei, sorry, Leute, ich meine natürlich J-JSON.
C-JSON include.
Und dann zähl ich Create.
Object.
Okay.
So.
Message.
Jetzt können wir sagen, C...
Das ist dann tatsächlich ne halbwegs brauchbare Library.
Add String to...
Oder nee.
Add Number to Object.
Message.
Und da will ich jetzt mal ne Millisekunden hinzufügen.
Ne, Moment.
Moment, Moment.
Brauch ich erst noch ne Key.
So.
Mein Key ist...
Pja.
Uptime.
Moin Dark Assassin.
Uptime.
So.
Und wir fügen noch ein bisschen anderes Zeug hinzu, um zu gucken, ob's funktioniert.
Ähm.
Keine Ahnung.
So.
So.
So.
So.
So.
So.
So.
So.
So.
So.
So.
So.
Keine Ahnung.
Habt ihr...
Habt ihr irgendeine glorreiche Idee?
Äh.
Die IP.
Die IP-Adresse.
Okay.
Die IP.
Fügen wir hinzu.
Okay.
IP.
Wifi.
Äh.
IP.
Local...
Local IP.
Aber das ist nicht Number.
To ähm.
Add...
String to Object.
Und dann...
Noch?
Keine Ahnung.
Freier Speicher.
Hat mein Stream gerade ge-lagged, Chat?
Gerade laggert?
Freier RAM.
Ja, freier RAM ist gut.
Na klar, kannst fragen, was du willst.
U-String.
C-String.
So.
Ja.
Okay, und jetzt noch freier RAM.
Okay, freier RAM.
Add number.
Memory.
Memory Usage machen wir.
Memory Usage oder Memory Free?
Wir machen Memory Usage.
Und wir machen Memory Size.
Da weiß ich nämlich, wie es funktioniert.
Nämlich ESP.
Oder irgendwie Heap Size.
Genau.
So.
Und Memory Usage ist dementsprechend dann.
Heap Size minus.
Und dann gibt es auch so etwas wie Free.
So.
Beste.
Okay.
Und jetzt C-JSON Print Message.
So.
Und das muss ich nämlich danach löschen.
Sonst gibt es eine Memory Leak.
C-JSON Delete.
Sonst leake ich ganz hart Memory.
So.
Das können wir jetzt schicken.
Passt so.
Eigentlich alles gut.
Dann machen wir das mal.
Und jetzt müssen wir das in unserem Webfrontend reinwurschteln.
Machen wir das mal in den Browser hier mal zu.
Ich bin am überlegen, meinen PC umzustellen von Gaming und editieren auf reines Gaming.
Das hat doch sehr große Überschneidungen, oder?
Hab aktuelle 5950 drin.
Den komme ich jetzt nicht mehr.
Ganz ehrlich.
Wenn du ein System hast, wo du super drauf gehst.
Hast du auch ein System, auf dem du super editieren kannst.
Zu den aktuellen Ryzen CPUs kann ich dir nichts sagen.
Ich kenne mich damit nicht aus.
Ich kenne mich damit nur aus.
Was war jetzt?
WiFi failed?
Okay.
Ich habe mich, glaube ich, einfach zu oft verbunden.
Okay, wir kriegen eine JSON Antwort.
Das stimmt mich schon mal positiv.
Okay, Browser aufmachen.
Jetzt bauen wir das mal in unsere Webseite.
Wir bauen eine Web-Anwendung ein.
CD, Web-App, NPM, DEV, NPM, RUN, DEV, LOCAL HOST, 5, da war es doch, 5, 1, 7, 3, oh, Keckel.
So, jetzt, jetzt, Chatgear, wie macht man eine ordentliche Websocket-Verbindung im Browser?
Das, weiß ich nicht, JS-Websocket, wie funzt denn das?
Da gibt es bestimmt eine schöne Library fertig, oder?
New Websocket.
Chat, würdet ihr die Web, würdet ihr Websockets direkt im Browser machen?
Oder irgendeine Library verwenden, die das, die das handelt?
Ich kenne mich damit, ich kenne mich damit nicht gut aus.
Was ist das für ein Example?
Im Browser.
Wie funktioniert die?
Okay, das sieht easy aus.
Easy sieht das aus.
So, ich meine, wir machen ja hier noch nichts großartig drin.
Script, Websocket.
Ja gut, gibt es keine Verbindung, das ist mir auch klar.
So, das müssen wir höchstwahrscheinlich proxien.
Ich gehe mal davon aus, dass das so nicht funktioniert, wenn ich direkt mich darauf connecte, oder?
WS, oder?
Wie funzt das hier?
Was ist denn der zweite Parameter hier?
Protokolls?
What?
Kann man doch bestimmt weglassen.
Aha.
Äh.
Der mag nicht, der mag nicht, weil...
Ja doch, hat doch, hat doch funktioniert, oder?
WS-Message, Hello Server.
Hat das...
Ja doch, guck mal.
Ha!
Ich krieg mein Chasen-Zeug.
Guck mal.
Hat funktioniert.
Bam, bä, bä, bam.
Das juckt ihn überhaupt nicht, dass, dass der Server nicht trusted ist.
Okay, ich sende auf jeden Fall nichts zu dem Server.
On Open.
On Message.
On Close.
Juckt mich auch nicht.
Mich interessiert eigentlich wirklich nur das hier.
Ja.
Ja.
Okay, das braucht ein bisschen.
Das, das braucht ein bisschen.
Weil, weil, weil der, weil der für den Handshake eine Weile braucht.
Clear Lock.
Sehr schick.
Gefällt mir.
Ich würde sagen, wir machen, wir tragen in unsere VEET-Config mal einen lokalen Proxy ein.
Und gehen nicht direkt auf den Server.
On Close machen wir.
VEET-Config, wenn ich das jetzt noch zusammenkriege, irgendwas mit Server ist es.
Aber weiter weiß ich nicht.
VEET-Proxy-Server-Web-Socket.
Ja.
Web-Socket.
Das da, genau.
Proxy-slash-
Wie, was?
Ach, Proxy.
Muss ich noch reinschreiben.
Proxy.
So, gell.
So.
Proxy.
Und dann, was?
Aha, nochmal, nochmal einen.
Okay, Socket.io.
Juckt mich ja nicht, sondern wir proxien slash WS auf WSS, äh, ups, WS.
Und jetzt müssen wir irgendwie noch sagen, SSL ignore, glaube.
Ja, Connection refused, weil?
Weiß man nicht.
Ach so, wenn man jetzt noch die richtige Adresse angibt, dann funzt das auch.
5173.
Ja, Handshake.
Certificate.
Äh, wie ignoriert man den Kram denn?
VEET-Ignore-SSL-Certificate.
Chad und Max, mal ne Frage.
Wenn ihr ein Gerät eindeutig identifizieren müsst im Netzwerk, welchen Wert würdet ihr nehmen?
Guid, Ui.
Du meinst was, was du selbst programmierst.
Ansonsten würde ich sagen, mach den Klassiker, nimm die MAC-Adresse.
Das ist zwar nicht hundertprozentig sicher und fälschbar, aber die Arbeit macht sich kein Normal.
Aber du willst irgendwas selbstprogrammiertes haben, ne?
Also quasi eine Software willst du eindeutig identifizieren können.
Also ganz ehrlich, für mich ist ne UID und ne GUID das gleiche.
Also dementsprechend, secure of false muss man setzen.
Chad, ihr dürft mich gerne erleuchten.
Was ist der Unterschied zwischen ner GUID und ner UID?
Okay, warum geht das jetzt nicht?
Nothing, man.
Ah, Slash WS, Slash WS.
Ja, ja, das brauchen wir nicht.
Es geht!
Bam!
Guckt's euch an.
Ordentliche Konsolenausgabe.
Nice.
So, da kommt jetzt auch nicht Keckel hin, sondern jetzt machen wir mal hier Svelte, Svelte-Logik.
Let lastMessage gleich leer.
LastMessage.
Ja, Object.
Ach so.
Äh, Jason, Stringify.
Da gab's auch irgendeinen Trick, dass man das nicht gebraucht hat, ne?
Und jetzt kann man irgendwie noch sagen, PrettyPrint.
Oder wie ging das nochmal?
Please.
Jason, Stringify, PrettyPrint.
Ach, 0 und dann 2.
Okay.
0, 2.
Okay, LastMessage gleich.
Äh, schönes was anderes.
Was?
Das ist nicht richtig geparst.
Ach so, warte mal, das kommt als String.
Ich muss erst mal sagen, Jason, Parse, oder?
Vorher.
Ja, okay.
Und jetzt machen wir das Ganze preformatted.
Okay, 4 vielleicht.
Oh, jetzt haben wir, ich glaube, wir haben den RAM voll gemacht, oder?
Fail to QWork.
0.
Ich glaube, das WiFi ist gerade einfach abgekackt.
Oder ist der RAM voll?
Wir sehen das ja.
Wir sehen das ja hier, guck mal.
Wow.
Leute, unsere RAM-Usage stonks.
Jetzt ist die Frage, haben wir irgendwie eine Memory-Leak?
Oder queue ich einfach mehr Work, als der Server abarbeiten kann?
Das kann ja auch sein.
Du hast einen Call zu Neutrin ohne Delete.
Stimmt.
Da waren wir ja eigentlich dabei, das ist richtig.
Wir haben hier dieses Data-Ding.
Das löschen wir nicht.
Hier, das da.
Das da, löschen wir nicht.
Ja, ja, du hast recht.
Data wird nie gelöscht.
Also, im Endeffekt sind Grid und UID gleich, aber Microsoft folgt wohl Special Stuff.
Ja, und was ist, laut dem Special Stuff von Microsoft, ist der Unterschied?
Also, ganz ehrlich.
Äh, ups.
Nehmen einfach das, was deine Standard-Library standardmäßig hat.
Es macht teilweise wirklich Sinn.
Es macht teilweise wirklich Sinn, sich die Unterschiede zwischen den verschiedenen Versionen anzugucken.
Es gibt ja voll randomized, basierend auf Zeit teilweise drinne und so.
Macht Sinn, aber ich würd einfach sagen,
new, good und gut ist.
Ey, ich glaube mittlerweile, Leute, wir queuen,
wir queuen schneller Work, als das abarbeiten kann.
Weil viel kann hier nicht, kann hier eigentlich nicht liegen drinne.
Ja?
Also, Data wird auf jeden Fall deleted.
Benutzt man nicht free.
Na, delete geht auch, weil ich hab's, ich hab ja new gemacht mit, ähm, mit C++.
Also, das, äh, wenn du was mit new machst, kannst du's eigentlich auch mit delete wieder löschen.
Ich glaube, wir queuen einfach zu viel.
Komm.
Wir, wir machen mal, wir, wir erhöhen das mal ein bisschen auf ne Sekunde.
Das sollte ja eigentlich passen.
Und ansonsten wüsste ich jetzt echt nicht, wo, wo könnte ich mein Memory Leak haben hier drinne.
Aber das Einzige, wo ich was mache, ist ja wirklich das hier, ne, mit new.
New.
New vs. Data.
Das ist das Einzige, was ich hier mache an der Stelle.
Ich hab nen Memory Leak.
Ich weiß nicht wo, Leute.
Ist das Platform.io?
Nein, das ist, ähm, ESP EDF.
Weil Platform.io mir immer so, so lange hinten dranhängt mit Package Updates und allem.
Wo hab ich denn da jetzt bitteschön nen Memory Leak?
Bei meinem Jason irgendwie?
Ach, ich weiß.
Leute.
Wisst ihr, wo ich das Memory Leak hab?
Das ist, das Problem hatte ich schon mal mit genau dieser gleiche Library.
Das hier.
Das hier.
Allocate in nen String Array.
Und das muss man freeen.
Und jetzt hab ich auch kein Memory Leak mehr.
Moment, wir brechen mal ab.
Machen jetzt wieder 100 Millisekunden draus.
Das hatte ich schon mal.
Das hatte ich schon mal.
Das ist aber auch so nichtssagend, ja.
Du denkst nicht dran, dass das irgendwie.
Aber ich mein, das ist logisch.
Es kommt nen Character Array raus.
Das muss ja irgendwo allocated sein.
Meint ihr auch, dass jetzt fixed ist?
Chat, was meint ihr?
Fixed oder not fixed?
Memory Leak fixed oder nicht fixed?
Also ich tippe auf zu 99% gefixt.
Mit Rust, das stimmt.
Das wäre tatsächlich mit Rust nicht passiert.
Ich tippe auf 99% gefixt.
Vielleicht noch irgendwo was Kleines, woanders.
Aber nope.
Da liegt nix, Leute.
Nix liegt da mehr.
Alles stable.
Es schwankt ein bisschen.
Das ist okay.
Der muss ja Web Request und alles verarbeiten.
Da liegt nix.
Pog.
So.
Und läuft noch alles.
Okay, scheint noch zu laufen.
Keine Memory Leaks, oder?
Keine Memory Leaks?
Sieht immer noch gut aus.
Wir haben ein bisschen mehr Memory Usage, weil wir jetzt 3 Sessions gleichzeitig aufhaben.
Das ist ja klar.
Guck, es wird auch weniger, wenn ich die Browser zumache.
Ja.
Richtig nice, Leute.
Websocket stellt's am Start.
Wie viele MB haben deine ESP32?
Die normalen haben 4 MB.
Das hier ist allerdings ein...
Ich mach mal ein bisschen was zu, weil ich das alles nicht mehr brauch.
Das hier ist allerdings ein ESP32 S3.
Und der hat 16.
Riesengroße 16.
Riesengroße 16 MB RAM.
Aber Partitionstabelle müssen wir jetzt machen.
Deine haben 2?
Dann müssen das aber ganz alte und ganz billige Module sein.
Ja, 2 gab es.
Aber die haben eigentlich schon ewig die bisschen schöneren, neueren 4.
Mit 512 MB.
What?
Nee.
Was hast du für welche?
Ich mein, es gibt bestimmt noch...
Also ich weiß, dass es welche mit...
Aber das sind die ganz alten mit 2 MB Flash.
Bist du sicher, dass das nicht 2 MB PS RAM sind?
Wobei das sind S3, ja.
Aber 2 MB Flash ist echt...
Also 2 MB Flash ist kein Problem.
Du kannst mit 2 MB Flash auch alles machen.
Was du mit 2 MB Flash...
Was mit 2 MB Flash schwierig wird, ist OTA zu machen.
Also es ist kein Problem.
Also es ist kein Problem, auch um einen umfangreicheren Sketch,
auch mit einem Display dran und allem, unter 2 MB zu halten.
Das geht.
Was schwierig wird mit OTA.
OTA heißt ja im Endeffekt, dass du Updates einspielen kannst über WiFi.
Und dafür brauchst du immer die Größe deiner Firmware mal 2.
Als Flash.
Weil von einer Firmware läufst du ja gerade.
Und dann brauchst du quasi noch einen anderen Speicher auf deinem Flash.
Der genauso groß ist wie deine Firmware von der du gerade läufst.
In den Bereich flashst du rein über WiFi.
Und dann rebootest du das Ding und startest vom anderen Memory Bereich.
Beim nächsten OTA Update schreibst du im ersten Bereich.
Rebootest startest vom ersten Bereich.
Und dann so hin und her.
Also wenn du OTA machen willst, also Wireless WiFi Updates.
Dann sind 2 MB ein bisschen knapp.
Aber ansonsten kannst du ausnahmslos alles auch mit 2 MB Flash machen.
Ja aber ich kenne kein Modul was irgendwie noch 2 MB hat.
Was hast du denn nur für Module?
Aber wenn der Bootloader.
Mir fällt jetzt echt kein.
Also mir fällt kein Modul ein was nur 2 MB hätte.
Ist das vielleicht nochmal zusätzlich angebundener Flash?
Speicher?
Ansonsten weiß ich auch nicht.
Vielleicht ist es noch ein ESP8266.
Die hatten ein bisschen weniger manchmal.
Okay.
Ja gut.
Die haben übrigens auch ganz schön verkackt, dass sie sich nicht Eats Delivery.
Vroom ist das Chip Layout.
Das hat nichts.
Das da?
Der NodeMCU Nachbau von denen.
Den da?
Der da?
Die haben doch im Leben keine nur 2 MB.
Flash.
Ne der hat 4 MB Flash.
Also.
Ich würde mal versuchen 4 MB drauf zu flashen.
Ich bin mir ziemlich sicher, dass deine auch mindestens 4 MB hat.
Also mir ist kein Modul irgendwie jetzt so aus dem Kopf bekannt vom ESP32 der nur 2 MB hätte.
Ich weiß, dass es das gibt, weil du kannst das in der IDE auswählen.
Du hast nur 2 MB Flash.
So was habe ich gesagt wollen wir jetzt machen?
Ich.
Also Websocket Campbell Funst ja.
Partitionstabelle müssen wir machen.
Genau.
Partitionstabelle.
So.
Mal gucken was meiner sagt.
SPI Boot Flash.
Achso ich war ein bisschen lahm ja.
Monitor.
Also meiner sagt.
Meiner sagt hier meine Boot.
Ne das stimmt auch nicht wirklich.
Ah doch hier meine Partition Table.
SPI Flash Size 16 ja.
Also wenn du da nur 2 hast wäre echt sehr sehr merkwürdig.
Weißt du was?
Weißt du was?
Wir probieren jetzt mal was aus.
Wenn ich in meine IDE umstelle.
Warte mal.
Ich stelle jetzt in meiner IDE das mal um.
Flash Size.
Ich habe es hier nämlich auf 16 gestellt.
So.
Ich stelle das bei mir jetzt auch mal auf 4 um.
Und dann mal gucken.
Was der beim Booten anzeigt.
Ob das.
Ah jetzt muss der neu kompiliert.
Mal gucken was das damit.
Wir machen übrigens.
Und zwar eine neue Partition Table dafür.
Wir haben hier 16 MB RAM.
Generator.
Da können wir wirklich.
Sehr sehr großzügig sein.
Ja.
Kein ZigBee.
Kein Storage.
PINIT brauchen wir auch nicht.
OTA 0.
Genau ESP32.
Lass mal gucken ob das.
Nein ich ändere es ja gerade.
Ich flashe es.
Lass mal gucken.
Ob das wirklich.
Damit zusammenhängt.
Ich flashe das jetzt.
Dann gucken wir mal ob bei mir auch 2 MB drinnen steht.
Also ich könnte wetten.
Dein Modul hat 4 MB.
Ich kenne kein ESP32 Modul.
Ja.
Guck jetzt steht hier auch 4 drinne.
Das wurde.
Das wurde wahrscheinlich einfach mit der Standardgröße geflasht.
Aber du hast bestimmt.
Du hast bestimmt mindestens 4 MB.
Wenn du was Neues hast vielleicht sogar mehr.
Guck mal.
Das geht bis.
Bis 128.
Alter.
Okay.
128 habe ich auch noch nicht gesehen.
Aber.
Aber meins hat 16.
So.
Okay.
Wir müssen uns mal eine Partitionstabelle generaten dafür.
Ja die Arduino Partitionstabelle die können.
Ach guck mal.
Ja nee.
Das ist ja.
Ist ja für den Arsch.
3 MB App.
Und.
Und 10 MB File System.
Nee das brauche ich nicht.
Recorddump brauche auch keiner.
Woop.
Woop woop.
Woop woop.
Doch das kann man einstellen.
Wenn du Platform IO verwendest dann kannst du es in der Board Config einstellen.
So okay.
Wir müssen uns eine Partitionstabelle generaten.
Wichtig ist der erste Offset muss bei aus welchen Gründen auch immer 9000 anfangen.
Und der App Offset muss bei 10.000 anfangen.
Also in Hex und beide Male.
Größeres Vielfaches von 10.000 sein.
Warum?
Ich weiß es nicht.
KB 2 MB.
Okay.
Ja.
Also ich meine Leute wir haben.
So viel RAM.
Ich brauche eigentlich gar nicht so viel so viel Flash.
3 MB ist mehr als genug für eine Firmware Partition.
Wir machen einfach 4 oder?
Wir machen 4 MB.
4 MB 4 MB.
Dann habe ich 8.
Und den Rest machen wir.
Den Rest brauche ich nicht.
Ne komm.
Wir machen.
Dann machen wir es ist eine schöne Größe.
Das File System brauche ich nur für ganz kleine Sachen.
Eigentlich brauche ich das gar nicht.
Also wir machen.
Wir haben 16 MB RAM.
Wir machen 7.
7 7 für die für die für die Apps.
7 MB 7 MB.
Dann haben wir haben wir 14.
Und den Rest für.
Das ist okay.
Ja.
Okay.
7 MB.
Aber.
Äh.
Äh.
7 MB zu.
Äh.
Warte mal.
Ist das hier.
Das ist hier nicht in KB.
Das ist in.
Das ist in Byte.
Oder.
Ja.
Das sind Byte.
Hat.
Alter.
Kann es mal das vielleicht ausschreiben.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Beide müssen beschrieben.
Was könntest du.
Irgendwann.
Aber.
Was könnte je.
7000.
Aber wenn ich will.
Maybe ich will Soul Med な thumbs up
Maybe Beid.
Ich will.
Weil 1 024 die Feder ми Man die 1 024 haben.
Der Google Calculator ist dafür doughірre wieder voll für.
Mant DOT Deshalb !
Gewinne!
Woohoo.
Dann.
Wah, puedes serial.
gran hac con Barcode.
Das macht richtig usw.
Und der glaubt nicht.
Aber bekommt Wir können auch selbst Aussprache bringen.
grievante Spur dünne Obd sushi increasing.
Aber warum?
Okay, das ist...
Das soll bei...
Okay, sieben.
Sieben.
Warum ist das alles so schrottig, Mann?
Ich rechne es doch selbst aus, Kleiner.
Ist das nicht irgendein ordentlicher...
Alter, in welchem Jahrtausend leben wir denn?
Guckt euch das mal an.
Kilo ist 1024, okay.
Es gibt es nicht, okay.
Es muss doch irgendeinen ordentlichen Byte-Converter geben.
Gibt es da... Warte mal.
Byte, Size, Convert, Linux.
Da gibt es doch bestimmt ein CLI-Tool.
Ja, please, noch komplizierter.
CLI.
Ja, ich...
Nur weil man es von Hand machen kann,
heißt es nicht, dass man es von Hand machen möchte.
What the hell?
Gepiped nach hier.
Units.
Ah, BC.
Jetzt...
Ich finde das echt interessant, dass...
dass es dann keine gescheite...
Wahnsinn, oder?
What the hell?
Das ist doch das Simpelste auf der Welt.
Warum gibt es sowas nicht?
JavaScript.
Ja, geil.
Beste.
Witzig eigentlich, dass es das nicht gibt, oder?
Komisch.
Naja, gut.
Ich meine, das sind mal zwei.
Oh, ein sechs.
So, Bytes to Megabytes.
Was?
Was ist mit dem Google-Shit los, Alter?
Nein!
Es wird Zeit für den Byte-Champ.
Ja, sehe ich auch so.
Sechs Maybe-Byte.
Genau, weil wir wollen 1024 haben.
Ich dreh am Rad.
Was?
Warum kann das keine gescheite...
Darstellung?
So ein Shit, Mann.
Guckt euch das an.
Wir können es uns easy machen, ja?
Wir können es uns easy machen.
Das sind sechs.
Geteilt durch sechs.
Ist eins.
Plus das da.
Sieben.
Bytes to Megabytes.
Oh.
Maybe-Byte.
So, das will ich haben.
Ich weiß nicht, warum das Flightpedia...
Alles klar, ja, genau.
Also, sieben MB.
Ist das selbst gerechnet, ist das deutlich einfacher.
Alles da drin.
Okay, sieben MB...
Äh...
What?
Ja, geht doch.
So, jetzt muss natürlich der Offset hier eine ganze Ecke hoch, das muss auch sieben sein.
Muss der Offset hier richtig weit hoch und zwar...
Oh, nein.
Wer programmiert denn diesen ganzen Mist hier?
Wer programmiert das denn?
Ist ja Wahnsinn.
Dass das alles nicht funktioniert.
What the...
Drei, vier...
Oh, Moment, ich bin zu viel, ich hab zu viel.
Drei, vier...
Nee, nee, nee, nee, das will ich nicht.
Ich will das da haben.
Drei, zwei...
Ich glaube, ich überfordere die ganzen Tools, Leute.
Ich glaube, ich über...
Ich...
Das macht da nicht mit.
Ah, Moment, Moment, Moment.
Two Hex.
Ja, ja, ja, okay, okay.
Ich hab nix gesagt.
Alles klar.
Okay, gut.
Ich hab nix gesagt, ich hätt's in Hex umwandeln müssen.
Also, jetzt haben wir sieben MB.
Was soll ich subtracten?
Äh, what?
Was will es von mir?
Please.
Einmal Tools, die funktionieren.
Ah, meine Flash Size.
Das ist zu klein.
4.096 mal vier.
Okay.
Alles klar.
Gut, das hab ich gecheckt.
So, NVS.
Wie groß ist das NVS?
20K reicht auch, Dicke.
So, okay.
Jetzt haben wir im Prinzip noch...
Was ist denn das jetzt?
Zwei MB ungefähr.
Zwei MB frei.
So, für was verwenden wir die jetzt?
Einfach eine random...
Partition für OTA-1, OTA-2.
Äh, Data.
Ja.
Core-Dump brauchen wir nicht.
Ich weiß bis heute nicht, was die Core-Dump-Partition, für was die eigentlich da ist.
Also, ja, um einen Core-Dump aber zu speichern.
Aber will ich das?
Das ist doch nur, wenn der in freier Wildbahn abkackt und ich das Ding irgendwie analysieren will.
Will ich doch nicht.
Will ich doch überhaupt nicht machen.
Okay, dann wollen wir hier jetzt...
Spiffs.
Wobei wir nicht Spiffs verwenden, sondern, ähm...
Ich nenn das einfach nur so.
Wir nehmen LittleFS.
Das ist das modernere Spiffs.
Mit einer 100% sicheren Code schreiben wir nicht.
Wir schreiben 100% fehlerfreien Code.
Ist ja nicht unbedingt das Gleiche.
Oh.
So lange klicke ich jetzt hier aber nicht.
Also, wir brauchen wahrscheinlich...
Also, wir brauchen wahrscheinlich...
2, 0, 0, 0, 0, 0?
Not a number.
Okay, nice.
Also, 7 MB OTA-Partition, 7 MB 2. OTA, 2 MB Filesystem und 20 KB Key-Value-Store für Settings.
Das hört sich doch gut an.
Oh.
Äh, in dem wollte ich das jetzt nicht öffnen.
Also brauchen wir jetzt hier newfile-partitions.csv, zack, ich hoffe das flasht jetzt, spiffs, soll littlefs sein, glaubt man, wir sollten das aber spiffs nennen, weil das der Default-Name ist.
So, dann müssen wir hier reingehen und sagen, wir wollen eine Partition-Table, Custom-Partition-Table, die partitions.csv heißt, ESP-EDF, Partition-Table, gibt's hier nicht sowas wie Partition-Table-Generate, Partition-Table-Generate.
Dann sehen wir mal, ob das richtig ist, was wir da gebaut haben.
Ja, jetzt muss er nochmal neu kompilieren, weil ich hab Menü-Config auf, easy, okay, nice, also wir haben, haben wir doch gut ausgerechnet, 20 Kilobyte Key-Value-Store, 8 Kilobyte für irgendwelche State-Geschichten für Updates, 7 MB Partitions für die Anwendung, muss man ja mal 2 rechnen und knapp, knapp 2 MB High-System, das ist doch gut, Flash.
Sehr nice, okay, also 18 Uhr muss ich was futtern, aber bis dahin machen wir auf jeden Fall noch Programmstells.
Was haben wir denn als nächstes noch, was wir ausprobieren, nächstes Mal, nicht, ich sag absichtlich nicht nächsten Stream, weil nächsten Stream machen wir was anderes, ich dreh langsam am Rad hier von ganzen Microcontroller C++-Gramm, aber nächstes Mal, wenn wir mit dem Ding rumbasteln, dann mal mit Display, dann mach ich die Kamera an.
Und wir versuchen mal das Display anzusprechen davon, hier schauen wir mal, ob noch alles funktioniert, nice, ich bin begeistert, also jetzt, jetzt, mal ehrlich Leute, wir haben uns zwar ein bisschen mit rumgequält hier, gell, aber insgesamt ist das Handling von diesem eingebauten Web-Server-Framework doch echt nicht verkehrt.
Die Beispiele sind brauchbar.
Und es funktioniert.
Ich finde, da kann man sich nicht beschweren.
Das war vor ein paar Jahren noch deutlich nerviger.
Äh, by the way, ich hab ne Idee, wie wir das vielleicht noch verbessern könnten.
Kann man nicht, hier drinnen jetzt nen Pointer draus machen, Shared Pointer, hier jetzt nen Pointer draus machen, und dann ihm sagen, wie er aufräumen soll?
Das ging doch irgendwie.
So, ne?
Jetzt kann man sagen, hier, ähm, irgendwie so ging das doch.
Aber ich bin natürlich, wie immer, zu Pepega, C++-Krams zu checken.
Kannst du nicht einfach einen Destructor zu deinem Struct hinzufügen?
Der Destructor läuft doch nur, wenn ich Delete calle, oder?
Nicht, wenn es irgendwie aus dem Scope geht.
Ah, ich weiß, warum das nicht funktioniert, weil es den falschen Wert hat hier.
Ich muss das casten zu nem Web-Server.
Ah, jetzt funktioniert's.
Beides, Delete und aus dem Scope.
Ne, aus dem Scope wird der Destructor nicht laufen.
Das macht ja keinen Sinn.
Ich mach ja explizit was mit New, dass die Lifetime länger ist als meine Funktion.
Ne, das kann ja nicht sein.
Aber das müsste jetzt funktionieren.
Und jetzt brauche ich kein Delete mehr.
Hier drinnen.
Das müsste so funktionieren.
Und das können wir auch mal ausprobieren, ob das so funktioniert.
Indem wir jetzt einfach mal hier loggen.
Machen wir mal Log.
Wir loggen mal Warning, dass ich es auch sehe.
Ja.
Ähm, ja.
Wobei, eigentlich muss ich gar nicht hier.
Deleted.
Sehen wir mal, sehen wir mal, ob das jetzt gecallt wird.
Boah, das Flashen ist schon langsam mittlerweile.
Ja, Funst.
Es geht aus dem Scope und wird automatisch aufgeräumt.
Okay, das ist mal eine sinnvolle Erfindung.
C++-Hackermans.
Es geht aus dem Scope und wird automatisch aufgeräumt.
Nice.
So, und das Ganze jetzt noch please in eine Zeile.
Dann bin ich happy.
Ja, das geht natürlich nicht.
Es muss in irgendeiner Art und Weise immer hässlich formatiert sein.
Einfach, dass so eine Zeile ist outdated, overrated.
Das wollen sie nicht.
Haben sie keinen Bock drauf.
Wisst ihr, es gibt ja andere Programmiersprachen, die syntaktisch deutlich schöner sind.
Da könnte man sowas hier schreiben.
Aber das ist einfach zu hübsch.
Das geht nicht.
Das kann man nicht machen.
Das muss hässlich sein.
Das sind so die Sachen, so die Gedankengänge wahrscheinlich von den C++-Gremiums-Mitgliedern.
Die sagen so, nee, nee, das auf den ersten Blick und keine komischen Klammern irgendwo.
Ah, nee, nee, nee, nee.
Und die Python-Leute sind noch besser.
Lambda-Sachen maximal eine Zeile.
Das sind auch so Dinge, wo ich mir denke, was ist mit denen los?
Ich weiß, dass man damit explizit Sachen capturen kann.
Ich glaube, das hier darf man theoretisch sogar weglassen.
Ich glaube, die Klammern darfst du theoretisch weglassen, wenn du keine Argumente brauchst.
Naja, schön ist was anderes.
Was ist, wenn ich das so mache?
Sieht ja immer beschissen aus.
Dann darf er es so formatieren und gut ist.
Python-Lambdas sind schrecklich, ja.
Ich finde das echt ganz hübsch so.
Okay, Partitionstabelle am Start.
Mit dem ganzen Delete-Gespamme kommt man wieder weg.
So, Partitionstabelle am Start.
Dann würde ich sagen, machen wir als nächstes noch was Kleines.
Macht das jetzt Sinn?
Gerade überlegen.
Wisst ihr was?
Wie würde das denn aussehen?
Okay, meine Web-Anwendung ist abgekackt, weil ich die Kiste neu gestartet habe.
Ich meine, die Web-Anwendung ist ja nur wirklich äußerst minimal noch.
Wir können auch noch eine halbe Stunde HTML und CSS und JavaScript machen.
Wobei, das im Kopf umzuschalten mit mir, das ist zu anstrengend.
Nee, nee, das machen wir mal heute nicht.
Wie würde es denn mit Herzfrequenz aussehen?
Die ist auf jeden Fall niedriger als bei C++.
Was soll das werden?
Das ist ein ESP32-S3 mit Display.
So einer hier.
Irgendwie gescheite Bilder davon haben.
So einer hier mit Display.
Und was ich damit ausprobieren wollte, ist ein Web-Server, der per HTTPS erreichbar ist.
Was geht?
Und ich möchte eine Embedded Web-Anwendung ausliefern.
Das ist eine vollständige Client-Side Single-Page-Application in Svelte,
die gebundelt wird zu einer Index-HTML.
Alles zusammen, alles drin, alles JavaScript, alles HTML, alles CSS ist da drin.
Dann wird die Index-HTML gezippt und in die Firmware Embedded.
Und der ESP32-Web-Server liefert die aus.
Heute haben wir einen Web-Socket-Endpunkt eingebaut,
der eigentlich gar nicht so spektakulär aussieht, aber kompliziert war.
Und jetzt kriege ich Werte über Web-Socket gepusht.
Also, es ist nicht so, dass mein Frontend jetzt
alle 100 Millisekunden den ESP bollt mit einem neuen Get-Request.
Ne, der ESP schickt an das Frontend über Web-Socket zurück die neuesten Infos.
Ich weiß, was wir machen.
Wollen wir auch noch.
Und zwar, das Ding hat einen Button.
Und diesen Button möchte ich auch als Reset-Button verwenden können.
Wir könnten mal kurz den Button-Händler noch programmieren.
Ich überlege gerade, was sinnvoll ist, jetzt noch anzufangen,
weil ich bin jetzt ja auch schon eine ganze Weile on.
Übrigens, ich muss mal was Positives sagen, ja.
Mein Chef auf der Arbeit, auf den kann man sich echt verlassen.
Der ist wirklich zuverlässig.
Das hatte ich selten bisher.
Kam durchaus schon mal vor.
Aber ich habe den am Freitag angeschrieben,
ob wir unsere...
unseren Termin nicht verschieben können.
Auf, ob er zuschaut.
Ne, das glaube ich eher nicht.
Ja, selbst wenn.
Gute Gelegenheit zum Schreiben war eine Runde.
Also, falls du zuguckst, ne.
Ich glaube es aber nicht.
Ne, ähm, was wollte ich denn sagen?
Ich habe am Freitag gesagt, hey, können wir unseren Termin nicht verschieben?
Von Dienstag auf Mittwoch?
Ne, genau, können wir...
Ne, habe ich... Blödsinn, habe ich nicht geschrieben.
Können wir nicht...
Ich habe ihn gefragt, bist du Dienstag da?
Weil, wenn nicht,
dann lass doch mal unseren Termin,
wenn es geht, verschieben.
Von Dienstag
auf Mittwoch?
Oder, ne,
ich komme dann Dienstag und nicht Mittwoch.
Irgendwie so.
Und dann habe ich ihm noch geschrieben, ach, ne,
never mind.
Wir haben ja Mittwoch Gruppenrunde
mit Besuch.
Und da wurden wir eh quasi gebeten,
vor Ort zu sein.
Also,
ja, dann ist egal.
Hat er noch geliked am Freitag
und ich dachte mir so, okay,
da kommt jetzt nichts mehr.
Aber der hat mich echt gerade hier angeschrieben,
hat gesagt, hier Max,
ich habe mal gerade in den Kalender geguckt,
was hältst du davon,
dass du nur einmal, dass du nur am Dienstag,
nur am Mittwoch reinkommen musst,
wenn wir unseren Termin von Dienstag auf Mittwoch verschieben?
Da kannst du dich nicht beschweren, dass der an sowas denkt, oder?
Ich hätte eigentlich gedacht,
ich muss jetzt mindestens noch dreimal nachfragen.
Oder
ich ignoriere es einfach
und komme dann morgen nicht und sage,
ja, hast du was dagegen.
Aber dass der selbst sich das merkt,
nachguckt und einen anschreibt,
also, kannst du echt nichts sagen.
Muss ich mal sagen,
man kann sich auf den wirklich verlassen,
in diesen Orga-Fragen.
Dafür ist ja ein Vorgesetzter letztendlich auch
eines seiner Hauptjobs,
letztendlich.
Organisation und dafür zu sorgen,
dass, sofern du dich
an die Vorgaben hältst,
dir da keinen anderen Strick draus drehen kann.
Es gibt viele Schwachsinn-Sachen,
die man machen muss, aber die gewollt sind.
Und ich bin mittlerweile
auf dem Punkt, dass ich mir sage,
Leute, ihr bezahlt mir so viel Kohle,
ich mache auch Schwachsinn, ist mir vollkommen egal.
Ich sage zwar, dass ich Schwachsinn halte,
aber wenn ihr das wirklich haben wollt,
zum Beispiel 60%, 70% der Zeit mieten,
finde ich auch Schwachsinn.
Wenn ihr mich für das Rumsitzen bezahlen wollt,
mache ich.
Meinetwegen.
Was machst du beruflich?
Ich bin Senior Linux-Engineer
bei einer Versicherung in Frankfurt.
Am Main.
Letztendlich kannst du dir von dem Beruf
nicht berufsbezeichnen sehen.
Schall und Rauch.
Nein, nicht Arch, by the way.
Leider nicht Arch, by the way.
Wobei ich auch privat auf Servern
kein Arch installieren würde.
Ich mache tatsächlich
relativ
wenig
im Vergleich zu früher
so
klassisches Linux-Administrieren,
wo du 90% des Tages
bei SSH irgendwo eingeloggt bist.
Das ist weniger. Mache ich auch.
Wir haben noch genug Oldschool-Services.
Ich habe übrigens
für
Tmux
wie nennt man das heutzutage
so schön gesimt.
Hahaha.
Ich habe versucht,
meinen Teammates auf der Arbeit
Tmux schmackhaft zu machen.
Und das, obwohl ich selbst mittlerweile
von lokalem Tmux weg bin.
Aber hier habe ich halt auch ein ordentliches Terminal.
Ja.
Und ich habe das auf einem unserer letzten Termine
mal eine halbe Stunde vorgestellt.
So die üblichen Sachen, ja.
Die üblichen Sachen, ja.
Splits machen,
Tabs machen,
Detachn,
Attachn,
sich mit mehreren Leuten auf dem Server
an die gleiche Kiste attachn und so was.
Das habe ich mal gezeigt.
Und das fanden die alle ganz toll.
Und ich muss ja sagen, ihr kennt mich.
Ich habe das natürlich nicht aus
reiner Nächstenliebe vorgestellt.
Mein Hintergedanke ist ja,
ich möchte, dass es
defaultmäßig auf allen unseren Servern
installiert wird. Und wenn ich der einzige
Benutzer bin,
dann macht das ja keiner.
Und ich will, dass es
default auf allen unseren Servern wird.
Ich habe es auf vielen schon nachinstalliert,
aber beim nächsten Neuaufbau ist es wieder weg.
Wenn das jetzt default wird, mich nervt es auf dem Server,
mich einzuloggen und keinen T-Mox drauf zu haben.
Sackt.
Ja, wir haben auch Windows Server.
Also ich muss mich glücklicherweise nicht da drum kümmern.
Davon schon viel schlimmer,
dass wir im Team jetzt,
ich glücklicherweise nicht,
aber jemand haben, der
MSSQL Server betreut,
muss auf Linux.
Habt ihr einen Tipp für Arch auf einer virtuellen
Maschine? Kann das sein, dass es absolut nicht gut läuft?
Doch. Das, was du bei mir hier siehst,
ist Arch Linux, by the way.
In der VM. Und das läuft wunderbar.
Ohne jegliche Probleme.
Ich meine, ich habe natürlich auch ordentlich
RAM und CPU
der VM gegeben. Ich habe 8 Kerne
und 24 GB RAM.
Also quasi mehr, was
viele Leute bei sich so im Rechner drin haben.
Immerhin.
Gibt es keine Probleme. Null.
Sehr zackig. Ich kann dir nur empfehlen,
kein Wayline zu verwenden in der VM.
Das macht Probleme.
Was gibt es gleich zu fordern?
Irgendwelches Toastbrot.
Sind mir keine bewusst gerade.
Bin von Windows Engineering und auch in einer Firma.
Ja, endlich. Nice.
Ich würde durchdrehen, wenn ich mich um Windows
kümmern müsste. Und?
Wie ist es jetzt?
Oh, du hast ja gerade schon geschrieben. Macht echt Bock.
Heute kein Müsli. Doch, wahrscheinlich.
Müsli und Toastbrot.
Wayline ist doch echt unstable.
Das wollen die Wayline Fans nicht hören.
Ganz ehrlich, auch X ist für den Arsch
mittlerweile. Es ist so krass outdated
einfach nur.
Und läuft auch nicht perfekt.
Aber immerhin
funktionieren so Basic Sachen
wie Screen Refresh.
Es ist einfach schlecht, eine grafische Oberfläche
mit 0 FPS zu bedienen.
Weil dann
aktualisiert sich nichts.
Die Basics funktionieren mit X wenigstens.
Ja.
Es gibt immer noch kein Memory Leak.
Guck hier.
Da liegt nix.
Leakge.
Schwankt immer so im gleichen
Tü-tü-tü-tü.
Wie wäre es denn, wenn wir
in unserem
Webserver, wir machen jetzt noch, wir brauchen nur noch
eine halbe Stunde noch ein bisschen was zu tun.
Wie wäre es denn, wenn wir in unserem Webserver
noch ein paar Endpunkte einbauen würden?
Nämlich einen, also wir brauchen
auf jeden Fall später
mindestens drei Endpunkte. Oder zwei.
Einmal um WiFi
Sachen auszulesen.
Das könnten wir eigentlich jetzt machen.
Ne, könnten wir nicht. Da seht ihr das
im Stream.
Wifi Sachen auszulesen und Wifi Sachen zu setzen.
Mein Ziel ist ja, ein Web Interface
zu machen, was nicht nur die Werte anzeigen kann, sondern auch
Wifi Credentials setzen kann und
Access Point aufmacht und sowas.
Ja, das könnten wir eigentlich schon anfangen.
Aber da muss ich mir erstmal Gedanken drüber machen.
Ey, ich, ich, ich
programmier mal den Button Händler. Das ist schön.
Braindead.
Machen das mal mit dem Button.
Weil ich noch am überlegen bin,
wie das überhaupt
das ging.
Es gibt ein neues Programmer, das da auch
zu... Ja, die meisten finde ich gar nicht so lustig.
Ja. Button.
Button. Jawoll.
Ähm.
Warum ist die ESP-Seite kaputt?
Button adden.
Weil das Ding hat zwei Knöpfe.
Das T-Display.
Hier, zwei Knöpfe.
Da brauche ich jetzt mal einen Datasheet.
Seht ihr irgendwo einen Link zu
einem Datasheet?
Datasheet? Datasheet,
da war noch was. Button.
Äh.
Welche Button sind was?
Ne. Mhm. Mhm.
Okay, alles klar.
Was für China-Chinesen-Dokumente
mache ich? What the f...
Nee, die Buttons
sind Push Buttons.
Die eine sind für Boot
und der eine ist für Reset, aber der an der Seite
ist für Reset. Äh.
Gibt es da eine Übersicht?
Vielleicht so? Für Kack-Noobs? Für mich?
T-Display
Wiki.
S3. Äh. Button.
GPIO. Einfach mal
drücken und gucken. Ja, da ist ja noch nichts attached.
Ich hätte gern ein
ordentliches Datasheet und
eine ordentliche GPIO-Beschriftung.
Gibt's das hier nit?
Hier. Das ist der
GPIO-Reset-Button. Äh.
Und. Button. Hier. Da.
Da. Hier. Da steht's.
Ähm.
Boot.
IO14.
IO14.
Den Button kann man so verwenden.
Ich bilde mir ein
auf dem alten T-Display-Gamepad.
Dankeschön. Für den Sub konnte man auch
den Boot-Button verwenden,
nachdem man gebootet
hat. Was ist denn
der Boot-Button? Immer GPIO 0.
Oder? Ja. Dann kann man
den Boot-Button verwenden
im laufenden Betrieb mit GPIO 0.
Höchstwahrscheinlich. Okay.
Also. Dann gucken wir mal. GPIO
14.
Button. Merkt euch mal.
GPIO 14. So.
Ich brauch mal kurz ein Example.
Wie das funktioniert hat.
Button pressed.
Ja.
Alter. Ja. Übertreibt's
halt hier. GPIO
Button-Config.
Wir kommentieren jetzt einfach mal
alles aus,
was wir hier haben. Alles weg.
Weil das brauchen wir nicht.
Für unseren Button-Krams.
Für unseren Button-Test. Dann flasht er nämlich auch
deutlich schneller.
So. Sollen wir wieder einkommentieren.
So. Button-Config.
Include.
Button.
Ne. Ach ne. Ich muss erst mal
ein Bild machen, dass es funktioniert.
Du musst entprellen.
Ja. Das macht die
ESP Button
Library schon für mich.
Deswegen will ich ja auch nicht
von Hand GPIO Read und sowas machen.
So. Und wie benutzt
man das jetzt? Register
Callback. Ja. Genau. Das brauchen wir.
Okay. Also
Type GPI
What?
Include Button
GPIO
Undefined? Sicher?
Äh.
Was?
Ist ja auch wieder nice, wie gut das funktioniert.
Example
vielleicht?
Gibt's nicht. Kein Example. Ist outdated.
Overrated.
Ich hab das schon benutzt. Das war easy.
Button GPIO
Init. Button GPIO
Config.
Ja. Was muss ich denn includen dafür?
Ist, ist, ist, sind die
Docs einfach outdated as fuck?
Was muss ich denn includen?
Ja. Hier.
Include I.O. Button.
Äh.
What?
I.O.?
I.O.T. Button.
Auch nicht.
Ja. Meine Güte, Mann.
Elder.
Ist doch hier.
Geht doch. Das war halt einfach wieder ewig
gebraucht. Okay.
Button Type GPIO
Config. Button Long Press.
Button Short Press.
Was gibt's denn sonst noch hier?
Äh.
Nix was verbrauchen. Button.
GPIO Nummer. Okay. GPIO
GPIO
Nummer
14 war das?
Active Level 0. Ja. Okay.
Register.
Ist hier noch ein Example?
Hier ist Simple Example.
GPIO Button. Aber wir müssen es noch
createn. Also die Beispiele
sind teilweise schon
abysi
schwierig.
Durcheinander.
GPIO Button Config. Button
Single Click. Machen wir jetzt hier mal
so ein Callback.
Button Single
Click. Brauch.
Void
Arc User Data.
Okay.
Nix davon werden wir jetzt gerade verwenden.
Logger. Log.
Clicked.
Oh. Dieses
Formatting. Alter.
Okay. Flaschen.
Das Flaschen sollte jetzt
deutlich schneller gehen.
Ja. Okay.
GPIO Button. Zeig mal hier. Clickety Click.
Äh. Uh.
Äh. Okay.
Okay. Okay. Alles gut.
Ah. Moment. Moment. Ich hab kein
Delay da drinne. Ja. Das ist natürlich
doof. Das sollte so nicht
sein. Ohne Delay.
Okay. Click. Click.
Clicked.
Clicked.
Funst.
Easy.
Easy Button Stells.
Minimales Delay hat das.
Wahrscheinlich.
Weil das hier auf 180 Millisekunden steht.
GPIO Level
when pressed down.
Woran genau ich arbeite. Einem.
Auf einem ESP32
S3.
Und wir haben einen Web Server
drauf gebaut.
Der per HTTPS
eine Svelte Web Anwendung ausliefert.
Die jetzt nicht sonderlich
spektakulär aktueller aussieht. Aber
eine vollständige Web Anwendung.
Single Page Application.
Die Embedded dann in der
Firmware ausgeliefert wird. Und aktuell versuche ich
den Button anzusprechen von dem Ding.
Und das funktioniert ja auch schon ganz gut.
Clickety Click. Click.
Also das ist tatsächlich. Das ist jetzt
in der Tat recht easy gewesen den Button anzusprechen.
Wir können das
jetzt nochmal. Just for fun.
Machen wir nochmal
was.
Was da?
Wir kommentieren das mal alles wieder ein.
Warum muss das sein?
Das ist auch so ein Schrott an C++.
Das Include Reihenfolge von Header
eine Rolle spielt und sowas.
Wieso nicht JetPrinz?
Wie gesagt ich habe eine C-Line Lizenz.
Beziehungsweise eine All Desktop Lizenz.
Aber da geht mir auch immer irgendwas auf den Keks.
Zum Beispiel.
Das C-Line immer noch nicht in der Lage
ist Defines
ordentlich zu finden teilweise.
Wobei ich denke. Hä?
Okay so.
Wenn ich da jetzt drauf drücke.
Okay zeigen wir mal.
Äh.
Also es läuft nicht mehr.
CD, Web App.
Def.
So von der Idee her.
Sollte ich jetzt.
Hä?
Wie?
Mixed Connection Refuse.
Was der denn für einen Scheiß erzählt.
Du meinst Z.
So wenn ich jetzt den Button drücke.
Dann sollte im Web Interface was erscheinen.
Okay.
Klick.
Zack.
Nochmal. Klick.
Klick.
Klick.
Bei jedem Klick wird er aktualisiert.
Okay.
Es funzt was wir gebaut haben.
Easy Clap über Web Socket.
Kann man eigentlich.
Das hier.
So da rein pasten.
Ne ne.
Ne ne.
Das geht natürlich.
Es geht natürlich.
Das wäre wahrscheinlich wieder zu übersichtlich.
Button.
Config.
Ich hasse dieses.
Okay schreiben kann ich auch noch mehr.
Dieses zwangshaft.
Alter Config.
Dieses zwangshafte abgekürze.
Von allen.
Warum soll ich das anders nennen.
Gibt nur einen Button auf dem ganzen Ding.
Genau.
Die Verbindung ist quasi offen.
Und ich kann.
Ohne das mein Client laufend irgendwas polt.
Vom Server zurückschicken.
Es gibt ein paar Hacks.
Wie man das anderweitig auch.
Sagen wir mal.
Vergleichbar.
Umsetzen kann.
Du kannst zum Beispiel.
Eine HTML Verbindung.
An Request aufmachen.
Dann kann der Server auch immer wieder.
Daten rein streamen.
Was aber nicht geht.
Ist.
Kommunikation in beide Richtungen.
Wie es mit Websock.
Wie es mit Websock ins schöne geht.
100 Zeichen Namen.
Geil.
Excellent.
Kann ich hier nicht sagen.
Hier auch.
Ne hier nicht.
Ja das finde ich ist doch ganz.
Brauchbar.
Ich weiß gar nicht.
Ob sie Sharp ein wirkliches Limit hat.
Was Methoden und Variablen Namen angeht.
Wahrscheinlich.
Wahrscheinlich so hoch.
2048.
Oder sowas.
Und wahrscheinlich nicht.
Wahrscheinlich hat sie nicht mal wirklich ein Limit.
Also ich bin begeistert.
Wie easy das hier.
Umzusetzen war mit den.
Mit dem Web Server.
Wirklich ganz schlecht.
Gute Ausgangsbasis.
Für nächste Bastel.
ESP 32 Bastelstunde.
Aber wie gesagt.
Nicht zwangsläufig nächster Stream.
Weil ich brauche jetzt erstmal ein bisschen Ruhe von C++.
5 Stunden 17 Minuten C++.
Das reicht für heute.
Genug.
Chat ich gehe jetzt was essen.
Schön das ihr am Start wart.
Es waren erstaunlich viele.
Für die Uhrzeit.
Permanent am Start.
160 plus Leute.
Von Anfang an bis jetzt.
Richtig nice.
Hat mir gefallen.
Macht auch richtig Bock das Ding zu proggern.
Nächstes mal wenn wir basteln würde ich sagen.
Gucken wir uns mal das Display an.
Weil eines der großen.
Ja herausstechende Dinger von dem Ding ist ja.
Das es ein integriertes Display hat.
Was sogar echt.
Wirklich nice.
Wenn ich mir das hier so angucke.
Wirklich nice gemacht ist vorne.
Mit so kleinen Plastik durchsichtigen.
Ich wollte gerade sagen Glasrahmen.
Ist es aber nicht.
Plastikrahmen.
Das heißt wenn man jetzt ein schönes Case dafür hat.
Gibt es dafür schöne Cases?
Ja gut.
Man kann sich einen selbst drucken.
Wenn es dafür schöne Cases gibt.
Dann sieht das sogar richtig sauber aus.
Weil die Dinger so einen.
Plastikrahmen schon drin haben.
Gut das ist jetzt mit wirklich.
Sehr grob.
3D gedruckt.
Und das ist für das alte.
Das ist nicht für das S3.
Vielleicht haben die trotzdem Cases.
Ne haben sie nicht.
Moment DE?
Warum kostet die deutsche Version mehr?
Ach ne.
Das Shell.
Ist das hier die Shell?
Die Shell bringt mir nichts.
Wenn die nicht um das gesamte Gerät rum geht.
Was bedeutet DE?
Ach develop.
Ne oder?
Für was steht das DE?
Für eine Shell?
Ach hier.
Prom 288 kostet.
19 Euro.
Die wollen einfach mal.
Alter das ist teurer als auf AliExpress.
Das Gerät selber.
Wollt ihr mich verarschen?
Aber ein ganz hübsches Case.
Aber 19 Euro ganz bestimmt.
Ganz bestimmt.
Muss ich mal kurz checken.
AliExpress vielleicht gibt es das da.
Ich könnte es 3D drucken.
In die Richtung wie ich mir das vorstelle.
1,60.
Ja.
Das geht eher in die Richtung.
Ja klar.
Einen ESP32 Miner.
Ganz sehr sehr sinnvoll.
Was ein Schwachsinn.
Ne.
Das ist das für ohne.
Ne ne ne.
Das ist für das alte T-Display.
Oder?
Und das ist die S3.
Das ist ein S3 mit einer Shell.
Ich glaube das wollen die uns sagen.
Ich hätte das so interpretiert.
Das ist für das alte.
Das ist für das neue.
Ok.
Ja.
Ok.
Ja dann geht es ja auch da ganz gut.
Vielleicht bestelle ich mir tatsächlich mal so.
5er Pack von den Shells.
Weil ich mag den Controller.
Gerade das mit dem Integrated Display.
Ist sehr sehr nice.
3D Druck habe ich letztes mal vor 3-4 Wochen benutzt.
See you.
