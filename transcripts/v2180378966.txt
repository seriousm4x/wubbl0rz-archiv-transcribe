Test. Kunst.
Moin, Feuer am Start.
Ich bin auch gleich richtig da. Wartet mal.
So, jetzt bin ich auch am Start.
Lass mal was trinken.
Ich hab geschwitzt vorhin.
Sieben mal eine Minute
Intervallstelz
vorhin machen müssen,
weil meine Garmin-Uhr der Meinung war,
es wird mal wieder Zeit.
Aber die Uhr ist es ja nicht.
Letztendlich ist es die App dahinter.
15 Minuten aufwärmen.
Dann sieben mal eine Minute.
Add 4.
Ich glaub 4,45 oder so.
Und dann
zwischendrin jeweils
drei Minuten langsam und dann zehn Minuten auslaufen.
Ich hab echt geschwitzt.
As fuck.
Kurz in die App reingucken.
Das hab ich gar nicht gemacht.
Excellent.
Okay.
Oh man.
Ich weiß, etwas ungewöhnliches
ist.
Ich hab gesagt,
Montag ist immer ein guter Tag.
Da muss ich nicht arbeiten.
Und ich hab eigentlich mehr oder weniger Zeit.
Was anderes hier?
Wupp, wupp, wupp.
Ich hab immer Zeit, bis sonst wann.
Wupp, wupp, wupp, wupp, wupp, wupp, wupp, wupp, wupp, wupp, wupp, wupp.
Oh man.
Wir machen heute ein bisschen JavaScript,
HTML, CSS, Frontend-Stells.
Da werde ich mir da wahrscheinlich komplett ausflippen bei.
Weil der Kram nicht so funktioniert,
wie gedacht.
Immerhin, immerhin, ich hab gestern Off-Screen noch ein bisschen,
Off-Screen, ja Off-Screen trifft's auch.
Off-Stream noch ein bisschen weiter gebastelt.
Ich zeige euch auch gleich, wo wir stehen geblieben sind.
Und jetzt sieht's ein bisschen ordentlicher aus, das Frontend.
Ich hab, also ich hab nicht viel gemacht zu dem,
wo wir das letzte Mal aufgehört haben.
Backend ist nach wie vor der ESP-Microcontroller,
der das über HTML alles ausliefert.
Und Websocket auch.
Ich zeig's gleich noch mal.
Ey, ich bin echt übelst kaputt.
Ich strapsel das Ding mal an,
weil wir gerade dabei sind.
Wo ist es denn hier?
Controller-Stells, ja, ja.
Virtual Machine Connecten.
Ich checke gerade mal einen Moment.
Arch, by the way.
Was machen Package-Updates?
Ha, wer hat noch gelacht,
dass es da keine Package-Updates seit gestern gegeben hätte.
Sogar Kernel-Update dabei.
Ruby, nee, Reboot.
Jetzt, gleich.
Kernel-Update.
Was da alles immer geupdatet wird, das kenne ich überhaupt nicht.
Was ist Brill-TTY?
Ach so, ah, das ist bestimmt für Blindenschrift oder so was, hä?
Ist das Blindenschrift?
Wusste gar nicht, dass ich was für Blindenschrift, nee.
Ah, hätte ich gedacht, ja, Background-Process.
Doch Blind-Person, sag ich doch.
Blindenschrift.
Ich wusste gar nicht, dass ich Support für Blindenschrift installiert hab.
Aber man weiß ja nie, was Arch, by the way,
da alles immer so als die Penalties mitbringt.
Max, du machst noch die 4-Tage-Woche.
Ja klar, sonst wäre ich jetzt ja nicht on.
Warn about old Perl-Modules.
Die Frage ist eher, Moment, warum habe ich überhaupt Perl drauf?
Ich glaube, weil das viele Standard-Tools einfach brauchen oftmals.
Ich mache nix in Perl.
Aber um deine Frage zu beantworten, ja, mache ich, ja, ja.
Seit 13 Jahren oder so mache ich das.
Und ich werde auch nix an.
Ich werde nichts anderes mehr machen.
Weird champ.
Für alle, die 5 Tage arbeiten.
So, Package-Updates fertig.
Rebooten.
Warum fragst du?
Willst du das auch machen?
Also, ich kann es jedem reboot.
Ich kann es jedem nur empfehlen, das zu machen.
Wenn er sich das leisten kann und der Arbeitgeber mitmacht,
kann ich das nur empfehlen.
Und man muss dazu sagen,
je einfacher bekommt man das, denke ich, auch durch.
Letztendlich können die Arbeitgeber eigentlich gar nix dagegen großartig sagen.
Ich habe heute geboomert.
JavaScript und HTML und ein bisschen CSS für unser ESP-Frontend.
Da, wo wir stehen geblieben sind.
Ich habe gestern Offstream noch ein bisschen gebastelt,
während ich Fußball geguckt habe abends.
Ich gucke ja nie Fußball, aber zur EM gucke ich ab und zu mal ein bisschen.
Und da war ich halt bis 23 Uhr wach.
Habe nebenbei ein bisschen Frontend-Stells programmiert.
Warum startest du X manuell?
Die Frage ist viel eher, warum startest du X nicht manuell?
Ich kann dir sagen, warum ich X manuell starte.
Weil ich den Sinn bei einem Single-User-System
von irgendeinem Login-Bildschirm nicht sehe.
Du musst dich eh einloggen, also an Passwort und User eintippen,
beziehungsweise User auswählen und Passwort eintippen,
kommst du eh nicht vorbei.
Es sei denn, du stellst automatisch das Login ein.
Und ob ich dann auf Session starte, klicke
oder einfach mal schnell Start X eingebe,
macht im Endeffekt keinen Unterschied.
Weiteres Stück Software, was man eigentlich nicht braucht
als einzelner User.
Und tatsächlich noch ein weiterer Vorteil,
wenn ich Start X ausführe,
führt der auch die X-Init-RC aus,
mit ein paar Startsachen drinnen.
Und das ist für mich ganz praktisch,
weil, ich kann es dir zeigen, ich starte ja I3 im Endeffekt.
Kann man auch machen, ja klar.
Kann man auch machen.
Hatte ich sogar früher mal.
Ich hatte sogar früher mal so eingestellt,
dass der automatisch,
wenn ich mich auf dem ersten Terminal eingeloggt habe,
also auf der ersten Linux, also auf der ersten Terminal,
Kernel-Frame-Buffer heißt das glaube ich,
einlogge, dass der das automatisch, genau.
Das hatte ich früher auch.
Habe ich aber nicht mehr.
Weil, wenn ich irgendwann mal reboote,
so vor alle paar Tagen mal,
einmal Start X eintippen, juckt mich jetzt nicht.
Ja.
Und ich starte halt so ein paar Dinger.
So, ich starte das VMware-Zeug gestartet,
das JetBrains Toolbox, whatever.
Gibt's alles Möglichkeiten, für mich ist das das Simpelste.
So, ich zeige euch mal, wo wir stehen geblieben sind.
Da nicht, ich muss mal diesen ganzen Shit hier zumachen.
Hier, brrrrrrrrrrrrrr.
Ups, das war's vielleicht.
Wenn man jetzt 30 Sekunden Control X gedrückt hält,
die Seite von dem Controller machen wir.
Doch, doch, ich weiß nicht,
ich hab SystemD drauf, Default.
Also das Default SystemD.
Ich bin jetzt niemand, der unbedingt Open,
wer ist das andere, OpenRC und was auch nicht alles dazu.
Aber ich reiß mich auch nicht drum,
da mehr zu machen, als notwendig ist.
Also, was ich von SystemD benutze,
ist den Boot Manager anstelle von CRUB
und halt das Standard-SystemD-Zeug.
Aber ansonsten,
es ist halt da, ja.
Oh, lasst uns mal kurz hier reingehen.
Zack, zack.
Visual Studio Code aufmachen.
Einmal dahin.
Und dann das Frontend aufmachen.
Einmal dahin.
Dann noch einen Browser aufmachen.
npm run dev.
Und jetzt feststellen, dass es nicht funktioniert.
Warum?
Ah, ah, ah, Moment.
npm install, npm install.
Macht das Sinn, auf SystemD zu wechseln,
oder ist das einfach Geschmackssache?
Ähm, die Frage stellt sich eigentlich nicht.
SystemD ist auch so gut wie nahezu allen...
Ach so, Moment, das sind zwei unterschiedliche Paar Schuhe.
Also SystemD...
Es gibt einen Boot Manager, der so im Dunstkreis hier...
Wie heißt das? SystemD, BootD oder irgendwie sowas.
Das ist aber nicht eigentlich was, was SystemD ist.
SystemD ist eigentlich dafür da, wenn ein System startet,
alles Mögliche zu starten, was da sein muss,
dass das System funktioniert.
Und einer Vorteil von SystemD ist,
oder zumindest der Vorteil,
womit es ursprünglich mal den Leuten verkauft wurde,
dass es auch Sachen parallel ausfüllen kann,
deswegen der Rechner schneller bootet.
Das war so eines der Aufhängerpunkte von SystemD.
Also SystemD wirst du eh benutzen.
99% aller Distributionen haben heute standardmäßig
als Inet-System, SystemD dabei.
Ob du SystemD, BootD oder wie dieses Ding heißt,
SystemD Boot verwenden willst, anstatt Scrap,
da kann ich dir ehrlich gesagt gar nichts dazu sagen.
Der Grund, warum ich SystemD Boot verwende, ist ganz einfach,
weil es die minimalistischste Art und Weise ist,
ein Betriebssystem zu booten und das hier eine VM ist.
Und nachdem ich hier bei der VM auch regelmäßig Snapshots habe,
interessiert mich das nicht.
Wenn das Ding irgendwie mal durch irgendwelche Updates
so kaputt sein sollte, dass es nicht mehr bootet,
risteuer ich einfach ein Snapshot und gut ist.
Wenn ich eine echte Hardwarekiste hätte,
wo ich auch vielleicht mal ein bisschen mit Trick 17
was recovern müsste, dann würde ich wahrscheinlich
nach wie vor Scrap installieren,
weil man da einfach mehr Möglichkeiten hat.
Aber ansonsten kann man das gut verwenden, ja.
Letztendlich ist es kein Unterschied für die meisten User.
Die meisten User gehen ja auch nicht ins Scrap,
irgendwie ins Menü und machen da irgendwelche Dinger.
Wobei das tatsächlich ganz cool ist.
Du kannst in Scrap ja die Kernel-Parameter ändern beim Starten
und dann beispielsweise direkt in eine Root-Shell booten und so was.
Das ist ganz nice, wenn man mal irgendwelche Systeme hat,
die gar nicht mehr gehen, um da noch dranzukommen.
Habe ich beispielsweise schon auf ein paar Remote-Servern machen müssen
auf der Arbeit früher, jetzt schon lange her,
zu Turnshow-Admin-Zeiten, muss man sich da teilweise noch einloggen.
Und irgendwelche Sachen resetten und so.
Wie man das mit System Deboot macht, keine Ahnung.
Was für ein Terminal nutzt du und welches Desktop-Environment?
Also das Terminal kann ich dir easy sagen, das ist Westterm.
Weiß gar nicht, ob das ein eigenes...
Ne, das steht als Xterm, ne. Westterm, das ist das hier.
Es ist aus meiner Sicht das beste Terminal,
beziehungsweise Terminal-Emulator, muss man ja korrekterweise sagen.
Ja gut, man kann sein Terminal auch hässlich machen, ja.
Noch hässlicher.
Westterm ist aus meiner Sicht der beste Terminal-Emulator,
den es zurzeit gibt.
Der hat so ziemlich alles eingebaut von dem,
was sich so die letzten Jahre über so als neue Innovation
rauskristallisiert hat, ja.
Beispielsweise Terminal über Grafikkarte rendern,
mit OpenGL Accelerated rendern, Image Support,
irgendwelche Spezial-Escape-Sequenzen,
verschiedene Sachen wie beispielsweise
Tiling und Splitting und so eingebaut im Terminal.
Das finde ich ganz nice.
Manche Leute mögen Kitty.
Das kann auch fast alles, was Westterm kann.
Und es ist in Rust, genau.
Dementsprechend ist es natürlich blazingly fast, was sonst.
Es gibt manche Leute, die verwenden Kitty.
Das kann auch fast alles, was Westterm kann.
Aber der Kitty-Autor ist mir etwas sus.
Zum Beispiel ist er der Meinung, dass TMAX niemand verwenden sollte.
Und deswegen auch keinerlei Mühe reinsteckt,
das irgendwie angenehm benutzbar zu machen in Kitty.
Was kacke ist, weil TMAX auf Remote-Systemen
immer noch das Beste ist, was man machen kann.
Deswegen benutze ich einfach Westterm
und mache mir um den ganzen Shit keine Gedanken.
Es funktioniert.
Und Westterm kann sogar,
um jetzt mal das Killer-Feature schlechthin zu zeigen,
kann sogar Bilder und GIFs im Terminal.
Also wenn das jetzt mal nicht der Grund ist,
dann weiß ich auch nicht.
Kanada, moin.
Andere Seite der Welt fast schon.
Kann das ein Video abspielen?
Ich glaube nicht.
Ne, ich glaube Videos kann das nicht abspielen.
Wobei das eine Implementierungssache ist.
Das könnten die bestimmt irgendwie unterstützen.
Weiß ich nicht, ob das geht.
Habe ich noch nicht ausprobiert.
Ne, geht nicht.
Glaube ich nicht, dass das geht.
Und als Desktop-Environment benutze ich i3.
Unten drunter ist noch X, nicht Wayland.
Das liegt aber daran,
dass Wayland in der VM nicht gescheit funktioniert.
Wayland ist ja eh so eine Never-Ending-Story.
Und du siehst dann deine Git-Repos.
Ja, das hat nichts damit zu tun mit dem Terminal.
Das liegt am Prompt.
Und dass ich meine Git-Repos sehe,
dass du dann beispielsweise siehst hier,
ey, guck mal, das ist ein Git-Repo.
Ich bin aktuell im Master-Branche.
Und das ist ein Node.js-Projekt.
Und ich habe Version 22.3.0 installiert.
Das liegt nicht am Terminal.
Dann benutzt du aber wahrscheinlich,
also wenn du Wayland in der VM benutzt,
dann benutzt du wahrscheinlich irgendwas Fertiges.
Also sprich entweder irgendeine Distro,
die schon mit GNOME oder KDE oder sowas kommt.
Dann funktioniert das tatsächlich besser.
Ich habe es noch nicht auf die Reihe bekommen,
das selbst gescheit einzurichten.
Also ich habe das ein paar Mal probiert,
auch im Stream, mit Sway.
Das ist ja quasi i3 für Wayland.
Und da hatte ich sagenhafte 0 FPS.
Und 0 FPS heißt,
der Bildschirminhalt aktualisiert sich nicht.
Das war etwas suboptimal,
um es nett auszudrücken.
Und da habe ich mir halt einfach gedacht,
scheiß auf Wayland.
Ja, gut, das weiß ich nicht.
Ich habe die Sway...
Dadurch, dass Wayland bei mir nicht funktioniert richtig,
habe ich Sway auch nicht verwendet.
So, was wollte ich jetzt sagen?
Oder machen? Keine Ahnung.
Ja, ach so, die Git-Repos.
Das liegt, wie gesagt, am Prompt.
Und der Prompt ist Starship.
Starship-Tommel.
Hier, das ist...
Ja, ja, das mag das nicht,
wenn man komische Escape-Sequenzen hat,
die es nicht kann.
Das ist Starship.
Das habe ich hier auch konfiguriert.
Da muss man sagen, Starship hat nicht unbedingt
die eingängigste Konfiguration,
ist aber ganz nice,
weil es sehr viel Eingebautes mitbringt.
Ich persönlich schwöre auf zweizeilige Prompts.
Das habe ich also ein bisschen customised, modifiziert.
Ich habe auf GitHub meinen ganzen Krempel.
Zwar nicht top aktuell,
das siehst du hier, letztes Jahr oder so.
Also nicht hundertprozentig aktuell,
aber aktuell genug.
Ich habe da in den letzten Jahren
relativ wenig dran rumgedoktert.
Also, bis auf ein paar Kleinigkeiten
sollte hier eigentlich alles das dementsprechend,
wie ich es habe. Ja.
Ja, die Westerm-Konfig gibt es ja auch.
Also hier gibt es die Starship-Konfig
und hier gibt es auch die Westerm-Konfig.
Die Westerm-Konfig ist auch
mehr oder weniger aktuell,
was da drin ist.
Ach ja, und das coole an Westerm ist,
dass das Lua verwendet als Konfig-Sprache.
Denkt man sich erst mal so,
was ist das für ein Schwachsinn?
Warum brauche ich in meiner Konfig-Datei
eine Programmiersprache?
Sagt das mal den Emacs-Enjoyern.
Die werden das verstehen.
Emacs-Enjoyer verstehen das.
Aber das ist wirklich nice.
Du kannst ja nämlich auch Sachen in das Terminal einbauen,
was das standardmäßig nicht kann.
Zum Beispiel habe ich eingebaut,
dass mein Rechtsklick und Mittelklick verhalten.
Also zum Beispiel, wenn ich rechtsklicke,
dann ist der erste,
wenn was markiert ist,
ist der erste Rechtsklick in die Zwischenablage einfügen
und der zweite Rechtsklick, ohne dass was markiert ist,
ist direkt
aus der Zwischenablage pasten.
Das finde ich ganz nice.
Im Endeffekt, wenn ich was kopieren will,
kann ich einfach sagen, rechts, rechts, rechts,
ich kann das drücken und es geht.
Geht mit mittlerer Maus dazu übrigens genauso.
Oder noch ein paar Sachen,
ein bisschen Color-Sachen eingestellt.
Dann habe ich noch eingestellt,
dass man hier ein bisschen wie bei Tmux
Sachen splitten kann, splitten kann,
zoomen kann, schließen kann,
neue Tabs öffnen kann.
Verwende nicht alles,
was ich da irgendwann mal eingestellt habe.
Weiß ich gar nicht, was das hier sein soll.
Warum auch immer.
Ein bisschen Border, bisschen Transparency,
Scrollback Buffer, Scrollbar.
Habe ich dis...
Habe ich die enabled?
Ah ne, habe ich disabled, wollte ich gerade sagen.
Ah, Colors.
Und das war es im Endeffekt.
Easy.
Kann man, denke ich...
Blickt man, glaub ich, ganz gut durch.
Also Westterm kann ich empfehlen.
Und wisst ihr, was das Beste ist?
Westterm gibt es auch für Windows.
Da fehlt euch natürlich immer noch eine gescheite Shell.
Aber wenn ihr beispielsweise gezwungen seid,
anstatt eine ordentliche Lieferungskiste WSL zu verwenden,
zum Beispiel,
dann ist Westterm sehr nice.
Für meinen Geschmack viel besser und angenehmer
als das Windows Terminal.
Aber ich kann die Leute nur bemitleiden,
die Windows und WSL benutzen müssen.
Bei mir auf der Arbeit ist es noch schlimmer.
Aber ich habe gar kein WSL.
Dafür habe ich meine 8-Kerne 32-Gig Linux VM,
wo sich regelmäßig bei mir
drüber beschwert wird, warum meine VM so teuer ist.
Ist alles schön und gut.
Naja, das hat jetzt ja alles nichts mit deinem Workflow zu tun gehabt.
Das ist ja reine Kosmetik.
Ich bin da auch recht lernresistent.
Kann das auch dieses Zeichen verbinden?
Pfeil statt...
Äh, jaja, das liegt aber nicht am Terminal.
Das liegt an der Schriftart, die du verwendest.
Du brauchst eine Schriftart mit...
äh, Frontlig...
Liga...
Ligatures.
Ich weiß nicht, wie man das richtig ausspricht.
Ligatures brauchst du.
So was hier, FiraCode zum Beispiel.
Das war eines der bekanntesten Fonts, die das hat.
Ja, dann ist dann beispielsweise...
Ja, das da, diese zwei Zeichen verschmelzen dann zudem.
Das kann das anzeigen, relativ sicher.
Aber ich mag das nicht.
Ich glaube, das kann's.
Hier, können wir nochmal suchen hier.
Western.
Ja, das kann das.
Aber ich mag das nicht.
Also, ich hab's nie ausprobiert.
Das heißt, ich weiß nicht, wie gut das ist.
Ich kann der Sache gar nichts abgewinnen.
Okay, nice.
So, dann zeig ich euch mal kurz, wo wir stehen geblieben sind.
Hm...
Repo...
Moment.
Alter, warum hab ich das wieder zugemacht, grad alles?
Warum bin ich denn so super pepega gewesen?
Ach nee, hier.
Ich wollte euch was zeigen, deswegen bin ich da raus.
So, ähm...
Monitor.
Äh, Export.
Monitor, nix.
Da wird nix gefallen.
Geflasht.
So, Microcontroller ist am Start.
Verbindet sich auch hoffentlich zum WLAN.
Macht er.
Und mein Frontend ist kaputt aus irgendwelchen Gründen.
Ne, Frontend funzt.
Nice.
Guck mal.
Ist es nicht hübsch geworden mittlerweile?
Ich hab gestern noch ein bisschen dran rumgebastelt.
Okay, vielleicht soll ich...
Vielleicht soll ich mal...
Ich zeig euch auch gleich...
Das machen wir heute mal.
Das machen wir heute mal hübsch.
Ja.
Kommentieren das mal kurz aus.
Was macht der Displaychamp?
Ja, das ist das Frontend vom Displaychamp.
Hier, guck.
Das machen wir heute.
Schöne...
Schöne...
Schöner Displaychamp.
Pew...
Pewtify.
Pretty Print Displaychamp.
Kurze Frage.
Wenn West Ham da eigene Confi hat, wofür war dann Starship?
Starship ist für den...
Ja, ja, ja, ja.
Au, au.
Endlich.
Einer mal am Start, der sich mit CSS auskennt.
Da weiß ich ja schon.
Jetzt fehlt bloß noch der Auskenntfuchs.
Dann haben wir unsere zwei CSS-Checker am Start.
Der Preserive und der Auskenntfuchs.
Der Auskenntfuchs war schon lange nicht mehr da.
Aber diese zwei Namen, die habe ich mir gemerkt, wenn es um unsere CSS-Checker hier im Chat geht.
Weil West Ham ja nur das Terminal ist.
Ich zeig dir das.
Guck mal.
Ich kann in West Ham auch...
Gut, das ist jetzt ein Blöd...
Ach so.
Haha.
Wenn ich Bash starte, das benutzt auch standardmäßig Starship.
Oh, bin ich blöd.
Warum habe ich denn...
Warum habe ich denn...
Ja, mach mal.
Ich werde Hut beispielsweise.
Hier, guck.
Da siehst du, ist mein Prompt komplett anders.
Der Prompt...
Ah, fuck.
Passwort-Leak, Leute.
Passwort-Leak.
Jetzt ist vorbei.
Seid ihr schon drin?
Man darf das nicht so sehr vermischen.
Das sind ja alles unterschiedliche paar Software.
Das Terminal ist im Endeffekt nur das Fenster, was den Inhalt rendert.
Und die Schrift und sowas.
Diese Sache hier mit Tippen und diesen Ausgaben, das ist eine Shell.
Und...
Die Shell hat einen Prompt.
Und um den Shell-Prompt zu konfigurieren, beziehungsweise um den Shell-Prompt zu generieren,
benutze ich Starship.
Das eine hat mit dem anderen nichts zu tun.
Leute, ich muss noch kurz was zu trinken holen.
Ich bin gleich da.
Die Stadt ZSH.
Starship generiert ein Prompt für ZSH.
Guck.
Ich habe das Headset nicht mehr auf, deswegen hört es sich so komisch an.
Guck.
Das ist meine ZSH-Config.
Starship.
Letzte in meiner...
Das letzte in meiner ZSH-Config.
Das letzte in meiner ZSH-Config ist ein Aufruf von Starship, dass der Prompt generiert wird.
Nach wie vor ZSH.
Oder Cish.
Oder...
Seashell.
Oder wie auch immer die Leute das alles aussprechen.
Und mal kurz was zu trinken.
Leute, hier drin ist...
Peter sagt...
Ich muss mal kurz warten, bis er trinkt.
29 Grad, das glaube ich aber nicht.
Das glaube ich nicht.
Das misst...
Das misst, misst gerade.
Aber ich mache trotzdem mal die Klimaanlage an.
Jetzt mal auf Cool Mode.
Cooling.
Cooling Mode.
Ah, 24 Grad reicht.
Dicke.
Wenn es angeblich 29 ist.
Glaube ich zwar nicht, aber...
Moin von der Arbeit.
Ja.
Ah, die ganzen ZG-Montagsarbeiten müssen wir hier.
Mario, wann Teilzeit?
Homeoffice-Beste.
Ich muss Mittwoch nach Frankfurt wieder.
Leute.
Ich muss euch mal ganz kurz was anderes sagen.
Bevor wir loslegen.
Ja, mach.
Ich kann es nur empfehlen.
Leute, ich muss euch was sagen.
Kommt nicht auf die Idee, so billige China-Chinesen Laufshirts zu kaufen von Amazon.
Oder...
Ich habe mir so ein Pack gekauft.
So irgendwas in dieser Richtung hier.
So ein ganz billiges.
So ein Pack.
Da gab es irgendwie...
Das da.
Da gab es so einen...
Da gab es irgendwie genau einen 5er-Pack.
5er-Pack habe ich mir gekauft.
So.
5er-Pack.
Hier war er doch.
5er-Pack.
Ich habe so einen 5er-Pack gekauft von diesen Shirts.
Also erst sehen die nicht so aus.
Und es ist eine ganz, ganz blöde Idee.
Ich hatte die Dinger heute an.
Also ich hatte die schon öfters an.
Aber im Winter hat man immer einen Unterhemd drunter.
Es ist eine ganz blöde Idee.
Ich hatte den schon öfters an.
Es ist eine ganz blöde Idee, sich einen Fünferpack zu kaufen,
ich habe es sogar noch billiger gekriegt,
weil, das ist mir heute aufgefallen,
ich habe das angezogen, bin losgerannt,
insgesamt war ich so knapp eine Stunde unterwegs
und ich konnte die letzten,
ja, und ich konnte die letzten 10, 15 Minuten
gar nicht mehr richtig rennen,
weil das wie Schmirgelpapier gerieben hat.
Das erste, was ich machen musste, als ich daheim war,
war das Ding ausziehen, das T-Shirt ausziehen
und erstmal Dick-Bepanthen auf meinen Nippel gräben.
Das ist wieder, ne, einfach ein gescheites T-Shirt anziehen
oder ein Unterhemd drunter ziehen.
Ich habe ja extra so Unterhemden,
also so eng anliegende Unterhemden, die dafür gemacht sind
und so quasi schweißdurchlässiges Material.
Aber ganz ehrlich,
kauft lieber was Gescheites anstatt so ein Billigkrempel.
Ja.
So, und jetzt zeige ich euch, wo wir stehen geblieben sind.
Nein, nein, nein, ich sehe ja schon wieder C++,
da habe ich jetzt wirklich keinen Nerv drauf.
Also, folgendes.
Kurze Recap für alle, die nicht dabei waren
oder die es vergessen haben oder die es wissen
und jetzt genervt sind.
Ich habe mir den ESP32 S3 gekauft.
Das ist so ein relativ günstiger Microcontroller
mit ziemlich viel Rechenpower.
WLAN.
Ja, Sebi, so sieht es aus.
Und einem Display.
Und was wir jetzt gemacht haben ist,
die letzten paar Streams,
ist einen Webserver auf diesem Ding laufen lassen.
Hier, das ist leider C++, kommt man nicht drumherum.
Weil das Zeug ist halt,
das Standard-SDK ist halt nur C++.
Ja, das ist C++.
Da läuft ein Webserver mit HTTPS,
also ein Webserver mit TLS.
Und,
das ist,
darüber wird eine Index-HTML ausgeliefert
mit einer Mini-Web, Svelte-Web-Anwendung.
Und darauf läuft noch Websocket,
Websockets im Backend,
wo die neuesten Werte vom Sensor immer an das Frontend quasi gestreamt werden,
sobald es neue Werte gibt.
Jetzt ist aktuell sind das nur Fake-Werte.
Hier, guck.
Da liest den Onboard-Temperatursensor aus
für die CPU-Temperatur
und schickt die an die Clients alle,
alle 500 Millisekunden.
Das ist so zum Testen.
Und ich kann euch auch zeigen,
dass das Websocket-Zeug funktioniert.
Guckt, wenn ich mich hier einlogge,
auf der, das, das hier ist die IP-Adresse vom ESP,
von dieser Kiste hier, die im WLAN gerade hängt.
Und wenn ich mich da beim Websocket einlogge, sieht man, zack,
ich krieg einmal initial,
wenn ich mich einlogge, Informationen drüber geschickt,
was es für ein Microcontroller ist,
mit welchem WLAN ich verbunden bin, welches Backup-WLAN
und dann krieg ich alle 500 Millisekunden die Sensorwerte geschickt.
Und dann krieg ich alle 500 Millisekunden die Sensorwerte geschickt.
Und dann krieg ich alle 500 Millisekunden die Sensorwerte geschickt.
Über Websocket.
Und man sieht ja auch, das ist wirklich richtig echter quasi Websocket-Broadcast.
Egal wie viele Websocket, ich glaube maximal 20 Stück oder so,
wie viele da gehen, dann ist der RAM alle von dem Ding.
Aber, ich mein, das Teil hat nur 512 Kilobyte RAM.
Wobei, der hat mehr.
Der hat noch mehr für grafische Ausgaben auf dem Display.
Und das funzt.
So, und es gibt viele Projekte, die
sowas in der Richtung bereitstellen für den ESP32,
aber ich wollte das mal selbst machen.
Ich kenne allerdings kein Projekt, was über HTTPS funktioniert und mit Websockets.
Quasi mit TLS-Websockets.
Und ich habe jetzt eine Webanwendung gebaut.
Da bauen wir uns heute ein bisschen dran weiter hier.
Das ist das, was auf dem Microcontroller gerade läuft.
Dev-Ausgabe läuft lokal.
Und da kann man dann hier auf der Hauptseite Sachen anzeigen,
beispielsweise die aktuellen Sensorwerte und sonst was.
Da kümmern wir uns aber drum.
Und es gibt, kann ich euch auch noch zeigen,
es gibt eine Settings-Page.
Da kann man die WiFi-Infos ändern.
Gegen, quasi in welches WLAN sich der Microcontroller verbindet.
Das ist ein bisschen wie, kennt ihr Tasmota?
Ja, wahrscheinlich kennen ein paar Leute von euch Tasmota.
Das ist auch eine ESP32-Firmware.
Die hat so einen ähnlichen Dialog für WiFi-Settings.
Sieht da ähnlich aus, ja.
Ja, so sieht das dort aus bei hier.
So sieht das bei Tasmota aus.
Das ist im Prinzip meine Variante davon.
Ja, also sprich, du kannst dich auf das Webinterface connecten,
kannst deine WLAN-Infos ändern
und dann startet der Microcontroller neu und verbindet sich zum neuen WLAN.
Ich kann euch auch zeigen, dass das funktioniert, ja.
Wenn ich jetzt beispielsweise, achso,
und ich habe ein Feature eingebaut, was ich so auch selten sehe,
was ich mir wünschen würde,
dass das mehr Hersteller in ihre Firmware einbauen,
weil ganz viele Hersteller benutzen tatsächlich
ein ESP32,
ich weiß, ich unten drunter, für ihre Produkte.
Also wenn ihr IoT-Geräte bei euch daheim habt, ja,
oder beispielsweise auch eine Ladestation für ein Elektroauto,
die Chancen, dass da drinnen auch ein ESP32 werkelt
oder ein ESP, die ältere noch, ein ESP2866,
die Chancen sind nicht zu gering.
Ich würde sogar sagen, die Chancen sind relativ hoch,
dass wenn ihr viele IoT-Geräte habt oder ein bisschen
Smart Home-Geräte, dass da viele Geräte von Haus aus
mit eben einem ESP32 laufen.
Ihr wisst davon eben halt einfach nichts.
Müsst ihr ja auch nicht. Ist ja auch egal.
Kann euch ja egal sein, solange das Gerät funktioniert,
was da für ein Controller drinnen läuft.
Ja, und das ist ein Feature, was ich mir wünschen würde,
dass das mehr Hersteller einbauen würden in ihre Firmware,
nämlich, dass man nicht nur ein WLAN angeben kann,
sondern auch ein Backup-WLAN eingeben kann.
Deswegen wollte ich sowas mal von Hand bauen und gucken,
wie man sowas gescheit macht.
Und das funktioniert auch schon ganz gut.
Zum Beispiel, wenn ich jetzt sage,
also die Logik ist folgendermaßen, man trägt zwei WLAN,
also man muss mindestens ein WLAN antragen.
Klar, sonst
klappt ja die WLAN-Verbindung nicht.
Und der probiert dann das erste WLAN zuerst.
Und wenn das erste WLAN nicht funktioniert,
dann probiert er das zweite WLAN.
Und nur dann
kackt er ab, wenn es nicht funktioniert.
Da kann er noch ein Access-Point aufmachen.
Das haben wir noch nicht programmiert.
Also sprich, wenn ihr jetzt zum Beispiel euer WLAN ändert daheim,
die ganzen Shelly-Dinger haben auch mittlerweile glaube ich ESP 32.
Früher hatten die ESP 2866, ja.
Wulpe Sage, danke schön für den Sub.
Und danke an die ganzen Subs, die ich vielleicht übersehen habe.
Ich glaube, ja, übersehen.
In letzter Zeit nicht so auf Zack, was das angeht, aber ich glaube nicht.
Ne, alles klar.
Ja, und ja, das würde ich mir von mehr Herstellern wünschen, dass sie das,
dass sie das in ihre Firmware einbauen, so wie hier.
Zum Beispiel, wenn ihr jetzt ein WLAN habt bei euch daheim, sagen wir mal,
ihr habt eine Fritzbox, habt dann ein WLAN auf, habt da eure IoT-Geräte verbunden
und ihr wollt jetzt ein neues WLAN-Passwort vergeben für die Fritzbox.
Dann müsst ihr ja auf gut Glück
das ändern.
Auf den Geräten, dann das WLAN ändern, danach das WLAN-Passwort ändern
und hoffen, dass alle Geräte wieder reinkommen ins WLAN.
Ihr versteht, ihr versteht das Problem.
Ich glaube, jeder, der mal größere
Änderungen gemacht hat in seinem WLAN und viele IoT-Geräte hat, kann ein Lied
von singen, wie ätzend das sein kann.
Und wenn man da keinen Access-Point hat, der zusätzliche Features für sowas hat,
wie zum Beispiel
verschiedene Passwörter je Endgerät, gibt es ja mittlerweile glücklicherweise bei
den meisten ein bisschen größeren WLAN-Equipment-Herstellern.
Und ich meine nicht WPA Enterprise, sondern
Dynamic Pre-Shared Keys.
Aber wenn man das nicht hat, würde ich das jetzt so machen.
Stellt euch mal vor, ich bin hier im WLAN
PepoShy 1 und das ist das WLAN von meiner Fritzbox und ich will das jetzt umstellen.
Ja, ich würde, ich will das jetzt umstellen von
PepoShy 1 auf.
Ja, Backup-Hotspot finde ich nicht gut.
Backup-Hotspot würde ich immer ausschalten, weil wenn das Ding mal irgendwie
Probleme hat oder ein WLAN-Problem hat, hast du auf einmal 20 Geräte, die den
Hotspot aufmachen und wo Leute sich ohne Passwort anmelden können.
Weil die meisten WLAN-Hotspots sind ja auch so blöd gemacht mit Passwortless, ohne
Spezifizierung. Das ist übrigens auch was, was ich mal testweise einbauen will.
Das Ding hier hat ein Bild.
Ich will das, ich will mal einen Hotspot mit dem Teil aufmachen und ein QR-Code
generieren, dass man mit seinem Handy den QR-Code vom Display fotografieren kann und
dann in den, in den, in den initialen Setup-Access-Point reinkommt.
Oder gleich das Portal aufgeht,
dich weiterleiten, du fahrt der TPS und du kannst dein Passwort vergeben.
Dann müssen wir doch gucken, wie das alles, wie das so tut, ja.
Zumindest stellt euch vor, ich will hier wechseln, so keine Ahnung, von PepoShy
2 auf Home 4 und das würde ich jetzt machen.
Würde ich jetzt, würde ich jetzt eintragen.
Dann würde ich Save drücken.
Und jetzt habe ich halt den Vorteil, dass wenn ich, selbst wenn ich mich vertippt
habe, das Gerät immer noch in das Backup-WLAN zurück reingeht.
Ja, ich zeige euch das mal.
Ich drücke jetzt mal auf Save und ich hoffe, es funktioniert.
Save. Ja, der ESP startet neu.
Man sieht, er versucht, sich zu verbinden zu PepoShy
1.
Ja, weil ich kein Passwort angegeben habe, ich kacklub.
Ja, siehste, das ist nämlich auch was, was wir heute machen müssen.
Form Validation.
Hast du mal ein Video-Stream über Avalonia gemacht?
Ja, habe ich.
Habe ich. Schon eine Weile her.
Du findest es aber hier.
Guck mal.
Bei mir im Stream Archive.
Avalonia.
Streamtitel?
Ja, was ich mit dem Display anzeigen lassen will.
Ehrlich gesagt.
Ich habe mir den Controller nicht gekauft, weil ich ein konkretes konkrete Idee habe.
Die anderen Teil der Firmware kommt auf den ESP bei mir im Keller, aber der braucht
kein Display. Ne, weiß ich noch nicht, aber wir werden damit ein bisschen rumbasteln.
Ja, ja, Avalonia haben wir uns auch schon, wir haben uns Avalonia schon mehrfach
angeguckt, das dürfte die letzte Ware, die der letzte Versuch gewesen sein.
Mir hat Avalonia eigentlich ganz gut gefallen.
Ja, so sieht's aus.
Zigbee is nice.
Manchmal.
Ist WLAN aber trotzdem die bessere Alternative.
Ja, gerade für sowas, was du selbst bauen willst.
Da hast du zwar die Möglichkeit aktuell.
Jetzt.
Zum Glück mittlerweile.
Du kannst den ESP 32 C6 verwenden.
Der hat Zigbee eingebaut, aber da musst du halt Zigbee selbst machen.
Manchmal ist WiFi die einfachste Variante und manche Geräte gibt es auch nur gescheite.
Mit WiFi.
Ich habe beispielsweise noch keine gescheite
Zigbee Steckdose Zwischenstecker gefunden, der USB Anschlüsse hat
und nicht portätslich aussieht und die voneinander getrennt schalten kann.
Also nicht die USB Anschlüsse, sondern
die USB Anschlüsse und den normalen Stecker.
Gibt's anscheinend nicht.
Zigbee is nice, aber Zigbee ist auch nicht das Allheilmittel für alles.
Und gerade im Haus, wo WLAN Abdeckung da ist, bieten sich WiFi Geräte halt einfach an.
So, jetzt zeige ich euch das nochmal.
Guck, ich will jetzt mein WLAN wechseln.
Pepo Schall 2.
Und ich vertippe mich.
Okay, ich habe mich jetzt vertippt.
Safe.
So, er startet neu.
Man sieht, er versucht, sich zu Pepo Schall 2 zu verbinden.
Aber die Verbindung zu Pepo Schall 2 funktioniert nicht.
Und dann probiert er, geht er Backup zurück wieder
in Home 4.
Und da geht das noch, weil das alte Passwort noch drin ist.
Das finde ich, finde ich sehr nice.
Ja, und heute bauen wir ein bisschen an dem Frontend rum, weil
minimal ist das C++ heute.
Mehr Frontend-Stells.
Ich habe gestern, wie gesagt, nebenbei, wo ich ein bisschen Fußball geguckt habe,
gestern Abend, als das ganze bis 23 Uhr ging, habe ich ein bisschen am Frontend
rumgebastelt und habe das versucht, möglichst übersichtlich zu machen.
Aktuell
ist das noch ziemlich easy.
Übrigens lasst euch nicht verwirren, weil jetzt hier Localhost steht.
Das kommt alles, wie ihr gesehen habt,
hinten trotzdem auf meinem Microsoft Controller, Microsoft, auf meinem
Microcontroller raus, weil Proxy, das wird geproxied auf den Microcontroller alles.
Okay, also ihr habt es ja eben gesehen.
Ich habe hier auf Save gedrückt, obwohl das
quasi über so einen Localhost Proxy geht, aber es kommt auf den Microcontroller raus.
Übrigens, was der Microcontroller hier ausgibt, ist vollkommen sinnlos.
Da zählt einfach seine Uptime hoch, dass ich sehe, dass da alles okay ist.
Und da wollte ich ein bisschen dran rumbauen.
Ich zeige euch das Ganze mal.
Ich finde, ich habe das, also ich bin ja kein großer Frontend Checker und auch
kein hauptberuflicher Frontend Entwickler oder sowas.
Das Problem hast du ja da nicht.
Das ist ja eigener Controller mit eigener Firmware.
Da ist nix mit Cloud oder sonst irgendwas.
Es läuft alles auf dem Controller selbst.
Das wollte ich sagen.
Genau, also ich habe das versucht, halbwegs übersichtlich zu machen.
Das Ganze ist das Welt Web Anwendung.
Ach ja, noch eine Sache muss ich euch zeigen, und zwar
wer sich jetzt fragt, wie geht das denn, dass ich ich beweise euch auch erst mal,
dass das, was ich hier erzähle, dass es auch wirklich funktioniert, indem ich das
jetzt einfach mal alles auf den Microcontroller flashe.
Jetzt könnt ihr euch natürlich fragen.
Das hier ist der Microcontroller, diese Kiste hier.
Und.
Da liegt ja eigentlich nur die Web Anwendung.
Wie kommt denn jetzt diese Web Anwendung eigentlich auf den Microcontroller drauf?
Ja, das funktioniert folgendermaßen.
Ich habe hier so ein kleines Bild Bild Skript gebaut.
Und das erzeugt übrigens das hat jetzt sogar Emojis und farbliche Ausgabe.
Also besser, besser geht es nicht mehr.
Das erzeugt SSH Keys.
Das baut die Web Anwendung hier, die da
mit NPM.
NPM Bild.
Ich habe ein Plugin für Viet drinnen.
Quasi für den für den Bundler.
Das erzeugt daraus eine Single File, das bundelt quasi alles JavaScript, was ihr
hier seht und alles CSS und alles HTML, was hier in der Web Anwendung ist.
Bundle das alles zusammen in eine Index HTML.
Das passiert hier mit NPM Bild.
Dann gezippe ich die Index HTML.
Und packe die konvertiere die zu einem C zu einem C Array.
Und dann kommt diese kommt diese.
Das ist automatisch generiert.
Kommt hier so eine Datei raus, die enthält quasi
mein Private Key für das SSL Zertifikat,
den Server Server Zertifikat vom Teil vom SSL Zertifikat.
Und das hier ist meine Web Anwendung.
Das ist das gezippte Binary
meiner Web Anwendung als Charakter Array.
Das macht das erzeugt dieses Bash Script quasi für mich.
Und dann kann ich das Ganze dadurch, dass das ja im Endeffekt nur einfache C Arrays
sind,
inkluden in meine Firmware und wird ausgeliefert.
So und ich beweise euch jetzt, dass es funktioniert.
Ich habe gestern ein bisschen dran rum gedoktert.
Ich hoffe, es funktioniert noch.
Es gibt übrigens muss ich vielleicht auch noch mal erwähnen.
So für Leute, die das auch machen wollen.
Es gibt theoretisch einfachere Möglichkeiten.
Die gesamte Anwendung läuft auf dem Microcontroller.
Richtig, das zeige ich dir jetzt auch, dass das funktioniert.
Es gibt theoretisch einfachere Möglichkeiten, das zu machen.
Die ESPs, die haben ein.
Die Kiste hier hat, glaube ich, 16 Megabyte Flash.
Das ist massive viel für solche Controller.
Die alten haben nur vier Megabyte.
Das reicht aber auch dicke.
Meine Web Anwendung aktuell ist.
Weiß ich gar nicht.
Gucken wir uns jetzt an.
Meine Web Anwendung aktuell ist zwölf, zwölf, zwölf Kilobyte groß.
Meine Firma hat einen HTTP Server.
Richtig.
Ja, also die, die hat ja Index HTML ist nur zwölf Kilobyte gezippt.
Ich zeige es mit dem Web Server.
Web Server kann ich dir gleich zeigen.
Noch mal, wenn es dich interessiert.
Der Browser ist nicht auf dem Controller der Web Server und die Web Anwendung.
Also es gibt theoretisch noch eine einfachere
Möglichkeit, das, das zu machen.
Und zwar die auch die vier auch die Controller mit vier Megabyte Flash.
Die können ein File System drauf erzeugen.
Die können Spiffs, Little FS oder FAT.
Nee, das ist das ist weit entfernt von ESP Home.
Das ist ja noch.
Das ist eigentlich noch relativ übersichtlich hier alles.
Aber was sagt ihr denn hier zu meinen?
Also Bild Skript ohne Emoji Output ist eigentlich.
Das geht nicht.
Ja, was soll ich jetzt sagen?
Ja, genau.
Also das Ding kann verschiedene File Systeme haben und man kann quasi ein
File System Image bauen und die Web Anwendung da drauf schieben und dann dem
sagen Lade einfach alle Files von diesem File System.
Da kannst du beispielsweise auch Web
Anwendungen ausliefern, die mehr als aus mehr Files aus als als aus einer Datei bestehen.
Also wenn ihr zum Beispiel das Welt Kit Anwendung habt, die besteht ja im Endeffekt
dann irgendwie aus 50 kleinen Dateien, die könnt ihr auch nicht bundlen zu einer
Index HTML.
Dann ist es vielleicht besser.
Ihr baut so einen File System Image für für den ESP und flasht das damit drauf.
Gibt es dann MKFS, Little FS oder Spiffs oder so was kann man machen.
Nachteil ist.
Dass das dadurch langsamer wird, weil.
Der Web Server läuft über HTTPS und die Hardware da drinne, die ist, die ist für
Micro Controller Verhältnis ist enorm schnell.
Das ist ein Dual Core mit 240 Megahertz.
Aber trotzdem dauert der initiale TLS HTTPS Handshake trotzdem 1,5 Sekunden.
Und nachdem Chrome und Firefox ja so
pepega sind und mehrere parallele Verbindungen mittlerweile aufmachen,
braucht das mindestens sechsmal 1,5 bis 2 Sekunden, bis die initialen
TCP Verbindungen stehen zum Controller,
dass überhaupt diese ganzen kleinen Files abgerufen werden können.
Und dann kann er nicht so
viele Verbindungen, dann brechen manche ab und er muss wieder neue Verbindungen aufbauen.
Das ist einfach super langsam.
Ich habe das ausprobiert.
Das Weltkit Anwendung auf Spiff auf Spiffs dauert.
Mit ein paar Modulen drinne dauert 15, 20, 25 Sekunden zum Laden.
Wohingegen meine zwei Sekunden braucht.
Ohne HTTPS kann man das machen.
Ich zeige euch jetzt mal, dass das funktioniert.
Also ich habe jetzt die Web Anwendung generiert.
Die SSL Zertifikate generiert und jetzt flashen wir das Ganze mal.
Ups, hier oben muss ich flashen.
Ja, jetzt flashen wir das Ganze mal auf die Microcontroller drauf.
Leute, ich hoffe, es funktioniert noch.
Ich habe gestern so viel rum gebaut.
Vielleicht ist jetzt auch kaputt.
Wobei es scheint noch zu gehen.
HTTP im Heimnetz würde mich, würde mich auch nicht stören.
Aber es gibt einen Grund, warum ich das mit HTTPS machen wollte.
Erstens finde ich generell HTTPS Verbindung
immer nicer.
Wobei es halt da eine Frage ist, will man das diesem kleinen Controller zumuten?
Aber der Hauptgrund ist.
Wie machst du die initiale Konfiguration?
Die initiale Konfiguration läuft bei den allermeisten IoT Produkten über ein
nicht Passwort geschützten Access Point, den das Gerät aufmacht über HTTP.
Das heißt, jeder kann potenziell mitlesen, wie dein WLAN Passwort ist, wenn er gerade
rechtzeitig in deiner Nähe ist.
Also wenn ihr einen Tasmota Setup macht
über den Access Point von Tasmota, das ist unverschlüsselt
über HTTP in einem offenen Access Point.
Also theoretisch kann jeder euer WLAN Passwort mitlesen.
Und deswegen dachte ich mir, warum machen wir es nicht über HTTPS?
Dann kannst du trotzdem einen offenen
Access Point machen, aber niemand kann euer Passwort mitlesen.
HTTPS ist einfach beste.
Wifi 2, SSID not found.
Warum nicht?
Ich habe irgendwas PPGa-mäßiges geflasht gerade.
Unschlüssig.
Weiß ich gerade nicht, warum.
Egal.
Zumindest kann ich euch beweisen, dass das alles funktioniert.
Jetzt gehen wir nämlich mal auf die IP vom Microcontroller drauf.
HTTPS, Doppelpunkt, Doppel Slash, 122.168.6.148.
Bäm, logisch.
Das sind Self-Sign-Zertifikate.
Da wird sich auch keiner dafür irgendwie was anderes ausstellen.
Und jetzt Proceed.
Und ihr seht, nachdem ein bisschen gehandshaked wird, zack, ist mein Webinterface am Start.
Und jetzt seht ihr auch, das kommt jetzt wirklich vom Microcontroller.
Und aus irgendwelchen Gründen habe ich irgendwie mein
Wifi 2, SSID überflasht.
Ich weiß nicht genau, warum.
Ehrlich gesagt, aber okay.
Ich kann es ja noch mal setzen.
HEPO-Schei 1.
Guck jetzt mal gucken, ob es funktioniert.
Vielleicht habe ich auch etwas verkackt.
Kann ja sein. Save.
Funst, okay.
Ja, er ist wieder da.
Guck hier, es läuft auf dem Microcontroller.
Okay, jetzt halt.
Irgendwie habe ich das überflasht gerade.
Weiß nicht, was ich da getrieben habe.
So funktioniert das. Vorstellungsübrig.
Na, als was? Ach so, hier.
Netzwerk-Admin.
Pog.
Any device recommendations.
You mean Notebook or what?
No, I don't use the Notebook.
My Linux is in a VM and I really can recommend the setup.
I'm using Windows.
Laptop.
No, don't have any recommendations for Notebook for laptop at work.
I'm using.
I don't know.
I think it's a Dell Notebook, but it sucks.
No recommendations.
At the last time
I checked which devices were good support.
The old IBM Thinkpads were really good.
And I think the Lenovo Thinkpads are okay.
Semi okay.
But no first hand.
No experience.
Ja, keine Ahnung.
Also glaubt ihr mir, es läuft auf dem Microcontroller, das Ganze.
Jetzt können wir weitermachen.
So, und jetzt machen wir das Ganze ein bisschen hübsch.
Ich frage mich immer noch, warum meinen?
Das muss ich jetzt noch mal ausprobieren.
Kurz. Ich flash es jetzt noch mal.
Moin. Frosty.
Ob nach dem Flaschen wieder das zweite WLAN Passwort weg ist?
Ich weiß nicht warum.
Nee.
Ne, ist noch da.
Keine Ahnung, was ich da gebastelt habe.
Kein Schimmer.
So, und jetzt dachte ich mir, wir machen das mal ein bisschen hübsch.
Das Webinterface.
Und ich würde sagen, wir fangen mit einer Sache an, die mich schon die ganze Zeit nervt.
Und zwar, wir müssen das irgendwie validaten, was ich hier in meine Form eintrage.
Deswegen.
Ach ja, ich zeige euch erstmal die Web-Anwendung.
Die Web-Anwendung selbst ist eigentlich, finde ich, relativ übersichtlich.
Das ist eine Svelte 5 Web-Anwendung.
Das heißt, manche Sachen macht man wahrscheinlich nicht.
Oder wird sich noch rausstellen, dass man die vielleicht nicht so macht in Svelte 5.
Aber nachdem niemand irgendwie wirklich Erfahrung mit Svelte 5 hat, mache ich die halt einfach mal so.
Also, was passiert ist, Einstieg in die Web-Anwendung ist App.svelte.
Das erste, was hier drinnen passiert ist, da macht eine Websocket-Verbindung auf.
Und registriert sich hier bei diesen üblichen Websocket-Events.
Und Open, und Message, und Close.
Die einzige.
Das einzige Event, was ich wirklich verwende ist, eigentlich könnte ich den anderen Camper rausschmeißen, ja.
Das einzige, was ich wirklich verwende ist OnMessage.
Und es funktioniert folgendermaßen.
Sobald sich der Websocket-Client initial verbindet, kriegt er einen JSON geschickt.
Sieht man ja auch hier in der Konsole.
Sobald er sich, ich zeige es mal hier, zack.
Sobald er sich initial verbindet, ihr seht es hier, kriegt er eine Message geschickt.
Und zwar einmal mit einem Config-Objekt und einmal mit einem Svelte.
Stats-Objekt.
In Stats stehen so Sachen drin wie aktuelle IP, Memory-Usage, Memory-Size, WLAN-Verbindungsqualität, CPU-Temperatur, Uptime, Timestamp, Unix-Time, solche Dinger.
Und dann gibt es ein Config.
Dann gibt es ein Config-Objekt.
Da stehen ein paar Infos zum WLAN drin, was man braucht, um hier dann später die Sachen ändern zu können.
Was da nicht drin steht, und das ist Absicht, weil so macht man das eben auch nicht.
Und was da nicht drin steht, ist das WLAN-Passwort selber.
Das WLAN-Passwort will ich nicht irgendwie wieder ans Frontend zurück übertragen.
Das Einzige, was ich an Informationen mitgebe, ist, dass das WiFi-Passwort vorhanden ist.
Das reicht.
Und deswegen kann ich hier ein paar Sternchen als Platzhalter anzeigen, wenn das gesetzt ist oder halt leer.
Aber ansonsten bekommt man die Passwörter nie wieder aus dem Gerät raus.
Man kann sie nur überschreiben.
Man meint nie wieder raus.
Ja.
Ja, wahrscheinlich können Leute irgendwie den Flash ablöten und irgendwie bestimmt bekommt man die irgendwie wieder aus dem Gerät raus.
Aber ich finde, das ist vom Design her am besten.
Passwörter sind write-only.
Also von der Frontend-Seite aus.
Wie verbindest du dich mit einem...
Im Flash ist ja das Passwort.
Aber das Gerät rückt die Passwörter nie wieder raus.
Weder per Standard-Out, noch per Web-Interface.
Das benutzt natürlich die Passwörter, um sich am WLAN anzumelden.
Ja.
Ey, wenn das WLAN kein Passwort hat...
Ich weiß nicht, ob das ein Fall ist, den ich unterstützen will.
Kommt das ernsthaft vor?
Ja, man kann irgendwelche E-Views...
Den habe ich noch nie gemacht.
Meinst du, das kommt wirklich vor?
WLANs ohne Passwörter, wo die Leute das reinhängen wollen?
Ich meine, theoretisch geht das überhaupt kein Problem.
Ja.
Also das würde theoretisch gehen.
Also man kann jetzt auch schon leere Passwörter...
Passwörter theoretisch setzen, wenn ich das ein...
Aber ich glaube, das ist...
Nachdem ich das ja hauptsächlich für mich programmiere...
Also ich habe kein Passwort...
Passwortless-WLAN.
Äh.
Ja.
So, und...
Das merkt er sich.
Ich habe versucht...
Sowas...
Was ist denn Svelte State?
Wollte ich gerade...
Wollte ich gerade was zu sagen?
Das ist...
Das ist mein Versuch, Svelte Stores nachzubauen in Svelte 5.
In Svelte 4 gab es Stores...
Für globalen Stakes.
Das gibt es jetzt nicht mehr.
Es gibt aber was...
Zumindest für mich auf den ersten Blick einfacher aussieht.
Und ich finde, die haben viel richtig gemacht mit Svelte 5.
Das ist quasi ein neuer Svelte Store.
Nur, dass es nicht mehr diese komische Store-API hat.
Man legt hier im Prinzip einfach einen globalen State an.
Den ich exportiere.
Und den kann ich dann in jeder Komponente...
Kann ich darauf zugreifen.
Heißt im Endeffekt, ich setze das hier...
In meiner App.Svelte.
Aber...
Auch hier aus der Konfig-Komponente kann ich darauf zugreifen.
Das ist quasi globaler State.
Das ist quasi wie Store, nur neu.
Ob man das jetzt so macht, wird sich noch später alles rausstellen.
Und darin wird im Endeffekt gespeichert, die Websocket-Verbindung, auf welcher Seite ich mich gerade befinde.
Weil das ist ja kein Svelte-Kit-Projekt.
Das ist ein normales Svelte-Projekt.
Da ist auch kein Routing oder sowas dabei.
Dann die Konfig.
Die aktuellen Sets und die aktuellen Sensor-Werte.
Und die sind halt global in der gesamten Web-Anwendung verfügbar.
So, verbindet sich per Websocket.
Dann macht er ein bisschen Zeug, was nur relevant ist hier während der Entwicklung.
Und das war es hier im Prinzip dann mit HTML.
Der hat ein Spinner-Icon.
Was so lange angezeigt wird, bis die Websocket-Verbindung steht und die ersten Daten empfangen wurden.
Dann hat er eine Navigationsleiste hier oben.
Die ist auch äußerst simpel.
Die kann auf die Homepage oder auf die Settings-Seite gehen.
Und dann gibt es eine Startseite und eine Konfig-Seite.
Das ist alles.
Die Konfig-Seite besteht aktuell hier draus.
Im Prinzip handelt das das Formular hier.
Da gibt es, also eigentlich ist es ja nur dieses Submit-Event.
Wenn du hier unten auf den Save-Button klickst,
dann...
Das ist übrigens verkehrt gemacht, fällt mir gerade ein.
Dann wird hier dieses Submit ausgelöst und dann schickt er das zum Server.
Und das müssen wir heute auf jeden Fall noch ändern, dass das Input irgendwie validated wird.
Weil zum Beispiel, wenn ich jetzt hier was reinschreibe und hier unten das Passwort leer lasse,
will ich, dass eine Meldung kommt, ey, du musst ein Passwort setzen, wenn du eine SSID setzt.
Und ihr seht, hier kann er jetzt auch wieder auf die Websocket-Verbindung zugreifen.
Über Websocket.
Über Websocket schicke ich quasi jetzt die neuesten WiFi-Sachen dann ans Server über HTTPS.
Das Ganze wird dann hier gehandelt im Web-Server auf dem ESP.
Da gibt es dann hier sowas wie...
Handle Websocket JSON.
Da guckt er, ob der Message-Type WiFi ist.
Und wenn das WiFi ist, dann schreibt er das in eine neue Konfig ins Flash.
Aber wir kümmern uns hauptsächlich heute um das Web-Interface.
Das heißt, ich würde sagen, wir fangen auch mal damit an.
Wir machen jetzt mal Form-Validation.
Wie gesagt, ich bin nicht der große Frontend-Checker.
Wir machen mal Form-Validation ohne irgendwelche...
Weil für diese drei Eingabefelder brauche ich keine Validation-Library oder sowas.
Das machen wir von Hand.
Ich kommentiere mal aus, dass was passiert, wenn ich auf Save drücke.
Weil ich will ja testen, was passiert mit irgendwelchen Error-Anzeigen.
Nee, nicht mit Alert.
Irgendwie...
Ich bin mir noch nicht sicher.
Theoretisch könnte ja eigentlich einfach der Input einen roten Rand bekommen.
Und eine Fehlermeldung darunter angezeigt werden.
Das können wir mal exemplarisch testweise machen.
Und gucken, wie wir das stylen.
Und dann schauen wir, wie wir das mit den Fehlern...
Also wir stylen erstmal so ein Formular hier für Fehler.
Hier, Input.
Kannst du auch machen.
Könntest du auch machen.
Der Vorteil ist von dieser Geschichte, dass das automatisch Reactive ist.
Bei Socket ist das jetzt relativ egal.
Aber bei den anderen Sachen, die da drin sind, die updaten sich automatisch.
Also sprich, ich zeige dir das mal.
Wenn ich hier hingehe, guck da.
Und mal mein aktuelles...
Das, was in Stats drin steht, rendere.
Wie geht das?
Stringify, Pretty, Pretty, Print.
Ne, wie macht man das nochmal?
Wie punzt das nochmal?
JSON, Stringify, Pretty.
Stack Overflow.
Ja, ich bin Human.
0,2.
Okay, JavaScript.
Warum auch immer.
Okay.
So, und jetzt pass mal auf.
Du wirst feststellen, sobald was Neues reinkommt...
Oder auch nicht.
Hm.
Ich hätte eigentlich damit gerechnet, das updatet sich jetzt.
Benutze ich das irgendwie falsch?
Hätte ich...
Ah, ich glaube, ich benutze das falsch, gell?
Ich glaube, ich hätte das hier auch...
Ne, ich...
Siehst du?
Gut, dass du es gesagt hast.
Das ist auf jeden Fall nicht so gedacht.
Das...
Ich benutze das falsch.
Ich glaube, ich muss das hier auch als State deklarieren.
Zumindest, wenn man es richtig macht.
Wobei ich nicht weiß, wie es geht, weil ich es Welt 5 vorher nicht groß benutzt habe.
Updatet sich das automatisch, sobald hier was Neues reinkommt.
Äh, wie geht denn...
Wie geht denn das?
Muss man das...
Muss man das vielleicht auch als State irgendwie markieren vorher?
Oh, ne, das fand ich schon mal nett.
Du returnst das statische Objekt.
Du musst das als State.
Okay.
Ich habe keine Ahnung...
Wie ich das mache.
Da muss ich jetzt selbst mal...
Component Party.
Welt 5.
So.
Vergleichen wir mal.
Welt 4 und Welt 5.
So, hier.
Store.
Ich will ja, dass das automatisch updatet.
So, das war die alte Variante, wie man das gemacht hat.
Hier.
Create User Store.
Jetzt ist es jetzt die neue Variante.
Okay.
Das ist mir zu high IQ.
Welt 5.
Nested.
Äh, State.
Was bin ich sehend.
Also, in Welt 4 musste man jetzt hier noch einen...
Hier noch irgendwie einen Dollar davon.
Vormachen oder so.
Aber das muss man wahrscheinlich jetzt nicht mehr.
Updatet das, wenn ich einfach nur State mache?
Ne, ne?
Ey, dann habe ich keine Ahnung, wie das richtig funktioniert, ehrlich gesagt.
Kein Blasenschimmer.
Wenn man es richtig macht, sollte sich das auf jeden Fall selbst automatisch updaten.
Was möchte der mir sagen hier mit...
Was ist das hier?
Get Username, Set Username.
Und was ist Punkt, Punkt, Punkt Initial?
Da hört man Java...
Da hört man Pfeifert-JavaScript-Zeug auf.
Also, das ist...
Das ist JavaScript so destructuring oder wie man das nennt.
Oder destroying oder...
Aber ich verstehe null, was es macht an der Stelle.
Ansonsten taugt hier nirgends zu Initial Username.
Es nimmt alle Properties mit.
Ja, okay, aber...
Du kannst aber stattdessen auch State als Klasse definieren.
Wow, jetzt wird es aber...
Klassen in JavaScript.
12, 5, Class, Store.
Nach was suche ich da?
Was? Set Servers?
What the hell?
Class.
Wow.
What the...
Monkeys.
What?
Oh, das ist aber richtiger, richtiger High IQ Kram hier.
Da muss ich mal...
Nested Stores.
Ein Beispiel für...
Aha.
Okay, und wie sieht das Ganze jetzt in...
12, 5 aus?
Okay, To-Do's, Dollar State.
Äh...
Das ist doch im Prinzip...
Nee, Moment.
Ich mache ja da keinen Push rein oder so.
Ich ändere ja was in dem Nested Object.
Mach einfach eine Klasse.
Ja, aber ich weiß nicht mal, wie die aussehen soll.
So einfach...
Einfach so oder wie?
Okay, JavaScript-Klassen, ey.
Class?
Und jetzt?
Keine Ahnung.
Ich weiß ja immer, wie ich da anfange.
Class.
Nach was suche ich denn jetzt?
State oder so?
Gibt es da hier ein Beispiel?
Hier, Class.
Ja, das ist CSS.
Okay.
Das ist so ein Beispiel.
Das ist halt Overkill.
What?
Was ist das?
Okay.
Aha.
Ja, schauen wir mal.
So.
Und...
Aber...
Also, das habe ich noch nicht so ganz gecheckt.
Warum soll man das jetzt als Klasse machen?
Und warum funktioniert mein Code-Formating da drin dann richtig?
Also, sprich, anstatt so...
Machen wir jetzt...
Machen wir jetzt quasi das,
das hier noch mal.
Nur, dass wir jetzt hier immer
State dahinter schreiben, oder?
Ah, da muss man gleich machen, oder?
Und dann?
Und dann keine Kommas, oder?
Oh, das verwirrt mich.
Okay, State.
Chat, ich mache das jetzt einfach mal.
Ich habe keinen blassen Schimmer, ob das alles so tut.
Zack, zack.
So, da haben wir jetzt hier
neuer Cursor,
neuer Cursor, neuer Cursor.
Ich bin mir selbst nicht sicher,
was ich gerade mache.
So, und jetzt muss das Komma noch weg?
So.
Aber es geht immer noch nicht.
Weil es irgendein Nested Object
ist da drin.
Geht? Echt? Es ist geupdatet?
Ah, es geht! Es geht! Es funktioniert.
Ich checke ja immer noch nicht,
ehrlich gesagt, was der Unterschied ist
dazwischen. Aber okay,
ist in Ordnung. Nice, ja.
Es geht jetzt einfach.
Okay, jetzt
updatet sich das automatisch.
Sehr schön. Ja, das ist eigentlich
das, was ich ursprünglich zeigen wollte.
Guck, man kann es auch hier zeigen.
Guck, jetzt updatet sich das hier mehrfach pro Sekunde.
Alles automatisch. Immer, immer
wenn neue Werte reinkommen, updatet sich das jetzt.
Okay.
Aha.
So, aber mal zurück hier. Form.
So, also.
Meine
Idee war ja,
dass wir das jetzt irgendwie
validaten müssen.
Also sprich,
das ist jetzt irgendeine
Pepega-Anzeige einfach nur.
Das ist irgendeine...
Das denkt, dass es nicht existiert,
aber es existiert.
By the way, soll ich euch was richtig
Nices zeigen, was ich
rausbekommen habe gestern mit Type-Annotations.
Das ist ja kein Type-Skript
dahinter. Mit Type-Annotations.
Guckt mal. Und zwar
bei
ähm...
Hier.
Bei meiner Icon-Komponente.
Ja. Da kann man einen Namen angeben
für das Icon. Und schaut mal.
Ich habe hier eine Auswahl,
welche Icons erlaubt sind. Und das
obwohl dieser Wert
ein String ist. Wisst ihr, wie das funktioniert?
Da habe ich bestimmt eine halbe Stunde
Stack-Overflow durchgoogelt
bis zum Geht-Nicht-Mehr, bis ich
das gefunden habe. Und zwar
das geht so
mit einer
sowas von
Eleven-Head-Type-Annotation.
Man kann da sagen,
der, also quasi die Variable
name, mit dem Namen name,
die kann leer sein, die kann null sein.
Oh, vorbei. Warum kann die eigentlich
null sein? Das macht keinen Sinn. Ähm...
Oder die darf einen
von diesen drei String-Werten
haben. Das ist quasi so eine Art
I-Name als
als Type, als JS-Doc-Type.
Das ist richtig
HRQ-Kram.
Ich habe es noch nicht so hundertprozentig
gecheckt. Ich habe das dann irgendwann mit einem
Stack-Overflow-Beitrag gefunden und selbst ein bisschen
rumgedockt hat, bis es funktioniert hat.
Ja. Aber das finde ich
cool, dass das funktioniert.
Aber ich wollte eigentlich jetzt das...
Das heißt, ich könnte jetzt
ja theoretisch, wenn wir da
gerade dabei sind, ich könnte jetzt ja eigentlich
auch sagen, was mein
Config-Element
höher... Doch, doch, doch,
doch, das kann TypeScript. Doch, doch.
Aber ich
habe TypeScript nicht enabled
für das Projekt. Doch, das kann das.
Das ist überhaupt kein Ding.
Ich glaube, die empfehlen sogar bei
neuen Projekten und bei Sachen,
die ein bisschen größer werden, TypeScript
standardmäßig einzuschalten.
Habe ich aber nicht gemacht.
Aber es geht. Ist gar kein Problem.
Könnte ich dem Kram jetzt nicht
sagen,
was das für Werte enthält?
Könnte ich jetzt nicht hier auch sowas sagen, wie...
Gucken wir mal.
Das probiere ich jetzt mal kurz aus, ob das funzt.
Einfach, dass
er hier aufhört, rumzumeckern.
Was ist eigentlich, wenn ich hier draufklicke?
Disable Checking.
Und jetzt? No TS Check.
Nee, das muss anders sein.
Ich könnte jetzt wahrscheinlich sagen,
da müssen wir jetzt mal googeln, wie das funzt.
Wir können jetzt hier
JSDoc annotate
Wobei,
das müsste doch ganz genauso
funktionieren,
wie hier, oder?
Müsste ich jetzt hier nicht eigentlich auch
sagen können?
Da bin ich mal gespannt. Müsste ich jetzt nicht auch sagen können,
dieser Type
Ja gut, das ist natürlich Plösschen.
Dieser Type, also
config
enthält, nestet
quasi
ähm
wiederum einen neuen Type,
der Wifi1
SSID heißt, und das
muss ein String sein.
Das funktioniert
so nicht.
Dazu kenne ich mich zu wenig
damit kenne ich mich
zu wenig mit JSDocs
aus.
Ist das eigentlich ein Beispiel für Parameter?
Aber mit Type ist ja schon richtig, ne?
Hier, guck. Type Number
Ah, Moment, Moment,
Moment, Moment, Moment.
Warte mal, warte mal.
Das muss, äh, es wird
Webfrontend für die ESP-Geschichte
gebaut, die wir letztens im Stream
gestrickt haben.
Und ich versuche gerade JSDoc
Annotations zu checken.
Äh, warte mal, warte mal, warte mal.
Also, ich sag jetzt einfach nur,
das kommt weg. Also,
config? Nee.
Wie funzt denn das? Ach nee,
das muss da gar nicht mehr rein. Da muss
einfach nur hier stehen, so. So muss das
sein, oder?
Keine Ahnung.
Wie annotated man das
jetzt? Das ist
check. Ja, ich gebe zu,
Timescripten wäre einfacher, aber ich meine, schade
ja auch nix, ich mach mal was anderes.
Wie annotated man das jetzt?
Also, add type, guck mal, so machen
die das bei einer Variable.
Hier, type, type.
So, string, bla.
It's not a signable string.
Im Prinzip will ich
den ja, will ich den ja, will ich den ja
sagen, dass
das, dass dieses Ding ist
vom type.
Warte mal.
Moment, das ArrayString ist mir egal.
So, das Ding ist vom type. Im Endeffekt
ist es ja eigentlich wieder was nested.
Okay, jetzt ist er vom type
object. Das hat's, das hat's gecheckt.
So, und da drinne gibt es
jetzt eine Dings, die sich nennt
Wifi1SSID
und das ist vom type string.
Aha!
Aber warum checkt er das net?
Ah, ne, Moment. Ah, ich kack
noob. Falsche Stelle.
Jetzt aber, ha?
Ha, er checkt's. Guck mal, hat's
kapiert. Den gibt's jetzt
angeblich. Massive.
Ja, bei so, bei sowas
ist TypeScript doch eindeutig die schönere
Variante. Weil, da, da
wirst, da wirst du ja verrückt mit der Zeit hier, wenn
du das alles annotaten musst.
Wäre es nicht mittlerweile
echt fast schon sinnvoller,
einfach TypeScript in den Browser einzubauen
und gut ist? Kann man das
hier irgendwie line-breaken, ohne dass es abkackt?
Ne. Das Proposal
gibt's, da sollen sie mal ein bisschen schneller propo-proposen.
Das, okay, ich hab, ja, jetzt hab
ich gecheckt, wie das aussehen muss.
Aber sowas dauert ja immer
Jahre. Ich glaub, man kann, ich glaube,
man darf String groß und klein
schreiben. Es ist JavaScript.
Ich glaub, es ist,
ich glaube, es ist sowohl
String erlaubt
als auch String.
Klein.
Das Auto completet dann nicht mal.
JavaScript. Gut.
Unser State
funktioniert. Okay, alles klar.
Jetzt kann, kann ich endlich das machen, was ich die ganze Zeit machen wollte.
Nämlich, wir müssen irgendwie unsere Form
validaten.
Also, sprich,
zur Zeit ist das ziemlich
Noob-Style. Wir nehmen
eins zu eins die Daten, wie sie da drinnen stehen
und schreiben sie dann auf den Server. Das ist natürlich
blöd. Wir müssen erst mal validaten, ob das
stimmt. Auf dem ESP selber
passiert nicht viel
Validation. Das einzige, was geguckt wird, ist,
dass kein leeres Passwort gesetzt wird.
Also, dass
SSID und Passwort nicht leer sein können. Der Rest ist
dem egal.
So, das heißt, wir müssen es jetzt erst mal
stylen. Was machen wir denn,
wenn es einen Fehler gibt?
Wenn es einen Fehler gibt,
würde ich sagen, machen wir
das Element mit einem Fehler
machen wir rot.
Also,
wo sind wir denn hier? Input.
So, wenn es ein
Wir tun jetzt mal so, als gibt es einen Fehler.
Okay. Also machen wir hier irgendwie mal
sowas wie
Error gleich
Error darf leer sein. Okay.
Oh, automatischer Umbruch.
Error. Also.
Ja, roter Border.
Das finde ich auch gut.
So.
Fokus.
Also, ich glaube, wir brauchen
brauchen das hier, diese Farbe.
Es gibt übrigens auch irgendwo ein nice Plugin,
was die Tailwind-Klassen automatisch
sortiert. Habe ich aber nicht
drauf. Habe ich aber mal gesehen, dass sowas
gibt. Das müsste ich vielleicht mal drauf
machen. Das ist sehr nice.
Dass Tailwind-Klassen automatisch sortiert werden.
Also,
hier kann ich jetzt die Farbe ändern, von
dem, wenn ich reinklicke. Okay.
So.
Config gleich State. Hier war doch
Dings als Parameter. Was?
Weil ich weiß nicht, worauf sich das bezieht jetzt.
Du meinst hier irgendwo, oder?
Oder wo?
Da? Äh.
Was hat der? Ach,
Error is missing. Ah, das muss
das, okay. Standardmäßig ist
es 0, wenn es
keinen Error gibt.
Äh, Config
muss tatsächlich.
Hast recht. Ja.
Hast recht. Jetzt sagt er, das geht nicht,
weil TypeScript
laggt mich.
Ich weiß, dass es funktioniert.
Aber wir können sagen,
dass das optional ist, oder?
Wir können sagen, dass das alles
optional ist.
Ah ja, dann funktioniert alles.
Das ist ja nicht mal TypeScript, das ist
JSDoc Annotations.
So, Error ist 0. Okay.
Also, wir machen einen Ring drum, also
wir machen so was wie hier, Rosé.
Ring, Rosé.
700 oder sowas.
Ja, das ist doch
eine schöne Farbe für einen Fehler.
Ist die gleiche Farbe wie Reset übrigens.
Lasst mich mal kurz gucken beim Button.
Äh, ja.
Rosé 700.
Das ist eine gute Farbe, die passt
optisch.
Mit so einem Kleinscheiß hält man sich halt
immer richtig lange auf, ne? Die passt doch
gut, das ist doch gute Farbe für
Fehleranzeige.
Wobei, das ist nicht nur, wenn es Fokus ist.
Nicht nur, wenn es Fokus ist.
Sondern, ne?
Sondern auch normal.
Also, im Endeffekt heißt das,
wir wollen,
wenn,
oh, das wird wahrscheinlich so jetzt wieder
nicht richtig funktionieren.
Also,
wir wollen an der Stelle,
ich bin mir nicht sicher, ob man das so
sieht.
Hast du die Malten schon montags immer frei?
Ja, habe ich. Also, wir können gucken, wenn
Error. Wenn es ein Error gibt,
dann wird das ganze
Ring Rosé 7.
Und ansonsten wird das
Ring Neutral 700.
Man muss das übrigens so schreiben,
weil ansonsten Tailwind die ganze Sache nicht findet.
Okay, wir haben,
äh,
nein. Dann funzt das wieder nicht.
Okay, dann funzt das wieder nicht.
Dann muss ich das anders schreiben, und zwar,
so.
Ne, nicht 700.
Was hatten wir ursprünglich hier?
Äh, 500.
Ja. Das funzt nicht,
so wie ich es am Anfang geschrieben habe.
Achso.
Weil Tailwind analysiert
beim Bilden von diesem Projekt
alle Klassen, die es findet.
Und wenn man
die Tailwind-Klassen automatisch
generieren lässt, mit JavaScript,
dann findet Tailwind beim Bauen des Projektes
das nicht.
Und deswegen funktionieren die Farben dann nicht.
Der String muss immer 1 zu 1 so vorkommen,
wie die Tailwind-Klasse heißt.
Das heißt, wenn ich jetzt hier irgendwas Magic
mir zusammenbauen lasse, dann klappt das nicht.
Deswegen musste ich,
deswegen musste ich auch bei
Button sowas hier machen.
Der muss diesen String finden von der Klasse,
sonst wird das in dem Bild nicht included.
Weil Tailwind entfernt
Klassen, die es nicht braucht
im Projekt. Sonst hast du ja auf einmal
einen Magic MB CSS,
von dem du nur 5 KB verwendest.
Ja, also das
ist verständlich.
Deswegen muss man das so machen.
Also okay, wenn Error, dann zeigt er das an.
Ansonsten
ja, neutral ist okay.
Alles klar.
So.
Ne, Moment, das ist nicht okay.
Weil ich will ja auch
Error hervorheben,
wenn
das Ganze
nicht fokussiert ist.
Boah, das wird's, jetzt wird's aber
wird ein bisschen schlecht
lesbar gerade, oder?
Äh, what the fuck?
Was?
Ich bin blöd, ich hab hier den Kram mit kopiert.
Will ich ja gar nicht.
Okay, nice.
Alles klar. So, wie
Okay, jetzt haben wir das Ding.
Ich setz mal einen Error, okay? Kackel.
Jetzt werden die Dinger rot.
Also so sehen die Teile aus.
Wenn ein Fehler entdeckt wurde.
Und jetzt brauchen wir noch irgendwie
so eine, irgendeine Fehlermeldung
unten drunter. Wie, wie machen das,
wie machen das die ganzen High-IQ
Webdesigner denn?
Schreibt man,
macht man hier unten drunter einfach
jetzt eine Meldung? So nach dem Motto
Passwort darf
nicht leer sein. So einen
Span mit einem Error drunter.
Ach ja, und übrigens, eine Sache sollten wir auch noch machen.
Spellcheck sollten wir
ausschalten. Also quasi
hier irgendwie so ein Span drunter.
Keck weh.
Ja, das sieht schon, das sieht
schon fast, fast gut aus.
Okay, das
backt jetzt wegen den Browser Tools rum.
Ach, Icon ist overrated.
Du hast recht.
Was ist denn? FS Small
gibt's nicht. Aber, aber, aber
Small Text wäre nicht
verkehrt, ja. Text
SM. Ja, ja, das
ist ganz schön. Wollen wir mal sagen Font Bold?
Noch?
Das ist,
nee, nee, das sieht kacke aus.
Das ist, das ist gut. Das ist für eine Fehlermeldung, ist doch,
ist, ist nice so. Ja.
So, und da
tragen wir jetzt einfach hier die, die Error-Meldung
ein. Die Error-Meldung ist kacke.
Nicht so,
nicht so aussagekräftig, okay.
So, vielleicht sollten wir jetzt noch ein bisschen schauen,
dass da ein bisschen
Abstand dazwischen
ist. Also sagen wir mal, dass noch
Margin Bottom 2 sind,
dass quasi zwischen den Elementen immer
ein bisschen, oder vielleicht sogar, vielleicht sogar
4? Äh, das ist jetzt ein bisschen weit
auseinander. 3? 2.
2 ist okay. Ja, dass quasi
das hier, dass klar ist, die Meldung
gehört zu dem Ding. Das ist
doch eigentlich ganz okay. Das kann man
noch so lassen. Ja, wenn, wenn das, wie soll's
ich, Passwords
cannot be empty
und zack.
Ist doch eigentlich ganz brauchbar aus.
Fehlermeldung Text auch rot.
Glaube, das sieht nicht
gut aus. Text
700.
Hm.
Gar nicht mal schlecht, eigentlich.
Was, Red?
200? Ich finde das
so gar nicht schlecht. Chat?
Das gefällt mir. Das ist gar
nicht schlecht. Das hat was.
Okay. Ja, das
ist in Ordnung. Das können wir so lassen.
Also, jetzt muss ja nicht die Augenweide
schlechthin sein.
Also, if
Error, dann
machen wir das. Und wenn
Error 0 ist
oder empty, dann
passiert nix. Sehr
schön.
Jetzt kommen wir mal zum
Validaten unserer
Form. Massive,
massivster Raid ever.
Was ist denn hier?
Form. Okay, das heißt im
Submit. Jetzt,
jetzt sind meine
Skript-Skills
gefragt.
Wie
machen wir das jetzt gescheit?
Wir machen auf jeden Fall so eine Art
Error-Objekt. So irgendwie
Let Errors.
Wenn das
empty ist, ist schön und gut.
Und, ja.
Also, theoretisch müssen wir gucken,
ob,
also, wir testen das mal,
wir testen das einfach mal hier bei
Wi-Fi SSID
Passwort,
ja, hier, Errors.
Error gleich.
Errors.
So, dann wird geguckt, ob's 0 ist.
Und da haben wir dann
ein Passwort drinne, was sich,
ja, so wie das, wie
das Ding hier nennt.
Das ist jetzt empty aktuell, dementsprechend
ist da nix drin. So, dann gehen wir mal in unser
Submit. Jetzt tun wir mal so,
als hätten wir validated,
dass Wi-Fi Passwort 2,
ähm, n Fehler hat.
So, also sagen wir Errors.
Wie er, gleich,
Errors.
Gleich, ähm,
check, wait,
in the house, keine Ahnung, so.
Geht net.
Also, ich muss jetzt mal Sub mitdrücken. Es funzt!
Es, es funzt.
Okay.
Nice. Das Wi-Fi Passwort
muss mindestens 8 Zeichen haben.
Nee, das bau ich nicht ein. Ich verstehe den, die, die,
die Idee dahinter. Aber,
ich kann den Leuten ja nicht vorschreiben, was sie
bei sich daheim für Wi-Fi Passwörter.
Also, es ist ja nicht so, dass, dass hier irgendwie
das Wi-Fi Passwort vergeben wird.
Hier wird das Wi-Fi Passwort für das Gerät eingestellt,
was sich dann verbindet. Wenn die Leute entscheiden,
sich aus freien Stücken 1, 2, 3, 4, 5,
6 zu haben als Wi-Fi Passwort,
kann ich das ja nicht verbieten.
So, jetzt müssen wir das irgendwie validaten.
Lass mich, lass mich mal kurz, lass mich mal kurz
in mich gehen. Wie validaten
wir das denn jetzt korrekt?
Also, wir setzen den Payload erstmal nicht.
Das ist erstmal Blödsinn. Das lassen wir mal bleiben.
Okay.
Also.
Wir sagen, if
data
besser, übrigens bester Variablenamen
wird nur noch von temp und blub getoppt.
In dem Fall, falls Formdata ist.
Das finde ich schon okay. So, wir gucken jetzt, ob
die Date, ne Moment, habe ich doch schon.
Ob die
Wi-Fi 1 SSID
ungleich
der
config
Wi-Fi
SSID ist.
Kann man das nicht abschalten?
Das ist hochgradig
nervig.
Ich will es nicht, kann ich, kann ich,
Moment, jetzt,
TS ignorte alles.
Kann ich nicht, kann ich nicht sagen,
dass ich alles TS
ignoren möchte,
was aus Data kommt?
Ne, das funktioniert natürlich nicht.
Wi-Fi Passwörter müssen auch
grundsätzlich 8 Zeichen, ist das wirklich
der Fall, ja? Ach ja.
Ihr habt Recht, ihr habt Recht. Ja, dann können wir das checken.
Dann können wir das checken.
Also, es muss zwischen 8 und
63 sein, okay.
Wie kann ich dem jetzt sagen, dass der alles
ignoren soll, was von Data kommt?
Gar nicht, oder?
Ah, deswegen geht das nicht. Das funktioniert
ja auch nicht, was ich hier mache. Das ist ja
auch richtig. TypeScript hat Recht.
TypeScript hat ja sogar Recht.
Das gibt es ja wirklich nicht.
Ha!
Anstatt das zu umgehen,
anstatt das zu umgehen, sollte
man dem einfach mal glauben, dass
es das vielleicht gar nicht gibt, ja?
Okay, wenn, also,
lasst mal nur von der, Moment, wir machen nicht
mit Wi-Fi SSID, nein, keine Ahnung.
Ich, ich, ich fuddel mal nur in Wi-Fi SSID
2 rum, okay?
Wenn, also, wenn,
wir lassen das erste Mal außen vor,
weil ich will mich jetzt nicht aussperren, okay?
Also, wenn
die, übrigens ist auch nicht das
Passwort, das ist falsch,
sondern
die SSID,
also, wenn sich die Wi-Fi
2 SSID geändert
hat, wenn die sich nicht
geändert hat, dann mache ich
damit auch nix, ja?
So, wenn,
wenn sich die Wi-Fi
2 SSID geändert
hat und
wenn,
wenn die überhaupt
gesetzt ist
und, ich hab keine Ahnung, ob das so einen großen Sinn
ergibt, was ich jetzt hier mache, und
wenn
dann zusätzlich noch
das
Passwort gesetzt
ist, allerdings
das Passwort
leer ist,
oder nicht 63
Teilchen oder was auch immer, dann
will ich, dann ist es ein Fehler.
Okay, dann ist es ein Fehler.
Dann schreiben wir rein,
das kann man bestimmt schöner machen,
dann schreiben wir rein,
hier, ähm, ja,
Password can not
be empty.
So, mal gucken,
ob das
hinhaut. So, wenn ich
jetzt, wenn ich jetzt Save drücke, passiert gar nix.
Richtig, weil
ich hab nix geändert. So, ich ändere das jetzt zu
Peposchei 2, Save,
Bäm, Password.
Password can't be empty. So, jetzt schreibe ich
was rein.
Save, dann geht's nicht weg.
Das heißt, ich muss einmal am
Anfang Errors
wieder auf leer setzen.
Okay, Peposchei 2,
ne, erstmal nix reinschreiben, nix reinschreiben,
Save. Okay.
Zack,
und weg ist es. Okay, nice.
Können wir mein hässliches
If irgendwie schöner machen?
Also, das erste ist ja, macht das
überhaupt Sinn, was ich da eingegeben hab, ja?
Als erstes checken wir mal,
ob sich die WiFi-SSID
geändert hat zwischen dem, was aktuell läuft
und dem, was hier im Formular
eingegeben wurde. Ich glaub, der Check an sich
ist schon sinnvoll, weil wir wollen ja nix machen.
Ja, wir müssen keinen Fehler anzeigen, wenn sich nix
geändert hat. Und dann
hat sich die WiFi-SSID 2,
also, und dann will ich
gucken, es könnte ja sein, dass die gelöscht wurde oder so,
dann will ich gucken, ist
die gesetzt
und ist das Passwort vielleicht leer?
Gibt es in JavaScript sowas wie
bring.empty oder sowas?
Empty? Is?
Empty?
Nee, egal. Ah, gut, wir können
einfach... Ja, du hast recht, das ist ein
guti, guti, guti. Wobei ich
das eigentlich fast lesbarer finde, so.
JavaScript würde auch
das funktionieren, oder? Wir sind
doch in, ja, nee.
Aber das geht, oder? Das würde theoretisch
gehen in JavaScript.
Dann könnte ich, wobei, nee, dann könnte ich
sogar das ganze Ding hier weglassen.
If not, das, ey, das ist
JavaScript, das müsste so genau gehen, oder?
Das geht doch so. If not,
pass... Das geht, wartet mal.
Hipposchild 2, save, das Fundst.
Massive.
Big Brain JavaScript.
Ob das jetzt viel lesbarer
ist, sei mal
dahingestellt, ja. Das kann man
doch irgendwie förder machen, oder?
Egal, lassen wir es erstmal so.
Und jetzt trage ich
was ein und dann save und dann geht's
weg. Wir können jetzt theoretisch noch checken,
ob das Passwort lang genug ist.
Also, können wir sagen,
wie würde man das
gescheit checken? Äh, length
quasi? Nee.
Wir sagen, für den Fall der Fälle, dass es leer ist,
also, das
kann jetzt nicht leer sein, aber, ne, sagen wir so was
hier. Also, für den Fall,
dass es das nicht gibt,
length gibt es nicht.
Okay, warum nicht?
Äh, wieso?
Was ist
das, was da zurückkommt?
Ein FormDataEntryValue.
Es wäre auch
zu einfach, wenn das jetzt einfach ein String wäre.
ValueOf.
ToString.
Okay.
Ist das 0?
Kann man jetzt sowas sagen? Length?
Nee, einfach so, ha? Nee.
Da kommt jetzt 0
zurück, wenn.
Oh, MonkaS, Alter.
Okay, okay.
Aber length geht ja
auch so nicht. Ich muss checken,
ob das ein String ist vorher.
Sollte
toString nicht immer gehen, dann?
Ja gut, hier checken wir ja schon, ob es
Okay, Leute,
hier checken wir ja schon, dass es nicht leer
ist. Das heißt, im nächsten
Fall können wir uns eigentlich sicher sein, es ist
es ist nicht leer, weil hier
kacken wir ja ab, wenn's. Also können wir uns
eigentlich drauf verlassen, dass es nicht
0 ist und nicht leer ist.
Ne? Und jetzt
checken wir, ob die Länge
größer
muss es
größer oder größer gleich 8
sein? Between 8 and
okay, es muss größer gleich 8 sein.
Function
Check
Password
Length.
Nee, das ist unverständlich. ToString
können wir uns. Also, wenn
das Passwort größer
mach mal hier
AutoLength
Moment, nein, nein, nein, nein.
Ähm, ähm, äh, Consts
und jetzt können wir, jetzt können wir checken Return
Wenn
die Größe, also
es muss größer gleich 8
sein und es muss
kleiner gleich, was?
63
sein
Alright
Und, und
Check Password Length
Wifi Password 2
Massive
Beautiful JavaScript
Kann jeder auf den ersten Blick
erkennen, was das hier machen soll. So, dann checken wir
doch mal, ob das funktioniert. Also,
es sind, ich hab das hier geändert.
So, 1, 2, 3. Fuck.
Warum hat es nicht gecheckt?
Warum wird das nicht?
Ah, not, nee, hä?
Warte mal. Moment,
Moment, Moment.
Die Länge
ist, was ist denn das? Lass
mal kurz die Länge locken. Ja, ob das
passt überhaupt.
Äh, ach nee.
Oder?
Nee, Data Get ist hier.
Ich bin jetzt total verwirrt. Macht das, macht
das Sinn, was ich da überhaupt mache?
Hat das überhaupt Sinn?
Not, also sprich,
wenn das hier leer ist,
aber das ist ja nicht
leer, deswegen macht es schon an der
Stelle nicht weiter. Bin
grad verwirrt. Ich lass das mal kurz weg.
Okay. Nee, das funktioniert nicht.
Warum funzt denn das nicht?
Check. Da muss, glaub ich,
das Ausrufezeichen weg. Echt? Wo?
Wo ist da ein Ausrufezeichen?
Wo ist da ein Ausrufezeichen? Ich seh kein Ausrufezeichen.
Wo ist da ein Ausrufezeichen?
Achso, das, was ich eben gelatcht hab. Ja.
3. Okay.
Das, das funzt. Ähm,
aber 3 ist auf jeden Fall
nicht
dazwischen. False.
Hä?
Moment, Moment. Meine,
meine Benahmung ist einfach dumm.
Oder? Meine Benahmung ist
einfach bescheuert.
Warte mal. Passwort empty
macht ja auch überhaupt keinen Sinn an der
Stelle. Nee, nee, nee, das müssen wir anders machen.
Warte mal. Was denn? So.
Moment, Moment, Moment.
Rückgängig, rückgängig. Okay. So, hier.
Weg damit.
Also, wir wissen ja schon mal, dass das funktioniert.
So. Empty ist es in dem
Fall. So.
Ähm, da können wir,
da können wir das im Prinzip sein lassen. So.
Else if...
Empty ist der erste Fall.
So. Das nächste ist,
wenn... Boah, ich hasse
sowas. Im Prinzip,
im Prinzip einfach nur das hier.
So. Und dann... Moment.
Else... Das ist ja...
Ich muss jetzt tatsächlich
not sagen, weil hier kommt false raus.
Und ich will ja,
wenn der Check quasi,
wenn der Check quasi, ähm,
nicht erfolgreich ist,
wenn das hier false returnt,
dann
will ich, dass es ausgeführt wird.
So. Und zwar, äh, password
keine Ahnung, must
password length
must be between
eight and sixtieth.
So. Schauen
wir mal.
Ha! Es funzt.
Es funzt.
Characters. Nee, das ist zu lang.
Dann gibt's einen Zeilenumbruch.
Öh, öh.
Das ist okay so. Das ist, das ist...
Okay. Wir müssen das mal irgendwie ein bisschen,
bisschen anders machen. Das ist ja richtig, richtig
abadisch hier gerade.
Ja, haben wir. Oh, nee.
Das müssen wir irgendwie anders bauen. Das versteht euch
Kasaume ja gleich.
Not password. Das können wir an,
das können wir an der Stelle schon lassen.
Wenn es die SSID gibt,
können wir das sogar hier rausnehmen.
Das auch. Und dann irgendwie,
da ne Funktion drum rum machen.
Irgend...
PwCheck oder sowas.
Ja, ich weiß nicht.
Ich bin mir noch nicht ganz sicher,
ob das so eine gute Idee ist.
Das ist jetzt mal so.
So. SSID. Okay. Passwort.
Passwort.
Blablabla. So. Check Passwort
Length. Das ist schon mal Blödsinn.
Hier kommt das Passwort, kommt hier direkt rein.
Oh.
So.
Aber wir sollten checken, ob das
Null. Was passiert denn, wenn das Passwort
Null ist? Mal ne blöde Frage. Was, was
macht es dann? Kackt es dann ab an der Stelle?
Oder was passiert dann?
Eins, zwei, drei. Aha.
Immerhin. Immerhin.
Can't read properties of null.
So.
Pass mal auf. Ich glaube, wenn ich jetzt hier...
Jetzt machen wir
JavaScript. Jetzt verwirren wir JavaScript
komplett. Wie
verhält sich JavaScript jetzt?
Wenn es Null ist, kommt dann auch
diese Meldung. Das ist vielleicht
ein bisschen doof.
Also muss ich im Endeffekt hier noch checken.
Wenn das Passwort quasi
nicht Null
ist. Das gefällt mir nicht.
Das ist
massive pepega.
Hä? Warum geht denn das jetzt schon wieder
in Passwort? Das Passwort ist
doch...
Ach nee, nee, nee. Nicht, nicht, nicht.
Ganz verrückt.
Okay. Passt.
Und wenn es leer ist? Cannot be empty.
Und wenn ich jetzt irgendwas reinschreibe?
Bam. Okay.
Äh.
Ach nee. Moment. Ich mache
hier immer noch nicht Passwort.
Alter. Was ein Schrott.
Okay. Eins.
Es geht nicht.
Das geht.
Und...
Das dürfte jetzt genug sein.
Das ist zu lang. Okay. Nice.
Alter. Schwere Geburt.
Schwere Geburt.
Also das ist so...
How to not form validation, glaube ich.
Okay. Wunderbar.
Excellent.
Das war mal das gleiche jetzt nochmal.
Für
Wifi
SSID 1
und Passwort
1. Und
entstellst. Ja.
Das kann man doch... Das könnte man bestimmt in irgendeinem
sinnvollen
Funktionsaufruf rappen.
Konste SSID kannst du aus dem if
rausziehen.
Nee, das wird nicht funktionieren, oder?
Weil wenn ich das hier rausziehe, dann sagt er mir, ich kann das nicht nochmal
besch...
Ich habe das schon eingestellt.
Warum das Ding 2 Wifi ist?
Die Benahmung ist vielleicht nicht so ganz glücklich.
Es sind nicht wirklich 2 Wifi.
Es ist ein primäres Wifi und ein
Backup Wifi. Wenn das erste nicht funktioniert,
dann
nehmen wir das zweite.
Also für den Fall, der Fälle,
dass du mal dein Wifi ändern musst und
dann nicht mit der Handy App resetten willst
oder so. Also mit dem gibt es eh keine Handy App.
Die Benahmung ist vielleicht nicht so schlau.
Chat, ich lasse das jetzt so.
Ich fasse das jetzt nicht mehr an.
Beste Formvalidation überhaupt.
So, und dann machen wir als letztes noch
So, sollten beide
SSIDs leer sein.
Also get
Leute, passt mal auf.
Kann man nicht.
Kann man nicht. Dieses
Formdata Zeugs hier.
To normales
JavaScript Object.
Ja, zu JSON meinetwegen auch.
Was?
Warum ist das so
eklig?
Gibt es da nichts schöneres?
Ah.
Ein
weiteres super Beispiel
für, dass das
JavaScript Gremium
doch
durchaus sinnvolle
Dinger macht.
Wir loggen das mal hier.
Data
from
Schauen wir mal. Da kommt der.
Jetzt haben wir ein JavaScript Objekt.
Ohne Passwort
Leak. Weiterer Grund, warum ich die Passwörter erst
gar nicht ans Frontend schicke.
Ja, schön. Sehr gut.
From Entries.
Dann machen wir das doch so. Dann
machen wir dieses ganze Formdata Zeug
jetzt erst einmal weg, weil das brauchen wir eh nicht.
So.
Da können wir uns nämlich das ganze get
und Zeug sparen.
Da können wir nämlich einfach sagen. So. Zack.
Punkt. Bumm.
Wifi SSID. So.
Data.
Alpha SSID. Zack.
Data. Passwort.
Passwort ist 123456. Was denn sonst?
Das ist das meist
verbreitete Passwort auf der Welt.
Wie kann es schlecht sein?
Das ist ein sogenanntes Best Practice Passwort.
123456.
So viele User können sich nicht irren.
Ja. Siehst du, jetzt kann man diesen
Krempel hier weg machen.
Da sieht das auch schon gleich nicht mehr ganz so hässlich aus.
Machen wir das hier auch mal weg. Zack.
Dann ist da wieder eins.
Ich mein.
Schön ist es immer noch nicht.
Aber es geht.
So. Ok.
So. Ok.
So. Als letztes
checken wir jetzt noch.
Wenn die
SSID 1
und
die SSID 2
leer sind.
Also wenn beide SSIDs leer sind.
Ähm.
Dann wollen wir
Errors
Das sind so die ersten.
Das sind so die Dinger die mir gerade einfallen.
Dann wollen wir haben. Ja.
Irgendwie.
At least
one
SSID must be
set.
Ok. Zack.
Schauen wir mal ob es funzt.
Also.
Wenn das hier leer ist und das hier leer ist.
Dann macht er nix.
Geil.
Ich glaub ich hab die Errorsachen nur da gesetzt bisher.
Kann das sein?
Ah. Guck mal. Ich kack. Null.
Errors.
Wifi 2. SSID.
Errors.
Errors.
Soll man das mal an die gleiche Stelle immer schreiben.
Wifi 1.
SSID.
Passwort.
Ok.
Pass mal auf.
Bam.
At least one SSID must be set.
Ok.
Ich mein man könnte einfach auch die erste und die zweite
setzen.
Oder? Ja.
Wir machen einen Error an beiden.
Ok. Zack. Zack.
Passwort cannot be empty. Ja logisch.
Logisch weil ich die SSID geändert habe.
Ok. Ok.
Zack. Zack. Bam.
At least one SSID. Ok.
Genug Form Validation. Damit bin ich zufrieden.
Alles gut. Können wir so lassen.
Ausreichend.
Ob es für die Abschlussprüfung gereicht hätte.
Weiß ich nicht genau.
So und wenn das alles gepasst wurde.
Nur dann.
Senden wir was.
Also sprich. Wir können jetzt mal gucken.
If.
Ähm.
Errors.
Length.
Größer. Null.
Ach nee. Das ist kein Array.
Hat ein Objekt eine Length?
Wie checke ich denn ob das leer ist?
Chat. Das ist äh.
Hat ne. Hat ne.
Ne.
Ist das hier vielleicht Null?
Javascript.
Feines.
Ist das true? Nein.
Ist das false? Nein.
Dann ist die Frage.
Was ist es dann?
So was dazwischen.
Manchmal.
Manchmal false.
Ist denn wenigstens in Javascript.
False. Gleich gleich false.
Und true. Ok da wenigstens ist es.
0,5. Da müsst es aufgerollt werden.
Weiß ich nicht genau.
Was kann man machen?
Object Entries Length.
Ok.
Also quasi.
Object Entries.
Und dann nehmen wir mal sowas hier mal rein.
Length.
Ne das gibt es auch nicht.
Doch gibt es.
Autocomplete ist zu blöd.
Und da schreiben wir jetzt mal in den Kackel gleich 1.
Ok funzt. Wobei das ist jetzt egal.
Zahl ist egal.
Ok.
Da ist funzt. Alles klar.
Wir fragen nochmal Stackoverflow.
Javascript.
How to check if object is empty.
How to check if an object is empty.
How to check if an object is empty.
Excellent.
Javascripts komische Webseite.
Achso ne doch die Webseite kenne ich sogar.
Object keys.
Underscore ist.
Achso ne.
Ich zernehme bestimmt keine Zusatzlibrary nur dafür.
Object keys my object.
Ok.
Was ist der Unterschied zwischen Object Entries und Object Keys?
Achso.
Object Keys ist im Endeffekt nicht Key Value sondern nur der Key.
Ja das reicht ja in dem Fall.
Dann können wir das tatsächlich.
How to check if an object is empty with keys.
Da ist jetzt natürlich die Preisfrage.
Ob man das nicht sogar noch ein bisschen abkürzen kann.
Ob man das nicht sogar noch ein bisschen abkürzen kann.
Also das hier sollte jetzt Length 0 sein.
Also das hier sollte jetzt Length 0 sein.
Und das hier sollte Length 1 sein.
Und das hier sollte Length 1 sein.
Die Frage die sich mir jetzt stellt ist natürlich.
Die Frage die sich mir jetzt stellt ist natürlich.
Ist das hier true?
Also das würde auch gehen als Check oder?
Also das würde auch gehen als Check oder?
Einfach so.
Wenn das leer ist.
Das wirst du funzen.
Weil das ist False.
Weil das ist False.
Leeres Array ist False.
Aber Chat wir müssen ja nicht.
Wir müssen ja nicht Javascript strapazieren.
Wir müssen ja nicht Javascript strapazieren.
Ich glaube wir schreiben einfach schon Length hinten dran.
Ich glaube wir schreiben einfach schon Length hinten dran.
Und dann halt nicht False.
Und dann halt nicht False.
Und dann halt nicht False.
Ja klar.
Moment.
Was?
Aber warum ist es gleich gleich true.
Warum ist es dann False wenn ich gleich gleich False checke.
Warum ist es dann False wenn ich gleich gleich False checke.
Das glaub ich nicht.
Das glaub ich nicht.
Also das ist False.
Also das ist False.
Aber wenn ich da ein If drum mache.
Und schreibe.
dann ist es true, oder wie?
Muss ich vielleicht noch klammern?
Aber jetzt die große Frage.
Wenn ich jetzt sage, gleich
gleich true,
dann nicht. Dann nicht.
Es ist nur true,
wenn es automatisch konvertiert.
Wenn ich es explizit gegen
true und false checke, dann wieder nicht.
Ach du Scheiße.
Benutzt du Wim? Ey, gerade nicht.
Nee. Ansonsten, ja.
Benutze ich Wim.
Also, im Endeffekt müssen wir das hier
machen. So. Keys.
Errors.
Length.
Äh, ja. Gleich 0.
Können wir checken. So.
Wenn das...
Was hat er jetzt für Schmerz? Also, wenn das
ganze...
Nee. Moment.
Wenn das... Hier.
Was ist jetzt
eigentlich der Unterschied da dazwischen?
Also, wenn das
nicht 0 ist. Ja, also, wenn nicht 0
bedeutet, es gibt Errors,
dann loggen wir einfach mal
die Errors in der Konsole und
returnen, weil dann wollen wir nämlich
nix an den Server senden. Okay?
Ansonsten schicken wir
diesen ganzen Krempel einfach an den Server,
weil auf Server-Seite passiert
ja auch noch ein bisschen Validation.
Sodass ich
mein WiFi nicht kaputt machen
kann. Also, ist okay.
Im Prinzip kann ich das hier einfach
jetzt ohne groß...
mir da was zu überlegen...
an den Server schicken.
So, dann...
rollen wir mal.
Das ist übrigens Absicht, dass ich das hier
auf Forth setze, weil normalerweise
macht der die Wifis von oben
nach unten. Der nimmt zuerst WiFi 1
und dann WiFi 2. Aber nachdem
WiFi 1, das ist, was ich gerade verwende, um mich auf
den Microcontroller connecten zu können per Browser,
ist es blöd, wenn ich mir WiFi 1
gerade kaputt mache. Deswegen soll er mit
WiFi 2 anfangen.
So.
Jetzt bin ich mal
gespannt, ob das funzt, was ich hier
gebaut habe. Also, was ich
programmiere, Webfrontend für meinen
Microcontroller. Das läuft auf dem
Microcontroller.
Zumindest die Daten kommen vom Microcontroller.
Richtig, richtig Hacker-Mans-Time.
Also, wir ändern
die SSID. Save.
Geht nicht. Password cannot be empty.
1, 2, 3. Muss
zwischen 8 und 63
sein. Okay.
Ist zu lang.
Okay, ist genau richtig
lang. Jetzt
Chat, soll ich's mal
riskieren? Wenn ich
das hier oben raus
mache, dann sollte
der eigentlich
sagen,
es ist nicht gültig,
weil WiFi 1
Passwort nicht gesetzt ist.
Fuck!
Jetzt habe ich mein WiFi überschrieben, glaube ich.
Nee, habe ich nicht.
Habe ich nicht. Ich checke ja zum Glück
auf Server-Seite nochmal,
ob es, ob es... Warum geht,
warum geht das? Was habe ich,
was habe ich falsch gemacht?
Hä? Ach so.
Ich mache das nur,
wenn die SSID...
Das ist ja kein Wunder.
Nee, das ist ja okay sogar.
Nee, das ist ja okay. Es kann ja
sein, dass ich das löschen will.
Es kann auch sein, dass ich das löschen will.
Vielleicht will ich es auch einfach rausschmeißen.
Das muss ja erlaubt sein.
Ja, also ich kann
das hier, kann das hier im Endeffekt raushauen
und gut ist,
wobei das das Server dann eh nicht speichert.
Das wäre dann vielleicht ein bisschen
Verwirrungs-Champ.
Ja, wir wollen es jetzt mal nicht
pepslicher sein als der Papst, das ist schon okay.
Also, sehr schön.
Reicht mir an Form-Validation jetzt?
Gut.
Next.
Es wäre ja cool, ist mir gerade
so in den Sinn gekommen, ja.
Ich kann ja hier
umschalten.
Zwischen, ob
der, welches der Wifis
ich zuerst verwenden
möchte. Wäre
so ein Dropdown nicht cool,
wo ich auswählen könnte,
was mein Primary-Wifi ist?
Versteht ihr, was ich meine? So ein
Dropdown, wo ich auswählen kann,
ähm, ja.
Wifi 1, Primary-Wifi.
Wifi 1 oder Wifi 2.
Das wäre doch nice.
Und
leider ist es
auch, ich finde es eine gute Idee, das dumme
ist nur, Dropdowns sind
notoriously shit
zu stylen in CSS.
So richtig
shit.
Hat jemand noch eine andere Idee, wie wir das besser
machen können?
Ein Schatz zum Dropdown?
Ja, Select. Also, die Dinger sind
bekannt dafür,
ultra shitty
zu stylbar zu sein.
So richtig mies, ja.
Radio-Buttons.
Ja,
warum nicht?
Also quasi.
Schön ist das auch nicht, oder?
Schön ist es auch nicht.
Einfach eine UI-Library
nutzen.
Können wir eigentlich machen.
Aber nur für Dropdown?
Kann man, okay. CSS-Style
Dropdown. Jetzt bin ich mal gespannt.
Ne, das ist nicht das, was ich
haben will.
Select muss ich suchen,
nicht Dropdown.
Select.
How to create
custom Select-Menus.
Ja, das ist viel schöner. So, das ist, das ist
ja noch okay. Das lass ich mir noch gefallen.
Und wie funzt das jetzt?
What the f...
What the fuck?
Okay, Moment. Da gibt's auch bestimmt was
Fertiges in Tailwind. Tailwind,
Style, Select.
Tailwind, CSS, Select.
Ne, das ist Flowbyte. Das will ich nicht haben.
Summary und Details.
Summary und Details.
Summary.
Ach, du meinst dieses, dieses
Akkordeon-Ding?
Ah, ne.
Tailwind, CSS, Select.
Ha!
Das ist mal stylisch hier, hä?
Code. Aber das haben die doch
garantiert nicht einfach nur so gemacht, hä?
Achso, ja.
Uff, boah, ey.
Boah, Mann.
Das ist, das ist sehr, ist schon, das ist schon sehr advanced,
ein Select zu stylen.
Vielleicht machen wir doch Radio-Buttons.
Vielleicht machen wir doch einfach Radio-Buttons.
Vielleicht machen wir doch einfach Radio-Buttons.
Vielleicht machen wir doch einfach Radio-Buttons.
Weiß nicht.
Ich glaube, ich glaube Radio-Buttons sind okay, ja.
Wie macht man denn gescheite
Radio-Buttons?
So.
Ich verschieb mal kurz dieses, das C++ Zeug
und das hier verschiebe ich
auf den dritten Laptop.
Radio-Buttons.
Okay, wie, wie will man das jetzt richtig machen? Wartet mal.
Gehen wir mal hier in die
Config rein. So, gucken wir mal.
Wir machen jetzt mal einfach die Copy-Paste-Radio-Buttons
hier rein, okay.
CSS, HTML, das ist natürlich schrottig,
so wie es aussieht, aber es sind Radio-Buttons,
die funktionieren wenigstens halbwegs.
So, dann machen wir einen Diff drum herum,
dass die alle in die gleiche...
Und zack, okay, schon mal besser.
Schon mal besser.
Können wir jetzt nicht einfach nur sagen,
dass das Ganze noch Display-Class
gleich Flex, dann ist es
nebeneinander.
Ganz ehrlich, das ist vielleicht nicht
super hübsch,
aber es funktioniert.
Kann man Radio-Buttons halbwegs stylen?
React...
Alter, warum ist das so kompliziert?
Kann man es vielleicht...
Kann man es vielleicht doch irgendwie einfacher machen?
Styling Radio-Buttons...
Ich will es stylen einfach.
Leute, ich will kein React.
Ich will einfach nur den Radio-Button stylen.
Appearance none.
Man kann die Dinger auch nicht stylen.
It needs to be designed from scratch.
Appearance none.
Wobei, es geht doch.
Es geht doch. Es ist okay.
Es ist in Ordnung.
Nee, nee, geht klar.
Okay, geht klar.
Machen wir mal.
Hier.
Class.
Ey, der Chat sieht jetzt anders aus als vorher.
Ich erkenne
legit keinen Unterschied dazwischen.
Der obere ist gestylt.
Der HTML-Button ist gestylt.
Der andere nicht.
Ich erkenne absolut keinen...
Ich erkenne null Unterschied.
Und selbst wenn ich die Klasse
wieder rausschmeiße,
sieht es genauso aus.
Der Rahmen war vorher auch schon blau.
Das ist default, dass der blau ist.
Das funzt überhaupt nicht.
Was der hier schreibt. Das geht nicht.
Geil.
So, was ist das?
Page-Done-Doc-Select.
Mein Chat mag gerade nicht.
Tailwind-CSS-Select.
Moment, das ist irgendein
UI-Framework, was
nur geht.
Ja, da muss ich
Page-Done-UI oder was auch immer das ist
verwenden. Das will ich ja nicht.
Ich kann das mal copy-pasten
von der Seite.
Aber das wird es...
Ohne angewählt zu sein. Ist es blau?
Ohne nicht. Echt? Habe ich jetzt gar nicht gesehen.
Ist da ein Unterschied?
Ach, stimmt.
Du hast recht.
Ich copy-paste es jetzt mal von dieser
Seite hier. Zack. Jetzt haben wir hier
angeblich ein Select. Geht doch
eigentlich, oder?
Sieht doch eigentlich ganz okay aus.
Ich meine, das Fenster sieht halt dann überall ein bisschen anders
aus.
Ah, das sieht schon okay aus.
Dann stylen wir das mal ein bisschen um.
Also.
Die Farbe passt nicht hier. Das können wir jetzt hier ändern.
Also Text
ist neutral.
Was haben wir da? 100?
Ja. Also gut, Country
das da oben drüber ist eh egal.
Hier.
Primary Wi-Fi.
Muss man noch überlegen, wie wir das dann
richtig nennen. Aber auf jeden Fall nicht
Text-SM.
Mal Text von Bolt.
Dass das so aussieht
wie der andere Kram. Ah, sieht doch schon mal
ganz gut aus jetzt.
Sollen wir nur die Farbe irgendwie ändern?
Die Options sind nicht gestylt.
Die kann man wahrscheinlich auch nicht stylen,
oder?
Kann man wenigstens den Hintergrund
durchsichtig machen vielleicht?
Firefox checkt's ja. Firefox kapiert's.
Warum nicht?
Kann man hier zum Beispiel sagen Class gleich
BG Black.
So, nochmal so.
Ah, ah.
Doch, das geht.
Ja, dann stylen wir den Krempel doch.
So, jetzt muss der Hintergrund,
muss ich noch, muss noch gerne.
Choose a Country. So, wo kommt das hier?
Das ist, oh, ne.
Das Select brauchen wir.
So, Border lassen wir mal fort.
Border wird das gleiche wie bei den
Inputs dann.
Hier ist die Border
Neutral 700.
Neutral 700.
Ja, schon viel besser.
Fokus und so.
Text ist auf jeden Fall nicht grey.
Text ist, ach, keine Ahnung.
Neutral
100.
Dann sieht man's
nicht richtig, das ist klar, weil
ja, der
Hintergrund nicht
gesetzt ist. Also,
im Endeffekt war Border
2, dass das so aussieht wie der andere Kram.
Genau. So, und jetzt müssen wir sagen
BG Neutral
800.
Seriously, das sieht doch ganz brauchbar aus.
Im Endeffekt, es ist ein bisschen
web-aligned, so.
Aber vollkommen fein,
oder? Ja, das ist okay.
Ey, damit kann ich, damit kann ich leben.
Damit kann ich leben. So, Selected
ist standardmäßig
Kona.
So, im Prinzip habe ich ja nur zwei Sachen zur Auswahl.
Wifi 1
und Wifi 2.
So, das eine ist Value 1, das andere Value 2.
So, fertig.
Ja, geht auch klar.
Ich, also für meine Zwecke ist das
echt ausreichend.
Wie sieht denn das Ganze jetzt in Firefox aus?
Irgendwas
stimmt mit dem Rand in Firefox
nicht. Moment,
der Rand, der ist nur da, wenn
Aha, der Rand ist
nur da, das stimmt ja.
Ja, der Hintergrund
ist BG Neutral 800.
Habe ich
doch.
Ach ne, Border. Hä?
Warte mal, Leute, ich bin, ich bin jetzt verwirrt.
Warum, warum ist
mein Input, aber mein
Input hat was?
Mein Input hat
Neutral
700
als Default.
So, aber Firefox juckt das nicht, oder?
Ne, Firefox juckt der Border.
Moment, Firefox interessiert
den Border von meinen.
Das stimmt, bei dem einen muss ich Border haben, bei dem einen
Ring.
Das ist korrekt, aber sollte
das nicht...
Ne, das sieht kacke aus.
Okay, okay, gut, gut, gut, gut.
Okay, das interessiert Firefox
einfach gar nicht, verstehe.
In Ordnung, soll mir recht sein.
So, und jetzt mal Outline, Outline
muss auch noch weg.
Outline Zero.
Ne, Moment, das ist
Fokus, Fokus.
Oje, wie kriege ich denn das jetzt wieder weg?
Wir testen es mal.
Es muss eins von Outline
0, Ring 0,
oder, oder, ähm,
Border 0 sein.
Nice.
Welches Report war es jetzt?
Ring. Ring ist es auf jeden Fall.
Das ist aber okay, das darf
2 sein. So, und jetzt brauchen wir die
Color. Wenn das,
wenn das fokussiert
ist,
darf das
600 oder so sein, glaube. Ne, was ist hier unten?
Okay, whatever.
Es interessiert es einfach gar nicht.
Doch, funktioniert
doch.
Aber das ist doch eher 500 hier.
Ja.
Okay, das ist okay.
Das, damit kann ich leben. Das können wir 1 zu 1
so lassen. Der Rest, das juckt
mich nicht.
Firefox hat prinzipiell
keinen Bock auf irgendwelche Ränder davon.
Ist auch okay.
Border Radius, Border, ja, Border Radius
sieht ein bisschen komisch aus, ne.
Das ist einfach nur rounded.
Rounded LG ist das.
Das hier, das machen wir
klammerpott.
Das ist, das ist okay so.
Das lassen wir.
Das lassen wir.
Damit, damit kann ich, damit kann
ich leben. Das ist vollkommen
fein so. Wir können jetzt
vielleicht noch sagen, dass die hier
Option,
die Selected Color, Selected,
macht man das
so? WPG
Black, gucken wir mal, ob das funzt.
Ne, natürlich nicht.
Ähm,
was ist denn, wie nennt man dieses,
ist Active, Active, oder?
Active?
Active BG Black.
Ne.
Ja, wie heißt dieser State,
wenn man da drüber geht und
Selected wird?
Aber Selected selbst gibt es nicht.
Ähm, CSS?
Other, meinste?
Select.
Selected.
Checked.
Seriously?
Checked?
Ne, nicht ganz.
Nicht ganz.
Nein, nein, nein. Das ist, wenn's ausgew...
Hä? Wenn's ausgewählt ist.
Das wollen wir ja nicht.
Äh, Hover? Ja komm, ich mach jetzt,
ich mach, ich nenn's mal Hover.
Nein, das ist nicht Hover. Okay.
Was könnte es sein? Was könnte...
Lasst uns in die,
in das Hirn
eines CSS
Gremium Mitarbeiters
Fokus.
Active
haben wir zu bieten.
Okay, ist es Fokus?
Nein. Ist es Active?
Nein.
Vielleicht ist es auch nicht BG?
Ist auch nicht, okay.
CSS.
CSS
Selected
When Hover.
Ah, ne.
Probier mal.
Okay, was? Hover?
Hover?
Und dann Box
Shadow? Ne, ne, ne.
Äh, Inset?
Das da, ja.
Irgendwie so.
Ne.
Äh, keine Ahnung wie ich das... Shadow?
Drop Shadow?
Shadow Inner.
Shadow Inner.
Ne. Vielleicht,
aber vielleicht, vielleicht interessiert sich Firefox
dafür. Okay, wie, wie kann
man das machen?
Select Element
Style Select.
Wir hatten doch hier sowas
drinnen stehendes. Das, das hatten die doch
hier auch. Guck mal hier, hier wird das blau.
Hier wird das blau. Da können wir uns das...
Muss man sich,
kann man, können wir uns hier abgucken.
Die haben das doch hier auch.
So, Custom Select.
Select, Selected.
Ne, das ist aber nicht das.
Äh,
JavaScript, what?
Ne, ne, ne, ne.
Style Select CSS.
Da muss doch ein...
Farbe für den Shadow.
Shadow
Black. Aber das kann doch kein...
Ne.
Kann doch kein...
Kann doch kein Schatten sein, dass das Blaue
hier... Also ich hätte jetzt ja fast gesagt,
es ist Fokus, aber Fokus
haben wir ja schon ausprobiert.
Okay.
Ist am Start.
This way we can do this with minimal changes.
Hover?
Yellow? What? Ja.
Volvo, please fix.
Okay, das ist Blur und sonst
Gedöns, das braucht man ja nicht, ne.
Also es ist wirklich
Hover, BG, aber das hat
was von... Ist Styler denn jetzt auch wirklich
Option?
Ja.
Ne.
Macht er? Ne.
Ne, wo, wo applyt er das denn jetzt?
Ach nee, doch Option.
Das ist globales... Also
für alle Options Hover.
Ja, aber das funktioniert bei mir
irgendwie nicht.
Hover.
BG.
BG Black.
Ne.
Das JavaScript ist notwendig,
meinst du?
Also das wäre super,
super weird, Champ,
aber man weiß ja nie.
Das funktioniert bei mir noch nicht mal. Ich kann da kein...
JavaScript inline reinstellen.
Moment.
Kann man das nicht irgendwie editieren?
Edit code snippet oder sowas?
Du meinst Ausrufezeichen?
Das ist eine gute Idee.
Darf man das überhaupt, ein Ausrufezeichen davor machen?
Alter, das kann doch nicht sein, man.
Wie mach ich denn... Fuck.
Okay, wir testen mal was anderes.
Hover.
Text. Red.
Interessiert den nicht. Das ist dem vollkommen egal.
Was ich da mache.
Ah, warum muss man
sich immer mit so einem Scheiß 3 Stunden
aufhalten?
Ja, ich weiß, dass es notoriously
tricky ist. Das habe ich fast 1 zu 1
vorhin so gesagt.
Ne, das funzt ja nicht.
Inset Box Shadow.
Okay, weißt du was?
Style.
Egal. Select.
Option Hover.
Das interessiert den einfach nicht.
Er kehrt einfach nicht.
Es ist ihm einfach egal.
Das habe ich schon gesehen.
Was meinst du denn?
Er kehrt einfach nicht.
Das interessiert den nicht.
Black.
Das juckt ihn nicht.
Checked.
Geil, Alter.
Das ärgert mich schon wieder sowas.
Warum?
Warum ist das immer so abartig alles?
Doesn't work.
In die App CSS.
Das können wir machen.
Es kehrt einfach nicht.
Es juckt ihn nicht.
Aha, okay.
Man muss das inline CSS
erstmal.
Okay, das, das wirkt in Chrome.
Und das wirkt in Firefox.
Weil das hier ist Firefox.
Ne.
Hier wirkt nix.
Stimmt überhaupt nix. Stimmt nicht.
Das wirkt überhaupt nicht.
Fake News.
Debated.
Ah. Ne.
Jetzt ist das.
Jetzt ist das selected.
Ne, das ist das von uns.
Okay, das geht nicht.
Okay, dann nehmen wir doch das.
Dann nehmen wir doch das, was bei dem Dude da oben funktioniert hat.
Das hier.
Mit diesem JavaScript Zeug.
Ich habe keine Ahnung, was da eigentlich abgeht.
Aber wir schauen uns das nochmal in Chrome an.
Ob es denn da auch funktioniert.
Okay.
So, also hier. Run.
Okay, das.
Das geht. Okay, also wir brauchen dieses komische
JavaScript.
Okay, Style.
Was ein Krampf wieder, man.
Das alleine
hat ja nicht gereicht. So.
Jetzt brauchen wir dieses komische JavaScript.
Das müssen wir jetzt versweltifizieren.
Dass das funzt, also.
Was wenn du in den Options
einen Diff hast?
Ich bin mir nicht sicher, ob in Options
Sub-Elemente überhaupt erlaubt sind.
Können wir das ausprobieren?
Ich glaube nicht.
Aber wir probieren es, wir probieren es aus.
Diff.
Nee, geht nicht.
Nee, das dachte ich, das dachte ich mir.
Bind, Disselect.
Nee, das brauche ich nicht, oder?
Kann ich nicht.
Ach so, doch für das Element.
Warte mal, warte mal.
Oh, doch, doch, doch.
Ähm.
Also hier.
Option.
Das, das.
Äh, was?
Okay.
Also.
MonkaS.
Is dis nicht da mit drinne?
Was?
What?
Was will er jetzt von mir?
Mixing.
Ich mixe hier überhaupt nichts.
Ach nee, Moment.
Es ist ja nicht on.
Ich muss sagen, on.
Deswegen mag er das nicht.
Äh, geht nicht.
Das wird noch nicht mal ausgeführt.
Das wird, das wird nicht mal ausgeführt.
Das ist, das juckt ja nicht mal.
Ich mache es jetzt noch mal hier, wie, wie es Prezerif geschrieben hat.
Aber.
Also ich meine, dass dis nicht geht, verstehe ich.
Aber die Events werden nicht mal ausgeführt.
Guck, die Events laufen nicht mal.
Moment, auf, Moment, Moment, Moment, Moment.
Ha, das muss ja auch nicht auf die Option.
Das muss ja auf das Select.
Okay.
Das Doppelpunkt im Händler?
Das da?
Das geht nicht.
Das, das, das hat er gerade gesagt.
Das darf ich nicht verwenden.
Das ist die neue, neue Syntax.
Mit on, guck.
Das geht nicht.
Nein, das lasse ich nicht im Native Style.
Das muss so, das muss so gemacht werden.
Weil es gehen muss.
Easy.
So, und was jetzt?
Bind this Select.
Okay, da brauche ich noch eine Variable, die Select heißt.
Let's select.
What the fuck?
Achso, Moment.
Dis muss ja weg.
Sondern ich muss jetzt Select nehmen.
Ah, ah.
Es macht Dinger.
Es sieht aber falsch aus.
Es sieht irgendwie falsch aus, Leute.
Es kann doch nicht sein.
Es kann doch nicht sein.
Dass das so kacke ist.
Was ist denn jetzt für ein Problem?
Ob es da deprecated ist, juckt mich nicht, ey.
Ah, warum ist das so schlecht?
Warum ist das so scheiße, Mann?
Haha, ey, Mann.
Frontend Experience.
Ja, ist echt so.
Warum, warum hat das jetzt auf einmal eine Scrollbar?
Warum, warum hat das jetzt auf einmal eine Scrollbar?
Ist das scheiße, Alter.
Radio Buttons.
Ne.
Ja, wegen der Size, genau. Moment.
Wo ist das denn hier?
Aber ohne Size geht's nicht.
Ohne Size funktioniert's nicht.
Außerdem, das Select ist auch vollkommen an der falschen Stelle.
Das ist da oben irgendwo.
Das soll da überhaupt nicht hin.
Das soll da unten hängen.
Ist das schlecht, Mann.
Ich raste aus.
Ne, das liegt an der Size.
Was ist mit der Scrollbar?
Oh, shit.
Rückgängig. Rückgängig.
So.
Ne, da geht's auch nicht.
Da geht's auch nicht.
Da geht's auch nicht.
Guck.
Das Replaced das so komisch.
Das sollte eigentlich...
Normaler Dropdown ist unten drunter und nicht oben drüber.
Das ist kaputt.
Die Lösung von dem Dude.
Das ist procken.
So.
Wisst ihr was?
Wir machen das jetzt anders.
Ich guck jetzt einmal noch hier in die Ergebnisse von...
Ich guck jetzt einmal noch hier in die Ergebnisse von...
Okay.
Background color and color are ignored.
Und warum?
Okay.
Wisst ihr, was ich jetzt mache?
Ich nehme jetzt ein Select von irgendeiner Library.
Es funktioniert.
Das ärgert mich.
Das ist ja so räudig, Mann.
By the way,
wir haben doch vorhin hier sowas gesehen.
How to...
How to select.
Da haben sie das doch...
Hier haben sie doch sowas hingekriegt.
Haben die das komplett selbst gemacht?
Oder wie?
Surround the select box within a custom select div element.
Surround the select box within a custom select div element.
Ach so.
Okay, die machen das...
Ach so.
Okay, jetzt versteht...
Die blenden das einfach komplett aus.
Die blenden das einfach komplett aus.
Die blenden das einfach komplett aus.
Die blenden das einfach komplett aus.
Und dann brauchst du aber JavaScript,
was diesen ganzen Krempel handelt noch.
Boah, ey, ne.
Okay.
Ne, warte mal.
Spitz, drop down.
Ne, select.
Ja, das ist doch hübsch.
Das ist doch ein hübsches
Select-Element.
So will ich, dass meins auch funktioniert.
Ja.
Wenn ich jetzt
Dieses Ding hier auf meinem iPhone aufmache,
Dieses Ding hier auf meinem iPhone aufmache,
funktioniert das dann noch wie ein richtiges Select?
Oder auch wie so ein billig nachgebautes CSS-Select?
Oder auch wie so ein billig nachgebautes CSS-Select?
Das muss ich jetzt grad mal auf meinem iPhone aufmachen.
Sekunde.
Also.
Bits UI Select.
Bits UI Select.
Ja.
Das ist jetzt so ein dreckiges...
Weil ist ein Select auf dem iPhone normalerweise nicht,
Weil ist ein Select auf dem iPhone normalerweise nicht,
Ne, nicht so ein Dropdown,
sondern so ein Auswahl-Scroll-Ding
sondern so ein Auswahl-Scroll-Ding
vom Betriebssystem?
Oder bring ich das jetzt durcheinander?
Also, ich hab's hier grad auf meinem iPhone aufgemacht.
Also, ich hab's hier grad auf meinem iPhone aufgemacht.
Das geht nicht.
Ne, passt schon.
Dann bring ich das durcheinander.
Wie heißt denn dieses Element?
Wie heißt denn dieses Element?
Chat, ich glaube wir denken viel zu kompliziert.
Ich glaube ich...
Dann bring ich ein Number Input.
So was.
Jetzt ist der Desk schon wieder.
Und dann einfach nur hoch und runter scrollen.
Moment mal.
Wie heißt denn dieses Ding?
Es gibt doch...
Es ist ein Date Selector?
Ne.
Warte mal.
Input, Input Types.
HTML. Was gibt's denn da alles?
Button? Ne.
Checkbox? Passwort? Ne.
Submit? Auch nicht.
Reset?
Radiobutton? Das hatten wir schon.
Checkbox? Hatten wir auch schon.
Checkbox? Hatten wir auch schon.
Button? Hatten wir auch schon.
Colour Selector? Input Date?
Aber wir können doch...
Warte mal Leute, ich hab ne andere Idee.
Warte mal Leute, ich hab ne andere Idee.
Können wir nicht sagen, ich blende das mal kurz aus.
Das wär fast gut, fast gut wär das gewesen.
Das wär fast gut, fast gut wär das gewesen.
Number?
Wie kann ich das so stylen, dass es im Prinzip nur zwei Möglichkeiten gibt?
Wie kann ich das so stylen, dass es im Prinzip nur zwei Möglichkeiten gibt?
Und die...
Das ist doch alles...
Ja, ich weiß, dass...
Mit der fertigen Sache gibt's jede Menge.
Ich kenn ich, ja.
Ja, das will ich...
Sodass man im Prinzip plus...
eins oder zwei auswählen kann.
So was haben wir doch
sogar schon mal gemacht.
So was haben wir doch schon mal gebaut, sowas ähnliches.
Mit so nem Plus und Minus Button daneber.
Mit so nem Plus und Minus Button daneber.
Das war glaub ich ein Input.
Das war glaub ich ein Input.
Ein Number Input.
Da konntest du nur Plus und Minus machen.
Da konntest du nur Plus und Minus machen.
Ja, aber wir hatten nicht dieses Default
Hoch und Runter Element.
Sondern wir hatten im Prinzip nur so nen
Nur so nen Button gebaut.
Du konntest...
Das waren so Custom Pfeile, die wir gemacht haben.
Du konntest im Prinzip nur eins oder zwei auswählen.
Du konntest im Prinzip nur eins oder zwei auswählen.
Oder nochmal was anderes.
Wenn wir doch nur eins oder zwei auswählen,
Wenn wir doch nur eins oder zwei auswählen,
Wie wärs denn mit nem Switch?
Wobei, Switch gibt's ja auch nicht im Standard-CSS.
Wobei, Switch gibt's ja auch nicht im Standard-CSS.
Sodass man quasi einfach nur hin und her schalten kann.
Zwischen WiFi 1, WiFi 2.
Zwischen WiFi 1, WiFi 2.
Also dass man quasi...
Dass man quasi sowas hier macht.
Und...
Und auf der linken Seite
hat man
einfach WiFi 1
und auf der rechten Seite WiFi 2.
Nee, nee, nicht der 4er Champ.
Ich kann mich...
Radio Buttons...
Ja, Radio Buttons hatte ich vorhin.
Ja, die sind aber auch kacke zu stylen gewesen.
Lass mal kurz was gucken.
Äh...
Alles klar.
Äh...
Wenn ja meine...
Wenn ja meine Projekte nicht so geil heißen würden...
Ich weiß was das war.
Wartet mal, ich weiß was das war.
Da haben wir...
Da haben wir einen Map-Input gemacht.
Das war der 4er Champ.
Das war das neue 4er Champ Web Interface.
Hier wahrscheinlich, ja.
Das war das neue 4er Champ Web Interface.
Das war das neue 4er Champ Web Interface.
So.
Ja, genau. Terraform-Stelz.
Ähm...
Pin-Input.
Ja, sowas ähnliches.
Sowas ähnliches hatten wir da gebaut.
Genau, sowas wie du gerade gepostet hast.
Also Pin-Input ist schon mal das falsche.
Unter-Input, ja wahrscheinlich.
Das war es das hier.
Ja, genau.
Sowas hier in der Richtung haben wir das gebaut.
Ja, genau.
Implo...
Genau, das ist das Ding.
Ich rip mir das mal kurz.
So, Icon...
War mal ein X. Irgendwas weiß ich nicht.
OnClick brauchen wir jetzt gerade nicht.
Ähm...
2...
Value brauchen wir auch nicht.
Binden...
Irgendwie so.
Auch kein Klick.
Keck.
Unexpected Talking?
Wo jetzt? Wie jetzt?
Es ist der Wahnsinn, Mann.
OnEnd.
Die durchschnittliche Frontend-Dev-Erfahrung.
Okay, es muss...
Achso, Moment, wegen Style.
Weil da Style mit drin ist.
Unexpected Talking.
Was genau ist hier? Unexpected?
Ach hier.
Okay.
Ja.
So ungefähr.
Oh, weil das nicht das ist.
Wir machen...
Ich hab ne Idee, Leute. Wir machen nen Switch.
Wir machen nen Switch, okay?
Boah, ich krieg hier noch die Krise.
Mal kurz bisschen Fenster zumachen.
Ja, sowas...
Naja, nee, nicht wirklich.
Hm.
Am besten wär doch echt nen Switch.
Es wär nen Switch, der auf...
Wifi 1 und Wifi 2 switchen kann.
Oder?
Das wär doch wahrscheinlich das einfachste.
Code.
Das machen wir jetzt.
Wir benutzen jetzt einfach hier
UI-Library. Gutes.
Fertig.
Wie installier ich den Kram denn?
Hä?
Here, getting started.
Wie ist das eine Scheißding, so ne UI-Library
zu installieren?
Kannst du nicht ne Checkbox nehmen über das WLAN?
Da versteht auch keiner was...
Ja, doch, könnte ich wahrscheinlich.
Okay, jetzt schau mal nix drinnen.
Hit-Status.
Oh, da haben wir heute schon wieder ganz schön dran rumgewurschtelt.
Äh, äh, okay.
Macht man da...
Was ist ein Chat, was ich auch noch nie so richtig
gecheckt habe?
Was ist der Unterschied zwischen install und install-d?
Ist der das?
Ja, was soll das bedeuten?
Wie?
Package will appear in a devtipad.
Ja, und was soll das jetzt bedeuten?
Also, aber die UI-Library, die ist dann...
Die ist dann nicht
dev?
Die brauch ich immer?
So, switch, switch.
Massive, massive switch.
Import.
Bam.
Äh.
Was hat der jetzt für Probleme?
Ey, Visual Studio Code ist einfach pepega.
Okay, wir haben nen switch,
der irgendwelche Fehler schmeißt.
Was? Cannot use?
Äh, wait a minute.
Ist da oben...
Der kommt auch definitiv nicht rein.
Okay, wir haben nen switch.
Alles klar, der ist ein bisschen...
Ein bisschen dunkel, vielleicht, gerade, aber...
Wir haben nen switch.
Do not disturb. Brauch man nicht.
So, passt mal auf. Mal gucken, ob ich das
jetzt mit meinen
massiven Frontend-CSS-Skills
auf die Reihe krieg.
Was ich machen will ist, ich will nen vier...
Also, ich will nen switch,
der über die gesamte Breite geht
und eigentlich nur in der Mitte geteilt ist.
Und links steht
WiFi 2 drinne.
Versteht man? Okay.
Passt mal auf. Also, Label
brauch ich gar nicht.
Weg.
Äh.
Warum ist das umgebrochen?
Das reicht hier, das ist
genug. Okay.
ID
kann das alles behalten.
So, jetzt brauchen wir erstmal...
Muss ich mal was sehen. Hier sind so viele Sachen
drinne, hier siehst du gar nix.
Alter, what the fuck?
Was ist denn...
WTF?
Wie viele Milliarden an
Klassen willst du haben?
So, ich sehe aber auch...
Das nächste
Gesetz, dass da eigentlich gar
keine Color richtig gesetzt
sind.
BG Foreground, das gibt's bei mir
überhaupt net. BG
Background, das gibt's bei mir, das ist...
Offset Background, das gibt's bei mir alles gar
net. Okay.
Wir machen jetzt mal den Background.
So, also. Nur mal, dass ich das
checke. Ähm.
Das hier ist der Knopf.
Das hier ist der...
Das ist nur der Knopf. Der Knopf hat auch schon
3 Milliarden Sachen.
Okay, alles klar.
Das ist nur der Knopf.
So, der Knopf, der kriegt von mir
jetzt... Also, das Ding braucht
irgendwie meine Hintergrundfarbe. Wo haben wir denn hier?
BG? BG.
Okay. Das ist
State Checked.
State Unchecked. BG Dark 10.
Gibt's ja überhaupt net.
Also.
State Unchecked. BG.
Wir machen... Komm, wir machen das mal irgendwie...
Hier, Grey. Ich will's einfach nur sehen.
Grey 200. Beste. Oh ja. Excellent.
Excellent.
Grey. Okay.
So. Jetzt... Jetzt erkennen
wir, wenn's an ist. Ja?
Machen wir vielleicht 500, dass man irgendwie bisschen was sieht.
So. Gut. So. Das ist...
Das ist... Das ist, wenn's
Unchecked ist. Also, wenn's aus ist.
Also, dann machen wir doch einfach hier irgendwie
Grey 800. So. Dann ist er aus.
So. Und jetzt... Irgendwie 500,
wenn er an ist.
Hauptsache, dass man's mal erkennt. So. Massive
Switch. Switch. Switched.
So ist er aus.
So ist er an.
Und jetzt will ich das ganze
Ding ja... Die komplette Breite machen.
Also, Höhe ist okay.
Breite machen wir weg.
Und sagen... Full.
Aha.
Äh.
Meine CSS-Skills sind einfach
die besten, ne?
Ich hätte zwar zumindest
gedacht, dass der Knopf auf die andere Seite mitgeht.
Ja? Okay, aber
dieses Translate...
Ah, hier. Das ist, wie weit er rüber geht. Guck mal.
Wenn ich hier 12 reinschreibe,
da geht er schon weit rüber.
Kann man nicht
sagen Full?
Ohohoho.
Fuck. Oh mein...
Das liegt jetzt aber an der Seite...
Insgesamt an der Breite, die nicht da ist.
Oh.
Okay. Diese ganzen
Dark-Theme-Dinger,
die kann ich rausschmeißen. Die brauch ich nicht.
Die verwende ich eh nicht. Da wird's schon mal ein bisschen übersichtlicher.
Ist hier noch was mit Dark drinne?
Äh.
What?
Ich verwende doch gar kein Dark-Theme-Zeug.
Warum
brauche ich das jetzt auf einmal?
Kann ich nicht einfach so sagen? Data state checked?
Doch. Funst.
Muss ich nicht Dark haben.
Ah, mein Knopf ist weg.
Warum ist denn mein Knopf jetzt schon wieder fort?
Bring den hier auf.
Alter, ich dreh am Rad.
Ey, das ist der Wahnsinn.
Wie kriege ich denn das hier...
So, also, von der Idee her
will ich im Prinzip diesen Knopf
zweiteilen, so. Ja?
An und aus.
Okay, das heißt, wir müssen jetzt so gucken, wie wir das hier hinkriegen.
Size?
Zehn. Beste.
Schön fett.
Guck mal, acht.
Es gibt bestimmt irgendwas Nices.
Was sagt eigentlich...
Was sagt eigentlich den ihren...
Haben die so eine Art Components
Switch?
Der mehr oder weniger eins zu eins
der gleiche, nur gerappt, ja?
Wie sieht eigentlich
den ihr Select aus?
Ja, das ist im Prinzip
einfach BitUI
gerappt.
So, wie kriege ich das Ding jetzt?
Also, ich weiß gar nicht, was ich eigentlich machen will.
Ich bin... Das verwirrt mich, das CSS
Zeug.
Im Prinzip will ich einen Switch,
der bis
zur Hälfte geht, ne?
Also, wenn ich nach 32...
Aha!
Und dann bis zur anderen.
So, aber... Nee, Moment.
Das ist ja falsch.
Keine Ahnung, das kriege ich nicht hin.
Da reichen meine ganzen Frontend-Skills
nicht für aus.
Das kriege ich nicht gebacken.
Das geht nicht.
Ich will ja eigentlich gar keinen Switch
im klassischen Sinn.
Ich will eigentlich eins haben,
da steht WiFi links und WiFi rechts
und dann switch das rüber, quasi
so auf die rechte Seite,
mach die rechte Seite hell
und die linke Seite bleibt dunkel.
Und...
Also, es wird immer die Seite hell,
die aktiv ist, so.
Aber keine Ahnung, wie das
von Stev...
Machen einen Button. Ja, das sind alles irgendwelche
Workarounds, weil ich es dann hinkriege.
Weiß nicht, ob ich irgendwie
einen guten Ansatz für...
Nee. Nee.
Keine Ahnung.
Ich hätte wirklich... Ja, ich hätte einfach
das Selectmenü mit den falschen
Farben belassen sollen.
Ja, das stimmt.
Nee, kein Schimmer.
Baut man denn sowas?
Mir fällt jetzt auch nichts ein,
ob man das abgucken kann.
Ein Range-Slider...
Im Prinzip will ich einen Switch haben,
der eigentlich gar nicht die Hintergrundfarbe
großartig...
großartig ändert.
Ich will einen Switch
haben... Okay, wisst ihr was?
Ich weiß, wie ich das mache.
Ich will die ganzen Backgroundshit
einfach mal hier weg. Okay?
Was passiert, wenn ich das alles lösche?
Dann slidet das.
Okay.
Die ganzen Backgroundfarmen und so,
die brauche ich alles gar nicht.
Aber warum geht denn das jetzt aus?
Die Backgroundfarmen sind egal.
Im Prinzip will ich eigentlich...
Ich will ein
viereckiges Ding,
was da drüber slidet.
Also...
Wie macht man das?
Wie macht man denn die...
diesen Knopf
da gescheit?
Also, Block Size, Rounded Full...
Wollen wir wegmachen?
Ja, ja, schon viel besser.
Und jetzt will ich
den im Prinzip halb so groß machen
von diesem Ding.
So, das ist ja schon
die halbe Miete. Der muss jetzt
einfach größer sein. Das Problem ist
halt, dass wenn ich jetzt sage, okay,
der ist...
20 oder so...
8.
So.
Ich will im Prinzip die Hälfte
davon haben. Wie sagt man ihm denn?
Gibt es irgendwie...
1, 1, 1,5?
Ja! Ja, ja, sehr gut, sehr gut,
sehr gut, okay.
Jetzt Translate...
Ja, da bräuchte ich auch so was wie 1,5.
Äh...
Passt. Passt.
Das Problem ist, dass es halt nicht dynamisch ist dann.
Äh...
Wait a minute. What?
Was habe ich jetzt falsch gemacht?
50 gibt es nicht.
52.
Hä? Alter, das macht mich fertig.
So, so in der Richtung, ja.
Also das kommt
schon ungefähr hin. Das kommt schon relativ gut hin
das, was ich machen will. Und dann
will ich jetzt, dass auf der linken Seite einfach
WiFi 1 stehen und auf der rechten Seite
WiFi 2. Oder doch mit
Radio Button. Äh...
Das ist vorbei, jetzt wird nichts Radio Buttoned.
Im Prinzip...
Im Prinzip so was
hier. Nur in schön, genau.
Im Prinzip
sowas ähnliches hier.
Und sowas ähnliches wie das hier will ich haben.
Nur in schön, dass es so rüber Faded.
Das ist schon nice.
Fading stellts.
Die große Preisfrage ist
jetzt ja auch noch.
Wie kriege ich denn da jetzt
Text rein?
da Text rein, da hinten jetzt?
Wie kriege ich auf die Seite Wi-Fi 1 und auf die Seite
kann man da irgendwie, also
ich werde jetzt nicht einfach ein Diff mit einem 1,
wenn das funktioniert. Muss ich dann
irgendwie
Position Absolut oder sowas machen?
Irgendwie, dass wir hier sagen, das ist Position Relative.
Dann mal Switch.
Wi-Fi 1.
So, und
dann sagen wir,
ja, guck dir mal.
Das geht doch schon in die Richtung.
Ja, fast.
Das geht doch schon fast
in die Richtung, wie ich es haben will.
Es sieht zwar noch super hässlich aus, aber es ist doch schon
so ungefähr.
Ja, so passt
fast, fast, ja.
Man versteht, was ich machen will, oder?
Nur, dass mir die
CSS-Skills dafür fehlen.
Ich nehme das nicht aus dem Beispiel.
Das müssen wir jetzt nur noch in schön bauen.
So, so ungefähr.
So will ich das haben. Nur, dass es
gut aussieht, okay?
Das Beispiel ist nicht das, was ich
haben will. Das sieht
eklig aus.
Ohne Animationen
sogar. Ich brauche
Slider-Animations. Guck mal hier.
Das Blöde ist, ich glaube,
meine Slider-Animation geht kaputt.
Nee, die geht nicht kaputt.
Passt, passt. Das ist doch okay so.
Das ist doch...
Wir nähern uns, wir nähern uns der Sache.
So, wir machen jetzt hier, wo ist
Rounded?
Rounded...
What? Warum ist das Rounded Full?
Weiß nix, Rounded Full.
Oh, so, schon besser.
Und das hier einfach nur Rounded.
Ja, guck, mit runden Ecken sieht alles besser aus.
Jetzt müssen wir uns nur noch überlegen, wie wir das hier hin machen.
Irgendwie keine Ahnung.
Zehn.
Zehn.
Guck mal, das sieht doch, ohne Scheiß, das sieht
doch jetzt schon gar nicht so schlecht aus.
Das ist zwar nicht richtig aligned, alles.
Sind wir in der Hälfte? 24 oder so?
Nee.
16.
18.
Was ist, was ist denn da schön in der Mitte?
Irgendwie sowas?
Guck mal, das sieht doch schon gar nicht so kacke aus jetzt, oder?
Das sieht doch schon gar nicht so schlecht aus.
Es ist nicht so hundertprozentig aligned.
18 gibt's nicht, was gibt's denn sonst noch hier?
16 gibt's nicht.
Also vielleicht hat jemand eine schlaue Idee, wenn man das ordentlich aligned, jeweils in der Mitte von der jeweiligen Seite, so.
Fast schon professional, ja.
Verschiebt sich das jetzt eigentlich?
Guck mal, das verschiebt sich noch nicht mal.
Wenn ich das hier verschiebe, das sieht halt, das ist halt komplett broken, so.
Das kann ich später immer noch fixen, ne.
Div drumherum.
Und dann 50, 50, okay.
Ja, das ist eine gute Idee.
Also ein Div.
Ein Div, was, ähm, Position absolut kriegt.
Jetzt sehen wir schon wieder.
Ich bin der professionellste Frontend-Developer, den man sich vorstellen kann, ja.
Nee, ich hab gar keine Ahnung von dem, was ich mache, Frontend-technisch.
Das ist auch nicht das, womit ich mein Geld verdiene.
Warum ist das jetzt eigentlich falsch herum?
Achso, weil beides absolut ist. Soll's ja nicht.
Das merkt man richtig.
Man erkennt's.
Äh, und jetzt?
Kann ich jetzt nicht sagen, hier, space, around oder sowas?
Wie verteile ich das jetzt gescheit?
Guck mal, left 20 ist ja auch Blödsinn.
Ähm, ey, ich bin, ich bin da, around. Wie geht das denn?
Ähm, ey, ich bin, ich bin da, around. Wie geht das denn?
Ähm, ey, ich bin, ich bin da, around. Wie geht das denn?
Ähm, ey, ich bin, ich bin da, around. Wie geht das denn?
Wie geht das nochmal? Justify content around?
Wie geht das nochmal? Justify content around?
Space oder irgendwas?
Flex space around?
Äh.
Between? Space between oder sowas?
Ja, so, so ungefähr.
Fast, fast richtig.
Fast, fast richtig.
So, und jetzt machen wir einfach ein leeres Diff-Element da.
So, und jetzt machen wir einfach ein leeres Diff-Element da.
Und leeres Diff-Element da.
Leeres Diff-Element.
HA!
Easy.
Easy.
Easy. Easy.
Easy. Easy.
Systema, ha?
Massive centering.
Das geht bestimmt besser.
Das geht bestimmt besser.
Aber guck mal, wie schön Aligned das in der Mitte ist jetzt.
Aber guck mal, wie schön Aligned das in der Mitte ist jetzt.
Massive Alignment.
Ja gut, das funzt jetzt natürlich nicht, wenn das so klein ist.
Massive Aligned.
Huge Aligned.
Hm, Class Peer, braucht man das?
Ne, braucht man net.
Inline Flex.
Inline Flex.
Höhe ist auch egal.
Höhe ist auch egal.
Shrink 0, was auch immer das bedeuten soll.
Shrink 0, was auch immer das bedeuten soll.
Full, ja das brauchen wir.
Full.
Das können wir lassen, rounded.
Das darf ruhig die gesamte Dings benutzen.
Das darf ruhig die gesamte Dings benutzen.
Was der hier mit Colors macht, habe ich keine Ahnung.
Was der hier mit Colors macht, habe ich keine Ahnung.
Das brauchen wir auch nicht.
Ich bin auf Center gegangen.
Keine Ahnung, ich fasse das jetzt nicht mehr an.
Item Center, brauchen wir das an der Stelle?
Ja, das ist nicht verkehrt.
Ok, nice.
So, jetzt stellen wir noch die Farben richtig ein.
Jetzt.
Jetzt stellen wir die Farben noch richtig ein.
Also.
Wir brauchen als Hintergrund.
Brauchen wir BG Neutral, 800 hatten wir da glaube ich.
Brauchen wir BG Neutral, 800 hatten wir da glaube ich.
Ja.
Dann brauchen wir...
Dann brauchen wir...
Ja gut, das ist das gleiche hier.
Checkt und uncheckt.
Das darf das gleiche sein.
Da kann man bestimmt noch sehr viel
wegschmeißen von diesem ganzen Zeug,
was ich hier, was ich hier...
Shadow Inset, brauchen wir das?
Äh.
Cursor Disabled, Cursor Unallow, brauchen wir auch nicht.
Oder? Brauchen wir das?
Was macht das?
Das brauchen wir, glaube ich, hier alles nicht.
Genau, das brauchen wir.
Siehst du, schon wird es viel einfacher, das CSS.
Das brauchen wir alles nicht.
Und bei dem
Checkt geht auch.
Ohne Dartmode gedöhnt.
Das in den Text nicht markieren,
das ist eigentlich... Ja, das kann sein.
Weil das ist doch eigentlich irgendwas anderes.
Das ist Selectable, glaube ich.
So, die Dinger stimmen.
So, Textgröße brauchen wir noch.
Text LG.
Ja, jetzt haben wir nämlich hier
die gleiche Größe. Okay, nice.
Die Höhe stimmt noch nicht so ganz.
Haben wir die Höhe? Kann man die Höhe hier irgendwie einstellen?
Wie hoch ist denn mein Input?
Habe ich da irgendwie eine Höhe eingestellt?
Nö, ne?
Zehn.
Wie hoch ist denn so ein Input da?
Wie hoch ist denn der?
Sieht man das so hier? Inspect.
Wie sieht man, wie hoch der Input ist?
Schwarz, nett.
Vielleicht einfach auch Padding 2 oder so?
Ah ja, nice. Guck mal, jetzt stimmt die.
Jetzt ist die Höhe genauso.
Die ganzen Formelemente sind alle gleich.
Gleiches Padding. Zack.
Oder Margin.
Ich kann mir einfach nie den Input...
Ich kann mir eh nie den Unterschied merken.
Wobei, nicht so ganz, ne?
Das wollen wir nicht. Wir wollen eigentlich kein Padding, sondern...
Wir wollen vielleicht hier.
Vielleicht wollen wir hier jetzt...
Ach, hier ist die Höhe. Das ist das Ding.
Aber wenn ich die Höhe wegmache, dann ist...
Zwei. Vier.
Sechs.
Oh, wie groß. Fünf.
Ist das jetzt die gleiche Höhe?
Oder sieht das einfach nur ziemlich ähnlich aus?
Ich glaube, das ist ungefähr.
So, dann brauchen wir jetzt noch den Ring da drumherum.
Ring.
Neutral 700.
Hier.
Äh.
Seht ihr da irgendeinen Ring drumherum?
Ich nicht.
Ach so, wir müssen die Größe noch setzen.
Ja.
Fast. Fast.
Okay.
Damit kann ich ja...
Damit kann ich eigentlich fast schon...
Damit kann ich ja eigentlich fast schon leben hier.
Wobei das sich jetzt halt so ein bisschen überlagert, ne?
Das sieht ja nicht so geil aus.
Oder ist das jetzt Border?
Ah.
Nicht so nice.
Border, ganz. 100.
So, also...
Und jetzt Border...
Border 2, ne?
Ne, das funktioniert schon mal nicht.
Border...
Das kann alles... Das kann weg.
Shadow, Popover, kann auch weg.
Dark, BG, kann auch weg.
Auch, auch.
Aha.
Was hat er denn jetzt gemacht?
Äh.
Ach so, das ist hier neben das Ding.
So.
Chat.
Der sieht doch jetzt eigentlich ganz brauchbar aus.
Wie so ein Toggle brauchst du keine Library.
Das ist richtig.
Ja.
Das nächste.
Die Library wieder rausschmeißen.
Ja.
Motion Devs.
ZG.
Wie war der Laden?
War der Laden...
Ich hoffe für dich, der Laden war eh scheiße.
Also, sag mal.
Wenn die Stelle abgebaut war, war der Laden höchstwahrscheinlich eh kacke.
Zumindest in letzter Zeit.
Nicht schon immer, aber in letzter Zeit.
Meistens sind die Läden, wo da angefangen wird, in der Richtung...
Die haben sich zum Negativen entwickelt.
Also, ich suche keine ITler.
Aber wir haben vielleicht im Chat...
Heute eigentlich müssten wir auch die Stellen anzeigen.
Fertig machen.
Fällt mir gerade auf, wenn ich das so lese.
Chat, wisst ihr was?
Wir lassen das jetzt so.
Wir lassen...
Wir lassen das so.
Das einzige, was ich jetzt noch mache, ist...
Oh, vielleicht...
Vielleicht nochmal.
Wollen wir nicht?
Vielleicht das...
Eins.
So, oder?
So ist gut.
Chat, lassen wir es so?
Damit können wir leben, oder?
Das ist zwar nicht so hundertprozentig aligned und nicht so alles super geil, aber damit
können wir leben.
Ich glaube, das ist in Ordnung.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Ehem.
Das ist okay.
Ja, das ist okay.
Das ist gut so.
Perfection.
Ist es responsive?
Naja.
Bis zum gewissen Teil ist es responsive.
Aber das liegt auch nur daran, weil ich zu blöd bin, dieses Translate hier zu checken,
wie das funktioniert.
Also, die Hälfte, ein Halb von der Größe her check ich, aber was ich halt nicht checke
ist, wie ich das Translate hinkriege.
Äh, wait a minute.
Alles?
Es funzt!
Easy!
Woher kommt...
Wo kommt denn das hier her?
Wo kommt denn dieses hässliche...
Active.
Outline Zero.
War's das jetzt?
Ne, das ist immer noch da.
Wo kommt denn das her?
Das ist...
Das ist das Richtsprach...
Das ist immer...
Ihr habt schon an meinen CSS-Skills gezweifelt hier.
Wo kommt denn dieses Outline hier wieder her?
Es ist schon mal nicht Fokus.
Weil wenn ich da reinklicke, ist es weg.
Das sind ja so just frontend things.
Das ist nicht Hover.
Ne, ne, ist nicht Hover.
Das ist Active.
Aber ist egal.
Da kann ich jetzt...
Ja, also das nächste ist, wir bauen die Library wieder aus.
Aber das mach ich nicht jetzt.
Ich hab mich lang genug mit diesem komischen...
Toggle-Ding hier aufgehalten.
Achso, und ein Titel drüber.
Ja.
Ja, ja, das wär nicht...
Das wäre tatsächlich nicht verkehrt.
Outline Null hab ich ja ausprobiert.
Das ist es aber nicht.
Und auch so ganz weg.
Aber es ist...
Es kommt eh nur manchmal so.
Jetzt hab ich noch nicht gecheckt, wann das kommt.
Okay.
Nice.
Und Fokus.
Ja, das andere, das ist jetzt nicht mehr da.
Das hat er jetzt schon ein paar Mal gehabt.
Egal.
Wir lassen das jetzt.
So.
Exzellent.
Genauso hab ich mir das vorgestellt.
Wi-Fi 1, Wi-Fi 0, Wi-Fi 1, Wi-Fi 0.
So, und wie kann ich jetzt den State daraus...
Brauchen wir das hier?
Shadow, Mini?
Nee, brauchen wir nicht.
Nächster Moment.
Ein Unterschied.
Nee, kein Unterschied.
Oder?
Kein Unterschied.
Das sind ein paar Zeilenumbrüche, da ich's wieder checke.
Reunter-Events.
Okay, verstehe ich.
So, und jetzt...
Wie kriegen wir...
Den...
Den State davon?
Dass ich weiß, was...
Das haben wir doch hier.
Bits.
Ja.
Das ist API.
Trigger, Content, Item, Value.
Value wollen wir haben.
Easy.
Okay, dieser Switch.
Das taucht ja auf jeden Fall nicht in meinem Form-Event auf.
Gehe ich mal ganz stark davon aus.
Weil das irgendwie...
Eigen...
Eigenkonstruktion ist.
Oder taucht das hier irgendwie auf?
Einmal Return.
Log.
Data.
Nee.
Okay, das ist klar.
Das ist...
Das hat...
Das ist...
Das taucht nicht in meiner Form auf.
Das dachte ich mir schon.
Also.
Heißt, im Endeffekt, wir müssen uns selbst drum kümmern.
Das heißt...
Value.
Value.
Value.
Value.
Hier.
Value.
Wobei, ID-Marketing.
Das können wir rausschmeißen.
Value.
Das muss ich jetzt irgendwie selbst binden.
Das war ein bisschen unschön.
Switch.
Value.
Ich bin mir nicht sicher, was da dann drinnen steht.
Nee.
Bind will ich haben, ne?
Bind.
Value.
Äh.
String?
Warte mal.
Wie geht das jetzt in...
Wie ist das jetzt die neue Svelte-Logik?
Da muss ich sagen...
Effekt, oder?
Nee, wie geht das nochmal?
Wenn ich jetzt...
Effekt.
Wenn ich jetzt quasi für jedes Mal, wo sich...
Wo sich Switch-Value ändert...
Ey, das findest du schon mal nett.
Dollar.
State.
Okay, da bin ich zu pipiga für.
Weiß ich nicht, wie das jetzt funzt.
Wir machen das einfach wie der letzte Kack-Noob.
Set Intervall.
Alle 5 Millisekunden.
Log.
Switch-Value.
Okay.
Okay, da steht einfach nix drinnen.
Wann kommt denn da was rein?
Wie funzt das mit dem Switch...
Switch-Value.
Haben die da irgendein Beispiel für?
Träger.
Nee.
Select.
Value.
Hab ich das da drinnen?
Wie ist das denn jetzt gedacht?
Äh.
Ach, Moment.
Ich hab ja auch das Falsche offen.
Ich muss den Switch aufmachen.
Lul.
Ähm.
Hier.
Checked.
Muss ich.
Binden.
Nicht Value.
Checked.
Ja.
True, false.
True, false.
Lul, weh.
Alles klar.
Ja.
Okay.
Jetzt.
Wir müssen auch das Richtige finden.
Ja, dann ist es doch ganz einfach jetzt.
Was war das jetzt für Schmerzen?
String is not a sign.
Aber jetzt dachte ich mir, dass das eigentlich kein String sein muss.
Hat mich schon gewundert.
False.
Und wenn ich das hier true rein schreibe...
Dann ist es Standardmystik.
Okay, nice.
Das funzt.
Sehr schön.
So.
Da kann ich das jetzt ja auch zum Server schicken.
Und das Set-Intervall kann ich mir wieder sparen.
Also, im Prinzip muss ich das jetzt ja auswerten, was Switch-Value gesetzt ist.
Also, sprich, wenn...
Machen wir das hier auch nochmal.
Dollar-State.
Äh.
Ich hab die ganzen roten Schnörkel-Dinger mir angucken muss.
Äh.
Checkt er das?
Ich muss das auch initial einmal setzen.
Und zwar aus...
Config.
Ja.
Das stimmt nicht so ganz.
Ich hab da nämlich eigentlich sowas hier drin.
So eine WiFi...
WiFi 1 first.
Da brauch ich das her.
Das hab ich nicht eigentlich...
Ist das...
Was ist denn das?
Ist das...
Das ist False, ne?
False.
Ja.
Also, sprich...
Ähm...
Not.
Ja.
Okay.
Oh!
MonkaS, Leute.
Alter.
Chat.
Schluss für heute.
Reicht.
Genug vorne entstellts.
Aber, ihr müsst zugeben.
Das sieht besser aus, als am Anfang gedacht.
Ja.
Ja.
Wie gedacht, oder?
Das Teil hier jetzt.
Was gab's zu essen?
Äh.
Es gab Salat.
Lass mal überlegen.
Salat.
Und...
Äh.
Kartoffelbrei und Ei.
Nix.
Nix Aufwendiges.
War noch übrig.
Kartoffelbrei so angebraten hat meine Oma immer gemacht früher.
Das ist das simpelste ever, was es gibt.
Aber schmeckt nice.
So.
Aber Chat.
Mir reicht's jetzt.
Genug.
Ja, Wifi 3 wird's nicht geben.
Reicht.
Ja.
Deswegen geh ich jetzt AFK Klo.
AFK Essen.
AFK Git Committen.
Wie auch immer ich das AFK machen will.
Und mich ausruhen.
Morgen früh wieder Homeoffice stellts.
Also.
Wir hören uns.
Schön, dass ihr dabei wart.
Wem's gefallen hat und in Zukunft mehr sehen will, darf mir gerne followen.
Ich freu mich.
Grüne Pfeile, die nach oben zeigen.
Big Strongs.
Bis dann.
Macht's gut.
See you.
