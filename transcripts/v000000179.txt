Oh, wir haben Quality-Options.
Moin, Leute.
Verreckt, FPS.
Das ist Next-Level-ASCII-Art, aber richtig.
Wusstet ihr schon, dass man mit VLC und M-Player, dass man Filme in ASCII abspielen kann?
Und richtig Meta ist es, wenn ihr euch dann Matrix anguckt und man quasi den ASCII-Matrix-Bildschirmschoner
über eine Videodatei in ASCII umgewandelt in seinem Terminal guckt.
Das war so mal, dass es die richtigen Hacks war.
Die Mario Odyssey-Musik, süß, geil.
Kommt nächstes Jahr eigentlich eine neue Katz-FPS.
Ich war sogar jetzt schon im Tierheim und hab geguckt und ich hatte mir auch eine ausgesucht,
aber die war noch, ähm, ausgesucht, ja, so eine.
Eingeguckt auf der...
äh, auf der Internetseite, wir müssen das jetzt noch mal machen.
Musik ist übelst nice.
Ah.
Oh, oh, das ist nicht...
Das kann den Bildschirm nicht switchen, mein Meme-Tool.
WTF.
Aber die hat hier mal ein anderes jetzt.
Weil da, wo ich da war, war die noch, äh, ist die noch nicht aus ihrem Häuschen rausgekommen.
Und hat gefaukt, wenn man rangehen will.
Da hab ich mir gedacht, okay, ich lasse erst mal ein bisschen in Ruhe.
Aber ich hole mal auf jeden Fall wieder eine Katz.
Easy.
Ein Meme-to-ASCII-Konverter wäre raus.
Das ist nicht schwer.
Das ist nicht schwer.
Wie gesagt, du kannst mit VLC und M-Player kannst du ohne Problem jeglichen Film mit als ASCII-Art abspielen.
Können wir das jetzt noch irgendwie toppen hier?
Wir können auch das Aquarium unten anmachen.
Okay.
Das ist, das ist voller ASCII-Power.
Jetzt müssen wir noch den, den Papagei ein bisschen resizen, dass der hier hinpasst.
Oh, so ist das nice, oder?
Ja, aber die Papageien haben unterschiedliche FPS.
Guck mal, links ist viel langsamer als rechts.
Was ist das für eine Musik?
Das ist Mario, äh, der aus dem Mario Odyssey, Super Mario Odyssey Soundtrack.
их?
Das hier.
Jump Up Superstar.
Und nachdem heute Weihnachten ist, müssen wir ein bisschen Weihnachtsmusik anmachen.
Da kommen wir heute nicht drum herum.
Aber wir gucken, wir gucken mal, wenn irgendwas nicht ganz so schlimm ist.
Weil, Leute, seid ihr auch in so unglaublicher Weihnachtsstimmung wie ich?
Also so irgendwie gefühlt gar nicht?
Ich auch nicht.
Ich bin auch neulich, aber juckt mich irgendwie überhaupt nicht, dass morgen Weihnachten ist.
Okay, ich wurde ja schon auf Twitter korrigiert, morgen ist Heiligabend und nicht Weihnachten.
Aber das ist für die meisten Leute, die an Weihnachten denken, denken hauptsächlich an Heiligabend.
Bock auf Grillen.
Mit Grills gibt es eigentlich eine Readme, wie man das Meme-Tool set upt.
Das musst du nichts großartig set upen, einfach starten.
Das Problem ist, Readme schön und gut, aber das Tool ist noch nicht mal auf GitHub fertig.
Ist noch nicht mal online.
Nein, das wird solche Readme machen.
So, also Leute.
Es funktioniert.
Also das, was wir gestern versucht haben, was nicht funktioniert hat, mein JavaScript gefuchtelt da mit der Kamera.
Das funktioniert jetzt. Wir haben nichts falsch gemacht.
Das lag an Firefox.
Das lag an Firefox.
Firefox backt rum, wenn man es in den...
Ich zeig's euch mal.
Firefox backt rum, wenn man es in den...
Wenn man es in diesen Modus hier packt.
Bei Firefox kannst du hier sagen, inspect und dann kannst du umschalten auf iPhone-Simulator.
So.
Und sobald man das einschaltet, ist Firefox verbuggt und es geht nicht mehr.
Der Witz ist, dass es auf dem richtigen iPhone aber funktioniert.
So.
Sag mal, mir fällt gerade so eine Sache ein.
Ich hab jetzt noch so eine super geile...
Was machen wir jetzt eigentlich?
Was machen wir mal für Weihnachtsmusik?
Ja, das machen wir mal. Das ist nice.
Jetzt gucken wir, was wir brauchen.
Ja, das. Das machen wir jetzt.
Achtung.
Das ist fast, fast ein bisschen wie die Musik vorher.
Damit kann man leben. Das ist nicht ganz so schlimm wie O-Tan-Baum oder sowas.
Was mir gerade einfällt...
Ich hab doch jetzt so eine...
So eine geile RGB-Special-Kick-Airs-Übertastatur.
Ich könnte mir ja immer einen Makro programmieren, dass ich zwischen den beiden Desktops wechseln kann, oder?
Das müsste doch damit ohne Probleme möglich sein.
Weil es wäre schön, wenn ich einfach eine Taste drücken müsste, so hier Funktionstaste G1 oder sowas.
Auf der Tastatur und es switcht mir auf meinen zweiten Desktop.
Weil diese komische...
Weil ich meine...
Kommt mal im Ernst.
Steuerung, Windows-Taste rechts.
Und dann reinklicken. Das ist vollkommen beknackt.
Und dann Steuerung, Alt, Steuerung, Windows-Taste, linke.
Linke.
Naja, das ist ja...
Hast du nie...
Klar, kannst du machen.
Es sagt scheinbar, die Musik ist zu laut.
Das müsste ungefähr passen, ne?
So.
Wie macht man da drinnen...
Bevor wir jetzt in Progress anfangen, lass mal gucken hier.
Wie macht man in dieser komischen Corsair...
So, wie macht man da einen Makro zum Desktop-Switchen?
Das muss doch gehen.
Ich meine...
Schau wieder.
Okay, save.
Ich weiß nicht genau, was er für Schmerzen hat.
Actions.
Mute.
Mute?
Moment, hab ich mich jetzt gemutet irgendwie?
Hört ihr mich noch?
Ja.
Hört ihr mich noch?
Ja, ne?
Hab ich mal irgendwas ausprobiert.
Weg damit.
Wiss ich.
Okay, wie macht man hier jetzt Makros?
Action.
Plus.
Die Software ist wirklich der allerletzte Shit, ey.
Start and record a Makro by pressing on the record button.
Auf das da.
Okay.
Und jetzt?
So, bla bla bla.
Also, ich...
Okay, ich drücke jetzt mal ein paar Tasten.
Ah.
Stop record.
Das heißt, wenn ich das jetzt playe, drückt er ein paar Mal die Windows-Taste, hä?
Wie playt man das Makro?
Play?
Makro?
Play?
Play?
Wo ist der Play-Knopf?
Brown oder Speed?
Wo ist denn der Play-Knopf für das Makro?
Mein Gott, diese Corsair-Software ist so scheiße.
Die Tastatur ist ganz okay, aber die Software ist so beschissen, ey.
So, was sehe ich da so richtig?
Hat das?
Hat das?
Hat das keinen Play-Knopf?
Okay, das hat keinen Play-Knopf.
Wie?
Wie kriege ich denn das jetzt auf den Key gebunden überhaupt?
Das ist...
Boah, das ist mega...
Kann ich das vielleicht einfach auf den Knopf ziehen?
Track and Drop?
Ah!
G2.
Okay, Achtung, G2.
Okay.
Es funktioniert.
Es funktioniert.
Er drückt wie ein Ostas, das ist wie verrückt.
Welche Switches hast du in der Ducky One?
Skyline?
Äh, die, die, die Normal-Staub-Brown-Switches sind das.
Äh, weißt du zufällig, wie ich die Mediatasten auf meiner Tastatur zum Beispiel Play, Pause in Qt einmelden kann?
Äh, ich, ich wüsste, ich denke, da braucht man gar nichts Großartiges zu, oder?
Das dürfte doch standardmäßig funktionieren.
Verkackt.
So.
Jetzt.
Ah.
Oh, jetzt macht er den Desktop immer weiter.
Ah, jetzt kommt er.
Da sag ich schon, okay, ah, wir haben es geschafft.
Wir haben es geschafft.
Debated.
Ja, wir haben es geschafft.
Gut.
Ähm.
So, und jetzt als nächstes.
Ich, wahrscheinlich ist es super spannend zum Zugucken.
Ja, es guckt schon kein Mensch mehr zu, wie ich meine Makros erstelle.
Ähm.
Was?
Ich wollte nur das eine Event löschen.
Hahaha.
Haha.
Das ist eine Oberfläche.
Äh.
So.
Add.
Keyboard Event.
Und jetzt machen wir, äh, jetzt drücken wir, jetzt drücken wir V für View.
So.
Dann machen wir mal ein Delay von 5 Millisekunden.
Ich bin mir da nicht so sicher, ob das sonst funktioniert.
Okay, gucken wir mal, wie weit wir jetzt kommen.
Hallo?
Ah, nee, wir brauchen, wir brauchen ein längeres, wir brauchen ein längeres Delay.
Also müssen wir Alt, also müssen wir Alt-V drücken.
Also müssen wir Alt-V drücken.
Okay.
Okay.
Ich, boah, das ist, das ist, das ist, das ist, ich find's schon nicht schön.
Keep, keep, press, nein, nein.
Press.
Wir müssen hiervor noch ein Delay machen.
Und zwar länger als 5 Millisekunden, weil wir brauchen, was meinten wir, wie lange brauchen der Switch so?
150 Millisekunden so?
Wie machst du das mit mehreren Desktops?
Das ist ganz, ganz, äh.
Also, normal, das ist in jeder, ab Windows 10 ist das drin.
Guck mal, du kannst hier unten mit diesem, mit diesem Task-View, kannst du unterschiedliche Desktops hier oben anmachen und angucken und gedünsen.
Und switchen mit Shortcuts kannst du Control-Windows rechts, links und dann kommt der nächste noch.
Okay, jetzt haben wir Key, Input-Keys, was, Key-V?
Nein, nein, wir wollen, wir wollen, ähm, Alt.
Alt.
Dann.
Und dann wollen wir Release-Alt.
Drei Stunden später haben wir wahrscheinlich auch unser, drei Stunden später hab ich auch, äh, Makros erstellt.
Äh, Key-Release-Alt.
Achtung.
Ah.
Okay, wir nähern uns, wir nähern uns, wir nähern uns, der ganze Geschichte.
So, und jetzt muss ich zweimal Arrow-Down drücken.
Keyboard-Event.
Arrow-Down.
Add.
Arrow-Down.
So, mal gucken, wie weit wir jetzt sind.
Ha, ja, ha, ha, oh, äh.
Fast.
Ähm, und jetzt muss ich noch Enter drücken und dann bin ich fertig.
So, Achtung.
Bam.
Was ist da drin?
Nice.
Sehr nice.
So, nachdem wir das jetzt geschafft haben, jetzt brauchen wir noch, jetzt müssen wir noch
ein Zurück-Switch-Makro machen.
Aber ein Zurück-Switch-Makro sollte einfach sein.
Ähm, Zurück-Switch-Makro kriegen wir hin.
Das ist kein Ding, das ist einfach nur der obere Teil, den können wir Copy-Paste und
dann schreibt es Arrow-Links, Arrow-Left.
Ja.
Ja.
Kann man das nicht kopieren?
Oh, come on, brah.
Warum nicht?
Kann man das nicht kopieren?
Nein.
Nein.
Darf man natürlich nicht kopieren.
Kann ich das Makro vielleicht kopieren?
Ha, sehr schön.
Okay, das heißt, den ganzen Schmodder hier unten brauchen wir nicht mehr.
So, Left Arrow.
Left Arrow.
Ja.
Ja.
Okay, und das binden wir jetzt auf Knopf Nummer 2.
Das heißt, mit 1 kann ich hinschalten, mit 2...
Moment.
Warum kann ich mit 2 nicht zurückschalten?
Ah, weil ich erst noch raus muss aus VMware.
So Dinger nehmen immer aus.
Ich muss vorher noch die Ausmaße an, da denkt man, das ist easy going, aber das ist es nicht.
Das heißt, ich muss vorher noch, was muss ich drücken?
Ctrl Alt muss ich drücken, zum rauskommen, ne?
Der Eax am Start, moin.
Und was macht deine Blender-Designer-Karriere, beziehungsweise Photoshop, ähm, Buzzloads?
Okay, das machen wir jetzt noch, dann ist aber gut.
So, hinschalten, Funz, zurückschalten geht nicht, zurückschalten muss ich was drücken?
Ctrl Alt.
Und dann das andere Kram.
Okay, das, das, das dürfte nicht allzu schwierig sein.
Insert Events.
Das heißt, wir machen jetzt...
Ctrl.
Haben wir, wir machen das jetzt ein bisschen schneller.
Wir machen jetzt, zack, Copy-Paste.
Und jetzt Release.
Zack.
Oh, jetzt wird Optimized hier, Optimizer am Start.
So, ähm...
Release, ähm...
Ähm...
Jetzt brauchen wir Ctrl Alt und Release Alt und der Release muss unten sein und, äh...
Okay, das müsste jetzt klappen, ne?
Fast.
Ah, okay, man braucht ein Delay.
Man braucht ein kurzes, kurzes Delay braucht man dazwischen.
Ups, das ist das Falsche.
Wobei, wir haben schon ein Delay.
Oh, nee, Quatsch, den Blödsinn müssen wir...
Ah, warte mal, den Kram müssen wir als erstes machen, Leute.
Okay, man kann es nur einzeln verschieben.
Okay, ich gebe zu, es liegt ein bisschen daran, dass ich auch die Software nicht bedienen kann, aber ganz ehrlich, schön bedienbar ist sie wirklich nicht.
Äh...
Moment, ich blicke nicht mehr durch.
Ja.
Der muss doch oben drüber.
So, ne?
Press Ctrl.
Das können wir kürzer machen.
Guck mal, 50 Millisekunden.
Wie von euch, Leute?
Bezugung vom Tastatur-Makros erstellen.
Ha!
Bam!
Es funzt.
Desktop-Switch aus.
Okay, zu schnell darf man das nicht drücken.
Wir haben es geschafft.
Ja, wir haben es geschafft.
Pock, Alter.
Pock.
Proger.
Easy.
Easy.
Easy.
Easy.
Okay, hoffentlich speichert er das jetzt und es geht nicht weg, wenn ich die, wenn ich das hier zumache.
Nee, macht nicht.
Ha!
Sehr schön.
Ja, es ist geschafft.
Also, ich finde immer noch, die, die beste, der beste Treiber ist der von Logitech.
Da hast du nämlich eine komplette Lua-Skript-Umgebung und, äh, ihr kennt mich ja, mir fällt es einfacher, Logik zu programmieren, anstatt sie zusammen zu klicken.
So.
Also, wie gesagt, ähm, es funktioniert.
Für alle, die neu dabei sind, ich zeig mal kurz, was, was ich, äh, was ich gebastelt hab, das ist das Programm von vor zwei Streams.
Ich hoffe, es tut heute wieder.
Gestern hat es ein bisschen rumgebuckt.
Und zwar haben wir ein Programm gebastelt, um meine China-Gegensprechanlage anzusteuern.
Das ist ein Bild von der China, China-Kamera-Gegensprechanlage.
Ich hab's abgeklebt, dass man mich nicht sieht.
Und wenn ich das hier drücke, hallo, der ist Test, hört ihr es vielleicht, dann ist, äh, die Gegensprechfunktion aktiv.
So, weil das soll unten an die, an die Wand.
So, und das, was wir hier mit der Windows-App gemacht haben, war ja nur so ein Test.
Wie es, wie es prinzipiell funktioniert.
Denn, ähm, die Sache ist die, das haben wir uns gestern ja auch schon angeguckt.
Wir müssten da ne, ne Mobile-App draus machen, oder App in Anführungsstrichen.
Wir machen ne Webseite als App verpackt.
Und damit haben wir ja gestern schon angefangen.
Und wir sind stehen geblieben, hier, ich zeig's euch mal.
Wo hab ich das Ding jetzt hin?
Moment, wo hab ich's denn überhaupt?
Documents, hä?
Wo hab ich denn den Shit gestern gespeichert?
CD-Test.
Ah, da ist es, okay, genau.
Code.
Wenn man sein Zeug dann mal findet, äh.
So, da ist es aber, starten.
So, hier sind wir gestern stehen geblieben.
So, und das funzt jetzt.
Man sieht, ja genau, Firefox ist nämlich verbuggt.
Das musste ich auch feststellen.
Firefox in diesem, in diesem iPhone-Simulationsmodus verbuggt.
So, und wenn man Chrome jetzt umstellt.
Übrigens, kennt ihr das?
Es gibt, das hab ich, hab ich vorhin auf Github gefunden, es gibt ne, ne, ne Javascript-only, ähm, Browser-Konsole.
Also quasi das da.
Als, als, äh, Javascript-Library.
Was sehr praktisch ist, weil man ja natürlich auf Mobile-Plattformen keine De-Developer-Tools aufmachen kann.
Wieso nimmst du keinen Flutter?
Ja, weil ich's nicht über den App-Store verteilen will.
Ich hab ja gar kein Apple...
Ähm, gar kein Apple-Developer-Account, 100 Euro im Jahr.
Und ich möchte was, was halt überall drauf läuft.
Da ist Browser erstmal am einfachsten.
Flutter hast du auch das Problem ein bisschen gehabt, weil ich das letzte Mal geguckt hab, so was, was FFM-Pack-Bindings und so angeht.
Also nicht, dass wir das jetzt brauchen würden, aber ich glaub Native-Bindings war den Flutter noch ein bisschen, ein bisschen schwierig.
So, ähm, so.
Jetzt schalten wir das mal um.
Moment, warum verschiebt's das denn jetzt?
Ich will's jetzt umschalten auf ein iPhone.
6.
So.
Und da sind wir gestern stehen geblieben und ich hab mir das heute Morgen nochmal angeguckt.
Das ist überhaupt kein Ding.
Funktioniert.
Warum's jetzt nicht funktioniert, ist ganz klar.
Weil der Server nicht läuft.
Das kann nicht funktionieren.
Aber ich hab's, äh, ich hab's heute Morgen hingebastelt, dass es im Prinzip hat sich hier nichts Großartiges dran geändert.
Das Einzige, was man machen muss, weil das Restriktion von Apple ist, man muss, wenn man hier so...
Das ist, das ist ein, ähm, Video-Play-Element.
Und da muss man unbedingt reinschreiben, das da.
Also die drei Dinger muss man reinschreiben, dass es auf iOS funktioniert.
Und auch, dass es auf Chrome funktioniert.
Ähm, man muss reinschreiben, Auto-Play, dass es halt automatisch losgeht, dass man nicht klicken muss.
Man muss Plays-Inline reinschreiben, weil, keine Ahnung, weil Apple der Meinung ist, das muss rein.
Und das ist das Wichtigste, dass es funktioniert.
Man muss reinschreiben, Muted.
Weil, ähm, Chrome und, ähm, auch Safari auf iOS haben die Restriktionen nicht.
Da ist die Restriktion drinne, dass wenn man eine Webseite aufmacht, dass die standardmäßig keinen Sound abspielt.
Und anstatt sie selbst einfach alles muten würden, erlauben sie das Abspielen erstmal gar nicht.
Logik suche ich an der Stelle da vergebens, aber man muss das Video-Element von Hand muten.
Und, na gut, man kann es ja dann wieder entmuten.
Wir haben ja sogar schon unseren fetten Entmute-Knopf hier unten.
So, und das Nächste ist, also wie gesagt, ihr könnt es mir glauben, es funktioniert.
Ähm, wir werden das jetzt auch gleich, äh, gleich uns angucken.
Dass ihr es mal gesehen habt, wie es, wie es dann aussieht.
Ich meine, die App ist nur wirklich jetzt simpel.
Du hast, du hast einen Gegensprech-Knopf, den du klicken kannst.
Und du hast ein Bild von der Gegensprechanlage.
Das war's.
Also im Prinzip genau das, was wir hier mal Proof-of-Concept-mäßig in unserer Windows-App gebastelt haben.
Bloß, dass die noch ein bisschen hässlicher aussieht.
Ähm, jetzt halt im Browser.
Und, so.
Aber, dass wir das machen können, es gibt eine Restriktion.
Und um die kommen wir nicht.
Um die kommen wir nicht drumherum.
Wenn man, weil, ich hab's euch, wir haben's ja im letzten Stream auch gemacht,
dass ich quasi vom, vom, in, in das iPhone sprechen konnte.
Und meine Stimme ist auf der Kamera rausgekommen.
Das haben wir das letzte Mal schon gebastelt.
Das war das hier.
Das war das hier.
Ich glaub, die zehnte Konsolen-App ist es.
Die hat die geheimen immer so geilen Namen.
Das ist alles.
Mehr musste man nicht machen.
Ähm, man musste, man musste sich, ähm, den...
Den...
Genau.
Den...
Den Gegensprechkanal zur Kamera aufmachen.
Und dann hier, hier die Packages abgreifen.
Port 8, 7, 6, 5.
Und zur Kamera hochladen.
Das war alles.
Mehr musste man nicht machen.
Das, das war wirklich easy an der Stelle.
Das war gestern, war wirklich easy.
Ist kein Ding, ja.
Es hat mich zwar gefühlt Wochen gekostet, bis ich gecheckt hab, wie die Kamera funktioniert.
Weil so die, die, die China-Style, ähm, Websockets für Arme dabei verwendet werden.
Ohne Websockets zu sein.
Aber wir haben es kapiert.
So, und das kommt da jetzt alles rein.
Die Sache ist, damit das funktioniert, also sprich das, was wir hier gestern nachgebaut haben, auch mit dem iPhone.
Dass man auf dem iPhone überhaupt das Mikrofon auf einer Webseite aktivieren kann, muss es über HTTPS gehen.
Das will Apple so.
Das geht nicht anders.
Und jetzt kommt der, jetzt kommt der nächste Trick.
Und da kann ich euch, da kann ich euch mal wieder was zeigen.
Was einem auch im Praktischen, äh, sei es Admin oder Programmierer oder DevOps oder sonst was, Alltag, was bringt.
Nämlich, es reicht nicht einfach nur, wenn man, jetzt kann ich mal mein geiles Makro ausprobieren, bam.
Es reicht nicht einfach, wenn man nur HTTPS einschaltet, sondern, ähm, es muss auch ein gültiges Zertifikat sein.
Und da wird es jetzt schon ein bisschen schwieriger, ne.
Also sprich, wir brauchen ein gültiges, äh, wir müssen HTTPS einschalten.
Und auf unseren Web-Server, wo wir die Seite später hinlegen.
Wir brauchen ein gültiges Zertifikat.
Und jetzt die Frage an die Kenner.
Was ist die Voraussetzung dafür, dass wir ein gültiges Zertifikat bekommen?
Ein kostenloses?
Das ist jetzt eine blöde Frage, weil wenn ich es sage, ist klar, ja.
Ja, ja, wir machen es mit Let's Encrypt, genau.
Aber was ist die Voraussetzung dafür, dass wir Let's Encrypt überhaupt verwenden können?
Nein.
Nein, ich spiele darauf an, dass wir das Domain brauchen.
Wir brauchen ein Domain, dass wir Let's Encrypt verwenden können.
Ja.
Ich zeige euch mal einen Weg, wie man das ziemlich simpel machen kann.
Ähm, wie man das, wie man das relativ simpel machen kann, ohne dass man sich erstens ein Domain kaufen muss.
Übrigens, Domains sind heute wahnsinnig billig, ne.
Ähm, ich habe mir ein Domain gekauft bei, wie hießen die?
Porkbun?
Das war, das ist der billigste Anbieter schlechthin gewesen, den ich gefunden habe.
Weil die hatten irgendwie Domain-Names.
Ja, das kostet teilweise gar nichts.
Wenn man sich jetzt irgendwie ein Domain raussucht, keine Ahnung.
Sagt man irgendeine blöde Domain hier irgendwie, ähm, wubbel, wubbel, wubbel, Punktbiss oder so.
Und man guckt, was der Kram kostet.
Das kostet 5 Dollar das Jahr.
Das kostet nichts mehr, der Domain, ja.
Und das Schöne an diesem Anbieter ist, finde ich, zwei Sachen.
Die haben eine API, wo man DNS-Einträge ändern kann über Curl.
Das ist, das ist ganz praktisch.
Und die nehmen es überhaupt nicht, ja, Proggas, Proggas.xyz zum Beispiel.
Ist, guck mal, Leute, der Scheiß kostet nichts.
Der kostet nichts.
Ich bin, ich bin sogar geneigt, fast geneigt, es mir zu kaufen, äh.
Proggas.xyz.
Ähm.
So, und das Schöne bei dem Anbieter ist, der nimmt es überhaupt nicht ernst mit, was man da für Daten eingibt.
Also zum Beispiel, ne, wir tun jetzt mal so, als wollen wir das kaufen.
Wir machen das gleich über einen kostenlosen Dienst.
Also, ähm.
Ich.
Also, man kann hier wirklich, du kannst, du darfst hier wirklich, äh, okay, man muss einen Account erstellen, ja, dann nicht.
Aber, weil du kannst den größten Bullshit eingeben bei dem Anbieter.
Und die akzeptieren das, solange du, bezahlst du doch mit Paypal oder so, ähm, ja.
Und dann hast du eine Domain mit, ich brauch, ich brauch die Domain nicht.
TK, Scootlife.
Ich hab, äh, schon alles mögliche, was ich so brauche.
Wenn, wenn die von euch, äh.
Wenn ihr die nicht mehr kauft, könnt ihr sie mir dann geben.
Weil es hat jetzt keinen Sinn, die im Stream zu kaufen.
Ähm, da müsst ihr jetzt Paypal und Gedöns eingeben.
Das ist, aber die Idee ist, das ist nice.
Ja, so.
Also, mal angenommen, man möchte ein gültiges Zertifikat, eine gültige Domain haben, ohne sich eine Domain zu kaufen.
So, einfach so zu Testzwecken.
Weil ich meine, selbst für Testzwecke, ich meine, du kannst zwar immer mal zwei Dollar ausgeben, aber da hast du eine Domain an der Backe und so willst du nicht.
Ich finde, der beste DNS-Dienst, so für dünne DNS-Geschichten ist, äh.
Ähm, der hier.
Duck, Duck-DNS.
Nennen die sich.
Ähm, das muss ich von Windows aus machen, weil ich da mit GitHub eingeloggt bin.
Man kann sich einloggen mit einem GitHub-Account, was doppelt praktisch ist.
Oh, ich bin nicht eingeloggt mit GitHub.
Okay, da muss ich erstmal nachgucken, äh.
Ja, ich logge mich mal bei GitHub ein.
Ich muss jetzt erstmal gucken, wie mein Passwort ist.
Das muss ich aber auf dem zweiten Bildschirm machen.
Passwort Store.
Ähm, GitHub.
Sehr schön.
Sign in.
Oh, ich mach mal sicher, ich mach mal sicher, ah, hab ich's gespeichert?
Ne.
Ich mach mal sicher, ich zahl mal den Bildschirm kurz aus, falls ich mich irgendwie vertippe mit dem Passwort oder so.
Man weiß ja nie.
Okay, ich bin eingeloggt, ich mach wieder an.
Jetzt irgendeine Scheiße in die Zwischenablage.
So, ihr sollt wieder was sehen.
So, ähm.
Genau.
So, und ich finde, die beste Variante, wie man das machen kann, ist mit Duck-DNS.
Denn.
Das Ganze, wie gesagt, machen wir mit Let's Encrypt.
Aber.
Also, das Ziel ist.
Wollen wir mal, vielleicht nochmal erzählen.
Das Ziel ist, dass ich auf meinem Raspberry Pi, wo der ganze Krams dann drauf kommt, im Endeffekt.
Machen wir hier mal den Krempel zu.
Ähm.
Oh, ich hab, ich hab Root-Login eingeschaltet.
Mensch.
So.
Also, ich möchte auf diesem Raspberry Pi ein gültiges SSL-Zertifikat haben.
Ähm.
Welchen Passwort verwende ich auf, wenn ich so, ich hab seit Jahren, hab ich KeyPass, KeyPass 2.
Das gibt's für jedes Betriebssystem, kann eigentlich alles, was man braucht.
Das, vor allem ich seit Jahren schon, fahre ich auch ganz gut damit.
So, wir machen jetzt mal ein Neues da.
Hier, ZERZ.
Neues Ord, neuen Ordner.
Okay.
So.
Und nun, wie gesagt, wir brauchen eine Domain.
Jetzt können wir uns nämlich mit GitHub hier sign innen.
So.
Ähm.
Das war's.
Du loggst dich bei DuckDNS, loggst du dich ein, mit, mit deinem, mit deinen GitHub-Credentials.
Das ist super easy.
Und dann machst du dir eine Domain, 0.3.d, 0.3.d.
Punkt, äh, oh nein, externe IP geleakt.
Fuck.
Ähm.
Egal.
Also.
Haha.
Äh.
Da machen sie immer eine Panik, alle.
So nach dem Motto, Wunder, was jetzt da Schlimmes, äh, Schlimmes passieren wird, wenn du deine externe IP leakst, äh.
Naja.
Ähm.
Äh.
Äh.
Das ist das Ärgste, das ist doch nichts Schlimmes.
Ja.
Ähm.
So.
Jetzt haben wir eine Domain, 0.3.d, Punkt, DuckDNS.
Und jetzt, als nächstes, und jetzt kommt Trick 17.
Die meisten Leute denken, dass man für, dass man für Zertifikate, einen Webserver braucht, hinter dieser Domain.
Und das ist nicht so.
Weil, ähm, Let's Encrypt stellt ja auch Zertifikate aus, wenn du einfach nur über diese
Domain verfügst.
Das reicht voll und ganz aus.
Das ist aber ein bisschen trickreicher.
Und zwar, als erstes, muss man mal Zertbot installieren.
Das ist ein Skript für, für Let's Encrypt, das ist relativ simpel.
So.
Installieren wir erst mal einen Raspberry Zertbot.
Das kann jetzt ein bisschen dauern.
Warum ist denn da Datei kaputt beim...
The fuck?
Warum gehen Dateien beim Download bitteschön kaputt?
Machen wir nochmal.
Der Ping des Todes ist schon am Laufen.
Ich kann nichts mehr downloaden.
Ich kann nichts mehr downloaden.
Okay, jetzt hat es funktioniert.
Ja, ja, wir können aber eine Sache machen.
Guck mal, wenn ich, ähm...
Was war meine externe IP hier?
Das kann man, kann man jetzt zum Beispiel, ich zeige euch das mal.
Kann, wenn man gucken will, was ich für Ports offen habe.
Kann mit Nmap gucken und stellt fest, ich habe nichts auf.
Sauerei.
Und ich antworte nicht mal auf Pings.
OMG.
Da wird es schwierig mit was, Hexorn würde ich sagen.
So, jetzt installiert das Ding erstmal Zertbot vor sich hin.
Ich antworte nicht auf Pings, weil du mich gedenost hast, genau.
Das, das ist es, ja, ja, stimmt.
Aber der Stream läuft noch, easy, kein Problem.
Aber die Pings sind ja auch nur eingehend.
Deswegen ist ja kein Wunder, dass mein ausgehender Stream noch funktioniert, ne?
Ist ja eigentlich logisch.
Das ist also Big Brain.
So, jetzt habe ich irgendwann Zertbot installiert.
Raspberry, das ist, das ist ein Raspberry Pi Zero.
Also, das Ding ist wirklich lahm.
Mit einer wahnsinnigen Anzahl von einer CPU und einem CPU Kern.
Guck.
Bam.
Eins.
Eine CPU.
Übrigens, unter Linux kann man relativ einfach nachgucken, was man für eine CPU hat.
So.
Da sieht man, was da drin ist.
Und da ist was wirklich Langsames drin.
Da ist ein AMV6 drin.
Mit, äh, der Takt steht gar nicht dabei.
Weiß ich jetzt aus dem Kopf nicht, wie man, Features Java.
Äh.
Äh.
Ähm.
Weiß gar nicht, wie man den CPU-Takt ausschließt.
Das geht bestimmt mit irgendwie einem Raspberry-Kommando.
Irgendwie VC, äh.
Siehste?
Ja, so geht das.
Stack Overflow beste.
1000 Megahertz.
Ach nee, hier.
Ach, guck mal hier.
Der Nulenhard hat's ja wieder am Start.
Der weiß, wie's geht.
Frequency 700 Megahertz.
700 Megahertz.
Also, das Ding ist, ist.
Ich mein, dafür ist es relativ schnell, ne?
Aber es ist, insgesamt ist es wirklich massive.
Huge, huge slow ist das Ding.
So.
Ähm.
Jetzt haben wir den, jetzt haben wir den Third-Bot installiert.
Und jetzt wird's ein bisschen kompliziert.
Denn normalerweise ist Let's Encrypt folgendermaßen gedacht.
Also, mal so zur Erklärung für alle, die das nicht kennen.
Also, ich hab hier, ich hab hier, ich hab hier, ich hab hier, ich hab hier, ich hab hier,
ich hab hier, ich hab hier, ich hab hier, ich hab hier, ich hab hier, ich hab hier, ich hab hier,
Hier, gemeint!
Ähm.
Jetzt haben wir den, jetzt haben wir den Third-Bot installiert.
Und jetzt wird's ein bisschen kompliziert.
Denn normalerweise ist Let's Encrypt folgendermaßen gedacht.
Also, mal so zur Erklärung für alle, die das, die noch gar nichts da bisher damit
zu tun haben.
Ähm, ich meinte, ihr wahrt ja schon mal auf, auf irgendner Webseite da drauf.
Guss' ich mal aus, so breeze, auf Twitch zum Beispiel grade und ihr seht ja, das Ding geht
über HTTPS.
Das Ding geht beziehungsweise geht über SSL.
Und was dann funktioniert, braucht, muss auf dem Server noch ein Zertifikat liegen.
Und da gibt's zwei Bestand.
zwei Möglichkeiten. Entweder man stellt sich einfach
selbst ein Zertifikat aus,
dann kann man zwar
SSL machen, aber jeder
Browser wird dir sagen, Achtung, also
zum Beispiel, wenn ich jetzt auf meine
Frontend
von der Firewall gehen will, dann kriege ich so was.
Bam. Your connection is not private.
Weil das Zertifikat nicht stimmt.
Wenn ich mit einem Browser
auf irgendeine Seite drauf will und das hier vorne
so das Häkchen kommt, alles gut, dann brauche ich nicht einfach
nur einen Webserver mit Zertifikat, sondern
ich brauche ein gültiges Zertifikat.
Und ein gültiges Zertifikat kriege ich nur,
wenn es eine Zertifizierungsstelle ausgestellt
hat, der meinen Browser
vertraut. Glücklicherweise
vertrauen alle großen Browser Let's
Encrypt. Und
jetzt stelle ich mir für meine hier
angelegte
0.3D-Domain
erstelle ich mir jetzt ein Zertifikat.
Und
normalerweise ist es so gedacht, dass man
hier dahinter
einen Webserver laufen hat,
wo dann
Let's Encrypt die Zertifikate quasi
hinlegt, also man legt dort selbst, legt man
eine Textdatei hin mit einem Passwort
und Let's Encrypt schiebt dann da das
passende Zertifikat hin, weil
dadurch hat man quasi bewiesen, dass
einem die Domain gehört. Das Problem ist, wir haben
keinen Webserver dahinter stehen.
Let's Encrypt unterstützt aber noch ein anderes
Verfahren und zwar ist das
DNS-Challenge, nennt sich das.
Da muss ich
bei meinem DNS-Anbieter ein geheimes
Passwort hinterlegen.
Das machen wir jetzt hier alles live und stream, also so, dass wir hier
soweit zu geheim, muss ich ein Passwort
hinterlegen,
wo dann Let's Encrypt auch daran erkennt,
dadurch, dass der Eintrag da ist, dass mir diese
Domain gehört. So, und
um das zu machen, muss ich mal suchen,
Zertboard DNS Challenge.
Aus dem Kopf weiß ich nämlich nicht.
Da, siehste, hatte ich schon mal auf.
Manual Plugin. Genau, so
funktioniert der Kram.
Man muss dem
sagen, hier Zertboard,
mach mir bitte, also Let's Encrypt, mach mir bitte
ein Zertifikat für 0, 3D,
0,3D.DuckDNS.org
Prefer Challenge
DNS Zert Only
wollen wir haben.
Dann führe ich das Ganze aus und dann
sagt mir Zertboard irgendwann sowas wie
irgendwann
E-Mail-Adresse.
Ich will keine E-Mail-Adresse. Geh weg.
Ja genau, das muss man doch hinten dranhängen.
Ich will das ohne E-Mail registrieren. Das ist eh nur
ein Testzertifikat. Und jetzt
Zertboard geht jetzt zu Let's Encrypt und sagt
stell doch mal ein Zertifikat für
0,3D.DuckDNS.org
aus.
Und jetzt muss ich Let's Encrypt beweisen,
dass ich der
rechtmäßige Besitzer, also ne, was ist der
rechtmäßige? Nicht, dass ich der Besitzer
dieser Domain bin.
Ja, wir stimmen zu.
Meine IP darf auch
gelockt werden. Alles gut. So, und jetzt
brauche ich, das ist das geheime,
super geheime
Passwort von, oh fuck.
Jetzt habe ich es ausgeführt,
was ja noch gar nicht geht.
Gut, dann muss ich noch,
noch mal ausführen.
Das ist das super special geheime Passwort.
Was ich hinterlegen
muss bei DuckDNS,
dass ich
der Owner dieser Domain
bin. Wie lang das dauert,
also ich weiß nicht, ob du dir,
erstmal ist es so langsam, weil es
auf dem Raspberry läuft.
Das ist ein Zero, das heißt jetzt wirklich lahm.
Sondern, wenn du dir
früher ein Zertifikat bestellt hast, über so eine
Zertifizierungsstelle, das hat schon eine ganze Ecke
länger gedauert.
So, und jetzt muss ich
dieses, diesen,
dieses Geschwurbel hier,
muss ich einen Texteintrag erzeugen
auf, ähm,
oh, die Musik
ist vorbei, kann das sein?
Warum ist die Musik vorbei?
Was machen wir denn jetzt an?
Haben wir...
Das einzige, was ich mir von Overwatch gemacht habe,
gemerkt habe, irgendwie,
eine Christmas-Song. So, ähm,
kommen wir mal zum Thema zurück.
Jetzt muss ich als
Text-Record, Text-DNS-Record,
diesen Krempel hier auf, äh,
Duck-DNS
hinterlegen.
So, und wie es da Zufall so will, habe ich das vorher
schon mal ausprobiert, deswegen
kann ich
das einfach copy-pasten,
gucken, ob mein Tonkenloch stimmt.
Bam. So, jetzt ist das
hinterlegt, jetzt kann ich das abfragen,
und siehe da,
es ist hinterlegt, und wenn ich jetzt Enter drücke,
jetzt kann Let's Encrypt verifizieren,
dass ich der echte
Besitzer
dieser Domain bin.
So funktioniert das.
Und jetzt haben wir ein gültiges Zertifikat,
wo auch immer der die hingelegt hat,
da,
und jetzt haben wir ein gültiges Zertifikat
für die Domain,
was natürlich sehr nice ist,
und jetzt können wir die Domain wieder löschen,
wenn ich eingeloggt bin.
Jetzt können wir die Domain wieder löschen.
So, weil
wir haben nur ein gültiges Zertifikat gebraucht,
sonst nix. Wir brauchen die externe
Domain ja gar nicht.
So, und jetzt muss ich euch nochmal kurz ausmachen,
nochmal schnell was einstellen.
So, da sind wir wieder.
So, und jetzt haben wir ein gültiges
Zertifikat für die Domain,
ähm,
lul3d.dacdns.org
lul3d.dacdns.org
Und das Zertifikat
liegt hier drinnen rum.
Jetzt natürlich die große Preisfrage,
wie kriege ich denn für
meinen Raspberry, also sprich für ihn
hier,
der nur die Default
ähm, Nginx Seite drauf hat,
wie
kriege ich denn da jetzt irgendwie
das Zertifikat hin, und
vor allem, wie kann ich meinen Raspberry
dazu machen, dass der denkt,
er ist, beziehungsweise nicht er, sondern
dass alle anderen Rechner denken,
er ist lul3d.dacdns.org
Das ist relativ einfach,
ich bieg einfach meinen lokalen DNS um.
Ich bieg meinen lokalen DNS um,
das mache ich jetzt mal auf dem zweiten Bildschirm,
weil da muss ich meinen Router
rumfuddeln und ich weiß nicht, ob man da irgendwas sieht,
was ich nicht will, dass man das sieht.
Das heißt, ich bieg jetzt meinen lokalen DNS
um,
dass ähm,
wo ist es hier,
services, dns,
settings,
newdomain,
lul3d,
domain, dacdns.org
Also guck, ich zeige mal ping,
lul3d.dacdns.org
Achso ja, gut, geht nicht,
not found, weil wir haben die Domain ja wieder gelöscht.
Ähm, jetzt werde ich
das aber umstellen,
dass mein
DNS das auflösen kann, und wenn ich das jetzt
pinge, dann ist
auf einmal lul3d.dacdns.org
mein Raspberry Pi.
Und jetzt, alles was diese Domain
verwendet, und das ist massive, massive
poggers eigentlich, hat jetzt ein
gültiges Zertifikat.
Das ist, das ist wirklich ultra nice.
Jetzt haben wir nämlich zum testen ein gültiges Zertifikat am Start,
was einfach da ist.
Und das ist cool.
Sehr praktisch, sehr sehr praktisch.
Ich muss jetzt nur mal gucken, welche Keys
wir für was brauchen.
Äh, warte mal, es gab ein paar Fragen
im Chat.
Ähm, was ist das für ein Pi, das habe ich schon
beantwortet.
Mein Pi Zero hat schon Probleme mit P-Hold
und nutzt du P-Hold?
Habe ich mal verwendet, das Problem ist, dass viele
Seiten hängen dabei, wenn du manche Sachen
nicht auflösen kannst.
Der Unterschied zwischen einem Adblocker und
P-Hold ist, dass P-Hold quasi
die ganzen Werbeverteil-
Seiten
quasi DNS-technisch rausfiltern,
dass man die erst gar nicht auflösen kann.
Und ein Adblocker entfernt
den Kram halt aus dem Content.
Das heißt, die Seiten funktionieren auch weiterhin
und über P-Hold hängen viele Seiten und
verhalten sich viele Seiten merkwürdig.
Das heißt, an sich ist eigentlich P-Hold, finde ich
persönlich, äh,
wirklicher Crap.
Also nicht von der
Qualität des Projektes her, sondern
von dem, wie es sich auswirkt.
Das ist nicht mehr so.
Das Zertifikat lässt sich jetzt nicht mehr verlängern.
Nein, das Zertifikat lässt sich nicht verlängern.
Ähm, das Zertifikat, na doch,
doch, ich müsste einfach eine Domain
wieder anlegen und mir ein neues Zertifikat abrufen
dafür, das ist kein Problem.
Aber das Zertifikat hält drei Monate, also für
unseren Test würde ich sagen,
ausreichend.
So, und jetzt muss ich meine Web-Server, ich habe hier
nichts drauf, noch sagen,
ähm,
welche Zertifikate er verwenden soll.
Und ich bin mir ehrlich gesagt
nicht ganz sicher, welche
Sachen ich dafür brauche.
Also ich brauche schon mal
auf jeden Fall Keys, das wird wahrscheinlich
mein Private sein, oder?
Steht das da hier
irgendwo?
Congratulations, your certificate and chain has been
saved. Your cert will expire,
hier steht ja auch immer, es läuft aus, am 23.03.
Okay, ich muss jetzt mal gucken,
welches der Keys
ich jetzt im Web-Server
hinzufügen muss. Müssen wir mal kurz ausprobieren,
weiß ich aus dem Kopf nicht. Also, gehen wir mal in
meine Nginx-Config rein.
Sites, Enabled, Default.
So, und da
aktivieren wir jetzt mal
mein, äh,
Duster.
Hier. Search.
Warum Nginx?
Weil ich mit dem am besten zurecht komme.
Da habe ich auch ein paar von
laufen.
Äh, ja. Und,
und wie schon einer gesagt hat, auch als Reverse-Proxy.
Aber ich kann mir
die Config immer nicht genau merken.
Hier, genau, so ist es.
So, und wenn wir das eingefügt haben,
dann sollten wir, wenn wir mit dem Browser
draufgehen, aktuell ist es so,
wenn ich, ne, wir machen jetzt mal zwei Sachen.
Wir machen das, dass man sieht, dass es auch funktioniert.
Ich kommentiere den ganzen Knip, den aus
und mach mal, kommentiere mal ein Self-Sign-Zertifikat
ein und mach SSL auf
Nginx an.
So, äh, System,
WTL Restart Nginx.
Da verschreibe ich mich jedes.
Wo ist denn jetzt das Problem?
Ah, okay, die Zertifikate
gibt es nicht. Ja,
dann nicht. Gut, dann kann ich euch nicht zeigen, dass es nicht
funktioniert, aber
dann, dann nicht. Dann machen wir gleich
die richtigen Zertifikate hin.
Ich hau immer auf die Enter-Taste.
Es geht gar nicht anders.
So, wir haben SSL angeschaltet, wir wollen
Zertifikate verwenden und zwar wollen
wir einmal, ich muss jetzt erstmal gucken,
was was ist.
Also ich vermute mal, dass
das hier mein Private ist.
Moment.
WimRC
WimRC
Set
Nein, nein.
Set Maus.
Jetzt krieg ich Zustelle, wenn Maus-Modus im Wim
an ist. Kannste komplett knicken.
So.
Ähm.
SSL
Was mach ich denn da?
So, komplett.
Hier sitzt der Kack-Noob.
Ich bin mir jetzt nicht sicher, welches Zertifikat wohin muss.
So, ähm.
Probieren wir mal das da.
An der Stelle.
Und wo haben wir dann sonst noch welche?
Weiß das jemand zufällig,
welche Keys für was, wo man die hin...
Sonst muss ich, muss ich jetzt halt mal nachgucken. Live.
Ne.
Private Key, Private Key. Ah ja. Ne.
Ähm.
Zert 1.
Das brauchen wir wahrscheinlich.
Vermut ich mal.
Ich vermute mal,
dass wir das Zert brauchen.
Für, für die Seite und das
Private Key für, für den Server.
Denk ich schon mal.
Ne, umgedreht.
So rum?
So rum oder andersrum? Eins von beiden.
Wie ist dat?
Bam. Hat funktioniert.
So, und jetzt gehen wir mal auf lul3d.
duckdns.org
Und wir sehen, äh, na Moment.
https.
Und wir sehen, die Seite ist
gültig verschlüsselt mit
Let's Encrypt.
So, und das ist praktisch. Das heißt, jetzt
ist sogar mein iPhone der Meinung,
ich darf.
Hier ist es.
Weil sonst darf ich auf dem iPhone nicht.
Weil.
Es ist ja im Prinzip, ist ja auch
okay. Also ich, ich verstehe
das aus Applesicht schon, dass man
sagt, wo Audio- und Videodaten
abgegriffen werden möchte man auch,
dass das, dass das ein gültiges SSL
Zertifikat hat.
Läuft das Inhouse oder auf
einem V, äh, was?
Das hier? Das ist ein Raspberry,
da steht, da steht hier, liegt,
hängt an einem Kabel die Wand runter
bei mir gerade hier.
In der Ecke.
Wir haben bloß den DNS umgebogen.
So, und nun zeige ich euch
nochmal richtig was geiles.
Und zwar, äh, wir machen uns
mal einen Ordner im Heimatverzeichnis.
Nennen wir mal Pi.
Pi. Und nun ist es ja
so, wir müssen unsere
Anwendung irgendwie
da drinne platzieren.
Also sprich,
das Ding hier.
Das Ding hier. Na, diese,
diese drei
Sachen.
Die müssen wir jetzt in unserer, die müssen wir
jetzt da im, auf dem Server platzieren.
Die Sache ist bloß die. Ich will jetzt
da die Dinger nicht auf dem Server selbst, ähm,
ja klar geht das bei dir nicht, die
Zeit.
So, natürlich will ich jetzt nicht auf dem
Raspberry selbst hier irgendwie HTML
mit nem, da rum
fuddeln. Und da gibt's was ganz Tolles,
das nennt sich SSHFS. Wo wir wieder
beim Thema sind, dass, wenn es
ums, ähm,
entwickeln gehen und, äh, entwickeln
geht, Debuggen und Netzwerkgeschichten,
ist ne, Deluxe einfach
unschlagbar. Und, äh,
man kann zwar vieles auf dem Mac auch nachinstallieren,
aber das sind viele Sachen, die mitkommen halt, ziemlich
alt. Guckt mal an, wie alt die Bash-Version
ist beispielsweise, die bei Mac mitkommt.
So, und jetzt kann man sagen,
also hier, das ist hier mein lokales, mein
lokales Linux, ne, da ist dieses, äh,
unsere tolle, unsere tolle DrawIO-Geschichte
von der App. Und,
ja, ich kann jetzt sagen,
SSHFS,
und ich möchte quasi
meinen Raspberry Pi
lokal bei mir,
das, also die, das war wie, wie HTML
Verzeichnis, von
deinem, ähm,
Raspberry Pi will ich
lokal bei mir auf der Linux-Kiste
verfügbar machen, dass ich da editieren kann.
Und da kannst du nämlich einfach sagen,
SSHFS, nimmst du die, die, die
Uhr von deinem, also die
Adresse von deinem, äh,
Remote, von deiner Remote
Kiste, das geht auch mit nem Server, der in Afrika
steht, habt dort das SSH-Zugang
drauf, war
www.html und das
mounten wir nach Pi.
Passwort eingeben, zack. So.
Und jetzt bin ich lokal in meinem Verzeichnis
drin, und ich zeig's euch
mal, ja, hier,
welcome to Nginx, und ich schreib jetzt da einfach
mal rein, ähm,
welcome to Nginx mit zwei Ausrufezeichen.
Gespeichert, reload,
zack. Wir haben jetzt lokal
editiert,
und es ist direkt auf den Server gesynct.
Was natürlich beim entwickeln super praktisch ist.
Ja, so ist das, ne?
Das ist doch, das ist doch sehr nice.
Also, was heißt gesynct? Da hat's das Filesystem
unten drunter eingehängt. Ein bisschen wie
OneDrive, ja, nur dass es halt, äh, nicht
über die Cloud geht, sondern direkt auf meinen
Raspberry drauf.
So.
Und jetzt ist wieder nur noch einer da.
Gut,
jetzt gehen wir hier mal rein.
Ich muss euch noch mal kurz ausmachen.
Ups.
Ich muss euch noch mal kurz ausmachen.
Weil ich schon mal was nachgucken muss.
Oh, die Overwatch-Musik
ist fertig. Äh, was
wollte ich nachgucken? Genau.
Ja. Okay, alles gut.
Kann ich wieder anmachen.
So, und jetzt machen wir
hier drinnen Visual Studio Code auf.
Jetzt halt hier auf meiner Linux-Kiste.
Ja, ja, bla bla.
Schieben wir auf Desktop 3. Und jetzt können wir
hier drinnen wunderbar entwickeln.
Ähm, und es
synct sich direkt,
direkt auf den,
das ist halt sehr nice, ne?
Guckt, wenn ich jetzt hier irgendwas mache,
so bla bla bla, speichern,
reload, zack, ist es auf dem Raspberry.
Also, die Seite läuft auf dem
Webserver von meinem Raspberry und wir editieren
hier lokal unter Linux.
Das ist, das ist schon echt sehr nice.
Ich muss mal meine Visual Studio-Config
kurz rüberkopieren auf, ähm,
wo hat man das, wo
konnte man das Zeug hier sehen? Help?
Nee.
Config?
Config? Nee.
Äh. User?
Con? Ja.
Nee.
Warte mal, ich bin
verwirrt.
Wo, wo, wie ging hier nochmal das Zeug auf?
Wie kann man jetzt hier nochmal in die Settings rein?
Da bin ich blöder.
War das nicht?
Settings?
Ah, Open User Settings.
Ist das jetzt
neu? Ist das jetzt
neu? Was, was ist
die Wolke? Welche Wolke?
Wat? War das,
haben die das jetzt neu gemacht?
Wie man irgendwie Visual Studio
Settings macht?
Das war doch sonst immer ein einfacher,
stinknormales Text-File,
oder? Ja?
Ist das jetzt, ist das neu?
Das sah doch nie so aus.
Ach, hier kann man es mir noch direkt öffnen. Okay.
Ah ja.
Okay. Naja. Öffnet
das mal was Neues.
User Settings. Mal kopieren den Kram.
Ja, den Kram
kann man immer noch reinkopieren.
Sehr schön. Ja, nice.
Jetzt haben wir nämlich
gleiche Schrift und alles mögliche.
Machen wir mal, machen wir mal das
Browserfenster rechts.
Einstellen. Zack.
Konsole.
Ah, Moment. Hatte ich nicht gesagt, unter
Firefox ist es verbuggt?
Na, werden wir gleich,
werden wir gleich sehen.
So, okay. Jetzt legen wir mal hier unsere Seiten an.
Und zwar
brauchen wir unsere
unsere
index
index.html
dann brauchen wir unsere
ja, dann brauchen wir
das copy, copy, pasten wir uns jetzt gleich
einfach alles rüber. Dann brauchen
wir unsere
styles.css
und dann brauchen wir unsere
main.js
So, und das kopieren
wir uns jetzt alles mal hier von dem anderen Krempel rüber.
styles
zack
save main
zack save
index
zack save
Da sind wir.
Gut.
Auto
refresh addon
Problem ist,
ich habe ja normalerweise
den
diesen Live Server hier.
Das Problem ist, wir können das jetzt, also wir können
das nicht proxien. Wir müssen über diese Seite
gehen. Also, wir bräuchten irgendwas anderes.
Gibt's da irgendwas schönes?
Gibt's da irgendwie so, gibt's da irgendwie Live Reload Plugin
oder sowas?
Was halt nicht die Seite proxien muss.
Suchen wir mal.
Live Reload, Live Reload Plugin
für Visual Studio, Dev Server.
Oder hast du, äh,
Knäherbär, hast du irgendwie eine Empfehlung?
Das hier klingt eigentlich ganz, ganz
sinnig, ne?
Was ist mein Programmierziel?
Äh, App für
Android und IOS.
Da im Prinzip, nein, eigentlich im Prinzip eine Web App
für alle Plattformen, wo ich meine
Billig-China-Tür-Gegensprechanlage
mit bedienen kann.
Das auch prinzipiell schon funktioniert.
So.
Ähm.
Weiter im Text.
Wir, ja, da installieren wir uns mal. Was installieren wir uns für?
Ja, installieren wir uns mal dieses
Live Reload Ding hier. Mal schauen. Vielleicht, vielleicht
bringt das ja was.
Dann können wir nämlich tippen und, ähm,
Usage.
Das da muss
in die Seite rein.
Oder geht das auch so?
Ne.
Dann muss man jetzt erstmal reloaden.
Man muss reloaden.
Enable Live Reload.
Und jetzt?
Wie hat das jetzt funktioniert?
Man sollte
den Kram in die Seite pasten.
Und jetzt geht das?
Ne.
Also.
Das ist eine komische Extension. Die tut es irgendwie
nicht.
Was hat der für Schmerzen?
Character encoding of HTML document was not declared.
Da meckert aber auch noch
Firefox drüber gerade.
Nö, das Live Reloaden funktioniert
nicht.
Das hier haben wir schon eingefügt. Ja.
Ich mein, es wäre schon nice, ne.
Es wäre schon nice. Kommentieren wir mal alles aus,
was es kaputt machen könnte.
Blocked. Loading. Mixed. Active Content.
Bam.
Warum?
Weil die Seite HTTPS ist wahrscheinlich.
Tja.
Ich fürchte, wir haben
schlechte Karten.
Aber kann das vielleicht HTTPS?
Hm.
Ok, Leute. Keine Ahnung,
wie man das jetzt einfügt.
Metacharset
in den Kopf. Jawoll.
Ich wusste doch, wir haben hier die
HTML Pros am Start.
So ist das nice.
Ah.
Learn more.
Learnen wir mal more.
Blablabla.
An HTTPS-Page include
Mixed Content Page.
Pages like this are only
Ok, das heißt, man darf nicht.
Kann man da
irgendwas dagegen machen? Weil so ein bisschen
Active Reload wäre schon
recht
nice.
Kann man das vielleicht in Firefox deaktivieren
oder so?
Wie repariert? Gar nicht.
Ich vermute mal, da kann man
Ich vermute jetzt einfach mal, man kann da
nichts dagegen machen. Das wird wahrscheinlich einfach
Vorgabe sein von Firefox,
dass es nicht geht.
Tja, wir können mal Chrome
probieren.
Machen wir mal einen neuen
Chrome Tap
auf.
Aber da hat es wahrscheinlich gleich einen Schmerz.
Ja, nee, darfst du nicht.
Ja, das geht nicht.
Darf er nicht.
Ja gut, da können wir da wahrscheinlich jetzt nichts
machen dran.
Vielleicht hat ja einer von euch eine glorreiche
Idee,
wie man Live Reloading jetzt auf die
Seite kriegen würde.
Node.js Liveserver. Das Problem
bei solchen Sachen wie der Liveserver ist,
ähm,
der proxied doch zwischenzeitlich
Dinger.
Das wird wahrscheinlich nicht funktionieren.
Ich muss, ich muss
auf jeden Fall
die Seite muss von diesem Host ausgeliefert
werden hier.
Das funktioniert sonst nicht ohne.
So, äh, Leute, ich muss mal kurz aufs Klo.
Ich bin gleich
Ich bin gleich wieder da.
So.
Ich bin wieder am Start.
So, was machen wir jetzt für Musik an?
So.
Wir machen jetzt wieder hier
ähm, machen wir hier
Bäm. Das wo wir
hatten wir gestern auch
Teil davon an. Jawoll.
Zwar nicht sonderlich
weihnachtlich, aber ist trotzdem
irgendwie ganz gut.
So, ähm, okay.
Wo genau sind wir stehen geblieben?
So. Ah ja, genau.
Ich wollte das Active Reloading irgendwie.
Und ich hab da kurz mal auf dem Klo nachgeguckt
auf dem Handy. Angeblich kann man im Firefox
sagen, dass man
Ah nee, ich muss noch Mixed
rüber einfügen. So. Angeblich kann man
Firefox sagen, dass man Mixed
Content zulassen möchte.
Die Frage ist jetzt
nur, wo?
Irgendwo geht das angeblich.
Ähm,
Filson
Wisk, warum sollte ich ne
Javascript Konsole einbinden?
Also was hab ich da jetzt davon?
Oder was meinste?
Achso, nee, nee, ich glaub, der meckert
über mein, ähm,
mein Active Reload Zeug. Man konnte,
also angeblich kann man Firefox
sagen. Firefox
Allow Mixed Content.
Hab ich extra nachgeguckt, gerade da steht
On top of the page, left of the address bar,
click the shield icon.
Ah!
Hier, oder?
Ah! Meine Güte.
Das war aber kompliziert.
So, okay.
Äh, und jetzt müssen wir den Grab
aktivieren. Live Reload.
Enable.
Geht immer durch.
Loading failed.
Achso, naaah.
Der will jetzt ja auch auf
diesen komischen Server sich connecten. Das ist ja fail.
Du musst ja auch auf, ähm,
du musst ja auch
connecten auf
localhost
dahin.
Stimmt das jetzt?
Was hat der jetzt für Schmerzen?
The fuck?
Connection not secure.
Jaja.
Hahaha.
Okay, die machen einem echt das Leben schwer, ey.
Ich will jetzt damit aber eigentlich auch nicht,
weil eigentlich ist das ja nicht unser Ziel, dass da...
Warte mal.
Warum machen die das eigentlich so kompliziert?
Warum kann die sich einfach inzwischen zwei
Script Tags hauen?
So, einfach.
Ah, Moment. Nicht
zwischen zwei, sondern Source.
The operation is insecure.
Huh.
Tja. Da haben wir da wohl
keine Chance mit das Ding. Und da...
Und da Firefox zum Laufen zu bringen.
Pech gehabt, würde ich sagen.
Was das Ziel ist,
dass ich meine Billig-China-Gegensprechanlage
inklusive
Audio und, äh,
Video und Sprache
von iPhone, iPad,
Android-Tablet aus
ansteuern kann. Und das funktioniert ja prinzipiell
auch schon. Jetzt machen wir grad die
Mobile, ich nenn's mal App,
draus. Die aus einem Video-Fenster
besteht und einem Knopf für Mute-Unmute.
Mehr wird die nicht kriegen, ja.
Das komplizierte war das
Reverse rauszukriegen,
wie
man die Kamera ansteuern muss.
Reference Error.
Not found. Achso, ja.
Ja klar, not found.
Weil er sich das von
dem Server ziehen muss.
Ach, Moment.
Ich hab den Meta-Tag wieder gelöscht.
Die JavaScript-Konsole brauchen wir jetzt
erstmal nicht hier.
Ähm, Meta...
Wie ging das?
Charset, UTF-8.
Das Klicken.
Okay, gut.
Ähm, warum ist das Skript nicht
da? Weihnachtsbaum schmücken
und dabei Brokkast streamen. So muss das
sein. Ähm, warum
ist das nicht da? Ah, weil ich's gelöscht
habe. Ganz furchtbar
clever, Max, das zu löschen an der Stelle.
Ähm, da müssen wir's wieder hin
kopieren. Opt,
äh, äh,
share
demos
äh
js, da ist es.
Und das kopieren wir wieder hin.
Okay, sehr schön, wir nähern uns
der Sache. Wie gesagt, die App funktioniert.
Ähm, wir haben's jetzt ja nur auf
einen neuen Host geschoben.
Wo merkt ihr denn jetzt, Server
läuft nicht? Ja, ich weiß, äh,
achso, blockt.
Genau.
Ähm, Server ist jetzt HTTPS.
Ja, HTTPS,
ähm,
kann man?
Ob man da sowas machen darf?
Dass man einfach sagt,
gehe auf den, auf den gleichen,
auf den gleichen Server?
Was sagt der denn? Warum denn failed?
Okay.
Ja, wahrscheinlich geht das
nicht. Also muss ich jetzt
hier sagen, hä.
So.
So.
9 für HTTPS.
Ja, Server
down. Ja, klar, der Server ist down, der ist auch noch nicht an.
So, und jetzt mach ich den Server an
und dann sollte ich ein Kamerabild haben.
Ein relativ
latenzfreies Kamerabild
für WLAN-Verhältnisse.
Also so, so im Bereich von
sagen wir mal 200 Millisekunden
so bis maximal eine Sekunde.
Ähm, was muss ich jetzt machen?
Cross Arch & Request
blockt.
Das ist nicht
Cross Origin.
Vielleicht muss ich das, ich starte,
ich starte den Krempl jetzt erstmal.
Ah, Moment.
Ich muss dem, ich muss dem Ding ja auch noch die
Zertifikate geben. Ähm.
Ich muss dem Ding ja auch noch die Zertifikate geben.
Dass wir dann unsere
krasses WebRTC
Gedöns machen können.
Ähm.
Was viel komplizierter war, als
ich mir das im Ursprung nicht vorgestellt hab.
ETC
So.
Hier müssen wir die Zertifikate
die Zertifikate
reinhauen.
Da.
Das klauen wir uns aus unserer Nginx-Config.
Cert.
Da.
Komm her.
Cert.
Die Dinger sind immer so schlecht eingerückt.
So.
Wir brauchen jetzt
Key. Hm. Mal gucken, ob das,
warte mal, was ist jetzt was?
Das ist richtig rum, ne?
Cert. Key.
Und
Cert. PAM.
Brauchen wir.
Copy-Paste.
Und das Ganze
jetzt noch in
Transports.
HTTP.
Zertifikate.
Das müssen wir vielleicht
einschalten nachher hier.
Diese Course-Geschichte, dass wir
zugreifen dürfen auf die Domain.
So.
Mal gucken, ob's jetzt startet.
Äh, nein.
Dann starte ich's halt von
BIM
D7. Bam.
Was? Äh.
Moment, wo genau hast du jetzt Probleme?
Ach, ich hab was vergessen.
Ach, na.
Ja.
Siehste, manchmal ist,
manchmal ist gut, wenn noch mehr Leute draufgucken.
Weil sowas
kann man immer schnell übersehen.
Hab ich hier, hier hab ich's wahrscheinlich
schon auch vergessen, ne?
Hä?
Hab ich immer noch was vergessen?
Config-File-Line
69.
Äh, da?
Eher nicht. Muss das gequotet werden?
Nee, oder? Ah.
Es könnte sein, dass das gequotet werden muss.
Und da muss kein
Kansimikolon dahinter, oder?
Ja, sowas in der
Richtung. Jetzt aber.
Ich glaube, er möchte uns
mitteilen, dass er gestartet ist.
Wie sucht man bei BIM mit Slash oder mit
Fragezeichen? Slash suchst du vorwärts,
Fragezeichen suchst du rückwärts, mit N
suchst du den nächsten Vorkommen, mit N suchst du
das letzte Vorkommen. Also im Prinzip
in Fragezeichen ist
N von Slash.
Um dich jetzt zu verwirren.
Ah.
Es funktioniert.
Es funktioniert.
Progress.
Ich muss jetzt nur noch den Stream anwerfen.
Ich muss jetzt nur noch den Stream anwerfen.
Dazu beenden wir den ganzen
Kram nochmal. Machen einen T-Max auf.
Auf dem, auf dem
Raspberry.
Werfen den Kram
nochmal an. Machen noch ein zweites Fenster
auf.
Und jetzt habe ich vergessen, was ich machen
wollte.
Was? Was wollte ich denn machen? Ich wäre alt.
Omega 0.
So.
Achso, ich wollte es anwerfen.
FFmpeg.
Genau.
Vsync. Drop.
Blablabla. Von der Kamera
an
an
local host.
1004.
Und jetzt geht's
nicht. Ist das jetzt
dieser komische Firefox Bug, den ich gestern
auch schon hatte?
Ich will keinen Screenshot taken.
Alter, geh weg.
Das ist genau den komischen Bug, den ich gestern
schon mal in Firefox hatte.
Und ich weiß nicht,
woher der kommt.
Wobei, nee. Jetzt funktioniert's.
Aber warum? Wo ist der Stream?
Moment.
Wo ist denn der Stream? Warum wird der
jetzt nicht angezeigt?
Geht dann die Kamera?
Also, wie gesagt, das ging eben
noch. Aber das ist ja so famous last
words.
Ja, die Kamera geht an sich.
Wow.
Die Timestamps spacken ein bisschen rum.
Wo genau hat er jetzt
seine Schmerzen mit?
Ich guck jetzt mal vom iPhone
aus mal, ob's funktioniert.
Nee, funktioniert auch nicht.
Hä?
Ich hatte das aber doch vorhin laufen.
Warum geht denn das jetzt nicht?
Warum geht denn das
jetzt nicht?
Ich bin jetzt ein wenig verwirrt.
Wir kopieren mal die Testseite
von denen hin und gucken, ob da
der Stream funktioniert.
Wie ist denn die Config von dem Ding?
Plugin.
Plugin.
Streaming.
Ah, Moment. Moment.
Ich hab die Config
da gar... Alter.
Das Ding ist überhaupt
nicht eingerichtet. Warum streamt
denn FFmpeg dann?
Das kann doch überhaupt nirgendswohin streamen.
Ich hab mir doch...
Ich hab doch den Kram letzten 3 Stunden
vom Raspberry kompiliert. Das ist doch neu.
Mit Default-Configs noch.
Na gut, Raspberry streamt
einfach... der streamt einfach dahin.
Der interessiert sich ja nicht, ob ne Antwort kommt.
Dabei lauscht da gar nix. Guckt.
Da ist gar nix. Auf auf dem Port.
Das kann überhaupt nicht funktionieren.
Easy.
So.
Streaming. Wir kopieren uns jetzt die Config. Da.
Den kompletten Block.
Brauchen wir alles nochmal.
EasyClap. Richtig.
EasyClap.
TmaxMagic. Brauchen wir nicht.
Brauchen wir nicht. Brauchen wir nicht.
Brauchen wir nicht. Alles weg. Brauchen wir alles nicht.
Alles overrated.
Gebated.
Eigentlich hab ich gehofft,
der hat das jetzt kopiert.
Warum hast du das nicht kopiert?
Ah, weil ich hier keinen Clipboard-Zugang
vom WIMP hab.
Audio Falls. Blablabla.
H264. StreamID 10.
Ja.
Sieht doch schon besser aus.
Description.
Einfach nochmal Default.
Ok. Jetzt. Jetzt.
Jetzt funktioniert es wahrscheinlich auch.
Blitz. Funktionieren einfach.
Einfach funktionieren.
Oder auch nicht?
Ok. Let's start.
Lauscht. Port.
Ja. Gut.
Ok. Wenn der Localhost nicht mag. Warum auch immer.
Mag er vielleicht das?
Ha!
Das ist Schwachsinn, was da steht.
Die Bitrate.
Vollkommener Blödsinn.
Immer noch kein Bild.
Alter! Was ist das denn wieder für ein Scheiß?
Das ging doch vorhin.
Ah! Jetzt ist ein Bild da.
Kann das sein, dass die Kamera wieder spackt?
Oder so?
Jetzt ist ein Bild da. Nice.
Aber die Kamera aktualisiert nicht.
Also ok.
Wir wissen, dass das Frontend funktioniert.
Das Frontend funktioniert.
Aber irgendwie aktualisiert die Kamera
gerade nicht.
Warum nicht?
Und die ist ganz schön lahm.
Was ist denn da los?
Was ist denn mit der Kamera schon wieder los?
Das ist ein Kack-China-Ding.
Guck mal. Das hängt hier übelst.
Ist der Raspberry ausgelastet?
Was eigentlich nicht sein darf.
Wow!
Warum macht das FFmpeg so viel Last?
Moment.
Ich mach mal das Vsync aus.
Vsync ist immer schlecht.
Warum alles in der Welt macht das FFmpeg
auf einmal so viel Last?
Ah, jetzt macht es keine Last mehr.
Jetzt macht T-Max die meiste Last.
Aber es ist mega langsam.
Warum ist das so langsam?
Guck mal hier.
Das ist doch nicht normal.
Ich glaube, ich muss die Kamera mal wieder neu starten.
Was spackt der eigentlich da oben rum?
Ah, geh weg.
Was?
We don't have it.
Ja, das ist schön.
Ich glaube, die Kamera spackt wieder.
Ich glaube, die Kamera spackt wieder.
Ich glaube, die Kamera spackt wieder.
Die hat ja manchmal so ein paar Anfälle.
Ich hoffe, das macht sie nicht, wenn sie draußen hängt.
Ich hoffe, das macht sie nicht, wenn sie draußen hängt.
Ja, guck mal.
Die Kamera geht schon wieder nicht auf.
Selbst mit dem VLC nicht richtig.
Oh, ich hab nur Sound.
Ich hör mich doppelt.
So Leute, ich starte die Kamera nochmal neu.
Ich glaub, die Kamera ist wieder am spacken.
Ich glaub, die Kamera ist wieder am spacken.
Was ist das für eine Kamera?
Das ist eine China-Gegensprechanlage,
die ich für 85 Euro im Angebot gefunden habe.
die ich für 85 Euro im Angebot gefunden habe.
das Ding hier.
Deswegen müssen wir auch den Akt machen hier,
weil die offizielle...
Weil die offiziellen Apps
so dermaßen beschissen sind.
Diese Schönheit hier ist das.
Diese Schönheit hier ist das.
Wie gesagt, Vandal-Resistant.
Wenn der Zug mal entgleist,
hier gegenüber.
Haus stehen bleibt, ist die Kamera.
Das ist aber von den Features her
eigentlich ganz gut. Die Software ist halt
grottenschlecht. Du hast
einen Lichtsensor, du hast ein
Infrarot-Dings für nachts, du hast eine Kamera,
du hast einen Klingelknopf, du hast einen Lautsprecher und du hast
ein Mikro für Gegensprechanlage.
Also das ist die
billigste Variante, um
an sowas ranzukommen.
Okay, ist die Kamera wieder da?
Nope.
Die Kamera ist
noch nicht wieder da.
Ja. Sonst, äh...
Äh, ja.
Oh doch, jetzt ist sie wieder da. Geiles Timing.
Aha.
Vielleicht, vielleicht, vielleicht
nehmen wir auch mal die Uhr.
Ich weiß ja nicht, wo der Unterschied dazwischen ist, aber
vielleicht ist die ja besser.
Vielleicht ist die Uhr ja
besser. Achso, ja, das
Server ist nicht da.
Ha! Es funzt!
Die Kamera war schuld, nicht das
Feuer. Die Kamera war's.
Weil man sieht jetzt nichts drauf, aber
so mal, mal die von der
Zeit her mal vergleichen.
Ha! Ich kenn kein...
Hier, guck mal.
Wir haben kaum Leck.
Ich hab mittlerweile einen NTP-Solver an die Kamera gehängt.
Also die läuft jetzt auch halbwegs genau.
Ah, so eine
halbe Sekunde bis Sekunde und
das stimmt nicht so ganz. Ich würd sagen, es ist sogar ein Ticken weniger.
Ähm...
Ja. Ja. Nice, nice.
Gestreamt über WebRTC.
Ja.
Das geht jetzt auch vom... Ich probier's mal auf dem iPhone kurz aus.
Achso, das hab ich
vorhin schon gelernt. Das geht in dem Fall.
So, mal gucken, ob jetzt im Firefox
es wieder rumbuckt.
Ja, das ist witzig, ne? Der Firefox ist
in diesem Modus kaputt. Auf dem iPhone selbst
geht's. Also wenn der Firefox das
iPhone simuliert, ist es kaputt, aber
das echte iPhone geht.
Warum, fragt mich nicht. Ich weiß
es nicht.
Gut, wir nähern uns.
Wir nähern uns der Sache.
Ähm...
So, wir haben jetzt das Bild von der Kamera.
Und jetzt müssen wir
den Gegensprech-Kram machen. Oder wollen wir ein bisschen...
Und wir können das JavaScript noch ein bisschen
schöner machen.
Darf ich jetzt vielleicht hier wieder
Mixed-Content laden?
Eine... Ein Schild
vor der Tür nach DSGVO.
Ne, ich platziere das direkt
neben meiner Gegensprechanlage
und hoffe, dass mich keiner anzeigt.
Anzeige ist raus.
Moment, geht das Reload-Zeug jetzt auf einmal?
Ne.
Das Problem ist, mit dem Reload,
muss ich jetzt nochmal ausprobieren, ob das klappt.
Und zwar
auf Login-Host.
So.
Er sagt mir, er darf das
Loading-Feld... Achso, weil es nicht läuft.
Ne, das
mag nicht.
Operation is insecure.
Der mag nicht.
Was anderes als das Plugin
fällt mir jetzt nicht ein.
Ah!
Die schreiben sogar, dass es nicht geht. Na geil!
Ja, das haben wir doch eben schon
gemacht, dass wir gesagt haben.
Äh...
Tja.
Das ist ein bisschen nervig, dass wir jetzt nicht...
dass wir immer jetzt Reload drücken müssen.
Das geht mir schon ein bisschen auf den Keks, ne?
Boah.
Übrigens, ne, auf dem iPhone
ist das ultra schnell, die Seite.
Also ich...
Die Seite ist offen und hat direkt Video.
Ich guck's mir jetzt hier gerade nochmal vom iPhone an.
Ich hatte es ja vorhin schon
über den Raspberry mal kurz gestreamt.
Ähm...
Lull...
A-T-T-P-S
Und zack!
Das ist instant da.
Das ist auf dem iPhone
mega schnell.
Ich weiß halt nicht, was der für...
für Schmerzen hat.
Sag mal,
seh ich das richtig, dass der Stream wieder hängt?
Seh ich das richtig, dass
der Stream wieder hängt? Was ist denn mit der Kamera
jetzt schon wieder für ein Loh... für ein Loh...
Döns los, ey.
What the fuck?
Alter.
Kamera spackt sich ja mal mega ein ab.
Und vorhin...
Vorhin hab ich das auch mit V-Sync gestreamt.
Das war vollkommen okay. Also, V-Sync ist
ein total bescheuertes Wort dafür,
was der macht. Und zwar
FFmpeg scheißt in dem Fall
einfach auf die Timestamp...
auf die Timestamps vom ursprünglichen Video.
Was ganz gut ist,
weil dadurch ist es lustigerweise gesynkter
als vorher.
So bescheuer das klingt.
Jetzt guck ich, jetzt macht das V-Sync
überhaupt keine...
lasst mir...
das FFmpeg.
Und ich find's halt geil, wie schnell das lädt
auf nem... auf nem iPhone.
Guck, ich mach jetzt Seitenrefresh
und...
Zack, ist da. Instant gefühlt.
Und der Firefox rödelt sich hier einen ab.
Lustig.
Man weiß...
Man weiß nicht so genau warum, aber...
Weil.
Muss man nicht verstehen.
Machen wir das mal mit dem Chrome?
Auf und gucken, wie schnell's da lädt.
Gar nicht.
Doch.
Na okay, einmal... einmal...
Ullt.
Na doch, das...
Da ist es schneller, ne?
Keine Ahnung.
Das ist irgendeine... irgendeine Firefox-Geschichte wahrscheinlich.
Vielleicht liegt das auch an... an der Konsole?
Hm.
Na, so ein großer Unterschied ist nicht dazwischen, oder?
Ja, das ist schon ganz schön lahm.
Im Firefox zumindest.
Na gut, aber das funktioniert.
Guck mal, im Firefox hängt das auch übelst rum.
Im Chrome eben überhaupt kein Ding.
Ich hab ne... ich hab kein... weder nen FreeSync, noch nen G-Sync-Monitor.
Wo ist denn das?
Also irgendwie spackt das gerade übelst rum.
Ich hatt das vorhin schon laufen, aber das...
Ihr wisst ja, Famous Last Words und so, ne?
Ich hatt das vorhin laufen und das lief wunderbar.
Überhaupt keine Probleme.
Guck mal, hier oben ist der... der geht doch voll ab.
Der...
Zuckelt sich da einer ab, oder?
Okay, machen wir mal den Debug-Level runter.
Ob ich's auf nem Raspberry am Ende laufen lasse, ist eh was anderes, ne?
Wahrscheinlich lass ich das dann auf meinem Server mitlaufen.
Aber ich... ich will halt, dass es auf nem Raspberry läuft.
Weil wenn's auf nem Raspberry Zero läuft, dann brauchst du wirklich überhaupt keine Leistung.
Und das macht jeder... jeder äh... halbwegs vernünftige Rechner so mit ähm...
Keine Ahnung.
Mit der CPU auf dem Festplattenkontroller.
Gefühlt, weißt du.
So, und wir können auch Vollbild machen.
Das klappt auch.
Wir haben auch keine Bildfehler.
Zum Bildfehler checken ist lustigerweise diese zugeklebte Kamera ganz gut, weil's rauscht.
Und man hat keine Bildfehler, sonst hätt's hier Blöckchen drinne.
Na und guck, und die CPU-Last auf nem Raspberry ist halt nun wirklich nicht sonderlich hoch.
Das braucht 15% FFmpeg und dann nochmal irgendwie, keine Ahnung, nochmal so 50% dazu.
Also das Ding ist nicht ausgelastet.
War vorher nicht da, was machst du eigentlich?
Ne App für meine Gegensprechanlage,
die auch auf äh...
Mobile-Geräten funktioniert.
Ne, ne, mein Single Point of Failure wird kleiner mit dem Server.
Weil, das wird ja aufgesplittet.
Das kommt ja alles weg.
Ich hab ja wie gesagt, Internet-Zeug läuft jetzt über den...
Läuft demnächst über den Mikrotik-Router.
Ähm...
NAS gibt ne eigene Kiste und äh...
Quasi Heimautomatisierungs-Zeug
gibt ne eigene Kiste.
Insgesamt sogar stromsparender als das,
die fette Kiste, die ich jetzt stehen hab.
Die, die Heimautomatisierungs-Kiste
ist so nen...
So nen Celeron, irgendwas...
Zwo-Kern-Gedöns,
was nichts verbraucht im Endeffekt.
Aber das funktioniert, das find ich gut.
Und guck mal,
die Uhrzeiten stimmen auch überein.
Mal gucken, wenn ich
das hier jetzt, wenn ich das hier jetzt schließe,
kriegt der das mit?
Ah ok, das ist
pro Browser, der sich connectet,
pro Browser, der sich connectet,
braucht er so an die
20% CPU-Last vom Raspberry.
Das ist natürlich hart.
Wenn sich da, wenn sich dann da beim Klingeln irgendwie
gefühlt
drei, mindestens drei Geräte
drauf connecten. Guck, jetzt bin ich mit dem
iPhone drauf. Jetzt reloade
ich mal.
Ja, ja, jetzt mach ich's mit dem iPhone mal wieder
zu. Jetzt geht der Tab
hoffentlich weg, oder?
Aha, guck mal, das iPhone
schließt die Connections nicht.
Das iPhone schließt die Connections nicht.
Na geil. Gebated, würde ich
sagen. Guck, das bleibt immer
auf. Das ist ja
räudig. Jetzt mach ich's
nochmal auf. Jetzt haben wir gleich
noch einen. Guck, jetzt haben wir
einen vierten. Das iPhone macht die, macht die
Verbindung nicht zu. Na toll.
Wie ist das eigentlich wegen Datenschutz,
wenn du den Klingeln filmst? Wahrscheinlich
nicht erlaubt. Wahrscheinlich
nicht erlaubt.
Ja, das iPhone macht's kaputt.
Weil's die Verbindung nicht closed.
Das ist ja Müll.
Guckt's euch mal an, ja. Seht ihr?
Guckt mal, wie viele Prozesse da jetzt auf sind und da hinten rumschimmeln.
Ja, ich
setz auch drauf, dass mich schon keiner verklagen
wird. Guck,
wenn zu viele Prozesse auf sind, macht's
den Raspberry fertig.
Schau doch mal auf Android. Wollen wir's mal
ausprobieren auf Android? Ob das
die, ob das die, ähm,
ob das sich ordentlich abmeldet?
Gucken wir mal auf
Android. Oh.
Ja, das
ist echt, das ist echt das, das iPad.
Guck mal, wenn ich, wenn ich hier jetzt zu mache.
So.
Dann ist
weg. Der meldet sich ab. Okay.
Ich hol mal, nutzt
ihr wieder das China-Ding, ja. Ich hol
mal mein, ich, ich hol mal das, das Shield-Tablet.
Ich hol mal das Shield-Tablet und guck,
ich meine, ich lass
es ja, dann wirkt's wahrscheinlich
bisschen was fetteren als dem, als dem
Pi Zero laufen. Das heißt, es sollte
nicht ins Gewicht fallen, aber das hat ja auch keinen Sinn, wenn das
irgendwann dann, nachdem, nach fünf Mal
klingeln oder so, komplett,
äh, ne, dann
die, ein CPU-Core voll ist, weil das iPhone
die Verbindung nicht zumacht. Wobei die, die Sachen
wahrscheinlich time-outen nach ner Weile.
Die Dinger werden bestimmt time-outen nach ner
Weile, geh ich mal von aus. Aber was ich halt
interessant finde, wie wenig Last so das FFm
Pack an sich braucht, ne. Ich meine, das
macht ja auch nicht viel.
Ja, konnte ich. Tribolon.
Das geht wunderbar. Das, äh,
Fire HD 10, das kann sogar routen mittlerweile.
Ok.
HTTPS
Ich mach das jetzt mal
auf dem Android Tablet. Doppelpunkt
Slash, Slash
Lol
Drei
D
T
T
N S Punkt
Org. Ist es jetzt, ist es
jetzt aufgegangen? Also auf
dem Android Tablet lädt's gerade gar nicht.
Ok.
But why?
Also auf dem Android Tablet
lädt's gerade gar nicht.
Weiß nicht warum.
Aber hier im Browser lädt's noch, ne.
Ja.
Bist du vorangekommen? Ja, es funktioniert eigentlich.
Prinzipiell. Sogar auf
dem Raspberry, wenn die Geräte halt die Verbindung
zumachen. Ja, was der für
Warum das jetzt? Das ging vorhin
auch auf dem Android Tablet.
Ok, jetzt mal
was Schönes, weil man hat
ja auf Mobile Android Geräten
keine, keine Developer Tools.
Und da hab ich letztens was gefunden.
Das, äh
nennt sich
Wie hieß denn das Projekt?
Irgendwas mit E.
Wobei, warte mal, ich hab's doch schon drinnen.
Das da.
Das hab ich gefunden und zwar
das fügt auf Mobile Browsern
ne JavaScript Konsole hinzu.
Sowas wie, sowas wie das
da. Dass man es direkt Mobile
aufmachen kann. Das ist sehr, sehr praktisch.
Das mach ich
jetzt mal. Hab ich jetzt gespeichert.
Gucken.
Ja.
Initialisiert. Hier, hier, hier. Angeblich.
Error.
Sagt er.
Error. Warum sagt
er Error? Wo ist das Problem?
An welcher Stelle sagt er in meinem Code denn
Error?
Er-ror. Hier.
Hier. Error
sagt er. Ohne.
Ohne näheren Hinweis.
Einfach nur Error.
Kann man den, kann man den
Error vielleicht loggen, da ich ihn sehe.
Error.
Tja.
Sieht nicht so aus.
Aber von einer Sache
können wir eigentlich ausgehen.
Das wenn das
unter iOS funktioniert,
das mit Sicherheit unter Android
auch funktionieren wird.
Und es nichts großartiges sein kann.
Ähm.
Wie kann man in Chrome den Cache
leeren?
Ne, kann ich nicht machen. Deswegen mach ich das jetzt auch nicht im Stream
weiter.
Das guck ich mir nachher an. Was der Android
für, für Dinger
treibt. Error.
Sagt er.
Das hab ich nur an einer Stelle
stehen. So. Aber
ich mein, im Chrome, im Chrome auf dem
Desktop funktioniert es ja ganz gut und es hat auch
keine, keine
Fehler, ne. Großartig.
Außer, dass er der Meinung ist.
Dass es Slow Link ist.
Gut. Ähm.
Was kommt denn jetzt als nächstes?
Ja, Moment. Shift F5 auf dem Tablet wird schwierig.
Es geht mir aufs, es geht
mir aufs Android Tablet.
Fail to set remote candidates.
Okay. Was auch
immer genau
das Android Tablet hat nämlich
vorhin funktioniert.
Kann das sein, dass der rumspackt?
Wegen,
wegen, dass es kein Audio hat?
Das guck ich mir später an. Das müssen wir jetzt
nicht machen. Das müssen wir
nicht machen. Aber das funktioniert
doch echt gut. So.
Jetzt haben wir das Bild von der Kamera. Ich mein, ich würde euch jetzt gerne
mal irgendwas zeigen, dass man sieht, dass es ordentlich
funktioniert, aber da muss ich die Kamera abmachen.
Und die sitzt hier mir direkt gegenüber.
Äh, Chrome am Tab.
Und es ist schön zu sehen, wie
wenig Last das Ding verursacht, wenn halt nicht
so viele Geräte dran attached sind.
So, ähm. Gucken wir mal
weiter. Dann nehmen wir uns
jetzt hier den Chrome.
Und simulieren
da unser iPad.
Sag.
Ein Error.
Ja, dass das Favicon
nicht findet. Who cares?
Nein, kein iPhone 6.
Ein iPhone 6. Kleiner.
Gut, ähm.
Macht der denn jetzt hier die Tabs
ordentlich zu?
Ne, der macht auch die Tabs.
Moment.
Doch, der macht die Tabs richtig zu.
Ha. Das müssen wir auch glauben,
das kann man. Gibt es nicht.
Es gibt doch bestimmt irgendwie ein Event,
wenn Seite closed wird.
Aber guck mal, wie schnell das
im Chrome geht.
Zack. Reload.
Bam. Ist da.
Window unload.
Weil das wird
das schließen,
wenn, ähm.
Ja, weil wenn ich hier zu mache.
Ja doch, das checkt er.
Das checkt er.
Okay, ähm.
Dann unloaden wir den Krams mal.
Zack. Guck mal hier.
Schon gleich der Code im Chat.
So muss das sein.
Before unload event.
Closing.
Aha.
Das heißt,
dann muss ich mir aber irgendwo
globale Variable speichern oder
wir machen doch wieder eine Vue.js App draus.
Das heißt, da muss ich mir aber eine globale
Das hier muss ich mir
global speichern.
Dass ich dann detachen kann nachher.
Before unload.
Closing.
Was ist das? Geh weg.
Sieht man das?
Das müssen wir dann ganz kurz ja sehen.
Naja, oder auch nicht.
Ich glaubte jetzt einfach mal, dass das funktioniert.
Was ist denn, wenn ich da drin
alert mache? Ploppt der dann auf?
Bloop.
Ne, oder?
Ich glaub, das wird durchs reloaden
überschrieben dann.
Ja, aber das ist okay.
Also jetzt könnte ich dann hier sowas machen wie
Hanus.
Destroy oder irgendwie sowas.
War das glaub ich.
Was? Return?
Wie, ernsthaft?
So. Nope.
Ach ne, Moment. Ich muss das
ins Event irgendwie reinschreiben, oder?
Wie macht man das?
Schon nie verwendet.
Before unload. Gucken wir uns mal an, wie das funktioniert.
Example.
Before unload. Prevent default.
Ah, return value. Ach ja.
Verstehe.
Das ergibt hier auch Sinn. Ups.
So.
So, jetzt darf ich nicht mehr.
So, jetzt darf ich nicht mehr reloaden.
Oder? Juckt es nicht.
Juckt es überhaupt nicht.
Soll ich das
vielleicht besser hier drinnen machen?
Meine JavaScript-Skills.
Okay, ich copy-paste mir das
jetzt mal aus. Von
Mozilla. Die wissen ja meistens, was sie machen.
Okay, das feiert nicht.
Wirklich, ne?
Aber der Browser macht es ja
auch so. Das ist ja schon mal ganz gut. Aber es wäre nicht
schlecht.
Das greift bestimmt an der Stelle nicht.
Aus mir nicht
ersichtlichen Gründen, weil ich der übelste
JavaScript-Noob bin.
Was? Das fragt er bei dir sofort. Tja.
Ich könnte mir
vorstellen, das wird irgendwie überschrieben, oder?
Äh.
Moment.
Warum hat das jetzt nur einmal funktioniert?
WTF?
Warum hat das jetzt eben nur einmal getan?
Browser-Zeugs.
Caching. Ja, wahrscheinlich.
Ich drücke aber die ganze Zeit schon ohne
Cache-Refreshen.
Dann machen wir mal ein Firefox wieder.
Ja. Firefox.
Nö.
Der hat keinen Bock.
Der will nicht.
Ah.
Moment. Das hindert nicht am
Refreshen.
Das ist, wenn man
schließen will,
oder?
Ah. Am Refreshen hindert
es einen nicht.
Ah doch. Jetzt geht es.
Ne.
Jetzt geht es wieder nicht.
Das ist irgendwie sehr
inkonsistent.
Das ist sehr inkonsistent.
Das Ganze.
Da beim Schließen geht es.
Jetzt haben wir es wieder kaputt gemacht.
Weil wir zu oft reloadet haben.
Wobei es sieht doch
eigentlich gar nicht so schlimm aus.
Doch. Der hat echt
Schmerzen.
Ah ja. Jetzt geht es auch
im Chrome irgendwie.
Aber es geht nicht immer.
Komisch.
Am Cache kann es
jetzt ja nicht überliegen mittlerweile.
Es ist ja drinnen.
Naja.
Am Raspberry. Genau.
Aber.
So. Heute haben wir uns viel rumgeschlagen.
Mit Zeug drum herum.
Können wir jetzt auch das hier ein bisschen schöner machen.
Weil das sieht ja echt nicht.
Das sieht echt ein bisschen.
Wobei so schlimm sieht es doch eigentlich gar nicht aus.
Es ist jetzt halt Funktion unter Funktion.
Weil man kann es auch ohne Probleme lesen.
Das ist doch für JavaScript Verhältnisse
ganz okay.
Aber nachdem wir jetzt ein Zertifikat haben.
Und ähm.
Was was funktioniert
kann ich es ohne Probleme nachher auf meinen Server schieben.
Dann wird das da von da aus ausgeliefert.
Wird das flutschen.
Huge. Wird das flutschen.
Aber ich finde schon mal.
Echt ganz gut wie das funktioniert.
Als nächstes müssen wir
noch das was wir schon ausprobiert
haben in der C-Sharp Anwendung. Wie es funktioniert.
Ähm.
Mit dem Mikrofon hin basteln.
Achso. Ja. Moment.
Eins sollten wir ja schon noch machen.
Moment. Eins sollten wir ja schon noch machen.
Moment.
Wir. Wir.
Machen wir das Streaming aus.
Wir fügen jetzt noch Sound hinzu.
Audio Port.
Äh.
Das war das.
Das Billigste vom Billigsten.
So.
Wir machen jetzt noch Audio dabei.
Was before unload.
Können wir mal probieren.
So.
Genau. Wir machen jetzt nämlich noch Audio an.
Jetzt geht es wieder.
Pff.
Es ist teilweise irgendwie ein bisschen.
Ich mach mal beides rein.
Was before unload.
Wo habe ich es denn überhaupt hin gepastet.
Jetzt.
Before unload.
Das scheint mir doch die richtige Funktion zu sein.
Und danach unload.
Okay.
Na in unload kann ich es ja nicht mal aufhalten.
Reload.
Okay. Wir müssen jetzt mal
das FFmpeg abbrechen.
Und jetzt müssen wir FFmpeg
sagen. Bitte auch noch mal
eine Runde Audio hochladen.
Das müssen wir nämlich anders machen.
Und zwar.
Jetzt kommt FFmpeg Magic.
Wir müssen.
Wir müssen das splitten.
Weil. Das ist auch was.
Das kann man sich mal merken.
Man kann im Prinzip mit FFmpeg so fast alles machen.
Und zwar. Aktuell macht
FFmpeg folgendes.
Es wirft alle Timestamps weg.
Und generiert neue.
Man nimmt das Bild von der Kamera ab.
Kopiert einfach nur die Bilder.
Löscht das Audio.
Und schickt es an die Uhr.
Was wir jetzt machen wollen.
Wir wollen den Input Stream splitten.
In einen Audio Stream.
Und einen Video Stream.
Und wenn ich das aus dem Kopf richtig hingucke.
Muss man da sowas machen wie Map.
Und dann gibt man an welchen Stream Nummer man haben will.
Also.
In dem Fall 00 für Video.
Weil halt der nullte Stream Video Stream ist.
Und dann kann man sagen.
01
Auch Copy.
Und 01 ist Audio.
Ich glaube das müsste so funktionieren.
Und das an 8005.
Ja.
Er schreibt ja auch hier.
Guck.
Er zeigt jetzt ja auch hier.
Wir machen einen Stream.
Also das FFmpeg ist übelst geil in der Richtung.
Ein Stream geht an.
8004.
Und ein Stream Audio geht dahin.
Ja.
Das funktioniert.
Jetzt können wir nämlich den Mute Unmute Button mal.
Bisschen Funktionen beibringen.
Wir geben dem Ding mal den Tag Mute.
Das ist irgendwie besser.
Können wir nämlich direkt ansprechen.
So.
Und jetzt müssen wir da irgendwie einen Klick Event registrieren.
Wie macht man das dann in JavaScript schön.
Also quasi sowas wie.
Ja das kannst du mit FFmpeg schön wieder merchen.
Audio und Video.
Und dann kannst du das dann auch mit FFmpeg mitspielen.
So.
Und dann kannst du das dann auch mit FFmpeg mitspielen.
Und dann kannst du das dann auch mit FFmpeg mitspielen.
So.
Kann man so?
Kann man so was machen?
In der Richtung?
Irgendwie so?
Kann man so?
Was? Attach irgendwie?
Ja und Klick.
Das ist ja viel zu nahe liegend.
Ne.
Ach Moment.
Das muss ja auch hier rein.
Weil es dann geloadet ist.
Okay das klappt anscheinend so nicht
Nicht klick sondern onclick
Ah klick ist das was ich
Wenn ich ein klick simulieren will
Ne
Okay dann
Mach ich das so wieder um
Muss man das so machen
Oder war das
Ne ne das macht man schon so
Ne jQuery will ich nicht
Bevor ich da jQuery einbinde
Dann mach ich wieder Vue.js
Damit kennen wir uns ein bisschen aus
Ne ich hab nicht nur die Klasse gesetzt
Ich hab
Ja du hast recht
So schlecht
Aber geht immer noch nicht oder
Event
Wo ist jetzt das Problem alter das kann doch nicht so kompliziert sein
Mute
Das Ding heißt mute
Ich hab nachgeguckt
Da
Ach guck mal ich bin so schlecht
Javascript
Hahaha
Ah jetzt gehts auch
Der Chat hat schon wieder
Der Chat hat schon wieder gleich erkannt
Wow
Warum genau hat das jetzt dazu geführt
Dass ich mein Video Element verschoben hat
The fuck
Warum verschiebt sich jetzt mein Video Element
Ich hab doch an der Struktur
Überhaupt nichts geändert
Alter Javascript
Hab ich gesumt
Ne
The fuck
Was genau
Hab ich jetzt gemacht
Das Ding ist auch nicht mehr richtig angeordnet
Wartet mal das spackt gerade irgendwie rum
Ich hab also ich hab nicht wissentlich gesumt
Jetzt
Das war zwar vorher auch schon auf 100 aber meinetwegen
Also ich hab ich hab's ne man hat's gesehen ich hab alles auf 100 gestellt vorhin
Aber es ist nicht mehr in der Mitte angeordnet
Ich versteh das nicht warum das Zeug immer so rumspringt
Okay so jetzt haben wir nen Klick Händler ne
Klick
Das heißt wenn ich klicke macht er 1, 2, 3
So und da kann ich doch jetzt bestimmt
Sowas machen wie äh
Video Element
Sowas wie Video Element
Das Ding hab ich irgendwie genannt
Player
Oder so
Remote Video
Remote Video
Und da kann man doch jetzt bestimmt
Mute setzen
Muted
Muted auf False
Falls das so heißt
Unmute Video Element
Äh
Eminent Element
How to unmute
Stack Overflow Driven
Unended
Muted genau haben wir doch richtig gemacht
Muted gleich False
So und das heißt wir klicken jetzt da drauf
Und dann haben wir Sound
Aber wenigstens
Funktioniert das mittlerweile
Wartet so
Jetzt weiß ich nicht ob wir Sound haben
Weil
Ich muss das mal in Windows starten
Ich muss das mal
Ich muss das mal in Windows starten
Weil
Ich glaub
Ich glaub hier hab ich kein Sound
Okay gucken wir mal
Unmuted
Hallo
Geht das jetzt?
Nope
Wir müssen erstmal testen
Ob überhaupt ein Sound von der Kamera
Irgendwie reinkommt ne
Hm
Wir machen mal
Wir machen mal Muted hier weg
Dann sollte es ja direkt
Muted werden
Muted hier weg
Muted hier weg
Muted hier weg
Unmuted sein
Aber geht irgendwie nur im
Firefox
Oder auch nicht
Doch
Nein
Ich hör nix
Ich muss mal die Kamera herholen
Naja gut kein Wunder dass man da was hört
Ich hol mal die Kamera her
Kann mal draufklopfen oder so
Guck ob man da was hört
Hallo
Nope
Da hört man nichts
Da hört man gar nix
Da hört man gar nix
Oder?
Oder?
Hä?
Hä?
Nee
Jetzt weiß ich halt nicht woran das liegt
Vielleicht überträgt FF MPEG auch den Sound nicht richtig
Das wäre ja ne Möglichkeit
Vielleicht überträgt FF MPEG den Sound nicht korrekt
Vielleicht überträgt FF MPEG den Sound nicht korrekt
Weil ich jetzt mal einschermuten würde
Das macht's
Gucken wir mal
FF Play
Test
Test
Ah
Test
Test
Okay, das Sound geht prinzipiell.
Und das Sound
dahin zu übertreiben, der müsste eigentlich
auch gehen.
Tja, warum?
Tja, man weiß es nicht.
Er meckert
auch nicht. Aber wenn
der Firefox Sound abspielen würde,
egal wie,
da wird man es erstens hier sehen.
Show Controls.
Und außerdem ist es
muted.
So als gäbe es
keinen Sound.
Es ist muted.
Selbst hier unmuted bringt nichts.
Warum ist das so?
Doch.
Deswegen habe ich ja den Knopf
gemacht. Wie spielst du das Audio
ab? Das kommt über den WebRTC
Channel mit rein.
Sollte eigentlich.
Alles für mich gehandelt werden.
Das ist halt die Frage, ob es das wird.
Das passiert
eigentlich hier.
Da.
So mehr kann man da auch
nicht machen. Das muss ich mir dann im Zweifelsfall
nachher nochmal angucken. Aber
wir gucken jetzt mal,
was passiert. Wenn ich jetzt auf
muted klicke,
auf muted false,
dann geben wir jetzt mal das Video-Element
aus danach.
Hast du nicht Video und Audio gesplittet?
Jaja, nur um es zum Server zu schicken.
Der sollte das selbst wieder zusammenwurschteln.
Das gucke ich
jetzt gleich mal. Ich gucke das gleich mal nach.
Können wir hier nachschauen.
So, muted hat er entfernt.
So, dann gucken wir
nämlich hier mal, wie der
das mit dem Sound macht.
Guck mal, da steht kein Audio drinnen.
Hier, da steht kein Audio
drinnen. Da wird kein
Audio mit announced.
Übrigens,
Firefox-Entwickler sind
ultra lustig.
Guck mal.
Da wollen sie lustig sein von Firefox.
Okay, ich mache
muted nochmal raus.
Ja, es ist definitiv gemutet.
Weil ich gar keine
Audio-Sachen
geschickt kriege.
Hm, Audio
only.
Okay, vielleicht muss ich das
doch noch irgendwie attachen, das Audio.
Ich muss ich das doch noch irgendwie
attachen. Ich wüsste jetzt zwar nicht wie,
aber gucken wir mal.
Vielleicht muss ich das doch noch
irgendwie attachen.
Gucken wir uns nochmal den Beispiel.
Code an von denen.
CD-Share-Demo.
Oh, der Raspberry ist schon mit
Tab-Completion ausgelastet.
Streaming-Test.
Yes.
Also, wenn ich mir das hier angucke, bei denen,
das Video-Element. Ach, die hatten ja gar
keins drin. Die haben das ja dynamisch hinzugefügt.
Video.
Und die macht...
Moment. Moment, Leute.
Was ist das?
Das kann doch keiner lesen, so.
Kann ich das nochmal ordentlich eindrücken?
Oh, der Raspberry hat schon Probleme,
die Zeilen einzugrücken.
Naja, nicht wirklich.
Syntax.
On.
Ne, wie war das? Syntax.
On.
JavaScript ist nicht würdig,
geheiligt zu werden.
Irgendwas mit Attach-Stream.
Wobei, wartet mal, wir gucken uns das woanders an.
Wir gucken uns das nicht hier an.
Wir gucken uns das bei mir lokal in diesem Ding an.
So.
Demo.
Streaming-Test-Jazz.
So, ähm.
Machen die da irgendwas mit dem Audio-Stream?
Es kann sein, dass man das neu anfragen muss.
Das wird wahrscheinlich so sein.
Man muss das bestimmt neu anfragen.
Weil ich das automatisch starte,
holt er sich gar kein Audio-Stream.
Okay, dann starten wir das mal nicht automatisch.
Dann sagen wir jetzt der Button.
Der Button.
Der Button hier, der da.
Der startet jetzt Main.
Das heißt, vorher passiert gar nichts.
So, und dann machen wir auch Muted aus.
Weil das brauchen wir jetzt nicht mehr.
Muted haben wir schon weg.
Leave Page.
So, klick.
Aha.
Immer noch Muted.
Ach, fick dich.
Das hat jetzt irgendwie, aber hat logisch geklungen, oder?
Aber er findet das Audio schon mal.
Macht er jetzt irgendwas?
Firefox, hallo.
Ich hau mal.
Ich hau mal ein bisschen auf die Kamera drauf.
Ob der Sound macht?
Nee, macht er nicht.
Aber die Verzögerung ist echt nice.
Also ist es kaum, kaum Verzögerung da.
Finger, Finger, Finger.
Das ist wirklich, wirklich sehr, sehr nice.
Oh, jetzt hängt die Kamera.
So viel zum Thema nice Verzögerung.
Ha.
Okay, das ist mein Raspberry.
Der Raspberry ist, glaube ich, echt ein bisschen schwach dafür.
Nun denn.
Oh, ich glaube, ich habe die Kamera den Strom rausgehauen gerade.
Ups.
Ups.
Ich habe mich auf der Kamera rumgehauen.
Ist da Strom noch dran?
Nee.
Äh, ups.
So.
Welcher Raspberry ist das?
Das ist ein Zero.
Das heißt, der kann gar nichts.
Ich habe den Strom von der Kamera rausgehauen.
Irgendwann drauf rumgetatscht.
Ja, also der Zero, ne, der hat absolut keine Leistung.
Aber deswegen, wenn das Ding auch nur ansatzweise aus dem Zero läuft, läuft das überall drauf.
Da musst du mir keine Gedanken machen.
Danke für die ganzen Follows übrigens.
Ähm.
Und ja, ähm, ich muss jetzt, muss jetzt erstmal Pizza fordern.
Aber wir haben, aber ich meine im Prinzip, also wenn jetzt, mal angenommen, ja.
Ich kriege es noch hin, dass der Sound geht.
Ja, performen, die, die Janus-Leute haben performen, performant programmiert.
Ich ja noch gar nicht.
Ich mache ja noch nicht viel.
So, ähm, wenn ich jetzt noch hinkriege, dass, ähm, ich den Sound aus dem Video-Element rauskriege,
dann kann ich das Ding eigentlich verwenden.
Dann habe ich eine China-Video-Gegensprechanlage.
Äh, Warik95, ich programmiere einen Frontend für meine China-Cam.
Das ist so eine China-Türsprechanlage mit Kamera.
Und die offizielle App ist dermaßen beschissen.
Die kannst du komplett vergessen.
Und unter Windows geht sie nur mit einem Internet Explorer ActiveX-Plugin.
Deswegen haben wir in den letzten paar Tagen in C-Sharp was, äh, gebastelt, um zu gucken, wie die Kamera prinzipiell funktioniert.
Und, äh, ja.
Passwörter, meinst du das hier?
Meine supergeilen, ne, ja, die sind, die sind sehr nice.
Ähm.
Ja, und jetzt basteln wir da gerade einen Webfrontend raus.
Okay.
Kamera läuft wieder.
Na gut, also, Leute, äh, war schön, dass ihr dabei wart.
Ich gehe jetzt Pizza futtern.
Was ist eigentlich, wenn die Kamera abschmiert?
Das ist relativ einfach.
Die Kamera ist an einem PoE-Accesspoint dran.
Und da kann ich einfach Power-Cyceln auf dem Port.
Dann startet sich die Kamera neu.
Was für eine Pizza?
Ja, ähm.
Ähm, das eine ist, äh, ganz klassisch Schinken, Salami, Pilze und das andere ist irgendwie so Mozzarella-Hackfleisch-Zeug.
Also, halbe-halbe.
Ja, aber das ist, das ist echt nice, wenn das dann tut.
Okay, Leute, bis zum nächsten Mal.
See you.
