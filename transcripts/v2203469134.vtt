WEBVTT

01:27.950 --> 01:29.390
So Leute, es wird ernst.

01:32.450 --> 01:33.650
Echt, was gab es für Werbung?

01:34.190 --> 01:35.170
Ich sehe keine Werbung.

01:35.410 --> 01:37.570
Vielleicht sieht man bei seinem eigenen Stream auch keine Werbung.

01:38.770 --> 01:44.250
Könnte aber auch dahin, dass ich überall aktuelle Werbeblocker am Start habe.

02:07.560 --> 02:09.220
Ach, auf dem iPad, ja, Paintschamp.

02:09.580 --> 02:10.680
Das kenne ich, das Problem.

02:11.320 --> 02:16.660
Wobei, ich schaue noch kaum noch Twitch auf dem iPad und auf dem iPhone.

02:17.720 --> 02:19.320
Nur die Channels, wo ich subscribed habe.

02:20.080 --> 02:21.980
Sonst hört man die Werbung nämlich auch zu viel.

02:25.500 --> 02:27.040
Bist du Hyper-Turbo-Subscriber?

02:27.680 --> 02:29.100
Ja, bei mir hast du keine Werbung.

02:29.560 --> 02:30.840
Wobei, ist das das Turbo?

02:31.160 --> 02:32.080
Ne, das ist das VIP.

02:32.620 --> 02:36.340
Also wenn du Twitch-Turbo hast, zusätzlich nochmal, dann nicht.

02:36.420 --> 02:37.680
Selfmade-Eis, danke für den Sub.

02:38.060 --> 02:40.060
Keck-Alu, warum auch immer Keck-Alu?

02:40.540 --> 02:41.600
Ich weiß es selbst nicht so genau.

02:44.880 --> 02:48.260
Ja, und wenn es bei mir Werbung gibt auf manchen Webseiten, die sich nicht überspringen lässt,

02:48.340 --> 02:51.740
dann mache ich den Ton aus, minimiere den Browser und gucke später wieder rein.

02:52.900 --> 02:55.440
Wobei, dass ja manche Webseiten auch versuchen zu detecten.

03:02.680 --> 03:03.480
Kleinen Pipi.

03:03.600 --> 03:04.100
Was?

03:16.610 --> 03:21.170
Ich habe vorhin, als ich den Stream ausgemacht habe, habe ich direkt etwas gefuttert.

03:22.530 --> 03:23.730
Das war dann so um...

03:24.050 --> 03:25.310
Na, direkt war das nicht.

03:25.490 --> 03:27.490
Hat schon ein bisschen gedauert.

03:29.190 --> 03:33.370
Also, sagen wir mal, ich habe um eins etwas gefuttert oder so, ja?

03:36.320 --> 03:37.680
Und ich könnte jetzt schon wieder etwas essen.

03:39.360 --> 03:41.360
Aber es dauert noch, dauert noch zwei Stunden.

03:41.980 --> 03:42.740
Dann hole ich mir etwas.

03:47.130 --> 03:47.930
Twitch macht das.

03:48.270 --> 03:49.350
Ja, du darfst ja auch...

03:49.350 --> 03:51.210
Nein, nein, nein, du darfst den Tab nicht wechseln.

03:51.230 --> 03:52.870
Du kannst aber den Browser zumachen.

03:52.990 --> 03:57.630
Oder, was ich meistens mache, ist nicht Browser minimieren, sondern einfach einen anderen Browser in den Vordergrund.

03:58.170 --> 04:00.490
Das scheint schwieriger festzustellen.

04:02.350 --> 04:05.910
Ja, ich habe gehört und mein Thermometer sagt auch, dass es draußen war.

04:06.010 --> 04:08.370
Lass mich mal kurz hier Home Assistant gucken.

04:09.750 --> 04:10.270
Außentemperatur.

04:11.870 --> 04:15.730
30,61 Grad Celsius.

04:20.030 --> 04:23.930
Am besten ist immer noch die Anzeige von meiner Wetterstation.

04:23.930 --> 04:29.890
Da steht drauf, also ich habe das ja hier im Home Assistant forwarded über Funk, ja?

04:30.750 --> 04:31.390
Nicht WiFi.

04:31.670 --> 04:33.850
Ich sage absichtlich nicht WiFi, weil es ist nicht WiFi.

04:34.130 --> 04:37.790
Es ist Oldschool 433 Megahertz Funk von der Wetterstation.

04:40.030 --> 04:41.250
Da steht dann 30...

04:41.250 --> 04:41.710
Oh, jetzt ist es...

04:41.710 --> 04:43.110
Oh, Leute, es ist kühler geworden.

04:43.490 --> 04:45.450
30,39 Grad Celsius.

04:46.530 --> 04:49.190
Also, bei mir steht da Außentemperatur.

04:49.770 --> 04:51.810
30,39 Grad Celsius.

04:52.610 --> 04:53.050
Gefühlt.

04:53.050 --> 04:53.290
30,39 Grad Celsius.

04:53.290 --> 04:53.330
30,39 Grad Celsius.

04:53.330 --> 04:53.350
30,39 Grad Celsius.

04:53.350 --> 04:53.410
30,39 Grad Celsius.

04:53.410 --> 04:53.470
30,39 Grad Celsius.

04:53.470 --> 04:53.510
30,39 Grad Celsius.

04:53.510 --> 04:53.530
30,39 Grad Celsius.

04:53.530 --> 04:53.910
30,39 Grad Celsius.

04:53.930 --> 04:55.190
30,39 Grad Celsius.

04:55.190 --> 04:57.330
Das ist kein Unterschied zwischen gefühlt und Außentemperatur.

04:57.610 --> 05:02.750
Warum das immer zwei Sachen anzeigen muss und gefühlt und Außentemperatur exakt immer gleich hoch ist,

05:03.710 --> 05:06.330
den Sinn habe ich noch nicht so genau verstanden von der Anzeige.

05:08.820 --> 05:11.560
Gefühlt würde ich eigentlich erwarten, dass da, wenn Regen ist oder so,

05:12.460 --> 05:14.640
oder Wind, dass es dann sich kühler...

05:14.640 --> 05:17.820
Aber das ist immer exakt die gleiche Temperatur, die da steht.

05:18.100 --> 05:20.280
Das ist wirklich Kek-Alu-Verschwörung.

05:21.200 --> 05:23.200
Wer auch immer diese Wetterstation programmiert hat.

05:24.520 --> 05:25.420
Das ist eigentlich ganz nice.

05:25.420 --> 05:25.480
Das ist eigentlich ganz nice.

05:25.500 --> 05:28.440
Das ist auch eine billige Wetterstation gewesen von Amazon.

05:28.700 --> 05:30.540
Irgend so eine China-Chinesen-Wetterstation.

05:31.040 --> 05:35.580
Also sprich, da ist so ein Windrichtungsding drauf,

05:35.700 --> 05:39.100
ein Temperatursensor drauf, Regenmenge und sowas.

05:39.700 --> 05:44.880
Also es ist eine Wetterstation, aber jetzt nichts super wissenschaftlich Akkurates.

05:44.980 --> 05:49.500
Hat aber auch nur irgendwie 80 Euro oder 120, ich glaube 120 Euro oder so gekostet.

05:50.200 --> 05:52.440
Aber das Coole ist, die hat ein Solarpanel drauf

05:52.440 --> 05:55.480
und da kommen zwei aufladbare Batterien rein.

05:55.480 --> 05:56.780
Und mit dem Solarpanel legt die die auf.

05:56.860 --> 06:00.040
Ich musste die jetzt in den Jahren, ich habe die bestimmt schon drei Jahre oder so jetzt,

06:00.760 --> 06:01.900
nicht einmal aufladen.

06:03.020 --> 06:06.040
Die ist auch etwas unzugänglich im Hof, die Wetterstation.

06:06.540 --> 06:08.460
Deswegen ist es ganz gut, dass man die nicht aufladen muss.

06:09.520 --> 06:13.820
Die sich selbst auflöst, selbst auflädt,

06:13.920 --> 06:15.280
weil auch nicht öfters die Batterien wechseln.

06:15.360 --> 06:16.220
Das ist eigentlich ganz nice.

06:16.220 --> 06:26.420
Und die Wetterstation selbst funkt ihre Werte über 433 MHz raus.

06:27.680 --> 06:30.440
Theoretisch könnte der Nachbar die auch abgreifen.

06:30.440 --> 06:34.920
Oder sollte ich mal keinen Bock mehr auf eine Wetterstation haben und mein Nachbar hat eine,

06:34.920 --> 06:39.550
könnte ich die von meinem Nachbar abgreifen.

06:39.550 --> 06:45.550
Keck, wait, wait, keck, keck, keck, wait, wait, wait, wait, wait, keck, keck.

06:46.550 --> 06:47.550
So.

06:48.550 --> 06:49.550
Leute, es wird ernst.

06:50.550 --> 06:56.550
Ich hoffe, ich habe das richtig gemacht, dass man das Terminal sieht, trotz Chico.

06:56.550 --> 06:57.550
Ich glaube so ist besser.

06:57.550 --> 06:59.550
Ah, jetzt guckt der Kopf von Chico noch ein bisschen rein.

06:59.550 --> 07:00.790
So ist es.

07:00.790 --> 07:01.790
Excellent.

07:01.790 --> 07:02.790
Excellent.

07:02.790 --> 07:06.360
Chico Protection.

07:07.360 --> 07:08.360
Ja.

07:09.360 --> 07:14.210
Jetzt ist Chicos Ohr genau hier unten an der.

07:14.210 --> 07:15.210
Excellent.

07:15.210 --> 07:19.750
Ja, Chat, was machen wir heute?

07:19.750 --> 07:25.790
Ich habe es dir heute Morgen schon mal kurz gesagt.

07:25.790 --> 07:37.040
Ich habe gesehen, dass die China-Chinesen von Espressif eine neue ESP-IDF-Version rausgebracht haben.

07:37.040 --> 07:38.040
Und da haben die jetzt einen Website.

07:38.040 --> 07:44.280
Da haben die jetzt einen Webserver dabei, der asynchron HTTP-Requests verarbeiten kann.

07:44.280 --> 07:46.280
Also mehrere gleichzeitig und sowas.

07:46.280 --> 07:48.280
Und das wollte ich mal ausprobieren.

07:48.280 --> 07:52.280
Wer keine Ahnung hat, was ESP-IDF ist, was ich mal vermute, was die meisten sind.

07:52.280 --> 07:56.720
Ja, das wird ganz grausam jetzt.

07:56.720 --> 07:57.720
Ich weiß das jetzt schon.

07:57.720 --> 08:01.720
Wer keine Ahnung hat, was ESP-IDF ist, und das dürften wahrscheinlich die meisten sein.

08:01.720 --> 08:07.720
Das ist ein Microcontroller-Framework für die Microcontroller von Espressif.

08:07.720 --> 08:10.720
Die Microcontroller von Espressif.

08:10.720 --> 08:14.720
Der bekannteste dürfte der ESP32 und der ESP2866 sein.

08:14.720 --> 08:20.720
Das sind so die Feld-, Wald- und Wiesencontroller, die in den meisten China-Geräten drin stecken.

08:20.720 --> 08:22.720
Die kann man sich aber auch so kaufen und benutzen.

08:22.720 --> 08:26.860
Und davon...

08:26.860 --> 08:28.860
Jetzt wird's, jetzt wird's...

08:28.860 --> 08:35.460
Ja, wobei man sagen muss, ESP-IDF selbst ist ja in reinem C.

08:35.460 --> 08:40.460
Also ist das dann mit irgendwelcher Callback-Hölle des Todes.

08:40.460 --> 08:41.460
Weiß ich nicht.

08:41.460 --> 08:42.460
Weiß ich noch nicht genau.

08:42.460 --> 08:44.460
Mal gucken, wie's funktioniert.

08:44.460 --> 08:46.460
Wie gesagt, ich bin mir da selbst nicht ganz sicher.

08:46.460 --> 08:50.460
Erstmal müssen wir WiFi-Connection herstellen.

08:50.460 --> 08:53.460
Und ihr habt gesehen, dass die Sachen jetzt neu sind.

08:53.460 --> 09:03.460
Denn die sind enthalten im Prerelease von ESP-IDF V5.3-RC1.

09:03.460 --> 09:04.460
Also das ist ganz neu.

09:04.460 --> 09:08.460
Erst vor zwei Wochen wurde das Ganze released.

09:08.460 --> 09:12.730
Und das probieren wir mal aus.

09:12.730 --> 09:14.730
Es sieht dann ungefähr so aus.

09:14.730 --> 09:18.730
Ich kann euch mal von der Idee her zeigen, was da rauskommt.

09:18.730 --> 09:20.730
Also, nur mal zur Erklärung.

09:20.730 --> 09:21.730
Nochmal.

09:21.730 --> 09:24.730
Hier das, wie so ein Controller aussieht.

09:24.730 --> 09:30.730
Sie hat im Prinzip die Größe von einem Raspberry Pi Pico.

09:30.730 --> 09:33.730
Gab's aber vorher schon und gibt jetzt auch deutlich bessere.

09:33.730 --> 09:38.560
Und ich hab hier beispielsweise so einen.

09:38.560 --> 09:40.560
Gerade liegen.

09:40.560 --> 09:42.560
Dieses Teil mit Display.

09:42.560 --> 09:46.560
Ist vollkommen egal, ob das ein Display ist, mit Display ist oder nicht.

09:46.560 --> 09:48.560
So eine, ja.

09:48.560 --> 09:50.560
Die Kiste liegt hier gerade.

09:50.560 --> 09:54.560
Das Teil hat auch zig GPIO-Pins, wo man Sachen dran anschließen kann.

09:54.560 --> 09:55.560
Machen wir heute aber nicht.

09:55.560 --> 09:58.960
Wir lassen dann drauf einen Webserver laufen.

09:58.960 --> 09:59.960
Das ist nichts Neues.

09:59.960 --> 10:00.960
Das haben wir schon gemacht.

10:00.960 --> 10:03.960
Ja, ich hab hier das Projekt, wo wir das letzte Mal aufgehört haben.

10:03.960 --> 10:05.960
By the way, ich sag's nur mal.

10:05.960 --> 10:07.960
Nicht für den Fall der Fehler, dass ich nicht dran denke.

10:07.960 --> 10:10.960
Secrets.h bitte nicht anklicken, Max.

10:10.960 --> 10:11.960
Heute.

10:11.960 --> 10:13.960
Ansonsten muss ich in meinen.

10:13.960 --> 10:18.960
Mich nebenbei in meinen WLAN-Access Point einloggen und das WLAN deaktivieren.

10:18.960 --> 10:21.960
Ich hab glücklicherweise extra WLAN nur für solche Bastelzwecke aufgemacht.

10:21.960 --> 10:23.960
Sollte ich doch was leaken.

10:23.960 --> 10:25.960
Also ist das nicht so schlimm.

10:25.960 --> 10:26.960
Ja.

10:26.960 --> 10:28.960
Wir haben das schon mal gemacht.

10:28.960 --> 10:29.960
Allerdings nicht asynchron.

10:29.960 --> 10:33.960
Also wir haben das letzte Mal auch schon einen Webserver gebaut.

10:33.960 --> 10:36.960
Der dann über Websocket.

10:36.960 --> 10:38.960
Über Websocket Sachen ausgeliefert hat und so.

10:38.960 --> 10:40.960
Das ist echt ganz angenehm zu programmieren.

10:40.960 --> 10:41.960
ESP, EDF.

10:41.960 --> 10:43.960
Ist ganz okay, ja.

10:43.960 --> 10:50.960
Also ist eines der angenehmsten Frameworks, die ich da kenne in der Richtung.

10:50.960 --> 10:53.960
Und ich hab das Projekt vom letzten Mal genommen.

10:53.960 --> 10:55.960
Hab einfach alles andere sonst rausgelöscht.

10:55.960 --> 10:58.960
Und das ist alles, was wir gerade aktuell haben.

10:58.960 --> 11:00.960
Mehr gibt's nicht.

11:00.960 --> 11:03.960
Und den Rest lass ich drinne.

11:03.960 --> 11:05.960
Weil ich reverte das danach auch wieder, wenn's funktioniert.

11:05.960 --> 11:08.960
Und bau das ins richtige Projekt ein.

11:08.960 --> 11:09.960
Also das Ziel ist heute folgendes.

11:09.960 --> 11:11.960
Und zwar.

11:11.960 --> 11:14.960
Wir wollen einen HTTP Post Request bekommen.

11:14.960 --> 11:15.960
Auf dem.

11:15.960 --> 11:18.960
Also hier schicken wir einen per Curl oder so.

11:18.960 --> 11:23.960
Wir schicken einen HTTP Post Request an den Microcontroller.

11:23.960 --> 11:26.960
Auf dem ein Webserver läuft.

11:26.960 --> 11:30.960
Und dieser Post Request soll asynchron bearbeitet werden.

11:30.960 --> 11:35.960
Also nicht, dass der Webserver hängt beim bearbeiten.

11:35.960 --> 11:38.960
Sondern, dass er noch weitere Requests bearbeiten kann.

11:38.960 --> 11:41.960
Während er den Post Request verarbeitet.

11:41.960 --> 11:43.960
Um das zu testen.

11:43.960 --> 11:45.960
Werden wir einfach mal.

11:45.960 --> 11:46.960
Keine Ahnung.

11:46.960 --> 11:48.960
1, 2 MB.

11:48.960 --> 11:52.960
Oder 500 KB große Dummy-Files hochladen.

11:52.960 --> 11:54.960
Mit denen wir nichts machen.

11:54.960 --> 11:55.960
Die wir einfach nur einlesen und wegschmeißen.

11:55.960 --> 11:56.960
Aber das ist jetzt ganz neu.

11:56.960 --> 11:58.960
Und zwar.

11:58.960 --> 12:00.960
Sieht man das auch hier.

12:00.960 --> 12:03.960
Das gibt's quasi erst seit ein paar Wochen.

12:03.960 --> 12:05.960
Dementsprechend keine Ahnung, wie gut das funktioniert.

12:05.960 --> 12:06.960
Ich kann euch mal ein Beispiel zeigen.

12:06.960 --> 12:07.960
Wie das.

12:07.960 --> 12:10.960
Von der Theorie her am Ende aussieht.

12:10.960 --> 12:12.960
Das ist übrigens auch ganz gut.

12:12.960 --> 12:15.960
Die haben für das meiste ziemlich gute Beispiele.

12:15.960 --> 12:17.960
Die China-Chinesen von Espressif.

12:17.960 --> 12:19.960
So, gucken wir mal hier.

12:19.960 --> 12:21.960
HTTP-Webserver.

12:21.960 --> 12:26.970
Async-Handlers.

12:26.970 --> 12:28.970
Also von der Idee her.

12:28.970 --> 12:30.970
Ist nicht ganz sonderlich übersichtlich.

12:30.970 --> 12:31.970
Von der Idee her.

12:31.970 --> 12:32.970
Das müssen wir jetzt auch machen.

12:32.970 --> 12:34.970
Dass das WiFi funktioniert.

12:34.970 --> 12:37.970
Von der Idee her sieht das dann irgendwie.

12:37.970 --> 12:38.970
So aus.

12:38.970 --> 12:39.970
Man macht irgendwie.

12:39.970 --> 12:46.940
Man macht irgendeinen Threadpool auf.

12:46.940 --> 12:48.940
Und dann.

12:48.940 --> 12:50.940
Muss man ihm sagen.

12:50.940 --> 12:53.940
Dass man diesen Request irgendwie Async handhaben will.

12:53.940 --> 12:54.940
Und whatever.

12:54.940 --> 12:56.940
Ich hab's mir selbst noch nicht so genau angeguckt.

12:56.940 --> 13:00.940
Aber ich bin mal gespannt, wie das funktioniert.

13:00.940 --> 13:01.940
Ich hab.

13:01.940 --> 13:02.940
Dass man auch durchblickt.

13:02.940 --> 13:04.940
Eigentlich noch nichts drinne.

13:04.940 --> 13:06.940
Ich habe im Prinzip nur ein leeres Projekt.

13:06.940 --> 13:07.940
Wenn man so will.

13:07.940 --> 13:08.940
Ja.

13:08.940 --> 13:09.940
Also ich habe eine Main-Datei.

13:09.940 --> 13:10.940
Ich habe eine Secrets.

13:10.940 --> 13:11.940
Ich habe eine Secrets.h-Datei.

13:11.940 --> 13:12.940
Da steht mein Webserver.

13:12.940 --> 13:13.940
Da steht meine WLAN.

13:13.940 --> 13:14.940
Meine WLAN-SSID.

13:14.940 --> 13:15.940
Und meine.

13:15.940 --> 13:16.940
Mein WLAN-Passwort drinne.

13:16.940 --> 13:17.940
Für ich.

13:17.940 --> 13:18.940
Das ist.

13:18.940 --> 13:19.940
Aber wie gesagt.

13:19.940 --> 13:20.940
Wenn ich's leake.

13:20.940 --> 13:21.940
Ist das nicht schlimm.

13:21.940 --> 13:22.940
Das ist bloß ein Test.

13:22.940 --> 13:23.940
WLAN.

13:23.940 --> 13:24.940
Nenn ich das.

13:24.940 --> 13:25.940
Der Chat gleich wieder eskaliert.

13:25.940 --> 13:26.940
Und sagt.

13:26.940 --> 13:27.940
Ha.

13:27.940 --> 13:28.940
Leaked Max.

13:28.940 --> 13:29.940
Ich bin drin.

13:29.940 --> 13:32.940
Ich kann das einfach ausschalten.

13:32.940 --> 13:33.940
Dann passiert nichts.

13:33.940 --> 13:39.660
Außerdem kommt mein WLAN eh nirgends wo hin.

13:39.660 --> 13:40.660
Ja.

13:40.660 --> 13:41.660
Und von der Idee her.

13:41.660 --> 13:43.660
Können wir das gerade mal machen.

13:43.660 --> 13:46.000
Von der Idee her.

13:46.000 --> 13:48.000
Ist das nicht viel mehr als so eine Art Hello World Projekt.

13:48.000 --> 13:49.000
Was ich hier hab.

13:49.000 --> 13:50.000
Flash.

13:50.000 --> 13:55.720
Wir flashen das mal auf den Microcontroller.

13:55.720 --> 13:56.720
Der.

13:56.720 --> 13:59.420
Nicht funktioniert.

13:59.420 --> 14:00.420
Ah.

14:00.420 --> 14:01.420
Ich bin im falschen Verzeichnis.

14:01.420 --> 14:04.820
Äh.

14:04.820 --> 14:05.820
Der nicht eingehängt ist.

14:05.820 --> 14:13.220
Das da ist das richtige.

14:13.220 --> 14:14.220
Das muss man auch wissen.

14:14.220 --> 14:15.220
Steht nicht dran.

14:15.220 --> 14:16.220
Nun.

14:16.220 --> 14:17.220
So.

14:17.220 --> 14:18.220
Wir flashen das jetzt mal.

14:18.220 --> 14:22.880
Auf den Microcontroller drauf.

14:22.880 --> 14:23.880
Und.

14:23.880 --> 14:24.880
Ich hoffe man erkennt was.

14:24.880 --> 14:25.880
Wenn nicht mach ich das ein bisschen größer.

14:25.880 --> 14:26.880
Wenn nicht machen wir das einfach hier.

14:26.880 --> 14:27.880
Ich glaub wir machen's hier.

14:27.880 --> 14:30.420
Ja.

14:30.420 --> 14:31.420
Ich.

14:31.420 --> 14:32.420
Wir machen's.

14:32.420 --> 14:36.170
Flash.

14:36.170 --> 14:37.170
So.

14:37.170 --> 14:38.170
Wir flashen das jetzt auf den Microcontroller drauf.

14:38.170 --> 14:39.170
Und man sieht.

14:39.170 --> 14:42.170
Das der aktuell eigentlich nichts macht.

14:42.170 --> 14:43.170
Außer hier.

14:43.170 --> 14:44.170
Alle halbe Sekunde einmal Tick auszugeben.

14:44.170 --> 14:45.170
Das sieht man da.

14:45.170 --> 14:47.450
Ansonsten macht der nur ein bisschen Init Kram.

14:47.450 --> 14:48.450
Komm.

14:48.450 --> 14:49.450
Wir machen hier das Terminal einfach zu.

14:49.450 --> 14:50.450
Wir machen das hier im Fullscreen.

14:50.450 --> 14:51.450
Dann erkennt man's auch besser.

14:51.450 --> 14:52.450
Also im Prinzip passiert noch gar nix.

14:52.450 --> 14:53.450
Der initialisiert seinen Flash.

14:53.450 --> 14:54.450
Der initialisiert das ganze Netzwerk.

14:54.450 --> 14:55.450
Wifi Zeug.

14:55.450 --> 14:56.450
Der legt.

14:56.450 --> 14:57.450
Die ESP EDF Event Loop an.

14:57.450 --> 14:58.450
Wo man dann auch noch mal.

14:58.450 --> 14:59.450
So.

14:59.450 --> 15:00.450
So.

15:00.450 --> 15:01.450
So.

15:01.450 --> 15:02.450
So.

15:02.450 --> 15:05.150
So.

15:05.150 --> 15:06.150
So.

15:06.150 --> 15:07.150
So.

15:07.150 --> 15:08.150
Und dann kommt das auf Event Loop an.

15:08.150 --> 15:09.150
Wo man dann gucken kann.

15:09.150 --> 15:10.150
Was auf dem Controller.

15:10.150 --> 15:11.150
Also asynchron gucken kann.

15:11.150 --> 15:12.150
Was auf dem Controller passiert.

15:12.150 --> 15:13.150
Und sagt.

15:13.150 --> 15:14.150
Wir wollen benachrichtigt werden.

15:14.150 --> 15:15.150
Bei jedem Event.

15:15.150 --> 15:16.150
Event ist sowas wie.

15:16.150 --> 15:18.690
WLAN Interface hoch und runter gefahren.

15:18.690 --> 15:19.690
Und sowas.

15:19.690 --> 15:22.150
Und ansonsten gibt der alle halbe Sekunde Tick aus.

15:22.150 --> 15:23.150
Das war's.

15:23.150 --> 15:25.150
Mehr passiert noch nicht.

15:25.150 --> 15:26.150
Und.

15:26.150 --> 15:29.150
Probieren wir das einfach mal aus.

15:29.150 --> 15:36.640
Ausdrinken.

15:36.640 --> 15:37.640
Es ist by the way.

15:37.640 --> 15:38.640
Weil das jemand geschrieben hat.

15:38.640 --> 15:41.500
Im Chat.

15:41.500 --> 15:43.060
Es ist ein reines C Framework.

15:43.060 --> 15:45.500
Es ist also nicht wirklich richtig.

15:45.500 --> 15:46.500
Asynchrones.

15:46.500 --> 15:47.500
C++.

15:47.500 --> 15:48.500
Es ist.

15:48.500 --> 15:49.500
Asynchrones.

15:49.500 --> 15:50.500
C in C++.

15:50.500 --> 15:51.500
Ja.

15:51.500 --> 15:57.520
Mit Rust.

15:57.520 --> 15:58.520
Haben wir es auch schon probiert.

15:58.520 --> 15:59.520
In ESP32.

15:59.520 --> 16:00.520
Zu programmieren.

16:00.520 --> 16:01.520
Das ging.

16:01.520 --> 16:02.520
Für das.

16:02.520 --> 16:03.520
Wie.

16:03.520 --> 16:04.520
Kurz.

16:04.520 --> 16:05.520
Ist dieses Projekt.

16:05.520 --> 16:06.520
Quasi.

16:06.520 --> 16:07.520
Erst gibt.

16:07.520 --> 16:08.520
Erstaunlich gut.

16:08.520 --> 16:09.520
Aber insgesamt.

16:09.520 --> 16:10.520
Fehlt da noch einiges.

16:10.520 --> 16:11.520
Was wir kommen.

16:11.520 --> 16:12.520
Ja.

16:12.520 --> 16:17.940
C++.

16:17.940 --> 16:18.940
Leider.

16:18.940 --> 16:19.940
Nicht.

16:19.940 --> 16:20.940
Vorbei.

16:20.940 --> 16:21.940
Ich würde gar keinen empfehlen.

16:21.940 --> 16:22.940
Ich habe auch keinen mehr.

16:22.940 --> 16:23.940
Wenn ich einen empfehle.

16:23.940 --> 16:24.940
Wenn ich einen mit.

16:24.940 --> 16:25.940
Automatischer.

16:25.940 --> 16:26.940
Staubsauger holen würde.

16:26.940 --> 16:27.940
Dann einen mit.

16:27.940 --> 16:28.940
Automatischer.

16:28.940 --> 16:29.940
Entleerstation.

16:29.940 --> 16:30.940
Das war so das.

16:30.940 --> 16:31.940
Woran es bei mir.

16:31.940 --> 16:32.940
Dann am Ende.

16:32.940 --> 16:33.940
Auch.

16:33.940 --> 16:34.940
Hakte.

16:34.940 --> 16:35.940
Ich habe.

16:35.940 --> 16:36.940
Ich hatte.

16:36.940 --> 16:37.940
Ich hatte keinen Bock.

16:37.940 --> 16:38.940
Das Ding.

16:38.940 --> 16:39.940
Regelmäßig sauber zu machen.

16:39.940 --> 16:40.940
Ich.

16:40.940 --> 16:41.940
Ich.

16:41.940 --> 16:42.940
Ich.

16:42.940 --> 16:43.940
Persönlich.

16:43.940 --> 16:44.940
Finde es immer noch angenehmer.

16:44.940 --> 16:45.940
Einfach.

16:45.940 --> 16:49.630
Mal hier schnell.

16:49.630 --> 16:50.630
Im Staubsauger.

16:50.630 --> 16:51.630
Durch zu rennen.

16:51.630 --> 16:52.630
Anstatt.

16:52.630 --> 16:53.630
Ja.

16:53.630 --> 16:54.630
Das heißt.

16:54.630 --> 16:55.630
Dass der Roboter.

16:55.630 --> 16:56.630
Das Ding.

16:56.630 --> 16:57.630
Raus holen.

16:57.630 --> 16:58.630
Umdrehen.

16:58.630 --> 16:59.630
Staub raus machen.

16:59.630 --> 17:00.630
Und so.

17:00.630 --> 17:01.630
Also.

17:01.630 --> 17:02.630
Wenn.

17:02.630 --> 17:03.630
Dann nur.

17:03.630 --> 17:04.630
Einen mit.

17:04.630 --> 17:05.630
Basisstation.

17:05.630 --> 17:06.630
Den sauber machte.

17:06.630 --> 17:07.630
Wurde dann quasi.

17:07.630 --> 17:08.630
Nur einmal die Woche.

17:08.630 --> 17:09.630
Oder alle 14 Tage.

17:09.630 --> 17:10.630
Je nachdem.

17:10.630 --> 17:11.630
Wie oft es fahren lässt.

17:11.630 --> 17:12.630
Den.

17:12.630 --> 17:13.630
Die Tonne ausleerst.

17:13.630 --> 17:14.630
Gut ist.

17:14.630 --> 17:15.630
Das ist okay.

17:15.630 --> 17:16.630
Ansonsten.

17:16.630 --> 17:17.630
Wirklich.

17:17.630 --> 17:18.630
Großartig.

17:18.630 --> 17:19.630
Empfehlen.

17:19.630 --> 17:20.630
Kann ich.

17:20.630 --> 17:21.630
Kein.

17:21.630 --> 17:22.630
Weil.

17:22.630 --> 17:23.630
Ich habe keinen mehr.

17:23.630 --> 17:24.630
Und.

17:24.630 --> 17:25.630
Noch.

17:25.630 --> 17:26.630
Bock drauf.

17:26.630 --> 17:27.630
Habt ihr.

17:27.630 --> 17:28.630
Zu benutzen.

17:28.630 --> 17:29.630
Das funktioniert.

17:29.630 --> 17:41.730
Alles.

17:41.730 --> 17:42.730
Nur mit.

17:42.730 --> 17:43.730
China Chinesen.

17:43.730 --> 17:44.730
Cloud.

17:44.730 --> 17:45.730
Und.

17:45.730 --> 17:46.730
Das sagt.

17:46.730 --> 17:47.730
Du.

17:47.730 --> 17:48.730
Bist.

17:48.730 --> 17:49.730
Doch.

17:49.730 --> 17:50.730
Der.

17:50.730 --> 17:51.730
Meister.

17:51.730 --> 17:52.730
Max.

17:52.730 --> 17:53.730
Naja.

17:53.730 --> 17:54.730
Ich.

17:54.730 --> 17:55.730
Verdiene.

17:55.730 --> 17:56.730
Mein.

17:56.730 --> 17:57.730
Geld.

17:57.730 --> 17:58.730
Mit.

17:58.730 --> 18:01.200
Das.

18:01.200 --> 18:02.200
Heißt.

18:02.200 --> 18:03.200
Er.

18:03.200 --> 18:06.320
Noch.

18:06.320 --> 18:07.320
Lange.

18:07.320 --> 18:08.320
Nicht.

18:08.320 --> 18:09.320
Wie.

18:09.320 --> 18:10.320
Ist.

18:10.320 --> 18:11.320
Dieses.

18:11.320 --> 18:12.320
Kram.

18:12.320 --> 18:14.790
Wie.

18:14.790 --> 18:15.790
Ist.

18:15.790 --> 18:16.790
Dieses.

18:16.790 --> 18:17.790
Zeug.

18:17.790 --> 18:18.790
Nicht.

18:18.790 --> 18:19.790
Temo.

18:19.790 --> 18:20.790
Temo.

18:20.790 --> 18:21.790
Ist.

18:21.790 --> 18:22.790
Eine.

18:22.790 --> 18:23.790
Eigene.

18:23.790 --> 18:24.790
Firma.

18:24.790 --> 18:25.790
Gibt.

18:25.790 --> 18:26.790
Sich.

18:26.790 --> 18:27.790
Mehr.

18:27.790 --> 18:28.790
Für.

18:28.790 --> 18:29.790
Die.

18:29.790 --> 18:30.790
Neuen.

18:30.790 --> 18:31.790
Tuja.

18:31.790 --> 18:34.520
Meine.

18:34.520 --> 18:35.520
Ich.

18:35.520 --> 18:36.520
Tuja.

18:36.520 --> 18:37.520
Tuja.

18:37.520 --> 18:38.520
Ist.

18:38.520 --> 18:43.160
So.

18:43.160 --> 18:44.160
Noch.

18:44.160 --> 18:45.160
Nicht.

18:45.160 --> 18:46.160
So.

18:46.160 --> 18:47.160
Entscheiden.

18:47.160 --> 18:48.160
Ist.

18:48.160 --> 18:49.160
Am.

18:49.160 --> 18:50.160
Ende.

18:50.160 --> 18:51.160
Ob.

18:51.160 --> 18:52.160
Man.

18:52.160 --> 18:53.160
Grafana.

18:53.160 --> 18:54.160
Benutzt.

18:54.160 --> 18:55.160
Oder.

18:55.160 --> 18:56.160
Nicht.

18:56.160 --> 18:57.160
Wichtig.

18:57.160 --> 18:58.160
Ist.

18:58.160 --> 18:59.160
Wie.

18:59.160 --> 19:00.160
Man.

19:00.160 --> 19:01.160
Seine.

19:01.160 --> 19:02.160
Metriken.

19:02.160 --> 19:03.160
Und.

19:03.160 --> 19:04.160
Seine.

19:04.160 --> 19:05.160
Werte.

19:05.160 --> 19:09.970
Bekommt.

19:09.970 --> 19:10.970
Seine.

19:10.970 --> 19:11.970
Traces.

19:11.970 --> 19:18.860
Und.

19:18.860 --> 19:19.860
Seine.

19:19.860 --> 19:20.860
Metriken.

19:20.860 --> 19:21.860
Und.

19:21.860 --> 19:24.780
Seine.

19:24.780 --> 19:25.780
Werte.

19:25.780 --> 19:26.780
Und.

19:26.780 --> 19:27.780
Seine.

19:27.780 --> 19:28.780
Werte.

19:28.780 --> 19:35.600
Die.

19:35.600 --> 19:36.600
Die.

19:36.600 --> 19:37.600
Und.

19:37.600 --> 19:42.090
Seine.

19:42.090 --> 19:43.090
Werte.

19:43.090 --> 19:44.090
Ist.

19:44.090 --> 19:45.090
Das.

19:45.090 --> 19:46.090
Ist.

19:46.090 --> 19:47.090
Er.

19:47.090 --> 19:48.090
Ist.

19:48.090 --> 19:49.090
Es.

19:49.090 --> 19:50.090
Noch.

19:50.090 --> 19:51.090
Ein.

19:51.090 --> 19:52.090
Zehn.

19:52.090 --> 19:53.090
Es.

19:53.090 --> 19:54.090
Zehn.

19:54.090 --> 19:57.400
Und.

19:57.400 --> 19:58.400
Zwei.

19:58.400 --> 19:59.400
Und.

19:59.400 --> 20:00.400
Zehn.

20:00.400 --> 20:01.400
Und.

20:01.400 --> 20:02.400
Zehn.

20:02.400 --> 20:03.400
Und.

20:03.400 --> 20:04.400
Zwei.

20:04.400 --> 20:05.400
Zwei.

20:05.400 --> 20:06.720
Was habe ich denn für eins installiert?

20:06.880 --> 20:07.360
Zeig mal her.

20:15.980 --> 20:16.720
Ja, wo habe ich denn das?

20:19.060 --> 20:19.380
Okay.

20:19.860 --> 20:20.440
Und wo sind wir hier?

20:20.520 --> 20:22.600
Home, Max, ESP.

20:23.600 --> 20:26.220
Ja, das ist ziemlich dämlich, das da hin zu installieren.

20:28.830 --> 20:28.910
Okay.

20:29.470 --> 20:30.230
Git, Clone.

20:30.730 --> 20:31.310
Da haben wir es doch.

20:31.390 --> 20:31.490
So.

20:31.850 --> 20:35.450
Nicht 514, sondern V53.

20:41.890 --> 20:42.730
Wie hieß das Ding?

20:43.150 --> 20:45.430
Was ich gesagt habe, was erst seit ein paar Tagen raus ist.

20:47.730 --> 20:48.290
Nicht wie dieses.

20:49.050 --> 20:49.290
Ähm.

20:49.970 --> 20:50.090
Ja.

20:54.680 --> 20:55.320
V53RC1.

20:55.880 --> 20:57.520
Was ist hier die Mission?

20:58.320 --> 21:04.040
Heute ist die Mission, an einen ESP32 einen HTTP Post Request zu schicken.

21:04.180 --> 21:05.120
Allerdings asynchron.

21:05.580 --> 21:12.120
Weil ich habe gesehen, dass die im neuen ESP-IDF einen asynchronen Web-Server drin haben.

21:12.280 --> 21:13.100
Das wollte ich mal ausprobieren.

21:13.520 --> 21:17.860
Web-Server habe ich damit schon gemacht, aber noch nie asynchrones Request-Handling benutzt.

21:17.940 --> 21:23.800
Also sprich, dass man mehrere, sodass der Web-Server auf dem Microcontroller nicht mehr hängt beim Bearbeiten eines Requests,

21:23.800 --> 21:25.800
sondern man theoretisch auch zwei, drei Sachen gleichzeitig schickt.

21:25.880 --> 21:41.620
Warum man das unbedingt auf dem Microcontroller braucht, kann man sich darüber streiten, aber ist auf jeden Fall nice.

21:44.300 --> 21:46.020
Dann nenne ich das mal so wie den Ordner hier.

21:46.640 --> 21:47.080
Clone.

21:48.380 --> 21:50.380
Max, hast du schon mal einen Fuß vor die Tür gesetzt?

21:50.480 --> 21:51.040
Nein, noch nie.

21:51.880 --> 21:52.100
Never.

21:55.690 --> 21:59.990
Punktiert das auch agentless oder ohne in seiner Anwendung aktiv was ändern zu müssen?

22:03.390 --> 22:05.150
Also, lassen wir mal Grafana außen vor.

22:05.150 --> 22:05.210
Ja.

22:06.470 --> 22:09.150
Wenn du Metriken sammeln willst, gibt es ja immer...

22:09.990 --> 22:22.190
Das Problem ist, wie bekommst du deine Metriken und ganz ohne Agents, beziehungsweise ganz ohne, dass deine Anwendung irgendwas macht, geht das nicht.

22:22.390 --> 22:23.950
Wie willst du da an irgendwas drankommen, ja?

22:24.770 --> 22:31.250
Also, klassische Art und Weise Monitoring war, so man fragt von außen.

22:31.250 --> 22:38.810
Man hat irgendeinen zentralen Server, sowas wie Zappix oder Nagios oder so und die fragen von außen die Systeme ab.

22:39.010 --> 22:39.970
So, pink das Ding.

22:39.990 --> 22:41.630
Ist der SSH-Port offen?

22:41.790 --> 22:44.730
Gibt es eine Web-Response auf Port 443 und sowas in der Richtung?

22:44.850 --> 22:46.030
Irgendwie über HTTPS.

22:46.630 --> 22:47.630
Funktioniert der Handshake?

22:48.010 --> 22:51.470
So, das war so ganz klassisches Monitoring, wie man das früher gemacht hat.

22:52.150 --> 22:54.350
So von außen, so ein bisschen Blackbox-mäßig, ja?

22:54.430 --> 22:57.850
Also, man hat sich von außen angeguckt, ist die Domain erreichbar, ist der Port offen, solche Geschichten.

22:58.310 --> 23:05.770
Das funktioniert natürlich auch nach wie vor und das funktioniert auch agentless in dem Sinn, weil das macht zentral deinen Server aus.

23:05.990 --> 23:08.090
Ob du jetzt den Server als Agent siehst oder nicht.

23:08.090 --> 23:09.470
Also, du musst zumindest nichts installieren.

23:09.990 --> 23:15.090
Sobald du aber ein bisschen mehr Details haben willst, hast du damals auch schon einen Agent gebraucht.

23:15.410 --> 23:23.750
Nämlich, wenn du beispielsweise wissen wolltest, wie ist die RAM-Auslastung auf meinen Servern, wie ist die Festplatten-Auslastung, wie viele Prozesse laufen, wie ist der Load.

23:24.190 --> 23:29.930
Dann musstest du auch in Zeiten von Nagios oder Zappix oder was auch immer, musstest du einen Agent installieren.

23:30.870 --> 23:37.330
Der Unterschied war, dass der Agent meistens die Sachen zurück an den Server geschickt hat.

23:37.330 --> 23:42.630
Oder der Server den Agent alle paar Minuten abgefragt hat.

23:44.630 --> 23:46.790
Also, du hast damals auch schon einen Agent gebraucht.

23:46.890 --> 23:48.210
Heute gibt es zwei Varianten.

23:49.030 --> 23:52.390
Also, bleiben wir mal bei einer, die relativ verbreitet ist.

23:54.150 --> 23:56.810
Und zwar, wenn du die Sachen über Prometheus einsammelst.

23:57.150 --> 23:59.910
Prometheus ist ein Pull-basiertes Verfahren.

24:00.030 --> 24:03.850
Das heißt, der Prometheus-Server fragt Metriken ab.

24:04.010 --> 24:06.850
Du brauchst keinen Agent, der Metriken an Prometheus schickt.

24:06.850 --> 24:07.130
Du brauchst keinen Agent, der Metriken an Prometheus schickt.

24:07.130 --> 24:07.210
Du brauchst keinen Agent, der Metriken an Prometheus schickt.

24:07.210 --> 24:07.310
Du brauchst keinen Agent, der Metriken an Prometheus schickt.

24:07.330 --> 24:09.490
Sondern Prometheus fragt die ab.

24:09.730 --> 24:14.250
Aber trotzdem braucht Prometheus was, wo es die Metriken abfragt.

24:15.830 --> 24:20.570
Das kann ein Exporter sein, wie das Prometheus nennt.

24:20.870 --> 24:26.610
Das ist quasi ein Agent, nur nicht wirklich ein Agent, wie man es kennt von früher.

24:26.790 --> 24:30.730
Sondern halt irgendwas mit einem Web-Endpunkt, den Prometheus crawlen kann.

24:31.790 --> 24:32.450
Das gibt es.

24:32.450 --> 24:35.830
Oder aber deine Anwendung.

24:36.250 --> 24:37.310
Brauch aktiv.

24:37.310 --> 24:46.450
Wenn deine Anwendung einen Matrix-Endpoint hat, wo es Prometheus-kompatible Werte zurückliefert,

24:46.510 --> 24:48.890
dann kannst du die auch abfragen ohne Agent auf dem Server.

24:49.010 --> 24:50.410
Aber das muss dann deine Anwendung unterstützen.

24:51.170 --> 24:59.150
Also wenn es dir nicht reicht, dass du einfach Blackbox-mäßig von außen drauf guckst auf deinen Server,

24:59.830 --> 25:04.930
sondern wissen willst, was auf deinem Server passiert oder Metriken von deiner Anwendung einsammeln willst,

25:04.930 --> 25:06.910
dann brauchst du entweder einen Agent auf dem Server.

25:07.310 --> 25:12.710
Oder deine Anwendung muss aktiv Metriken an irgendeinem Endpunkt bereitstellen, dass das funktioniert.

25:12.850 --> 25:14.950
Anders kann es ja auch gar nicht funktionieren.

25:22.090 --> 25:22.170
Ja.

25:23.830 --> 25:24.610
Ja gut, das stimmt.

25:24.670 --> 25:25.590
Das kannst du natürlich auch machen.

25:25.670 --> 25:27.850
Du kannst dich auch bei SSH darauf einloggen und dann was abfragen.

25:28.190 --> 25:28.890
Das geht auch.

25:30.810 --> 25:35.990
Das ist dann die Extended-Variante von Server fragt alle 5 Minuten ab.

25:35.990 --> 25:38.870
Server führt alle 5 Minuten den SSH-Check aus oder so.

25:42.360 --> 25:45.580
Mit SNMP kriegst du aber auch nicht raus, ob das funktioniert.

25:46.040 --> 25:50.980
Das heißt, wenn du deine Anwendung jetzt 3 Garbage-Collect-Runs hatte in den letzten 2 Minuten oder sowas.

25:50.980 --> 25:55.220
Also, letztendlich, es ist vielfältig, was du machen kannst.

25:55.220 --> 25:58.880
Du musst wissen, und das ist das, was irgendwie oftmals nicht richtig gemacht wird,

25:58.880 --> 26:00.220
du musst wissen, was du eigentlich haben willst.

26:00.220 --> 26:04.400
Ich habe das schon so oft erlebt, dass irgendwie 30 Milliarden Metriken eingesammelt werden.

26:04.400 --> 26:07.040
Davon ist eigentlich nur 2 relevant und der Rest ist Rauschen.

26:07.040 --> 26:13.340
Tracing und Profiling, da brauchst du einen Agent.

26:13.340 --> 26:15.340
Ne, da brauchst du keinen Agent für.

26:15.340 --> 26:17.340
Deine Anwendung muss das können.

26:17.340 --> 26:19.180
Und da gibt es eigentlich so ein bisschen eine Art, dass du da so eine Anwendung hast,

26:19.180 --> 26:19.320
dass du da so eine Anwendung hast, dass du da so eine Anwendung hast, dass du da so eine Anwendung hast,

26:19.320 --> 26:19.620
dass du da so eine Anwendung hast, dass du da so eine Anwendung hast, dass du da so eine Anwendung hast,

26:19.620 --> 26:22.620
Stichwort wurde nachgucken kannst Open Telemetry.

26:22.620 --> 26:27.220
Das gibt's für nahezu alle Programmiersprachen gibt's Implementierung von Open Telemetry.

26:27.220 --> 26:33.320
Open Telemetry hat 3 Dinger hat Traces, Logs und Metrix.

26:33.320 --> 26:43.940
Du musst Open Telemetry in deine Anwendung einbauen,

26:43.940 --> 26:50.910
und die kannst du dann collecten, wie du willst.

26:50.910 --> 26:57.960
Wahrscheinlich am ehesten über den Open Telemetry Agent,

26:57.960 --> 27:04.610
geht auch anders aber wenn du tracing machen willst das muss auf jeden fall

27:04.610 --> 27:12.900
deine anwendung unterstützen da musste ich mit dem thema open telemetry

27:12.900 --> 27:17.460
beschäftigen das ist so das stichwort was du googeln kannst und dir tutorials

27:17.460 --> 27:27.330
zu angucken ja ja ja tritt ich weiß es ja open telemetry heißt das da musst du

27:27.330 --> 27:35.930
danach suchen auch immer das klonen hat funktioniert

27:35.930 --> 27:48.960
v 5.3 rc1 wunderbar und jetzt install esp 32 s3 und dann stellen wir das ganze

27:48.960 --> 27:55.320
schon mal um auf die neueste esp version wobei ha moment wir können erst mal

27:55.320 --> 28:02.000
arduino rausschmeißen button rausschmeißen arduino jason

28:02.000 --> 28:06.300
rausschmeißen das brauchen wir jetzt alles nett required edf version juckt

28:06.300 --> 28:09.940
mich nett aber das alte mal ein bisschen

28:09.940 --> 28:10.100
schlecht

28:10.120 --> 28:21.980
schlanker ich habe ich eher das geschriebenen titel weil ich den eindruck

28:21.980 --> 28:29.220
habe c++ generell fühlt sich an wie auf wish bestellt so und jetzt switchen wir

28:29.220 --> 28:37.790
mal auf die neueste also esp welchem ordner habe ich das jetzt gemacht hier

28:37.790 --> 28:50.570
v3 export export punkt sh voll clean wird ob das jetzt noch bildet ob das

28:50.570 --> 28:50.730
funktioniert oder nicht und dann schau mal ob das jetzt noch bildet ob das von

28:50.730 --> 29:16.510
funktioniert okay wir benutzen die 53 rc1 scheint noch zu funktionieren flash

29:16.510 --> 29:20.630
es ist jetzt neu dass das hier in einer zeit okay es kompiliert noch auch mit

29:20.630 --> 29:24.350
53 das schon mal gut ich meine man kann es jetzt fragen es gibt nicht viel was

29:24.350 --> 29:29.690
nicht kompilieren könnte aber bei ssc plus plus man weiß nie doch da lasst uns

29:29.690 --> 29:34.610
mal schauen wie wir uns jetzt ins wlan verbinden da kann ich ein bisschen spicken

29:34.610 --> 29:35.310
da kann ich ein bisschen spicken da kann ich ein bisschen spicken da kann ich ein bisschen spicken

29:35.310 --> 29:52.580
muss ich auch und zwar da kann ich ein bisschen abgucken weil das habe ich

29:52.580 --> 30:00.100
gestern schon gemacht also wlan sich zu verbinden auf diesem controller ist mit

30:00.100 --> 30:09.890
dem standard arduino package mega easy da sagt man einfach wifi punkt beginn

30:09.890 --> 30:15.510
ssd passwort fertig mehr muss man nicht machen so einfach ist das mit esp edf

30:15.510 --> 30:19.240
natürlich nicht ob wir es lieben

30:19.680 --> 30:20.180
natürlich nicht ob wir es lieben

30:20.180 --> 30:27.940
das wäre das wäre zu einfach deswegen muss man da ein bisschen mehr machen aber

30:27.940 --> 30:27.960
das wäre das wäre zu einfach deswegen muss man da ein bisschen mehr machen aber

30:27.960 --> 30:36.190
ich finde es auch nicht schlecht gelöst ich mal kurz gucken

30:36.190 --> 30:36.210
ich finde es auch nicht schlecht gelöst ich mal kurz gucken

30:36.210 --> 31:00.600
ok also wifi connect excellent ok ich dann gucken wir das jetzt mal ab wie

31:00.600 --> 31:00.620
ok also wifi connect excellent ok ich dann gucken wir das jetzt mal ab wie

31:00.620 --> 31:02.600
ok also wifi connect excellent ok ich dann gucken wir das jetzt mal ab wie bugfrei das funktioniert weiß ich nicht das habe

31:02.600 --> 31:02.620
bugfrei das funktioniert weiß ich nicht das habe

31:02.620 --> 31:03.380
bugfrei das funktioniert weiß ich nicht das habe ich gestern auf die schnelle

31:03.380 --> 31:03.400
ich gestern auf die schnelle

31:03.400 --> 31:04.720
ich gestern auf die schnelle zusammen gewurschtelt und das hat

31:04.720 --> 31:04.740
zusammen gewurschtelt und das hat

31:04.740 --> 31:08.080
zusammen gewurschtelt und das hat funktioniert also ich kann das eigentlich

31:08.080 --> 31:08.100
funktioniert also ich kann das eigentlich

31:08.100 --> 31:10.040
copy-pasten, dann halten wir uns nicht so lange

31:10.040 --> 31:14.320
damit auf. Das hier braucht

31:14.320 --> 31:16.140
man, um sich mit dem WLAN zu verbinden.

31:20.090 --> 31:21.630
Warum da solche ekligen Sachen

31:21.630 --> 31:23.410
notwendig sind? Weil

31:23.410 --> 31:24.570
C++, keine Ahnung.

31:27.730 --> 31:29.490
Ich weiß, ich weiß

31:29.490 --> 31:30.610
grob, was es macht,

31:31.610 --> 31:32.850
aber warum?

31:33.850 --> 31:34.890
Ey, keine Ahnung.

31:38.400 --> 31:40.040
By the way, warum?

31:40.540 --> 31:42.240
Ich halte mal eine ernst gemeinte Frage,

31:42.360 --> 31:43.680
vielleicht auch an die C++-Kenner.

31:44.800 --> 31:46.340
Warum gibt es in C++

31:46.340 --> 31:48.640
so viele Varianten

31:48.640 --> 31:49.800
irgendwas zu casten?

31:50.500 --> 31:52.200
Was ist denn nur mit casten los?

31:52.620 --> 31:53.960
Was ist denn so schlimm dran,

31:54.580 --> 31:55.220
zu sagen,

31:58.910 --> 32:01.450
wir casten das zu einem Character-Array?

32:02.630 --> 32:03.170
Das ist

32:03.170 --> 32:04.410
sogar noch schöner lesbar.

32:05.890 --> 32:07.170
Ja, wahrscheinlich überspringt

32:07.170 --> 32:08.690
man damit irgendwelche

32:08.690 --> 32:10.650
Compile-Time-Checks,

32:11.690 --> 32:13.310
aber nachdem C++

32:13.310 --> 32:14.810
eh unmöglich ist,

32:18.600 --> 32:20.660
ohne Zweideutigkeiten zu programmieren,

32:20.660 --> 32:22.360
ist das doch das kleinste Problem, was man hat.

32:22.380 --> 32:30.230
Also kann man doch einfach sagen,

32:30.290 --> 32:31.030
so, bäm, fertig.

32:33.310 --> 32:33.950
Crowdstrike.

32:36.110 --> 32:38.050
Wir haben bestimmt auch ein paar Nullpointer dann.

32:38.290 --> 32:39.790
Wobei, ich habe heute auf Twitter gelesen,

32:39.870 --> 32:42.270
es war wahrscheinlich gar kein Nullpointer auf Crowdstrike.

32:42.370 --> 32:43.890
Das haben bloß alle wieder nachgeplabbert.

32:45.030 --> 32:45.970
Also, was hier passiert,

32:46.030 --> 32:48.130
ist folgendes. Ich versuche das mal kurz zu erklären.

32:48.650 --> 32:49.770
Achso, übrigens,

32:50.050 --> 32:51.630
WLAN-SSID, ne, passt.

32:51.930 --> 32:52.290
Alles klar.

32:53.590 --> 32:55.530
Also, was hier passiert, ist folgendes.

32:56.210 --> 32:57.890
Also, das hier ist Main, bla,

32:57.890 --> 32:59.730
also, dann müssen wir das hier

32:59.730 --> 33:01.050
aufrufen, Wifi-Connect.

33:02.330 --> 33:03.410
Dass er das auch macht.

33:04.110 --> 33:05.790
So, was jetzt passiert, ist folgendes.

33:09.580 --> 33:10.980
Der legt irgendeine Standard-Config

33:10.980 --> 33:11.700
an für das

33:11.700 --> 33:13.500
Wifi-Interface.

33:14.360 --> 33:16.000
STA ist Station-Mode.

33:16.220 --> 33:18.960
Station-Mode ist das, was man normalerweise

33:18.960 --> 33:20.900
so kennt von einem Wifi-Interface,

33:21.660 --> 33:22.760
nämlich man verbindet sich zu einem

33:22.760 --> 33:24.980
Access-Point. Es gibt auch noch die Möglichkeit

33:24.980 --> 33:26.740
AP zu machen, ja, oder

33:26.740 --> 33:28.200
Mesh oder was, whatever.

33:28.580 --> 33:29.980
Aber Station-Mode, also sprich,

33:30.360 --> 33:32.560
was euer Handy macht, ist auch Station-Mode.

33:32.560 --> 33:34.500
Warum das Station-Mode heißt, keine Ahnung,

33:34.600 --> 33:36.540
müsst ihr die Leute fragen, die die

33:36.540 --> 33:37.580
Wifi-Standards machen.

33:38.260 --> 33:40.640
Wir wollen unser Netzwerk-Interface als Station

33:40.640 --> 33:42.400
betreiben, also sprich, uns ganz normal zum

33:42.400 --> 33:43.500
Access-Point connecten.

33:44.980 --> 33:47.340
Wir lassen uns eine Default-Wifi-Config

33:47.340 --> 33:49.580
geben und da setzen wir jetzt noch ein paar Sachen

33:49.580 --> 33:51.940
drin, nämlich, dass der alle Wifi-Channels

33:51.940 --> 33:52.680
benutzen soll,

33:53.360 --> 33:53.960
dass der

33:53.960 --> 33:56.620
Sort-Methods, achso,

33:56.880 --> 33:59.040
ah, dass der den Access-Point nimmt,

33:59.660 --> 34:00.560
der den stärksten,

34:00.560 --> 34:02.040
der stärkste Signal hat,

34:02.560 --> 34:04.760
alle Access-Points, die schlechteren Empfang

34:04.760 --> 34:06.120
haben als minus 127,

34:07.020 --> 34:08.340
connectet er sich gar nicht hin,

34:09.060 --> 34:10.520
er kann sich auch zu offenen

34:10.520 --> 34:11.800
Wifis verbinden,

34:13.300 --> 34:14.500
dann kopiert er meine

34:14.500 --> 34:16.740
WLAN-SSID und mein WLAN-Passwort

34:16.740 --> 34:18.220
in dieses Struct rein,

34:19.040 --> 34:20.660
an die Stelle, wo es hingehört.

34:21.520 --> 34:22.560
Ey, fragt mich nicht,

34:22.820 --> 34:24.160
warum so kompliziert?

34:24.780 --> 34:26.260
Ich hab das auch geklaut

34:26.260 --> 34:29.280
aus einem GitHub-Projekt,

34:30.020 --> 34:30.680
weil, wenn ich,

34:30.680 --> 34:32.540
man würde ja eigentlich vermuten, man könnte,

34:32.560 --> 34:33.840
man könnte einfach sagen,

34:34.360 --> 34:35.380
Wifi-Config

34:35.380 --> 34:37.300
STA

34:37.300 --> 34:38.880
SSID

34:38.880 --> 34:42.540
gleich WLAN-SSID, also würde man jetzt vermuten,

34:42.860 --> 34:44.380
aber das geht nicht, weil

34:44.380 --> 34:47.940
SSID ein

34:47.940 --> 34:50.000
Uint28-Array

34:50.000 --> 34:51.240
mit 32 Stellen ist.

34:51.360 --> 34:54.520
Da kann man nur Sachen reinkopieren, da darf man nicht direkt was zuweisen.

34:55.400 --> 34:55.880
Weil

34:55.880 --> 34:57.440
C-Dinger.

35:00.980 --> 35:02.300
Und deswegen

35:02.300 --> 35:04.620
kopieren wir das da rein, anstatt es zuzuweisen.

35:04.620 --> 35:04.860
Okay?

35:06.460 --> 35:09.020
Das sieht so eklig aus, aber es funktioniert, es funktioniert.

35:09.020 --> 35:12.220
Dann sagen wir noch mal explizit, dass wir Station-Mode betreiben wollen,

35:12.220 --> 35:13.220
das Interface.

35:13.220 --> 35:17.280
Dann sagen wir dem Interface, benutzt diese Config von hier oben

35:17.280 --> 35:18.580
und dann sagen wir Wifi-Start.

35:18.580 --> 35:19.580
Fertig.

35:19.580 --> 35:20.800
Und wenn wir das jetzt flashen,

35:20.800 --> 35:25.220
dann geht Wifi.

35:25.220 --> 35:28.400
Wir bekommen noch keine IP, wohlgemerkt, aber Wifi geht schon mal.

35:28.400 --> 35:31.800
Was wir auch an ein bisschen Debug-Ausgabe sehen dürften.

35:31.800 --> 35:36.800
C++ sieht nicht nur eklig aus, C++ ist, glaube ich, die beschissenste Sprache, die es gibt.

35:36.800 --> 35:37.920
C++ ist, glaube ich, die beschissenste Sprache, die es gibt.

35:37.920 --> 35:40.590
C++ ist, glaube ich, die beschissenste Sprache, die es gibt.

35:40.590 --> 35:42.810
Guck hier, Wifi-Gedöns kommt hier.

35:42.810 --> 35:46.330
Wifi, bla, blub, Initialisierungskrempel.

35:48.330 --> 35:57.350
UDP, M-Box 6, TCP, M-Box 6, Dings, blub, keine Ahnung.

35:57.350 --> 35:59.870
Muss man DHCP extra enablen?

35:59.870 --> 36:01.890
Nicht, nicht so ganz.

36:01.890 --> 36:04.190
Das macht er, wenn man es richtig macht, für einen.

36:05.770 --> 36:08.150
Aber wir sehen schon, unsere Event-Loop funktioniert.

36:08.150 --> 36:10.650
Wir bekommen Wifi-Events, nämlich das Wifi-Event,

36:10.650 --> 36:12.950
und das Wifi-Event 2.

36:13.750 --> 36:15.150
Obviously, alles klar, oder?

36:17.150 --> 36:18.190
Chat, was meint ihr?

36:18.270 --> 36:20.190
Was ist das gute und was ist das schlechte Event?

36:21.330 --> 36:22.790
Was ist schlecht und was ist gut?

36:24.690 --> 36:28.270
Ist 41, ist das Event 41 gut oder schlecht?

36:28.850 --> 36:30.450
Ist das Event 2 gut oder schlecht?

36:32.730 --> 36:34.470
2 ist gut, okay?

36:35.110 --> 36:36.290
Und 41 nicht.

36:40.380 --> 36:42.780
Okay, Chat, ich muss sagen, ihr seid nicht schlecht, ihr habt recht.

36:42.780 --> 36:42.820
Okay, Chat, ich muss sagen, ihr seid nicht schlecht, ihr habt recht.

36:45.420 --> 36:50.280
Ich kann nämlich hier nachgucken, Wifi-Event.

36:52.140 --> 36:55.100
Guckt mal hier, hier stehen die ganzen Events drin.

36:56.760 --> 37:03.300
Und wir sehen, dass 2 tatsächlich bedeutet, das Wifi-Interface ist gestartet.

37:04.860 --> 37:05.920
Und was war das andere?

37:06.140 --> 37:17.120
41, 41 bedeutet Wifi-Event Home-Channel-Change.

37:18.380 --> 37:20.120
Okay, das ist eigentlich gar nichts Schlechtes.

37:21.240 --> 37:22.960
Das ist auch okay.

37:26.680 --> 37:29.080
Aber das interessiert mich nicht, dass der Home-Channel gechanged ist.

37:32.220 --> 37:43.120
So, was man jetzt nämlich sagen kann ist, ey, wir müssen, also, man muss ja warten, bis das Interface oben ist, damit man sagen kann, ich will jetzt eine IP haben.

37:43.120 --> 37:53.960
Das heißt, wir müssen jetzt gucken, if Event Base Wifi-Event, also, ist das ein Wifi-Event, was gerade passiert ist?

37:54.520 --> 37:54.920
Und?

37:56.400 --> 38:04.120
Ist die Event-ID gleich, gleich, Wifi, wie heißt das, hab ich's vergessen, äh, wie heißt dieser Krempel hier nochmal?

38:05.000 --> 38:18.860
Ist das gleich, äh, Start, dann will ich sagen, Wifi, ne, ESP-Wifi-Start will ich dann machen.

38:21.460 --> 38:27.980
Also, sprich, der konfiguriert das Interface, das Interface fährt hoch und dann kann ich mein WLAN starten.

38:28.440 --> 38:29.160
Alles klar?

38:32.600 --> 38:34.880
Ist das das Tool für die Access-Point-Passwörter?

38:39.280 --> 38:41.420
Das Tool für die Access-Point-Passwörter?

38:44.220 --> 38:45.740
Ich hab keine Ahnung, was du meinst.

38:47.280 --> 38:59.240
So, und wenn man das jetzt so macht, und wenn ich jetzt alles richtig gemacht hab, richtig gemacht hab, jetzt sollten wir eigentlich eine IP-Adresse bekommen, auf unserem, für unsere Wifi-Netzwerkkarte.

38:59.560 --> 39:03.020
Oder für unser Wifi-Interface auf dem Controller.

39:03.480 --> 39:04.140
Gucken wir mal.

39:13.850 --> 39:15.730
So, der Flash-Vorgang ist erstmal richtig langsam.

39:16.150 --> 39:17.150
Warum zweimal?

39:17.230 --> 39:17.970
Wifi-Start?

39:18.070 --> 39:19.630
Wir haben nicht zweimal Wifi-Start gemacht.

39:20.770 --> 39:21.170
Oder?

39:21.290 --> 39:21.810
Haben wir gemacht?

39:24.640 --> 39:26.280
Falls wir das gemacht haben, ist das falsch.

39:28.080 --> 39:29.800
Oh, das ist falsch, was wir gemacht haben.

39:33.870 --> 39:34.790
Guter Cut-Chat.

39:36.050 --> 39:40.950
Äh, wir wollen nicht Wifi-Start, wir wollen, äh, ESP-Wifi, ist das Connect?

39:41.650 --> 39:42.050
Connect!

39:42.790 --> 39:43.190
Obviously.

39:43.730 --> 39:44.130
Logisch.

39:44.610 --> 39:45.990
Wer hätte da auch nicht drauf kommen können?

39:49.170 --> 39:50.130
Ja, die Dinger sind ein bisschen...

39:51.650 --> 39:54.630
Nicht gerade so intuitiv benannt, wie man das gerne hätte.

39:55.130 --> 39:55.630
Genau.

40:05.330 --> 40:05.830
Er macht was?

40:05.890 --> 40:06.190
IP!

40:06.550 --> 40:06.790
Bam!

40:07.590 --> 40:08.170
Wir haben eine IP.

40:08.770 --> 40:09.450
Ich kann nicht klicken.

40:09.830 --> 40:09.990
Alter.

40:10.770 --> 40:11.170
Hier, guck.

40:11.390 --> 40:11.610
Ping.

40:14.190 --> 40:15.390
Mein Controller antwortet.

40:18.070 --> 40:20.370
Zwar ziemlich langsam, aber er antwortet, okay?

40:26.760 --> 40:27.800
Wir haben eine IP, Leute.

40:29.680 --> 40:30.920
Also, so funzt das.

40:31.860 --> 40:38.480
Schön ist das Ganze übrigens nicht gelöst, weil, wenn das hier nicht funktioniert, aus irgendwelchen Gründen,

40:41.300 --> 40:45.020
dann müsste man das ja mehrfach durch, mehrfach, äh, durchführen.

40:45.200 --> 40:45.700
Ja.

40:48.080 --> 40:54.840
Also, man müsste, man müsste hier eigentlich noch so eine, noch so eine Art, äh, Retry einbauen.

40:54.840 --> 41:01.600
Also, so nach dem Motto, ey, wenn, wenn hier, guck mal, hier steht ja auch, was es für, für Return Codes geben kann.

41:06.700 --> 41:10.040
Ja, also, wenn das nicht funktioniert, dann Restarten.

41:10.220 --> 41:13.580
Deswegen machen wir jetzt einfach mal eine Sache, um mir das Leben erleichtert zu machen.

41:16.170 --> 41:23.290
Wir brechen einfach, wir starten einfach die Kiste neu, wenn Wifi-Connect nicht klappt.

41:25.920 --> 41:29.560
Sollte aus irgendwelchen Gründen das beim ersten Mal nicht funktionieren,

41:30.000 --> 41:34.220
dann startet ihr einfach den Controller neu, bis Wifi-Connect funktioniert.

41:37.630 --> 41:42.070
Meine, das, wo man in ein, ach so, ja, das ist unter anderem dafür, ja.

41:42.630 --> 41:42.750
Ja.

41:43.230 --> 41:45.290
Wobei ich da schon viel, viel weiter dran gebaut hab.

41:46.170 --> 41:47.570
Ähm, ja.

41:47.570 --> 41:53.750
Man setzt, man setzt den, man setzt das Passwort und die SSID für den Controller, dass der sich zu einem Access Point verbinden kann.

41:53.770 --> 41:54.110
Ja, genau.

41:54.790 --> 41:57.810
Ähm, ich hab überlegt, wir könnten jetzt ja noch ein, äh, einbauen, dass man,

41:57.870 --> 42:00.550
ähm, Firmware-Updates flashen kann über, über, übers WLAN.

42:05.270 --> 42:06.190
Müssen wir mal schauen.

42:06.810 --> 42:11.790
Ähm, und ich hab mir gedacht, Firmware-Updates über WebSocket, das geht zwar,

42:11.910 --> 42:14.270
und das hab ich auch schon programmiert, das ist eigentlich kein Problem,

42:14.770 --> 42:19.730
aber so ein Post-Request ist einfach schöner für so kontinuierliche Upload-Sachen,

42:20.050 --> 42:22.010
wie das über WebSocket zu machen.

42:22.390 --> 42:24.670
Ja, gerade was ist, wenn das abbricht und sonst wie.

42:25.210 --> 42:28.500
Deswegen, ups.

42:45.510 --> 42:46.310
Ein Stack-Overflow?

42:48.980 --> 42:49.980
Dadurch, dass ich das logge?

42:50.300 --> 43:10.340
Durch das, durch das pure Loggen?

43:11.840 --> 43:17.220
Wie, wie, wie viel RAM darf denn diese Event-Loop verwenden?

43:19.140 --> 43:19.940
Sieht man das irgendwo?

43:20.200 --> 43:21.580
Create default Event-Loop.

43:22.180 --> 43:23.000
Stack-Size.

43:27.240 --> 43:28.860
What the fuck, Alter.

43:30.420 --> 43:31.260
Was ist es denn?

43:32.920 --> 43:34.280
Event-Stack-Size.

43:37.680 --> 43:38.500
Ey, Alter.

43:39.200 --> 43:41.680
C++-Shit, sag mir halt einfach, wie groß das ist.

43:50.200 --> 43:50.600
Okay.

43:50.860 --> 43:52.240
Ich hab keine Ahnung, wie groß das ist.

43:54.240 --> 43:55.040
Man weiß es nicht.

43:56.100 --> 43:56.500
Unbekannt.

44:01.060 --> 44:02.960
Wäre natürlich ganz sinnvoll zu wissen, ja.

44:03.920 --> 44:07.060
Weil es könnte, es könnte wirklich sein, wenn es gar so knapp bemessen ist,

44:07.320 --> 44:09.080
dass das Ding einfach nicht genug RAM hat.

44:09.140 --> 44:11.040
Und aus irgendwelchen Gründen nicht mal genug RAM hat zum Loggen.

44:11.340 --> 44:12.880
Wobei, hier kann's eigentlich.

44:14.140 --> 44:14.540
Naja.

44:16.600 --> 44:17.260
Aber das funktioniert.

44:17.520 --> 44:18.600
Ja, dann machen wir das doch anders.

44:18.860 --> 44:23.560
If, wenn das da ungleich ESP-okay ist,

44:25.160 --> 44:27.460
dann, äh, ESP-restart?

44:33.010 --> 44:33.510
Moment.

44:33.690 --> 44:34.510
Geht das so?

44:35.690 --> 44:36.130
Vermutlich.

44:40.500 --> 44:40.760
Okay.

44:41.080 --> 44:42.660
Dann loggen wir das Ganze halt nicht.

44:52.700 --> 44:54.400
Schauen wir mal, ob das wenigstens funzt jetzt.

44:54.860 --> 44:57.000
Also ich meine, es sollte zumindest keinen Stack-Overflow mehr geben.

44:58.100 --> 44:59.080
Okay, ne, funzt noch.

45:01.600 --> 45:01.980
Alles klar.

45:04.580 --> 45:06.620
Ja, dann lassen wir, dann lassen wir es erstmal so.

45:06.780 --> 45:07.260
Scheiß drauf.

45:08.660 --> 45:13.880
Aber ich hätte eigentlich gedacht, man kann hier die, die Stacks da jetzt ein bisschen hochschrauben von der Event-Loop irgendwie.

45:16.060 --> 45:17.800
Event-Loop Default Create.

45:17.920 --> 45:18.180
Ne, ja.

45:18.180 --> 45:19.800
Man kann da keine Optionen mitgeben, ne.

45:26.120 --> 45:41.040
Ich meine, höchstens, wo kommt ein Event-Händler her überhaupt?

45:41.640 --> 45:42.420
Ah, ne, Event-Händler.

45:43.680 --> 45:48.840
Wir könnten selbst ne, wir könnten selbst ne Event-Loop anlegen, die, aber, scheiß drauf.

45:49.660 --> 45:51.200
Das passt so schon jetzt.

45:53.880 --> 45:56.300
Also, so, wir haben ne IP, wunderbar.

45:57.260 --> 45:59.680
Dann, können wir jetzt weitermachen.

45:59.760 --> 46:00.680
Jetzt brauchen wir einen Web-Server.

46:01.340 --> 46:05.480
Chat, wir fangen erstmal an, ohne HTTPS.

46:05.700 --> 46:06.340
Mein Ziel ist natürlich HTTPS.

46:06.340 --> 46:08.020
Ja, das ist klar.

46:08.660 --> 46:17.260
Hatten wir, hatten ja, wir haben ja hier schon einen Web-Server mal gebaut, wo über HTTPS, über Web-Sockets mit dem Microcontroller kommuniziert werden konnte.

46:17.660 --> 46:19.240
Das heißt, wir klauen uns das hier einfach jetzt.

46:20.600 --> 46:21.160
Davon.

46:22.620 --> 46:25.240
Und wir starten dann den Web-Server.

46:25.800 --> 46:35.530
Jetzt ist natürlich die große Preisfrage, wie kann ich hier warten, bis WiFi connected ist?

46:36.030 --> 46:37.690
Weil das ist ja alles asynchron.

46:40.400 --> 46:51.360
Also, sprich, ne, ne, ne, ne, ne, das, das machen wir gar nicht.

46:51.700 --> 46:54.700
Wir brauchen ein Event, wenn wir ne IP bekommen haben.

46:54.780 --> 46:57.240
Guck mal, es gibt doch ein Event, wenn wir ne IP kriegen, oder?

46:57.960 --> 46:58.840
IP-Event.

46:59.580 --> 47:00.900
IP-Event 0.

47:02.240 --> 47:02.680
Genau.

47:04.320 --> 47:05.300
Das machen wir.

47:10.880 --> 47:11.900
IP-Event.

47:13.740 --> 47:14.940
So, und was war das hier?

47:16.780 --> 47:18.580
Gott-IP wollen wir haben.

47:18.960 --> 47:23.730
Und jetzt sagen wir hier.

47:23.850 --> 47:27.330
Start Web-Server.

47:28.830 --> 47:30.190
Was es noch nicht gibt, ja?

47:40.950 --> 47:42.570
Ich finde das ein bisschen eklig, das jetzt davor.

47:45.010 --> 47:46.530
Start Web-Server.

47:47.750 --> 47:50.030
By the way, wir können das auch einfach inline hier drin haben.

47:50.130 --> 47:51.250
Ah, wobei, ne, aber nicht.

47:51.470 --> 47:52.430
Lass uns das mal.

47:53.650 --> 47:54.870
So, Start Web-Server.

47:55.090 --> 47:59.650
Das ist übrigens auch was, was ich einfach nur dumm finde an C++.

48:00.650 --> 48:03.610
Und zwar, wenn man das hier hinschreibt.

48:03.610 --> 48:03.970
Und.

48:05.270 --> 48:09.030
Und die Methode hier unten definiert, dann sieht das erstmal so aus, als würde es funktionieren.

48:09.210 --> 48:12.870
Aber, wenn ich das jetzt versuche zu kompilieren, dann geht das nicht.

48:13.790 --> 48:14.730
Warum geht das nicht?

48:15.270 --> 48:19.870
Weil das hier deklariert wird, nachdem es benutzt wird.

48:19.950 --> 48:22.350
Also hier will ich es benutzen und hier unten wird das erst angelegt.

48:22.990 --> 48:30.150
Jede, auch nur ansatzweise, halbwegs moderne Programmiersprache kommt mit sowas klar.

48:30.910 --> 48:31.890
C++ nicht.

48:43.830 --> 48:46.330
Was man in C++ machen muss dafür ist.

48:46.630 --> 48:52.950
Zu sagen, by the way, es gibt, es gibt da was, das nennt sich so.

48:53.310 --> 48:54.410
Und jetzt funktioniert es.

48:55.070 --> 48:58.990
Was aber einfach nur saumäßig dämlich ist, oder?

48:59.310 --> 49:00.470
Sagt doch mal ernsthaft.

49:01.370 --> 49:07.450
Also, das ist glaube ich so die dümmste, die dümmste Lösung für dieses Problem ever.

49:09.640 --> 49:12.820
Dass man einfach das quasi deklarieren muss vorher und die Implementierung.

49:13.040 --> 49:15.280
Das ist so, das ist so dumm.

49:15.280 --> 49:17.360
Ich verstehe gar nicht, warum das noch ein Ding ist.

49:17.360 --> 49:18.720
Im Jahr 2024.

49:19.420 --> 49:24.300
Dass das historisch mal so gewesen ist, das lasse ich mir ja alles noch gefallen, ja.

49:24.740 --> 49:25.780
Header Files ist das nächste.

49:25.880 --> 49:28.660
Fangen wir nicht von Header Files an im Jahr 2024, ja.

49:29.620 --> 49:33.780
Aber es ist einfach richtig dumm, dass es dieses Problem immer noch gibt.

49:34.140 --> 49:36.160
Und was es hier geht, C++ schlecht reden.

49:40.040 --> 49:40.860
Was wird eigentlich prokriminiert?

49:41.540 --> 49:44.420
Ich habe hier einen ESP32 S3.

49:45.200 --> 49:48.100
Auf dem lassen wir einen Webserver laufen mit HTTPS.

49:48.100 --> 49:48.500
So.

49:50.340 --> 49:55.280
Webserver, WLAN und dann will ich darüber asynchron ein Post-Request schicken.

49:55.460 --> 49:57.100
Das ist der Task für heute.

49:57.540 --> 49:58.520
Weil das ist ganz neu.

49:58.700 --> 50:06.940
Das gibt es erst seit ein paar Tagen, dass der Webserver, der quasi vom Hersteller in ihrem hauseigenen Framework mitgeliefert wird,

50:07.480 --> 50:09.220
auch asynchrone Requests kann.

50:09.860 --> 50:11.520
Und will ich einfach mal ausprobieren, ob das funktioniert.

50:12.020 --> 50:13.420
Das ist also super bleeding edge.

50:13.500 --> 50:14.540
Das ist noch nicht released.

50:14.960 --> 50:16.140
Und ich weiß nicht, ob es funktioniert.

50:18.560 --> 50:19.960
Aber wenn es geht, wäre echt nice.

50:19.960 --> 50:21.720
So, Start Webserver.

50:21.720 --> 50:23.720
Das können wir uns abgucken von hier.

50:23.720 --> 50:25.720
Im Prinzip ist das ja kein großer Unterschied.

50:25.720 --> 50:27.720
Der einzige Unterschied ist, was wir jetzt machen.

50:27.720 --> 50:33.720
Wir legen keinen...

50:33.720 --> 50:35.720
Was macht der hier unten eigentlich die ganze Zeit?

50:35.720 --> 50:37.720
Also das brauchen wir...

50:37.720 --> 50:39.720
Sag mal, was macht der eigentlich?

50:39.720 --> 50:41.720
Alter!

50:41.720 --> 50:43.720
Visual Studio Code...

50:43.720 --> 50:45.720
What the fuck?

50:45.720 --> 50:47.720
Wir woll...

50:47.720 --> 50:56.250
C U.

50:56.250 --> 51:13.640
Ähm, ja.

51:13.640 --> 51:22.120
Den Webserver, den muss ich natürlich includen, dass das funktioniert.

51:22.120 --> 51:23.120
Irgendwelchen Gründen nicht.

51:23.120 --> 51:24.120
Funktioniert?

51:24.120 --> 51:28.230
Was jetzt...

51:28.230 --> 51:31.700
Doch funktioniert?

51:31.700 --> 51:32.700
Ich glaub man will...

51:32.700 --> 51:36.700
Kann das sein, dass mein Visual Studio Code C++ Plugin gecrashed ist?

51:36.700 --> 51:37.700
Ich vermute es fast.

51:37.700 --> 51:39.700
Das macht es gerne.

51:39.700 --> 51:41.700
Das ist richtiger Schrott.

51:41.700 --> 51:45.450
Ja, es ist gecrashed.

51:45.450 --> 51:46.450
Jetzt funktioniert es wieder.

51:46.450 --> 51:47.450
Nice.

51:47.450 --> 51:48.450
GG Microsoft.

51:48.450 --> 51:49.450
Good Job.

51:49.450 --> 51:55.800
So, was wir jetzt machen ist, wir fangen nicht mit einem SSL, mit einem HTTPS-Webserver an,

51:55.800 --> 52:02.540
sondern mit einem ganz normalen Webserver.

52:02.540 --> 52:03.540
So.

52:03.540 --> 52:04.540
Dann...

52:04.540 --> 52:05.540
Brauchen wir...

52:05.540 --> 52:11.560
Ja, CLion hat andere Probleme gehabt in der Zusammenarbeit.

52:11.560 --> 52:12.560
Ich hab das...

52:12.560 --> 52:14.560
Ich hab sogar CLion glaub ich noch installiert.

52:14.560 --> 52:15.560
Ne, hab ich nicht.

52:15.560 --> 52:16.560
Hatte ich aber.

52:16.560 --> 52:18.560
Ich hab ja das JetBrains Desktop Package.

52:18.560 --> 52:19.560
All Desktop Package.

52:19.560 --> 52:22.560
CLion hatte andere Probleme.

52:22.560 --> 52:27.560
Deswegen bin ich wieder bei Visual Studio Code gelandet dafür.

52:27.560 --> 52:30.560
Ich krieg's aber aus dem Kopf nicht mehr zusammen, was das war.

52:30.560 --> 52:32.560
Haben wir auch im Stream probiert.

52:32.560 --> 52:33.560
Und...

52:33.560 --> 52:34.560
Das hat...

52:34.560 --> 52:37.560
Das hat mich übelst abgefuckt wegen...

52:37.560 --> 52:41.220
Weiß nicht mehr was.

52:41.220 --> 52:42.220
So.

52:42.220 --> 52:43.220
Also, Start Webserver.

52:43.220 --> 52:45.790
Hier runter.

52:45.790 --> 52:46.790
Wo hab ich denn das Ganze?

52:46.790 --> 52:47.790
So.

52:47.790 --> 52:50.790
Wir lassen diesen ganzen Campbell weg mit Zertifikaten und sowas.

52:50.790 --> 52:59.060
Und wir starten einfach den Web...

52:59.060 --> 53:00.060
Ist das alles, was wir machen müssen?

53:00.060 --> 53:01.060
Ernsthaft?

53:01.060 --> 53:03.060
Ach ne, wir brauchen noch einen Webserver-Handle.

53:03.060 --> 53:06.300
Okay.

53:06.300 --> 53:07.300
Irgendwo.

53:07.300 --> 53:08.300
Da.

53:08.300 --> 53:16.120
Hier.

53:16.120 --> 53:17.120
Das brauchen wir noch.

53:17.120 --> 53:18.120
Und ich glaube jetzt...

53:18.120 --> 53:19.120
Ja.

53:19.120 --> 53:23.730
Und das...

53:23.730 --> 53:25.730
Ich glaube das ist alles, was wir brauchen.

53:25.730 --> 53:31.130
Um den Webserver zu starten.

53:31.130 --> 53:34.310
Gucken wir mal.

53:34.310 --> 53:35.310
Server starten.

53:35.310 --> 53:40.020
Das ist CMake...

53:40.020 --> 53:41.020
Ja!

53:41.020 --> 53:42.020
Das war mir das Problem.

53:42.020 --> 53:43.020
Genau.

53:43.020 --> 53:44.020
Das ist CMake-based.

53:44.020 --> 53:46.020
Das ist standardmäßig schon CMake-based.

53:46.020 --> 53:49.020
Man denkt, das wäre ein richtig gutes Match für CLion.

53:49.020 --> 53:50.020
Ist es aber nicht.

53:50.020 --> 53:57.020
Weil die irgendwelche komischen, expressive eigenen Sachen da mit CMake machen, womit

53:57.020 --> 53:58.020
CLion nicht klarkommt.

53:58.020 --> 53:59.020
Guck mal.

53:59.020 --> 54:00.020
Server-Event 1.

54:00.020 --> 54:02.020
Webserver ist gestartet vermutlich mal.

54:02.020 --> 54:09.020
Ich gehe mal davon aus, dass Event 1 bedeutet Server startet.

54:09.020 --> 54:10.020
Okay.

54:10.020 --> 54:11.020
Alles klar.

54:11.020 --> 54:14.020
So, unser Webserver ist gestartet, wie man hier sieht.

54:14.020 --> 54:15.020
Da.

54:15.020 --> 54:16.020
Webserver startet.

54:16.020 --> 54:18.020
Probieren wir mal aus, ob der Webserver gestartet ist.

54:18.020 --> 54:20.020
Wir machen mal einen Curl.

54:20.020 --> 54:22.020
Und wir bekommen eine Antwort.

54:22.020 --> 54:23.020
Also.

54:23.020 --> 54:28.020
Wir haben unseren ESP32 im Wifi und am Webserver laufen.

54:28.020 --> 54:31.020
Das heißt, wir können uns jetzt der eigentlichen Sachen widmen.

54:31.020 --> 54:35.020
Wie macht man asynchrone Webrequests dagegen?

54:35.020 --> 54:37.020
Was für ein Application Launcher.

54:37.020 --> 54:38.020
Du meinst das Ding?

54:38.020 --> 54:39.020
Das ist RoFi.

54:39.020 --> 54:40.020
RoFi.

54:40.020 --> 54:41.020
RoFi, Alter.

54:41.020 --> 54:54.660
Und das allerwichtigste ist natürlich das Emoji Autocomplete Menü.

54:54.660 --> 54:59.710
Also ich habe da drinnen meine ganzen Apps.

54:59.710 --> 55:00.710
Das hier benutze ich nie.

55:00.710 --> 55:02.710
Keine Ahnung, warum ich das da überhaupt drinnen habe.

55:02.710 --> 55:03.710
Das sind quasi alle.

55:03.710 --> 55:05.710
Das hier sind quasi nur alle Apps mit Desktop Entry.

55:05.710 --> 55:06.710
Das sind alle.

55:06.710 --> 55:08.710
Was eigentlich überflüssig ist.

55:08.710 --> 55:11.710
Man kann Windows, man kann Fenster suchen und dann da hinspringen.

55:11.710 --> 55:13.710
Ja, wenn ich sage, ich will zum Firefox.

55:13.710 --> 55:14.710
Bam.

55:14.710 --> 55:15.710
Könnte ich sagen.

55:15.710 --> 55:16.710
Mache ich aber auch nie.

55:16.710 --> 55:21.710
Weil ich weiß eigentlich, auf welchem Desktop meine Sachen sind.

55:21.710 --> 55:24.710
Deswegen mag ich ja auch E3 und Tiling Window Manager.

55:24.710 --> 55:28.710
Beziehungsweise Tastatur, mit guter Tastaturbedienung.

55:28.710 --> 55:31.710
Ich habe immer auf dem ersten Desktop meinen Browser.

55:31.710 --> 55:32.710
Auf dem zweiten meinen Terminal.

55:32.710 --> 55:33.710
Auf dem dritten meinen Editor.

55:33.710 --> 55:36.710
Oder aber halt auf dem dritten und vierten meinen Editor.

55:36.710 --> 55:45.620
Und auf sieben habe ich immer Animes laufen.

55:45.620 --> 55:47.620
So habe ich das auf dem Desktop eingestellt.

55:47.620 --> 55:54.500
Deswegen brauche ich nie, deswegen brauche ich nie überlegen.

55:54.500 --> 55:58.780
Ja, aber nur auf Desktop 7, bitteschön.

55:58.780 --> 56:04.780
Ich kenne die Anleitung.

56:04.780 --> 56:06.780
Aber C-Line, ich habe es ausprobiert.

56:06.780 --> 56:09.780
Hat, hatte, ich kriege es nicht mal zusammen, was das war.

56:09.780 --> 56:11.780
Wir haben es im Stream ausprobiert.

56:11.780 --> 56:21.340
Es gab irgendwelche Probleme mit diesem Custom Zeug, was Espressif da und CMake bastelt.

56:21.340 --> 56:23.340
Ja, ja, das sieht auch erstmal so aus.

56:23.340 --> 56:24.340
Funktioniert hat es.

56:24.340 --> 56:26.340
Das sieht auch erstmal so aus, als würde es funktionieren.

56:26.340 --> 56:28.340
Aber es gab ein paar Details, die haben nicht funktioniert.

56:28.340 --> 56:30.340
Die haben mich nach der Zeit so aufgeregt, dass ich keinen Bock mehr hatte.

56:30.340 --> 56:32.340
Und gesagt habe, ich mache jetzt wieder Whistle Studio Corner.

56:32.340 --> 56:38.650
Ich glaube, ich glaube, Autocompletion hatte Probleme, manche Sachen aufzulösen.

56:38.650 --> 56:42.350
Ich bin auch gedacht, warum?

56:42.350 --> 56:45.350
Es ist noch gar nicht so lange her, wo wir das ausprobiert haben.

56:45.350 --> 56:52.890
Also, Asynchrone Request.

56:52.890 --> 56:54.890
Wie funktioniert das jetzt?

56:54.890 --> 56:56.890
Wir machen das hier zu.

56:56.890 --> 56:58.890
Und wir machen das hier zu.

56:58.890 --> 57:00.890
Wobei, das brauchen wir ja alles nicht.

57:00.890 --> 57:06.250
Wie macht man Asynchrone Request?

57:06.250 --> 57:09.250
Wir gucken uns das Beispiel von denen an.

57:09.250 --> 57:12.250
Async Handlers.

57:12.250 --> 57:16.250
Also, WiFi Connection Gedöns haben wir gemacht.

57:16.250 --> 57:18.250
Das haben wir auch gemacht.

57:18.250 --> 57:20.250
Unser Webserver haben wir hier am Start.

57:20.250 --> 57:22.250
Connect Handler, Start Webserver.

57:22.250 --> 57:25.250
Haben wir auch gemacht.

57:25.250 --> 57:43.330
Ja, wenn du NeoVim verwendest, die benutzen alle immer...

57:43.330 --> 57:47.330
Da gibt es so ein Language Server Plugin für NeoVim, was das für dich handelt.

57:47.330 --> 57:49.330
Ich habe aber keine Ahnung.

57:49.330 --> 57:56.330
Ich habe, ehrlich gesagt, lange aufgehört, mein Vim, schon lange, jahre schon aufgehört, mein Vim aufzumodzen.

57:56.330 --> 57:58.330
Mit IDE Features.

57:58.330 --> 58:02.330
Ich benutze Vim täglich mehrere Stunden für Command Line Geschichten.

58:02.330 --> 58:05.330
Aber sobald ich ein bisschen was Advancedes brauche, mache ich Whistle Studio Corner.

58:05.330 --> 58:07.330
Oder die Jetbrains Sachen auf.

58:07.330 --> 58:09.330
TS Fuchs, danke für den Sub.

58:09.330 --> 58:15.330
Deswegen keine Ahnung, wie man Vim heutzutage cool konfiguriert.

58:15.330 --> 58:18.330
Ich weiß nur, dass ich, wenn ich es machen würde, würde ich NeoVim nehmen.

58:18.330 --> 58:23.960
Und dann mit irgendwelchen Lua Plugins oder was sie da alles am Start haben.

58:23.960 --> 58:30.790
So.

58:30.790 --> 58:33.790
Also, wir brauchen jetzt erstmal, das können wir uns hier auch ausgucken.

58:33.790 --> 58:34.790
Abgucken.

58:34.790 --> 58:40.390
Wir brauchen erstmal einen, einen URL-Händler.

58:40.390 --> 58:43.730
Und zwar einen für HTTP.

58:43.730 --> 58:44.730
So.

58:44.730 --> 59:12.840
Also, wenn wir unseren Web-Server gestartet haben, dann brauchen wir einen Händler für, also sprich, was dann die Request verarbeitet.

59:12.840 --> 59:20.520
Witzig, da hatten wir es heute Morgen noch von.

59:20.520 --> 59:24.520
Für mal Slash, wir machen Slash Post einfach mal.

59:24.520 --> 59:28.520
Wir wollen kein HTTP oder nennen wir es Slash Update.

59:28.520 --> 59:30.520
So, wir wollen einen Post Request.

59:30.520 --> 59:32.520
Jetzt brauchen wir einen Händler.

59:32.520 --> 59:33.520
So.

59:33.520 --> 59:34.520
Und da hatte ich es ja heute Morgen von.

59:34.520 --> 59:36.520
Das ist ja auch wieder absolut zackt in C++.

59:37.520 --> 59:40.520
Dass man sowas hier nicht mit einer anonymen Funktion gescheit machen kann.

59:40.520 --> 59:42.520
Weil das halt richtig funktioniert.

59:42.520 --> 59:45.520
Also, wir brauchen einen Händler für diesen Request.

59:45.520 --> 59:47.520
Da muss ich jetzt einfach mal gucken, wie das hier funktioniert.

59:47.520 --> 59:50.520
Also, lasst uns mal das Beispiel angucken.

59:50.520 --> 59:54.880
Start Web-Server.

59:54.880 --> 01:00:01.880
Warum ist eigentlich der neue GitHub-Editor so abfuck?

01:00:01.880 --> 01:00:07.880
Und nervt immer, anstatt einfach nicht aufzugehen?

01:00:07.880 --> 01:00:10.880
Benutzt dieses komische Feature hier ernsthaft jemand?

01:00:10.880 --> 01:00:12.880
Ja doch, ich benutze es tatsächlich manchmal.

01:00:12.880 --> 01:00:14.880
Aber in der Regel will ich das nicht.

01:00:14.880 --> 01:00:16.880
In der Regel will ich hier drinnen was anklicken.

01:00:16.880 --> 01:00:21.060
Und das Ding soll mich in Ruhe lassen hier neben.

01:00:21.060 --> 01:00:23.060
So, Start Web-Server.

01:00:23.060 --> 01:00:27.060
Die konfigurieren LRU Purge Enable.

01:00:27.060 --> 01:00:30.060
Wenn die das machen, dann machen wir das auch.

01:00:30.060 --> 01:00:32.060
Ich weiß zwar nicht, was das macht.

01:00:32.060 --> 01:00:36.060
Purge Least Recently Used Connections.

01:00:36.060 --> 01:00:40.170
Also, sprich.

01:00:40.170 --> 01:00:45.170
Wenn ihm die Sockets ausgehen, dann wirft er alte Verbindungen weg.

01:00:45.170 --> 01:00:49.170
So würde ich das mal vermuten.

01:00:49.170 --> 01:00:52.170
Da bin ich mir nicht wirklich sicher, ob ich das haben will.

01:00:52.170 --> 01:00:55.170
Oder ob ich lieber will, dass meine Connections weiter bestehen bleiben und keinen neuen mehr annimmt.

01:00:55.170 --> 01:00:58.450
Weiß ich noch nicht genau.

01:00:58.450 --> 01:01:01.450
Du hast nur 2 Stunden Verspätung und schon 60% der Strecke geschafft.

01:01:01.450 --> 01:01:04.450
Okay, wenn du Glück hast, bleibt es bei 2 Stunden.

01:01:04.450 --> 01:01:09.470
Ansonsten, es wird immer nur mehr, nicht weniger.

01:01:09.470 --> 01:01:12.470
Ich weiß, es macht dir jetzt sehr viel Mut, aber so ist es.

01:01:12.470 --> 01:01:14.470
Max Open Sockets.

01:01:14.470 --> 01:01:17.470
Ja, da reicht das Default, das müssen wir nicht setzen.

01:01:17.470 --> 01:01:19.470
Dann startet er den Web-Server.

01:01:19.470 --> 01:01:20.470
Okay.

01:01:20.470 --> 01:01:22.470
Das heißt, wir müssen jetzt hier noch checken.

01:01:22.470 --> 01:01:24.470
If.

01:01:24.470 --> 01:01:30.240
Muss ich das einfach so ausführen?

01:01:30.240 --> 01:01:32.240
Ja, ungleich.

01:01:32.240 --> 01:01:35.240
Dann, wenn das nicht okay ist.

01:01:35.240 --> 01:01:37.240
Dann mache ich das gleiche.

01:01:37.240 --> 01:01:39.240
ESP Restart.

01:01:39.240 --> 01:01:41.560
Ja.

01:01:41.560 --> 01:01:42.560
Mein Scheiß drauf.

01:01:42.560 --> 01:01:44.560
Wenn mein Web-Server nicht startet, kann ich nicht weitermachen.

01:01:44.560 --> 01:01:46.560
Also, wenn das aus irgendwelchen Gründen nicht funktioniert.

01:01:46.560 --> 01:01:48.560
Komm, wir sind mal vor.

01:01:48.560 --> 01:01:50.560
Okay.

01:01:50.560 --> 01:01:53.560
So, und jetzt handeln wir den Post-Request.

01:01:53.560 --> 01:01:57.870
Das sieht hier noch alles relativ normal aus.

01:01:57.870 --> 01:02:02.590
Async-Handler.

01:02:02.590 --> 01:02:03.590
Kann man das Ding hier irgendwie...

01:02:03.590 --> 01:02:06.590
Gab es hier nicht immer so einen Minimieren-Knopf?

01:02:06.590 --> 01:02:18.090
Ah, noch hier.

01:02:18.090 --> 01:02:19.090
Okay, das ist übersichtlich.

01:02:19.090 --> 01:02:24.770
Das ist das, wie wir es auch haben.

01:02:24.770 --> 01:02:27.770
Also, was interessant wird, ist...

01:02:27.770 --> 01:02:28.770
Wie hieß das Ding?

01:02:28.770 --> 01:02:29.770
Oh.

01:02:29.770 --> 01:02:31.770
Das ist Beispiel, Mann.

01:02:31.770 --> 01:02:32.770
Alter.

01:02:32.770 --> 01:02:39.480
Long Async-Handler.

01:02:39.480 --> 01:02:40.480
Okay.

01:02:40.480 --> 01:02:47.700
This handler is first invoked on the HTTP-Thread.

01:02:47.700 --> 01:02:49.700
Okay, das macht Sinn.

01:02:49.700 --> 01:02:52.700
Wenn das Initial reinkommt.

01:02:52.700 --> 01:03:06.680
Dann checkt er, ob er nicht schon asynchron läuft.

01:03:06.680 --> 01:03:08.680
Und dann startet er sich selber nochmal.

01:03:08.680 --> 01:03:13.210
Boah, das ist ja mal voll durch die Brust ins Auge.

01:03:13.210 --> 01:03:17.210
Also, soweit ich das verstehe, passiert hier folgendes in dem Beispiel.

01:03:17.210 --> 01:03:19.210
Sobald ein Request reinkommt.

01:03:19.210 --> 01:03:21.210
Für diesen Händler wird er aufgerufen.

01:03:21.210 --> 01:03:27.210
Dann guckt er, ob er schon asynchron läuft.

01:03:27.210 --> 01:03:30.210
Was er ja beim ersten Request nicht macht.

01:03:30.210 --> 01:03:38.520
Wenn er nicht asynchron läuft, dann startet er sich selbst neu in einem Background-Thread.

01:03:38.520 --> 01:03:43.520
Und das nächste Mal, wenn das hier aufgerufen wird, ist das hier dann true.

01:03:43.520 --> 01:03:45.520
Und das wird übersprungen.

01:03:45.520 --> 01:03:48.520
Wenn man hier nicht aufpasst, hat man übrigens eine Endlosschleife gebaut.

01:03:48.520 --> 01:03:49.520
Und der ruft sich immer wieder auf, bis es crasht.

01:03:49.520 --> 01:03:58.190
Das haben die gemacht, dass wenn der Threadpool keinen Platz mehr hat vermutlich.

01:03:58.190 --> 01:04:02.190
Ich bin mir da nicht so ganz sicher, was sie da gebaut haben.

01:04:02.190 --> 01:04:04.190
Ja, und danach macht er irgendwelche Sachen.

01:04:04.190 --> 01:04:07.850
Heißt im Endeffekt...

01:04:07.850 --> 01:04:09.850
Alter, wat?

01:04:09.850 --> 01:04:12.850
Submit Async Request.

01:04:12.850 --> 01:04:18.930
Also, das ruft er auf, um sich asynchron zu machen.

01:04:18.930 --> 01:04:25.900
Das ist er selbst.

01:04:25.900 --> 01:04:27.900
Das ist in dem Fall die Funktion hier.

01:04:39.750 --> 01:04:41.750
Okay, das ist wahrscheinlich das, auf was es ankommt.

01:04:41.750 --> 01:04:44.750
Ich glaube, den Rest können wir schon mal knicken hier.

01:04:44.750 --> 01:04:48.750
httpd Request Async Handler Begin.

01:04:48.750 --> 01:04:50.750
Das müssen wir machen.

01:04:50.750 --> 01:04:52.750
Wisst ihr was?

01:04:52.750 --> 01:04:56.750
Ich lasse dieses ganze super-advanced Zeug von denen mal hier weg.

01:04:56.750 --> 01:05:04.960
Was macht der da?

01:05:04.960 --> 01:05:12.360
Guckt, ob er schon im Essen...

01:05:12.360 --> 01:05:14.360
Da haben sie eine Queue für die Sachen.

01:05:14.360 --> 01:05:33.200
Und hier erzeugt er den Background-Thread.

01:05:33.200 --> 01:05:35.200
Er ist free, Erthos.

01:05:35.200 --> 01:05:38.200
Okay, ich glaube, ich habe es gecheckt, was passiert.

01:05:38.200 --> 01:05:40.520
Also...

01:05:40.520 --> 01:05:41.520
Gucken, ob das stimmt.

01:05:41.520 --> 01:05:42.520
Ja, hier, okay.

01:05:42.520 --> 01:05:44.520
Ich glaube, ich habe es verstanden.

01:05:44.520 --> 01:05:46.520
Und zwar...

01:05:46.520 --> 01:05:48.520
Der ruft als erstes das hier auf.

01:05:48.520 --> 01:05:50.520
Noch nach dem Start.

01:05:50.520 --> 01:05:52.520
Was das hier macht, ist...

01:05:52.520 --> 01:05:56.520
Dieses ganze Ding ist im Prinzip nur dafür da, um zu checken,

01:05:56.520 --> 01:06:01.520
ob es neue Requests gibt, die asynchron bearbeitet werden müssen.

01:06:01.520 --> 01:06:04.520
Und zwar scheint es hier eine Message-Queue zu geben.

01:06:04.520 --> 01:06:06.520
Irgendwie hier eine Message-Queue.

01:06:06.520 --> 01:06:08.520
Eine Message-Queue.

01:06:08.520 --> 01:06:12.180
Und...

01:06:12.180 --> 01:06:16.180
Dort werden quasi asynchrone Requests reingepusht, wenn man so will.

01:06:16.180 --> 01:06:18.180
In diese Message-Queue.

01:06:18.180 --> 01:06:20.180
Er startet...

01:06:20.180 --> 01:06:22.180
Ja...

01:06:22.180 --> 01:06:26.180
Eine vordefinierte Anzahl von Threads.

01:06:26.180 --> 01:06:28.180
Von Tasks.

01:06:28.180 --> 01:06:30.180
Aber es sind im Prinzip quasi Threads.

01:06:30.180 --> 01:06:34.360
Und...

01:06:34.360 --> 01:06:36.360
Diese Threads startet er...

01:06:36.360 --> 01:06:38.360
Mit...

01:06:38.360 --> 01:06:43.620
Ja...

01:06:43.620 --> 01:06:45.620
Das ist der Einstieg quasi für den jeweiligen Thread.

01:06:45.620 --> 01:06:51.620
Und das ist eine Endlosschleife, die nachguckt in dieser Message-Queue,

01:06:51.620 --> 01:06:55.620
ob es neue Requests gibt, die zu bearbeiten sind.

01:06:55.620 --> 01:06:57.620
Und...

01:06:57.620 --> 01:07:00.620
Wenn ja, dann geht er hier rein.

01:07:00.620 --> 01:07:04.620
Bearbeitet die Methode, definiert es für den jeweiligen Request.

01:07:04.620 --> 01:07:06.620
Und wenn er fertig ist, räumt er auf.

01:07:06.620 --> 01:07:09.620
Ich glaube, das ist so die Essenz des Ganzen, was passiert.

01:07:09.620 --> 01:07:11.620
Wir werden uns diese ganze Message-Queue glauben.

01:07:11.620 --> 01:07:13.620
Komplett schenken.

01:07:13.620 --> 01:07:15.620
Zum Ausprobieren ist das komplett Overkill.

01:07:15.620 --> 01:07:19.620
Wir starten einfach für jeden Request einen neuen Thread.

01:07:19.620 --> 01:07:23.120
Und hoffen, dass es funktioniert.

01:07:23.120 --> 01:07:25.120
Aber das hier brauchen wir.

01:07:25.120 --> 01:07:27.120
Wir brauchen Async-Händler Complete.

01:07:27.120 --> 01:07:34.880
Wir brauchen...

01:07:34.880 --> 01:07:36.880
Wie heißt das andere?

01:07:36.880 --> 01:07:38.880
Async-Händler Begin.

01:07:38.880 --> 01:07:40.880
Das hier brauchen wir.

01:07:40.880 --> 01:07:42.880
Und dann Complete danach.

01:07:42.880 --> 01:07:44.880
Okay.

01:07:44.880 --> 01:07:46.880
Dann machen wir das doch mal.

01:07:46.880 --> 01:07:48.880
Wir haben hier eine neue Funktion.

01:07:48.880 --> 01:07:54.880
Static Void Handle Post.

01:07:54.880 --> 01:07:56.880
Oder so.

01:07:56.880 --> 01:07:58.880
Handle Post.

01:07:58.880 --> 01:08:04.870
Da weiß ich zufällig aus dem Kopf, was das Ding für Parameter braucht.

01:08:04.870 --> 01:08:06.870
HTTP Requests.

01:08:06.870 --> 01:08:08.870
Braucht das.

01:08:08.870 --> 01:08:14.790
Und zurück gibt das ein ESP-Error.

01:08:14.790 --> 01:08:16.790
So, jetzt sollte es zumindest noch mal kompilieren.

01:08:16.790 --> 01:08:18.790
Gut.

01:08:18.790 --> 01:08:20.790
Und jetzt müssen wir das Ganze hier mit diesem Asynchronen-Krempel machen.

01:08:20.790 --> 01:08:22.790
Also.

01:08:22.790 --> 01:08:24.790
httpd Request Copy.

01:08:26.790 --> 01:08:28.790
Ich vermute mal, was an der Stelle passiert ist.

01:08:28.790 --> 01:08:32.040
Der

01:08:32.040 --> 01:08:34.040
kopiert sich quasi alles,

01:08:34.040 --> 01:08:36.040
was zu diesem Request gehört, raus.

01:08:36.040 --> 01:08:38.040
Dass der...

01:08:38.040 --> 01:08:40.040
Also bis...

01:08:40.040 --> 01:08:42.040
Hier ist es ja noch synchron.

01:08:42.040 --> 01:08:44.040
Der Request kommt rein.

01:08:44.040 --> 01:08:46.040
Und die Methode wird hier aufgerufen.

01:08:46.040 --> 01:08:48.040
Das ist alles noch synchron.

01:08:48.040 --> 01:08:50.040
Und dann kann der Webserver genau diesen einen Request verarbeiten.

01:08:50.040 --> 01:08:52.040
Und keinen zweiten Request gleichzeitig.

01:08:52.040 --> 01:08:54.040
Jetzt kopiert er sich alles,

01:08:54.040 --> 01:08:56.040
was zu diesem Request gehört.

01:08:56.040 --> 01:08:58.040
Sodass das quasi den Request überlebt.

01:08:58.040 --> 01:09:00.040
Diesen synchronen Request.

01:09:00.040 --> 01:09:04.820
Und jetzt muss ich mich drum kümmern,

01:09:04.820 --> 01:09:06.820
dass das asynchron weiterläuft.

01:09:06.820 --> 01:09:08.820
Sodass quasi der synchrone Request

01:09:08.820 --> 01:09:10.820
oder der Webserver

01:09:10.820 --> 01:09:12.820
einmal synchron durchlaufen kann,

01:09:12.820 --> 01:09:14.820
aber im Hintergrund die Bearbeitung weiterläuft.

01:09:14.820 --> 01:09:16.820
Ist das...

01:09:16.820 --> 01:09:18.820
Klingt ein bisschen...

01:09:18.820 --> 01:09:20.820
Ne, das könnte Sonic oder Mario Kart sein.

01:09:20.820 --> 01:09:22.820
Das ist Mario Kart.

01:09:22.820 --> 01:09:24.820
Mario Kart.

01:09:24.820 --> 01:09:29.250
Das kommt mir irgendwie bekannt vor.

01:09:29.250 --> 01:09:31.250
Okay, und jetzt?

01:09:31.250 --> 01:09:33.250
Und jetzt führen sie das einfach wieder aus, oder?

01:09:33.250 --> 01:09:35.250
Okay, wir...

01:09:35.250 --> 01:09:37.250
Leute, wir werden dieses

01:09:37.250 --> 01:09:39.250
Example jetzt einfach mal zusammendampfen

01:09:39.250 --> 01:09:41.250
auf...

01:09:41.250 --> 01:09:43.250
drei Zeilen.

01:09:43.250 --> 01:09:45.250
Ähm...

01:09:45.250 --> 01:09:47.250
Wir starten hier jetzt einen neuen Thread.

01:09:49.250 --> 01:09:51.250
Glücklicherweise

01:09:51.250 --> 01:09:53.250
habe ich mir da schon mal irgendwann

01:09:53.250 --> 01:09:55.250
einen Rapper für gebaut.

01:09:55.250 --> 01:09:57.250
Also wir machen jetzt...

01:09:57.250 --> 01:09:59.250
Wir machen im Prinzip das hier.

01:09:59.250 --> 01:10:02.630
Nur gerappt.

01:10:02.630 --> 01:10:04.630
Wir starten einen neuen Thread.

01:10:04.630 --> 01:10:08.870
Und zwar...

01:10:08.870 --> 01:10:10.870
machen wir das da drinnen.

01:10:10.870 --> 01:10:12.870
Und das Ding heißt

01:10:12.870 --> 01:10:14.870
Runtask.

01:10:14.870 --> 01:10:16.870
Das Ding heißt, äh, ja...

01:10:16.870 --> 01:10:24.760
HandlePost.

01:10:24.760 --> 01:10:28.420
So.

01:10:28.420 --> 01:10:30.420
Ja, ich hab mir das...

01:10:30.420 --> 01:10:32.420
Ich kann euch das auch zeigen.

01:10:32.420 --> 01:10:34.420
Hier.

01:10:34.420 --> 01:10:36.420
Ich weiß, das ist bestimmt ein sehr hässliches

01:10:36.420 --> 01:10:38.420
C++, aber es funktioniert.

01:10:38.420 --> 01:10:40.420
Äh, der macht im Prinzip

01:10:40.420 --> 01:10:42.420
unter der Haube

01:10:42.420 --> 01:10:44.420
das, was dort auch drinnen steht.

01:10:44.420 --> 01:10:46.420
Der macht, äh...

01:10:46.420 --> 01:10:51.490
XtasCreate.

01:10:51.490 --> 01:10:53.490
Nur, dass ich mich um den ganzen anderen Kempel

01:10:53.490 --> 01:10:55.490
nicht mehr kümmern muss.

01:10:55.490 --> 01:10:57.490
Und es ist

01:10:57.490 --> 01:10:59.490
möglich, hier den Lambda zu übergeben,

01:10:59.490 --> 01:11:01.490
was er machen soll.

01:11:01.490 --> 01:11:03.490
Deswegen ist das zum Benutzen

01:11:03.490 --> 01:11:05.490
dann angenehmer.

01:11:05.490 --> 01:11:07.490
Wir starten einen eigenen Thread.

01:11:07.490 --> 01:11:09.490
In diesem Thread machen wir jetzt folgendes.

01:11:09.490 --> 01:11:11.490
Was macht er denn jetzt hier drinnen eigentlich?

01:11:11.490 --> 01:11:13.490
Im Prinzip startet er jetzt ja diesen long...

01:11:13.490 --> 01:11:15.490
Wie hieß das Ding?

01:11:15.490 --> 01:11:17.490
LongAsync?

01:11:17.490 --> 01:11:19.490
Ja, das da startet er jetzt nochmal.

01:11:19.490 --> 01:11:21.490
Diesen ganzen

01:11:21.490 --> 01:11:23.490
Krempel haben wir geskippt.

01:11:23.490 --> 01:11:25.490
Und hier drinnen macht er

01:11:25.490 --> 01:11:27.490
ganz normales HTTP Zeug.

01:11:27.490 --> 01:11:33.300
Er sendet auch eine Antwort.

01:11:33.300 --> 01:11:42.120
Okay.

01:11:42.120 --> 01:11:44.120
Dann lasst uns doch erstmal testen,

01:11:44.120 --> 01:11:46.120
ob ein GetRequest richtig funktioniert.

01:11:46.120 --> 01:11:48.120
Ich weiß, es ist vielleicht ein bisschen dumm,

01:11:48.120 --> 01:11:50.120
dass der GetRequest

01:11:50.120 --> 01:11:52.120
jetzt kurz mal temporär

01:11:52.120 --> 01:11:57.700
HandlePost heißt, aber...

01:11:57.700 --> 01:11:59.700
Wir handeln jetzt mal einen GetRequest...

01:11:59.700 --> 01:12:01.700
Oh ne, das Formatieren

01:12:01.700 --> 01:12:03.700
von den Dingern ist wieder voll am

01:12:03.700 --> 01:12:07.110
abkacken.

01:12:07.110 --> 01:12:10.360
Oh man.

01:12:10.360 --> 01:12:12.360
Warum ist das teilweise...

01:12:12.360 --> 01:12:14.360
Man fühlt sich übelst sabotiert manchmal.

01:12:14.360 --> 01:12:16.360
Ich mein, wer hat gedacht,

01:12:16.360 --> 01:12:18.360
dass das eine gute Formatierung ist dafür?

01:12:18.360 --> 01:12:24.550
The fuck?

01:12:24.550 --> 01:12:26.550
Ah, what the...

01:12:26.550 --> 01:12:36.480
Alter!

01:12:36.480 --> 01:12:38.480
Keine Ahnung.

01:12:38.480 --> 01:12:40.480
Okay, also was führen wir jetzt hier drinnen aus?

01:12:40.480 --> 01:12:44.440
Im Prinzip

01:12:44.440 --> 01:12:46.440
responden wir einfach.

01:12:46.440 --> 01:12:48.440
Wir testen einfach mal, ob es funktioniert.

01:12:48.440 --> 01:12:52.160
Hier, ähm...

01:12:52.160 --> 01:12:54.160
Response, ne, hier, send 400.

01:12:54.160 --> 01:12:56.160
Send, das machen wir.

01:12:56.160 --> 01:12:58.160
Wir senden jetzt einfach eine Antwort hier drinnen.

01:12:58.160 --> 01:13:00.160
Allerdings...

01:13:00.160 --> 01:13:02.160
senden wir jetzt keine...

01:13:02.160 --> 01:13:04.160
Ach, jetzt sieht es ja ganz brauchbar

01:13:04.160 --> 01:13:06.160
vom... Alter!

01:13:06.160 --> 01:13:08.160
Visual Studio Code mal entscheiden.

01:13:08.160 --> 01:13:10.160
Allerdings dürfen wir jetzt nicht den Request

01:13:10.160 --> 01:13:12.160
verwenden, sondern müssen diese Copy

01:13:12.160 --> 01:13:16.020
von diesem Request verwenden.

01:13:16.020 --> 01:13:18.020
So, das heißt wir...

01:13:18.020 --> 01:13:20.020
jetzt die Copy...

01:13:20.020 --> 01:13:22.020
So, nicht gzip,

01:13:22.020 --> 01:13:24.020
html ist okay.

01:13:24.020 --> 01:13:26.020
Und wir antworten auch nur...

01:13:26.020 --> 01:13:30.260
äh, ja...

01:13:30.260 --> 01:13:32.260
keckel antworten wir.

01:13:32.260 --> 01:13:37.200
Das muss reichen.

01:13:37.200 --> 01:13:40.960
So.

01:13:40.960 --> 01:13:42.960
Ich weiß nicht, was Visual Studio da

01:13:42.960 --> 01:13:46.400
gerade rumformatiert, aber...

01:13:46.400 --> 01:13:48.400
So.

01:13:48.400 --> 01:13:50.400
Und jetzt... Ha!

01:13:50.400 --> 01:13:52.400
Und jetzt... Ha, das hätte ich sonst vergessen, sonst Memory

01:13:52.400 --> 01:13:54.400
leakts. Und jetzt müssen wir sagen

01:13:54.400 --> 01:13:56.400
asynch handler complete.

01:13:56.400 --> 01:13:58.400
Was im Endeffekt quasi

01:13:58.400 --> 01:14:00.400
eine Art free ist, vermutlich.

01:14:00.400 --> 01:14:11.750
Ja, so.

01:14:11.750 --> 01:14:13.750
Also wenn ich

01:14:13.750 --> 01:14:18.500
Glück habe, funzt es jetzt.

01:14:18.500 --> 01:14:20.500
Curl...

01:14:20.500 --> 01:14:22.500
äh, wie habe ich es genannt? Update?

01:14:22.500 --> 01:14:24.500
Ganz normaler Get-Request.

01:14:24.500 --> 01:14:26.500
...

01:14:26.500 --> 01:14:28.500
...

01:14:28.500 --> 01:14:39.810
...

01:14:39.810 --> 01:14:41.810
Okay, schauen wir mal, ob es funzt. Bam!

01:14:41.810 --> 01:14:43.810
Easy!

01:14:43.810 --> 01:14:45.810
Keckel!

01:14:45.810 --> 01:14:47.810
So, jetzt müssen wir mal gucken, ob das ordentlich

01:14:47.810 --> 01:14:49.810
asynchron funktioniert. Wir bauen da jetzt mal

01:14:49.810 --> 01:14:51.810
einen Delay ein.

01:14:51.810 --> 01:14:53.810
Delay...

01:14:53.810 --> 01:14:55.810
1000. Und jetzt führen wir einfach

01:14:55.810 --> 01:14:57.810
zwei Curls aus.

01:14:57.810 --> 01:14:59.810
Gleichzeitig und gucken, ob das asynchron ist.

01:14:59.810 --> 01:15:01.810
Wobei, nee, nee, nee, nee, nee.

01:15:01.810 --> 01:15:03.810
Wir machen das noch viel besser.

01:15:03.810 --> 01:15:05.810
Send.

01:15:05.810 --> 01:15:07.810
Chunk können wir noch machen,

01:15:07.810 --> 01:15:13.110
oder?

01:15:13.110 --> 01:15:15.110
Das sieht man ja auch so.

01:15:15.110 --> 01:15:22.320
Delay 1000.

01:15:22.320 --> 01:15:24.320
So, wir machen jetzt zwei Curls.

01:15:24.320 --> 01:15:26.320
Und die sollten jetzt beide

01:15:26.320 --> 01:15:28.320
hängen, aber

01:15:28.320 --> 01:15:30.320
...

01:15:30.320 --> 01:15:32.320
dann eine Antwort bekommen nach jeweils einer Sekunde.

01:15:32.320 --> 01:15:34.320
Sie hängen jetzt parallel

01:15:34.320 --> 01:15:40.900
gleich. Habe ich eine IP?

01:15:40.900 --> 01:15:42.900
Ja.

01:15:42.900 --> 01:15:46.340
Okay. Ich würde sagen, das funzt.

01:15:46.340 --> 01:15:49.810
Guck mal. Wir können mehrere

01:15:49.810 --> 01:15:51.810
Curl-Befehle parallel ausführen.

01:15:51.810 --> 01:15:53.810
Na, ob das so richtig

01:15:53.810 --> 01:15:55.810
parallel ist, weiß ich nicht. Wir machen mal

01:15:55.810 --> 01:15:59.090
Send. Chunk.

01:15:59.090 --> 01:16:01.090
Ja, Send. Chunk.

01:16:01.090 --> 01:16:06.870
Null?

01:16:06.870 --> 01:16:08.870
Wir machen das mal.

01:16:08.870 --> 01:16:10.870
Wir senden da wirklich mal was zurück.

01:16:10.870 --> 01:16:14.880
Mal eine Vorschleife.

01:16:14.880 --> 01:16:16.880
Ja.

01:16:16.880 --> 01:16:18.880
Zehn Stück.

01:16:18.880 --> 01:16:20.880
Zehn Mal senden wir da

01:16:20.880 --> 01:16:22.880
was zurück. Oder keine Ahnung. Wir können auch 100 Mal

01:16:22.880 --> 01:16:24.880
was zurück senden. Ist auch egal.

01:16:24.880 --> 01:16:26.880
Okay, und dann warten wir jeweils 50 Millisekunden

01:16:26.880 --> 01:16:28.880
dazwischen.

01:16:28.880 --> 01:16:30.880
Format ist übrigens kaputt.

01:16:30.880 --> 01:16:32.880
Visual Studio formatiert nicht

01:16:32.880 --> 01:16:34.880
mehr. Hat's gedacht.

01:16:34.880 --> 01:16:38.480
Nope. Kein Bock mehr zu formatieren.

01:16:38.480 --> 01:16:40.480
Jetzt. Ach, jetzt geht's.

01:16:40.480 --> 01:16:42.480
Alter, das ist so schlecht,

01:16:42.480 --> 01:16:46.240
Mann.

01:16:46.240 --> 01:16:48.240
Wie kann es so schlecht sein, Alter?

01:16:48.240 --> 01:16:51.840
So, und jetzt sagen wir

01:16:51.840 --> 01:16:53.840
Leon, danke schön für den Sub.

01:16:53.840 --> 01:16:55.840
Chunk.

01:16:55.840 --> 01:16:57.840
Send, String, Chunk.

01:16:57.840 --> 01:17:02.210
Ja.

01:17:02.210 --> 01:17:04.210
Okay, wir senden jetzt

01:17:04.210 --> 01:17:06.210
Kekkel. Ne, wir senden

01:17:06.210 --> 01:17:08.210
ja, wir senden Kekkel.

01:17:08.210 --> 01:17:10.210
Kekkel 1 senden wir jetzt. Okay, wir senden

01:17:10.210 --> 01:17:12.210
jetzt, ne, wir senden die jeweilige Zahl

01:17:12.210 --> 01:17:14.210
von der, ja, Kekkel plus

01:17:14.210 --> 01:17:17.810
FMT

01:17:17.810 --> 01:17:24.550
Format I.

01:17:24.550 --> 01:17:26.550
Okay.

01:17:26.550 --> 01:17:28.550
Senden wir da jetzt.

01:17:28.550 --> 01:17:30.550
Weil's sonst zu hübsch wird wahrscheinlich.

01:17:30.550 --> 01:17:32.550
Okay, also wir

01:17:32.550 --> 01:17:34.550
sind komplett.

01:17:34.550 --> 01:17:36.550
Und dann muss man am Ende

01:17:36.550 --> 01:17:38.550
was machen?

01:17:38.550 --> 01:17:43.240
Request 0.

01:17:43.240 --> 01:17:45.240
Okay.

01:17:45.240 --> 01:17:49.800
Das so quasi, jetzt ist Schluss, oder wie?

01:17:49.800 --> 01:17:51.800
Ah, 0 to finish response packet.

01:17:51.800 --> 01:17:53.800
Obviously.

01:17:53.800 --> 01:17:58.960
Weiß jeder.

01:17:58.960 --> 01:18:00.960
Alles klar. So. Schauen wir mal.

01:18:00.960 --> 01:18:05.620
Ich hatte bis jetzt noch keinen

01:18:05.620 --> 01:18:07.620
großartig kryptischen Error.

01:18:07.620 --> 01:18:10.900
Auch sehr ungewohnt.

01:18:10.900 --> 01:18:12.900
Welches Betriebssystem ist das? Hier?

01:18:12.900 --> 01:18:14.900
Das ist Arch, by the way.

01:18:14.900 --> 01:18:21.030
Ich use Arch.

01:18:21.030 --> 01:18:24.530
Das ist Arch Deluxe mit

01:18:24.530 --> 01:18:26.530
I3.

01:18:26.530 --> 01:18:28.530
Inner4M, wohlgemerkt.

01:18:28.530 --> 01:18:30.530
Okay, update.

01:18:30.530 --> 01:18:32.530
Äh.

01:18:32.530 --> 01:18:34.530
Also, das läuft

01:18:34.530 --> 01:18:36.530
asynchron, aber mein...

01:18:36.530 --> 01:18:45.640
Wow, wow, wow, wow, wow.

01:18:45.640 --> 01:18:47.640
Chat, das funktioniert

01:18:47.640 --> 01:18:53.190
nicht, was ich hier gebaut hab.

01:18:53.190 --> 01:18:55.190
Ah, siehste mal, ich kack noob.

01:18:55.190 --> 01:18:57.190
Es muss Copy sein.

01:18:57.190 --> 01:18:59.190
Oder?

01:18:59.190 --> 01:19:01.190
Und nicht Request.

01:19:01.190 --> 01:19:03.190
Ich hoffe, ich verwende hier nirgends

01:19:03.190 --> 01:19:16.070
so Request. Ist das CMake?

01:19:16.070 --> 01:19:21.200
Ja, ja.

01:19:21.200 --> 01:19:23.200
Das ist aber nicht, was ich selbst

01:19:23.200 --> 01:19:25.200
konfiguriert hab. Das ist, wenn du das

01:19:25.200 --> 01:19:27.200
ESP-IDF-Beispielprojekt klonst,

01:19:27.200 --> 01:19:29.200
ist das alles schon vorkonfiguriert.

01:19:29.200 --> 01:19:31.200
Ich nehm immer das Beispiel und

01:19:31.200 --> 01:19:33.200
copy-paste den Rest so hin, wie ich's haben will.

01:19:33.200 --> 01:19:35.200
Ähm. Was macht die

01:19:35.200 --> 01:19:37.200
Sunshine-Kiste, wenn ich

01:19:37.200 --> 01:19:41.000
weitergebaut? Äh.

01:19:41.000 --> 01:19:45.910
So wirklich? Ey, es

01:19:45.910 --> 01:19:51.750
funzt, Leute! Also,

01:19:51.750 --> 01:19:53.750
der macht asynchron was.

01:19:53.750 --> 01:19:55.750
Aber warum zeigt mir Curl nix an?

01:19:55.750 --> 01:19:57.750
Warte mal, wie ist das

01:19:57.750 --> 01:19:59.750
bei... Moment, Moment, Moment.

01:19:59.750 --> 01:20:01.750
Muss man da nicht, bei Chunk,

01:20:01.750 --> 01:20:03.750
muss man da nicht Newline, Newline

01:20:03.750 --> 01:20:05.750
irgendwie reinmachen?

01:20:05.750 --> 01:20:07.750
Dass das, dass das

01:20:07.750 --> 01:20:09.750
HTTP das checkt? Oder, oder

01:20:09.750 --> 01:20:11.750
war das, oder ist das SMTP?

01:20:11.750 --> 01:20:13.750
Ich kann mir das immer nicht merken.

01:20:13.750 --> 01:20:15.750
Oder ist es

01:20:15.750 --> 01:20:17.750
Carriage-Return-Newline? Was muss man

01:20:17.750 --> 01:20:19.750
bei HTTP reinmachen, dass der, dass der,

01:20:19.750 --> 01:20:21.750
dass der irgendwie...

01:20:21.750 --> 01:20:23.750
Warte mal, HTTP

01:20:23.750 --> 01:20:25.750
Chunk, Newline...

01:20:25.750 --> 01:20:39.270
Ah, jetzt funzt! Guck!

01:20:39.270 --> 01:20:41.270
So, und jetzt, und jetzt sollte ich

01:20:41.270 --> 01:20:43.270
in der Lage sein, das zweimal

01:20:43.270 --> 01:20:45.270
parallel zu machen.

01:20:45.270 --> 01:20:47.270
Geht! Das beweist der,

01:20:47.270 --> 01:20:49.270
der Request, der Get-Request ist asynchron.

01:20:49.270 --> 01:20:51.270
Ich kann

01:20:51.270 --> 01:20:53.270
zwei, das ging früher nicht. Früher

01:20:53.270 --> 01:20:55.270
konnte der Webserver immer genau ein

01:20:55.270 --> 01:20:59.190
Request parallel bearbeiten.

01:20:59.190 --> 01:21:01.190
Das ist asynchron. Nice.

01:21:01.190 --> 01:21:03.190
Ähm, jetzt ist die Frage,

01:21:03.190 --> 01:21:05.190
lasst uns mal ausprobieren,

01:21:05.190 --> 01:21:08.690
wie viele Requests,

01:21:08.690 --> 01:21:12.420
da müssen wir das auch ein bisschen,

01:21:12.420 --> 01:21:16.440
machen wir ein bisschen länger, okay.

01:21:16.440 --> 01:21:18.440
Wie, wie viele Requests,

01:21:18.440 --> 01:21:22.900
kann ich denn,

01:21:22.900 --> 01:21:24.900
was meint ihr, wie viele gehen?

01:21:24.900 --> 01:21:26.900
Wir machen mal acht.

01:21:26.900 --> 01:21:35.810
Machen einfach unter, hinter.

01:21:35.810 --> 01:21:39.320
Okay. Eins, zwei,

01:21:39.320 --> 01:21:41.320
drei, vier, fünf, sechs,

01:21:41.320 --> 01:21:43.320
sieben, acht.

01:21:43.320 --> 01:21:45.320
Man sieht es jetzt halt nicht richtig.

01:21:45.320 --> 01:21:47.320
Also acht Requests scheinen zu

01:21:47.320 --> 01:21:49.320
funktionieren. Oh!

01:21:49.320 --> 01:21:52.920
Das war jetzt vielleicht ein bisschen viel auf einmal.

01:21:52.920 --> 01:21:56.160
Äh, acht Requests macht

01:21:56.160 --> 01:22:02.610
ihn schon ein bisschen fertig.

01:22:02.610 --> 01:22:04.610
Aber er crasht noch nicht, er crasht noch nicht.

01:22:04.610 --> 01:22:06.610
Ach bloß, er ist ein bisschen zu ausgelastet.

01:22:06.610 --> 01:22:14.210
Okay, ich gebe jetzt auf zehntausend

01:22:14.210 --> 01:22:16.210
hoch, das ist vielleicht ein bisschen viel.

01:22:16.210 --> 01:22:20.360
Ich brech mal ab.

01:22:20.360 --> 01:22:22.360
Kill, all, curl, bam.

01:22:22.360 --> 01:22:27.880
Ist vielleicht ein bisschen viel, ja.

01:22:27.880 --> 01:22:43.060
Was meint ihr, wie viele, wie viele

01:22:43.060 --> 01:22:45.060
Requests gehen da maximal? Acht?

01:22:45.060 --> 01:22:47.060
Neun, zehn, elf?

01:22:47.060 --> 01:22:49.060
Gucken wir mal, ich starte einfach jetzt.

01:22:49.060 --> 01:22:51.060
Bis er crasht, irgendwann wird er ja crashen.

01:22:51.060 --> 01:22:59.110
Okay.

01:22:59.110 --> 01:23:01.110
Zwei, drei, vier, fünf, sechs,

01:23:01.110 --> 01:23:03.110
sieben, acht, neun, zehn,

01:23:03.110 --> 01:23:05.110
elf, zwölf, dreizehn,

01:23:05.110 --> 01:23:07.110
vierzehn, fünfzehn, sechzehn, siebzehn,

01:23:07.110 --> 01:23:09.110
achtzehn, neunzehn, zwanzig.

01:23:09.110 --> 01:23:11.110
Ich habe jetzt zwanzig Requests laufen.

01:23:11.110 --> 01:23:13.110
Also wenn zwanzig Parallele, wenn

01:23:13.110 --> 01:23:15.110
dieser, wenn der zwanzig Parallele

01:23:15.110 --> 01:23:17.110
Requests abkann, dann ist das Pog.

01:23:17.110 --> 01:23:24.960
Der ist nicht gecrashed, das sieht nur so aus.

01:23:24.960 --> 01:23:26.960
Der crasht aber nicht.

01:23:26.960 --> 01:23:28.960
Der ist aber kurz vorm

01:23:28.960 --> 01:23:32.820
crashen, würde ich sagen.

01:23:32.820 --> 01:23:34.820
Solange die Zahl hier vorne noch hoch

01:23:34.820 --> 01:23:36.820
läuft, ist er nicht gecrashed. Das ist die

01:23:36.820 --> 01:23:38.820
Uptime. Die Uptime in Millisekunden

01:23:38.820 --> 01:23:43.830
hier vorne.

01:23:43.830 --> 01:23:45.830
Ja, könnte man machen.

01:23:45.830 --> 01:23:47.830
Aber das ist ein Microcontroller,

01:23:47.830 --> 01:23:49.830
der maximal keine 20 Requests abkann

01:23:49.830 --> 01:24:00.210
oder so. Ich überlege gerade,

01:24:00.210 --> 01:24:02.210
wie hieß dieses Ding? Oh, er ist fertig.

01:24:02.210 --> 01:24:04.210
Er ist fertig.

01:24:04.210 --> 01:24:07.620
Die ersten Requests sind fertig.

01:24:07.620 --> 01:24:09.620
Ah, guck mal, der kann doch nicht so viele

01:24:09.620 --> 01:24:11.620
Parallel bearbeiten. Guckt mal.

01:24:11.620 --> 01:24:13.620
Jetzt macht er nämlich die nächsten

01:24:13.620 --> 01:24:15.620
Requests erst. Die anderen hingen so lang.

01:24:15.620 --> 01:24:20.850
Aha. Ja, okay.

01:24:20.850 --> 01:24:22.850
Das klappt doch nicht so ganz.

01:24:22.850 --> 01:24:27.350
Ja, der ist, das ist ein bisschen

01:24:27.350 --> 01:24:30.880
viel. Aber ich mache

01:24:30.880 --> 01:24:32.880
das. Nein, das ist ein Microcontroller,

01:24:32.880 --> 01:24:34.880
der muss keine 20 Parallelrequests.

01:24:34.880 --> 01:24:36.880
Wie hieß denn dieses Ding, was ich mal

01:24:36.880 --> 01:24:38.880
letztens, so gar nicht so lange her, im Stream

01:24:38.880 --> 01:24:40.880
verwendet habe? Es war, es war nicht

01:24:40.880 --> 01:24:42.880
Locust, das habe ich noch nicht verwendet.

01:24:42.880 --> 01:24:44.880
Äh, HTTP

01:24:44.880 --> 01:24:52.130
Load, oder?

01:24:52.130 --> 01:24:54.130
Ich habe es vergessen.

01:24:54.130 --> 01:24:56.130
Aber wir wollen ja auch, also HTTP

01:24:56.130 --> 01:24:58.130
Load Test Tools sind gar nicht

01:24:58.130 --> 01:25:00.130
so gut dafür in dem Fall, weil

01:25:00.130 --> 01:25:02.130
ich habe lange Requests.

01:25:02.130 --> 01:25:04.130
Ich will nicht viele Requests machen,

01:25:04.130 --> 01:25:11.030
ich habe lange Requests.

01:25:11.030 --> 01:25:13.030
Mit GDB. Ja, aber nur sehr rudimentär.

01:25:13.030 --> 01:25:15.030
Äh, Core Dumps

01:25:15.030 --> 01:25:17.030
mir angeguckt.

01:25:17.030 --> 01:25:19.030
Okay, das ist, das

01:25:19.030 --> 01:25:21.030
Ding ist voll am eskalieren, weil ich ein paar

01:25:21.030 --> 01:25:23.030
Requests gemacht habe. Ich reset das mal kurz.

01:25:23.030 --> 01:25:27.010
Ich will mal kurz gucken, wie viel packt

01:25:27.010 --> 01:25:29.010
das hier. Okay, also ein Request packt

01:25:29.010 --> 01:25:31.010
es auf jeden Fall. Zwei packt es auch

01:25:31.010 --> 01:25:33.010
ohne Probleme. Drei packt es auch

01:25:33.010 --> 01:25:35.010
ohne Probleme. Vier

01:25:35.010 --> 01:25:37.010
packt es auch ohne Probleme.

01:25:37.010 --> 01:25:39.010
Fünf auch, hä?

01:25:39.010 --> 01:25:41.010
Sechs auch.

01:25:41.010 --> 01:25:43.010
Sieben auch.

01:25:43.010 --> 01:25:45.010
Acht

01:25:45.010 --> 01:25:47.010
auch.

01:25:47.010 --> 01:25:49.010
Ne, sieben Requests.

01:25:51.010 --> 01:25:53.010
Ab sieben Requests ist er auch am meckern,

01:25:53.010 --> 01:25:55.010
dass der Thread, dass er

01:25:55.010 --> 01:25:57.010
nichts mehr, keine neuen Sachen starten

01:25:57.010 --> 01:26:00.930
kann. Okay, also sieben

01:26:00.930 --> 01:26:02.930
Requests.

01:26:02.930 --> 01:26:04.930
Dann ist Schluss.

01:26:04.930 --> 01:26:15.220
Dann ist er am Abspacken schon.

01:26:15.220 --> 01:26:17.220
Okay.

01:26:17.220 --> 01:26:19.220
Das würde ich sagen, ist mehr als genug für so einen

01:26:19.220 --> 01:26:21.220
kleinen Controller.

01:26:21.220 --> 01:26:23.220
Man könnte wahrscheinlich, man könnte wahrscheinlich

01:26:23.220 --> 01:26:25.220
noch mehr machen.

01:26:25.220 --> 01:26:27.220
Ja, ESP mit Display. Man könnte

01:26:27.220 --> 01:26:29.220
noch mehr machen. Aber heute was sehr

01:26:29.220 --> 01:26:31.220
übersichtliches. Man könnte wahrscheinlich noch

01:26:31.220 --> 01:26:33.220
mehr machen, indem man irgendwie sagt, es

01:26:33.220 --> 01:26:35.220
gab noch irgendwie Conf

01:26:35.220 --> 01:26:37.220
Max Open Sockets. Da haben wir irgendwie zwölf

01:26:37.220 --> 01:26:39.220
oder so. Oh, keine Ahnung.

01:26:39.220 --> 01:26:42.980
Zwanzig. Bam.

01:26:42.980 --> 01:26:44.980
Wobei, was ist denn Max Anzahl

01:26:44.980 --> 01:26:54.880
eigentlich? Ja, Max Socket.

01:26:54.880 --> 01:26:56.880
Aha. Hier.

01:26:56.880 --> 01:27:04.070
Max Sockets ist zehn.

01:27:04.070 --> 01:27:06.070
Aber wir konnten trotzdem zwanzig

01:27:06.070 --> 01:27:08.070
reinschreiben.

01:27:08.070 --> 01:27:11.540
Oh. Ah.

01:27:11.540 --> 01:27:13.540
Max Allowed sieben. Okay.

01:27:13.540 --> 01:27:15.540
Sieben.

01:27:15.540 --> 01:27:17.540
Na, wie das passt.

01:27:17.540 --> 01:27:19.540
Wie wir es schon wieder rausgekriegt haben.

01:27:19.540 --> 01:27:21.540
Dass sieben das Maximum ist.

01:27:21.540 --> 01:27:30.870
Alles klar. Nice.

01:27:30.870 --> 01:27:32.870
Easy. Gut.

01:27:32.870 --> 01:27:34.870
Nächste.

01:27:34.870 --> 01:27:36.870
Nächste

01:27:36.870 --> 01:27:38.870
Stufe. Es soll ein

01:27:38.870 --> 01:27:58.850
Post Request sein.

01:27:58.850 --> 01:28:00.850
Es soll ein Post Request sein. Also können wir uns

01:28:00.850 --> 01:28:02.850
diesen ganzen Krempel hier schon mal sparen.

01:28:02.850 --> 01:28:23.120
Und ich glaube, wir machen das

01:28:23.120 --> 01:28:31.400
anders. Wir benutzen

01:28:31.400 --> 01:28:33.400
das Ding hier oben.

01:28:33.400 --> 01:28:35.400
Wir starten den Task hier unten

01:28:35.400 --> 01:28:41.520
drin. Und rufen dann

01:28:41.520 --> 01:28:43.520
Handle Post

01:28:43.520 --> 01:28:45.520
auf.

01:28:45.520 --> 01:28:47.520
Also.

01:28:47.520 --> 01:28:49.520
Dass wir sowas hier machen.

01:28:49.520 --> 01:29:01.000
Dann. Es dürfte

01:29:01.000 --> 01:29:03.000
ein bisschen übersichtlicher sein.

01:29:03.000 --> 01:29:05.000
So. Das kommt

01:29:05.000 --> 01:29:08.880
nämlich eh alles raus hier.

01:29:08.880 --> 01:29:10.880
Alter Wishel Studio. Kannst du

01:29:10.880 --> 01:29:12.880
diesmal ordentlich formatieren, ey?

01:29:12.880 --> 01:29:14.880
Was ist das für ein Schrott? Warum sackt das so?

01:29:14.880 --> 01:29:18.260
Äh. Und jetzt hier.

01:29:18.260 --> 01:29:20.260
Return ESP. Okay.

01:29:20.260 --> 01:29:27.190
Ja. Das ist deutlich

01:29:27.190 --> 01:29:29.190
übersichtlicher jetzt.

01:29:29.190 --> 01:29:31.190
Jetzt können die hier unten ihr

01:29:31.190 --> 01:29:36.770
Gedöns drinnen machen.

01:29:36.770 --> 01:29:38.770
Ja. Jetzt können die hier unten. Und hier oben können wir

01:29:38.770 --> 01:29:40.770
jetzt uns auf unseren Post Request

01:29:40.770 --> 01:29:42.770
konzentraten. Gucken wir ob noch

01:29:42.770 --> 01:29:46.050
alles kompiliert.

01:29:46.050 --> 01:29:48.050
Okay. Also. Post Request.

01:29:48.050 --> 01:29:50.050
Wir loggen

01:29:50.050 --> 01:29:52.050
einmal. Um zu checken ob das

01:29:52.050 --> 01:29:54.050
mit dem Post Request überhaupt funktioniert.

01:29:54.050 --> 01:29:56.050
Äh.

01:29:56.050 --> 01:29:58.050
Wir loggen einmal die

01:29:58.050 --> 01:30:00.050
Länge von dem Request.

01:30:00.050 --> 01:30:02.050
Content. Also. Beziehungsweise wie

01:30:02.050 --> 01:30:04.050
groß der Content ist den wir posten wollen.

01:30:04.050 --> 01:30:06.050
Nur um zu checken ob prinzipiell ein Post

01:30:06.050 --> 01:30:08.050
Request funktioniert. Also.

01:30:08.050 --> 01:30:10.050
Curl minus X

01:30:10.050 --> 01:30:12.050
Post. Och. Und wie

01:30:12.050 --> 01:30:14.050
geht das jetzt? Minus minus Data

01:30:14.050 --> 01:30:16.050
oder so. Ja. Data. Binary.

01:30:16.050 --> 01:30:18.050
Data.

01:30:18.050 --> 01:30:22.040
Und dann musste man Add

01:30:22.040 --> 01:30:24.040
Mail oder so meint. Curl

01:30:24.040 --> 01:30:26.040
Post File.

01:30:26.040 --> 01:30:28.040
How to Post File Content sind

01:30:28.040 --> 01:30:33.780
Curl. Data Binary

01:30:33.780 --> 01:30:35.780
Add Part. Genau. Das suche

01:30:35.780 --> 01:30:40.820
ich. Okay.

01:30:40.820 --> 01:30:42.820
Post funktioniert. Länge 0. Ja.

01:30:42.820 --> 01:30:46.550
Klar. Okay.

01:30:46.550 --> 01:30:48.550
Path to File. Ey.

01:30:48.550 --> 01:30:51.860
Wir laden einfach die Firmware hoch.

01:30:51.860 --> 01:30:53.860
Die irgendwie unter

01:30:53.860 --> 01:30:55.860
Bild

01:30:55.860 --> 01:30:57.860
bin. Wie groß ist denn die? Ups.

01:30:57.860 --> 01:31:06.320
Die ist. Ja. Das ist

01:31:06.320 --> 01:31:08.320
eine gute Testdatei.

01:31:08.320 --> 01:31:10.320
So.

01:31:10.320 --> 01:31:12.320
Wir laden die Firmware hoch.

01:31:12.320 --> 01:31:14.320
Wow.

01:31:14.320 --> 01:31:16.320
Oh. Oh. Oh. Oh. Oh. Oh.

01:31:16.320 --> 01:31:18.320
So war das nicht gedacht.

01:31:18.320 --> 01:31:20.320
Warum ist Länge 0? Länge sollte

01:31:20.320 --> 01:31:22.320
nicht 0 sein.

01:31:22.320 --> 01:31:24.320
Ah. Ne. Hier. Länge 300

01:31:24.320 --> 01:31:26.320
365138.

01:31:26.320 --> 01:31:28.320
Und. Moment.

01:31:28.320 --> 01:31:36.180
Gucken wir mal.

01:31:36.180 --> 01:31:38.180
865138. Ja.

01:31:38.180 --> 01:31:40.180
Passt. Okay. Also.

01:31:40.180 --> 01:31:51.200
Das laden wir jetzt hoch.

01:31:51.200 --> 01:31:53.200
Okay. Wie lesen wir das Ding noch?

01:31:53.200 --> 01:31:57.410
Mal. Was für ein Vorteil

01:31:57.410 --> 01:31:59.410
das hat? Also das größte

01:31:59.410 --> 01:32:01.410
Vorteil ist schon mal. Also generell

01:32:01.410 --> 01:32:03.410
die Frage ist nicht ob Arduino IDE

01:32:03.410 --> 01:32:05.410
oder Arduino. Die Frage ist

01:32:05.410 --> 01:32:07.410
ob ESP EDF oder Arduino.

01:32:07.410 --> 01:32:09.410
Die Arduino IDE selbst würde ich nie

01:32:09.410 --> 01:32:11.410
verwenden. Die Arduino IDE ist abfuck.

01:32:11.410 --> 01:32:13.410
Ich bin mir nicht mal sicher ob die Arduino

01:32:13.410 --> 01:32:15.410
IDE überhaupt bis heute Autocomplete

01:32:15.410 --> 01:32:17.410
hat. Hat die Autocomplete mittlerweile?

01:32:17.410 --> 01:32:19.410
Das letzte Mal als ich geguckt habe war

01:32:19.410 --> 01:32:21.410
das ein Unstable Feature was die IDE immer

01:32:21.410 --> 01:32:23.410
zum Crashen gebracht hat.

01:32:23.410 --> 01:32:25.410
Also Arduino IDE würde ich eh nicht verwenden.

01:32:25.410 --> 01:32:27.410
Du kannst aber ohne Probleme

01:32:27.410 --> 01:32:29.410
Arduino

01:32:29.410 --> 01:32:31.410
verwenden.

01:32:31.410 --> 01:32:33.410
Leute. Modgis.

01:32:33.410 --> 01:32:45.840
Keine Modgis da. Was ist da los?

01:32:45.840 --> 01:32:59.840
Weg.

01:32:59.840 --> 01:33:01.840
Bin ich denn gerade stehen geblieben?

01:33:03.840 --> 01:33:05.840
Ja. Du kannst ohne Probleme Arduino

01:33:05.840 --> 01:33:07.840
verwenden.

01:33:07.840 --> 01:33:09.840
Damit. Das geht auch.

01:33:09.840 --> 01:33:11.840
Wenn du es einfacher haben willst

01:33:11.840 --> 01:33:13.840
verwendest du Plattform IO. Also

01:33:13.840 --> 01:33:15.840
der ESP32 unterstützt.

01:33:15.840 --> 01:33:17.840
Zwei beziehungsweise drei Sachen.

01:33:17.840 --> 01:33:19.840
Von Haus aus.

01:33:19.840 --> 01:33:21.840
Wo du dir auch einfach das runterladen

01:33:21.840 --> 01:33:23.840
kannst von der Homepage von denen.

01:33:23.840 --> 01:33:25.840
Die unterstützen einmal

01:33:25.840 --> 01:33:27.840
nackiges Arduino.

01:33:27.840 --> 01:33:29.840
Sie unterstützen ESP EDF.

01:33:29.840 --> 01:33:31.840
Das ist das Framework vom Hersteller.

01:33:31.840 --> 01:33:33.840
Und sie unterstützen

01:33:33.840 --> 01:33:35.840
Arduino als

01:33:35.840 --> 01:33:37.840
ESP EDF Komponente.

01:33:37.840 --> 01:33:39.840
Das ist eine Sache die ich sonst

01:33:39.840 --> 01:33:41.840
immer mache. Dann du kannst

01:33:41.840 --> 01:33:43.840
Arduino quasi installieren.

01:33:43.840 --> 01:33:45.840
Hier in ESP EDF als Komponente.

01:33:45.840 --> 01:33:47.840
Und dann verwenden so als wäre es

01:33:47.840 --> 01:33:49.840
quasi Arduino.

01:33:49.840 --> 01:33:51.840
Plus das du aber noch alle Sachen zusätzlich

01:33:51.840 --> 01:33:53.840
hast die ESP EDF so

01:33:53.840 --> 01:33:55.840
anbietet. Was sehr nice ist.

01:33:55.840 --> 01:33:57.840
Weil normalerweise

01:33:57.840 --> 01:33:59.840
normalerweise

01:33:59.840 --> 01:34:01.840
ist es so das das Hardcoded ist.

01:34:01.840 --> 01:34:03.840
Also vieles was in Arduino drin ist

01:34:03.840 --> 01:34:05.840
kannst du die Werte nicht ändern.

01:34:05.840 --> 01:34:07.840
Und wenn du

01:34:07.840 --> 01:34:09.840
ESP EDF mit Arduino als

01:34:09.840 --> 01:34:11.840
Komponente benutzt kannst du beispielsweise

01:34:11.840 --> 01:34:13.840
auch die Nummern

01:34:13.840 --> 01:34:15.840
der Serienschnittstellen ändern. Oder

01:34:15.840 --> 01:34:17.840
wie groß irgendwelche Buffer sind oder

01:34:17.840 --> 01:34:19.840
sonst was. Was normalerweise zur

01:34:19.840 --> 01:34:21.840
Compiletime vom Arduino Core

01:34:21.840 --> 01:34:23.840
festgelegt wird. Also für mich ist

01:34:23.840 --> 01:34:25.840
das die beste Kombination.

01:34:25.840 --> 01:34:27.840
Ich verwende es jetzt ohne Arduino.

01:34:27.840 --> 01:34:29.840
Weil

01:34:29.840 --> 01:34:31.840
also auch ohne die Arduino Library.

01:34:31.840 --> 01:34:33.840
Ich habe die gar nicht installiert.

01:34:33.840 --> 01:34:35.840
Weil ich das neueste ESP EDF verwende.

01:34:35.840 --> 01:34:37.840
Und das neueste ESP EDF

01:34:37.840 --> 01:34:39.840
wird noch nicht supported von der Arduino

01:34:39.840 --> 01:34:41.840
Implementierung für den ESP32.

01:34:41.840 --> 01:34:45.540
Das ist ein Nachteil von

01:34:45.540 --> 01:34:47.540
Arduino würde ich sagen. Du kannst

01:34:47.540 --> 01:34:49.540
nie das neueste Framework benutzen.

01:34:49.540 --> 01:34:51.540
Also Arduino ESP

01:34:51.540 --> 01:34:53.540
also das ESP EDF also das da.

01:34:53.540 --> 01:34:55.540
Die ESP32

01:34:55.540 --> 01:34:57.540
Arduino Implementierung

01:34:57.540 --> 01:34:59.540
von Espressif

01:34:59.540 --> 01:35:01.540
die basiert auf

01:35:01.540 --> 01:35:03.540
ESP EDF.

01:35:03.540 --> 01:35:05.540
Also du kannst Arduino auf dem ESP32

01:35:05.540 --> 01:35:07.540
nie ohne ESP EDF benutzen.

01:35:07.540 --> 01:35:09.540
Nur das wenn du

01:35:09.540 --> 01:35:11.540
den fertigen Arduino Core benutzt

01:35:13.540 --> 01:35:15.540
bist du drauf festgelegt, dass

01:35:15.540 --> 01:35:17.540
die Werte die die zur Compile Zeit

01:35:17.540 --> 01:35:19.540
von dem Arduino Core hatten

01:35:19.540 --> 01:35:21.540
die Werte sind die du haben willst.

01:35:21.540 --> 01:35:23.540
Was du beispielsweise mit dem Arduino Core

01:35:23.540 --> 01:35:25.540
nicht machen kannst ist

01:35:25.540 --> 01:35:27.540
Menüconfig aufrufen und Settings

01:35:27.540 --> 01:35:29.540
an deinem Controller vornehmen.

01:35:29.540 --> 01:35:31.540
Du hast exakt die Settings zur

01:35:31.540 --> 01:35:33.540
Compile Zeit als Espressif das letzte

01:35:33.540 --> 01:35:35.540
Release vom Arduino Core rausgebracht hat.

01:35:35.540 --> 01:35:39.110
Und allein schon deswegen würde ich

01:35:39.110 --> 01:35:41.110
reines pures Arduino nicht auf

01:35:41.110 --> 01:35:43.110
dem ESP32 machen.

01:35:43.110 --> 01:35:45.110
Ich würde wenn überhaupt Arduino

01:35:45.110 --> 01:35:47.110
nur als ESP EDF

01:35:47.110 --> 01:35:49.110
Komponente verwenden.

01:35:49.110 --> 01:35:51.110
Das funktioniert auch relativ gut im Prinzip

01:35:51.110 --> 01:35:53.110
ist das einzige was du machen musst

01:35:53.110 --> 01:35:55.110
ist include

01:35:55.110 --> 01:35:57.110
Arduino wenn du es installiert hast.

01:35:57.110 --> 01:36:00.840
Ja das musst du

01:36:00.840 --> 01:36:02.840
machen und du musst einmal anfangen

01:36:02.840 --> 01:36:04.840
init Arduino

01:36:04.840 --> 01:36:06.840
machen das war es. Dann kannst du alle Arduino

01:36:06.840 --> 01:36:08.840
Sachen verwenden in ESP EDF.

01:36:08.840 --> 01:36:12.600
Also die Frage ist nicht entweder

01:36:12.600 --> 01:36:14.600
oder sondern

01:36:14.600 --> 01:36:18.200
eigentlich die beste

01:36:18.200 --> 01:36:20.200
Variante ist Arduino mit

01:36:20.200 --> 01:36:22.200
als Komponente

01:36:22.200 --> 01:36:27.520
in ESP EDF verwenden.

01:36:27.520 --> 01:36:29.520
Wird der Copy Pointer noch gelöscht?

01:36:29.520 --> 01:36:42.820
Ja der wird hier gelöscht.

01:36:42.820 --> 01:36:44.820
Das ist zumindest meine Vermutung.

01:36:44.820 --> 01:36:46.820
Das steht da nicht explizit dabei.

01:36:46.820 --> 01:36:57.270
This will free the request memory.

01:36:57.270 --> 01:36:59.270
Ok steht doch dabei.

01:36:59.270 --> 01:37:03.250
Also das

01:37:03.250 --> 01:37:05.250
scheint quasi

01:37:05.250 --> 01:37:07.250
ein Free zu sein.

01:37:07.250 --> 01:37:09.250
Ja man hätte es auch

01:37:09.250 --> 01:37:11.250
Request Async Handler

01:37:11.250 --> 01:37:13.250
Free nennen können oder so aber

01:37:13.250 --> 01:37:15.250
und es passiert immer

01:37:15.250 --> 01:37:17.250
der führt den Händler aus

01:37:17.250 --> 01:37:19.250
und wenn der Händler irgendwelche Probleme hat

01:37:19.250 --> 01:37:21.250
danach wird gefreed.

01:37:21.250 --> 01:37:23.250
Das einzige was jetzt noch sein könnte

01:37:23.250 --> 01:37:25.250
ist eventuell

01:37:25.250 --> 01:37:27.250
wenn das hier nicht richtig funktioniert

01:37:29.250 --> 01:37:31.250
Geh einfach mal davon aus das es funktionieren wird.

01:37:31.250 --> 01:37:41.000
Ok so und jetzt ist die Frage

01:37:41.000 --> 01:37:43.000
wie man das mit einem Post Request machen.

01:37:43.000 --> 01:37:45.000
Ich weiß das du den Content

01:37:45.000 --> 01:37:47.000
von einem Post Request so lesen kannst.

01:37:47.000 --> 01:37:49.000
http

01:37:49.000 --> 01:37:51.000
request

01:37:51.000 --> 01:37:53.000
receive

01:37:53.000 --> 01:37:55.000
dann übergibst du den

01:37:55.000 --> 01:37:57.000
das Request Objekt

01:37:57.000 --> 01:37:59.000
dann brauchst du ein Buffer ohne Länge

01:37:59.000 --> 01:38:01.000
also hier Cha Buffer

01:38:01.000 --> 01:38:03.000
ah keine Ahnung

01:38:03.000 --> 01:38:05.000
128 das ist viel zu klein

01:38:05.000 --> 01:38:07.000
richtig lahm dann

01:38:07.000 --> 01:38:10.440
size

01:38:10.440 --> 01:38:12.440
so liest man Sachen

01:38:12.440 --> 01:38:14.440
von dem Request ein

01:38:14.440 --> 01:38:17.880
oder auch nicht

01:38:17.880 --> 01:38:19.880
achso

01:38:19.880 --> 01:38:21.880
so liest man Sachen

01:38:21.880 --> 01:38:23.880
von dem Request ein und man muss jetzt

01:38:23.880 --> 01:38:25.880
eine Schleife machen

01:38:25.880 --> 01:38:27.880
man muss ein bisschen komisches Zeug basteln

01:38:27.880 --> 01:38:29.880
man muss eine Schleife machen

01:38:29.880 --> 01:38:31.880
man muss quasi

01:38:31.880 --> 01:38:33.880
solange einlesen

01:38:33.880 --> 01:38:40.160
bis man

01:38:40.160 --> 01:38:44.600
Content

01:38:44.600 --> 01:38:46.600
man muss quasi solange einlesen

01:38:46.600 --> 01:38:48.600
bis man die Content Länge erreicht hat

01:38:50.600 --> 01:38:52.600
beziehungsweise ist es wahrscheinlich besser

01:38:52.600 --> 01:39:02.080
ok

01:39:02.080 --> 01:39:04.080
das hier liefert zurück wie viele Bytes

01:39:04.080 --> 01:39:06.080
das eingelesen hat

01:39:06.080 --> 01:39:08.080
also sagen wir mal sowas wie irgendwie

01:39:08.080 --> 01:39:11.940
Bites

01:39:11.940 --> 01:39:13.940
der Buffer kommt da oben hin

01:39:13.940 --> 01:39:19.330
so

01:39:19.330 --> 01:39:21.330
jetzt muss ich da irgendwie ne Schleife drum herum bauen

01:39:21.330 --> 01:39:26.280
ok sagen wir mal while

01:39:26.280 --> 01:39:30.130
ok wir machen noch Content Length

01:39:30.130 --> 01:39:32.130
wir machen nochmal sowas

01:39:32.130 --> 01:39:34.130
das habe ich glaube ich auch mal in dem Beispiel gesehen

01:39:34.130 --> 01:39:36.130
Remaining

01:39:36.130 --> 01:39:38.130
das schreiben die auch in ihrem Beispiel

01:39:38.130 --> 01:39:40.130
so

01:39:40.130 --> 01:39:42.130
ab jetzt weiß ich auch nicht mehr wie die ist

01:39:42.130 --> 01:39:44.130
also solange

01:39:44.130 --> 01:39:46.130
noch Bytes übrig sind

01:39:46.130 --> 01:39:48.130
also solange Remaining größer mit

01:39:48.130 --> 01:39:50.130
0 ist

01:39:50.130 --> 01:39:52.130
wollen wir Sachen

01:39:52.130 --> 01:39:56.080
einlesen

01:39:56.080 --> 01:39:58.080
das ist jetzt ohne

01:39:58.080 --> 01:40:00.080
jegliches Error Handling oder sonst was

01:40:00.080 --> 01:40:05.280
Log Info

01:40:05.280 --> 01:40:11.280
Received Bytes

01:40:11.280 --> 01:40:13.280
ne

01:40:13.280 --> 01:40:18.770
wir geben Remaining aus

01:40:18.770 --> 01:40:20.770
und jetzt sagen wir

01:40:20.770 --> 01:40:22.770
Remaining

01:40:22.770 --> 01:40:24.770
nicht Reminder

01:40:24.770 --> 01:40:28.080
Remaining

01:40:28.080 --> 01:40:30.080
Received Bytes

01:40:30.080 --> 01:40:32.080
also wir ziehen das was wir jetzt einmalig empfangen haben

01:40:32.080 --> 01:40:34.080
die Gesamtmenge ab

01:40:34.080 --> 01:40:36.080
und dann geht es automatisch raus sobald

01:40:36.080 --> 01:40:38.080
es nicht mehr größer 0 ist

01:40:38.080 --> 01:40:41.330
soweit von der Idee her

01:40:41.330 --> 01:40:45.220
so Bäm Flash

01:40:47.220 --> 01:40:49.220
bin ich mal gespannt

01:40:49.220 --> 01:40:51.220
ich gehe nicht davon aus

01:40:51.220 --> 01:40:53.220
dass ich das richtig gemacht habe

01:40:53.220 --> 01:40:55.220
irgendwas wird hier nicht stimmen

01:40:55.220 --> 01:40:57.220
aber wir sollten zumindest jetzt durchratternd

01:40:57.220 --> 01:40:59.220
sehen Bites

01:40:59.220 --> 01:41:01.220
dass die Bytes runter gehen

01:41:01.220 --> 01:41:03.220
wir machen auch nur mal ein

01:41:03.220 --> 01:41:05.220
wir machen auch erstmal nur ein Request

01:41:05.220 --> 01:41:19.700
wait a minute

01:41:19.700 --> 01:41:21.700
ähm

01:41:21.700 --> 01:41:23.700
das ist ich sehe nichts

01:41:23.700 --> 01:41:32.260
das hört nicht mehr auf

01:41:32.260 --> 01:41:34.260
ah ok ich habe keine Abbruch

01:41:34.260 --> 01:41:36.260
ich habe keine sonstige Abbruchbedingungen drinnen

01:41:36.260 --> 01:41:38.260
ok das ist nicht

01:41:38.260 --> 01:41:40.260
sonderlich Pfeifett was ich da gebaut habe

01:41:40.260 --> 01:41:42.260
ich gebe es zu

01:41:42.260 --> 01:41:44.260
das ist nicht

01:41:44.260 --> 01:41:46.260
sonderlich schlau ähm

01:41:46.260 --> 01:41:49.600
ich würde sagen wir sollten gucken

01:41:49.600 --> 01:41:51.600
if

01:41:51.600 --> 01:41:53.600
also erstens

01:41:53.600 --> 01:41:55.600
müssen wir mal das hier rausnehmen

01:41:55.600 --> 01:41:57.600
aus dem Event Händler

01:41:57.600 --> 01:41:59.600
dass ich mir jedes Event ausgeben lasse

01:41:59.600 --> 01:42:01.600
weil das spammt mir mein Log as fuck zu

01:42:01.600 --> 01:42:06.770
ja so

01:42:06.770 --> 01:42:08.770
wenn Received Bites

01:42:08.770 --> 01:42:10.770
kleiner gleich 0 ist

01:42:10.770 --> 01:42:14.150
dann

01:42:14.150 --> 01:42:19.730
break

01:42:19.730 --> 01:42:21.730
das ist sicherlich kein gutes Error Handling

01:42:21.730 --> 01:42:23.730
das ist gar kein Error Handling

01:42:23.730 --> 01:42:25.730
also entweder

01:42:25.730 --> 01:42:27.730
kleiner 0 nicht kleiner gleich 0

01:42:27.730 --> 01:42:29.730
so wenn das kleiner 0 ist

01:42:29.730 --> 01:42:31.730
ist ein Fehler aufgetreten

01:42:31.730 --> 01:42:35.780
dann loggen wir

01:42:35.780 --> 01:42:37.780
also Warning

01:42:37.780 --> 01:42:41.570
ja keine Ahnung

01:42:41.570 --> 01:42:50.130
äh Read Error

01:42:50.130 --> 01:42:52.130
echte Hacker können das mitlesen

01:42:52.130 --> 01:42:54.130
ja die haben Krepp im Auge

01:42:56.130 --> 01:42:58.130
habt ihr auch Krepp im Auge

01:42:58.130 --> 01:43:00.130
nicht Dreck

01:43:00.130 --> 01:43:06.390
Krepp

01:43:06.390 --> 01:43:08.390
wobei ich habe eher AWK im Auge

01:43:08.390 --> 01:43:12.600
wie kann man negative Bites bekommen

01:43:12.600 --> 01:43:14.600
man bekommt negative Bites

01:43:14.600 --> 01:43:16.600
weil es ein Read Fehler ist

01:43:16.600 --> 01:43:18.600
guck da steht auch hier

01:43:18.600 --> 01:43:20.600
Return

01:43:20.600 --> 01:43:25.860
es Return quasi

01:43:25.860 --> 01:43:27.860
alles was negativ ist

01:43:27.860 --> 01:43:32.290
ist ein Fehler

01:43:32.290 --> 01:43:34.290
das heißt dann nicht wirklich dass er minus Bites gelesen hat

01:43:34.290 --> 01:43:36.290
was ja minus Bites würde ja bedeuten

01:43:36.290 --> 01:43:38.290
er hat etwas zurückgeschrieben an den Client

01:43:38.290 --> 01:43:40.290
sondern es ist ein Fehler

01:43:40.290 --> 01:43:42.290
so gucken wir mal

01:43:42.290 --> 01:43:56.390
äh

01:43:56.390 --> 01:44:05.940
was ist jetzt für ein Problem

01:44:05.940 --> 01:44:14.440
warum bricht das ab

01:44:14.440 --> 01:44:16.440
äh was ist das

01:44:16.440 --> 01:44:18.440
warum ist das kaputt

01:44:18.440 --> 01:44:20.440
ok Leute wisst ihr was

01:44:20.440 --> 01:44:23.840
wir lassen ihn einfach weiter auslesen

01:44:23.840 --> 01:44:25.840
egal ob Error oder nicht

01:44:25.840 --> 01:44:27.840
wobei das kann eigentlich nicht funktionieren

01:44:27.840 --> 01:44:29.840
oder

01:44:29.840 --> 01:44:31.840
das kann eigentlich nicht sein

01:44:31.840 --> 01:44:41.270
Leute wir geben uns den Error Code aus

01:44:41.270 --> 01:44:43.270
ich bin

01:44:43.270 --> 01:44:45.270
ich bin richtig pepega

01:44:45.270 --> 01:44:47.270
wir geben uns den Error Code aus

01:44:47.270 --> 01:44:49.270
Remaining

01:44:49.270 --> 01:44:51.270
kann man richtig schreiben

01:44:51.270 --> 01:44:53.270
äh und das hier ist

01:44:53.270 --> 01:44:55.270
ähm

01:44:55.270 --> 01:45:00.950
Received

01:45:00.950 --> 01:45:02.950
guter Code wirft keinen Error richtig

01:45:02.950 --> 01:45:04.950
und vor allem funktioniert er

01:45:04.950 --> 01:45:06.950
und braucht deswegen weder Kommentare

01:45:06.950 --> 01:45:08.950
noch Dokumentation noch Tests

01:45:08.950 --> 01:45:10.950
so sieht es aus

01:45:10.950 --> 01:45:12.950
sag ich auch

01:45:12.950 --> 01:45:14.950
Error List Driven Programming

01:45:14.950 --> 01:45:16.950
hätte CrowdStrike auch gebraucht

01:45:16.950 --> 01:45:18.950
ich finde CrowdStrike

01:45:18.950 --> 01:45:20.950
sollte bei uns sich mal einen Kurs mieten

01:45:20.950 --> 01:45:22.950
wie man ordentliches C++

01:45:22.950 --> 01:45:24.950
programmiert

01:45:24.950 --> 01:45:26.950
war dieser Shit nicht sogar auch in C++

01:45:26.950 --> 01:45:28.950
oder

01:45:28.950 --> 01:45:30.950
man weiß es ja nicht wirklich was es ist

01:45:30.950 --> 01:45:34.390
aber man vermutet es

01:45:34.390 --> 01:45:36.390
fuck

01:45:36.390 --> 01:45:38.390
ok gar kein Error Handling ist auch nicht gut oder

01:45:38.390 --> 01:45:40.390
haha

01:45:40.390 --> 01:45:42.390
das crasht es einfach

01:45:42.390 --> 01:46:06.020
das ist aber doof

01:46:06.020 --> 01:46:15.600
by the way warum crasht es jetzt

01:46:15.600 --> 01:46:17.600
ich hatte vorher auch keinerlei Error Handling

01:46:17.600 --> 01:46:19.600
drinne

01:46:19.600 --> 01:46:25.280
und da ist es nicht gecrasht

01:46:25.280 --> 01:46:27.280
sah das anders aus

01:46:27.280 --> 01:46:34.690
ne oder verstehe ich nicht

01:46:34.690 --> 01:46:39.120
so hatte ich es vorher dann lief es noch

01:46:39.120 --> 01:46:41.120
ne was heißt es lief auch nicht

01:46:41.120 --> 01:46:46.580
es hing dann irgendwie

01:46:46.580 --> 01:46:52.930
ok wir lassen uns jetzt mal die

01:46:52.930 --> 01:46:54.930
das ausgeben

01:46:54.930 --> 01:46:56.930
jetzt hängts wieder guckt

01:46:56.930 --> 01:47:00.340
seht ihr wow

01:47:00.340 --> 01:47:12.100
guck mal

01:47:12.100 --> 01:47:14.100
es wird wieder mehr weil er immer minus 2 hat

01:47:14.100 --> 01:47:16.100
ok

01:47:16.100 --> 01:47:18.100
ne das funktioniert so nicht

01:47:18.100 --> 01:47:20.100
minus 2 hat er ok

01:47:20.100 --> 01:47:26.360
was ist minus 2

01:47:26.360 --> 01:47:32.610
was ist minus 2

01:47:32.610 --> 01:47:34.610
das ist übrigens Blödsinn was

01:47:34.610 --> 01:47:36.610
mit diesem Null Pointer

01:47:36.610 --> 01:47:40.440
ich weiß nicht was dieser Dude da erzählt

01:47:40.440 --> 01:47:42.440
aber

01:47:42.440 --> 01:47:44.440
also wenn der Typ in dem Video erzählt

01:47:44.440 --> 01:47:46.440
dass es ein Null Pointer Exception war

01:47:46.440 --> 01:47:48.440
dann stimmt das höchstwahrscheinlich nicht

01:47:48.440 --> 01:47:50.440
ich hab nämlich heute ne Analyse auf Twitter gelesen

01:47:50.440 --> 01:47:52.440
dass das überhaupt nicht stimmt

01:47:52.440 --> 01:47:54.440
dass die alle nur das nachgeplappert haben

01:47:54.440 --> 01:47:56.440
was der erste Typ erzählt hat

01:47:56.440 --> 01:47:58.440
ok minus 2

01:47:58.440 --> 01:48:00.440
was bedeutet minus 2

01:48:00.440 --> 01:48:02.440
was wirft das denn für

01:48:02.440 --> 01:48:04.440
für Fehler

01:48:04.440 --> 01:48:06.440
hier

01:48:06.440 --> 01:48:10.900
minus 2

01:48:10.900 --> 01:48:15.300
was bedeutet minus 2

01:48:15.300 --> 01:48:17.300
ok das ist schlecht

01:48:17.300 --> 01:48:19.300
ok also ohne Fehlerbehebung

01:48:19.300 --> 01:48:21.300
lesen ist auch keine gute Idee

01:48:21.300 --> 01:48:23.300
was

01:48:23.300 --> 01:48:25.300
aber was ist denn jetzt falsch da dran

01:48:25.300 --> 01:48:27.300
Leute ich muss mal kurz was essen nebenbei

01:48:27.300 --> 01:48:29.300
ich halt hab hier ne gute Empfehlung

01:48:29.300 --> 01:48:31.300
was wir kurz auf Youtube gucken können

01:48:31.300 --> 01:48:33.300
weil ich 5 Minuten was vorhau

01:48:33.300 --> 01:48:49.030
warum kackt das ab

01:48:49.030 --> 01:48:51.030
Moment

01:48:51.030 --> 01:48:53.030
minus 1

01:48:53.030 --> 01:48:57.200
ok

01:48:57.200 --> 01:49:12.100
ok

01:49:12.100 --> 01:49:15.960
ok

01:49:15.960 --> 01:49:17.960
1

01:49:17.960 --> 01:49:19.960
gibt es auch noch

01:49:19.960 --> 01:49:21.960
was ist denn jetzt wiederum minus 1

01:49:21.960 --> 01:49:26.360
für nen Error

01:49:26.360 --> 01:49:29.700
das stand doch hier irgendwo drinne

01:49:29.700 --> 01:49:31.700
timeout bestimmt

01:49:31.700 --> 01:49:33.700
ne das ist minus 3

01:49:33.700 --> 01:49:35.700
socket fail

01:49:35.700 --> 01:49:37.700
fuck ok

01:49:37.700 --> 01:49:39.700
egal was ist wir sind gearscht

01:49:39.700 --> 01:49:41.700
nice

01:49:41.700 --> 01:49:43.700
ok irgendwie funktioniert das nicht

01:49:43.700 --> 01:49:45.700
Asynchron Post Request

01:49:45.700 --> 01:49:51.540
das kackt immer ab

01:49:51.540 --> 01:49:57.380
und ich weiß nicht warum

01:49:57.380 --> 01:49:59.380
ne das gucken wir nicht

01:49:59.380 --> 01:50:01.380
ich muss jetzt erst mal was essen

01:50:01.380 --> 01:50:12.920
ich hab übelst Hunger

01:50:12.920 --> 01:50:14.920
was ist das

01:50:14.920 --> 01:50:16.920
oh ne das ist Simplicissimus

01:50:16.920 --> 01:50:18.920
das kann ich mir jetzt nicht geben

01:50:18.920 --> 01:50:20.920
das klingt immer so

01:50:20.920 --> 01:50:22.920
so bedeutungsvoll

01:50:22.920 --> 01:50:24.920
alles wie er das ausspricht

01:50:24.920 --> 01:50:26.920
ist mir zu anstrengend jetzt

01:50:26.920 --> 01:50:28.920
Zwischenbilanz

01:50:28.920 --> 01:50:30.920
der 4 Tage Woche

01:50:30.920 --> 01:50:35.120
ja auf gehts

01:50:35.120 --> 01:50:39.680
4 Tage Woche beste

01:50:39.680 --> 01:50:43.220
Artstellungsexperience

01:50:43.220 --> 01:50:45.220
Februar Homelab

01:50:45.220 --> 01:50:47.220
aha

01:50:47.220 --> 01:50:49.220
ein Rackstelz

01:50:49.220 --> 01:50:51.220
Rackstelz ist immer gut zum angucken

01:50:51.220 --> 01:50:53.220
während man am futtern ist

01:50:55.220 --> 01:50:57.220
ist das da oben ein CRT Monitor

01:50:57.220 --> 01:50:59.220
ne ne ne ne

01:50:59.220 --> 01:51:01.220
ich hab das hier unten

01:51:01.220 --> 01:51:03.220
das hier

01:51:03.220 --> 01:51:05.220
hab ich irgendwie im Kopf

01:51:05.220 --> 01:51:07.220
mit dem Gehäuse vom Monitor verbunden

01:51:07.220 --> 01:51:09.220
das ist kein CRT

01:51:09.220 --> 01:51:11.220
das ist ein oller

01:51:11.220 --> 01:51:13.220
alter TFT

01:51:13.220 --> 01:51:15.220
wie die da wiederum rumstehen

01:51:15.220 --> 01:51:17.220
äh

01:51:17.220 --> 01:51:19.220
heute noch mal Stellenanzeigen

01:51:19.220 --> 01:51:21.220
ne heute ist es C++ Stelz

01:51:21.220 --> 01:51:23.220
ah guck mal

01:51:23.220 --> 01:51:25.220
gute alte schöne

01:51:25.220 --> 01:51:27.220
HP

01:51:27.220 --> 01:51:29.220
ne Dell

01:51:29.220 --> 01:51:33.680
HP

01:51:33.680 --> 01:51:35.680
DL380

01:51:35.680 --> 01:51:37.680
ist das HP oder ist das Dell

01:51:37.680 --> 01:51:49.570
HP HP

01:51:49.570 --> 01:51:51.570
die Amis stehen total auf diese Unify

01:51:51.570 --> 01:51:53.570
Dinger

01:51:53.570 --> 01:51:57.330
in the den of my house

01:51:57.330 --> 01:51:59.330
we are moving soon

01:51:59.330 --> 01:52:01.330
so the setup is likely to change

01:52:01.330 --> 01:52:03.330
oftmals ja

01:52:03.330 --> 01:52:05.330
warum hat er da 4 NUCs stehen

01:52:05.330 --> 01:52:07.330
I'll do a quick little video showing

01:52:07.330 --> 01:52:09.330
what's in it

01:52:09.330 --> 01:52:11.330
how everything works

01:52:11.330 --> 01:52:13.330
before that all might change

01:52:13.330 --> 01:52:15.330
ups

01:52:15.330 --> 01:52:17.330
bis sie vorspulen

01:52:17.330 --> 01:52:19.330
switches are 100 meg

01:52:19.330 --> 01:52:21.330
so they're kinda useless

01:52:21.330 --> 01:52:23.330
and they suck a lot of power

01:52:23.330 --> 01:52:25.330
aber bei den Amis ist das glücklicherweise billig

01:52:25.330 --> 01:52:27.330
ich würde mir die alten

01:52:27.330 --> 01:52:29.330
Cisco Switche genauso wie diese alten

01:52:29.330 --> 01:52:31.330
was ist auch immer sehr beliebt auf Ebay

01:52:31.330 --> 01:52:33.330
die alten

01:52:33.330 --> 01:52:35.330
welcher Hersteller

01:52:35.330 --> 01:52:39.600
ist das nicht Cisco

01:52:39.600 --> 01:52:41.600
Prodcom ne

01:52:41.600 --> 01:52:43.600
HP

01:52:43.600 --> 01:52:45.600
ne

01:52:45.600 --> 01:52:47.600
was ist es noch so ein typischer

01:52:47.600 --> 01:52:49.600
HP ja HP könnte sein aus recht

01:52:49.600 --> 01:52:51.600
HP ja diese alten HP Switche

01:52:51.600 --> 01:52:53.600
die sind ja auch teilweise super lahm

01:52:53.600 --> 01:52:55.600
laut

01:52:55.600 --> 01:52:57.600
brauchen Strom und macht überhaupt

01:52:57.600 --> 01:52:59.600
keinen Sinn

01:52:59.600 --> 01:53:01.600
aber Hauptsache haben

01:53:01.600 --> 01:53:03.600
übrigens sehr ordentlich hier auch wieder

01:53:03.600 --> 01:53:05.600
schön mit beschriftet mit Labels

01:53:05.600 --> 01:53:07.600
und so

01:53:07.600 --> 01:53:09.600
HP meine ich

01:53:09.600 --> 01:53:11.600
I plan on

01:53:11.600 --> 01:53:13.600
getting

01:53:13.600 --> 01:53:15.600
another 2U Server

01:53:15.600 --> 01:53:17.600
at some point probably

01:53:17.600 --> 01:53:19.600
so these are just sort of

01:53:19.600 --> 01:53:21.600
here rather than just having a gap

01:53:21.600 --> 01:53:23.600
or any blanking panels

01:53:23.600 --> 01:53:25.600
so

01:53:25.600 --> 01:53:27.600
whatever future

01:53:27.600 --> 01:53:29.600
changes I make I'll probably

01:53:29.600 --> 01:53:31.600
whenever I get a new server

01:53:31.600 --> 01:53:33.600
I'll probably

01:53:33.600 --> 01:53:35.600
I glaube das Video ist langweilig

01:53:35.600 --> 01:53:37.600
some spare parts that I had

01:53:37.600 --> 01:53:39.600
das meiste davon ist auch aus

01:53:39.600 --> 01:53:41.600
I had like an extra shell

01:53:41.600 --> 01:53:43.600
haben wir sonst noch

01:53:43.600 --> 01:53:51.590
Katzenvideo

01:53:51.590 --> 01:53:53.590
this question comes from Thomas

01:53:53.590 --> 01:53:55.590
and many other people

01:53:55.590 --> 01:53:57.590
who all

01:53:57.590 --> 01:53:59.590
what if everyone jumped at once

01:53:59.590 --> 01:54:01.590
ok das wollte ich schon immer mal wissen

01:54:01.590 --> 01:54:03.590
this question comes from Thomas

01:54:03.590 --> 01:54:05.590
and many other people

01:54:05.590 --> 01:54:07.590
who all asked what would happen if everyone on earth

01:54:07.590 --> 01:54:09.590
stood as close to each other as they could

01:54:09.590 --> 01:54:11.590
wer hat sich's noch nicht gefragt

01:54:11.590 --> 01:54:13.590
jumped and landed on the ground

01:54:13.590 --> 01:54:15.590
also ich predikte mal

01:54:15.590 --> 01:54:17.590
es passiert wahrscheinlich gar nichts

01:54:17.590 --> 01:54:19.590
das dürfte der Erde ziemlich egal sein

01:54:19.590 --> 01:54:21.590
this is one of the most popular questions submitted to what if

01:54:21.590 --> 01:54:23.590
it's been examined before including by a

01:54:23.590 --> 01:54:25.590
science blogs post and a straight dope article

01:54:25.590 --> 01:54:27.590
they cover the physics pretty well

01:54:27.590 --> 01:54:31.120
however they don't tell the whole story

01:54:31.120 --> 01:54:33.120
at the start of the scenario the entirety of

01:54:33.120 --> 01:54:35.120
the earth's population has been magically transported

01:54:35.120 --> 01:54:37.120
together into one place this crowd

01:54:37.120 --> 01:54:39.120
takes up an area the size of Rhode Island

01:54:39.120 --> 01:54:41.120
in fact let's assume they I mean

01:54:41.120 --> 01:54:43.120
we are actually in Rhode Island

01:54:43.120 --> 01:54:45.120
at the stroke of noon everyone jumps

01:54:45.120 --> 01:54:47.120
natürlich selbstverständlich

01:54:47.120 --> 01:54:49.120
wo sollte

01:54:49.120 --> 01:54:51.120
auf der Welt das

01:54:51.120 --> 01:54:53.120
stattfinden wenn nicht in den USA

01:54:53.120 --> 01:54:55.120
oder logisch

01:54:55.120 --> 01:55:02.790
sind wir uns einig sowas würde

01:55:02.790 --> 01:55:04.790
selbstverständlich und ein Zauberer

01:55:04.790 --> 01:55:06.790
würde natürlich auch die Leute wenn überhaupt

01:55:06.790 --> 01:55:08.630
nur in die USA teleportieren

01:55:08.790 --> 01:55:10.790
das ist etwas anderes

01:55:10.790 --> 01:55:12.790
dieser Baufang betrifft nicht wirklich den Planeten

01:55:12.790 --> 01:55:14.790
die Erde ist über 10 Milliarden

01:55:14.790 --> 01:55:16.790
auf der Anzahl von Menschen kann man

01:55:16.790 --> 01:55:18.790
vielleicht einen halben Meter biegen

01:55:18.790 --> 01:55:20.790
und das ist wenn wir nicht schulter-zu-schulter

01:55:20.790 --> 01:55:22.790
in der Mitte einer Gruppe sind

01:55:22.790 --> 01:55:24.790
selbst wenn alle so hoch gestiegen sind

01:55:24.790 --> 01:55:26.790
und die Erde ständig rückgängig war

01:55:26.790 --> 01:55:28.790
würde die Erde nur von weniger als einem Atom

01:55:28.790 --> 01:55:30.790
nach oben gedrückt werden

01:55:30.790 --> 01:55:32.790
alle fallen zurück auf die Erde

01:55:32.790 --> 01:55:34.790
das gibt technisch viel Energie

01:55:34.790 --> 01:55:36.790
aber es wird über eine große Menge

01:55:36.790 --> 01:55:38.790
der Erde ausgesprochen werden

01:55:38.790 --> 01:55:40.790
die Erde wird von der Kontinentenkrust

01:55:40.790 --> 01:55:42.790
und verschwindet mit wenig Effekt

01:55:42.790 --> 01:55:44.790
außer wenn man die Nadel

01:55:44.790 --> 01:55:46.790
von einigen lokalen Seismometern bewegt

01:55:46.790 --> 01:55:48.790
das Geräusch von 12 Milliarden Füßen

01:55:48.790 --> 01:55:50.790
schlägt auf den Boden auf

01:55:50.790 --> 01:55:52.790
und schlägt viele Sekunden auf

01:55:52.790 --> 01:55:54.790
und dann wird die Erde ruhig

01:55:54.790 --> 01:55:56.790
Sekunden passen

01:55:56.790 --> 01:55:58.790
alle schauen herum

01:55:58.790 --> 01:56:00.790
es gibt viele ungewöhnliche Blickwünsche

01:56:00.790 --> 01:56:02.790
jemand kackt

01:56:02.790 --> 01:56:04.790
ein Telefon kommt aus einem Koffer

01:56:04.790 --> 01:56:06.790
in Sekunden folgen die 7 Milliarden Telefone

01:56:06.790 --> 01:56:07.790
der Welt

01:56:07.790 --> 01:56:09.790
alle Netzwerke sind unter ungewöhnlicher Lüge

01:56:09.790 --> 01:56:11.790
außerhalb von Rhode Island

01:56:11.790 --> 01:56:13.790
beginnt abgestürzte Maschine

01:56:13.790 --> 01:56:15.790
Flugzeuge fliegen durch die Höhe

01:56:15.790 --> 01:56:17.790
auf Autopiloten

01:56:17.790 --> 01:56:19.790
Essen startet auf abgestürzten Küchenstöfen zu brennen

01:56:19.790 --> 01:56:21.790
Fußballballen verfolgen ihre Projekte

01:56:21.790 --> 01:56:23.790
und haben nun unabhängige Ziele

01:56:23.790 --> 01:56:25.790
Moment

01:56:25.790 --> 01:56:27.790
das ist ja bei der Frage

01:56:27.790 --> 01:56:29.790
normalerweise auch nicht mit gemeint

01:56:29.790 --> 01:56:31.790
natürlich müssen

01:56:31.790 --> 01:56:33.790
alle Leute wieder

01:56:33.790 --> 01:56:35.790
zurück teleportiert werden

01:56:35.790 --> 01:56:37.790
und die Zeit muss still stehen in der Zwischenzeit

01:56:37.790 --> 01:56:39.790
und nicht springen in diesem einen Ding

01:56:41.790 --> 01:56:43.790
ansonsten ist es natürlich ziemlich blöd

01:56:43.790 --> 01:56:45.790
wenn auf einmal alle Leute dort weg sind

01:56:45.790 --> 01:56:47.790
wo sie eben waren

01:56:47.790 --> 01:56:49.790
um dann irgendwo kurz in Rhode Island zu springen

01:56:49.790 --> 01:56:51.790
Back in Rhode Island

01:56:51.790 --> 01:56:53.790
People, many people

01:56:53.790 --> 01:56:55.790
begin to wonder

01:56:55.790 --> 01:56:57.790
How do we get everyone home?

01:56:57.790 --> 01:56:59.790
The TF Green Airport in Warwick, Rhode Island

01:56:59.790 --> 01:57:01.790
handles a few thousand passengers a day

01:57:01.790 --> 01:57:03.790
I just flew out of there

01:57:03.790 --> 01:57:05.790
They have the nicest bathrooms of any airport I've ever seen

01:57:05.790 --> 01:57:07.790
This is not part of the recording

01:57:07.790 --> 01:57:09.790
Assuming they got things organized

01:57:09.790 --> 01:57:11.790
including sending out scouting missions to retrieve fuel

01:57:11.790 --> 01:57:13.790
they could run at 500% capacity for a hundred years

01:57:13.790 --> 01:57:15.790
without making a dent in the crowd

01:57:15.790 --> 01:57:17.790
The addition of all the nearby airports

01:57:17.790 --> 01:57:19.790
doesn't change the equation much

01:57:19.790 --> 01:57:21.790
nor does the region's light rail system

01:57:21.790 --> 01:57:23.790
Crowds climb on board container ships

01:57:23.790 --> 01:57:25.790
in the deepwater port of Providence

01:57:25.790 --> 01:57:27.790
but stocking sufficient food and water for a long sea voyage proves a challenge

01:57:27.790 --> 01:57:29.790
Rhode Island's million cars are commandeered

01:57:29.790 --> 01:57:31.790
Moments later, I-95, I-195 and I-295

01:57:31.790 --> 01:57:33.790
become the sites of the largest traffic jams

01:57:33.790 --> 01:57:35.790
in the history of the planet

01:57:35.790 --> 01:57:37.790
The roads are blocked by the crowds

01:57:37.790 --> 01:57:39.790
but a lucky few get out and begin wandering

01:57:55.520 --> 01:57:57.520
wandering the abandoned road network

01:57:57.520 --> 01:57:59.520
Some make it past New York or Boston

01:57:59.520 --> 01:58:01.520
before running out of fuel

01:58:01.520 --> 01:58:03.520
Since the electricity is probably not on at this point

01:58:03.520 --> 01:58:05.520
rather than finding a working gas pump

01:58:05.520 --> 01:58:07.520
it's easier to just abandon the car and get in a new one

01:58:07.520 --> 01:58:09.520
After all, who can stop you? All the cops are in Rhode Island

01:58:09.520 --> 01:58:11.520
The edge of the crowd spreads outward

01:58:11.520 --> 01:58:13.520
Southern Massachusetts and Connecticut

01:58:13.520 --> 01:58:15.520
Any two people who meet are unlikely to have a language in common

01:58:15.520 --> 01:58:17.520
and almost nobody knows the area

01:58:17.520 --> 01:58:19.520
Even if people cooperate, everyone is hungry and thirsty

01:58:19.520 --> 01:58:21.520
Grocery stores are immediately emptied

01:58:21.520 --> 01:58:23.520
and woefully insufficient

01:58:23.520 --> 01:58:25.520
Fresh water is hard to come by

01:58:25.520 --> 01:58:27.520
and there's no efficient system for distributing it

01:58:27.520 --> 01:58:29.520
Sanitation is a disaster

01:58:29.520 --> 01:58:31.520
and healthcare infrastructure non-existent

01:58:31.520 --> 01:58:33.520
Within weeks, Rhode Island is a graveyard of billions

01:58:33.520 --> 01:58:35.520
including most of the people who submitted this question

01:58:35.520 --> 01:58:37.520
Du hast ja kein Zelt dabei

01:58:37.520 --> 01:58:39.520
Du wurdest ja instant weg teleportiert

01:58:39.520 --> 01:58:41.520
Du und ich auch

01:59:05.520 --> 01:59:07.520
Gut, dass wir das jetzt wissen

01:59:07.520 --> 01:59:09.500
Man sagt wenn man einen Frosch

01:59:09.520 --> 01:59:16.380
Gut, dass wir das wissen

01:59:16.380 --> 01:59:18.380
Hätte ich das nicht gewusst, hätte mir was gefehlt

01:59:18.380 --> 01:59:34.720
Don't make Rest Abis

01:59:34.720 --> 01:59:36.720
Was kommt jetzt? CraftQL oder

01:59:36.720 --> 01:59:43.640
TAPC oder

01:59:43.640 --> 01:59:45.640
Ich brauch ne Runde Katzenvideosekunde

01:59:45.640 --> 01:59:47.640
Fertig mein Toastbrotfutter

01:59:47.640 --> 02:00:12.430
Ich bin gleich fertig

02:00:12.430 --> 02:00:20.090
Ein Toastbrot hab ich noch

02:00:20.090 --> 02:00:22.090
Ja

02:00:22.090 --> 02:00:24.090
Das ist in Japan, guck mal wie ordentlich da drum herum ist

02:00:24.090 --> 02:00:26.090
In Frankfurt hätte schon irgendjemand

02:00:26.090 --> 02:00:31.420
auf den Tisch gepinkelt

02:00:31.420 --> 02:00:33.420
Und ich meine, nicht die Katzen

02:00:33.420 --> 02:00:56.030
Oh, es moved

02:00:56.030 --> 02:01:13.930
Bam

02:01:13.930 --> 02:01:15.930
Ganz ehrlich, Leute

02:01:15.930 --> 02:01:17.930
Ich hab ne Modelleisenbahn

02:01:17.930 --> 02:01:19.930
Nix am Hut, aber auch gar nix

02:01:19.930 --> 02:01:21.930
Da würde ich aber trotzdem

02:01:21.930 --> 02:01:23.930
denen einen Besuch abstatten

02:01:23.930 --> 02:01:25.930
wenn ich in Japan bin

02:01:25.930 --> 02:01:30.110
Oder wenn ich in der Ecke bin

02:01:30.110 --> 02:01:32.110
Ihr habt aber nicht Billy auf den Gleisen stehen, oder?

02:01:32.110 --> 02:01:53.850
Das Restaurant ist eine Stunde von dir weg

02:01:53.850 --> 02:01:55.850
Ach, das ist ein Restaurant?

02:01:55.850 --> 02:02:00.000
Okay

02:02:00.000 --> 02:02:02.000
Ich dachte

02:02:02.000 --> 02:02:04.000
Ich dachte, es ist so ein Modelleisenbahnladen

02:02:04.000 --> 02:02:24.300
Jumbo hat verpasst?

02:02:24.300 --> 02:02:30.430
Fertig

02:02:30.430 --> 02:02:32.430
Jetzt hab ich noch super gesund

02:02:32.430 --> 02:02:43.770
Ein Brot mit Nutella

02:02:43.770 --> 02:03:12.880
Bam

02:03:12.880 --> 02:03:14.880
Mit oder ohne?

02:03:14.880 --> 02:03:18.350
Ohne

02:03:18.350 --> 02:03:33.150
Ich find das total eklig mit Butter drunter

02:03:33.150 --> 02:03:35.150
Das war so ne Glaubensfrage fast schon

02:03:35.150 --> 02:03:38.430
Das war doch grad ein Kurzgesagt-Video, oder?

02:03:38.430 --> 02:03:40.430
Losing weight is hard

02:03:40.430 --> 02:03:42.430
and unfortunately your body is sabotaging you every step

02:03:42.430 --> 02:03:44.430
Alle 12 Minuten ist zu lang

02:03:44.430 --> 02:03:48.730
Ich bin jetzt einschaufelt, fertig futtern

02:03:48.730 --> 02:03:50.730
Nutella ausstellt, jetzt kann ich futtern

02:03:50.730 --> 02:03:52.730
So

02:03:52.730 --> 02:03:56.330
Jetzt geht's weiter

02:03:56.330 --> 02:03:59.740
Chat, warum geht denn das net?

02:03:59.740 --> 02:04:04.400
Jetzt geht's

02:04:04.400 --> 02:04:06.400
Chat, warum geht das jetzt auf einmal?

02:04:06.400 --> 02:04:13.480
Die ganze Zeit ging's net

02:04:13.480 --> 02:04:15.480
Aber das ist viel zu langsam, Leute

02:04:15.480 --> 02:04:18.990
Das ist super lahm

02:04:18.990 --> 02:04:24.030
Da stimmt irgendwas net

02:04:24.030 --> 02:04:26.030
Das ist viel zu langsam

02:04:26.030 --> 02:04:28.030
Also aus irgendwelchen Gründen funktioniert das

02:04:28.030 --> 02:04:30.030
Aber das ist viel, viel, viel zu langsam

02:04:30.030 --> 02:04:32.030
Hier, receive bytes

02:04:32.030 --> 02:04:34.030
32, what the fuck

02:04:34.030 --> 02:04:36.030
32

02:04:36.030 --> 02:04:38.030
Da passiert irgendwas zwischendurch

02:04:38.030 --> 02:04:40.030
was nicht richtig ist

02:04:40.030 --> 02:04:56.680
Gucken wir mal ob das da am Reset immer noch funktioniert

02:04:56.680 --> 02:05:01.950
Ich vermute auch, dass da irgendwas falsch ist

02:05:01.950 --> 02:05:03.950
Ja

02:05:03.950 --> 02:05:05.950
Ich weiß nicht, ob es bei mir falsch ist

02:05:05.950 --> 02:05:07.950
Oder auf ESP Seite

02:05:07.950 --> 02:05:09.950
Ich vermute fast auf ESP Seite

02:05:09.950 --> 02:05:11.950
Weil das ist noch so ein neues Feature ist

02:05:11.950 --> 02:05:13.950
Hat bestimmt nicht angreifen

02:05:13.950 --> 02:05:17.290
Guck jetzt hängt's wieder

02:05:17.290 --> 02:05:19.290
Ich vermute mal, das hat wahrscheinlich noch keiner mit Postrequest ausprobiert richtig

02:05:19.290 --> 02:05:21.290
Ich vermute mal, das hat wahrscheinlich noch keiner mit Postrequest ausprobiert richtig

02:05:21.290 --> 02:05:32.800
Weil ich wüsste echt nicht, was hier wirklich

02:05:32.800 --> 02:05:34.800
Ne?

02:05:34.800 --> 02:05:48.430
das ist sehr minimalistisch was da schief gehen kann manchmal geht's manchmal nicht

02:05:48.430 --> 02:05:56.610
aber wenn es geht dann super langsam machen wir mal okay mein buffer von 128 ist auch

02:05:56.610 --> 02:06:34.460
ziemlich pk 1024 okay das ist noch eine halbwegs sinnvolle größe und jetzt machte einfach gar nichts

02:06:34.460 --> 02:06:43.630
mehr da stimmt doch was nicht leute wenn ich sowas in der ausgabe schon drin sehe da ist

02:06:43.630 --> 02:06:57.980
auch irgendwas richtig leute hier guckt euch das mal der crash by the way nicht ja er macht

02:06:57.980 --> 02:07:10.060
aber auch nichts mehr also da stimmt irgendwas nicht da ist irgendwas kaputt wir machen das

02:07:10.060 --> 02:07:44.310
jetzt noch mal 128 irgendwas im arsch und mama github issues er ist ein kendler file upload

02:07:44.310 --> 02:07:53.250
reading data das ist return any das kann man nicht sagen bei mir gibt es schon data

02:07:53.250 --> 02:07:53.390
aber das kann man nicht sagen bei mir gibt es schon data aber das kann man nicht sagen

02:07:53.390 --> 02:07:59.780
aber das kann man nicht sagen bei mir gibt es schon data aber es fand dann nicht es gibt data

02:07:59.780 --> 02:08:36.240
aber dann crash 6 ist 4096 das sollte dafür eigentlich reichen aber er war in receive 11

02:08:36.240 --> 02:09:07.430
er war in receive 128 genau das habe ich auch ist es etwa ein bug gibt ein patch oder andere

02:09:07.430 --> 02:10:10.330
welcher patch ist doch was ganz anderes aber hier gibt es ein hier gibt es ein pull request dafür

02:10:10.330 --> 02:10:17.050
um das problem zu fixen prevent konkurrent access to socket use denn er ist ja aha dann lasst uns

02:10:17.050 --> 02:10:32.860
doch mal angucken was da eigentlich kaputt ist der fix ist relativ easy so wie es aussieht ok also für

02:10:32.860 --> 02:10:40.240
mich sieht das so aus als checken die nicht ob das ein asynchroner request ist und die greifen auf den

02:10:40.240 --> 02:10:46.920
gleichen request von ihrem http management thread zu

02:10:46.920 --> 02:10:53.480
während der asynchronen läuft und sachen upload deswegen würde ich sagen leute wir

02:10:54.480 --> 02:11:05.220
erfreuen einfach mal den patch oder und gucken ob so funktioniert patch eightypower şeyler so kann

02:11:05.220 --> 02:11:19.660
ich den patch platte kommen wir müssen wir müssen uns das nochmal klonen master oder haben jetzt den

02:11:19.660 --> 02:11:30.240
patch rein dann schauen wir mal funktioniert dasasa ich jetzt relativ easy ausprobieren so welcher ist

02:11:30.240 --> 02:11:31.000
das plays played while rendering

02:11:31.580 --> 02:11:39.220
von dem branch hat auch nur ein comet drin okay das dürfte easy sein

02:11:39.220 --> 02:11:45.470
schauen wir mal ob das ganze funktioniert mit mit diesem patch

02:11:45.470 --> 02:12:00.580
applied wie viele esp installation habe ich jetzt hier eigentlich fünf

02:12:00.580 --> 02:12:17.300
könnte das auch einfach ins 553 apply oder muss das nicht wirklich neu klonen

02:12:17.300 --> 02:12:25.400
abiklons war neu dann wurstel dann wurschtel ich nicht einem stand rum der

02:12:25.400 --> 02:12:28.820
eigentlich dem release tag von denen entspricht nicht dann irgendwann fängt

02:12:28.820 --> 02:12:36.520
das vergesse und ich frage warum sich funktioniert weil ich vor habe ist ein

02:12:36.520 --> 02:12:44.240
web server auf dem sp 32 und also wifi web server und auf dem web server dann

02:12:44.240 --> 02:12:47.500
was hochladen allerdings asynchron so dass man mehrere sachen gleichzeitig

02:12:47.500 --> 02:12:52.160
hochladen kann das ist ein ganz neues feature das gibt es seit zwei wochen in

02:12:52.160 --> 02:12:55.900
esp df das wollte ich mal ausprobieren und wir haben schon festgestellt es

02:12:55.900 --> 02:12:57.580
gibt wohl noch einen kleinen bug

02:12:58.000 --> 02:13:06.700
den man wohl fixen kann mit dem patch aus diesem pull request und das

02:13:06.700 --> 02:13:12.430
probier jetzt mal aus ob das funktioniert drei stunden später

02:13:12.430 --> 02:13:25.310
upa masteristen wie pr pr

02:13:25.310 --> 02:13:33.200
idir smart update herr als mal geht es pode

02:13:33.200 --> 02:13:42.580
auf welcher branche hat er das

02:13:42.620 --> 02:13:54.820
nicht auf master okay wir kopieren uns einfach den kommentar jetzt cherry pick

02:13:54.820 --> 02:14:05.240
in patch okay wir möchten nichts schmeißen dann wieder weg ich hätte

02:14:05.240 --> 02:14:13.400
auch das jemand das ist wurscht wir haben jetzt im prinzip nicht lockt

02:14:13.400 --> 02:14:29.200
das im prinzip den patch pleite von dem du noch mal oben drauf ja okay dann

02:14:29.200 --> 02:14:35.030
probiere das doch mal aus jetzt haben wir unsere spdf mit den zusätzlichen

02:14:35.030 --> 02:15:35.400
patches schauen wir mal master export export etwas gucken da so export flash

02:15:35.400 --> 02:15:44.040
der es war clean flash so wir haben esp ok wir haben sogar schon version 5.4

02:15:44.040 --> 02:15:46.340
weiß ich ob es gerade gesehen habt aber wahrscheinlich

02:15:46.340 --> 02:15:46.360
nicht so gut ist aber ich weiß nicht ob ihr das gesehen habt aber wahrscheinlich

02:15:46.360 --> 02:15:46.420
nicht so gut ist aber ich weiß nicht ob ihr das gesehen habt aber wahrscheinlich

02:15:46.420 --> 02:15:52.060
hat master immer die version nach dem nach dem letzten tag da haben die

02:15:52.060 --> 02:15:57.280
bestimmte magic drin so haben auf jeden fall den richtigen stand es scheint auch

02:15:57.280 --> 02:16:01.000
noch alles zu kompilieren jetzt bin ich mal gespannt leute chat

02:16:01.000 --> 02:16:08.420
predictions meine das funktioniert mit dem patch jetzt oder es ist ein fehler

02:16:08.420 --> 02:16:27.320
bei mir und ich habe irgendwas verkackt ich bin da unschlüssig schau mal chat

02:16:27.320 --> 02:16:31.440
meines funktioniert nicht okay naja gucken wir mal zack

02:16:31.440 --> 02:16:38.950
das sieht gut aus das sieht gut aus

02:16:38.950 --> 02:17:05.630
also einfach random patches von github auf geht's okay jetzt nachdem das jetzt

02:17:05.630 --> 02:17:13.090
funktioniert können wir die buffer sei es auch um alle busy größer machen würde ich sagen also 1024

02:17:13.090 --> 02:17:13.230
also 1024

02:17:13.250 --> 02:17:15.250
also 1024 buffer sei es ist glaube ich echt ganz in

02:17:15.250 --> 02:17:15.270
buffer sei es ist glaube ich echt ganz in

02:17:15.270 --> 02:17:18.790
buffer sei es ist glaube ich echt ganz in ordnung oder wir können sogar 2048 buffer

02:17:18.790 --> 02:17:18.810
ordnung oder wir können sogar 2048 buffer

02:17:18.810 --> 02:17:21.550
ordnung oder wir können sogar 2048 buffer sei es machen aber dann müssen wir auf

02:17:21.550 --> 02:17:21.570
sei es machen aber dann müssen wir auf

02:17:21.570 --> 02:17:26.730
sei es machen aber dann müssen wir auf jeden fall die stack sei es von unserem

02:17:26.730 --> 02:17:26.750
jeden fall die stack sei es von unserem

02:17:26.750 --> 02:17:29.350
jeden fall die stack sei es von unserem task etwas vergrößern

02:17:29.350 --> 02:17:29.370
task etwas vergrößern

02:17:29.370 --> 02:17:32.530
task etwas vergrößern naja wir haben 4096 text als das könnte

02:17:32.530 --> 02:17:32.550
naja wir haben 4096 text als das könnte

02:17:32.550 --> 02:17:34.690
naja wir haben 4096 text als das könnte gerade noch so hinhauen

02:17:34.690 --> 02:17:34.710
gerade noch so hinhauen

02:17:34.710 --> 02:17:48.120
gerade noch so hinhauen probieren wir mal aus flächen war auch

02:17:48.120 --> 02:17:48.140
probieren wir mal aus flächen war auch

02:17:48.140 --> 02:18:06.580
schon mal schneller so ist es gecrasht gerade der körper flohach mist ok sex heißt es reicht

02:18:06.580 --> 02:18:16.700
doch nicht also stacks es kommen wir machen der kriegt er kriegt jetzt mal mal 3 12.000

02:18:16.700 --> 02:18:26.510
er ist das ist im prinzip wie viel ich weiß dass es nicht wirklich stimmt ja aber wie viel ram so

02:18:26.510 --> 02:18:36.860
ein thread verwenden darf stimmt nicht wirklich weil heap memory kann er immer allokieren wieder

02:18:36.860 --> 02:18:41.220
will es egal wie groß sich die groß die stacks als es aber ganz grob gesagt ist das wie viel

02:18:41.220 --> 02:18:51.800
ram so ein einzelner thread verwenden darf jetzt sind es 12 km sie kommen und jetzt geht das auch

02:18:51.800 --> 02:18:59.400
viel schneller seht ihr das jetzt ist es schon fertig gleich fertig jetzt auf

02:18:59.400 --> 02:19:02.760
wir schicken übrigens keine antwort dass wir fertig sind sollten wir vielleicht noch mal

02:19:02.760 --> 02:19:19.660
machen send was habe ich hier content wie html oder so das sollte man noch machen jetzt ist

02:19:19.660 --> 02:19:35.250
nicht geht's wir wir antworten mit angeblich mit html ok und jetzt senden wir ja omega keckel als

02:19:35.250 --> 02:19:40.930
antwort man sollte kölner nicht mehr hängen ich habe scheint zu funktionieren und übrigens

02:19:41.110 --> 02:19:47.950
diesen krempel mama raus das wird sonst so schlecht lesbar aber ich würde sagen der patch hat das

02:19:47.950 --> 02:19:55.930
gefixt jetzt müssen wir nur noch hoffen wir könnten jetzt mal in den merch request gehen und reinschreiben

02:19:55.930 --> 02:20:07.420
fix mal ich bin ja nicht eingeloggt bin ich auf dem zweiten rechner eingeloggt weil ich würde ich

02:20:07.420 --> 02:20:25.480
würde ist so ob das richtige haben jetzt bin ich eingeloggt na gut weil ich finde es immer ganz sinnvoll

02:20:25.640 --> 02:20:32.040
wenn man ein bisschen feedback auf die pull request schreibt selbst wenn man nichts mit der

02:20:32.040 --> 02:20:37.320
entwicklung zu tun hat weil oftmals wissen nicht so genau tut es jetzt tut es nur bei dem einen würde

02:20:37.320 --> 02:20:43.320
das eigentlich reinschreiben dass das auch bei mir den fehler fix sagt boom kommentiert wie schnell

02:20:43.320 --> 02:20:49.320
es jetzt geht asynchron easy so und wisst ihr was das jetzt omega keckel passt wisst ihr was das

02:20:49.320 --> 02:20:54.300
heißt ist jetzt kann ich mehrere dateien parallel hochladen nicht dass ich das bräuchte aber um zu

02:20:54.300 --> 02:20:57.240
beweisen dass das asynchron funktioniert sagt

02:20:57.780 --> 02:21:11.160
seht ihr paralleler asynchroner asynchrones handling von post requests das ist mega nice das gefällt mir

02:21:11.160 --> 02:21:18.420
dass das so in anführungsstrichen so einfach jetzt funktioniert wenn es denn funktionieren würde also

02:21:18.420 --> 02:21:22.140
wenn es funktioniert ist es einfach leider ist das aktuelle noch verbuggt und man braucht noch

02:21:22.140 --> 02:21:32.380
ein custom patch chat ist das mission accomplished nee das ist nicht mission accomplished mission

02:21:32.380 --> 02:21:39.440
accomplished ist erst wenn es über https geht also http wir brauchen wir wollen das ganze jahr als

02:21:39.620 --> 02:21:56.550
mit tls machen also machen wir das ganze jetzt mal mit https das brauchen wir nicht das brauchen wir

02:21:56.550 --> 02:22:04.710
das brauchen wir das brauchen wir das brauchen wir ja müssen wir die zertifikate inkluden das verstehe

02:22:04.710 --> 02:22:27.080
ich muss okay nice und jetzt wollen wir sagen ssl start okay und jetzt sollte der webserver mit https hochkommen

02:22:27.260 --> 02:22:39.550
und ich sollte das ganze auch über https machen können https trauma wenn das funktioniert dann

02:22:39.550 --> 02:22:51.970
mission accomplished wir haben natürlich aber wir verzeihen dass den espresso china chinesen war dass

02:22:51.970 --> 02:22:56.950
es nicht funktioniert weil das ist noch ein ganz neues feature und es ist noch nicht released es

02:22:56.950 --> 02:23:03.130
ist noch in einem erz ist quasi rc 15 53 rc 1 drin das ist okay dass es gerade kaputt ist

02:23:05.480 --> 02:23:18.630
also ich habe ja selbst sein zertifikate es geht es ist eine ganze ecke langsamer über ssl das wundert

02:23:18.630 --> 02:23:51.900
mich persönlich okay über ssl hat so ein paar kleine probleme wie es aussieht wenn er out of

02:23:51.900 --> 02:24:01.360
memory wer würde wieder crashen aber wir können wir können immer trotzdem hier oben nochmal 512

02:24:01.360 --> 02:24:08.200
bei das wird es eigentlich nicht sein aber irgendwas verpeilt

02:24:11.130 --> 02:24:24.890
ich meine viel mehr kannst du nicht machen um den server umzustellen auf https als genug stacks

02:24:24.890 --> 02:24:50.650
wüsste ich jetzt nicht was da kaputt ist aber nochmal vielleicht doch ein bisschen wenig speicher

02:24:50.650 --> 02:25:08.970
gehabt kunst kein ding geht laden wir mal laden wir mal zwei sachen parallel hoch kunst dann sieht

02:25:08.970 --> 02:25:15.650
du an den zahlen dass die unterschiedlich sind funktionieren auch über https easy easy easy

02:25:17.030 --> 02:25:40.620
sehr nice mission accomplished würde ich sagen kein crash nix asynchrone datei uploads parallel

02:25:40.620 --> 02:25:48.300
auf dem microcontroller finde haben die schön gemacht ist easy zu handhaben sofern es funktioniert

02:25:48.300 --> 02:25:54.720
ja also das ist wirklich sehr übersichtlich im prinzip brauchst du eigentlich das hier ist das

02:25:54.720 --> 02:26:03.180
hier ist zeug dass das überhaupt wifi sich verbindet im prinzip brauchst du nur den brauchst du nur dann web

02:26:03.420 --> 02:26:11.580
starten den händler registrieren einmal am anfang sagen hier einmal am anfang anfangen sagen es

02:26:11.580 --> 02:26:19.540
und start essen beginn dann machst du hier wie als wäre es ein synchroner request dein krempe

02:26:19.540 --> 02:26:27.010
am ende sagst du komplett das ist wirklich easy also da kannst du nichts sagen das haben die gut

02:26:27.010 --> 02:26:33.210
gemacht es ist zwar noch verpackt in der aktuellen version aber ich gehe stark davon aus dass bis zum

02:26:33.210 --> 02:26:35.050
release von 53 das gefixt ist

02:26:35.530 --> 02:26:47.740
easy nice chat das war's mission mission complete für heute kann ich firmware update bauen über http

02:26:47.740 --> 02:27:00.840
für den controller chat gibt es noch irgendwas wichtiges irgendwas was ihr wissen wollt zu dem

02:27:00.840 --> 02:27:13.020
was wir gemacht haben oder allgemein weil wir nicht neue folge dr bauer ich muss dir ehrlich

02:27:13.020 --> 02:27:20.020
sagen ich finde das nicht lustig ich habe das ein paar mal als shorts empfohlen bekommen keine ahnung ich teile da den

02:27:20.220 --> 02:27:25.940
humor nicht unbedingt also auf der einen seite ist das was wo ich mir denke das ist was was ich eigentlich

02:27:25.940 --> 02:27:31.300
potenziell lustig finden müsste aber ich finde es nicht lustig ist genauso wie ich anscheinend auch

02:27:31.300 --> 02:27:38.730
der einzige bin der die office nicht lustig findet mit welcher lib hast du den web server erstellt ja

02:27:38.730 --> 02:27:49.090
das ist ja das beste das ist eingebaut in esp edf muss hier du musst den passenden händler inkluden

02:27:49.090 --> 02:27:50.970
von denen das liefern die mit

02:27:53.960 --> 02:28:01.800
und dann kannst du deinen web server erstellen mit wo ist er hier im prinzip ist dass ich das ist alles was ich

02:28:01.800 --> 02:28:13.230
gemacht habe start web server und dann hier den händler für den upload das liefert esp edf mit also

02:28:13.230 --> 02:28:18.350
eine sache musst du machen wenn du https verwenden willst du musst in die config von einem projekt

02:28:18.350 --> 02:28:29.790
gehen und sagen https hier enable https server component das musste einschalten nginx ja klar

02:28:29.910 --> 02:28:38.790
auf msp 32 nginx embedded nginx fork ja growth strike habe ich mich schon morgen drüber ausgelassen

02:28:38.790 --> 02:28:48.660
also gao stmo das ist mittlerweile ist das standardmäßig dabei also ein http web server

02:28:48.660 --> 02:28:53.560
haben die schon ganz lange schon jahre mit dabei ein tls fähigen web server auch schon lange und

02:28:53.560 --> 02:28:57.480
jetzt seit neuestem seit dieser version und die ist noch nicht raus weil wir mussten sogar noch

02:28:57.480 --> 02:29:01.780
dass es funktioniert einen patch von github einspielen dass das vorgesehen ist

02:29:01.800 --> 02:29:10.880
quasi hotfix patchen dass es funktioniert jetzt kann man sogar http post requests asynchro

02:29:10.880 --> 02:29:15.960
handeln lassen von dem web server auf dem micro controller also sprich wie du hier siehst ich kann

02:29:15.960 --> 02:29:22.620
zwei post requests parallel laufen lassen ich bin ein bisschen blöd weil ich habe die ausgabe schon

02:29:22.620 --> 02:29:33.140
ausgemacht hier oben du kannst zwei wenn er sich war jetzt hat er sich gerade nicht zum wlan verbunden

02:29:49.180 --> 02:29:59.430
mir guckt du kannst zwei oder bis zu sieben parallele request bearbeiten lassen von dem

02:29:59.430 --> 02:30:04.650
von dem web server und das finde ich es für ein bild bild in stadt quasi nennen wir es mal standard

02:30:04.650 --> 02:30:10.290
library web server echt ganz nice der micro controller ist nicht der schwachbrüstigste das

02:30:10.290 --> 02:30:18.510
ist das würde aber auch nur in normalen esp 32 funktionieren sieben auch noch bei https da bin

02:30:18.510 --> 02:30:20.630
ich mir nicht so ganz sicher warum wir mal gucken

02:30:21.510 --> 02:30:29.130
wir können nicht gucken nicht gescheit gucken aber es müssten sieben seien auch bei https ja die sache

02:30:29.130 --> 02:30:37.980
ist ich weiß nicht ob der ram reicht's den hat glaube ich ja nur 160 kilobyte ram ja doch doch

02:30:37.980 --> 02:30:50.990
müsste reichen können ja das kann man tatsächlich noch ausprobieren wir können ja mal hier dieses

02:30:50.990 --> 02:30:56.930
status update rausschmeißen dass uns das nicht so viel nicht so voll spannt ja hier dass das

02:30:56.930 --> 02:31:02.310
remaining machen wir mal raus und in main lassen wir uns jetzt mal unsere

02:31:02.310 --> 02:31:14.080
hieb sei es ausgeben vom spp get free hipster ist er will hieb sei es in

02:31:14.080 --> 02:31:46.100
beiz ob mama guck mal wie viel viel viel haben wir noch frei haben dynamisch ok

02:31:46.100 --> 02:32:03.450
ohne alles haben wir ok so irgendwas um 167 kilobyte frei so in dem dreh machen

02:32:03.450 --> 02:32:11.220
wir mal ein paar requests wie schnell er ist der ist viel zu schnell jetzt so

02:32:11.220 --> 02:32:22.310
schnell so schnell bin ich ja gar nicht ja das ok so ein request ist schon leute

02:32:22.310 --> 02:32:30.680
habe ich ein memory league naja bin ich also ein request frist schon

02:32:30.680 --> 02:32:31.120
drei

02:32:31.120 --> 02:32:38.620
30 30 30 kilobyte so ungefähr schwer zu sagen

02:32:38.620 --> 02:32:43.660
so initial beim beim verbindungs aufbaut frist ist mal kurz 30 kilobyte danach

02:32:43.660 --> 02:32:49.020
weniger wir müssen das wir müssen das langsamer

02:32:49.020 --> 02:32:56.420
machen das ist das geht zu schnell das geht sicher wir müssen irgendwie das

02:32:56.420 --> 02:33:03.400
lieb hier rein machen hier 100 millisekunden delay das sollte es lahm

02:33:03.400 --> 02:33:10.700
genug machen dass wir ein paar curls starten können gucken wie viele curls

02:33:10.700 --> 02:33:11.140
wird zum laufenden

02:33:11.160 --> 02:33:25.850
laufen bekommen und wie viel haben wir dann ab wann der ram quasi ausgeht ok

02:33:25.850 --> 02:33:49.520
wifi verbunden hier fünf ok da geht bloß fünf requests da gehen nur fünf

02:33:49.520 --> 02:34:11.220
requests mehr geht nicht also da kriegen wir da kriegen wir da gehen wir

02:34:11.220 --> 02:34:19.980
noch fünf request durch und dann hat er noch ein bisschen rahmen übrig hat er

02:34:19.980 --> 02:34:25.140
irgendwas memory liegt guck mal an die request karten gerade ab und jetzt wird

02:34:25.140 --> 02:34:26.240
freigegeben ok

02:34:27.120 --> 02:34:33.180
mit ssl kriegen wir bloß fünf request parallel was aber auch vollkommen

02:34:33.180 --> 02:34:46.330
ausreichend ist für so einen kleinen micro controller und noch noch mal will

02:34:46.330 --> 02:34:58.600
ich hatte keinen bock super alter das braucht 50 das braucht 15 also ungefähr

02:34:58.600 --> 02:35:08.750
man weiß nicht so genau und zwischen 550 und 30 kilobyte o request er als geno

02:35:08.750 --> 02:35:09.230
4 also vier parallele request weil es vorbei was ist denn hier da ist ein

02:35:09.230 --> 02:35:11.910
es geht nur vier also vier parallele request dann ist vorbei

02:35:11.910 --> 02:35:12.310
es ist nur eine Frage für die die es gibt wie viele request an die wir haben

02:35:12.310 --> 02:35:27.940
Was ist denn da so groß? Ich würde mal sagen, der ganze SSL-Kontext-Zeug wird wahrscheinlich einiges an RAM brauchen.

02:35:29.800 --> 02:35:33.840
Also wir reden ja hier von Kilobyte, das sind ja Bytes, was mir hier angezeigt werden.

02:35:34.620 --> 02:35:36.000
30 Kilobyte kann doch sein.

02:35:37.680 --> 02:35:42.160
Und das ganze Encryption-Zeug und alles mögliche, was da im RAM gehalten werden muss, kann ich mir schon vorstellen.

02:35:42.620 --> 02:35:46.660
Es ist auf jeden Fall eine ganze Ecke ressourcenintensiver als plain HTTP.

02:35:46.660 --> 02:35:53.060
Aber ich würde es trotzdem immer über HTTPS machen, weil das Ding hat ja letztendlich genug RAM.

02:35:53.140 --> 02:35:57.740
Das ist jetzt ja nicht gerade wenig, was das Ding für so einen kleinen Microcontroller hat.

02:35:58.660 --> 02:36:05.440
Und gerade wenn du darüber dein WLAN-Passwort setzt, über dein Accesspoint, dann ist es halt immer nice, wenn es über HTTPS ist.

02:36:06.460 --> 02:36:07.740
Da kann es halt niemand abgreifen.

02:36:08.980 --> 02:36:11.960
Auch wenn es eher was Theoretisches ist, aber es ist dann halt ausgeschlossen.

02:36:14.670 --> 02:36:15.290
Nahezu ausgeschlossen.

02:36:16.270 --> 02:36:18.270
Aber Leute, ich bin happy. Das funktioniert gut.

02:36:18.290 --> 02:36:20.950
Hätte ich nicht gedacht, dass es so easy ist.

02:36:21.210 --> 02:36:31.440
Da haben die sich echt schöne API überlegt, wie man das machen kann.

02:36:32.620 --> 02:36:35.080
Dass man dann Custom-Patch einspielen muss.

02:36:35.180 --> 02:36:35.760
Ja, so what.

02:36:41.400 --> 02:36:41.860
Alles klar.

02:36:42.480 --> 02:36:42.680
Chat.

02:36:44.040 --> 02:36:45.520
Schön, dass ihr dabei gewesen seid.

02:36:46.840 --> 02:36:49.520
Ich gehe jetzt auf.

02:36:50.040 --> 02:36:51.940
Mal runter aufs Klo und wir hören uns.

02:36:52.040 --> 02:36:52.860
Bis dann. Macht's gut.

02:36:53.580 --> 02:36:54.000
See you.
