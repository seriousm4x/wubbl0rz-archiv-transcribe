Oh Leute, ich muss sagen, ich fand das sehr nice, dass wir gestern mal wieder Proggers-Stream gemacht haben.
Haben wir schon eine Weile nicht mehr gemacht.
Und wir haben sogar ordentlich was auf die Reihe gekriegt.
Also echt nicht schlecht, wir sollten das wieder öfters machen.
Problem dabei ist nur, dass ich unter der Woche abends eigentlich keinen Bock habe.
Weil das ja auch immer ein bisschen anstrengend ist.
Und dass ich mir irgendwas überlegen muss, was wir machen.
Deswegen kann ich nicht Stream anmachen und loslegen, weil...
Ne, stimmt, ja.
Ja, das ist aber auch so ein Ding, das muss ich mir auch vorher ein bisschen angucken.
Weil ich glaube, keiner will mir zugucken, wie ich mir eine halbe Stunde irgendeine GitHub-Seite durchlese, wie man da was baut.
Ja, da haben wir unter der Woche ja genug Zeit.
Lass uns grad mal...
Ey, ne, ne, wenn schon müssen wir from scratch anfangen.
Ist das nix.
Cool.
Wir gucken mal gerade Trends...
Trend...
Trending, nicht Trends.
Trending.
Weekly Trends auf GitHub.
Und es wird wahrscheinlich das übliche sein.
Ein bisschen Krypto-Kram und der Rest AI.
Mal gucken, ob es mittlerweile auch mal andere Projekte gibt.
AI.
AI, AI, AI.
Ich weiß nicht, was das ist.
Stimmt, auch AI.
Was ist RARBG?
Stimmt, AI.
China-Chinesen-Zeug, China-Chinesen-Zeug.
AI.
China-Chinesen-Zeug.
AI.
AI.
Oh, guck mal.
Eine Open-Source-Jira.
Jira.
Hier ist die coolen Leute.
Eine Open-Source-Jira.
Alternative.
Plane.so.
Zeig mal, wie sieht denn das aus?
Ich meine...
Ich meine, ganz ehrlich, eigentlich, also, für kleine Teams, du brauchst das eigentlich nicht, weil, wenn man sowas wie GitLab, GitHub, GTA-Selfhost und irgendwie sowas benutzt, die haben ja alle Issue-Tracker.
Klar, das sind Issue-Tracker, die für das jeweilige Source-Repo gedacht sind, aber man muss es ja nicht übertreiben.
Also, wenn man jetzt nicht irgendwie 30 Teams hat.
Und zig verschiedene Dinger macht, dann braucht man vielleicht gar kein eigenes Ticketsystem.
Okay, das ist ein Project-Management-Tool from the future.
Nicht einfach nur ein Project-Management from the future.
Und warum ist das from the future?
Man weiß es nicht.
Es hört sich einfach nur gut an.
Aber ich glaube...
Ich guck mir das mal offline an.
Irgendeine Self-Hosted-Jira-Alternative, wenn man es wirklich braucht.
Ich glaube, das ist nicht verkehrt, nachdem man Jira nicht mal gescheit selbst hosten kann.
Also, zumindest, die ja nur noch ihren Cloud-Krempel verkaufen wollen.
Ich bin mir gar nicht sicher, ob man Jira nicht überhaupt noch Updates bekommt.
Weiß das jemand von euch?
Von der Self-Hosted-Jira-Variante gibt es überhaupt noch Updates?
Also, ihre ganze Entwicklung fließt ja eindeutig in ihr Fertig-Cloud-Gehäuse bis rein.
So, dann haben wir JavaScript.
Terraform.
Hey, das ist der, wo wir manchmal YouTube-Videos gucken.
Terraform.
Terraform.
AI.
AI.
AI.
China-Chinesen-Kram.
China-Chinesen-Kram.
Eine Postgres-Extension für Realtime-Data.
Okay, das ist so ein typisches Ding.
Wenn man es braucht, weiß man, dass man es braucht.
Sonst braucht man es wahrscheinlich nicht.
Aha.
AI.
PS3-Emulator.
AI.
AI.
YouTube-Frontend.
Das einzige Projekt, was ich kenne, was in Crystal programmiert ist.
AI.
Na gut, jetzt nicht sonderlich spannend.
So, jetzt nochmal kurz abchecken, was es in meiner Lieblingssprache Neues gibt.
AI.
UI-Framework.
Was ich mir auch schon seit längerer Zeit, und ich glaube, das sollten wir echt mal als nächstes machen.
Irgend so eine kleine Test-UI-Anwendung unter Linux bauen.
Man könnte von ausgehen, wenn ein UI-Framework unter Linux geschaltet wird,
dann wird so eine Windows und Mac auch gescheit funktionieren.
Ich mag halt diese ganze XML-Geschichte nicht.
Aber es sollte alle mal besser sein als MAUI.
Allein schon aus dem Grund, weil MAUI offiziell gar kein Linux ist.
Und ich glaube, es gibt auch keine richtigen...
Äh, nennt man das da Plugins?
Keine Erweiterung für MAUI, dass Linux richtig funktioniert.
Schreibt man Windows-Apps in C++?
Unter anderem.
Du kannst Windows-Apps in jeder x-beliebigen Programmiersprache bauen, die du willst.
Kommt ein bisschen drauf an.
Also, das Hauptproblem mit Windows-Anwendungen ist,
wenn das grafische Anwendungen sein sollen,
was ja eben viele Windows-Anwendungen sind,
dass es gut aussieht.
Das ist egal, welche Programmiersprache du nimmst.
Das ist das Problem unter Windows.
Also, der Grund, warum viele Windows-Anwendungen so kacke aussehen,
ist ganz einfach.
Weil es Microsoft verkackt hat.
Tatsächlich im Gegensatz zu Apple.
Die kriegen ja ihren Desktop-UI-Part wirklich ganz gut hin die letzten Jahre über.
Also, wir reden jetzt hier nicht von irgendwelchen Cross-Plattform-Frameworks,
sondern von der jeweiligen Plattform-Native-Technologie.
Und da hat es Microsoft einfach die letzten 15 Jahre über verkackt,
gescheite Sachen rauszubringen.
Und jetzt kriegen sie es nicht mehr hin.
Also, Windows hatte lange Zeit...
Sagen wir mal sowas wie was du in .NET und mit Windows Forms benutzen kannst.
Die hatten halt ihre Windows-API.
Das konntest du aus jeder x-beliebigen Programmiersprache benutzen.
Dafür gab es auch Wrapper und Bindings für nahezu jede Programmiersprache.
Sicherlich auch für Python.
Du musst nicht das Eingebaute nehmen.
Das Problem bei Windows Forms ist...
Eigentlich gibt es nicht so wirkliches Problem mit Windows Forms.
Windows Forms wirkt halt ein bisschen altbacken.
Windows, Windows...
Windows Forms...
Ja, das ist halt so...
Das ist klassisch...
So sieht halt eine Windows Forms-Anwendung aus.
So.
Genau so.
Ja.
So.
Windows Forms sieht halt ein bisschen altbacken aus, aber Windows Forms selbst hat tatsächlich
ein paar Vorteile gegenüber allen anderen UI-Frameworks, also die Microsoft sich so
ausgedacht hat.
Und zwar, wenn du eigene Inhalte rendern willst, also sagen wir mal, du baust ein...
Na gut.
Ja, ein Spiel.
Ja.
Und nimmst nicht irgendeine, irgendeine fertige, fertige Komplett-Engine, sondern machst halt...
Nimmst sowas wie Mono, Mono Game oder wie der Kempel heißt, oder mal angenommen du willst...
Du willst einen Videoplayer programmieren zum Beispiel mit Hardwarebeschleunigter oder
mit GPU-gerendertem Output, da ist Windows Forms nicht schlecht, weil es ist glaube ich
in keiner anderen Windows-UI-Technologie so einfach, eigene Inhalte ins Fenster zu rendern,
wie mit Windows Forms.
Die eigentlichen Control-Elemente, also so, Knöpfe, Buttons, Leisten und sowas, das sieht
alles relativ altbacken aus in Windows Forms und das sieht nicht nur altbacken aus, das
ist auch altbacken.
Also man kann relativ einfach testen, auf welcher Technologie etwas passiert.
In Windows, wenn man Emojis einfügt, so.
Alles, was Emojis rendern kann, ist höchstwahrscheinlich.
Ich meine, es gibt Tricks, dass man den Kempel auch zum Laufen bekommt in WPF und sicherlich
gibt es Tricks, dass man das auch in Windows Forms zum Laufen bekommt, allerdings nicht
mit dem, mit dem Native Font Rendering und den Native Steuerelementen.
Also alles, was Emojis kann, ist höchstwahrscheinlich.
Es gibt höchstwahrscheinlich irgendein WinUI-UWP-Mischmasch-Ding und kein klassisches Windows Forms.
Also, ich weiß nicht, wie es bei dem Control Panel aussieht.
Ja, okay.
Das Control Panel ist wahrscheinlich WPF oder, oder noch klassisches Win32, ja.
Guck, seht ihr?
Das kann nur, das kann nur die, die schwarz-weiß-Emojis.
Also man kann das ganz gut.
Also man kann das ganz gut testen, was auf welcher UI-Technologie basiert.
So, aber mal zurück zu Windows Forms.
Wenn man eigene Inhalte rendern will, ist Windows Forms gut.
Optisch gibt es ein paar Tricks, dass es modern aussieht, aber wirklich modern in der Handhabung ist es nicht.
Für einige Sachen ist es aber tatsächlich selbst heute sinnvoll, Windows Forms zu benutzen.
Nämlich, wie gesagt, wenn du hauptsächlich eigenen Inhalt in das Fenster rendern willst, dann ist Windows Forms gut.
So, also wenn du dich nicht um Fenster-Handling selbst kümmern willst.
So, danach kam, also Windows Forms für moderne Anwendungen, die sich modern anfühlen, modern aussehen, eher nicht.
Danach kam Microsoft auf die Idee mit WPF.
WPF war für seine Zeit eine ziemlich gute Idee.
Und zwar hatte WPF so ein paar Dinger, die Windows Forms nicht hat.
Windows Forms, äh, WPF hat sich zum Beispiel in die richtig, also gescheit in dieses Windows-Fenster-Komposit-Zeug,
Windows Forms hat sich zum Beispiel in die richtig, also gescheit in dieses Windows-Fenster-Komposit-Zeug,
Windows Forms hat sich zum Beispiel in die richtig, also gescheit in dieses Windows-Fenster-Komposit-Zeug,
integriert und wurde 60x die Sekunde refreshed.
integriert und wurde 60x die Sekunde refreshed.
Du hattest, ähm, theoretisch HWB-Ausgabe wenn das auch einmal WPF Manipulierer war.
du hattest, ähm, theoretisch HWB-Ausgabe wenn das auch einmal WPF Manipulierer war.
Und du hattest zum ersten Mal die Möglichkeit, deine UI nicht programmiertechnisch aufzubauen,
Und du hattest zum ersten Mal die Möglichkeit, deine UI nicht programmiertechnisch aufzubauen,
sondern zu beschreiben in so einem MAK-UP Language.
sondern zu beschreiben in so einem MAK-UP Language.
bisschen ähnlich wie HTML.
So ein XML Dialekt bei WPF.
Das Problem an WPF heutzutage ist, du kannst WPF eigentlich immer noch benutzen,
Du kannst WPF eigentlich immer noch benutzen, allerdings hat WPF erstaunlich wenig Liebe von Microsoft bekommen seit dem Release.
Das ist ja auch schon von 2005 oder 2006 oder sowas in der Richtung.
Aber Microsoft hat nie wirklich so viel gemacht an WPF und hat es irgendwie auch ein bisschen verschimmeln lassen,
was jetzt sich darauf ausgewirkt hat, dass viele moderne Sachen eben in WPF auch nicht funktionieren,
denn wenn es auch grundsätzlich ein bisschen einfacher ist, darin optisch ansprechende Anwendungen zu machen,
ist es auch gleichzeitig viel komplizierter als Windows Forms.
Das wurde dann jahrelang mit sich rumgeschleppt und dann hatte Microsoft ein Problem.
Sie hatten nämlich komplett entgegengesetzte Ansichten dazu, wie Desktop-Anwendungen gebaut werden sollten, nämlich mit Windows 8.
WPF und so war alles super fein mit Xenia.
XP und Vista und so, das war Microsoft voll richtig gut dabei und damals war das auch die beste Art und Weise,
bis auf das Front-Rendering, das sah schon immer kacke aus in WPF, weil es mittlerweile glaube ich ganz gut ausschaut.
So und dann hatte Microsoft ein Problem und Windows 8 kam raus und mit Windows 8 hatten sie die glorreiche Idee,
wir bauen Windows zu irgendeinem Tablet-Betriebssystem um.
Das heißt, sie haben eigentlich alle klassischen UI-Technologien komplett schleifen lassen,
obwohl es eigentlich an der Zeit gewesen wäre, mal was Gescheites rauszubringen, was irgendwie Windows,
so ein modernes, einfach zu programmierendes, optisch ansprechendes UI-Framework spendiert.
So, dann kamen sie erstmal an mit Windows 8 und haben gesagt, hey, Anwendungen, also es gibt Desktop-Anwendungen, sollen ja eh aussterben
und wir machen jetzt so Sachen mit JavaScript und irgendwelchen komischen Widgets,
und solchen Geschichten, also da haben die ganz komische Dinger getrieben und gepusht, versuchen zu pushen.
Windows 8 war glaube ich auch die Geburtsstunde von UWP, wo sie gesagt haben,
Windows-Anwendungen sollen jetzt in der Sandbox laufen und dürfen eigentlich nichts mehr machen, also hat es dann Windows-Anwendungen.
Die konnten keine Screenshots mehr capturen und sowas ganz, ganz schweres Zeug.
Das Problem dabei war, Microsoft hat da jahrelang drauf bestanden, dass das der Weg ist, Windows-Anwendungen zu machen.
Niemand wollte es benutzen.
Aber Microsoft hat das jahrelang versucht zu pushen, aber niemand wollte es.
Obwohl der eigentliche UI-Part von UWP tatsächlich sich über die Jahre hinweg weiterentwickelt hat
und eigentlich zum besten, wenn man rein für die Optik und von der Handhabung geht, zum besten Windows-UI wurde.
Also zum Beispiel, meine Taschenrechner sind immer ein schlechtes Beispiel, der Taschenrechner ist so ein Ding.
Der ist unglaublich hässlich gemacht, aber man sieht schon ein paar Sachen, die eigentlich ganz gut sind.
Also erstens, das Ding ist halt komplett GPU-gerendert, das ganze Ding, ja.
Es startet unglaublich schnell, es ist, gut, das Ding ist halt 80 KB oder so.
Du kannst es ordentlich skalieren, du hast ein bisschen sowas hier wie bei Web-Anwendungen,
dass du ordentlich das, wie nennt man das, responsive machen kannst.
Was vielleicht auch auffällt ist, wenn man es hier drüber bewegt,
ne, habe ich trans-, ich glaube, ich habe trans-, eh doch, man sieht es ein bisschen, guck mal.
Der Hintergrund ändert sich, ja, je nachdem, jetzt ist der Hintergrund eher blau, jetzt ist der Hintergrund ein bisschen grün.
Das heißt, die haben sogar Transparenz-Effekte eingeführt, die nicht einfach nur transparent sind,
sondern das mischen mit der eigentlichen Farbe des Buttons, sodass der Kontrast immer gut ist,
aber der Hintergrund ein bisschen durchschaut und so.
Also haben die sich wirklich was bei gedacht.
Das Problem war nur, dass UWP halt...
nicht nur UI-Framework ist, sondern eigentlich der Weg für neue Windows-Anwendungen sein sollte
und niemand wollte es benutzen, weil es durch die Sendbox so eingeschränkt war.
Ja, das funktioniert nicht mit dem über die App schieben, ich glaube, es nimmt immer den Hintergrund.
Wobei, bin ich mir gar nicht sicher, nimmt das immer den Hintergrund? Ich glaube schon.
Ja, es nimmt immer den Hintergrund.
Oder?
Ne.
Es nimmt den Hintergrund von der App, von einer anderen App, oder?
Muss man ausprobieren.
Es kommt bestimmt auf die App an, die man nimmt.
Machen wir mal den Keks auf.
Ah, ja, ja.
Ne, es ist der Hintergrund, es ist weiterhin der Desktop-Hintergrund.
Ja, das ist alles so ein bisschen halbherzig.
Das ist halt auch so ein Ding.
Zumindest UWP sollte die neue Windows, nicht nur die neue, das Windows-UI-Framework sein,
sondern UWP sollte halt ein neuer Weg sein, wie man Windows-Anwendungen programmiert.
Niemand wollte es haben.
So.
Jetzt hast du halt das Problem gehabt, und das hattest du wahrscheinlich acht Jahre plus, dieses Problem.
Deswegen ist Windows auch so hinten dran, was UI-Sachen angeht.
Dass die Leute weiterhin mit Windows Forms und WPF ihre Anwendungen entwickelt haben,
mit Technologien, die zum damaligen Zeitpunkt schon zehn, fünf bis 15 Jahre alt waren.
Und Microsoft wollte UWP pushen, und UWP wollte keiner.
Das heißt, du hattest die alten Technologien, die eigentlich benutzt werden mussten für Anwendungen,
die halt auch dann schon langsam richtig outdated waren.
Und Microsoft hat nur was Neues angeboten, was keiner wollte.
So.
Und das war halt ziemlich problematisch.
Und deswegen wurden wir, und da bin ich ziemlich sicher, dass das ein großer Faktor mit dabei gespielt hat,
deswegen werden wir heute so oft mit Anwendungen, mit Browser-Anwendungen beglückt,
die zwar so aussehen wie Desktop-Anwendungen, aber eigentlich Browser sind.
Weil das mehrere Vorteile hat.
Erstens, du kannst alles in Web-Technologien machen,
was viele nicht wissen.
Was viele Leute halt dazu gebracht hat, auch mal Desktop-Anwendungen erstellen zu können.
Ja, sowas wie Elektron genauso.
Genau, das meine ich.
Dass die Dinger automatisch auf so gut wie allen Betriebssystemen und Mobile-Geräten laufen.
Aber, und das war bestimmt eines der großen Vorteile,
man konnte sie auch gut unter Windows laufen lassen, ohne dass man sich zwischenentscheiden musste,
nehme ich was total outdatedes, von Microsoft supportetes für Windows,
oder nehme ich was Neues,
was mich so einschränkt, dass ich nicht alles machen kann, nämlich UWP.
Und deswegen haben ganz viele angefangen Elektron-Anwendungen zu bauen,
und wir haben heute Anwendungen, die halt für einfachste Dinger 400 MB RAM brauchen,
weil halt erstmal Node.js, Browser und alles mögliche mit gestartet werden muss.
Ich bin mir relativ sicher, dass dieses Vakuum an Windows-UI-Frameworks entscheidend mit beigetragen hat dazu,
dass Elektron sich so verbreitet hat.
Irgendwann ist das Microsoft auch gedämmert.
Ich würde mal sagen, so im Dreh vielleicht von Windows 10,
weil mit Anfang Windows 10 haben die immer noch versucht, UWP zu pushen,
aber sagen wir mal so, ungefähr mit Windows 10 ist es, oder ein bisschen später,
sagen wir mal so, Windows 10 und ein paar Patches,
ist es dann irgendwann gedämmert, dass UWP halt wirklich keine Sau haben will,
und sich das auch nie durchsetzen wird.
Lag wahrscheinlich auch ein bisschen am Wechsel,
von Microsoft-Chef und allem.
Und dann sind sie auf die Idee gekommen,
okay, lasst uns doch versuchen,
UWP in die Tonne zu hauen,
und den UI-Part von UWP,
also quasi der UI-Part ist halt unter anderem das so,
worauf Calculator hier basiert,
oder viele, viele Windows-Internet-Tools mittlerweile auch basieren,
lasst uns doch den UI-Part nehmen,
und, ah, hab ich gerade gefragt, was es macht,
lasst uns doch den UI-Part nehmen,
und das UWP daraus entfernen.
Und das hat Microsoft dann gemacht,
und da kam dann WinUI bei raus, so.
Und WinUI ist seit ein paar Jahren der Versuch von Microsoft,
endlich mal wieder ein gescheites UI-Framework für komplette Anwendungen für Windows herzustellen.
Das Problem war nur, dass WinUI in den ersten zwei Versionen noch sehr UWP-fokussiert war,
und es dementsprechend,
sie haben es nicht geschafft, das richtig von UWP zu lösen,
und dementsprechend wollte das am Anfang auch keiner haben.
Und dann haben sie ewig gebraucht.
Ich glaube, es kam erst vor zwei Jahren oder so,
oder vor einem Jahr oder so was,
kam erst WinUI 3 raus.
Und mit WinUI 3 ist es zum ersten Mal seit zehn Jahren vielleicht,
oder länger, sagen wir mal seit zehn Jahren,
es ist zum ersten Mal seit zehn Jahren möglich,
wieder komplette,
vollständige Windows-Anwendungen zu erstellen,
ohne Sandbox und ohne Geschiss,
und ohne Codesigning-Zertifikat und alle möglichen Gedöns.
Also ich glaube, man kann mittlerweile,
ich bin mir da gar nicht so sicher,
weil das haben sie auch wieder verschoben,
man kann mittlerweile ganz normale,
unpackaged Win32,
oder sollte man besser sagen Win64,
Anwendungen erstellen mit UI,
unter Windows,
ohne Sandbox,
ohne Zertifikate,
ohne Geschiss,
also das,
was die meisten Leute eben für Windows machen wollen.
So, also nachdem es über zehn Jahre
kein gescheites UI-Framework für Windows gab,
daher kommt das.
Deswegen hat sich unter anderem,
da bin ich mir zumindest relativ sicher,
Elektron soweit durchgesetzt,
und deswegen ist UI-Entwicklung unter Windows so unglaublich pain's champ.
Du kannst natürlich Cross-Plattform-Frameworks benutzen,
sowas wie Elektron,
du kannst vielleicht Qt benutzen,
aber es wäre halt cool,
wenn man eine Windows-Anwendung für Windows machen will,
wenn man dann kein Cross-Plattform-Framework benutzen muss,
sondern irgendwas benutzen könnte,
was eben richtig gut funktioniert,
halt nur Windows-only,
aber halt gescheit,
und dafür halt komplett alles,
was Windows so kann.
Das gab es ja lange Zeit nicht,
und deswegen ist Windows-UI-Anwendungen
programmieren einfach so shit,
und ist es immer noch,
weil Microsoft es über zehn Jahre nicht hinbekommen hat,
und versucht hat eine Technologie zu pushen,
die keiner haben wollte.
Ja,
aber der beste,
jetzt kommen wir mal zur eigentlichen Frage,
der beste Weg,
Windows-Anwendungen zu erstellen,
ist dadurch,
durch dieses ganze jahrzehntelange Geschäft,
überleg dir halt,
was du machen willst.
Willst du hauptsächlich eigene Inhalte rendern,
nimm Windows Forms,
ansonsten,
wenn du es einfach haben willst,
nimm trotzdem Windows Forms,
und gleiß da halt vielleicht ein bisschen was drüber,
dass es moderner aussieht,
oder schau dir WinUI 3 an,
dann hast du das Neueste von Microsoft,
was der Weg,
der gedachte Weg ist,
von Microsoft Windows Anwendungen zu entwickeln.
Und in welcher Sprache du das dann schreibst,
ist eigentlich egal.
Ich persönlich würde dir wahrscheinlich empfehlen,
das auf .NET Basis in C Sharp zu machen,
weil C Sharp eine deutlich angenehmere,
und schönere,
und einfach angenehmere,
bessere Sprache ist als C++,
und das .NET Framework auch die deutlich bessere Standard Library ist,
als die Standard Lib in C++,
und es auch einfach viel weniger Gehirnzerbrechen,
und angenehmer ist,
und insgesamt einfach besser ist,
als C++.
Und du bekommst mit Visual Studio auch eine gescheite Windows-kostenlose IDE,
die nur unter Windows funktioniert,
ohne dass du dir Rider kaufen musst.
Also ich würde sagen,
mach das auf .NET Basis,
und guck dir mal WinUI 3 an,
und dann kannst du eine halbwegs moderne Anwendung erstellen.
So.
Ja, wie gesagt,
das macht ja in manchen Fällen auch Sinn.
Zum Beispiel bei sowas.
Moin.
An's Trinken erinnern.
Pog.
Moment.
C++ ist nur für High-IQ-Leute.
Okay, das lasse ich mir insofern sogar gefallen.
Ja, das stimmt.
Alle anderen sind hoffnungslos am Verzweifeln.
Aber du musst trotzdem ein bisschen so selbstquälermäßig veranlagt sein,
dass du C++ benutzt,
sofern es keine andere Möglichkeit,
also wenn es andere Möglichkeiten gibt.
Wenn es keine andere Möglichkeiten gibt als C++,
ja gut, da bleibt aber nichts anderes übrig.
Also wenn man beispielsweise irgendeinen ESP32 hat,
oder irgendeinen ESP32 programmieren will,
und Arduino, also mit dem Arduino-Kern dafür,
dann bleibt ja nichts anderes übrig als C++.
Ja, WPF ist auch unglaublich komplex und kompliziert.
Also das liegt aber auch mit daran,
weil Microsoft halt ewig nichts richtig dran gemacht hat.
Also man müsste es gar nicht so ultra-kompliziert machen.
Das war halt eines der...
Man muss sagen, WPF war damals wirklich weit vorne von den Funktionen.
Die haben beispielsweise als einer der Ersten das übernommen,
dass du dein UI in einer Markup-Language machen kannst.
Du kannst deine einzelnen Komponenten themen,
wobei das nicht Themes heißt bei WPF,
das heißt Shape...
Oh, wie heißt das? Styles?
Heißt das glaube ich bei WPF.
Du hast so zwei verschiedene Sachen bei WPF.
Du hast Styles und du hast...
Layouts?
Templates! Genau, Templates.
Das meine ich, ja.
Ja, das ist schon ziemlich kompliziert.
Und...
Man hat ja auch Jahre...
Jahrzehnte quasi jetzt daraus lernen können.
Es gibt ja schon fast 20 Jahre oder so.
Ich glaube WPF kam 2006 oder so raus.
Oder 15 Jahre.
Und...
Vieles davon braucht man da standardmäßig gar nicht.
Man hätte das durchaus besser machen können.
Also WPF ist unglaublich kompliziert.
Und die waren halt damals einer der Ersten,
die vieles neu gemacht haben
und auch mit ihrem Two-Way-Data-Binding und sowas,
was es so in der Form bei den meisten UI-Frameworks gar nicht gegeben hat.
Aber man hat jetzt einiges gelernt mittlerweile daraus.
Was man ja auch daran sieht ist,
guck mal Leute, wir haben gestern...
Wir haben gestern
das Weltkit programmiert
und ein bisschen Browser-UI gemacht.
Man muss sagen, das ist vom Ansatz her
gar nicht mal so viel
Unterschied...
Von den Sprachen, die man benutzt, schon.
Aber von der Design-Idee
ist das gar nicht mal so viel
anders als WPF.
Aber von der Handhabung her
viel angenehmer.
Für heute war es geplant.
Das Gleiche.
Oh, ich habe den falschen Titel genommen
für den Stream, fällt mir gerade auf.
Ich habe WhitePepoHappy als Stream genommen.
Das ist ja falsch.
Wir haben Aufwachen-Stream.
Was ist denn da los?
Chat, warum sagt das keiner?
Chatgis, was ist hier los?
Alle noch Sleepge?
Aufwachen-Stream ist ja eigentlich das Richtige.
Excellent.
Jetzt sind wir auf Aufwachen-Stream.
Ja, das ist auch so ein Ding bei Microsoft.
Ich glaube, das ist bei Microsoft
immer noch so ein bisschen
problematisch.
Die haben halt ganz viele unterschiedliche
interne Teams, die voneinander nicht viel
wissen wollen. Zumindest hört man das immer wieder.
Moin, Mario.
Und dazu kommt, dass Microsoft
dazu neigt, ihre eigenen Sachen
anzupreisen, allerdings
nicht so richtig zu verwenden.
Ich meine, ihr könnt die UWP-Anwendungen,
die großen UWP-Anwendungen von Microsoft
in den, fragt mich nicht,
in fast zehn Jahren, wo sie versucht haben,
diese Technologie zu pushen,
ihr könnt die an einer Hand abzählen oder
wahrscheinlich sogar an zwei Fingern oder so.
Da gibt's keine.
Ich weiß nicht, was es für große UWP-Anwendungen
von Microsoft gibt. Mir fällt keine ein.
Office ist auch keine
richtige UWP-Anwendung.
Es gibt, glaube ich, keine.
Visual Studio ist keine.
Ich glaube, mittlerweile ist
Visual Studio, glaube ich, teilweise
WinUI. Da bin ich mir aber auch nicht sicher.
Also, Microsoft benutzt selbst ihren Kram.
So, und mal als Beispiel.
Als Beispiel, was Microsoft...
Nee, nee, im Store
kannst du mittlerweile sogar Windows-Forms-Sachen
veröffentlichen. Das haben sie ja mittlerweile geöffnet.
Deswegen kannst du ja auch VLC und sowas über den Store mittlerweile installieren.
So, und woran man sieht, dass
die Microsoft-Ideen oftmals halt
nicht funktionieren, bei ihren eigenen Sachen schon,
hätte Microsoft... Der Store ist in UWP.
Ja, das stimmt. Der Store selbst,
das kann sein. Die Settings,
ja, das kann auch sein.
Was wollte ich jetzt sagen?
Also, so ein Beispiel für, guck mal.
Der Installer für
Visual Studio, Visual Studio Code
und solche Geschichten. Okay, nenn mal Visual Studio.
Der Installer für Visual Studio
war jahrelang, und glaube ich, ist es immer noch,
eine Browser-Anwendung.
Irgendwelche
Dinger von Microsoft sucht man da vergebens.
Wo man sich halt denkt, okay, wenn ihr merkt,
dass halt euer Kram viel zu
restriktiv ist, selbst für eure eigenen Anwendungen,
dann könnte man auf die Idee
kommen, dass vielleicht auch niemand anderes Anwendungen
dafür bauen will.
Und die haben dann einen Web-Installer
für Visual Studio gebaut und sowas. Wo man sich dann denkt,
okay, jetzt hat es schon einen Grund, dass die
Leute keinen Bock hatten, UWP-Anwendungen
zu bauen. Weil du dann halt
dank der Sendbox nichts machen kannst, gescheit.
Und das hätte
Microsoft eigentlich viel früher kapieren müssen, ja.
Und die benutzen oftmals ihre eigenen Sachen nicht.
Was kein Aushängeschild
ist. Ich meine, man muss sich mal angucken,
so die großen Dinger, die bekannt
geworden sind, so React zum Beispiel,
ja, die sind ja alle
nicht nur
bekannt geworden, weil sie
eben ein Problem gut lösen.
Ja, genau.
Ja, und WinUI 3 hatte
Viagra, Take Viagra Die Hard
WinUI 3
hatte ja auch lange Zeit das Problem,
dass sie diese Package, dieses Packaging von
UWP mit
übernommen haben, dass selbst wenn du quasi eine
unsendboxte Application
bauen wolltest, du trotzdem ein
Code-Signing-Zertifikat gebraucht hast. Ich glaube,
das ist jetzt seit 1, 1,5, 2
Jahren höchstens nicht mehr
der Fall, dass du unpackaged Apps bauen kannst
für, mit WinUI 3.
Glaube ich. Ich habe mir das schon eine ganze Weile nicht
mehr angeguckt. Ja, Microsoft
benutzt den eigenen Scheiß nicht. Ja, was ich sagen wollte ist,
guckt euch mal React an. React
ist nicht nur so
erfolgreich geworden, weil sie relativ
früh am Start waren und ein Problem
gut und, sagen wir mal so, halbwegs gut
benutzbar gelöst haben. Nein,
React ist auch mitbekannt geworden,
weil das einen riesen Anwendungsfall
hatte, wo die Leute gesehen
haben, ey, wenn das bei Facebook
funktioniert,
dann wird das auch im großen Stil
funktionieren.
Also sprich, es ist immer sinnvoll,
wenn du halt nicht nur die Technologie
hast, sondern auch gleichzeitig so ein
Aushängeschild dafür hast,
dass du sagen kannst, ey, guck mal,
das geht. Ich bin auch überzeugt
davon, dass sich Git als Versionsverwaltungssystem
unter anderem nicht nur, weil es
gut ist, so schnell durchgesetzt hat,
sondern weil man gesehen hat, ey, wenn
das für den Linux Kernel funktioniert,
dann wird das für alles andere auch
irgendwie funktionieren.
Und Git hat ganz viel Zeug drin,
was eben,
man kann nicht sagen, spezifisch für die
Linux Kernel Entwicklung ist, aber
schon sehr daran angelehnt ist.
Zum Beispiel hast du in Git
die Möglichkeit, Patches
auszutauschen und die dann per E-Mail zu schicken
und sowas. Das macht keiner, der noch
halbwegs bei Verstand ist, außer
dass es der Linux Kernel zum damaligen Zeitpunkt
gemacht hat. Die waren ja damals
nicht auf GitHub oder sowas,
die hatten eine Mailing-Liste,
haben in ihrem Git
Sachen committet und haben dann ein Patch generiert
und in dem Patch haben sie eine E-Mail drangehängt
und dann in die E-Mail, in die
Mailing-Liste gepostet. Und der Patch
wurde dann aus der Mailing-Liste runtergeladen und dann
applied. So, das sind so
ganz komische Dinger, die niemand in Git eigentlich
verwendet, die aber da drin sind, weil das
halt damals für die Kernel-Entwicklung sinnvoll gewesen ist.
Aber man hat gesehen,
ey, guck mal, du kannst
damit alles verwalten.
Weil wenn du den Linux Kernel damit verwalten
kannst, das gut funktioniert, dann kannst du
schlägergreifend alles andere damit auch verwalten.
Also sprich, ich denke, es ist wirklich sinnvoll,
wenn nicht nur neue
Technologie rausgehauen wird, sondern gleichermaßen
die gebackt
ist dadurch, oder halt
belegt wird dadurch, dass
die was taugt, indem es eben gescheite
Anwendungen gibt. Und deswegen denke ich, hat sich Git
relativ schnell durchgesetzt, weil du siehst,
mit dem Linux Kernel, da geht's für alles. Hat sich React
so gut durchgesetzt, weil es eben ein sehr spezifisches
Problem gut gelöst hat.
Und quasi so komplette Ära
von neuen Anwendungen mit eingeläutet hat.
Und dass man gesehen hat, ey, guck mal, das ist von Facebook,
die benutzen das auch, das funktioniert ja.
Ja, und das ist das, was Microsoft
lange nicht richtig bei ihren Technologien
hinbekommen hat.
Dass man sieht, ah, guck mal, die benutzen den Kram
ja selbst. Ich meine, was gibt es für ein besseres
Aushängeschild für den Windows UI
Framework, wenn du sagen kannst,
Office benutzt das, Visual Studio
benutzt das. Dann
weißt du, ey, das sind große, komplexe
Anwendungen,
die Millionen Leute benutzen.
Das scheint was zu taugen,
wenn du das damit machen kannst.
Da muss ich mir keine Gedanken machen, das zu benutzen.
Das wird prinzipiell funktionieren.
Und das hat halt Microsoft lange nicht
hingekriegt. Die haben halt den eigenen Scheiß nicht benutzt.
Und dementsprechend waren die Leute nicht nur skeptisch, weil
die Technologie scheiße war, wie bei
UWP, sondern
sie waren auch bestätigt dadurch, dass Microsoft
den eigenen Krempel nicht benutzt hat.
Und dementsprechend haben sie gesagt, ja gut, also guck mal,
ich finde das scheiße,
Microsoft selbst scheint es ja auch scheiße zu finden,
deswegen benutzen sie es nicht.
Und es hat keine, wie müssen wir das schon sagen,
keine richtige Adoption erfahren.
Und viel zu lange.
Ja, das ist WinUI, was du hier verlinkt hast, genau.
Mittlerweile ist es tatsächlich
sehr sinnig, ja, gebe ich dir recht.
Gerade wenn du dir Anwendungen wie Discord
anguckst,
wenn ihr euch mal überlegt,
ähm,
was wollte ich jetzt gerade sagen?
Ich habe gerade auf den zweiten Monitor geguckt.
Genau. Ja, mittlerweile ist es
tatsächlich auch erforderlich,
denn,
wenn man sich mal Anwendungen wie Discord anguckt,
Discord ist ja im Prinzip
eine Web-Anwendung
in ein eigenes Fenster gepackt und als Desktop-Anwendung
getarnt.
Es sieht jetzt mal auf den ersten Blick gar nicht
so unterschiedlich aus zur Discord-Web-Version.
Also Discord-Web und
Discord-Desktop ist mehr oder weniger die gleiche Anwendung,
allerdings nicht komplett.
Die Desktop-Anwendung von Discord,
hat ein paar zusätzliche
Tricks, ja. Zum Beispiel
haben die eigene Node-Module,
die sie laden,
Native Node-Module, die sie laden
dafür und so was. Die haben ja schon ein bisschen getrickst.
Aber der riesen Vorteil,
den man hat, wenn man einen Browser
als Grundlage
für seine Anwendung nimmt, gerade wenn man
sowas wie Discord machen will, ist,
du kannst dich auf alles verlassen, was
in dem Browser drin ist, dass es auf allen Plattformen
funktioniert. Und gerade für Discord ist das wichtig.
Weil überlegt mal, Discord,
ist eine, nenn es mal,
Audio-Video-Multimedia-Anwendung.
Du kannst chatten,
das ist noch nicht so das Ding.
Du kannst Voice-Collen, du kannst
Desktop-Sharen, du kannst
wahrscheinlich sogar Video-Collen mittlerweile,
bestimmt macht bloß keiner.
Also du kannst Videos übertragen, Audio
übertragen, so.
Und jetzt überlegt euch mal, Discord läuft
auf Android, wahrscheinlich
gab es mal eine Windows-Phone-Anwendung
von Discord, keine Schlimme, benutzt
eh keiner. Es gibt Android,
es gibt iOS-Discord,
es gibt Windows,
Linux, Mac-Discord.
Wahrscheinlich funktioniert
der Mist sogar auf Android-TV und sonstigen
Geschichten. Und jetzt überlegt euch
mal, die hätten für alle
diese Plattformen
ihre Multimedia-Sachen selbst
programmieren müssen. Oder es sei es
nur, sich irgendein Zwischen-Framework suchen,
was das kann und das dann ansprechen.
Die wären heute noch nicht bei der ersten
Version zum Releasen von ihrer Anwendung.
Die müssten allen Ernstes, die müssten
sich selbst machen.
Und das ist das Schrecklichste, was
ich mir vorstellen könnte,
Audio-Video-Sachen zu entwickeln.
Da musst du dich mit auseinandersetzen,
so nach dem Motto, hat der Wayland,
hat der X, hat der Puls-Audio,
hat der was, also ganz ehrlich,
das würde ich im Leben nicht machen.
Da ist es wahrscheinlich unter Windows
noch deutlich einfacher.
Dann musst du das gucken, okay, wie mache ich
das unter Android, wie mache ich das unter iOS.
Die würden durchdrehen, die hätten noch nicht
raus, hätten sie diesen ganzen Kram
selbst machen müssen und hätten sich nicht
auf das verlassen können, was der Browser
schon bietet. Also aus dem Gesichtspunkt
für so Sachen wie Discord ist es extrem sinnvoll,
einen Browser als Grundlage zu nehmen.
Pipewire, was du nicht alles hast.
Das wäre kompletter
Abfuck gewesen.
Ich glaube, ALSA ist noch in einer Stufe
unten drunter, Fips. Ich glaube, das ist
irgendwas, frag mich.
Linux, sowas ist da echt
undurchsichtig.
Also es macht schon Sinn, ja.
Das stimmt, WinUI hat keinen
Linux Support, was aber auch der Name
schon irgendwie so
erahnen lässt.
Welche VM benutzt du nochmal?
Virtualisierungstechnologie meinst du?
Das ist, ich benutze
VMware Workstation. Ich habe das mal gekauft
bei so einem billigen
Keyseller für irgendwie 7,20 Euro
oder so den Key.
Auf VMware Workstation Professional.
Das machen wir jetzt nicht.
Es gibt ein
Projekt auf GitHub, das nennst
sich so, glaube ich.
Ne.
Ich habe vergessen, wie es
heißt.
Wie heißt denn das?
BFlat.
BFlat, genau.
Die versuchen quasi
einen alternativen C-Sharp Compiler
irgendwie zu
bauen, dass du native
Anwendungen bauen kannst mit C-Sharp, die besonders
klein sind.
Und sie sind Go-inspired.
Habe ich noch nie ausprobiert.
Also ich weiß nicht, was da und wie gut
das alles funktioniert.
Moin, kennst du Git Air und hast du eine Meinung
dazu? Ja, ich habe das selbst bei mir laufen
seit ein paar Jahren schon lokal.
Also für einfache Sachen,
wenn du einfach bei dir ein lokales
äh gut, ich meine für ein lokales Git-Repro
brauchst du nicht unbedingt ein Web-Frontend,
aber ist doch ganz praktisch. Wenn du einfach
lokal zum schnellen,
lokale Repos brauchst, um schnell mal
was zu pushen, dann ist das
eine super Geschichte. Ich benutze das zum Beispiel
so, wenn ich was für einen Stream vorbereite.
Dann mache ich das ja oft, weil es nicht sonderlich
hübsch und ich habe auch nie vor, das irgendwie zu
veröffentlichen, ja. Meinetwegen
zum Beispiel für den Stream gestern.
Ich habe mir ein paar kleine Sachen im Vorfeld schon angeguckt,
da ich nicht komplett planlos bin. Habe das
wild zusammengewurschtelt und habe es dann gepusht
in mein
lokales Repo hier, was auch auf Git Air
Basis läuft und
habe das dann nebenbei auf dem zweiten Bildschirm offen,
da ich so ein paar Sachen mir abgucken kann.
Ja, benutze ich lang. Mittlerweile
kannst du damit ja auch ein bisschen
advancedere Sachen machen. Ich habe gelesen, die
haben seit der letzten oder
seit den letzten Versionen, noch nicht so
lang her, haben die sogar die Möglichkeit
GitHub Runner, also
zumindest die GitHub,
die GitHub Actions
Syntax
Runner, die die GitHub Actions
Syntax unterstützen,
auch einzubinden.
Was ich ganz cool finde,
weil so ein bisschen CI hat dem Ganzen
tatsächlich noch gefehlt. Ich denke,
das ist jetzt ein ziemlich gutes Komplettpaket,
was ich auch easy
hosten lässt.
Wie wäre es mal ein Softwareprojekt für einen Stream, in dem
du nach deinem Anspruch, das kann ich nicht,
weil ich bin kein hauptberuflicher Softwareentwickler.
Ich habe da
keinen Anspruch in dem Sinn.
Also ich kann euch, achso, ach das hier.
Ja gut, das stimmt
tatsächlich, das könnte man
machen.
Ich habe mich ja jahrelang um
unsere Softwareverwaltung und Pull Requests
und Server
Automatisierung und unsere
Software Repos gekümmert auf der
im alten Job.
Und habe auch Leute genervt, wenn man
beispielsweise ihre Changelog Sachen nicht verstanden hat
und sowas. Die Sache ist bloß die,
ihr kennt mich, nur weil
ich das hier mal, nur weil ich das haben möchte,
heißt noch lange nicht, dass ich
das selbst gerne mache.
Ich meine, ich habe es natürlich, wenn ich denn,
okay, ich muss sagen, ich war ja da teilweise ein bisschen
ein bisschen Drecksack
so beim alten Job,
ja, also es dürfte ja außer mir
und meinem Kollege, dürfte ja keiner beispielsweise
direkt pushen nach Master
und so. Und ich habe
zu allen immer gesagt, also nicht
zu allen, wenn es wirklich kleine Sachen waren,
wie irgendwelche Schreibfehler
oder sowas, da habe ich auch manchmal gesagt, ey, weißt du was,
komm mal kurz rüber, sag mir
wie es richtig ist, wir committen das und pushen das direkt,
du brauchst kein extra Branch und Pull Requests,
man kann es auf die Schnelle machen, das war so nach dem
Motto, wenn einer, keine Ahnung,
wenn einer Amster geschrieben hat
anstatt Master und sowas, dann
dann ist das okay.
Und dann haben wir das gemacht.
Aber normalerweise habe ich halt immer,
habe ich dann immer gesagt, hier, guck mal,
Branch nicht richtig benannt, weiß ich nicht von wem das kommt,
der Commit Message ist nicht richtig,
wenn ich manchmal mich vertippt habe
oder wenn ich
vielleicht zu früh was committet habe
und aus Versehen, ich habe immer direkt den Master
Ich habe die Dinger immer direkt den Master gepusht.
Aber das liegt ja auch
daran, weil wir haben es ja hier gelernt
im Stream, Leute, wir programmieren
ja ohne Fehler, das heißt, man kann das auch direkt
den Master pushen.
Also insofern war das eigentlich vollkommen
gerechtfertigt.
Hast du mitbekommen, dass Reddit seine Preise,
ja das habe ich mitbekommen, schon lange mitbekommen
und mich damals schon gefragt, also Twitter,
Twitter hat das ja auch gemacht, aber
Reddit habe ich auch mitbekommen,
ich habe mich damals schon gefragt, wie das Apps wie
Apollo und so machen wollen und jetzt kam halt raus,
ja ne, die wird es dann einfach nicht mehr geben.
Was ich scheiße finde, richtig
scheiße finde, das kann man auch nicht anders nennen,
was ich mega beschissen finde, weil
die offizielle Reddit App,
die ist besser geworden die letzten Jahre,
aber ich finde die Handhabung immer
noch...
Apollo ist auch nicht der Weisheitsletzter
Schluss irgendwie, ja.
Also die,
besser integriert ist die offizielle Reddit
App schon, aber allein schon,
allein schon, dass es keinen gescheiten Vor- und
Zurück-Button gibt und sowas, das ist so
ganz weird, die offizielle Reddit App, die ist
besser als noch vor ein paar Jahren, vor ein paar Jahren war
die komplett unusable,
keine Ahnung, was die sich dabei gedacht haben.
Ich benutze auch mittlerweile tatsächlich hauptsächlich
die offizielle Reddit App
und reg mich jedes Mal auf, wenn irgendwas mal
wieder nicht so ist, wie ich mir das gerne
gewünscht hätte, aber
ich kann jeden verstehen, der Apollo verwendet
und wenn du jetzt
noch nicht mal mehr auf die API gescheit zugreifen
kannst, dann ist halt RIP alle Third-Party
Apps.
Ja, das finde ich kacke.
Es
wollen ja ab morgen einige Subreddits
streiken, habe ich gelesen auf Reddit,
so nach dem Motto, das Subreddit wird gescheit,
für irgendwie ein paar
Tage, Wochen, was auch immer.
Ich denke nicht, dass das
irgendwie Erfolg hat.
Diese Versuche gab es ja schon an
anderen Stellen, beispielsweise
gab es ja,
es gab ja auch,
ich glaube,
die letzte Variante,
was war
das letzte, wo die Leute so Blackout-Sachen
probiert haben? War das nicht zu Hogwarts
Legacy? So nach dem Motto,
wir blockieren, wir streamen einen Tag
nicht oder sowas.
Keine Ahnung, das hat meistens nichts
gebracht. Weil man muss ehrlich
sagen, der Aufschrei ist
groß und der Aufschrei ist berechtigt,
aber
wahrscheinlich tangiert es 95%
der Reddit-User nicht.
Und die werden sich einfach
nur wundern, also am Endeffekt schaden sich die
Subreddits wahrscheinlich sogar selbst.
Weil die Leute
eventuell woanders hingehen und dann
da hängen bleiben.
Das ist in Reddit nicht so schlimm, du kannst ja mehrere Sachen
abonnieren und dir angucken.
Also, ja dann gibt's
bald ein neues, das wird nicht, also
ich glaube nicht, dass das
irgendeinen Effekt erzielt.
Ich fände es gut, ja,
weil ich es bescheuert finde, dass Third-Party-Apps
ausgesperrt werden und die Reddit-App
halt in vielen Belangen immer noch sackt.
Aber ich glaube nicht, dass es irgendwas
ändern wird.
Gut,
Chatge, so haben wir jetzt, also
habe ich eigentlich meine Trending-Repos schon durchgeguckt.
Nehmen wir mal ganz schnell AI, AI, AI, AI,
AI, AI, AI, AI, AI, AI.
Das ist das schlimmste AI-Programm,
Leute, kennt das jemand?
Nein, das hat mit AI überhaupt nichts zu tun.
Das ist eher was für Weep-Musik.
Was ist
God Potato?
Hat keine Beschreibung, hat man das nicht letzte Woche schon
gesehen? Hat keine Beschreibung.
Ah,
Security-Kram.
Nein, Leute,
Ozu ist kein AI,
kein AI-Programm.
Das ist irgend so ein Rhythmus-Game,
wo die meisten irgendwelche Anime-Musik
drinnen spielen und da
ihr, das ist quasi
Aim-Training für
Anime-Musik
Fans.
Ozu.
So, was empfiehlt uns YouTube denn heute?
Ich habe schon ein paar Sachen aufgemacht, falls uns YouTube
nichts Gescheites empfiehlt.
Äh, nope.
Debian 12 Tutorial für Einsteiger?
Nee, das gucken wir jetzt nicht.
Keine 22 Minuten,
außer dem Chat, wir sind ja hier keine Einsteiger.
Wir sind ja alle
way too high IQ für Einsteiger.
Nee,
was soll an einem
Debian-Einsteiger mäßig anders sein als
jedem x-beliebigen anderen Linux?
Okay, ja, die Installation und sowas, aber
danach macht es auch keinen großen Unterschied.
Ach, mit vierfacher Beschleunigung
angucken. Kann YouTube überhaupt vierfach beschleunigen?
Die Debian 12
Isus. Debian 12 kam doch
gestern raus, dachte ich.
Okay, ich kriege wieder irgendwelche Grills empfohlen.
Microsoft is decrypting
your files in the cloud. Ja, und wohlgemerkt
nicht nur Microsoft.
Achso, nee, nee, doch, in dem Fall wahrscheinlich
nur Microsoft.
Hier geht es wahrscheinlich um die Geschichte, dass Microsoft
ZIP-Passwörter extrahiert.
Also, Microsoft ist da wirklich clever.
Also, wenn ihr
ein ZIP verschickt,
ein verschlüsseltes ZIP über Microsoft Services,
dann machen die folgendes.
Die extrahieren aus den
Chatnachrichten und aus den E-Mails
das Passwort, falls es da drin steht,
und
da bin ich mir jetzt aber nicht sicher, ob das stimmt,
ich glaube, die probieren sogar
eine Liste aus Default-Kennwörtern
durch, um das zu entschlüsseln.
Und das natürlich alles
unter der Flagge
von Sicherheit.
Weil Virenscanner und
tja, was
wird denn da sonst noch immer gerne als Beispiel
genannt? Ja gut, der Klassiker
schlechthin, wenn es um Security-Themen
geht, ist natürlich
Kinderpornos finden und
Terroristen finden
und Morde aufklären und sowas in der
Richtung. Das wird ja immer in den Ring geworfen.
Jedes Mal, ist euch das eigentlich mal
aufgefallen? Jedes Mal, wenn es um
irgendwelche
mehr oder wenig stark ausgeprägten
Einschneidungen in der Privatsphäre geht, kommt
als erstes Terroristen,
Kinderpornos, Morde.
Das kannst du, das kannst du
theoretisch, sobald so ein Thema aufkommt,
kannst du eigentlich schon so eine Stoppuhr stellen
oder irgendwie so einen Countdown machen,
wann der erste mit einem dieser drei Sachen
um die Ecken kommt, ja.
So, nix spannendes dabei.
Also die Seite ist an sich schon
sehr sus, ja.
Da weißt du halt nie,
ob der Key am Ende funktioniert oder nicht.
Ich mein, ich hab meinen Key damals
auch billig bei so einer Keyshop-Seite gekauft.
Chat,
wir posten, aber ich sag euch gleich,
wir posten hier
im Chat keine Links zu irgendwelchen
Serial Keys, weil
das ist wahrscheinlich nicht erlaubt.
Aber ich bin mir,
ich bin zuversichtlich,
dass
ihr in der Lage seid, euch
selbst zu helfen und im Zweifelsfall
die Software einfach auch kauft, wenn euch
nix einfällt. Oder wenn ihr sie wirklich
viel benutzt.
Oh, Chainlore, warum?
Modgis,
oh man.
Ich sag's noch, ja.
Aber der kann's einfach nicht lassen.
Ich weiß,
ich weiß nicht.
Ich weiß wohl schon Grund haben, warum er irgendwie schon
den siebten Discord-Account braucht,
weil er überall immer gebannt ist.
Das war jetzt aber echt mit Ansage.
Das hätte man sich sparen können.
So.
In fünf Minuten ist er eh wieder am Start.
Okay, also lasst mal kurz schauen.
Was haben wir denn hier Schönes?
Warum du in Deckung doch noch, was?
Warum du in Deckung doch noch
down gehst. Ah, ja.
Das wollte ich gucken, weil ich vermute,
dass hier ein bisschen was zu
Client-Side-Hit-Detection und sowas versucht wird,
für Noobs zu verpacken.
Da will ich ein bisschen meckern,
falls die Erklärungen nicht korrekt sind.
So, was haben wir als nächstes
noch? Advanced Windows Feature
you should know.
Das sind immer Cheebait-Videos.
Das sind immer Cheebait-Videos.
Aber komm, neun Minuten,
das können wir uns schnell gehen.
Windows has a bunch of
tools and features built in.
Some of them that are pretty advanced,
that hopefully you never have to use,
or only every once in a while.
But I think it's still good to at least know about them.
Wisst ihr, was auch richtig advanced ist
in Windows? Also, falls ihr euch
mal gefragt habt, wie man Custom
Icons vergeben kann für Ordner
und sowas. Das geht seit Windows 95
oder wahrscheinlich seit Windows 3.11
oder so. Und das Problem ist,
dass sich der Dialog seit Windows 95
nicht geändert hat. Guckt euch das mal an.
Das wissen wenige. Und das ist super advanced.
Passt mal auf, krasse Windows-Hacks
zeige ich euch jetzt.
Ja, guck mal. Wir gehen jetzt hier drauf,
Rechtsklick, natürlich
selbstverständlich Show More Options,
Properties,
Customize,
Change Icon
und jetzt kommt hier halt straight
aus Windows 95
der Dialog und die Icons.
Und die wurden auch, ohne Scheiß,
die wurden 20 Jahre, oder
länger, die wurden auch 30
Jahre nicht mehr updated, hier die Icons.
Ja, vielleicht ein paar.
Aber da sind immer noch die richtigen
Oldschool-Icons drin.
Wo ich mich ernsthaft frage,
warum ist das eigentlich so eine lächerlich kleine
und zum größten Teil absolut
müllige Sammlung aus Icons.
Ich mein, warum
um alles in der Welt sollte ich
ein Icon so machen?
Ja, hier, Pretty Advanced
ist Windows. Moment, geht das eigentlich auch hier mit
Properties? Ja.
Nee. Pretty Advanced ist Feature,
würde ich sagen. Guck mal, und es gibt
hier einen Ordner, es gibt hier einen Ordner,
es gibt hier einen Ordner und hier einen Ordner-Symbol.
Da blickt doch keiner mal durch.
Noch mehr Ordner.
Noch ein Ordner.
Noch ein Ordner.
Noch ein Ordner.
Noch ein Ordner. Zwei Ordner.
Ja, man weiß es nicht.
Ja, Windows-Logik.
Ja, Windows-Logik.
Ja, Windows-Logik.
So, okay, jetzt lassen wir uns das mal,
jetzt gucken wir uns das mal an.
Die advanced Features.
Jetzt bin ich mal gespannt,
wie advanced das wird.
Let's go!
Sieht auch nicht umsonst aus
für Windows XP, kommt auch
straight aus Windows XP.
Es ist eigentlich ziemlich einfach. Du klickst einfach auf den Drive und klickst auf den Knopfdruck und klickst auf den Knopfdruck und klickst auf den Knopfdruck und klickst auf den Knopfdruck.
Du klickst auf den Drive und klickst auf den Knopfdruck und klickst auf den Knopfdruck.
Also das weiß ja sogar ich und ich bin kein Windows-Admin und ich werde auch nie Windows-Admin, ich will auch nie Windows-Admin werden.
Bei mir auf der Arbeit haben sie letztens schon erzählt, wir sollen uns jetzt um Microsoft-SQL-Sachen unter Windows vielleicht kümmern.
Na, kümmert euch mal, ich kümmere mich da nicht drum.
Okay, ich meine natürlich würde ich einem helfen, wenn irgendwas wäre und ich wüsste dazu was, aber ich weiß dazu nichts und ehrlich gesagt, das ist auch ein Thema, wo ich mich ungern mit beschäftigen will.
Okay.
Okay, Event Viewer.
Ja, eines der hässlichsten Anwendungen ever, Leute.
Den kann ich jetzt nicht aufmachen, da leake ich bestimmt irgendwas.
Event Viewer, das ist also sowohl vom Layout her als auch von der Optik, eines der hässlichsten Anwendungen, die ich je gesehen habe.
Memory Diagnostics Tool.
Ja, das brauche ich nicht.
Da würde ich einfach mein, ach guck mal, die haben quasi MemTest auch jetzt eingebaut.
Würde ich einfach MemTest booten und gut, das ist okay.
Resource Monitor.
Okay, wenn man es braucht.
Reliability Monitor.
Reliability Monitor.
Who the fuck braucht denn das?
Okay, nice, Video durch, GG Eats.
Nice, siehste, so geht das.
Einfach in der Schnelle durchgeguckt.
Warum du, okay, da gucken wir, was haben wir sonst noch zu bieten?
Blizzard fällt, nee, Overwatch 2 fällt auseinander.
Oh ja, das stimmt.
Also generell fällt Overwatch 2, war schon nicht unerfolgreich, konnte einem Riesenhype nicht anknüpfen und ich weiß nicht, was Blizzard da wieder gemacht hat.
Ich meine.
Papa Jeff ist weg.
PvE wurde eingestampft.
Was haben wir hier zu bieten?
High School Student Makes React a Million Times Faster.
Okay, wir können uns eine Runde Fire Ship angucken.
Kam es vor 11 Minuten, geht nur 2 Minuten 46.
You're watching the Code Report.
It is June 10th, 2023 and you're watching the Code Report.
There's millions of great JavaScript.
Wirst du Diablo 4 anfassen?
Ich bin immer noch unschlüssig.
Gameworks in the world today, but the most popular choice is still React.
Even though we have faster alternatives, like Solid, Preact and Quick, that also use JSX, one of React's original innovations.
Das stimmt wohl.
Das habe ich auch gestern gesagt, als wir ein bisschen das Feld gebastelt haben.
React ist nach wie vor das mit Abstand verbreitetste Framework überhaupt.
Also für Frontend-Kleinzeitige Anwendungen und auch für Fullstack-Sachen mit Next.js und sowas.
Das ist sehr verbreitet.
... was the virtual DOM, but many modern frameworks have moved away from this approach.
Und hat gar keine.
... the creator of Svelte once called it Pure Overhead.
Despite this, React will likely still be used on websites hundreds of years after we're all dead.
But today I have some good news.
A recent high school graduate named Aiden Bai just improved React's performance by 70% with Million.js, which provides a hyper...
Okay, nur mal so, dass ich das jetzt verstehe.
Hat der jetzt React geforkt, um es schneller zu machen?
Oder ist das ein Plugin für React?
... optimize virtual DOM and change the original virtual DOM to the real leader...
Das ist ein Fork, oder?
... where it can't cause any problems.
... so was.
... so was.
... so was.
... so was.
... so was.
... so was.
... so was.
... so was.
... so was.
... so was.
... so was.
... so was.
... so was.
... so was.
... so was.
... so was.
But if you're a highly experienced React developer, you might be wondering, what is the virtual DOM?
I've never heard of it.
Well, to update things in the UI, React makes a lightweight copy of the DOM, where it can calculate updates faster,
and then update everything all at once.
It's kind of like finalizing all your changes on a blueprint...
Ich würde mal interessieren, wie er das jetzt gemacht hat.
... blueprint, before you go tearing out walls in a building.
But all this happens at runtime, and there's a lot of unnecessary work trying to figure out what changed.
Million.js takes a more surgical approach by introducing a compiler that can perform static analysis
to figure out exactly where the dynamic is.
... dynamic data is in advance.
It creates an edit map...
Hä? Wie funktioniert das denn?
... map to represent the state of the...
Okay, das ist richtig high IQ shit.
... the application, which can then determine what has changed with far less computation required.
This approach is inspired by other frameworks...
Okay, okay, ich rate jetzt einfach mal, wie das eventuell funktionieren könnte.
Der guckt sich an, wie die Elemente von der Seite aufgebaut sind,
dann analysiert er irgendwie, was interaktiv an der Seite ist,
und wie sich die Elemente ändern könnten,
und dafür, was weiß ich, und für diese, also für die Änderungen, die theoretisch möglich sind,
berechnet er schon mal im Vorfeld quasi die, die Diffs oder sowas in der Richtung.
Keine Ahnung, ob ich das jetzt richtig kapiert habe, aber sowas, sowas in der Richtung wahrscheinlich.
... wie Svelte und Solid, die auch auf einem Kompiler anbieten, um diese surgical DOM-Updates zu erreichen,
und Million wurde auch inspiriert von dem vorherigen Werk einer Bibliothek,
die Block-DOM genannt wurde.
Was auch cool an Million ist, ist, dass sie nur 4 KB ist und extrem einfach zu benutzen ist.
All you do is take an existing React-Component and wrap it inside this Block-Function
to create a higher-order-Component, which will block out the virtual DOM
and let Million magically take over.
Basically, after the component is mounted, it makes a reference to the underlying DOM-Element,
then does all the subsequent rendering and change detection on its own.
In addition, it has a built-in FOR-Component, which is used to render a list of blocks.
Pretty simple, but before you get too excited...
Ich will jetzt nicht sagen, dass ich es kapiert hätte.
The creator of this project admits that it's not a silver bullet.
When using blocks, you need to follow a specific set of rules,
and if you break those rules, it'll revert back to React's virtual DOM,
and you'll lose all your mains.
Overall, Million.js looks like an awesome project,
but most importantly, it gives me hope that Gen Z is not actually tech-illiterate
and might actually one day be able to fix React.
This has been The Code Report, thanks for watching, and I will see you in the next one.
Jetzt wissen wir Bescheid.
Weiteres Frontend-Framework.
Eigentlich kannst du täglich so ein Video machen.
Der Chainlord, ich bin auch nicht so ganz schlau draus geworden.
React ist jetzt viel schneller.
Blazingly fast.
Und das ohne written in Rust zu sein.
Gibt's auch nicht alle Tage.
Weil eigentlich ist ja Blaze...
Das haben ja die Rust-Leute tatsächlich für sich schon gepachtet.
Nur Rust ist blazingly fast.
Alles andere mag auch blazingly fast sein, muss es aber irgendwie anders nennen.
Es hat jemand ernsthaft ein 8-Stunden-Video gemacht,
um die ganzen Haftzahlen...
Half-Life-1-Erweiterungen zu synchronisieren.
Geil.
Die Leute haben teilweise echt zu viel Zeit.
Why we should stop using JavaScript?
Jojo.
Die Sache ist bloß die.
Es gibt halt nichts anderes.
Was willst du...
Ich mein, es ist ja schön und gut, wenn man sagt,
man soll kein JavaScript mehr verwenden,
aber es gibt halt keine Alternative zu JavaScript.
Also, was willst du machen?
Übrigens, ist das nicht der Jason-Erfinder?
Der, der, der gesagt hat, dass man Jason eigentlich...
J-J-J-J-Jazon aussprechen soll.
Ich glaub schon, dass der das ist.
Okay, es geht nur zwei Minuten.
Lasst uns mal kurz... Lasst uns mal auf die Schnelle gucken.
Warum, warum, warum wir kein JavaScript mehr benutzen sollen.
Twenty years ago, I was advocating for JavaScript.
My...
Story was that...
JavaScript is a much better language than anybody knows.
And...
Das... Ey...
Das hat sich ja im Endeffekt sogar bewahrheitet.
Ich mein, man musste viel an JavaScript reden,
das JavaScript, der dort angekommen ist,
äh...
wo es heute steht.
Aber...
Die haben bei JavaScript die letzten Jahre tatsächlich
genau das Gegenteil geschafft von C++.
C++ hat die Sprache immer komplizierter und schlechter gemacht.
Schlechter kann man nicht sagen, aber...
...
...ist es immer unlogischer, immer komplizierter und im Gesamtpaket dadurch schlechter.
Und JavaScript wurde die letzten Jahre über immer besser und sinnvoll erweitert.
...and that, if we use it properly, we can do amazing things about it and it can change the world.
Ja.
And in fact that happened.
But now my evangel is that we should stop using JavaScript.
Ja und was sollen wir stattdessen machen?
Alles in WebAssembly.
Das Problem an WebAssembly ist, du kannst halt keine Webseiten...
...mitmanipulieren, so richtig.
Das stimmt.
Jaaa, das stimmt.
Aber die Sache ist halt, wie willst du es sonst machen?
...the best language in the world for doing that kind of stuff.
But that's not good enough.
We should be moving on to the next generation of languages.
Ah, okay, er sagt, JavaScript sagt, aber wir sollten JavaScript durch ein neueres JavaScript ersetzen, was die Probleme nicht hat.
Ich meine, ist es nicht besser vom Ansatz her, tatsächlich weiterhin JavaScript zu verbessern?
Okay, man könnte jetzt natürlich sagen, du kannst viele Sachen in JavaScript nicht verbessern, weil sie eben schon so lange da sind, dass die...
...dass es gibt halt zu viele Seiten, die sich darauf verlassen, dass die Dinger sich...
...merkwürdig verhalten, weil die schon immer merkwürdig waren in JavaScript.
Aber ich meine, anstatt eine komplett neue Sprache zu bauen, wie wäre es denn beispielsweise mit irgendeinem Kompatibilitäts-Flag oder sowas, ja?
Ich meine, eine neue Sprache ist ja im Prinzip auch nichts anderes.
Nur mit dem Unterschied, dass du da wieder eine neue Sprache lernen musst und die ganzen...
...das ganze JavaScript Library Ökosystem weggeschmissen wird, wäre nicht das gleiche wie zwei Sprachen.
Ja.
Ja, nicht ganz.
Nicht ganz.
Neue Sprache hat halt alles neu.
Hast du neue Sprache, hast du neuen Compiler, hast du neues Format, hast du neue Libraries, die du brauchst.
Wenn du quasi eher so einen clean JavaScript bauen würdest, dann würden zumindest die großen Libraries nach und nach darauf umsteigen.
Man müsste es halt wirklich gut planen, ja?
Man müsste das in fließenden Übergang machen.
Man müsste dann auch erlauben, dass...
Teilweise einzuschalten und sowas.
Ähnlich wie Python 2 und 3.
Ja, das hat ja auch nicht wirklich gut funktioniert.
Ne, ich weiß nicht.
Vielleicht hat er auch einfach recht und man sollte wirklich was komplett Neues bauen.
Ich meine, es ist immerhin der Jason-Erfinder und auch jemand, der bei JavaScript mitbeteiligt war.
Ich weiß nicht, ob es der Java...
Ja, ne, hier steht doch Jason-Erfinder sogar dabei.
...neue Computer-Language über jede Generation.
Ich starte mit Fortran und...
Ja.
...C und C++ und Java und JavaScript und so on.
Und dann hat es halt halt gestoppt.
Es gibt immer noch Leute, die Languagen entwickeln, aber niemand interessiert sich.
Eine Person kann eine Programm-Language machen, eine wirklich gute, aber man kann sie nicht erlauben.
Es gibt viele schreckliche Fehler in der Art, wie die Web funktioniert, in der Art, wie unsere Operationssysteme funktionieren.
Und wir können keine neuen.
Wir sind einfach mit diesem Scheiß gestoppt und sie halten neue.
Nein, ja.
Also, ich meine, ich verstehe schon, was er uns sagen will.
Vieles der Dinger ist teilweise entstanden irgendwie in den 70er und 80er Jahren.
Okay, da wusste man über viele Sachen noch nicht so sehr Bescheid.
Das heißt ja aber nicht, dass sich viele Sprachen nicht weiterentwickelt haben, weil man heute nicht die Sachen besser wüsste als damals.
Und ich gehe mal ganz stark von aus, dass du...
Ich meine, du kannst ja nicht einfach...
Du kannst es wegschmeißen, was da ist.
Willst du jetzt einfach Linux wegschmeißen und neu entwickeln?
Weil irgendjemand gesagt, dass ich so denke, okay, also C ist eigentlich...
Sind wir so stuck mit C und wir nehmen jetzt super krasse neue Sprache und machen Linux neu in der...
Das kannst du vergessen.
Ich meine, das ist eine Arbeit von Jahrzehnten.
Das wird es so ohne weiteres nicht geben.
Ich meine, dass unter Linux sind sie schon ein bisschen...
Mach ich den zwei Streams easy.
Ja, aber experimentell juckt doch im Endeffekt keiner.
Es gibt...
Es gibt sehr viele experimentelle Sachen.
Temple OS zum Beispiel.
Aber das benutzt ja dann keiner.
Also die Idee, man müsste jetzt 20, 30 Jahre entwickeln...
Oder sagen wir mal 20 Jahre...
Linux gibt es ja 1993 oder irgendwie sowas.
First Linux Version.
Oder ja, sagen wir mal 30 Jahre gibt es den Kram jetzt schon.
Das musst du ja nicht wegschmeißen.
Also ich bin der Ansicht, dass ein kompletter Rewrite oftmals nicht der richtige Ansatz ist.
Man sollte allerdings nicht...
Okay, als Wurzel...
Also kompletter Rewrite finde ich selten einen guten Ansatz.
Was ich aber manchmal nicht verkehrt finde, ist, dass man sagt, hey, alte Dinger, die eh kaum jemand benutzt, die kann man auch mal rausschmeißen.
Die neuen Featuren sind immer neue Probleme.
Das könnte C++ beispielsweise auch mal ruhig machen.
Ja, irgendwann kommt Knuhurt, hört, oder wie auch immer es heißt, raus und dann wird alles besser.
... clean runtimes and doing all this stuff in a much more reliable way, but we don't seem to want to do that.
I've done JavaScript for a generation.
It's time for the next thing.
I don't think that should be considered a radical point of view.
I think it should be a normal evolutionary view.
Haben wir ja schon halbwegs.
Ich meine, wir haben sowas wie WebAssembly jetzt am Start, was keine eigene Sprache in dem Sinn ist.
Ich weiß, man kann low-level WebAssembly machen und es gibt ja auch schon Sachen, die mehr oder weniger eins zu eins sich zu WebAssembly translaten und sowas.
Wir haben ja mit WebAssembly was in der Richtung, nur...
... dass WebAssembly nicht dafür gedacht ist, Webseiten zu bauen, obwohl es im Browser läuft.
Das ist halt der Unterschied zu JavaScript.
JavaScript ist dafür gedacht, Webseiten zu bauen bzw. Webseiten interaktiv zu machen.
WebAssembly ist dafür gedacht, eher im Hintergrund zu agieren und wenn es dann fertig ist, die Sachen nach JavaScript rüber zu schicken.
Also zum Beispiel kannst du irgendeine C++-Label nehmen, du kannst FFmpeg nehmen...
... und in WebAssembly kompilieren und dann FFmpeg im Browser benutzen.
Aber sobald FFmpeg ein Frame gerendert hat, muss es das übergeben nach JavaScript und JavaScript schiebt das dann in irgendein Canvas-Element, in ein HTML-Canvas-Element rein.
Also wir haben ja quasi schon eine neue Sprache im Browser oder zumindest eine neue Runtime in der Runtime, wenn man es so will, mit WebAssembly.
Und das hat ja auch ziemlich Fahrt aufgenommen.
Also WebAssembly-Entwicklung und auch an Technologien, was es dazu gibt, hat sich in den letzten Jahren über einiges getan.
Und wisst ihr, was der Witz ist?
Dass tatsächlich C++ für WebAssembly in der Tat eines der besten Sprachen ist.
Rust ist auch nice, aber C++, muss ich ehrlich sagen, ist so eines der Punkte, ich sage nur, C++ und WebAssembly passen tatsächlich ganz gut zusammen.
Weißt du, was ich meine?
Wenn ich das nochmal sage, aber in dem Fall ist so.
Wir haben ja auch schon im Stream ein bisschen C++ WebAssembly gemacht mit FFmpeg und das ging, neben den üblichen C++-Merkwürdigkeiten, ging das erstaunlich gut.
Und es ging erstaunlich viel auf Anhieb.
Ich meine, wir haben einen Videoplayer gebaut in C++, der in WebAssembly im Browser gelaufen ist, Frames gerendert hat, an JavaScript übergeben hat und JavaScript hat es dann gerendert.
Kannst du WebAssembly ein bisschen erklären?
WebAssembly ist eine extra Runtime im Browser, also quasi eine Runtime in der Runtime, die nicht dafür gedacht ist, dass du sie selbst benutzt, also dass du quasi WebAssembly von Hand programmierst,
sondern dass du andere Programmiersprachen nimmst und die kompilierst du dann in WebAssembly.
Also zum Beispiel, du hast ein C++-Programm, das kannst du kompilieren, entweder in Native Code für ARM-Plattformen, in Native Code für x86-CPUs,
oder was weiß ich, für iOS oder sonst was.
Du nimmst ein C++-Source-Code, kompilierst das für irgendeine Target-Plattform und WebAssembly ist halt eines dieser Targets.
WebAssembly ist quasi so eine Art Runtime, so eine Art, tja, VM, so eine Art JDK im Browser, nee, nicht wirklich, das trifft es vielleicht nicht so genau, JVM im Browser.
Das ist eine Runtime, die du als Compiler-Target benutzen kannst.
Du kannst dein C++-Programm kompilieren in WebAssembly und da kommt dann irgendwelches Binary-Geschwurbel raus, was die WebAssembly-Runtime im Browser versteht und dass du es ausführen kannst.
Also du kannst beispielsweise ein Hello-World-Programm in C++ programmieren und dann nimmst du einen C++-zu-WebAssembly-Compiler.
Okay.
Da gibt es zum Beispiel das Ding.
Das ist ein C++-zu-WebAssembly-Compiler und dann nimmst du dein Hello-World-C++, schmeißt es da rein und raus kommt Binary-Code, was die WebAssembly-Runtime im Browser ausführen kann.
Man muss dazu sagen, WebAssembly ist sehr stark reglementiert, was es darf und was es nicht darf.
Es läuft nach wie vor.
Es läuft nach wie vor in der Sandbox.
Du kannst nicht einfach auf die Platte zugreifen oder sowas.
Ist ja klar, es ist immer noch ein Browser und es ist immer noch fremder Code, der zum größten Teil ausgeführt wird.
Allerdings kann WebAssembly auch nicht mit der Webseite interagieren, in dessen Kontext das vielleicht läuft, sondern WebAssembly ist mehr so eine Art Background-Thread, könnte man sagen.
So ein eigener Prozess, eine eigene Runtime, die im Browser läuft und wenn die irgendwas an In- und Output braucht,
dann muss das über JavaScript passieren.
Ne, das ist wieder was anderes.
Also zum Beispiel, wenn du einen FFmpeg-Video-Player machen willst.
So, FFmpeg selbst ist eine C-Library.
Und mal angenommen, du willst einen Video-Player machen, ich nehme das als Beispiel absichtlich, weil das haben wir im Stream mal gemacht.
Also mal angenommen, du willst einen Video-Player machen, der Formate abspielen kann, die der Browser standardmäßig nicht unterstützt.
Das heißt, du musst das Video runterladen.
Du musst in FFmpeg die Video-Frames einlesen, du musst in FFmpeg die Video-Frames decoden als RGB und dann diesen RGB-Frame in die Webseite, in irgendein Canvas-Element rendern.
Oder mit WebGL in irgendeinen 2D-Kontext rendern.
Genau das gleiche haben wir gemacht und das lief folgendermaßen.
JavaScript ging her, hat angefangen das Video runterzuladen.
Alle paar, alle, keine Ahnung, alle Megabyte wurden Parts, also,
das Megabyte, was runtergeladen wurde in JavaScript, wurde über einen Funktionsaufruf zu WebAssembly quasi rübergeschickt als Byte-Array in die WebAssembly-Runtime.
Also du musstest vorher erstmal das Ganze initialisieren und sowas, dass dann FFmpeg läuft und alles mögliche.
Du hattest dann halt dort was gestartet, was darauf wartet, dass es Input bekommt.
So, also.
Ein FFmpeg, was du quasi kompiliert hast zu WebAssembly.
Das hast du gestartet, das wartete dann auf Input, das wurde dann von JavaScript ausgefüttert mit Raw-Video-Bytes, die JavaScript im Hintergrund runtergeladen hat.
Dann ging das Ganze in FFmpeg rein, FFmpeg hat die Sachen decoded, beispielsweise MPEG-2 oder sowas.
Das kann ja ein Browser nicht abspielen.
MPEG-2-Sachen hast du runtergeladen über JavaScript, reingepackt in WebAssembly.
Hat das decoded.
Und sobald FFmpeg ein Frame decoded hatte, gab es ein Callback zurück in JavaScript.
Es wurden die Bytes, die decodeten Bytes als RGB, glaube ich, oder als, ja, wahrscheinlich als RGB-Frame, wurden übergeben an JavaScript.
JavaScript hat das Ganze genommen und dann in einen WebGL-Kontext gerendert.
Für einen Videoplayer.
Und so haben wir im Stream, ich kann euch das auch mal zeigen, Archive.
Äh, WebS.
Okay, man braucht komplette Wörter anscheinend.
Ja.
Guck mal, das ist zwölf Monate her.
So, und da haben wir einen Videoplayer gebaut, guckt euch das mal an.
Ah ja.
Wir haben einen Videoplayer gebaut, ihr seht es hier irgendwo, guck.
Das ist ein Videoplayer.
Ich habe ein Video runtergeladen in einem Dateiformat, das der Browser normalerweise nicht abspielen kann.
JavaScript lädt im Hintergrund das Video runter.
Guck.
Äh, das wird TS-Video, also MPEG-2-Video, das kann, kann das Ganze nicht.
So, und wir haben das, wir haben das, guck hier, das, das wird hier runtergeladen.
JavaScript lädt das Video runter, schickt es an WebAssembly, in WebAssembly ist hier C++, äh, irgendwo, wo haben wir es hier oben?
Äh, ja, hier, da, in der, in der, C++, zu WebAssembly translated, decodet das Video und schickt es dann an einen WebGL-Kontext zum Rendern für das Video.
Das war extrem.
Wir haben, wir haben 5-Head-Shit, äh, wir haben, glaube ich, 10 Stunden oder so daran rumgebaut insgesamt, bis das funktioniert hat, aber ihr seht, wir haben hier einen Videoplayer, der wirklich auch sehr performant lief, für das, dass es einfach im Browser ist.
Wir haben dort, glaube ich, 4K-Videos, 4K, 60 FPS-Videos haben wir gerendert und die liefen mit ungefähr Hälfte der Geschwindigkeit.
Also man konnte damals auf dem alten Rechner bei mir, also das ist auch sehr performant, muss man sagen, man konnte damals bei mir auf dem alten Rechner,
ein 1080p Video
60fps ruckelfrei
abspielen im Browser, hat natürlich ordentlich
CPU gefressen, in einem Videoformat
das der Browser normalerweise nicht
unterstützt, also WebAssembly, FFmpeg
hat das Ganze decoded und dann wurde es
per WebGL gerendert
das ist wie gesagt
das ist echt nicht ohne
gewesen
man sieht auch, dass es teilweise ein paar kleine Slowdowns
drin hat und sowas, ja
das ist echt nicht ohne gewesen, aber es hat gut
funktioniert, verhältnismäßig gut
und dafür ist das einfach
geil, wenn du dir überlegst
wie willst du
ordentliches Videodecoding machen im Browser
gar nicht, es gibt keine
es gibt kein Javascript Gegenstück
zu FFmpeg
hat noch keiner gebaut
wird wahrscheinlich auch keiner bauen
also was ist das naheliegendste
du nimmst FFmpeg selbst
und übersetzt das
in irgendein Format, was dein Browser
versteht und das ist halt, bietet sich
WebAssembly halt an, weil WebAssembly
explizit dafür gedacht ist, quasi als
Compiler-Target
zu fungieren
also kannst deine C++-Programme
Rust-Programme übersetzen in WebAssembly
und dann im Browser laufen lassen, aber wie gesagt
es ist sehr stark reglementiert
du kannst damit nicht so ohne weiteres direkt aus
WebAssembly mit Webseiten interagieren
ja und WebGL ist wieder was anderes, WebGL ist
zum Rendern für
sagen wir mal
wenn du was GPU beschleunigt rendern willst
ja
das war richtig High-IQ Shit, ich glaub das war
eines der kompliziertesten Sachen
die wir je im stream gemacht haben
den WebAssembly Video Player
Wo sind wir jetzt eigentlich stehen geblieben?
ah ne, das Video war fertig, wir sind gar nicht stehen geblieben
so, next
jetzt hab ich gleich, jetzt hab ich gleich erstmal instant 40 Leute verschreckt
wir hatten knapp über 200, jetzt haben wir 100 äh, jetzt haben wir 187
ok, was haben wir denn sonst wie noch
schauen wir uns das mal an, ok, ich mecker jetzt mal ein bisschen über die
über das Video. Ihr wisst, ich bin manchmal viel zu kleinlich,
was solche Technik-Videos angeht.
Und ich gehe davon aus, hier ist einiges
vereinfacht, weil das eben ein Video ist,
was sich an, ja, alle
richtet und nicht Leute, die ein bisschen
Netzwerk-Ahnung haben.
Oder ein bisschen Ahnung von
Netzwerk-Protokollen und sowas. Wir gucken uns das mal an.
Ich meckere
bei sowas immer gerne, also mal gucken.
Ihr lauft ingame um die Ecke, seid gerade
noch so in Deckung, oder zumindest glaubt ihr das.
Ihr bekommt trotzdem noch Hits,
obwohl ihr längst in Sicherheit seid.
Das kann an vielen Sachen liegen.
In modernen Games
oftmals hauptsächlich Kleinzeit-Hit-Detection.
Natürlich kann das auch an ganz
anderen Sachen noch liegen, aber
bei modernen Games
wahrscheinlich eher Kleinzeit-Hit-Detection.
Der Lag hat euch
gekillt. Nicht zwangsläufig.
Okay, wenn ich in dem Tempo
weitermache,
dann kommen wir
durch das Video nie durch.
Lag bedeutet eigentlich in der
Regel eher,
entweder Server-Signal-Hit-Detection,
oder Kleinzeit-Lag.
Und damit ist eigentlich in der Regel gemeint,
wenn man von Lag spricht,
der Server ist schlicht und ergreifend überlastet
und kann nicht alles verarbeiten und muss
Sachen droppen oder kann es nur langsamer
verarbeiten und irgendwelche Queues
laufen voll, oder aber
Paketverlust.
Also Sachen werden
nicht abgearbeitet. Das ist eigentlich in der
Regel Lag. Oder halt nur verzögert.
Du wirst um die
Ecke getroffen, ist nicht
zwangsläufig Lag,
sondern eher Kleinzeit-Hit-Detection,
mit sehr
großzügig eingebauten
Zeitfenstern, wie das noch bearbeitet
wird.
Gerade in Shootern wie Apex...
Früher hattest du das Problem nicht.
Da war alles Server-seitig. Das Problem war nur,
dass du halt
das oftmals schlecht
spielen konntest, weil du halt
nicht dort hingeschossen hast,
wo du hingeschossen hast, weil es auf dem Server woanders
war, beziehungsweise auch
du dann mit nem Ping
von 150 halt echt
gelitten hast gegen einen mit nem Ping von 20.
Wo ich ja persönlich der Meinung bin,
das sollte auch so sein.
Die Leute sollten schlicht und ergreifend einfach
auf dem Server bei ihnen in der Nähe spielen.
Kann ja nicht sein, dass
du
gegen Leute spielen musst, mit nem
300er Ping teilweise. Das haben
sie in Overwatch ganz gut gelöst.
In Overwatch haben sie es, glaube ich, bei 100 Millisekunden
gecapt. Also der Server
erlaubt nur noch Sachen, die 100 Millisekunden
zurückliegen als Hits, obwohl
das bei ihm einen kleinzeitigen Hit gibt.
Ich muss auch ehrlich sagen, im Nachhinein
betrachte, ich hab ja wirklich ganz ganz lange Overwatch
gecrindet, ich muss sagen,
Netzwerktechnisch
finde ich Overwatch eines der
besten Games, Multiplayer Games,
die es je gegeben hat.
Also mir fällt kein Game ein,
in der Geschwindigkeit und in der
Genauigkeit und
wie selten dort Bullshit passiert.
Klar, du hast in Overwatch auch
die üblichen Verdächtigen.
Du schießt mit McCree direkt durch den Kopf
von irgendeinem Typ durch, aber
das passiert
verhältnismäßig
selten.
Also,
ich muss sagen, Overwatch
Netzwerktechnisch ist eines der besten,
technisch saubersten
Sachen, die ich je gesehen hab, Multiplayer Gaming
mäßig.
Auch nicht CSGO.
Also ohne Scheiß, Overwatch ist mit das Beste,
weil ich, gut, ich muss sagen, ich hab CSGO
also auch
CSGO 2
hab ich noch nie angeguckt.
Vielleicht haben die das mittlerweile aufgeholt.
Aber es hat sich noch kein Game
so gut
Netzwerktechnisch für mich angefühlt
und so sauber angefühlt wie Overwatch.
... passieren kann als Spieler.
Aber habt ihr schon mal versucht,
abgesehen von blindem Hate gegen die Server,
zu verstehen, was da wirklich passiert?
Ja, hab ich.
Weil in Wirklichkeit wissen wir doch eigentlich fast alle nicht,
was wir da genau haten.
Gut.
Hundertprozentig kannst du es ja nicht wissen,
weil du nicht weißt, wie das Spiel das handelt.
Gut, es sei denn, du machst
extrem krass detaillierte Analyse.
Aber ja, ich hab mir da schon öfters Gedanken drüber gemacht,
warum das so passiert.
Ich hab da sogar schon für über 10 Jahre Videos zugemacht,
dass die meisten Leute, die was von lag
schreien, eigentlich gar nicht lag meinen.
Du sitzt ja auch direkt in Frankfurt an der Quelle.
Das stimmt wohl.
In Battlefield 3 zu den Servern hatte ich teilweise
nen Fünfer-Ping, wenn die Server
in Frankfurt oder Köln standen.
Fünfer-Ping ist auch schon nice, oder?
Gibt's hier vielleicht sogar bald bessere Lösungen?
Das Problem,
hinter Deckung getroffen zu werden, passiert aus den
Also ein bisschen höhere Bitrate für ihr Video hätten sie
vielleicht nehmen können.
Im selben Grund, wie man teilweise auch ein paar Schritte
wegen lag zurückteleportiert wird,
oder wenn die eigenen Schüsse nicht registriert werden,
obwohl man ganz klar drauf ist.
Ja, das kann passieren, dass man wirklich drauf war
und trotzdem nicht trifft.
Ich hab's ja schon immer gewusst, dass mich mein Gefühl nicht trügt.
Dass solche Dinge aber passieren, ist zwar nervig,
aber stellt euch mal folgendes vor.
Zehn Leute in einer Lobby schicken ein Paket
mit den Infos drin, wo sie gerade sind
und was sie gerade machen.
Beziehungsweise drücken.
Beim Server kommen alle Pakete an,
die Infos werden jetzt alle zusammengefasst
und dann zurückgeschickt an jeden Spieler.
Hier kommt aber jetzt ein wichtiger Faktor dazu,
der alles etwas komplizierter macht.
Der Ping.
Der Ping ist die Zeit, die dieses Paket hinzu
und zurück vom Server braucht.
Okay, wenigstens das ist schonmal richtig.
Eigentlich ist die Erklärung bis jetzt echt nicht übel.
Braucht's.
Ich mecker gerne bei sowas, wisst ihr ja.
... hin und zehn Millisekunden
zurück braucht, dann ist der Ping
20. Wenn ihr ein Paket über Willhaben
Pay-Livery verschickt und es braucht einen Tag
zum Empfänger und das Geld dann wieder einen Tag
zu euch, habt ihr einen Lag oder Ping
von zwei Tagen. Aber die Pakete
der Spieler...
Leute, ich hab mich grad...
Ich hab mich
bei diesem Bild gerade
ein wenig verguckt.
Ich dachte, das hier ist der Kopf,
das hier ist der Rücken
und dann dachte ich mir so,
okay, was ist... Okay, das ist der Bau,
da dachte ich mir so, was ist das?
Erkennt ihr das vielleicht,
was ich gesehen habe?
Yep!
Moment!
Aber ja,
das ist ein Gesicht in der Richtung.
Dann ergibt es viel eher Sinn.
Zwei Tagen. Aber die Pakete
der Spieler brauchen nicht alle gleich lang
zum Server. Wenn Spieler 1 weiter
vom Server entfernt ist als Spieler 2,
dann kommt das Paket von Spielern...
Das soll... Wisst ihr was? Dann soll Spieler 1
halt auf einem gescheiten Server in seiner Nähe spielen.
Easy!
Und er bekommt auch früher Informationen
vom Server zurück. Dazu kommt noch, dass
diese Pakete meistens nicht direkt vom
Spieler zum Server kommen.
Das wäre ja zu schön.
Für die Route von Spieler zum Server ist dann
dein Internetprovider zuständig.
Die Lieferfirma... Ist er nicht.
Der ist vielleicht
zum Teil dafür zuständig.
Aber nicht für die ganze
Route zum Server. Wahrscheinlich noch nicht mal
für ein Drittel
der Route zum Server.
Was dein Internetprovider machen kann ist,
dafür zu sorgen, und das ist das,
wo die Telekom Richtung YouTube letzten
Jahre über Probleme hat. Was dein
Internetprovider machen kann ist,
dass er...
Okay, sagen wir es mal umgangssprachlich.
Genug Bandbreite hat
zu den Netzwerken, über die
deine Pakete gehen müssen.
Dass da nichts an die Grenze kommt.
Da hatte die Telekom
und auch Vodafone, gerade am Anfang von
Corona. Könnt ihr euch noch daran erinnern?
Wo am Anfang von Corona
die Standardwiedergabequalität bei YouTube
standardmäßig auf 480p gesetzt wurde, wo die
Provider Probleme hatten, weil auf einmal
Huch! Die Leute benutzen ja auch ihre
Bandbreite daheim.
Diese Probleme hatten. Und so nach dem Motto
Mist! Jetzt benutzen die Leute Bandbreite
für Videos und die wollen Homeoffice arbeiten.
Fuck, Alter! Das funktioniert ja nicht!
Also die können quasi gucken,
sagen wir es mal ganz billig gesagt, dass ihr
Uplink ordentlich dimensioniert ist.
Das ist natürlich nicht ganz richtig, weil es ist
nicht nur ein Uplink, es sind mehrere.
Und ich habe so ein Peering schon mal live gesehen.
Ich hatte ja die Ehre, ich durfte ja
schon mal... Das hat doch YouTube gemacht
und nicht der ISP. Das ist richtig!
Das hat nicht der... Ja!
Das hat YouTube gemacht, standardmäßig. Aber es war
aus diesem Grund, weil es Bandbreitenprobleme
as fuck gegeben hat. Und auch viele Leute
nicht mal richtig im Homeoffice arbeiten konnten.
Das war wahrscheinlich was, was Hand
in Hand ging. Ja, das hat YouTube gemacht.
Aber das war nicht einfach
nur, weil YouTube sich
gedacht hat, heute wäre es mal ein schöner Tag
die Qualität auf 480p zu setzen.
Das hatte externe Umstände, warum YouTube
es ausgerechnet dann gemacht hat.
Und die hatten ja auch Bandbreitenprobleme.
Und...
Was wollte ich jetzt sagen? Ja, ich hatte
ja das Glück, ein paar mal in Stetix
zu dürfen in Frankfurt, als ich noch beim Provider
gearbeitet habe. Und ich habe so Peering
Links tatsächlich schon... Also Peering...
Ports tatsächlich schon gesehen. Das ist
oftmals total unspektakulär.
Wir hatten zum Beispiel ein Kabel, damals
weiß ich noch, haben wir neu gepatcht
zu Freenet. Da ist man
hingegangen, an seinen Rack
im D6, hat ein Kabel
genommen und an den Switch gesteckt
und in den passenden anderen
Port reingesteckt.
So, und der kam dann auf, was weiß
ich, drei Racks weiter
raus, bei irgendwas, was Freenet
gemietet hat. Das war glaube ich noch, bevor
es alles United Internet war.
Und ging bei Freenet dann in
den ihren Switch rein.
So.
So sah so ein Peering Link aus.
Das war äußerst
unspektakulär. So, und da können
natürlich, das ist das, was die Internet
Provider machen können. Die können
natürlich gucken, dass sie
ordentlich vernetzt sind
mit anderen Providern. Aber
über die Route
entscheiden die nur zum Teil.
Weil, wenn
das das Netz des Internet Providers
verlässt, hat der Internet Provider
da erst einmal keinen großen Einfluss
drauf, wohin das
Ganze geht.
Der kann nur sagen, hier, da,
Exit Router, was weiß ich,
nächstes, nächstes Target
ist autonomes
Dings, Netz 573
und da
geht's jetzt hin. So, zack, bumm.
Dann ist das da und dann entscheidet der Nächste,
wie er es weiter routet. Okay, wir brauchen aber
viel zu lang für...
Also, wie gesagt, das stimmt nicht. Der Provider
ist nicht für die Route zum Ziel
verantwortlich. Zum Teil, aber
bei weitem nicht für die ganze Route.
Wenn hier eine gute Route gewählt wird, mit
möglichst wenigen... Das ist ja auch der Grund,
warum so Sachen wie Gaming VPNs
teilweise was bringen können,
wenn der Provider
euch über Sibirien routet.
Ja, also,
es gibt ja Gaming VPN
Anbieter, die haben halt ein paar Server
weltweit verteilt und
das muss nicht immer gut sein. Ja, also,
zum Beispiel, wenn ich von hier zu einem Server in
Köln oder von hier zu einem Server in Frankfurt gehe,
dann werde ich höchstwahrscheinlich hier
in meinem Providernetz und in meinem Providernetz
in Frankfurt auch wieder rauskommen.
Aber wenn das ein bisschen weiter weg ist, wenn ich
jetzt beispielsweise irgendwelche koreanischen
MMOs in Korea spiele,
oder auf dem asiatischen
Server,
dann ist mein Provider nicht dafür zuständig,
das Paket von mir dort hinzubringen.
Zumindest nicht die ganze Strecke.
Und da können Gaming VPN Anbieter was bringen,
weil, mal angenommen, ich werde wirklich
mega beschissen geroutet, ja, keine Ahnung,
ich werde von hier nach New York
und von New York dann wieder zurück
nach Russland und von Russland über China
dann nach Südkorea, so, was auch immer.
Dann ist das natürlich eine ziemlich beschissene Route
und dann habe ich einen Ping von 450 oder sowas.
Oder von 500 oder sowas.
Und das ist halt kacke.
Und wenn ich einen Gaming VPN
Anbieter benutze, dann hat es was,
dann kann das anders sein, dann gehe ich hier
zum nächstgeliegenen VPN
Endpunkt, der vielleicht in Frankfurt steht,
und dann händelt das Routing
der Gaming VPN Anbieter
über seine Server, die er quasi
weltweit stehen hat.
Das funktioniert.
Das können die machen.
Das ist dann vielleicht eine etwas optimiertere Route
zu dem asiatischen MMO Server.
Ja, aber so macht das ja
mein Provider nicht. Mein Provider schickt das aus seinem Netz
raus und danach ist es ihm egal.
Tragische Umwege fahren, dann kann euch
das einen ziemlich harten Lag verursachen.
Egal wie gut das Routing aber auch ist,
wer weiter weg sitzt vom Server,
wird auch immer mehr Lag
bzw. einen höheren Ping haben.
Das ist leider ein Problem, das auch die beste
Technologie nicht lösen kann, denn wir sind
nun mal abhängig von maximalen Geschwindigkeiten
der Physik. Eine Sache darf man
aber dabei auch nie vergessen.
Ob nämlich der Datenpaketlieferdienst
überhaupt alle Pakete liefert.
Manchmal gehen auf Weg nämlich Pakete
verloren. Kennen wir von der
Post. Beim Gaming bzw. bei
Servern nennt sich das Ganze einfach
Packetloss. Und die meisten Games haben
mittlerweile sogar ein eigenes Symbol, wenn das
passiert. Dass solche Pakete am Weg
verschwinden, liegt übrigens so gut wie nie
am Spiel bzw. an deren
Das finde ich gut. Das
finde ich wirklich gut, dass er das mal sagt.
Die meisten Leute haben übelste Panik,
dass bei ihnen daheim irgendwas schiefläuft,
wenn Pakete verloren gehen. Und ich
habe auch schon jahrelang in Videos immer wieder
gesagt, Leute, macht euch ja nicht so viel Gedanken.
Höchstwahrscheinlich
liegt das Problem nicht in
euren eigenen vier Wänden.
Und wisst ihr, was ich
auch immer witzig finde?
Wenn die Leute nen Traceroute machen
und sagen, oh, Packetloss,
Traceroute, ich seh's
genau, Packetloss, pass mal auf hier.
Wir machen jetzt mal was.
Das ist immer extrem, extrem
Keck-Wait-Moment.
Ich leake keine IP
bei Traceroute, weil man ja nicht meine Absender-IP
sieht. Und selbst wenn,
scheiß drauf. Aber ich zeige euch das jetzt mal.
Ein Fehler,
den viele Leute machen, wenn's um
Traceroute, wenn's um Packetloss geht.
So, passt mal auf.
Wir gehen jetzt Traceroute
Wie?
Hab ich das immer installiert?
Lul. Pack-Wait.
Traceroute
Traceroute zu
ähm
sag mir mal irgendeine China-Seite.
Was ist eine schöne China-Chinesen-Seite,
Leute?
AliExpress ist doch bestimmt nicht nur in China.
Die haben doch bestimmt mehrere Server weltweit.
AliExpress.com
So.
Okay, hier haben wir das erste schon.
Hier haben wir das erste schon.
Das hier ist mein Router.
So, so viel
ist das einfach. Das hier ist bei mir im Netz.
Also, das ist mein Router.
Und das hier ist wahrscheinlich
mein
Vodafone DSL Modem
Router Kombi-Gerät.
Geh ich mal von aus.
Also, so viel ist das easy. Das ist noch alles bei mir lokal.
Wir können's
ja mal kurz fertig laufen lassen.
Okay.
So, das ist alles noch bei mir lokal. Easy.
Der nächste Hop bei Unity Media
kommen die Leute jetzt auf
die Idee und sagen, aha, hier, hier,
Packetloss, Packetloss.
Das ist kein Packetloss, Leute.
Ich mein, es kann ja schlicht und ergreifend
auch kein Packetloss so wirklich
sein, wenn der nächste Hop dann auf einmal
funktioniert. Klar könnte man sagen,
hier gab's einmal Packetloss, beim nächsten Paket
ging's dann wieder. Das ist aber Schwachsinn.
Das ist nicht das... Oh, guck mal, das Paket kommt ja angeblich
auch nie an, aber witzigerweise,
wenn... Ups, was hab ich jetzt gemacht?
Aber wenn ich... Alter!
Ich hab zu viel Coffee pasted. Aber wenn ich
AliExpress pinge, dann funktioniert das Ganze.
Wenn auch mit nem ziemlich... Okay.
Das ist erstaunlich schnell.
Also, man sieht schon irgendwie,
das kann nicht so wirklich Packetloss sein
an der Stelle. Und viele Leute gucken sich das
dann an und denken sich, oh nein!
Mon KS!
Ich hab ja ganz schlechtes Internet!
So viel Packetloss! Und so viel
Geld verloren! Und ai, ai, ai, ganz
schlimm!
Das ist aber überhaupt nicht der Fall.
Was man hier wirklich sieht, ist,
welcher Zwischenschritt
ICMP
Error Packages
verschickt, wenn das
defaultmäßig noch... Ich geh mal davon aus,
dass es standardmäßig noch auf ICMP...
dass es standardmäßig noch
die ICMP-Variante benutzt
für sowas.
Um die Route festzustellen.
Was du hier siehst, ist, welche
ICMP, also welche
Knoten ICMP
Packages oder Sachen
antworten, Fehler
zurückschicken. Weil das funktioniert
folgendermaßen, so ne Traceroute.
Es wird ein Paket losgeschickt.
Ja, du kannst auch
irgendwelches
TCP
basiertes
machen.
Auch mit Time-to-Live und sowas.
Das geht irgendwie. Einmal, im Prinzip
funktioniert das relativ easy.
Es wird ein Paket losgeschickt
mit einer Time-to-Live von 1.
So. Time-to-Live von
1 bedeutet, also es wird immer, es wird ein
Paket losgeschickt hier zu diesem Ziel.
Time-to-Live von 1. Time-to-Live
ist ein Feld, ist ein Header-Feld.
Fragt mich jetzt bitte nicht
genau, ich glaube im IP-Header.
Glaube ich.
Bin ich mir aus dem Kopf nicht so.
Wahrscheinlich, wahrscheinlich. IP-Header gibt den größten Sinn.
Du hast so
in dem Header ein Time-to-Live-Feld.
Und was passiert ist, jedes Mal
wenn dieses Paket von einem
Router weitergeschickt wird,
wird die Time-to-Live
1 abgezogen. Und wenn die Time-to-Live
bei 0 angekommen ist,
schickt der Router, auf dem das, also
das Paket wird dann verworfen.
Time-to-Live 0. Warum, Chat, wer ist
highIQ, wer weiß, warum man ein Time-to-Live-Setting
überhaupt hat?
Woran könnte das liegen?
Für alle, die es nicht wissen, können sich das im Mode angucken.
Also eines der Gründe, warum es sinnvoll ist,
ein Time-to-Live in einem Paket zu haben. Schleifen.
Richtig. Genau. Dass falls aus irgendwelchen
Gründen im Kreis geroutet wird,
dass die Pakete irgendwann
weggeschmissen werden. Falls es wirklich
mal
Koggers-Kreise gibt.
So.
Time-to-Live wird runtergezählt und der Router,
der die Time-to-Live auf 0 runterzählt,
der verwirft das Paket,
aber
schickt eine Error-Message zurück
an den Absender.
Irgendeine ICMP
Error-Message ist. Irgendeine ICMP
Error-Message. Ich weiß, ich habe keine Ahnung,
ehrlich gesagt, welche genau.
Aber du bekommst, ich, Destination
Unreachable oder so, nee, ach, keine Ahnung.
Du bekommst, du bekommst zumindest
ein Fehler-Paket zurückgeschickt, dass
dein Paket verworfen wurde.
So. Und
das ist dann der Fall hier,
wo man sieht, aha, hier wurde
mein Paket verworfen.
Und da gibt es natürlich ein paar
Informationen zwischendurch, weil normalerweise
bekomme ich ja gar nicht mit, wie
die Zwischenhops heißen. Also ich route
ja nicht explizit von da nach da,
von da nach da, von da nach da.
Ich sage ja nur, ich will hier hin, an die
IP-Adresse von AliExpress. Damit ich
jetzt die Zwischenschritte rausbekomme,
muss ich mir die IP angucken,
welcher Router hat
mir die Error-Message geschickt, ja?
Also der Router zählt die Time-to-Live
auf 0 runter
und schickt dir eine Error-Message zurück.
Und in der Error-Message steht dann die
Absender-IP des Routers drinnen,
der die Error-Message generiert hat.
Also, das hier ist eine Message
mit, das ist ein Paket Time-to-Live 1.
Mein Router verwirft das Ganze,
schickt mir eine Error-Message zurück und ich sehe,
das ist der Router. Time-to-Live von 2,
Time-to-Live von 3, Time-to-Live von 4,
Time-to-Live von und so weiter. So. Und ich schicke mir
das alles zurück. So. Und was das hier jetzt bedeutet,
wenn hier nichts zurückkommt, heißt nicht,
dass es diesen Zwischenhop nicht gibt.
Sondern, das
bedeutet einfach nur, dass dieser
Zwischenhop, das dürfte wahrscheinlich der Unity-Media
so, der Eingangsrouter von Unity-Media,
also der erste Unity-Media-Hop
an der Stelle, der antwortet
schlicht und ergreifend mit
keinem Fehler, wenn er das Paket verwirft.
Der verwirft das Paket,
schickt mir aber keine Fehlermeldung zurück.
Es ist kein Packet-Loss.
Das ist einfach nur so konfiguriert,
dass dieser Eintrag hier,
also dass dieser Router an der Stelle
keine Fehlermeldung
zurückliefert, wenn er ein Paket verwirft.
Es ist nicht gleich Packet-Loss,
das ist eine Konfigurationssache
des jeweiligen Routers.
Und wie man hier sieht,
alle anderen danach machen das auch so.
Und nachdem man keine Antwort
jemals wieder bekommt,
weiß man auch nicht, wie viele dazwischen liegen.
Weil der AliExpress, der letzte Router,
das anscheinend auch nicht macht. Also, easy.
Okay, wir können das,
theoretisch glaube ich,
sogar noch hochstellen irgendwie.
Dass wir dann vielleicht doch
irgendwann mal eine Antwort kriegen.
Aber das ist der Sinn,
also das ist der Hintergrund
und der Sinn von
sowas wie Traceroute.
Das dient nicht dazu, Packet-Loss irgendwie aufzudecken,
das dient dazu, dass man so grob eine Ahnung hat,
wo seine Pakete rumgeroutet werden.
Das kann natürlich sinnvoll sein,
um rauszubekommen,
ob man zum Server
oder zum
koreanischen MMO-Server
eine schlechte Route nimmt.
Wie gesagt, erst nach New York,
dann zurück nach Russland, dann runter nach China
und dann nach Korea.
Und daran, wenn du auf der Strecke
Router hast, die Antworten mit Error-Messages,
könnte man das halbwegs nachvollziehen.
Aber das bedeutet nicht
Packet-Loss. So, das muss man an der Stelle nochmal sagen.
Das behaupten sie nicht in dem Video,
also ich erzähle das jetzt hier nicht,
weil sie das in dem Video gesagt hätten,
sondern nur weil viele Leute denken,
dass das damit was zu tun hat.
Hat aber nichts damit zu tun.
Und es gibt noch einen zweiten Grund
für Packet-Loss,
der wird auch oftmals
missverstanden.
Wobei der bei Spielen
jetzt weniger auftritt.
Man kann auch schlicht und ergreifend
mehr Daten verschicken, als auf dem Weg
irgendwo durchpassen.
Das ist dann kein Packet-Loss in Form von
Kabel ist kaputt oder sowas in der Richtung.
Oder irgendwas anderes ist furchtbar kaputt.
Nein, irgendwo auf dem Weg ist schlicht und ergreifend
die Bandbreite zu gering,
dass Pakete getroppt werden müssen.
Das kann man ganz einfach lokal demonstrieren.
Das mache ich jetzt nicht im Stream,
weil ich keinen Server habe,
mit dem ich das hier ausprobieren könnte.
Das kann man ganz einfach lokal demonstrieren.
Man macht beispielsweise
mal ein IPerf
oder sowas auf,
bei sich auf dem Raspberry Pi oder sonst wo
und schickt dann mal UDP-Messages
mit, also man sagt
IPerf, keine Ahnung, man hat einen
1 Gigabit Netzwerkport
und man sagt IPerf, generiere mal
2 Gigabit die Sekunde an Traffic
und versucht es rüber zu schicken.
Ihr habt ungefähr 50% Packet-Loss.
Wahrscheinlich sind es realistisch betrachtet
eher sogar 60%.
Warum habt ihr 60% Packet-Loss?
Weil ihr schlicht und ergreifend viel mehr schickt,
als durchpasst.
Was soll man sonst haben als Packet-Loss?
Wo sollen die hin, die Dinger?
Okay, auf geht's.
Weiter.
Ein Gameserver am Weg verschwinden
liegt übrigens so gut wie nie am Spiel
bzw. an deren Gameserver,
sondern in 99% der Fälle
am Weg davor.
Nicht
bei euch in der Wohnung, meistens
zumindest. Das ist jetzt ein bisschen blöd
dargestellt,
weil das irgendwie so ein Kabel ist,
was die Leute bei sich daheim haben.
Es liegt in der Regel nicht bei euch am Kabel
oder bei euch daheim. Natürlich, es kann immer
sein, es kann sein, dass eure Fritzbox
den Abgang macht, aber
das äußert sich meistens anders.
Es kann sein, dass ihr irgendwelche ultraalten
kaputten Kabel habt.
Das lässt sich aber meistens relativ schnell
ausschließen oder
miesen WLAN empfangen
und wer über WLAN spielt, hat eh die Kontrolle über
sein Leben verloren. Aber
das Problem lässt sich ja meistens
relativ einfach ausschließen.
Man stöpselt sich möglichst direkt
mit einem Kabel, was halt funktioniert,
an seine Fritzbox an
und guckt, ob das
immer noch so ist.
Wenn es dann weg ist, okay, mag es an
irgendeiner Verkabelung liegen oder am WLAN
oder sonst was, aber in der Regel liegt es
nicht bei euch in den eigenen vier Wänden.
Irgendwo auf dem Weg dazwischen.
Ich meine, je nachdem, wie weit der Server weg ist,
kann da schon ein bisschen was passieren.
Und außerdem, wenn ihr so krasse Netzwerkprobleme
habt, dass das schon bei
Spielen auffällt. Ich meine, Spiele
haben wirklich keine allzu hohe
Bandbreitenanforderung.
Dann kopiert
mal was übers Netzwerk auf irgendeinen NAS
oder so. Dann habt ihr, wenn ihr so
ein beschissenes Kabel habt, dann habt ihr wahrscheinlich
von eurem Gigabit
im Endeffekt
beim Transfer von einer Datei noch, keine Ahnung,
150 Mbit
übrig oder sowas. Also das
fällt dann schon auf.
Aber ansonsten wird es höchst
wahrscheinlich nicht bei euch in den eigenen vier Wänden
liegen.
So, okay, weiter.
Das macht auch meistens nichts.
Also ganz ehrlich,
das juckt, also das da.
Also das da juckt im Netzwerkkabel
in der Regel mal gar nichts.
Natürlich sollte man Netzwerkkabel nicht
abknicken und mehrfach hin und her
links, knick, rechts,
links, knick, rechts. Ne, das ist klar.
Da drin sind auch nur Kupfer,
Kupfer, äh,
Kupferdrähtchen, ja, die können
auch kaputt gehen. Aber so mal so ein
kleines, das macht dem Netzwerkkabel
eigentlich nicht wirklich viel aus.
Okay, bei Glasfaserkabeln
sollte man das natürlich nicht machen.
Okay, das ist relativ schnell kaputt.
Ja.
Das ist eine bescheuerte Idee, WLAN.
Aber der Internetprovider wählt die Route gar nicht.
Der Internetprovider ist nur dafür zuständig,
bis es bei ihm aus dem Netzwerk rausgeht.
Natürlich kann ein Internetprovider
das steuern,
wo es das weiterschickt.
Aber wenn danach Mist passiert,
kann der Provider nicht viel machen
dagegen.
Er könnte es ganz woanders rausschicken
und hoffen, dass es dann einen anderen Weg nimmt.
Ja, ein bisschen Einfluss hat der Internetprovider schon.
Aber es ist nicht so, dass euer Internetprovider
zuständig wäre für die komplette Route von euch
zum Ziel.
Je länger die Lieferkette, desto mehr geht am Weg verloren.
Wenn euer Internetprovider
komplett lost ist,
was durchaus mal vorkommen kann,
oder wenn es Vodafone ist zum Beispiel,
die oftmals in ihrem eigenen Netz
genug Probleme haben,
ist auch noch eine Lösung, eure Packet-Loss-Probleme
easy in den Griff zu bekommen.
Passend zum Thema haben wir uns nämlich für dieses Video
den Partner NordVPN geholt,
der das Routing teilweise selbst besser lösen kann,
als der eigene Internetprovider.
Das ist nicht gelogen, das stimmt.
Die Chancen, dass es was bringt,
in dem Fall würde ich sagen, ist recht gering.
Aber ich meine,
das ist nicht falsch.
Der eigene Internetprovider.
Der Ping ist dann natürlich auch
andere Vorteile, wie das hier
auch teilweise selbst besser lösen kann,
als der eigene Internetprovider.
Der Ping ist dann vielleicht höher,
das Spiel läuft aber trotzdem besser,
und dazu kommen natürlich auch andere Vorteile,
wie das ihr Online-Inhalte ansehen könnt,
die eigentlich in eurem Land nicht verfügbar sind,
was definitiv...
Was für mich der einzige wirklich sinnige Grund
für einen VPN übrigens ist.
...ein Major Win ist bei zum Beispiel Netflix.
Außerdem habt ihr generell einen verbesserten Schutz
eurer Daten, auch wenn ihr nicht mal
mit einem VPN-Server verbunden seid.
Was? Was haben wir? Warum?
Auch wenn ihr nicht mal
mit einem VPN-Server verbunden seid.
Warum?
Habt ihr generell einen verbesserten Schutz eurer Daten,
inwiefern?
Ich meine, es ist ja nicht nur,
dass meine Daten besser geschützt werden
mit einem VPN,
also insofern...
Also das ist ja auch so ein Trugschluss,
dass die Daten besser geschützt werden
mit einem VPN.
Also der einzige Weg,
der vielleicht besser geschützt ist,
ist
die Strecke,
die eure Daten nehmen,
vom Eingang des VPNs
bis zum Ausgang des VPNs.
Dafür
handelt ihr euch
Probleme ein mit,
dass euer VPN-Anbieter
vielleicht komische Dinge macht.
Das heißt, ihr müsst eurem VPN-Anbieter trauen.
Wer weiß, was die machen.
Also das Problem machst du sonst nicht.
Und das nächste ist,
dass jetzt die Daten nennenswert irgendwie
auf dem Weg
datenschutzrechtlich
bedenklich irgendwie verarbeitet
oder gespeichert werden.
Es sei denn, es ist irgendwie der Geheimdienst
am Start oder so.
Der kann sich aber auch einfach vorm...
Irgendwie anderweitig...
Wenn ihr wirklich Angst
vorm Geheimdienst habt,
dann habt ihr wahrscheinlich
auch andere Probleme.
Weil ihr komische Dinger macht.
Sagen wir mal, ihr habt Angst
vorm Geheimdienst.
Dann könnt ihr die Sachen natürlich
über den VPN schicken.
Aber spätestens beim Ausgang
von VPNs
können die Dinger wieder abgegriffen werden.
Also da hast du eh keine Chancen.
Das heißt, die Chance, dass eure Daten
irgendwie aufgezeichnet und
verarbeitet werden und für irgendwelche
was weiß ich, sagen wir mal
Analysen
und Werbeanrufe
keine Ahnung, was auch immer
benutzt werden, ist relativ gering,
dass das auf dem Weg
auf dem reinen Netzwerk-Routing-Weg
unterwegs passiert.
Wo das eher passiert ist,
ist der Service, den ihr eigentlich
benutzen wollt.
Und der kann ja eure Daten nach wie vor lesen.
Ob VPN oder nicht.
Ich mein, ihr geht rein in euer VPN
und irgendwann
muss das auch mal wieder raus.
Und in dem Moment,
wo das das VPN verlässt,
weil ich mein, das VPN
das ist ja auch mal irgendwann
euer VPN terminiert ja nicht direkt
auf dem Webserver von Google.
Sondern irgendwo
bei irgendeinem Router-Exit
von diesem VPN-Provider.
Spätestens da ist vorbei
mit VPN.
Und der Anbieter bekommt eure Daten
so, wie wenn ihr normal drauf zugreifen würdet.
Und wenn der jetzt der Meinung ist,
die Daten speichern zu müssen und verkaufen zu müssen,
dann kann das trotzdem passieren.
Und das ist auch viel eher das,
wo irgendwelche Daten geleakt werden.
Nämlich von den Anbietern.
Nicht irgendwie unterwegs oder so.
Also sprich, der einzige Fall, wo das tatsächlich
sinnvoll sein könnte,
wäre sowas wie,
man sitzt im Krankenhaus oder in einem Café
und die haben ein offenes WLAN
also mit offen meine ich ein unverschlüsseltes WLAN
oder
noch ein WEP
verschlüsseltes WLAN oder sowas.
Also wenn man sich da netzwerktechnisch nicht ganz
dann mag das vielleicht Sinn machen.
Wobei man da halt auch sagen muss,
wenn man Seiten besucht, die über HTTPS gehen,
also die TLS verschlüsselt sind,
was die meisten Seiten sind,
dann ist das auch kein Problem.
Aber dann kann man sich tatsächlich überlegen,
dann muss es aber auch nicht wirklich NordVPN sein
für diesen Zweck,
sondern man kann auch einen VPN aufbauen
beispielsweise zu einer eigenen Kiste
oder zu seiner Fritzbox daheim mit irgendeiner App
und das geht auch.
Da brauchst du die NordVPN.
Für die eigentlichen Gefahren,
dass Anbieter eure Daten leaken,
da kann NordVPN überhaupt nichts dagegen machen.
Weil ihr müsst ja den Service benutzen,
den ihr benutzen wollt.
Also mal angenommen,
ihr benutzt irgendeinen Service, um eure Termine zu managen.
Ja?
Irgendeinen Online-Kalender.
Dann müssen eure Daten ja zu diesem Anbieter.
Und wenn dieser Anbieter
mal irgendwie zufälligerweise
seine Datenbank im Darknet findet,
dann sind eure ganzen Daten geleakt.
Unabhängig davon,
ob ihr diese Daten zum Anbieter
über NordVPN geschickt habt
oder ob das ganz normal über das Internet geroutet zum Anbieter ist.
Das ist wurscht.
NordVPN kann auch wenn das immer so,
oder generell nicht nur NordVPN,
VPNs an sich können auch wenn das immer so
als super krasse Security-Sache verkauft wird,
natürlich wenig mehr Sicherheit bieten.
Also es wird als viel mehr
verkauft, als es letztendlich ist.
Also der Hauptanwendungsfall,
den ich in einem VPN sehe,
ist tatsächlich,
man möchte auf
irgendwelche geo-blockten Sachen
oder region-lockten Sachen
zugreifen.
Also ich möchte jetzt beispielsweise
auf irgendwelchen
koreanischen Servern spielen,
die nur Leute aus Asien drauf lassen
oder
ich will Netflix gucken in
anderen Land,
ich will Sachen, Filme gucken, die in Deutschland noch nicht
released sind und das über irgendeinen
VOD-Service in Indien,
was auch immer, irgendwas.
Dafür ist VPN sinnvoll.
VPN kann auch sinnvoll sein,
wenn man so, sagen wir mal,
halblegale
Sachen macht, weil BitTorrent an sich
und P2P-Sharing ist ja
an sich nicht illegal.
Wir laden selbstverständlich alle nur,
ich habe ewig nicht mehr benutzt,
ich habe noch nicht mal meinen BitTorrent-Client installiert,
aber wenn überhaupt laden wir uns natürlich alle nur
Linux-ISOs runter,
Usenet und so, auch nur alles Linux-ISOs.
Für sowas kann das sinnvoll sein,
ein VPN zu benutzen.
Man handelt sich mit einem VPN aber immer jemand
ein, und das muss einem klar sein,
man handelt sich immer jemand ein, der dazwischen
sitzt, der potenziell
selber alles, was ihr übertragt,
sofern es nicht nochmal verschlüsselt ist,
beispielsweise,
weil ihr über TLS geht,
über HTTPS geht,
kann euer VPN-Anbieter alles
mitlesen, was ihr verschickt.
Ob er das macht,
ob er daraus irgendwie
Kapital schlägt, ob er
euch, was auch immer,
das können wir nicht wissen, das ist
offen.
So, das ist quasi
man in the middle as a service, wenn man das so will.
Ja, genau.
Natürlich ist es dann auch wiederum nicht ganz so einfach,
ich meine,
je nachdem, was das für
eine VPN-Technologie verwendet und
wie die
Zertifikatsgenerierung alles läuft,
eventuell ist es auch nicht möglich
für den VPN-Anbieter das Ganze mitzulesen,
aber
ihr wisst ja halt nicht genau, was unter
der Haube passiert. Das heißt,
es kommt immer wieder
zum gleichen Punkt, ihr müsst diesen
VPN-Anbieter komplett trauen,
mit allem, was ihr da drüber übertragt.
Und da weiß ich halt nicht, ob man
jetzt dem NordVPN da wirklich
mehr trauen kann, als
irgendwelchen etablierten Service-Providern
und Carrier-
Netzwerken und was es nicht alles gibt,
da was
komisches zu machen. Da muss man sich überlegen.
Also es hat seine Daseinsberechtigung
VPN, aber
diese Sache mit, es macht alles so viel
wahnsinnig sicherer,
ist viel Einbildung dabei.
Also es macht wenig sicherer.
Es macht erstaunlich wenig
für die Sicherheit,
das zu benutzen.
Im Vergleich zu dem, wie es immer angepriesen wird.
So, weiter.
Geht auf nordvpn.com
und nehmt euch zwei Jahre NordVPN
und ihr bekommt vier Monate extra.
Das Ganze könnt ihr dann auf bis zu sechs
verschiedenen Geräten benutzen. Ist auch alles
absolut risikofrei, falls es euch nämlich
nicht gefällt, bekommt ihr bis zu 30 Tage
euer Geld. Da bin ich immer gespannt,
wie sehr
sich da wirklich dran gehalten wird, weil
sagen, dass man das macht, ist das eine und
es dann wirklich einlösen, keine Ahnung.
So, weiter.
Ja, klar,
wie gesagt, für solche Sachen,
wir haben ja gerade angesprochen, warum man
vielleicht seine IP verschleiern will,
da macht das durchaus Sinn.
Anonymer ist man dadurch auch nicht.
Also anonymer in der Form,
dass man das euch
nicht zuordnen kann, weil ich meine,
ihr habt ja zwar eine andere IP, aber ihr habt
immer noch die gleiche IP,
längere Zeit die gleiche Exit-IP
und die Anbieter selbst
erkennen euch ja nicht anhand der IP,
primär, sondern
entweder ihr loggt euch ein, dann ist
vollkommen egal, von welcher IP ihr euch
einloggt, die wissen, dass ihr das seid,
oder aber
im Zeitalter von
Browser, Fingerprinting und
alle möglichen Geschichten
findet man auch recht
gut raus, wenn ein User
besuchen von unterschiedlichen IPs,
ob es die gleichen User
sind. Und da gibt es echt die
abgedrehtesten Sachen. Eines der
coolsten Sachen, die ich mal gelesen habe,
in den letzten Jahren,
wie man User identifizieren kann,
oder zumindest sehr stark
eingrenzen kann, nachdem Browser
ja mittlerweile Schutzmechanismen
eingebaut haben, dass man nicht mehr so
einfach Schriftarten auslesen kann
und sowas, die installiert sind, war
folgendes, das kann ich euch mal kurz
zwei Minuten erzählen. Also, wenn ein Anbieter
feststellen will,
welche User die Site regelmäßig
besuchen und das ohne Account
und ohne
sich auf die IP zu verlassen
und ohne auf den User Agent,
da gibt es verschiedene Varianten und eine Sache,
die ich letztens gelesen habe, die war wirklich
sehr high IQ und zwar
korrekt.
Was die machen ist,
die rendern auf ihrer Webseite
offscreen oder ganz klein
oder nahezu unsichtbar
machen die,
legen die ein Canvas Element
an. Canvas Element ist auf
HTML-Seiten sowas, wo
Webseiten eigene Sachen
malen können. Also sprich, das benutzt
man zum Beispiel, also
das hier ist zum Beispiel ein Canvas
Element.
Hier, das ganze Ding hier ist
ein Canvas. Also das hier höchstwahrscheinlich
auch drum herum.
Und
was man dann machen kann ist,
die rendern Emojis
in dieses Canvas
und mal gucken, wer von euch
im Chat
heute Massive
Highest IQ ist.
Was ist das erste, was euch
schon mal ein Emoji verrät
über den Anwender?
Ohne, dass du jetzt hier teilgehen
musst. Was verrät euch erstmal ein Emoji
relativ sicher über den Anwender?
Was er für ein Betriebssystem benutzt? Ja.
Ja. Oder
sagen wir mal, vielleicht auch ein bisschen was über den
Browser. Aber es verrät
euch in der Regel erstmal
ja, das
auch, aber es verrät euch erstmal sowas wie
was der höchstwahrscheinlich
was der für eine Plattform benutzt.
Weil
Emojis sehen überall
unterschiedlich aus. Also man kann an Emojis
relativ einfach erkennen, ob jemand Windows 10,
Windows 11, gut
Firefox hat was eigenes, Android
oder IOS benutzt. Die sehen
alle ein bisschen anders aus. Und wenn
jemand den Twitter Emoji Font
verwendet, ist höchstwahrscheinlich, dass der Linux
benutzt. Also man erkennt anhand
rein der Optik, wie ein Emoji
aussieht, schon relativ easy, was
derjenige für einen OS benutzt.
Eventuell, wenn es die Firefox Emojis sind,
auch was der für einen Browser benutzt. Das ist ja schon
mal nicht schlecht. So. Und jetzt
geht das Ganze noch, man kann auch
vielleicht ganz outdated Sachen erkennen, ob
die Emojis nur schwarz-weiß gemalt werden und sowas.
So.
Aber, weil es
mich interessiert, und ich denke nicht
verkehrt ist, sowas ein bisschen Bescheid zu wissen.
Deswegen erzähle ich es euch jetzt ja, Chat-Gil.
Wir müssen, ich meine, wir müssen doch hier
immerhin zumindest ein bisschen Highest IQ
Chat auf Twitch gerecht werden.
Und ihr wisst ja, dass jeder Prime
Sub den Gesamt
IQ des Chats steigert.
Das heißt, wenn ihr noch einen Prime Sub
übrig habt, ich freue mich natürlich über jeden Sub,
aber ich freue mich auch, dass ihr da seid.
Also auch wenn ihr keinen Prime Sub habt, ist schön,
dass ihr da seid, ja.
Aber ich muss ab und zu mal ein bisschen
Sellout machen, so läuft das Twitch-Game einfach.
Und selbst, und jetzt mal ernsthaft,
selbst wenn ihr einen Prime Sub habt und denkt, ey,
keine Ahnung, dem Max will ich den Prime Sub nicht geben,
dann gebt dem Prime Sub zumindest
irgendjemand anderem auf Twitch,
weil es ist Blödsinn, nicht Prime zu haben und den Prime Sub
nicht rauszuhauen. Das ist quasi
geschenkte 4 Euro für Bezos im Monat.
Na gut, eigentlich kriegt der, also 2 Euro.
Gestern wieder für,
Dankeschön für den Sub.
Ähm, was wollte ich erzählen? Genau,
Browser Fingerprinting. So, als erstes mit Emojis
und das Ganze wird noch viel abgedrehter.
Juso,
Pogger Subscription. Da kann ich nur sagen,
Sunny auch wieder am Start.
Und, hast du die Ausbildungsstelle gekriegt?
So manche Sachen merke ich mir irgendwie
im Hinterkopf, ja. So, aber nochmal zurück zu
Browser Fingerprinting. Also, jetzt haben wir schon mal relativ
easy rausgekriegt mit Emojis, was für eine
Plattform der jeweilige Anwender benutzt.
Und jetzt wird's abgedreht. Man kann
jetzt mit
mehr oder weniger
detaillierten,
mit mehr oder weniger detaillierten
Analysen
kann man jetzt auch rausfinden,
ungefähr, was für
eine Hardware
der jeweilige Client benutzt.
Und
da gibt es Tabellen und da gibt es
Tests, die haben mit dem
Rendern von Emojis oder generell mit dem
Rendern in einem Canvas Element
im Browser, haben die gemessen,
dass du relativ gut
beispielsweise sagen kannst,
an der Geschwindigkeit, wie gerendert wird
und
an irgendwelchen Timings, wie gerendert
wird und alles mögliche, kannst du
relativ gut bestimmen, was für eine Grafikkarte
der jeweilige User benutzt.
Und noch viel mehr, also
du kannst, es gibt wirklich
sehr viele Tricks, dass du im Browser
feststellen kannst, zum Beispiel
welchen Browser benutzt
der Anwender, welches Betriebssystem
benutzt der Anwender, welche Hardware hat der
Anwender eingebaut, so. Und das
alles zusammengefasst,
sagen wir mal, du bekommst so
sieben, acht verschiedene Merkmale
raus und die in Kombination
sind dann,
wenn nicht hundertprozentig eindeutig,
aber relativ eindeutig.
Überlegt euch mal, ihr habt
oder vielleicht acht, neun verschiedene Merkmale,
die auch unterschiedlich sein können,
nicht nur Binary
und da gibt es sehr viele
Kombinationsmöglichkeiten und
wenn ihr dann jemand findet, der zufälligerweise
von einer anderen IP kommt, aber exakt
die gleichen Merkmale aufweist,
da könnt ihr euch relativ sicher
sein, dass der,
dass das wahrscheinlich der gleiche User ist.
Also es geht, man kriegt das, man kriegt das
raus. Und das ist auch
eher das, worauf sich Seiten verlassen,
die wirklich User tracken
wollen.
Und die verlassen sich nicht auf die Absender-IP
oder nicht nur auf die Absender-IP.
Twitter-Emojis, doch unter Linux sind Twitter-Emojis
sehr beliebt. Guck hier, ich habe auch
Twitter-Emojis unter
unter Linux.
Twimoji ist eigentlich, wir müssen gerade mal
kurz was gucken. Twimoji,
der Twimoji
Fork,
ist der,
oh wie hieß denn der Twimoji Fork?
Ich habe es vergessen.
Es gibt nämlich den neuen Twimoji Fork,
hat irgendjemand eine Ahnung?
Ja, das hier, da ist er doch.
Twimoji Fork.
Okay, Unicode 15 ist da immer noch nicht drin.
Es gibt nämlich den Twimoji Fork,
der auch die neuesten Unicode
Emojis unterstützen wird.
Warum ist das notwendig?
Weil Twitter
alle, die an diesem Emoji Font gearbeitet
haben, entlassen hat.
Dementsprechend gibt es keine Updates mehr
für, für Twimoji.
Und wir haben kein Unicode 15.
Aber, ich meine, die haben immer noch,
die haben immer noch kein Goose-Emoji.
Ich weiß nicht, wie es da aussieht,
aber es sieht so aus, als hätten die
immer noch einige Emojis nicht drin.
Ist halt blöd, ne, wenn,
wenn Twitter die,
die alle rausschmeißt.
Guck mal, zuletzt im Januar aktualisiert.
Tja, da wird es keine Updates mehr so
geben, ohne weiteres.
Ad Support Unicode 19, ne, siehste?
Gibt nicht mehr.
Also, das ist halt auch so ein Ding.
Äh, ja, und damit kann man theoretisch auch
Sachen rausbekommen über, über den
User, wo wir gerade dabei sind.
Du hast einen Denkfehler, Emojis
werden auf dem Client gerendert. Ja, das ist ja gerade
das Ding. Deswegen, das ist ja auch der Grund,
warum das funktioniert.
Ja, das ist richtig, das ist richtig.
Aber das ist kein Denkfehler, das ist Voraussetzung
dafür, dass das überhaupt funktioniert, was ich gerade beschrieben habe.
Der Client
muss das rendern. Du willst ja auch was über den Client
rauskriegen und nicht über deinen Server.
Monopol, danke schön für den Sub.
Eis die Poker-Subscription. Jetzt geht's ja nicht groß hier.
Du hast die Ausbildungsstelle
gekriegt. Excellent, excellent.
Das ist, ja,
eigentlich auch.
Jetzt gibt's
sogar mehr Geld, ja dann. Siehste?
Beste Kombination.
Ja, es gibt noch ein paar andere Möglichkeiten, aber Canvas ist, glaube ich,
das Beliebteste. Ja gut,
JavaScript komplett blocken ist halt
nicht praktikabel, weil kaum eine Webseite noch funktioniert
ohne JavaScript.
Pateo Heli wieder am Start.
29 Monate, danke schön für den Sub.
Excellent Subscription.
Magst
ans Trinken erinnern? Jo.
So, jetzt, ich weiß,
ich hab mich jetzt sehr lange Sidetrack lassen von diesem
Video hier, aber ich hoffe, es hat euch
trotzdem interessiert. Ich denke, es war für die einen oder anderen
was Spannendes dabei.
Excellent, weiter geht's.
Oh, oh, oh, jetzt hier.
5 Subscription.
Hat eine gute Möglichkeit,
eine gute Sammlung. Ja, es gibt
einige Seiten, die sowas haben, aber die kann ich jetzt hier
nicht im Stream aufmachen, weil die dann auch solche Sachen
leaken, wie
IP und alle möglichen Dinger,
die ich vielleicht jetzt nicht so unbedingt public
haben will. Ja.
Ja, danke
für die Subs. Wir hatten das Glück gehabt und
wer hat gedodged?
Lootbeutel. Ja, der hat schon mal, der sackt
alles ein, oder?
Der Cartman Nuxa
Bags for... Ach, guck mal, hat er Glück
gehabt. Der ist erst seit ein paar Tagen hier im Stream
und gleich schon, gleich schon...
Ich hab den Sub gecatcht.
Fazerun, der ist öfters da, den kenn ich vom Namen her.
Der stellst hier öfters rum.
Und die Gartenkralle
ist auch am Start. Danke für den Sub.
Excellent, excellent.
Okay,
gucken wir das Video mal weiter.
Next.
...get lost, jetzt aber mit lag zu tun.
Wenn am Weg zu euch zurück Pakete fehlen, beziehungsweise
Informationen fehlen, weil sie nie beim Server
ankamen, dann kann euer Spiel das
bis zu einem gewissen Grad ausgleichen.
Und zwar mit dem sogenannten Buffer.
Bevor nämlich die erhaltenen Infos
vom Server in ein tatsächliches Bild
umgewandelt werden, wartet man erst mal
bis ein paar Pakete da sind.
Wenn ja die Information vom... Wie gesagt, ich hab schon
angehört, ich werde meckern. Ja, die Information
vom Server wäre natürlich nie direkt
in ein Bild umgewandelt.
Ja, Blödsinn. Ist ja nicht so, als würde
der Server euer Game rendern.
Aber wir wissen, was gemeint ist.
Klarerweise erhöht das den Lag, weil ihr Informationen
nicht gleich gezeigt bekommt, die eigentlich schon
verfügbar sind. Der Sinn des Ganzen ist
aber, dass euer Game checken kann, ob zwischen den
Paketen irgendwo etwas fehlt.
Und wenn das der Fall ist, dann wird's automatisch
gefüllt, sodass euer Game nicht einfach wild ruckelt,
sondern smooth weiterläuft.
Obwohl irgendwo ein Paket oder
eine Info fehlt. Manche Games lassen
auf diesen Buffer verkleinern, was natürlich
auch automatisch euren Lag verkleinert.
In Counter-Strike zum Beispiel
nennt sich das Ganze Interpolation Rate
oder Interp. Damit könnt
ihr die Größe eures Buffers einstellen
und euren Lag zwar verkleinern, aber mit dem
Risiko, dass euer Game irgendwie...
Wir laufen auch zum größten Teil über UDP.
Er meint nicht, dass das Paket neu
angefordert wird. Er meint, dass das Game sich
irgendwas ausdenkt, was Sinn macht.
So nach dem Motto, ich hab als letzte Information
der Character läuft gerade mit diesem
Speed in diese Richtung.
Dann füllt er einfach das hier auf mit, der Character
läuft halt einfach weiter in diese Richtung, bis ich
die nächste Information kriege. Wenn das natürlich
zu oft passiert, kann man sich vorstellen,
dann ruckelt's halt ein bisschen rum.
Oder...
Ruckeln ist ja nicht Lag, aber
ihr wisst, was ich mein, ja?
Dann füllt er das auf,
Character läuft weiter in die Richtung,
Character läuft weiter in die Richtung, und irgendwann
kommt dann wieder ein Package vom Server durch,
wo drin steht, Moment, der ist gar nicht weiter in die
Richtung gelaufen, sondern in die Richtung. Und dann macht's
dann auf einmal, läuft weiter, läuft weiter,
jetzt ist er auf einmal da unten.
Also,
ja, das stimmt schon, was der hier
erzählt. Das ist eigentlich ganz gut dargestellt.
Trotzdem müssen die Spieler immer alle auf dem gleichen Stand
sein, um sinnvoll miteinander spielen zu können.
Jetzt könnte der Server zum Beispiel
immer warten, bis er die Pakete aller Spieler hat,
um dann die Daten zurückzuschicken.
Aber das würde sich für Spieler ziemlich komisch anfühlen,
weil jeder Input dann fühlbare Verzögerung
hat. Ist also keine wirkliche
Option. Was getan werden muss,
ist das, was Spieler sehen, und
das, was der Server sieht, voneinander
getrennt wird. Und es ist halt,
das ist so ein bisschen was, wo sich das die letzten
Jahre über, das war die letzten Jahre,
ist jetzt übertrieben, ist schon deutlich länger,
die ein bisschen verschoben hat, ja. Früher war
Server-State, das, sagen wir mal so,
das, wie der Server die Dinger
gesehen hat, das einzig wahre.
Könntest du das Video reinposten?
Ja. Da wurde
alles serverseitig gemacht. So
nach dem Motto, da wurde
hingeschossen, Server guckt, ist der Typ bei meinem
State gerade da? Nö.
Vorbeigeschossen, obwohl du drauf warst.
Man ist jetzt ein bisschen dahin gegangen,
das alles etwas großzügiger zu machen.
Nämlich, dass da nicht
nur übermittelt wird, so nach dem Motto, ja,
ich habe da und dahin geschossen, sondern
vielleicht auch noch, ich habe da und dahin
geschossen und bei mir habe ich getroffen.
Ja, und da kann der Server dann entscheiden, okay,
wie groß ist die Latenz, will ich das
noch beachten, will ich das nicht beachten?
Und das war so die
Verschiebung, die wir die letzten zehn Jahre über
gesehen haben, auch so ein bisschen von reinem
serverseitigem State zu,
ja, immer noch, Master-Server muss
letztendlich entscheiden, was Sache ist, aber
auch mit Client-Side-Hit-Detection immer
mehr, immer präsenter.
Was dann schon das Spiel auch für
Leute mit ein bisschen
höherer Latenz besser spielbar gemacht
hat, aber es noch
mehr dazu geführt hat, zumindest
wenn das übertrieben wurde,
wie da noch Sachen
akzeptiert wurden, für
teilweise, ich bin schon um zwei
Ecken und auf einmal werde ich
zurückgeportet und gekillt.
Es gab ja zwischenzeitlich, wenn es übertrieben wurde,
sogar mal Spiele, da hattest
du einen Vorteil, wenn du mit 400er Ping
spielst und sowas. Das sollte dann nur
wirklich nett sein.
Also, auf wen ich schieße, dann soll
direkt zu sehen sein, was passiert.
Na gut, Lag-Switches waren nochmal ganz
was anderes. Lag-Switches sind
eigentlich so Dinger,
die sollten eigentlich gar nicht funktionieren.
Wenn das geschah. Also die
ursprünglichen Lag-Switches in Call of Duty
waren ja wirklich teilweise
Hardware-Modifikationen,
die
das Kabel zum
Empfangen von Daten unterbrochen haben
und das für das Senden von
Daten quasi intakt gelassen
haben. So nach dem Motto, ich kann
senden, wie ich mich
bewege und wie ich Damage mache, ich kann aber
keine Damage auf mich mehr empfangen.
Dass sowas überhaupt geht,
ist schon eine Fail-Implementierung
sondergleich.
Jaja. Zumindest war
das in Call of Duty damals so.
Also es gab damals zu Xbox
Zeiten tatsächlich reale
reale physische
Lag-Switches.
Dass das überhaupt funktioniert, ist halt
schon. Ich meine, das funktioniert
prinzipiell eh nur ein paar UDP-Packages, aber
selbst das könnte man easy verhindern.
Ja. Du könntest zum Beispiel irgendwelche
Server-Messages einbauen,
auf die dein Client
replyen muss. Und wenn
er so und so viele Replies verpasst,
dann wird er nicht mehr beachtet. Also man kann
da durchaus Sicherheitsmechanismen, aber das
hatte Call of Duty halt damals gerade
als es halt noch diese irgendeine
Xbox-hosted-Variante hatte,
ähm, konnte es halt komplett
vergessen, ne?
Das waren Zeiten, da waren physische Lag-Switches
tatsächlich ein Ding.
...Meldung des Servers warten muss. Das nennt sich
Client-Side Authoritative.
Client-Side sagt's uns schon.
Hier ist relevant, was der Spieler selbst sieht.
Ja. Und zwar, bevor der Server überhaupt
Infos hat. Das führt zu ganz
komischen Situationen, wie zum Beispiel, dass man
weit hinter der Deckung noch stirbt. Das
passiert nämlich, wenn dich wer abschießt, der
selbst einen höheren Ping hat als du.
Ein Spieler mit einem höheren Ping spielt
eigentlich mit alten Informationen.
Das heißt, du bist auf seinem Bildschirm noch deutlich
weiter hinten zu sehen. Je größer
der Ping, desto weiter hinten sieht er dich
noch. Wenn ein Spiel Client-Side
Authoritative erlaubt... Trotzdem solltest
du immer, wenn ihr Head-on-Head
ballert, ja, gewinnen.
Wenn's gescheit gemacht ist.
...ein Spieler mit hohem Ping
dich trifft auf seinem Bildschirm,
dann wird der Hit registriert.
Egal, wo du tatsächlich bist.
Damit das nicht zu heftig wird, haben
einige Spiele hier ein Limit.
Wann nicht mehr Clients... Ich glaub, Overwatch
hat's, glaub ich, ab 100 oder 150 Millisekunden.
...Side registriert wird, sondern
Server-Side. Das bedeutet, wenn du
in manchen Spielen einen sehr hohen Ping
hast und scheinbar zwar triffst,
registrieren deine Schüsse einfach nicht.
Um zu treffen, müsstest du an die
tatsächliche Position des Gegners laut
Server-Daten schießen. Also eigentlich
bisschen vor dem Gegner. Das Video ist
wirklich nicht schlecht gemacht. Muss ich
jetzt mal sagen. Wie gesagt, ich hab ja schon angekündigt,
ich werd ein bisschen meckern. Das Video ist nicht schlecht
gemacht. Kannst nix sagen. Also...
Die haben sich wirklich
Mühe gegeben, das so zu verpacken,
ohne jetzt so übertriebenen Blödsinn zu
erzählen, um's gar so krass zu vereinfachen.
Ist vollkommen in Ordnung. Also kann man sagen,
ist... äh...
Wobblos approved.
Und wer jetzt glaubt, es ist unfair, mit hohem
Ping zu spielen, weil ja Leute noch treffen können...
Ich weiß, Wreckman, deswegen hab ich ja gesagt, ich werd jetzt ein bisschen
meckern. Aber insgesamt ist das echt nicht schlecht gemacht.
...du schon weg bist, dann denk mal
umgekehrt. Wenn ihr
diejenigen seid, die zuerst um eine Ecke kommen,
dann seht ihr den High-Ping-Spieler
lange bevor er euch sieht.
Ihr könnt den ersten Schuss abgeben, bevor ihr überhaupt
am Bildschirm des Gegners erscheint.
In Valorant ist es zum Beispiel
tatsächlich so, dass der Spieler
mit dem besseren Ping den Kill macht,
wenn beide gleichzeitig schießen.
Ja, find ich aber auch irgendwo sinnig. Klar, kannst du
sehen, Overwatch haben das auch ein bisschen gebuffert, alles.
Aber ich finde, es sollte, es sollte
irgendwie so sein. Weil ganz im Ernst,
die Leute sollen halt auch für Server
spielen, wo sie gescheite Connection zu haben.
Ja, wenn wir hier im Bereich von...
50 Millisekunden reden oder so,
sag ich nix dagegen. Aber wenn das teilweise
dann auf 300
Millisekunden rauf, das kann's nicht sein.
Ja, das fühlt sich scheiße an.
Der eigentlich
korrekte Input des High-Ping-Spielers
wird einfach durch den Ton...
Ich kann gerne mal ein Video machen, das noch tiefer geht.
Nee, kann ich nicht, weil
erstens müsste ich mich dann selbst viel zu
sehr in der Tiefe damit zu beschäftigen, damit ich auch keinen Mist erzähle.
Und zweitens sind solche Videos enorm
aufwendig.
Und da bin ich zu faul für, weil solche Videos auch kaum
geguckt werden, witzigerweise. Das ist halt so ein bisschen das
Dilemma, was man auch mit Technikvideos auf
YouTube hat. Wenn man wirklich gute,
tiefgreifende
Erklärvideos macht,
die werden oftmals
im Verhältnis von Aufwand
zu Leuten, die das gucken,
viel weniger
geschaut. Natürlich könnte man jetzt sagen,
ich mach das trotzdem, aber ich glaub, da bin ich zu faul für.
Neues Video, ich hab schon hochgeladen.
Als nächstes...
Als nächstes hab ich einen Zusammenschnitt
anfertigen lassen.
Über den Half-Life-Speedrun,
den wir geguckt haben. Den werde ich als nächstes hochladen.
Geht 38 Minuten.
Und danach muss ich tatsächlich mal was über
Battlefield 6 Season... äh...
Battlefield 2042 Season...
Nein! Battlefield 2042
Season 5
und das Season 6
Ankündigung erzählen. Meine Güte.
Aber jetzt noch eine letzte Sache drauf.
Die Geschwindigkeit, in der der Server
selbst updatet, beziehungsweise Partite
empfängt. Ah, jetzt will er sowas wie Tickrate oder sowas haben.
Ich dachte, jetzt kommt noch Input-Lag oder sowas mit dabei.
Weil dann wär's echt abgedreht
geworden, wenn jetzt noch sowas kommt wie
Refresh-Rate vom Bildschirm-Rendering,
Maus-Input und so. Da kannst du ja
ne komplette Wissenschaft draus machen.
Und wieder schickt. Ihr kennt das
vielleicht als Tickrate.
Manche Games geben's aber auch einfach
in Herz an. Das ist die Zeit,
die der Server braucht, um alle
Pakete zu öffnen, die Infos
zu sammeln, beziehungsweise miteinander abzugleichen
und wieder an die Spieler loszuschicken.
Normal sind
heutzutage Tickrates von 64 Millisekunden
oder bei manchen Games auch
als 60 Hertz bezeichnet.
Das sind 60 Pakete pro Sekunde.
Und damit 16,66
Millisekunden zwischen jedem
Paket als zusätzlicher Lag.
Das heißt, ihr bekommt nur
alle 16,6 Millisekunden
ein Paket geschickt.
Und die Zeit bis zum nächsten Paket
ist zusätzlicher Lag.
Denn da passiert nichts Neues.
Wird die Tickrate weniger,
zum Beispiel 30 Hertz,
kommt dementsprechend mehr Lag on top
für alle dazu. Aber da geht's
eigentlich um wenige Millisekunden.
Viele meinen zum Beispiel, dass
ein Upgrade von 64 Tick auf
128 Tick alles besser
machen würde. Und die haben
zwar schon recht, allerdings
halt nur ein wenig recht.
Das kommt drauf an.
Es ist
manchmal auch Auswirkungen darauf,
wie das Spiel selbst Sachen
interpretiert. Also ich
weiß nicht, ob es in CS immer noch so ist,
aber ich weiß, dass es definitiv
in CS mal so war,
dass bestimmte Movement Tricks
gar nicht möglich waren
mit der normalen. Ich hab mal ein Video geguckt
von irgendeinem Pro, der das gezeigt hat.
Der hat gezeigt,
dass manche Movement Tricks,
irgendwelche Sprünge von irgendeinem Autodach
auf irgendeine Mauer und sowas, dass die
normalen Matchmaking Tickrate
gar nicht möglich sind oder nur sehr
unreliable möglich sind.
Aber mit 128
Tickrate tatsächlich relativ konsistent
ausgeführt werden können.
Also macht schon einen Unterschied.
Also es kommt ein bisschen drauf an, wie das Spiel
sich im Endeffekt dann verhält.
Natürlich, auf den ersten Blick
macht es jetzt nicht so den krassen Unterschied.
Und ich würde auch sagen,
je nach Game
ist es auch nicht wirklich.
Ob jetzt ein Battlefield
mit 64 Tick
oder mit 128 Tickrate läuft,
naja,
das ist wahrscheinlich nicht so der große Unterschied.
Battlefield ist ja auch was, wo es
weniger jetzt dieses
1 on 1 auf den Kopf geklicke gibt.
Das ist wahrscheinlich nicht so
das Ding. Und man hat es bei Venice
gesehen, dass es gab
128 Tickrate Surfer, die hatten
aber Ultra CPU
Anforderungen wohl.
Es ist immer sinnvoll,
so viel FPS zu haben, wie möglich.
Also erstmal
zumindest bis zu deiner Monitor Refresh Rate,
aber selbst da drauf macht es noch Sinn.
Also eigentlich ist
mehr FPS immer besser.
Und ansonsten FPS und
Tickrate, gut,
nachdem dein Monitor nicht gesynct ist
mit der Server Tickrate,
umso mehr FPS
umso besser.
Warum High Refresh, Max FPS?
Naja, also
das ist ein
ähnlicher Grund,
wie das es bei 60Hz Monitoren auch sinnvoll
ist, durchaus die
Spiele in höherer
Framerate zu rendern.
Also erstens ist das ja nicht gesynct aneinander.
Nur weil ein Server mit 60
mal die Sekunde Refreshed
und euer Game 60 mal die Sekunde
das Bild neu aufbaust, ist das ja nicht
gesynct. Wie soll das auch gehen zwischen
32, 64 Spieler?
Und umso schneller
euer lokaler
FPS und auch lokaler Refreshrate vom
Monitor ist, je früher
seht ihr natürlich auch ein Update.
Weil es kann ja trotzdem sein, dass
gerade bei euch der Refresh durch
ist und jetzt
neue Informationen vom
Server kommen. Und dann müsst ihr auf den
nächsten Refresh warten.
Unabhängig davon. Wie gesagt, das ist ja nicht
direkt gesynct. Und
so ist es auch, wenn ihr euer
Game schneller rendert als euer Monitor anzeigen
kann. Wenn euer Game schneller rendert als
der Monitor anzeigen kann, dann ist euer
Game State quasi schon
aktueller
am Zeitpunkt dran,
am echten Zeitpunkt dran,
wenn der nächste Monitor Refresh kommt.
Also
das macht schon Sinn,
dass in der Regel mit low
Graphics und so viel
FPS wie möglich.
Das macht eigentlich fast
immer Sinn. Also gerade in
Spielen, die Multiplayer sind, die ein bisschen
competitive sind, würde ich auch sagen wie Battlefield,
ähm, drunter zählen.
Mehr FPS
ist in der Regel immer besser.
Pauschal, kann man das eigentlich so sagen.
Ich recht. Denn der Unterschied
ist wirklich, wirklich gering.
Ungefähr 7 Millisekunden
hätten wir dadurch weniger Lag.
Ob das wirklich viele Probleme
löst? Naja, zumindest
ein paar kleine Probleme.
Oder, äh, durchschnittliche
Probleme. Dass wir also manchmal
hinter der Deckung gekillt werden oder unsere
Shots, wo wir eigentlich drauf waren, nicht
so gut sind.
Moment, ich dachte,
das geht nur bei Google Stadia,
Negativ Latency. Wie, das können
andere jetzt auf einmal auch?
Das glaub ich nicht.
Ja, aber solche Prediction
Sachen.
Also ich würde, ich würde mal
behaupten, dass Fighting Games,
also gut, in Fighting Games bietet sich's
wahrscheinlich an. Ja, es ist ganz klar
One-on-One und das Moveset ist irgendwie begrenzt
und das, was passieren kann, ist begrenzt.
Also dieses Zukunft-Predikten, dass das in Fighting
Games, äh,
angewandt wird, wundert mich jetzt nicht. Aber
ich würde mal behaupten, das ist nicht das
einzige, wo man zumindest so Sachen in der
Richtung schon probiert.
Oder probiert hat.
Stellt euch mal vor, es gibt ein Delay
auf eine Animation eines Schlags.
Wenn euer Gegner dann wirklich die ganze
Animation erst verspätet sieht,
wird das Ganze unmöglich zu spielen.
Aber was, wenn man einfach
den Delay vorne von der Animation abschneidet
und sie mittendrin beginnen lässt?
Klingt komisch, sieht man aber im Fullspeed
überhaupt nicht.
Das System nimmt außerdem vor den Inputs
den nächsten wahrscheinlichen Schritt an
und zeigt ihm den Gegner.
Momentan nimmt das System einfach an, dass das,
was man gerade macht, auch das nächste ist,
was man macht. Das heißt, wenn ich gerade stehe,
nimmt das Game an, dass ich auch im nächsten
Frame noch stehe. Klingt sehr
simpel, ist aber bei Fighting Games ein
Game Changer. Was wir jetzt
in den Raum stellen, ist, dass mit der aktuellen
Entwicklung von AI, das auch
bei allen anderen Games möglich sein könnte.
Könnte eine AI sinnvoll
sein. Also den Zusammenhang würde ich jetzt
erst mal nicht sehen, so richtig.
Und mit guter Trefferquote die nächsten
Schritte der Spieler vorhersagen,
könnten wir dann, auch wenn es im Hintergrund
Lag gibt, ihn optisch fürs
menschliche... Also,
ich sehe den Zusammenhang zwischen
AI und
Predi... weiß nicht...
Weniger AI, was wir uns
jetzt in Form von Chat-GPT vorstellen,
wo es ja immer um Sachen geht,
die schon passiert sind,
so dieses Zukunftsvoraussagen. Klar, ich
meine, guckt euch mal an, wie
wie Schach-Computer
und Schach-Programme seit
Jahrzehnten funktionieren.
Da wird versucht,
die Zukunft vorauszusagen.
Also, umso mehr die
Zugtiefe, nennt sich das dort,
ist, umso besser ist so ein
Schach-Programm.
Ja, das ist theoretisch sicherlich auch
in vielen anderen Games möglich, aber
das muss ja immer noch
on the fly für den aktuellen
State irgendwie
berechnet werden.
Du wirst nie eine komplette
Partie Battlefield komplett lösen können.
Also, komplett lösen würde ja
bedeuten, du hast
den State, den eine
Partie Battlefield haben kann, 32
vs 32 Caspian Border.
Wenn du das, wenn du das
komplett lösen würdest, bedeutet das,
sobald das Spiel anfängt, bis zum
Ende des Spiels, du hast alle
nur erdenklichen Kombinationen
im Vorfeld ausgerechnet.
Und das geht offensichtlich
nicht bei einer
Partie Battlefield.
Jede kleinste
Pixelbewegung von jedem
der Spieler, jede
Aktion, das
zieht eine
Trillionenfache
andere Möglichkeiten nach sich.
Also, das kannst du nicht im Vorfeld komplett
durchrechnen. Es gibt Spiele, das geht das.
Ich glaube, Mühle
ist komplett gelöst.
Oder, also, 4 gewinnt
ist auf jeden Fall komplett gelöst.
Das weiß ich. Ich glaube, Mühle auch.
Also, sprich,
es ist jede nur erdenklich
mögliche
ähm, ja,
Spiel-State
bekannt. Und
analysiert und man weiß
immer, wie man 100%
perfekt spielt. Das heißt,
daraus kannst du dann auch zum Beispiel ableiten, wie
weißer Spieler gewinnt immer.
Aber ich meine, zwischen 4 gewinnt und
32 versus 32 Battlefield
Caspian Border gibt's halt
ein bisschen mehr States oder Möglichkeiten,
was passieren kann. Also, dass man eine komplette
Runde Battlefield im Vorfeld schon
komplett predicted hat,
ist eigentlich nahezu unmöglich.
Bei Fighting Games
sieht das allerdings schon ein bisschen anders aus.
Fighting Games sind natürlich deutlich
weniger, also selbst Fighting Games kannst du nicht komplett
predicten, aber Fighting Games, es sollte
glaube ich offensichtlich sein, dass
die möglichen Züge,
nennen wir es mal, in einem
Fighting Game, deutlich
geringer sind die Anzahl als
beispielsweise
32 versus 32 Battlefield.
Wie schaut's mit MMOs aus?
MMOs ist ein schlechtes
Beispiel dafür, weil
MMOs in der Regel tatsächlich
synchron sind. Vielleicht
mittlerweile nicht mehr so krass wie früher,
aber MMOs sind
ziemlich synchronisiert, also
sprich, du hast
Server-Ticks
und anhand dieser Server-Ticks
passieren Dinger.
Ja, natürlich
Clients interpolieren das noch ein bisschen,
dass es flüssiger
aussieht alles,
aber in MMOs ist es
auch so, dass wenn ich sage, hey,
ich bau jetzt hier irgendwie ein bisschen
Eisenerz ab,
dann passiert das
einfach nicht.
Wenn der Server mit dem nächsten Tick
nicht sagt, du baust jetzt Eisenerz ab.
Und
das ist ja auch der Grund, warum MMOs
jahrelang so träge waren.
Erinnert sich noch einer an die
früheren MMOs von
Tap-Target-Ding und
einzelne Ziele auswählen und dann
Input drücken und der Spell wird
gecastet und so. MMOs
waren und sind, auch
immer noch, bis auf ein paar Ausnahmen,
sehr gemächlich. Und das liegt daran,
weil MMOs mehr oder weniger synchronisiert
laufen für alle Spieler.
Es gibt mittlerweile schon ein paar Games,
die das trickreicher machen
oder in den letzten Jahren
auch über mehr oder weniger so
interaktive Kampfsysteme
haben in MMOs. Aber insgesamt
kann man sagen, sind MMOs immer noch
deutlich
gemächlicher und träger als beispielsweise
jetzt in Battlefield.
Und das liegt mit daran, weil MMOs
ziemlich synchronisiert laufen.
Aber das ist halt auch eines der Eigenschaften
von MMOs.
Okay, was haben wir denn hier sonst noch Interessantes?
Overwatch 2
fällt auseinander. Was haben wir sonst noch hier?
Volle Konzentration mitten in der Nacht.
Apple Vision Pro angeschaut.
Bei diesem Ding bin ich ja auch skeptisch.
Ich mein, es ist halt eine 3D-Brille.
Auch wenn Apple das irgendwie super
krass nicht... Die nennen das... Okay.
Apple nennt das Ding ja nicht
Virtual Reality Brille, sondern
Spatial...
Apple hat da wieder so ein ganz
geiles Wort dafür empfunden. Aber im Endeffekt
ist es halt eine VR-Brille.
Ich weiß nicht, ob das so ein Ding
ist, was sich so toll
durchsetzt. Ja, es ist von Apple
und viele Leute kaufen Dinger, weil sie
von Apple sind, aber es ist abfuck teuer.
Ich weiß nicht. Ich bin skeptisch,
ob das ein großer Erfolg wird, das Ding.
Volle Konzentration.
Okay, komm.
Ich flame noch
ein bisschen über Overwatch mal schnell.
Das ist
auch ein Thema.
Also ich flame ganz gerne über C++
und ich flame auch ganz gerne über Overwatch.
Es ist wieder Zeit, über meine Lieblings-
Videospiel-Firma zu reden.
Nachdem Overwatch seit Jahren in einer ziemlichen
Abwärtsspirale war, hat man sich gedacht, man
reißt das Ruder rum mit einem zweiten Teil.
Ein komplett neues Spiel,
viele Neuerungen und unfassbare...
Komplett neues Spiel, ja.
Das war wohl nix.
PvE wird das nicht geben und der Multiplayer ist
halt erstmal der Overwatch 1
Multiplayer zu 90%.
Wo man halt jetzt endlich mal wieder ein paar
Erweiterungen bringt, was man ja jahrelang hat
schleifen lassen für Overwatch 1.
Und ja, man hat die Grafik ein bisschen verbessert.
Und der Rest
ist, ja, halt mehr Microsoft...
Microtransaction heavy.
Spielspaß. Nur, dass es kein
komplett neues Spiel ist, es auch keine
vielen Neuerungen gibt und den Spielspaß
können wir vielleicht irgendwie
einklammern. Es ist viel um dieses Sequel
passiert und wir schauen uns mal an, wieso die
reinste Existenz davon ein ziemliches Mess ist.
Let's go. Ein ziemliches Mess?
Ist das auch ein geiler Satz, Alter.
Wupp, wupp, wupp, wupp, wupp.
Bevor wir anfangen, erstmal eine schnelle Brief
History zu Overwatch 1.
Als das Spiel 2016 rauskam,
waren alle gehypt und glücklich.
Ich wusste, dass er das sagt. Ich auch.
Ich auch. Und ich hab das, glaube ich,
so krass gecrindet, wie kaum ein anderes
Game die letzten Jahre über.
Ich hab das bestimmt
zwei Jahre am Stück einfach nur 24...
Nein, 24-7 nicht. Ich musste immer noch arbeiten gehen.
Aber jede freie Minute gespielt.
Mit Heroes und Abilities gab es
in der Form vor allem... Ich meine, ich war Level
keine Ahnung, 400 oder so in der
Beta allein schon.
...so gut noch nie und eine riesige
Community hat sich angefangen, um dieses Spiel zu
bilden. Große Persönlichkeiten schossen
um dieses Spiel herum aus dem Boden und
nicht lange nach Release hat sich die Overwatch
League gebildet, ein großer... Overwatch
League ist auch so ein Ding, ich fand's
nie gut. Von Anfang an nicht.
Das System.
Ich weiß jetzt nicht, ob ich da ausholen soll, aber zwei
Sachen. Erstens, das ist
quasi egal
ist, ob du gut oder schlecht warst.
Weil es keinen Aufstieg und
Abstieg gibt und das geht mit
dem nächsten zweiten Punkt einher.
Es gibt keine Tier 2
Szene. Dadurch, dass es
nur Overwatch League und nur den Fokus auf
Overwatch League gibt. Ich weiß, dass es
eine Tier 2, Tier 3
Szene gibt, aber niemand
interessiert sich dafür.
Wer hat schon mal Contenders von euch geguckt?
Und selbst wenn du Contenders
gewinnst,
heißt das ja nix.
Das heißt nicht, dass du dann aufsteigst mit deinem
Team in die Overwatch League. Du kannst Werbung
für dich machen, dass dein Team auseinander
gerissen wird, weil manche Spieler halt
von Overwatch League Teams gekauft werden.
Das ist alles. Also ich
fand das Overwatch League System nicht gut.
Von Anfang an nicht. Und
der Fokus darauf, dass du im Prinzip
kein Tier 2, Tier 3 hast und
auch keine Competition so richtig
sinnig in dem Game
hast, außer eben Overwatch League.
Die haben sehr viel,
also gerade was E-Sport angeht, die haben
unglaublich viel verschenkt.
Dadurch, dass Overwatch League so
gepusht wurde,
gab es dann ja irgendwann quasi auch
das, weiß ich nicht, ob es wirklich das Verbot war,
aber es wurde anderen
Anbietern sehr schwer gemacht,
Overwatch
Turniere zu bringen
und irgendwann hat auch die ESL
sogar die Weeklys eingestellt und sowas. Hey, wir
waren immerhin mal deutscher Weekly-Gewinner
damals, ja.
Wir waren im Vergleich zu internationalen Teams nie
wirklich gut, muss man auch
Fairness halber sagen, aber
ich würde sagen, wir haben damals
Overwatch schon ganz brauchbar gespielt,
ja. Aber es gab halt irgendwann, es
gab auch keine richtige Competition mehr. Es gab
Overwatch League und spätestens seit Overwatch League
gab es sonst nichts anderes mehr.
Und Tier 2
juckt keine Sau, Tier 3 gibt es nicht
und die haben auch viel verschenkt in Overwatch selbst.
Warum, und das frage ich mich
bis heute, warum hat man nicht versucht,
...
...
Ich meine Overwatch wollte von Anfang an
ja irgendwie schon ein bisschen
ein E-Sport-Game sein, ja. Warum hat man
nicht um diesen Ranking-Modus
was aufgebaut? Warum
gab es nicht automatisch
erstellte Weekly-Turniere,
die promotet wurden intern für die jeweilige
Liga, in der du gespielt hast? Oder
warum gab es nicht irgendwelche
... sagen wir
automatischen
...
Top 100
ähm ...
Aufstiegsspiele, irgendwas du hättest so viel automatisch
generierten Content in den Overwatch
... in den Overwatch Ranking-Modus
einbauen können, der halt
ähm gewisses Competition-Level
schafft eben auf allen Bereichen.
Weil so war es einfach
...
Jeda dachte
er ist nur in der jeweiligen
Leak, weil seine Teammates scheiße
sind, hat die ganze Zeit
...
Hat GG nach zwei Sekunden, wenn der erste Push nicht funktioniert hat.
Es war einfach nur von Arsch, wie sie das gemacht haben.
Es war auch viel zu roh.
Es gab drumherum auch nix.
Das Einzige, was es gab, Top 500 Badges.
Ja, geil.
Da kann ich mir jetzt was davon kaufen,
dass ich Season 1 Top 500 Badge hab.
Oder was heißt kaufen?
Von kaufen ist das falsche Wort.
Das war das Einzige.
Die hätten Competition auf jedem Level.
Schaffen müssen.
Und auch automatisch generierte Turnierbäume.
Du hättest so viel machen können.
Mit Competitive Overwatch.
Auf allen Ebenen.
Aber sowas wie Faceit oder sowas,
das ist natürlich undenkbar mit sowas wie einer Overwatch League,
wenn das irgendjemand anderes Competition-E-Sport-Sachen machen darf
aus Blizzard selbst.
Es ist scheiße gemanagt worden.
Das fuckt mich heute auch immer noch richtig ab,
das hatte so viel Potenzial.
Und irgendwann haben sie einfach gar nix mehr gemacht.
Irgendwann haben sie einfach gar nix mehr gemacht.
Gab's dann einfach nix Neues mehr.
Ab und zu gab's noch n Comic, ja, super.
So, und eines der größten Probleme für Leute, die jetzt nicht, ähm,
da irgendwie den harten Overwatch-Rank-Crime gemacht haben,
wie wir damals, sondern die einfach nur Overwatch Just for Fun gespielt haben
oder bisschen Ranked ab und zu und dann irgendwie, was weiß ich,
mal irgendwie Diamond gepiekt sind oder sowas.
So, ähm.
Was für die beschissen war, und das muss man sagen,
das ist heute zum Teil immer noch so,
Overwatch League war nicht, nicht, wie sagt man das auf,
so unwatchable, so wie so, das war nicht richtig schaubar einfach.
Du hast nicht verstanden, was passiert.
Zumal die auch jahrelang total bescheuerte Metas hatten.
Erinnert sich noch jemand an Goats?
Oder erinnert sich noch jemand an die Beta, äh,
äh, Double Winston, Double Reaper und so ein Geschiss?
Die hatten teilweise monatelang, wenn nicht sogar, ähm, Seasons lang,
Metas, die du nicht gucken konntest in der...
Habt ihr mal einen Goals-Match gesehen in der Overwatch League?
Das war nicht schaubar.
Du hast nicht verstanden, was passiert.
Du hast zwei Teams aufeinanderrennen sehen mit Tanks,
die sich im Prinzip die Köppe eingeschlagen haben,
bis irgendwo die Shields all waren,
bis irgendwie einer mal ein gutes, gutes, äh, Gravity-Field,
ich hab vergessen, wie die Saria-Ult heißt, äh, gesetzt haben und dann...
Und selbst, äh, das war nicht...
Das konntest du nicht gucken.
Es ist nicht so, dass die Struktur hinter der Overwatch League,
also unabhängig davon, dass mir das System nicht gefallen hat,
dass das irgendwie so wahnsinnig schlecht war
oder irgendwie die Events schlecht organisiert waren oder sowas.
Das Spiel, das Kern, der Kern eines Turniers war scheiße zu gucken.
Und wer kann das nicht sehen?
Und wer kann das nicht sehen?
Und wer kann das nicht sehen?
Niemand guckt sich ein E-Sport an, wo das vielleicht gut organisiert ist,
aber der Kern des Ganzen, nämlich die Matches, scheiße zu gucken sind.
Niemand. Niemand guckt sich das groß an.
Die ersten paar Overwatch Leagues waren auch recht gut, äh, gut besucht, ja.
Ähm...
Zu...
Auch als das noch neu war und das noch einen richtigen Hype hatte
und man auch noch so ein bisschen dieses
Korea vs. NA vs. EU-Player und so hatte, ja.
Aber danach, das ging rapide runter.
Das ging wirklich...
Das war fast so wie die Zahlen von New World auf Steam.
Gingen da so runter mit den Viewern von der Overwatch League.
Und ja, die Overwatch League hat sich vielleicht am Anfang,
ist vielleicht sogar besser gestartet, als man das erwartet hat.
Aber das ging rapide runter.
Und irgendwann sind die ja dann auch gewechselt von Twitch auf YouTube.
Und ab dem Zeitpunkt habe ich keine Ahnung mehr, wie Overwatch League gelaufen ist.
Ich habe nicht ein Match, legit, Leute.
Ich habe früher ab und zu noch geguckt.
Aber seit es von Twitch auf YouTube gegangen ist, die Overwatch League,
ich habe nichts mehr davon verfolgt, nichts mehr davon mitbekommen, nichts mehr geschaut.
Das war für mich einfach nur dead.
So.
So viel zum Thema Overwatch eSport.
Ihr merkt, das ist ein Thema, was mich immer noch ein bisschen aufregt,
wie verkackt sie das haben.
Obwohl das Spiel unglaubliches Potenzial gehabt hat.
Ich will jetzt nicht weitergehen, warum ich denke, dass es so ist und so das artet aus.
Moin Michael, 50 Spielejahren.
Pogu.
Raum für Competitors.
Positive Teams.
Es lief alles also ziemlich gut, bis alles auf einmal nicht mehr ziemlich gut lief
und immer weniger Spieler Bock auf das Game hatten.
Hast du Valorant gespielt? Nein.
Nein.
Es kamen immer mehr Charakter dazu, die das Game komplett auf den Kopf gestellt haben,
wie Brig, die komplett broken war, als sie rausgekommen ist.
Eine Sache, für die das Overwatch-Team bekannt war...
Das ist auch so ein Ding, ich muss da jetzt einfach nochmal reingrätschen.
Die neuen Helden, die rausgekommen sind.
Das muss man...
Okay, ich muss erst mal was Positives sagen dazu.
Moin Hyper Noob.
Nob.
Ich muss erst mal was Positives dazu sagen.
Die Helden, die released wurden, und die Sachen, die released wurden,
die waren zumindest meistens gut gemacht.
Ich finde nach wie vor, dass viele Maps in Overwatch
komplett Banane, Pepega, wie auch immer man das nennen mag, sind.
Die wurden von Leuten erstellt, die noch nie...
Nennen wir es mal...
Tja, FPS kann man nicht wirklich sagen.
Nennen wir es mal FPS.
Die noch nie FPS-Maps erstellt haben.
Die ersten Valorant-Maps, die ich gesehen habe...
Valorant nie gespielt, waren auch...
Okay, die ersten Valorant-Maps, die waren genau das Gegenteil zu den ersten Overwatch-Maps.
Die ersten Overwatch-Maps, die sahen gut aus.
Guckt euch sowas wie Kings Row an.
Finde ich heute immer noch eines der besten Maps.
Die sahen gut aus, waren aber vom Gameplay her lahm.
So, die ersten Valorant-Maps, kann ich nur sagen aus Zuschauerperspektive,
weil ich das Spiel nie gespielt habe.
Die ersten Valorant-Maps waren handwerklich schlecht gemacht, von der Optik her,
und wie die aussahen.
Aber...
Spielerisch ganz brauchbar.
Das war das komplette Gegenteil.
Und Overwatch-Maps sind langweilig.
Das ist auch so ein Punkt, den habe ich damals nicht verstanden,
wie die an diesem Map-Konzept immer dran festhalten konnten.
Die sind langweilig.
Overwatch-Maps bestehen in der Regel aus einem Weg.
Mit, wenn es hochkommt, mal einer oder zwei ab und zu Flanking-Routen,
wo sich eine davon gar nicht lohnt.
Es gibt eigentlich in Overwatch immer einen Weg, den man läuft.
Und Overwatch-Maps, gerade die Payload-Maps,
waren...
Und nicht nur die Payload, alle Maps,
alle Maps, waren rein auf Chokepoints ausgelegt.
Ja.
Temple of Anubis, du hast den Chokepoint nicht gehalten,
erster Punkt war weg.
Kings Row, du hast den, war weg.
Also, Overwatch-Maps waren langweilig.
Die waren basiert auf einem klaren Weg,
voll mit Chokepoints.
Wo du durch musstest.
Ich fand das Map-Design noch nie gut in Overwatch.
Bei den neueren Maps hat es sich ein bisschen gebessert.
Und dann kam noch so spielmodisch wie 2CP dabei.
Das war nicht nur bei vielen unbeliebt,
das war, finde ich, auch ein richtiger Kack-Spielmodus.
Wie kommt man auf die Idee, Temple of Anubis,
wie kommt man auf die Idee,
einen Defender-Spawn direkt hinter den letzten Capture-Punkt zu setzen?
Ja.
Da kommen diese komischen Overtime-Regeln dabei.
Und das war alles irgendwie nur mäßig, mäßig gut.
Getragen wurde Overwatch im Endeffekt durch die unterschiedlichen Helden
und die Dynamik, die sich daraus ergeben hat.
Problematisch war,
dass du oftmals mehr oder weniger das Gleiche auf beiden Seiten gespielt hast
und das auf jeder Map bei jedem Match.
Obwohl es recht viele Helden gab.
Was dazu gehört,
geführt hat, dass es einfach langweilig war.
Und in Kombination,
dass du es nicht, du konntest es nicht gucken.
Du konntest Overwatch dir einfach,
Overwatch eSport konntest du dir nicht angucken.
Du hast nicht verstanden, was passiert.
Das hast du bei den Castern gemerkt,
die random Bullshit gelabert haben.
Ich hätte es nicht besser gekonnt, ja, keine Frage.
Weil ich hätte auch nicht verstanden, was passiert,
außer ich hätte mitgespielt.
Und die Spectator und so, die waren alle komplett lost.
Also ich meine, ohne Mist,
habt ihr euch mal zu Goals-Zeiten,
in Overwatch-Matches angeguckt, ja?
Und Casts, im Prinzip war das reines,
ich hype permanent durch im Cast.
So, oh, was macht der denn jetzt?
Oh, yeah, he crafted, oh nein, er hat überlebt.
Oh, jetzt kommt wieder was.
Oh, ist einer gestorben?
Die sind komplett ausgeflippt die ganze Zeit,
weil die nichts zu dem Game sagen konnten.
Du konntest zu dem Game nichts sagen.
Vergleich das mal mit einem ordentlichen CS-Go-Cast.
Die können dir sinnvoll was zu dem Game sagen.
Erstens ist CS vielleicht auch ein bisschen einfacher zu observen.
Ja, du hast gute Observer.
Die verstehen, wann, wie, wo was passiert.
Dass die kaum Engagements verpassen oder kaum Traits verpassen.
Und die können dir das auch sagen in CS.
Ja, die können dir auch sagen, so nach dem Motto hier,
was weiß ich, die Position misst er normalerweise nie,
seine Sniper-Shots und das hat er jetzt so gespielt,
weil irgendwie der dritte Pixel von rechts von der Smokegranate
nicht richtig den Balkon gecovert hat und so Zeug.
Das können die dir in CS erzählen.
Das konnte niemand in dieser Tiefe und sonst was.
Das war halt einfach nicht schön zu gucken.
Und das ging dann bergab.
Und das ist was, was mich heute wirklich noch aufregt,
weil ich das Spiel gern gespielt habe
und das Spiel so unglaublich großes Potenzial hat,
was man hier ausgeschöpft hat.
Ja, egal, weiter geht's.
Da war es auf jeden Fall nicht, ihr Spiel gut zu balancen.
Ja, gut.
Overwatch-Balance ist typische Blizzard-Balance.
Typische Blizzard-Balance habe ich nicht.
Habe ich euch ja schon ein paar Mal erklärt.
Typische Blizzard-Balance gehen so, ja.
Also das hier ist OP und das hier ist Suck.
Sucked.
So, und Blizzard-Balance war so.
Das ging nicht gescheit.
Entweder war was OP oder es war scheiße.
Oder oft, ich will nicht sagen immer,
aber in diese Falle sind sie halt oft getappt.
Ich würde sagen, ein Spiel, was man wirklich als gutes Beispiel,
und da könnt ihr mir widersprechen,
wenn ihr da richtig voll dabei seid,
aber rein wieder aus Beobachterperspektive
und als jemand, der ab und zu ein paar Dota-Streams guckt.
Ich finde, ein Spiel, wo man wirklich sagen kann,
dass es balancing-technisch halbwegs auf die Reihe kriegt,
ist Dota 2.
Ich gucke immer mal on-off ein bisschen Dota.
Ihr wisst, ich spiele eigentlich so gut wie keine MOBAs.
Ich spiele Dota auch nicht selbst.
Ich gucke mir beispielsweise die jährlichen offiziellen Turniere an,
die es dazu gibt.
Und das war mal bei Dota.
Was ich da sagen muss, ist, die haben es irgendwie geschafft.
Klar, es gibt Meta-Picks, gibt es immer.
Aber die sind bei Dota doch relativ vielfältig.
Also, wenn man sich beispielsweise mal anguckt,
so die Hero-Picks über die letzten Turniermonate,
da wird man feststellen, die spielen halt nicht nur irgendwie,
was weiß ich, 10 Helden oder so.
Die spielen halt, keine Ahnung,
vielleicht, vielleicht nicht.
Aber die spielen halt, keine Ahnung, vielleicht,
nicht, lass es mal 25 Helden sein.
Klar, mein Dota hat massig Helden.
Viele von denen werden professionell auch nicht gepickt.
Aber es ist, ey, es ist immer ein Vielfaches besser,
vielfältiger als das, was die in Overwatch hingepapriziert haben.
Aber wenn 80 der 120 Heroes OP sind,
ist das doch, spricht das doch schon mal für das Game, oder?
Aber selbst im E-Sport-Bereich, ich weiß nicht, wie die Pick-Rates,
aber ich glaube, so um die 30 Heroes oder so wurden gepickt dann.
Ich habe letztens mal so eine Tabelle gesehen.
Und das ist ja schon, das ist ja schon wirklich sehr vielfältig
im Vergleich zu dem, was man in Overwatch,
in Overwatch gesehen hat.
In Overwatch hattest du, hast du die gleichen sechs Helden,
wirst die gleichen sechs Helden jede Runde, jedes Match gehabt.
Es kam viel zu oft vor, dass es bestimmte Metas gab.
Und wenn man irgendwas außerhalb dieser Meta gespielt hat,
wurde man komplett gefickt.
Die Goats-Meta war lange ein Bestandteil vom Daily Business in Overwatch.
Man hat statt DPS, Healer und Tanks einfach nur noch Healer und Tanks gespielt,
weil wer braucht schon DPS?
Man hatte quasi unendlich Leben.
Ich habe eine Sache noch vergessen zu sagen.
Ich muss jetzt tatsächlich ein bisschen,
da müsst ihr jetzt durch,
ich muss jetzt ein bisschen über Overwatch meckern.
Weil ich sagen wollte, ich wollte ja noch was Positives sagen.
Ich fand, neben dem, was ich eben gesagt habe,
die Helden, die sie eingeführt haben, alle immer gut.
Rein von der Idee hinter den Helden.
Das Problem mit den neuen Helden war, die sie eingeführt haben,
dass das meistens, nicht immer, aber das waren so Helden,
die waren mega stark mit einfachen Abilities.
Also hast du zum Beispiel sowas wie Brigitte.
Du musstest dich, du musstest, du stellst dich vor den Gegner, drückst einen Knopf, er ist gestunt.
Dazu musstest du nichts machen.
Ey, bei McCree mit dem Flashbang, musst du ja zumindest noch am Schild vorbeiwerfen.
Du bist hin, du hast dein Schild gehabt, du hast den Gegner gestunt.
Du musstest nicht, du musstest einen Knopf drücken, den Gegner zu stunten.
Das war Counter zu, nahezu allem, was es in dem Game gab.
Und das war easy as fuck zu spielen.
Du musstest das auch spielen, obwohl es eigentlich gar keinen Bock gemacht hat.
Ich bin ja immer noch der Meinung, hier, bestes Overwatch-Grill und so.
Aber die Mechanics, das war voll für den Arsch.
Und es gab einige solche Helden.
Maze to the Face, genau.
Es gab einige solche Helden.
Es gab so Sachen wie Doomfest, das ist ein bisschen rausgefallen.
Das war halt auch lächerlich zwischenzeitlich, ja.
So mit Aufladen und quer durch die Map dashen und alles so wegklatschen.
Aber das war, Doomfest gut zu spielen, war schon nicht einfach.
Konnte ich nie.
Aber so Sachen wie...
Das...
Das muss einfach nicht sein.
Und das Problem bei Overwatch war halt, das war dann erstmal ein Dreivierteljahr im Game,
bis Blizzard auf die Idee gekommen ist, man könnte ja mal was dran ändern.
PS.
Man hatte quasi unendlich Leben und die Tanks und Healer haben schon irgendwie genug Damage gemacht.
Goats, Omega-Lul.
Alle die PS-Heroes über ein Jahr lang quasi komplett ausgestorben sind in dem Spiel.
Wenn irgendwas in dem Spiel falsch lief, hat das Overwatch-Team erstens viel zu lange gebraucht, um das Problem zu fixen.
Ja, auf jeden Fall.
Die haben ewig gebraucht mit Patches teilweise.
Und zweitens.
Bei dem Versuch, es zu fixen, gleichzeitig zehn andere Probleme erzeugt.
Ja.
Die Antwort auf die Goats-Meta war beispielsweise, rollenbezogene Ranking-Queues einzuf...
War's das?
Bin gar nicht mehr so sicher jetzt.
Das kam so in dem Dreh irgendwann, ja.
Vorher war es unmöglich, die PS zu spielen und jetzt umso mehr, da man fucking Viertelstunde plus auf ein Game warten musste.
Von solchen Sachen gab es ab dem Punkt am laufenden Bande welche in Overwatch,
weshalb immer mehr große Persönlichkeiten zu anderen Games kamen.
Und es wechselten, genauso wie die Spieler es taten.
Es hat irgendwann einfach wirklich gar keinen Spaß mehr gemacht, dieses Spiel zu spielen.
Der einzige Teil an Overwatch, der nicht...
Achso, Overwatch hat keinen Spaß mehr gemacht, Overwatch hat nur noch aufgeregt.
Und das war der Zeitpunkt, wo ich keinen Bock mehr hatte.
Das ist bei mir oft so.
Egal, egal ob ich Games spiele oder ob ich Serien gucke oder sonst was.
Manchmal kommt der Moment, wo ich Sachen einfach nicht mehr nachvollziehen kann, einfach nicht mehr mit, mit, mitmachen will.
Beispielsweise gibt es auch Serien, wenn ich die gucke und dann irgendwie...
Staffel 3 ist und ich mir denke, alter, warum verhalten die sich jetzt alle so komplett entgegengesetzt zu dem,
wie es in Staffel 1 und 2 war und alter, warum ergibt das jetzt alles gar keinen Sinn mehr?
Dann nervt es mich nur noch.
Dann macht es mir keinen Spaß mal zu gucken, dann nervt es mich nur noch, dann höre ich auf die Serie zu gucken.
Ich muss nicht zwangsläufig alles bis zum Schluss gucken.
Und bei Games ist es auch so.
Wenn mich ein Game nur noch nervt oder nur noch aufregt, dann kann ich es mir einfach nicht mehr geben, ja.
Und das ging nicht nur mir so.
Es gab viele Overwatch-Projekte.
Pros, die ihr Geld damit verdient haben.
Die immer wieder auch in ihren Spielen, in ihren, in ihren Sachen geflamed haben.
So nach dem Motto, alter, wenn ich, wenn ich...
Die haben in ihren, die haben in ihren Streams dann teilweise CS gespielt und haben halt gesagt,
oh fuck, alter, ich hab gleich, ich hab gleich Overwatch-Training.
Seriously, ernsthaft, kein Spaß, ja.
Überleg dir mal, du hast ein Overwatch-Pro, da spielt was anderes on-stream und du sagst,
scheiße, alter, gleich ist wieder Overwatch-Training.
Ja, oder so, alter, ich spiel dieses Kack, ich spiel diesen Kack doch eh nur, weil ich Geld dafür kriege.
Das ist vorgekommen.
Die haben da auch keinen Bock drauf.
Die haben das nur gespielt, weil es Geld bringt.
Gut, ist ja nicht verwerflich, aber bezeichnend für das Spiel.
Nicht tot, das ist die Porno-Industrie.
Aber Rettung war...
Der einzige Teil an Overwatch, der nicht tot ist, ist die Porno-Industrie.
Wundert mich nicht.
Da geht er mal.
Und mich würde nicht wundern, wenn das in Valorant genauso aussieht.
Ich will jetzt nicht googeln, weil das ist auf jeden Fall MonkaToss.
Aber ich wette mit euch, bei Valorant ist es genauso.
Das ist klar.
Aber Rettung war in Sicht.
Overwatch 2 wurde auf der BlizzCon 2019 angekündigt.
Episch große Trailer.
Und dann war es erstmal irgendwie drei Jahre Funkstille drum.
Und jetzt gibt es nicht mal mehr PvE, was eigentlich der Seller werden sollte für Overwatch.
Es wurde darüber geredet, wie viel Liebe in das Game geflossen ist.
Neue...
Ja, und dann ist Jeff weg und sie haben das Game wahrscheinlich nochmal umgekrempelt.
Neue Maps und der große Knaller, verschiedene PvE-Game-Modi.
Ja.
Das war quasi das.
Das ausschlaggebende Argument, wieso das Sequel überhaupt erscheint.
Es soll nun eine große Kampagne mit richtiger Story und richtigen Missionen geben.
Jeder Hero soll ein Skilltree bekommen.
Ich fand die Idee mit dem Skilltree nice.
Das war wahrscheinlich nur für PvE gedacht.
Aber die Idee dahinter, dass man Helden nicht nur picken kann, sondern ein bisschen customizen kann, fand ich sehr gut.
Weil, ich hatte mich in Overwatch schon damit abgefunden, dass mehr oder weniger die gleichen Helden immer gespielt werden, gegen mehr oder weniger immer die gleichen Helden.
Aber vielleicht hätte man mit Skilltrees schon noch ein bisschen Varianz da reinbringen können.
Das fand ich eine gute Idee.
Ja, auch wenn es erstmal nur für PvE gedacht war, aber vom Grundansatz her fand ich das eine gute Sache.
Es ist halt leider auch komplett weg jetzt, ne.
...kommen, die man mit der Zeit immer weiter aufleveln kann.
Im Zuge der BlizzCon wurde sogar direkt die erste PvE-Mission gezeigt.
Rio de Janeiro wurde das Ganze genannt.
Es war ein Spektakel, gemischt aus gut gemachtem CGI-Cutscenes und verschiedenen Etappen, in denen man gegen Wellen an Bots kämpfen musste.
Das alles sah wirklich...
Ich muss ehrlich sagen, ich fand das damals, sah das auch schon nicht sonderlich innovativ und toll aus.
Ich weiß, viele haben das gefeiert, ich fand das da ziemlich...
Also ehrlich gesagt, ich fand das da damals schon ein bisschen uninspiriert aus.
So nach dem Motto, ja, das spielst du einmal und dann nie wieder.
...wirklich sehr vielversprechend.
Fand ich nicht, fand ich nicht.
Aber es war eine gute Sache.
Also ich, ein PvE-Modus fand ich eine gute Sache.
Weil ich immer noch der Meinung bin, dass die Welt von Overwatch durchaus eine gute Singleplayer-Kampagne hergeben würde.
Und das ja auch was ist, was Blizzard eigentlich kann.
Das ist ja das, wo ich so ein bisschen drauf gehofft habe.
So eine Horde, so ein Competitive PvE-Horde-Modus, schön und gut.
Aber eine Singleplayer-Kampagne wäre wirklich richtig geil gewesen für Overwatch.
Also Blizzard, was eine gute Singleplayer-Kampagne machen kann.
Die Welt hätte es hergegeben und die unterschiedlichen Helden und so hätten sicherlich auch eine interessante Story hergegeben.
Hat sich aber Blizzard gedacht, nope, damit lässt sich kein Geld verdienen.
Hat sich aber Blizzard gedacht, nope, damit lässt sich kein Geld verdienen.
Und damit lässt sich kein Geld verdienen.
... und ausserdem reden wir hier von Blizzard.
Auch wenn in den letzten Jahren, ich sage mal, ein paar unvorteilhafte Dinge passiert sind,
kann man nicht absprechen, wie gut viele Videospiele von ihnen sind, vor allem aus dem PvE-Segment.
Die können das einfach.
Die Jahre nach dieser Ankündigung sind also vorbeigezogen und man hat sich langsam gefragt, wo das Spiel nun bleibt.
Viel, viel Gutes hat Blizzard ja auch in den letzten Jahren nicht hinbekommen.
Die haben jetzt mal wieder mit Diablo 4 endlich was, was anscheinend nicht nur auf den ersten Blick was tauscht.
Die haben jetzt mal wieder mit Diablo 4 endlich was, was anscheinend nicht nur auf den ersten Blick was tauscht.
Die haben jetzt mal wieder mit Diablo 4 endlich was, was anscheinend nicht nur auf den ersten Blick was tauscht.
sondern wohl auch ein bisschen substanz hat mal gucken wie sie ein paar monaten aussieht das
einzige was ich in den jahren nach der ankündigung so getan hat ist das overwatch 1 komplett krepiert
ja immer weniger schlag nichts dafür nach 2000 gab ja auch ein content echo rausgekommen ist
kam förmlich gar kein update mehr für das spiel raus man hat gemerkt dass das spiel für blizzards
selbst ein sinkendes schiff ist und man dachte das hat jede manpower nun zur overwatch 2 geschickt
wird um dort halt den ganzen neuen content zu entwickeln ist ich gehe 2022 war es endlich so
weit um die beta zur overwatch 2 ging an den start twitch zuschauerzahlen explodierten da
man als user ein beta key bekommen hat wenn man für mehrere stunden ein streamer geschaut hat
der die beta spielt nach fünf stunden xqc konnte ich selbst auch endlich in die overwatch 2 beta
reingehen und ich sag's euch ganz ehrlich es hat wirklich spaß gemacht es hat sich so angefühlt
als wäre wieder 2016 ich und die boys einfach ein paar runden overwatch grinden ich selbst habe das
spiel seit jahren halt auch nicht mehr gespielt hat der erste teil ab einem gewissen punkt wie
gesagt wirklich gar keinen spaß gemacht
ich hatte keinen spaß an der beta war das jetzt irgendwie ein krasses sequel war sondern einfach
weil es overwatch war und auch mal wieder in neue sicherheit wirklich kein schlechtes spiel am 4
oktober 2022 kamen overwatch 2 endlich für jeden raus und die leute wo erkennt man diesen sound
hier oktober 2000 watch ist an und für sich halt wirklich kein schlecht ich weiß dass es nur noch
15 sound aber wo erkennt man den spiel am vierten oktober fremd request in irgendeinem game mit
ja das kann sein das klingt gut menü aufmachen ja ja ja das kann durchaus sein 2022 kam overwatch 2
endlich für jeden raus und die leute waren gehypt beziehungsweise naja nicht wirklich gehypt weil
der große point von overwatch 2 die pve modi nicht existent waren man hat also jetzt schon sein spiel
so halb rausgebracht weil overwatch 1 halt wirklich könnte man nicht sagen dass die hälfte von overwatch 2 eigentlich overwatch 1 ist
könnte man nicht sagen dass die hälfte von overwatch 2 eigentlich overwatch 1 ist
könnte man nicht sagen dass die hälfte von overwatch 2 eigentlich overwatch 1 ist
krank verreckt ist und naja geld ist immer noch geld aber was sind jetzt wirklich die unterschiede
zwischen den beiden spielen es gibt drei neue heroes sechs neue maps und einen komplett neuen modus namens push
ja die grafik sieht ein bisschen besser aus außer die grundlegende balance anpassungen aber das ist nichts wofür man vier jahre gebraucht hat oder ja
mit ein paar reworks von heroes einherging ein paar davon sehr subtil wie ein bisschen mehr damage
die mussten die heroes ja rewirken weil es jetzt ein spieler weniger auf jeder seite ist das blieb
Ging ja gar nicht anders.
Musste es wieder re-worken.
Aber auch sehr groß mit Heroes wie Orisa, die sich so ziemlich gar nicht mehr wieder vorgespielt haben.
Der größte Change ist aber der Fakt, dass nun 5 gegen 5 statt 6 gegen 6 gespielt wird.
Man spielt jetzt nur noch mit einem Tank.
Ich persönlich habe auf jeden Fall gar nichts gegen diese Entscheidung, dass sich jedes Teammitglied nun etwas wichtiger anfühlt.
Man hat das Game jetzt ein bisschen mehr selbst in der Hand und hat das Gefühl, mehr beeinflussen zu können.
Das war es aber so ziemlich.
Ein paar nette Änderungen, die 3 Jahre Wartezeit auf jeden Fall rechtfertigen.
Haltet euch fest, aber ich habe von der größten Neuerung noch gar nicht geredet.
Nämlich der Shop.
Es gibt nun einen Battle Pass, mit dem man zahlreiche Sachen freischalten kann, wie neue Heroes.
Ganz recht.
Da das Spiel nun Free-to-Play ist, hat man nicht mehr alle Charaktere von Anfang an,
sondern muss diese erst freischalten oder, naja, ein paar Euronen investieren.
Außerdem kannst du Skins kaufen.
Skins gibt es allgemein so ziemlich jedem Free-to-Play-Online-Game zu kaufen,
aber an Fortnite bezahle ich 10 Euro dafür, dass ich Vegeta spielen kann
und mich in einen fucking Super Saiyajin Blue verwandle,
während ich in Overwatch 2 20 Euro dafür bleche, dass mein Winston rot ist.
Und auch wenn es durchaus ein paar...
Ja, Skinpreise in Blizzard Games, ne?
...neue Sachen in Overwatch...
In Diablo 4 kostet ja auch irgendwie ein Set irgendwie 28 Euro und sowas.
...2 gibt wurden auch viele Sachen willkürlich aus dem ersten Teil,
das Levelsystem wurde komplett entfernt.
Ich meine, es gibt ja jetzt den Battle Pass, den man leveln kann.
Ja, aber auch blöd, man sieht nicht, wie lange die Leute das schon crienten.
...sehen, ob Leute Pre-Mates sind.
Man kann nicht mehr on fire sein.
Ach, das geht nicht?
Es gibt keine Zusammenfassung mehr am Ende von Matches, geschweige denn die Karten und Auszeichnungen.
Man kann seine Waffen nicht ingame auschecken, obwohl genau das in den Trailern gezeigt wurde.
Die haben das in den Trailern drin, aber nicht im eigentlichen Spiel.
Echt jetzt?
Es gibt jetzt zwar 6 neue Maps, aber dafür wurden...
...5 alte komplett...
Ja, 2CP wurde entfernt.
2CP ist auch ultra Schrott, Alter.
Ich hätte es cooler gefunden, sie hätten vielleicht die 2CP-Maps irgendwie zusammengefasst zu einer Push-Map oder irgendwas anderes.
Ganz rauswerfen ist doof.
Sie gehören für mich irgendwie immer noch in Overwatch dazu, aber 2CP war so ein Schrott-Modus, Alter.
...entfernt.
Man könnte meinen, dass der Re-Release unter Overwatch...
2CP ist wieder drin?
What?
Oh, nee.
Schrott, Alter.
...Watch 2 nur Blizzards Entschuldigung dafür, ist das Spiel Free-to-Play rauszubringen,
um so noch mehr Geld aus dem Ganzen abmelken zu können.
Außerdem halte ich es für ein Industriestandard, solche Sachen wie neuen Content oder Balancing in ein Game reinzupatchen,
statt direkt ein komplett neues Spiel rauszuhauen.
Die Sachen, die hier dazu gekommen sind, rechtfertigen auf gar keinen Fall ein neues Game.
Das Einzige, was mich jetzt noch optimistisch stimmt, ist der angekündigte PvE-Story-Modus.
Man merkt, dass wirklich viel Liebe darin geflossen ist und das wäre immerhin eine Begründung für ein komplett neues Spiel.
Der große Point an Overwatch 2, der Grund, wieso dieses Spiel überhaupt existiert, wurde einfach so aus dem Nichts gecancelt.
Die Begründung war, dass immer mehr Ressourcen weg vom Online-Game gezogen wurden und man den Fokus verloren habe.
Man könne sich nicht um den PvE-Modus kümmern, ohne den PvE-Modus.
Also, diese Pressemeldungen oder diese Statements sind immer so pepege, Alter.
Wisst ihr, was für mich eines der krassesten pepege Statements in letzter Zeit war, die rausgekommen sind?
Was?
Was?
Was?
Hat jemand von euch das Gollum-Game mitbekommen?
Nur mal so, am Rande gefragt.
Es gab nämlich...
Nein.
Also, es gab mal wieder ein Game im Herr-der-Ringe-Universum und man hat Gollum gespielt.
Ich habe es mir nicht gekauft.
Ich werde es mir auch nicht kaufen.
Zumindest, das Game sah von Anfang an übelst, übelst für den Arsch aus.
Und das Game ist rausgekommen, war halt uninspiriert und für den Arsch.
Da wurde quasi schon direkt...
Direkt paar Tage nach Release wurde ein Entschuldigungsstatement rausgehauen
und dass man jetzt hart daran arbeiten wird, so alle Expectations zu erfüllen und sonst was in der Richtung.
Und es war sofort klar, als man diese Meldung gelesen hat,
dieses Statement, das wurde schon geschrieben während der Entwicklung.
Die wussten, dass das Scheiße ankommt.
Die wussten, dass es ein Kack-Game ist.
Die haben quasi das Statement...
Das Statement wurde quasi...
Parallel zum Game schon geschrieben.
Anders kann es...
Echter Wahnsinn.
So ein PP-Gakram.
Die haben mittlerweile...
Das ist wirklich Triple-A-Development heutzutage.
Man schreibt die Entschuldigung an die Community und man gelobt Besserung schon bevor das Game überhaupt fertig ist.
Das ist schon fertig geschrieben.
Liegt in der Schublade.
Das liegt in der Schublade ungefähr so, wie...
Ich habe mal eine Doku gesehen zur Mondlandung.
Leute, also...
Flache Erde und so.
Wir lassen es jetzt mal komplett raus.
Aber ich habe mal eine Doku gesehen zur Mondlandung.
Von der ich persönlich auch denke, dass sie stattgefunden hat.
Zumindest...
Jetzt mal Spaß beiseite.
Und dort wurde erzählt, dass selbst Experten gesagt haben, wenn sie optimistisch sind,
sie rechnen mit einer 50-50 Chance, dass das klappt.
Und nicht nur eine 50-50 Chance, dass das klappt, sondern eine 50-50 Chance,
dass die Astronauten wieder lebend heimkommen.
Und es wurde damals schon für mehrere Fälle wurden Reden und Presseerklärungen vorgeschrieben.
Für den Fall der Fälle, dass das passiert.
So, Rakete explodiert beim Start.
Sie kommen nicht mehr zurück.
Es crasht auf den Mond.
Sie stranden auf dem Mond.
Da wurden im Vorfeld schon Pressemeldungen und Reden geschrieben.
Die lagen dort in der Schublade.
Für den Fall der Fälle.
Und so ungefähr stelle ich mir das aktuell bei Triple-A.
Entwicklung vor.
Man schreibt die Entschuldigung schon mal im Voraus,
dass man sich ordentlich Gedanken zu machen kann.
Und sobald es dann eintritt, kann man die rausholen und direkt auf Twitter posten.
So wirkt das für mich mittlerweile.
Das ist halt leider mittlerweile so Triple-A-Game-Development.
...VP-Modus zu vernachlässigen.
Wo ich mich frage, wozu zum Fick wurde Overwatch 2 überhaupt schon veröffentlicht,
statt zu warten und sich in Ruhe um den PvE-Mode zu kümmern.
Oh.
Zu all dem Ganzen muss man aber sagen,
dass das Team von Overwatch 1 oder selbst,
das Team von Overwatch 2 am Anfang,
gar nichts mehr mit dem heutigen Overwatch 2-Team zu tun hat.
Super viele Leute haben im Laufe der letzten Monate und Jahre das Team verlassen
und ich kann mir vorstellen, warum.
So wie das alles hier verlaufen ist,
hat sich das bestimmt niemand aus dem Team gewünscht.
Man kann sehen, wie passioniert und talentiert viele in der Crew sind.
Die Trailer sehen teilweise so cool aus.
Man weiß, dass die Leute etwas Großes aus dem Spiel machen wollten.
Und das stelle ich mir extrem demotivierend vor.
Aber du steckst da wirklich drei Jahre vollste Energie rein
und dann wird sowas draus gemacht.
Man weiß leider aber auch, dass die Bosse von oben vor allem eins wollten,
nämlich Geld und zwar so schnell wie möglich.
Natürlich.
So sehen wir ein Produkt, das eigentlich so gut hätte werden können,
komplett unfertig und unter seinem Potenzial rausgeballert wurde.
Es ist einfach nur schade und ein perfektes Sinnbild
für den aktuellen Stand der Gaming-Industrie.
Da hat er recht.
Ja.
Ja.
Ja, da würde ich ihm recht geben.
Es ist 12 Uhr, Leute.
Hab Hunger.
Wartet mal, was es heute gibt.
Ihr kommt nicht drauf.
Lachs mit Nudeln, korrekt.
Ihr habt es zu schauen.
Ich seh schon, ihr habt das Pattern erkannt.
Auch ohne Regex.
Ich erinnere dich nicht dran, aber du hast dich gerade selbst dran erinnert.
Alles klar, Leute.
So.
Gibt es irgendjemanden, den wir hosten können?
Mal auf die Schnelle geguckt.
Wem follow ich denn, der gerade on ist?
Vielleicht deutschsprachig und nicht so groß.
Mal gucken.
Sehe ich jetzt niemanden.
Gut, dann geh ich jetzt off.
Ich hab Hunger, Leute.
Bis denn.
Macht's gut.
See you.
