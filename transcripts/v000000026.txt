So Leute, ich hatte jetzt die Auswahl, ob Battlefield 5 oder ein bisschen an unserem Meme-Board weiterprogrammieren.
Ich war schon kurz davor, Battlefield 5 anzumachen.
Ich habe quasi schon so da gesessen.
Gerade Battlefield 5 starten, da habe ich mir gedacht, nee, eigentlich hast du keinen Bock.
Eigentlich hast du keinen Bock.
Das ging mir so auf den Sack eigentlich.
Ich habe da nochmal so drüber, wie nennt man das, resümiert.
Ich habe da noch ein bisschen immer, gestern Abend bin ich in mich gegangen, irgendwie hat mir Battlefield 5 nicht gefallen.
Zumindest vom ersten Eindruck hier in der Alpha.
Da waren so viele Sachen dabei, die nicht gekonnt sind einfach.
Wo ich mich frage, da ist keine Leute mehr, warum?
Ich weiß nicht.
So, jetzt mal kurz Musik.
Ich will sie leiser machen und was anderes anmachen als 24-7 Twilight Princess Musik.
Was machen wir an?
Was machen wir denn mal an?
Gibt es denn da so Schönes?
Lass mal kurz überlegen.
Was könnte man dann schön, irgendwas Entspannendes?
Guck mal mal, was es hier gibt.
Chill Music Radio.
Horizon Zero Dawn Soundtrack, den kenne ich nicht.
Taugt der?
Gachi Bass.
Machen wir an.
Da wird zu viel gesungen, weil das ist nicht entspannt genug.
Ost.
Oh, 4 Stunden ist gut.
Das ist zu monkares.
Ich brauche irgendwas Entspannendes.
Depth of Field Mix.
Was?
Was für ein Mix?
Das klingt entspannt.
Das klingt entspannt.
Ich habe Befehle.
Nein, nein, nein, nein, nein.
Das hatten wir gestern schon.
Das reicht.
Oder ich muss euch wieder quälen.
Heute nicht.
Heute nicht.
Heute ist gut.
Heute nicht.
Komm, Leute.
Bevor es losgeht.
Wir müssen jetzt.
Wir müssen noch einmal.
Wir müssen noch einmal den Mega Upload Song anmachen.
Den haben wir schon lange nicht mehr gehabt, den Mega Upload Song.
Das ist doch schlecht.
Bevor wir anfangen
Upload to me today
My name is Peter
Low, low, low
Ob die Typen wussten, in was sie da eigentlich auftreten?
Never, oder?
Niemals
Mega Upload
I use mega Uploads, man
And I like to use mega Uploads
I like mega Uploads
So schlecht
I like mega Uploads
Aber, ich mein, so catch schon, ne?
I love mega Upload, because it moves fast, just like I like it
Mega Upload
Mega Upload
Das müssen wir abbrechen, das müssen wir abbrechen kurz vor Schluss
Weil dann loopt das ja nur noch
Oh, ich weiß, was wir dann
abbrechen
Mega Upload
Easy
Los, wir sagen 10 Minuten
Alter, Chat, ist ja gut
Die Internet
Bit by bit
Unlimited
It's a hit
It's a hit
M-E-G-N
M-E-G-N
M-E-G-N
M-E-G-N
M-E-G-N
M-E-G-N
M-E-G-N
M-E-G-N
M-E-G-N
M-E-G-N
M-E-G-N
M-E-G-N
M-E-G-N
M-E-G-N
M-E-G-N
M-E-G-N
M-E-G-N
M-E-G-N
M-E-G-N
M-E-G-N
M-E-G-N
M-E-G-N
M-E-G-N
M-E-G-N
M-E-G-N
nicht mehr video ich glaube der spiel auf das wird gerade irgend so ein rpg die ram auslastung
warum ja die ram auslastung spackt beim ersten laden der bilder übelst rum da guckt euch das
mal an aber guckt bis dabei bis der garbage collector einmal gelaufen ist dann ist gut
sagt kein 10 plus plus dauert ein bisschen ist aufgeräumt und schon
nicht schlimm geht dann auch wieder runter gab es kollektor tucke 18
obs 10 hotkey nicht obs 10 hotkey
viel besser
ich halte ich halte es aber auch wo habe ich es auf
das geht so lange
ruhe jetzt die car one hour kermit jazz remix
ich habe gleich darauf im screen
sagt
das
ist doch auch leute das ist wieder ein grund dafür warum ich dieses ding
programmiert habe weil ich immer vergesse sachen auszublenden
das lassen wir jetzt das ist meins
kermit jazz remix mal für jemanden komplett out of the loop was kann das
tun bilder anzeigen jetzt anzeigen also spiele anzeigen gibt es anzeigen demnächst sounds up
spielen auf hotkeys gelegt
das kann man das beste ist der streamer sieht es selbst was bei obs hotkeys nicht
der fall ist und es hat keinerlei auswirkungen auf andere anwendungen
guckt ja ich kann durch klicken ich kann durch die also das stört nicht das ist
wie als wär es nicht da und das disc red auch kein fokus irgendwie im hintergrund von guckt
Wenn ich es ein- und ausblendere, das Markieren bleibt immer noch da.
So, und was wir heute machen, ist, wir bauen ein Webinterface ein.
Weil aktuell, ich zeige euch mal den Ordner.
Guck mal, ich habe jetzt zum Beispiel, wenn ich hier diesen Ordner nehme,
als Quelle für meine Bildchen und für meine Shortcuts.
Also aktuell hat das Ding auch noch keine Konfliktdatei oder so.
Das funktioniert relativ simpel.
Man legt halt alle Bilder, die man hat, in einen Ordner.
Und auf den Hotkey, wo man das binden möchte, also auf die Tastatur,
so ein bisschen wie mit dem Streamdeck von Elgato,
sagst du zum Beispiel hier, was willst du, PogChamp auf P,
0.3D ist auf 3,
auf F7 ist Blast RNG, kannst du drauf mappen.
Auch während des... genau.
Das wären ganz schön viele Hotkeys.
Das ist das Problem, was man sieht man ja auch hier.
Das ist massig Hotkeys, ja.
Deswegen werden wir zwei Sachen einbauen.
Einmal so ein Profil, ein Profilsystem für einen Nummernblock.
Dass man quasi den Nummernblock verschiedene Ebenen hat auf dem Numblock.
Also, ich zeige euch mal, wie ich das meine.
Also, hier hat man ja so einen Nummernblock auf der Tastatur.
Und... das ist ein richtig dummer Nummernblock, gell.
So, wenn man den Nummernblock hat, dann kann man das, könnte man das so machen,
man belegt das hier quasi von 0 bis 9 mit Bildern.
Und mit Plus und Minus kann man dann quasi Profile switchen.
Die Musikleiter, klar.
Ja, ist zu laut.
Ja, so ist viel angenehmer, ne.
So ist viel besser.
So, und bin ich jetzt stehen geblieben?
Genau, und da kann man dann mit Plus und Minus umschalten.
Dann sagt man dann zum Beispiel...
Man kann das ja, man kann das ja, man kann das ja dann quasi coopen.
Man sagt dann hier, alle Bilder für irgendwie positive Sachen macht man dann 0 bis 9.
Das erste Profil, dann drückt man Plus und dann schaltet es aufs zweite Profil.
Dann ist 0 bis 9 die nächsten Bilder.
Irgendwie sowas.
Gehen auch Modifier wie Shift und Control.
Ja, also aktuell ist Hardcoded.
Control.
Aktuell ist Hardcoded alles, alles, ähm, alles auf Control.
Lull, Lull, Lullshake.
Ich habe übrigens zwei Pull-Requests, die Rotationsgeschwindigkeit und Rotationsrichtung noch per Hotkey ändern.
Die gucken wir uns nachher mal an.
Was geht mit der Musik jetzt an?
So, deswegen, das ist eine Sache, die wir noch einbauen werden.
Wird das bisschen lauter?
So.
Machen wir es anders, wir machen hier ein bisschen lauter und da machen wir runter.
Es ist ja immer, es ist irgendwie nach jedem Windows-Update umgestellt.
Irgendwie stellt es nach jedem Windows-Update, sind die Sound-Settings anders.
Ganz, ganz Fail, äh.
So, das ist eine Sache, die wir bauen.
Aber noch viel wichtiger ist, ich will ein Web-Interface haben, wo man die Bilder durchklicken kann im Browser.
Also sprich, dass man dann im Browser das aufmachen kann.
Eine Liste, eine Liste mit Bildern klickt, kriegt, also quasi sowas hier im Browser und man das dann über den Browser an- und ausschalten kann, die, die Overlays.
Also sprich, dass ich dann einen Browser auf dem zweiten Rechner aufmachen kann und klicke dort auf Lull und dann geht halt das auf.
Da kann ich nämlich auch Bilder reinhauen ohne Shortcuts.
Das heißt, ich könnte dann hier 60 Bilder reinmachen und gebe einfach nur, sag mal so, den 10 wichtigsten Shortcuts und den Rest kann ich dann aufmachen.
Dann kann ich dann quasi von meinem zweiten Rechner aus, wie ich es meine, der Trend beim Streaming geht ja hin zum Zweitrechner für, für Encoding und Upload und Gedöns.
Dann kann man das auch einfach dort auf dem zweiten Rechner im Browser aufmachen und gut ist.
So, ich will halt einfach mal gucken, wie man das am besten macht, weil ich hab zwar schon ein bisschen rumgespielt, aber mit irgendwelchen Web-APIs, Web-Anwendungen und sowas.
Das hab ich noch nicht so viel gemacht.
Moin, JSP64.
Ist die Musik so okay?
Wisst ihr was, wir machen mal was anders.
Ich mach mir selbst die Musik ein bisschen lauter.
Weil sonst ist mir das zu leise und mach hier ein bisschen runter.
Ah, perfekt.
So ist das gut.
So, ähm.
Ich glaub so, so ist eigentlich ganz gut von der Lautstärke her, ne?
Ich hab heute Morgen Windows.
Windows 10 Update gemacht.
Das ist auch geil, das ist das April-Update.
30.06. hab ich das April-Update gemacht.
Das April-Update kam ja auch nicht im April, das ist Microsoft-Logik.
Edge, äh, geh weg.
So, und nachdem ich eigentlich noch nie irgendwelche Web-Anwendungen gemacht hab, müssen wir ein bisschen basteln.
Und zwar, ich, wir machen das ziemlich simpel.
Ich bau das auch erstmal alles hier in das Fenster rein, das gehört halt zwar nicht hin.
Das machen wir dann irgendwann so eine eigene...
...eine eigene API-Server, sonst war's klasse.
Aber jetzt machen wir gleich.
Machen wir das gleich ordentlich.
Machen wir das gleich ordentlich.
So, und dann...
Ne, wir machen's erstmal unordentlich, weil ich erstmal gucken muss, wie's überhaupt funktioniert.
Dann schmeißen wir das hier wieder raus.
Also ich hab gesehen, Microsoft hat sowas, das nennt sich, ähm...
...Signal-R.
Signaler.
Oder wie auch immer das heißt.
Das ist sowas wie nen...
...nicht wirklich wie nen Chat-Protokoll, sowas.
Nen, wie nennen sie's?
Real-Time-Messaging, oder irgendwie sowas.
Notification, Client, Side-Werber, was auch immer.
Da kann man zumindest, ähm...
...ohne, dass ich jetzt irgendwie ne großartige Web-API basteln muss, oder sonst was...
...kann ich einfach nen...
...nen Port aufmachen, wo Signal-R draufläuft.
Und dann mit meiner...
...mit meiner Webseite...
...dann mit dem...
...mit der Anwendung reden.
Weil, wir brauchen ja...
...in beide Seiten Updates.
Das ist ja so.
Wenn ich dann das Web-Interface hab, dann kann ich einmal im Web-Interface anklicken, welches Meme ich anzeigen will.
Alternativ kann ich auch den Shortcut drücken.
Das heißt, ich brauch...
...Messaging in beide Seiten.
Und nachdem ich erstens nicht...
...der Großart...
...nachdem ich mich mit so Webzeug...
...jetzt nicht so perfekt auskenn...
...und ich auch keinen Bock hab, irgendwelche Websocket-Geschichten von Hand zu machen...
...sind so Realtime-Updates immer so ne Sache.
Weil ich will ja...
...wenn ich per Shortcut nen Bild aufmache, will ich das ja sofort im Web-Interface sehen, dass das an ist.
Und wenn ich im Web-Interface was klicke, soll das sofort hier erscheinen.
Deswegen müssen wir erst mal gucken, wie wir das machen.
Und ich muss auf dem zweiten Monitor...
...mein Zettel zum Abgucken aufmachen.
Weil ich hab ja im Vorfeld...
...ich bin ja immer...
...ich cheate ja immer so ein bisschen bei diesen Streams...
...ich hab mir im Vorfeld immer schon so ein paar Sachen aufgeschrieben, dass ich nicht jeden Scheiß nachgucken muss.
Und es wird das alles viel zu lange dauern.
So, das erste, was wir machen müssen, ist...
...weil ich hab mir nämlich aufgeschrieben, was wir für Pakete brauchen...
...das erste, was wir hinzufügen müssen, ist...
...New Year Packages.
Achso, ich musste den Stream noch auf Twitter posten.
Hab ich ja ganz vergessen.
Hab ich ja ganz vergessen.
Battlefield hat mich gestern so fertig gemacht, ne?
Ich bin heute immer noch voll neben der Spur.
Das hat mich so aufgeregt.
Das Update ist schrecklich wegen dem Intel-SSD-Bug.
Ich wusste gar nicht, dass das neue Windows-Update einen SSD-Bug hat.
Beziehungsweise einen Intel-SSD-Bug auch auslöst.
Was ist denn...
...was ist denn der Intel-SSD-Bug?
Browse.
Ah.
Laden.
Ah.
So.
Ich poste das Ganze mal kurz auf Twitter.
Hat nicht so dicht fertig gemacht, das war schlimm.
Das, was witzig war, ich hab mir im Nachhinein nochmal...
...ich hab mir im Nachhinein nochmal...
...die paar Clips angeguckt, ey.
...die paar Clips angeguckt, ey.
Das ist richtig dumm, ey.
...das habe ich schon gecheckt.
Also, ich vermute es gecheckt.
Warte mal.
Okay, jetzt ist er. Hier.
Warte.
Geh, piss dich!
Das Windows-Update gestern.
Das ist ja voll im Trend zu sein,
eigenen Videos zu reacten.
Das wollte ich jetzt auch mal machen.
Das wollte ich jetzt auch mal machen.
Ich glaube, in ein paar Jahren ist es dann...
Ich glaube, in ein paar Jahren ist es dann...
...voll um die Ecke auf YouTube.
Da reactet man dann zu seinen Reaction-Videos,
wo man auch seine Videos reactet hat.
Oh, installieren wir mal hier.
Signal R.
Ich weiß nicht, wie ich spreche.
Okay, hier steht jetzt sogar, was es ist.
Eine Komponent für eine real-time...
...bidirectional communication...
...across the web.
Direkt.
Das klingt, als gäbe es das bereits.
Das würde mich nicht wundern.
Das gibt es bestimmt schon.
Reaction-Videos auf Reaction-Videos,
mit denen ich dann reacten kann.
Also, es gibt sowas schon nicht
auf eigene Videos.
Ich habe zum Beispiel letztens irgendwas gesehen.
Irgendwie so nach dem Motto,
Unge reactet auf irgendwelche Leute,
die reacten.
Und dann gucken sich Leute an,
wie Unge auf Leute reactet,
die auf Leute reactet haben.
Da fällt mir bloß noch zu ein...
Moment.
Ich muss mal kurz starten.
Also, das ist wirklich...
äh...
...mindblown, solche Videos.
Das ist wirklich komplett mindblown.
Das ist komplette React-Inception.
Ja.
Was hat der für Schmerzen?
Okay, ich weiß nicht so genau,
was der meckert, ehrlich gesagt, gerade.
Aber anscheinend hat er ja keine
großartigen Probleme.
Weil es läuft ja alles.
Ja, ja.
Wenn du viele Bilder startest,
muss erstmal der Garbage-Collector laufen,
bis es wieder runter geht.
Guck mal, wenn ich hier schnell drücke,
aber da kann man nichts dagegen machen.
Außer nach jedem Bildwechsel manuell
den Garbage-Collector laufen lassen,
was aber ziemlich doof ist.
Na, guck, wenn ich ganz schnell die Bilder drücke,
dann geht der Rampverbrauch erstmal übelst hoch.
Vor allem bei GIFs.
GIFs gehen übelst hoch, aber nach einer Weile
geht es dann halt wieder runter.
Guck, ja.
Wieder unten. Dauert halt ein bisschen.
Und das Gelbe sind, glaube ich, Garbage-Collector-Runs.
Ne? Ja.
So.
Wir wollen dieses Ding irgendwie Web-Interface verpassen.
Wie gesagt, ich habe ja schon mal ein bisschen im Vorfeld geguckt,
wie wir das machen.
Also, ähm,
ich habe noch nie was mit
ASP.NET gemacht. Noch nie.
Schon gar nicht mit
ASP.NET Core.
Aber, nachdem ich ja immer ein bisschen
cheate in diesen Streams, habe ich zumindest schon mal
guck zu kopf über den Kampel verwendet.
Das erste,
was man machen muss, ist
sagen, auf welchem
Port
man seine Anwendung laufen
lassen möchte.
Und, ähm,
quasi, welche
Ordner man
einbinden will.
Also, Ordner mit Content drin, so was
hier zum Beispiel.
Und dann, welche Dienste man
einbinden will.
So, nach dem Motto, okay, ich brauche
meinen Web-Server soll jetzt quasi auf diesem
Verzeichnis die Bilder raushauen
und
irgendwelche anderen Sachen registrieren
und sowas.
Das muss man am Anfang machen. Das habe ich schon mal nachgeguckt.
Deswegen, das kriegen wir jetzt hin.
So. Und diese
SignalR Geschichte funktioniert folgendermaßen.
Ähm, übrigens
eine Sache wollte ich hier noch einbauen.
Einmal will ich hier einen
Name noch haben,
wo einfach nur
drinsteht,
wie das Bild heißt.
Oh, das ist nichts
Großartiges. Und
damit halten wir uns auch offen, dass wir
das später mit Sounds abspielen können und sowas.
Weil das ist alles kein großer Akt.
Bilder anzeigen,
Sounds abspielen, das macht keinen großen Unterschied.
Ähm, das ist alles WPF
eingebaut. Muss man nichts Großartiges machen.
So, und jetzt habe ich den kurzen Namen,
nicht immer den langen. Das ist besser.
So.
Und hier wollte
ich mir merken,
für welchen
Pfad ich das angelegt habe.
Sachen, die brauchen wir bestimmt
noch. So.
Okay.
Dann werden wir mal
versuchen, den
Webserver hier drinnen zu starten.
Gucken, wie man das am besten macht.
Also ich habe mir hier so einen
sowas, sowas rauskopiert.
Äh, von Microsoft.
Da gibt es so eine
Anleitung, wie das funktioniert.
Und das erste, was man machen muss,
ist einen Hub erstellen.
Und danach seinen
Webserver so konfigurieren,
dass dieser Hub verwendet wird.
Jetzt gucken wir mal, ob das Ganze funktioniert.
Also so einen Hub zu erstellen ist relativ simpel.
So, und ich sage euch jetzt gleich so,
so werden wir das nicht lassen,
aber ich will einfach mal gucken, wie es geht.
Games Done Quick läuft wieder.
Ja.
Mir gefällt, also
ich habe immer Games Done Quick
geguckt. Sowohl die Summer Games,
als auch die Awesome Games. Ich habe immer geguckt.
Allerdings,
seit sie das, ähm,
seit sie, seitdem sie
den Chat so extrem streng
handhaben und seitdem man quasi
gezwungen wird zu subscriben, um im Chat
was zu schreiben und sowas.
Nachdem sie auch angefangen haben, irgendwelche Leute
zu bannen, weil sie mal ein bisschen was
Fragwürdiges gesagt haben.
Irgendwie habe ich keinen Bock, mal das Event zu gucken.
Ich habe dieses Mal kaum, kaum
Runs geguckt. So.
Ich baue das jetzt mal
alles. Schauen wir mal. So.
Ich will einfach mal rausfinden,
wie das Ganze funktioniert.
Deswegen mache ich jetzt hier mal eine Klasse innen drinnen,
dass ich auf meine internen
Sachen zugreifen kann.
So, einen Hub.
Das ist das, worüber später dann mit der
Website die Kommunikation läuft, wenn ich das
bei Microsoft richtig verstanden habe. So.
Der Meme Hub.
Oh, das muss ich natürlich einbinden.
Wohin habe ich das denn
nicht gerade installiert?
Egal, installieren wir es nochmal neu.
Ja, das stimmt.
Also das, das zum Beispiel,
das, ähm, also ich meine, hopp, Wiesel, das ist
ja schon ein bisschen, sag mal, ein wenig extrem
ausgedrückt, wie du das geschrieben hast.
Das würde ich so nicht sagen.
Allerdings im Kern
ist es bescheuert, dass man
aus-, dass sie sich ausgerechnet über Dance Gaming
aufgeregt haben, weil da ein Emoji
hatte, wo man ihn selbst
gesehen hatte, mit quasi so Luft-, Luftballon-
Brüsten, so. Hat dann ein Emoji
gehabt. Sie selbst, ja, wohlgemerkt.
Und dann haben sie sich drüber
aufgeregt, wie böse Dance Gaming ist,
weil irgendjemand anderes dieses Emoji dann dort
in dem Channel verwendet hat. Richtig
bescheuert, ja. Und vor allem,
dass sie sich bei Dance Gaming aufregen, ist
noch bescheuerter, ähm, weil
er hat schon oft erzählt, dass er selbst schwul ist
und selbst da schon einige Probleme hat.
Also total beknackt. Also richtig hängen
geblieben einfach nur im Kopf, ja.
Mod und Subscriber
only. Naja, das werd ich nie machen.
So, hab.
So, Microsoft, wie geht denn das jetzt
weiter? Warte mal, da hab ich doch
Chat-Example
Docs. Da hab ich doch was
Schönes gefunden, wo man nachgucken kann.
War das das?
Nein. Oh, die Musik!
Ich hab bei Microsoft ein schönes
Beispiel gefunden, wie das funktioniert. Aber
natürlich finde das jetzt die Google-Suche nicht.
Ah ja, doch hier.
Ne.
Hab's. Chat.
Ah, das ist kompliziert.
Heilige Güte.
Ich werde geradet. Ich wurde noch nie
geradet. Krasser Shit.
Danke für den Raid. Ich weiß gar nicht, was man
dann sagt. Was sagt man denn bei einem Raid überhaupt?
Oder was, was
ist der Unterschied eigentlich zwischen einem Raid
und, ähm,
was ist der Unterschied zwischen einem
Raid und einem Host?
ASP.net
Not like this. Ja.
Das ist so.
Ich hab, wie gesagt, ich hab eigentlich keine Ahnung von, aber
ich darf mich jetzt nicht so weit
ablenken lassen. Ich muss jetzt mal irgendwie gucken, dass
ich da, ich muss mal gucken, wie das funktioniert.
Leute kommen
jetzt in den Channel A.
Danke für den Raid. Oder für den Host.
Nice.
Host is basically your host. Ach nee.
Hoppwiesel. Da wäre ich jetzt nicht drauf
gekommen. Nicht drauf gekommen.
Ähm.
Okay, wie funktioniert denn der Cramp jetzt? Microsoft, erzähl
uns doch mal, wie das funktioniert.
So.
Okay, also das ist wohl irgendwie so,
dass man
in diesem Hub
Zeugs definiert, was der Client aufrufen kann
und im Client dann
wiederum Sachen definiert, was man, was man dann
vom Hub aufrufen kann. Hab ich noch nie
verwendet. Ähm.
Wir, wir testen das jetzt einfach. Wir machen
irgendwas, wir machen jetzt mal einfach dieses, dieses komische
den Test hier.
Gucken wir, wie das funktioniert.
Wir machen das auch ohne Asp. Wir machen das wie der, wie der letzte
K-Knoop. Und auch
ohne irgendwelche Parameter oder so.
Vollkommen, ganz, ganz billig.
Bei einem Raid schickt man den Zuschauer das eigene
Stream zu dem Stream, den man raidet. Ist das
aber bei einem Host ist doch im Prinzip auch so, oder?
Also ich kenn das nur, ich kenn das nur von
von, äh, von früher.
Dann hat man halt gesagt, so nach dem Motto, man hostet
jemand und dann sind halt die anderen immer in den Channel
rein. Haben halt irgendwie rumgeschrien, Raid.
Oder haben irgendwelche
anstößigen Bilder gepostet oder irgendwas,
um den anderen zu ärgern. Keine Ahnung.
Ähm.
Anscheinend haben sie das jetzt in Twitch integriert.
Aber ich bin ja absoluter
Twitch-Knoop. Ich glaub, ich hab immer noch kein Profil
auf Twitch. Kann das sein?
Ist ja logisch.
Und danach wird der Channel direkt ge... Ah, verstehe.
Ja. Ja, dann danke
für den Host. Huge Host.
Massive.
Ähm. So.
Big Brain.
Wie geht's denn jetzt weiter?
Wie teste ich das jetzt? Ich brauch jetzt irgendeine Webseite
mit diesem JavaScript-Gedöns drinnen,
wo ich das dann aufrufe. Und dann muss ich
gucken... Ne, ich muss erst mal den ASP-Webserver
starten.
Ich bin verwirrt.
Ich sollte nicht On-Stream-Dinger machen, die ich noch nie gemacht hab.
So, jetzt müssen wir...
Ich muss jetzt erst mal dieses ASP
.NET-Zeug irgendwie starten.
So, da hab ich...
Da hab ich mir was rauskopiert, wie das funktioniert.
So, irgendwie Webhost?
So. Da muss ich jetzt aber abgucken.
Microsoft, erzähl mir,
wie es funktioniert.
Oh, nett, klein. Nein, nein, nein.
Warum haben die... Die haben... Ich hab doch irgendwo
so eine Seite gefunden, wo die das schön beschrieben
haben. Chat.
Ähm.
Nehmen wir mal. Schreiben, ja.
Einfach so.
Wie ist das denn?
Azure Service. Will Azure Service
fallen. Einfach so.
Das ist alles von 2014. Das... Ah, hier!
Das sieht gut aus. Ja!
Diese Anleitung hab ich gesucht.
Das ist nämlich für die letzten Noobs, die keine Ahnung haben,
beschrieben, wie man das macht.
So, als erstes
macht man ein Hub. Okay.
Ähm.
Und dann muss man seinen
Webserver irgendwie konfigurieren. Gut, das hab ich mir rauskopiert,
wie das funktioniert. Das ist einfach.
Da macht man irgendwie Webhost.
Create. Default.
Bildung.
Wie...
Wie ein Programmierer versteht
Basic Features von Twitch nicht.
Aber, eins muss ich
sagen, ne. Bei, ähm.
Also, ich war ja skeptisch.
Bei der Übernahme von Twitch.
Ich lenk jetzt mal davon ab, dass ich nicht weiß, was ich
genau mache, sondern eigentlich einfach nur abtippe,
wie das funktioniert. Ähm.
Wobei,
ich weiß, dass es funktioniert, weil das hab ich vorher
mir schon mal rauskopiert, mal kurz getestet.
Ähm, eins muss ich sagen. Ich war ja
bei der Übernahme von
Amazon, also bei der Übernahme von Twitch
zu Amazon, war ich wirklich skeptisch.
Weil, bei anderen Übernahmen,
so was weiß ich, was Microsoft so übernommen hat,
oder, oder Google,
vor allem Google, was Google schon übernommen
hat, ist halt
echt so ein Ding, wo ich gedacht hab, okay,
entweder machen sie das jetzt irgendwie,
naja, nicht dicht.
Sie integrieren das irgendwie in ihr
komisches Amazon Zeug, und es wird dann
einfach nicht mehr das gleiche sein, wie früher.
Aber insgesamt, oder mal
eure Meinung jetzt, ne.
Ich persönlich finde, dass
seit der Übernahme von Twitch durch Amazon,
Twitch nicht schlechter geworden ist,
sondern eigentlich besser. Das einzige,
was bei Twitch wirklich sagt, ist die
Mobil-App.
Die Mobile-App ist freudig.
Also die Mobile-App ist wirklich
ganz schlecht.
Das wird nur noch getoppt
von der Android-TV
Android-TV-YouTube-App.
Die ist noch schlechter.
So, machen wir hier einen Zeilenumbruch.
Genug gelabert.
So, Services.
Services, Add.
Signal R.
Okay, das ist nicht drin, das muss ich noch einbinden.
Das heißt, ich muss irgendwas
includen oben noch.
Moment. Was brauche ich?
Das da brauche ich. Den ganzen Knöppel brauche ich.
Gut, dass ich das vorhin schon mal gemacht habe.
Easy.
Geht immer noch nicht.
Hab ich was vergessen
zu includen?
Ich hab bestimmt irgendwas nicht hinzugefügt.
Ah.
Warte.
Was?
Das habe ich doch eben hinzugefügt.
Ah.
Oh.
Moment, ich habe das falsche.
Ich habe ASP.NET Signal Core.
Oh, Moment.
ASP.NET Core Signal R brauche ich.
Um die Sachen
noch ein bisschen komplizierter zu machen,
hat Microsoft natürlich mehrere Pakete,
die fast gleich heißen.
Das ist natürlich toll.
Das ist natürlich toll.
Except.
Ja, jetzt wird es wahrscheinlich auch gleich funktionieren.
Vielleicht wird ja sogar
GitHub nach der Übernahme von Microsoft besser.
Also,
instinktiv
will man immer sagen, ah ne, Microsoft
verkackt es bestimmt.
Aber es könnte sein, weil ich meine, man muss da sagen,
GitHub hat nie großartig Kohle verdient.
Und jetzt hat GitHub,
die haben jetzt einfach Geld.
Dadurch, dass sie zu Microsoft gehören.
Es ist jetzt ja nicht so, dass die sich da jetzt irgendwie noch Geld,
das ist jetzt genug Kohle da.
Das war ja ein Problem, was GitHub hatte.
So.
Geht's denn jetzt?
Ah, jetzt ist es.
Oh, die Kirby-Musik hier.
Rare Parrot.
Oh, wir haben Party Parrot
haben wir jetzt ja auch.
Oh, es funktioniert. Okay, sehr nice.
Okay, Configure Services.
Sehr schön. So, dann
wir tasten uns da jetzt mal ganz einfach ran,
wie das jetzt weitergeht.
So, und
danach muss man sagen,
Configure Services,
nee, Configure einfach nur so.
App.
So.
Und dann sagt man hier drinnen,
was man eigentlich alles aktivieren möchte.
So, und da
will ich jetzt einmal sagen,
dass ich Static
Static Files, jetzt muss ich noch einen binden.
Wie heißt das?
Static
Static Files.
Moment, warum
findet das Ding denn bitteschön Microsoft
ASP.NET Core Static nicht, aber Static
Files? Muss das wirklich exakt
matchen?
Ganz schön doof.
So.
Und was sag ich jetzt?
Nee, ich muss das erst noch mal includen.
Und da muss ich jetzt
irgendwie sowas sagen, wie Serve Static Files,
dann kann ich zumindest über den Browser schon mal meine Bilder
abrufen, wenn das funktioniert.
Ups.
Oder brauch ich das überhaupt?
Gucken wir mal.
Nee, Use Static Files.
Genau. Use Static Files.
Use File Options.
Gucken wir mal, dass wir die Klammern richtig
hinkriegen.
Use Static File Options.
So, File Provider wollen wir
von der
von der Festplatte
Files ausliefern.
Physical
Copy Paste FDW.
Physical File Provider. Und dann nehmen wir jetzt mal
Hard Coded unseren Fad.
Hier da.
Was hat der für Schmerzen?
Warte mal, ich habe irgendwo
die Klammern, glaube ich.
Oder?
Habe ich die Klammern falsch?
Achso.
Ja, da brauche ich was. Klar.
Wir machen das jetzt mal ganz billig. Wir nehmen Hard Coded
den Fad von hier oben und gucken dann mal,
ob wir den Browser überhaupt Bilder abrufen können.
Wenn das geht,
dann weiß ich
zumindest schon mal, wie man so ein Ding startet.
So.
Dann muss man eben irgendwie sagen,
Request Pass. Also das ist dann
der Teil, den man im Browser
eingeben muss. Da nennen wir jetzt mal
was Slash Image.
So.
Danach muss man eben noch sagen,
App Use Signaler.
So, und nun muss man das Ding starten.
Ach ne, Moment.
Jetzt muss ich immer noch sagen, welche Hub-Klasse ich verwenden will.
Irgendwie Config Hub.
Genau, Hub.
Dann nehmen wir hier mal unseren Meme Hub.
Und
der ist
unter
Url
Meme Hub.
Wunderbar.
So, und dann sagt man jetzt einfach nur noch,
welche
welche Url erlauschen
soll. Wir sagen erstmal einfach
nur Local Host.
Das müssen wir dann natürlich erweitern,
dass er nicht auf Local Host
lauscht, weil sonst ist ja der Sinn verfehlt.
Wir wollen ja
unser Programm von einem anderen
Rechner aus fernstellen können.
Wenn wir den bloß Local Host lauschen lassen, dann ist das ganz schön
fail.
5001
So.
Und jetzt sagt man noch
Build
und dann Start.
Und jetzt bin
ich mal gespannt, ob das funktioniert. Also von der Idee
her,
also von der Idee her sollte ich jetzt unter
Local Host
Port 5001
Image ein Bild
abrufen können. Gucken wir mal, ob das funktioniert.
Okay.
Wir werden schon mal ausgelacht.
Ja, ich muss den anderen
Ordner nehmen. Ich habe ja alle meine Shortcuts
überschrieben. So.
Und jetzt nehmen wir mal das Bild, irgendwie das da.
Oh, das ist schlimm.
Ich kann nicht STRG C drücken. Wie machen wir das jetzt?
Hahaha.
Image.
Hahaha.
Come on.
.pmg.
Hey!
Es funktioniert. Nice.
Okay, dann haben wir prinzipiell den Scheiß schon mal richtig gestartet.
Puh. Puh.
Ich bin übelst aufgeregt,
weil ich jetzt, normalerweise mache ich ja wenigstens
Dinger on stream jetzt hier
programmiertechnisch, die ich schon mal gemacht habe.
Aber ich habe wirklich keinen Plan davon.
Aber ich muss jetzt mal in den Chat gucken.
Aber okay.
Das ist gut. Ich bin beruhigt, dass es funktioniert.
Wir nehmen hier
übrigens mal das andere.
Kannst du dich noch an meine shitty Übungs-App
im Playstore erinnern? Hat mir schon 15 Euro Werbeeinnahmen
gebracht. Klar! Das war doch
Dings hier.
Fortnite. Warte mal.
Fortnite
Playstore
Irgendwie
Random Drop
oder irgendwie sowas. Ne?
War das das hier?
Ach, Real-Royale-Drop-Picker war es.
Nicht Fortnite-Drop-Picker.
Ja, da.
15 Euro kann man damit also verdienen.
Wie ist denn deine Meinung
zu Python? Das ist eine sehr schöne
Sprache.
Wobei ich ja eher Ruby-Fan bin.
Ich bin ja eher Ruby-Fan.
Aber Python ist auch toll.
Das einzige, was ich ein bisschen
doof an Python finde, also
muss ich mal anders anfangen. Das Schöne an Ruby ist,
dass man das auch
wenn man Kommandozeilen-mäßig
was macht auf einem System
schön verwenden kann.
Man kann damit ganz kurz und knackig irgendwelche
Dateien nach
speziellen Textmustern durchsuchen
oder irgendwelchen
Text umwandeln oder so. Das geht mit Ruby
wunderbar für Kommandozeile.
So ein One-Liner. Fast so schön wie mit
Perl. Bei Perl kannst du mich jagen mit.
Aber
mit Python funktioniert das nicht.
Bei Python steht halt
auf Einrückung und Newline
und sowas, das halt schön formatiert ist.
Und schön formatiert
widerspricht halt Einzeiler.
Weil Einzeiler sind
nicht schön formatiert.
Was ja irgendwie
logisch ist, ne?
Ich habe einmal Ruby on Rails versucht
und habe 30 Minuten aufgegeben.
Ich habe ja einen
ASP.NET Guide gelesen
bevor ich jetzt hiermit angefangen habe.
Und das hat sehr viele
Parallelen zu Ruby on Rails.
Zum Beispiel, dass Controller
Controller heißen müssen.
Man kann die nicht anders nennen.
Oder man musste im Controller Ordner haben
oder irgendwie so. Das ist sehr stark
von Ruby on Rails inspiriert.
Rails hat ja damals auch gesagt
irgendwie
Wir scheißen einfach drauf, dass die Leute
ihre Sachen nennen können, wie sie wollen.
Es gibt jetzt Vorschriften, wie Dinge heißen müssen
sonst gehen sie einfach nicht.
Patrick, ist das jetzt
Ist das jetzt irgendein Rätsel, was das
macht?
Leute, wir gucken
Wir gucken uns jetzt mal den
Regex an, den Patrick gepostet hat
und überlegen uns mal, was der
machen könnte.
Perl-e ist bestimmt irgendwie Extended
Regex oder sowas.
Boah, ist das hässlich.
Boah, ist das hässlich, ey.
Es gibt ja so den Spruch, willst du ein Problem mit
Regex lösen, hast du zwei.
LOL
Okay, also
Say, soweit klar
Search and Replace ist das.
Das ist Search and Replace, gehe ich mal voll aus
in Perl, oder?
Ist das Search and Replace?
Was auch immer.
Ach du Scheiße, was ist
das denn für ein Regex, the fuck.
Also das hier ist auf jeden Fall, das ist eine
Zeichengruppe mit Plus und Minus.
Beginnt, okay, beginnt mit
Beginnt mit
Plus oder Minus
Optional, also muss nicht.
Kann mit Plus oder Minus beginnen.
Danach kann
können Zahlen kommen
beliebig oft.
Das ergibt irgendwie
keinen Sinn. Ach doch, das ist
non-creedy, also sprich
alter Regex, also sprich
es müssen danach beliebig viele Zahlen
kommen. Der Match ist allerdings non-creedy.
Non-creedy heißt,
dass wenn ich einen Regex habe, weil ich jetzt sowas
hier habe.
So, sowas hier, so eine Zeile.
Und ich habe einen Regex
sowas hier.
Der Regex würde quasi
ne, das ist ein scheiß Beispiel.
Ähm, das ist ein dummes Beispiel.
Ähm,
das ist ein scheiß Beispiel.
Was nimm ich denn da für ein Beispiel für?
Ach, keine Ahnung, mir fällt jetzt kein Regex
scheiß drauf. Zumindest non-creedy bedeutet
er matcht bloß mindestens so viel wie notwendig
ist, mit dem Fragezeichen.
Und Standardverhalten ist halt, er matcht
so viel wie geht.
So, ähm
So.
Das ist optionale Parameter
irgendwo, also wo was steht. Irgendwie
lookahead oder sowas.
Ach, was war das? Kein Schimmer, was dieser
Kackregex macht, äh.
Optional, ey. Ne, das
das ist, das ist Backreference.
Irgendwie Reference merken und dann einsetzen
die hin. Keine Ahnung. Patrick, ich
hab legit keine Ahnung, was dieser Regex
macht. Ach, da hat noch was
gefehlt, es geht noch weiter.
Okay. Na.
Das ist doch,
das ist doch gleich viel lesbarer jetzt.
Pearl
Regex.
Hast du dir den ausgedacht oder hast du den irgendwo herkopiert?
Also ich weiß nicht, was er
macht. Ich kann mir das, also ich könnte mir das jetzt
innerhalb von zwei, drei Stunden so zusammenreimen,
ja, was der, was der macht. Ich mein,
muss man mal nachgucken, was das hier in Pearl macht.
Und ob das irgendwie lookahead, lookbehind,
dann irgendwie Reference, äh.
So, und das Interessante ist
ja, das hier, das hier ist die erste
Gruppe. Und das ist ein
oder die zweite Gruppe.
Also
entweder match das oder
das. Und dann
replacet er das durch
wahrscheinlich, was er hier
gestort hat oder so.
Ach, was weiß ich. Scheiß drauf.
Pearl, äh.
Geh weg. Nee, nee, nee, nee.
Okay, wir machen jetzt, wir machen jetzt
erstmal weiter. Also.
Ich wollte den Meme-Ordner umstellen.
Hab ich. Okay, das heißt, wenn wir das
jetzt starten und auf Local
Host, auf Local
Host, ähm.
links gehen, dann kriegen wir ein Bild.
Das ist schon mal ganz toll. Da wissen wir schon mal,
dass das prinzipiell funktioniert.
Ähm.
Start.
Es macht auch einen eigenen Thread auf, sonst würde
mein UI hängen.
So. Ähm.
Ist mal gleich angemerkt, das muss alles aus dem
UI und alles aus dieser Klasse raus. Ich will
jetzt einfach mal gucken, wie das überhaupt funktioniert.
So, und der Meme-Hub funktioniert auch.
Das bedeutet, es läuft
jetzt eigentlich alles,
was
laufen muss. Wir haben hier unseren, unseren
Hub mit,
mit, äh, Rightline-Test.
Das sehen wir dann auf der Konsole, ob ich das aufrufen kann
vom Browser auf. Ähm.
Das heißt, jetzt
müssten wir eigentlich eine HTML-Seite anlegen.
Und dort
die SignalR-Java
Script, SignalR-
JavaScript Library einbinden.
Musik.
So. Ich muss grad
nochmal hier Follows und Gedöns
aufmachen. Das ist nämlich
irgendwie weg. Ja, danke für die
ganzen Follows. Also,
wir bauen das alles in eine eigene Klasse später ein.
Ähm. Okay, jetzt müssen wir, das heißt, jetzt müssen wir
eine Webseite anlegen. Oh, jetzt können
wir gleich mal meine krassen JavaScript
Skills sehen, ey. Das wird
grausam. Äh.
Add to Item
HTML Page.
Index.
So, und jetzt versuchen wir erstmal die Index-Seite
mal ausliefern zu lassen.
Ähm.
Wir machen das jetzt ganz,
ganz, ähm.
Ne, machen wir nicht. Machen wir nicht.
So, ähm.
Tja, war doch immer.
Einfach mal testen, ob das, äh.
Ob das
denn prinzipiell
streben soll. Ob das denn prinzipiell
ausgeliefert wird, diese Seite.
So, ähm. Das heißt, wir
kopieren die Seite in
in
Output-Verzeichnis.
Mal gucken, ob wir die ja irgendwie aufgerufen kriegen.
So.
Das heißt, wir wollen nicht nur Images
mappen. Wir wollen
auch.
Wollen wir auch. Das aktuelle Verzeichnis
wollen wir mappen.
Also sprich.
Was ist denn das aktuelle Verzeichnis, wenn ich das hier
starte? Müssen wir mal ausprobieren.
System.
IO.
Directory. Irgendwie
Current. Current Directory. Ja.
Gucken, ob das geht. Mal gucken,
aber da bin ich echt gespannt. So. Irgendwie keine Ahnung.
Also.
Gucken, ob das jetzt funktioniert.
Ich glaub ja nicht.
Ähm.
Wir müssen
das Bild, das standardmäßig kein Bild mehr
anzeigen.
Hey.
Funktioniert.
Porgos. Hätte ich nicht
gedacht.
Ist die Klimaanlage aus, man ist zu kalt.
Okay, das funktioniert. Sehr schön.
Hallo Streamsort.
Man hat
hier sogar auch Debug-Ausgabe
in der Konsole. Das ist schön.
Gut. Das heißt, da müssen wir jetzt
die Signal R
JavaScript Library einbinden.
So.
Und ich hab das in diesem
Tutorial gelesen.
Die haben da irgendeinen
CDN verwendet.
ASP.net.
Wo es den Krempel gibt.
Hier Signal R. Genau.
Nee, nee.
Es war ASP.
Wie waren diese Karten?
Wie war denn die URL dafür jetzt richtig?
Ah, hier. Steht doch sogar da.
Lol.
Genau.
NPM.
ASP.net.
Jetzt kommt die JavaScript.
Das wird grausam.
Wo?
Signal R.
Aha.
Versionsnummer.
Dann dist.
Ja. Sehr schön.
So.
Wir könnten das auch selbst ausliefern,
aber wir binden das jetzt mal von extern ein.
So. Den da.
Zack.
So. Und jetzt den ganzen Krempel hier einbinden.
Script.
Source.
Oh ja, aber Skript, ey.
Oh, Skript.
Wobei, das kann man irgendwie so machen, ne?
So. Schön.
So.
Was hat der für Schmerzen?
Warum ist das so böse und anders?
Also, warum ist das so okay und andersrum schlecht?
Okay, das ist Microsoft.
Juck. Das ist mir egal.
Okay, dann machen wir das Bild hier mal weg.
Dass ich nicht standardmäßig immer
Lol
angezeigt kriege,
weil das geht mir auf den Keks.
So.
Localhost.
Index. Gehen wir mal in
den Debugger
vom Browser.
Okay, wie kann man das jetzt aufrufen?
Genau.
Signal.
Genau, Signal.
Ich teste das jetzt mal in der Browser-Konsole.
Also in der Debug-Konsole.
Musik zu laut? Zu leise? Okay, so.
Okay, ähm.
Das heißt, das müsste dann so funktionieren.
Ich hab das doch hier irgendwo drinstehen.
Das stand doch
irgendwo in der Anleitung drin,
bei Microsoft, wie das geht.
Genau, hier.
Connection. Also,
Hub-Connection-Builder.
Hub-Connection-Builder.
Hub-Connection-Builder.
Meme-Hub.
Meme-Hub.
Bild.
Das scheint bei Microsoft voll angesagt
zu sein, mittlerweile Sachen mit Bild aufzurufen.
So, und dann
muss man das vorher noch, okay.
Huch. Hab ich falsch gemacht?
New.
Warum auch immer.
Weil ja was kommt.
Ha, funktioniert.
Okay.
Äh, und jetzt kann man sagen,
Connection Start.
Connection Start.
Jetzt kommen wir uns einfach mal an,
nee, Con, Con Start ist es bei mir.
Und dann gucken wir mal, ob das funktioniert.
Ja, geht.
Websocket connected to 5000 Meme-Hub.
Websocket connected to 5000 Meme-Hub.
Sehr, sehr nice. Okay.
Jetzt sind wir connected.
Dann Con, Invoke.
So, und jetzt kann ich nämlich
von meinem Browser auf, äh,
von meinem Browser aus,
ähm,
hier, Send Message aufrufen.
Das, was ich in diesem Hub definiert hab.
Also sprich, dieses Signal R
nimmt einem die ganze Arbeit ab,
die man
irgendwie für Websocket Kommunikation und so braucht.
Das ist gut, weil ich hab von Websocket
keine Ahnung. Ähm,
Invoke.
Send Message.
Test.
Ha, funktioniert.
Das ist super easy.
Das ist mega einfach.
Das ist geil. Das, also das hab ich nicht,
das ist wirklich extrem simpel.
Quasi vom Browser
zum Backend, vom Backend zurück quasi in Echtzeit
irgendwelche Messages auszutauschen.
Das, das ist gut.
Das find ich, find ich sehr, sehr nice.
Das ist schick. Das gefällt mir wirklich gut.
So, das heißt nämlich auch,
wir können, jetzt machen wir mal zu.
Das heißt, wir können jetzt hier auch einbauen,
dass man, sagen wir jetzt mal sowas wie, ähm.
Bei geht
das überhaupt?
Kann ich jetzt von hier, was da oben drüber auf
lösen?
Da müsste ich jetzt hier in den
Constructor von dem Hub
mir mein, mein Window rein. Oh, das wird
eklig.
Das wird, das wird eklig.
Aber es ist ja nur zum
Testen, wie es funktioniert.
Ist ja nur
zum Testen, wie es funktioniert.
So, und da habe ich gelesen, wenn man
in seiner ASP-Anwendung
Sachen verwenden will, die nicht
in, quasi die man
hinzufügen muss,
die es nicht kennt,
muss man irgendwie sagen,
Services at,
ne, wie war das? Configuration at?
Ne.
Moment, ich muss cheaten, ich muss nachgucken.
Ah, doch, doch.
Mach ich doch richtig.
At, genau.
Da kann man jetzt nämlich sagen,
dass ich eine Referenz von
meinem Window-Objekt reinhaben
will und dann kann ich die hier drinnen verwenden.
Das ist nicht so, also wie gesagt, so macht
man es nicht. Ich betone das nochmal, ja.
Also wir, wir lagern das dann schon
auch aus in der eigenen Klasse, die wir
irgendwie, was weiß ich, Memeboard-Server oder irgendwie sowas
nennen. Ich mache es jetzt aber aus einem
Grund hier intern, weil ich dann
Zugriff auf meine
internen Funktionen und so
habe. Das ist dann relativ einfach. Okay,
wir basteln uns jetzt mal was,
wo wir uns eine Liste
zurückgeben lassen können
mit allen verfügbaren Memes
und dann machen wir eine Schleife in JavaScript,
wo wir diese Memes in die Seite einbinden,
weil abrufen können wir die Bilder ja hier rüber.
So,
das ist einfach mit, kleine Schritte,
ja, ein bisschen ran tasten, wie das
funktioniert.
So, das heißt, wir nennen das Ganze jetzt nicht
SendMessage, sondern,
wie kann man das jetzt nennen,
äh,
Bequest, äh,
Beeps, Requests,
was ist?
Moment,
Moment,
ich kann ja so gar nicht antworten,
Moment,
Okay, das nennen wir jetzt,
nehmen wir jetzt Request Update,
so, und dann
antworte ich von hier
an den
Typ, also an die Webseite,
die hier anfragt,
antworte ich
beziehungsweise ich antworte nicht, ich rufe dann hier
drin wieder was auf, was dann dort
die Bilder einfügt. Irgendwie voll
um die Ecke. So und das nennen wir dann
irgendwie, keine Ahnung
Update. Fällt jetzt gerade
nichts besseres ein. So und da
pumpen wir dann
unsere
Meme-List rein
und angeblich kümmert sich
dieses ganze SignalR
und ASP.NET Zeug
komplett für uns drum,
unsere Memes zu serialisieren und
das JavaScript Zeug auf der kleinen Seite wieder
zu deserialisieren, dass ich es verwenden kann.
Das probieren wir jetzt mal aus.
Dazu müssen wir aber das, was
ich hier gerade im Browser gemacht habe,
müssen wir nochmal hier drinnen machen
und wir
verwenden jetzt mal was
was Neues.
Also was irgendwie
in JavaScript 6 oder so dabei ist.
Nämlich
dass wir was
Async ausführen. Also sagen wir jetzt mal
Script. Machen wir erstmal Connection.
Ah, Con, bla bla bla bla bla.
Build. Okay, das ist gut.
Das haben wir im Browser gerade gemacht.
Das funktioniert. Da wissen wir, dass das klappt.
Machen wir mal den Punkt lieber da vorne hin.
Ah, Build.
So, dann sagen wir
Await. Ich weiß gar nicht, ob das an der Stelle
überhaupt geht oder ob wir das irgendwie in eine Funktion basteln müssen.
Ich glaube, es muss in eine Funktion basteln.
Probieren wir es mal. Await.
Connection.
Äh, Start.
Und
danach sagen wir irgendwie
Await. Connection.
Invoke. Und jetzt können wir das aufrufen,
was wir auf der Serverseite haben.
Was irgendwie
Request. Update
hieß.
Das klappt so nicht.
Await is only valid in
Function. Okay.
Das heißt, wir müssen den ganzen Kram irgendwie
einmal rappen in Function.
In Async Function.
Nee.
In Function.
Function.
Connect.
Ich weiß nicht, wie man das Ding nennt.
Wir machen das jetzt mal C-Style. Main.
Ähm.
So, und da machen wir jetzt den ganzen
Mist drinnen.
Jetzt muss man bestimmt Async machen.
Oh, oh, mein JavaScript.
Das geht aber so bestimmt jetzt.
Ja!
Hat er das jetzt invoked?
Und ich gebe
ja gar nichts mehr aus.
Ah ja, okay. Wir rufen jetzt ja hier wieder
auf der Client-Seite was auf. Das heißt,
da muss ich jetzt mich...
Okay, okay, okay.
Okay.
On Receive. On Update
brauche ich da jetzt.
Falls es so wirkt, als wüsste ich,
was ich mache. Es hält sich in Grenzen.
On. On Update.
Und da kriegen wir jetzt die Meme-Liste
rein.
Und damit machen wir nichts anderes,
wie den Krams mal auszugeben.
Okay.
Also von der Idee her
sollte der sich jetzt verbinden zum
Server. Auf dem Server
ruft der Request Updates auf
und der Server schickt
an ihn zurück
unsere Memes-Liste
und die Memes-Liste gebe ich hier wieder aus.
Mal gucken, ob das klappt.
Hey!
Das klappt.
Ich bin begeistert. Das ist ja
super einfach.
Das ist super
einfach. Das hätte ich gar nicht gedacht.
Guck mal, unser ganzes Zeug ist serialisiert.
Das ist super einfach.
Guck mal, unser ganzes Krempel
ist im Frontend verfügbar.
Das ist übelst geil.
Okay, der Pass bringt mir jetzt im Frontend
ehrlich gesagt nichts.
Das ist super einfach.
Das ist nice. Sehr nice.
Dann können wir jetzt hier drin
auch die Bilder anzeigen.
Jetzt kommt krasses JavaScript.
Gehexer von mir.
ID
Content
So, also von der Idee her
ist es ja so, wir sagen
Server Request Update
und der Server updatet, schickt uns
ein Update zurück und
hier kriege ich die Memes
rein. Das heißt, in dieser
in diesem Callback könnten wir es quasi nennen
in diesem
Callback kann ich jetzt meine Seite
updaten. Wie macht man das
gescheit in JavaScript?
Ich weiß nicht, wie das funktioniert.
Create Element.
Okay.
Document Create Element.
Das wollen wir haben.
Das wollen wir haben.
Mozilla Seite ist immer ganz gut mit Beispielen.
Okay, also von der Idee her.
Okay, also von der Idee her.
Okay, also von der Idee her.
Also was wir jetzt machen müssen ist, wir brauchen so was wie
Also was wir jetzt machen müssen ist, wir brauchen so was wie
Source oder Root oder so.
Root, Document, Get,
Root, Document, Get, JavaScript.
Root, Document, Get, JavaScript.
Oh fuck, wie ging das? Element.
Oh fuck, wie ging das? Element.
Element, ne.
Document, Get, genau.
Get Element by ID
brauchen wir. Und zwar
die ID Content von unserem
JavaScript.
Come on, bruh.
So, und da appenden wir das Ganze
dann dran. Document Create,
also nennen wir das mal Image.
Document Create Element Image.
Oh.
Oh.
Image, Source.
So und Source ist jetzt.
Ach ne, wir brauchen noch ne Schleife.
Wie sieht ein For Each in JavaScript aus?
Wie sieht ein For Each in JavaScript aus?
For In.
For Each.
For In.
Das sieht nach ner ordentlichen For Each Schleife aus.
Also.
Also. For.
In.
Moment, bevor wir
anfangen, geben wir uns den
Krempel doch einfach mal aus. Dann wissen wir
nämlich, dass die Schleife wenigstens funktioniert.
Jetzt müssen wir die eigentlich
untereinander alle kriegen.
Ja, Funktions...
0, 1?
Nein. Ich will ein for each haben.
For in.
Was? For off?
Okay, for off.
For off.
Weil JavaScript...
Also for in ist ja auch vorne
for each viel zu
unlogisch. Ja, das ist in JavaScript nicht so.
Ja, das ist gut.
Also nicht for in, wie sich das eigentlich
richtig handelt, sondern for off.
Alter, JavaScript...
JQuery? Nee, nee, nee. JQuery verwenden wir nicht.
JQuery ist für Noobs.
JQuery kann das ja jeder.
Lagerst du das JavaScript
später noch aus? Ich lager alles aus.
Ich lager auch das Zeug, was ich in meiner
Klasse da gemacht hab, aus.
Remind me later
Windows Update, ja.
Ähm, ans weiter rechter Wollscan, wenn wir
Windows Update neu starten.
Lull, Alter.
So.
Okay, das funktioniert.
Da können wir den Campbell jetzt hier drinnen machen.
Nee, Moment, das Root können wir
hier oben anlegen.
JavaScript!
Ich krieg Anfälle.
JavaScript.
Ich mein, das ist kein schönes JavaScript, ja?
Also, Webentwickler werden sich jetzt in die Haare greifen
und sagen,
Max, warum machst du das nicht mit React
oder mit Vue oder mit
was noch so im Trend?
Was gibt's noch für hype, hippe
Webframeworks?
Angular oder mit
ähm, was gibt's noch?
Amber oder
ähm,
mir fällt nichts mehr ein.
Was gibt's noch für hippe JavaScript?
JavaScript-Frameworks gibt's ja jede Woche neue.
Was ist denn so angesagt zur Zeit?
Also, ich weiß, dass React,
React ist angesagt, Angular ist angesagt
und Vue ist angesagt. Das sind so die,
da stehen sie drauf.
Ah.
Und damit wär das wahrscheinlich sogar schöner,
als schatz hier RAW
JavaScript DOM-Manipulation.
Aber,
ich will einfach wissen, ob's funktioniert.
So, Source. Source ist ja
in dem Fall, wir haben hier geguckt,
ähm,
Name.
Also, sprich,
also, theoretisch,
Local-Horse, 5001,
Image,
plus,
plus Meme.
Name.
Oder?
Ja.
So.
Vue und Meteor sind beliebt.
Okay, von Meteor hab ich,
doch, Meteor hab ich auch schon mal gehört.
War Meteor nicht so ein Ding für Backend und Frontend,
irgendwie in einem Framework?
So, machen wir mal,
Breite 100, ähm,
Höhe auch 100.
Was ist denn noch?
Brauchen wir noch irgendwas?
Nö, das war's. Wir gucken erst mal, ob's überhaupt angezeigt wird.
So, und dann sagen wir,
Root Add,
ne, Moment.
Wie hat man Zeug hinzugefügt?
Wart mal.
Append Child.
Image.
So, und dann müssen wir das noch,
dann müssen wir das noch einmal leeren,
falls da schon Sachen drinne sind.
So, ich denke mal, das müsste so funktionieren.
Das heißt, wir müssten jetzt eine Seite kriegen,
mit allen unseren Memes drauf.
Poggers!
Funktioniert!
Krasser Shit, oder?
So, sehr nice. Sehr, sehr nice.
Das ist wirklich simpel.
Ich sag das zum 50. Mal,
das ist wirklich ganz schwierig.
Direkt auf der DOM arbeiten in 2018.
Nachdem ich weder großartig im React, noch wirklich,
nachdem ich weder großartig im React, noch wirklich,
nachdem ich weder großartig im React, noch wirklich,
noch View, noch Angular kann,
noch View, noch Angular kann,
ist das jetzt erstmal das Einfachste, um zu gucken,
ob es prinzipiell funktioniert.
Okay, nice, das klappt.
Jetzt machen wir noch ein bisschen...
Jetzt machen wir noch ein bisschen, ähm,
CSS oder sowas drumherum.
So, jetzt, also,
in die eine Richtung funktioniert es jetzt ja schon mal.
in die eine Richtung funktioniert es jetzt ja schon mal.
Also, ich krieg schon mal alle aktuellen Memes vom Server.
Aber solange ich Request Update mache,
Aber solange ich Request Update mache,
Jetzt muss ich es ja irgendwie umgedreht noch schaffen.
Wenn ich draufklicke,
Wenn ich draufklicke,
Wenn ich draufklicke,
dann will ich zum Server schicken,
dass dieses Bild, worauf ich geklickt habe,
jetzt angezeigt werden soll.
Wenn der Server dann das Bild angezeigt hat,
soll es mit einem Status Update antworten,
dass ich weiß, dass es funktioniert hat.
dass ich weiß, dass es funktioniert hat.
Warum jetzt Javascript? Das ist nach wie vor immer noch C-Sharp.
Das ist fürs Frontend, ist das Javascript.
Also für die Fernsteuerung vom zweiten Rechner aus.
So, wir brauchen jetzt noch ein Klick-Event.
Klick.
Klick.
Ne.
On.
Onklick.
Onklick.
Also, ähm, noch ein Klick-Event, das ausgeführt wird, wenn ich auf das Bild klicke.
Ähm, man kann auch in Javascript jetzt auch so Lambda-Functions machen, ne?
Äh, Element.
Oh, das ist jetzt aber geraten, ob die Syntax so ist.
Okay, anscheinend ist die Syntax so.
Ist die Syntax echt so?
Lull.
Alala.
Gucken wir, ob es das jetzt ausgibt.
Wenn nicht auch.
Wenn ich auf das Bild klicke.
Fakt, es klappt.
Das ist ja einfach.
Okay, Javascript ist gar nicht mehr so schlimm, wie ich das in Erinnerung habe.
So, in Element müsste jetzt mein jeweiliges Image drin sein.
Und ich muss mir noch irgendwie den...
Ich muss mir noch irgendwie den...
Den Name merken, dass ich den aktivieren lassen kann.
Name.
Kann man sowas hier machen?
Ne, ne, gibt's schon.
Ähm, Name.
Tja, wo speichern wir uns denn den Name drinnen?
Alt.
Ja.
TypeScript ist nice.
Da hab ich schon ein bisschen was mitgemacht.
Das ist echt nice.
Memename hast du eh schon.
Ne, hier drinnen doch nicht.
Das ist ja...
Das hier ist ja der Event-Handler, der aufgerufen wird, wenn ich das Bild klicke.
Und dann hab ich zu dem Zeitpunkt ja...
Hab ich das Memename ja gar nicht mehr.
Das heißt, ich hab nur noch das Element, wo ich draufgeklickt hab.
Geht das so jetzt?
Wenn ich einfach jetzt sage, Element alt, gibt der mir dann den Namen aus?
Findest du das?
Undefined.
Nope.
Okay, so einfach ist das schon mal nicht.
War ich das überhaupt richtig so?
Mit OnClick und Element und so?
Gucken wir mal.
Gucken wir mal, ob das überhaupt funktioniert, was ich da mache.
Ja.
Ah.
Ah, Moment, Moment.
Das ist nicht das Element, das ist das Maul.
Das ist das Maus-Klick-Event.
So, das Maus-Klick-Event.
Target.
Target ist das Wichtige.
Target braucht...
Oder Source-Element.
Source-Element klickt irgendwie besser.
Source-Element.
Source-Element.
Und dann alt.
Wonka Shake.
Gucken, ob's geht.
Nice, nice, nice, das funktioniert.
Okay, jetzt brauche ich auf dem Server eine Methode, die ich aufrufen kann.
Okay.
Für...
Ja, aktiviere mir mal das Bild.
Das heißt, wir gehen wieder da hin.
Und machen da jetzt eine...
Äh...
Void...
Nennen wir irgendwie...
Push...
Push-Update.
Und dann brauchen wir die ID, beziehungsweise den Namen vom Meme, dass er das aktivieren kann.
Und dann aktiviert er das.
Und zwar übers Fenster mit...
Toggle-Meme.
Da kann man natürlich das nicht direkt übergeben.
Ich muss mir das erst raussuchen.
Oh, das ist alles echt hässlich, was ich hier mache.
Find.
Nee, first.
First.
Machen wir mal...
Komm, wir machen jetzt wenigstens mal ein bisschen fehlersicher.
Wir sagen jetzt hier first.
First or default.
Ähm...
Wir suchen ein Meme mit...
Mit Name.
Name gleich ID.
So.
So, krasses C-Shop-7-Feature.
Wow.
Bis jetzt.
If...
If...
Ähm...
Is...
Meme...
So.
Nee, is...
M.
Oh, da geht was anderes ab.
Dann...
Update das Ding mit...
Okay.
Okay, nice.
So.
Also...
Von der Idee her sollte jetzt, wenn ich auf ein Bild draufklicke, das gleich aktiviert werden.
Das heißt, ich sag jetzt hier...
Invoke.
Fuck, ob das funktioniert.
Invoke push update.
Damit.
So, das heißt, wenn ich jetzt auf ein Bild im Browser draufklicke, dann sollte das jetzt gleich aufgehen.
Oh.
Boah.
Fuck.
Fail to invoke hub method push.
Ach.
Multithreading, Leute.
Könnt ihr euch noch dran erinnern, dass ich das letzte Mal eine halbe Stunde gelabert hab, wie sehr man aufpassen muss, wenn man aus einem anderen Thread was aufruft im UI-Thread?
Könnt ihr euch da noch dran erinnern?
So.
Und nachdem ich das letzte Mal eine halbe Stunde erzählt hab, hab ich das jetzt selbst nicht gemacht.
Lambda sind was ganz Tolles.
Kann man ifs noch hässlicher machen damit?
Jetzt geht's.
Das Problem war jetzt, weil es nicht so ganz offensichtlich ist, versuche ich das nochmal zu erklären.
Das Problem war jetzt, ich hab jetzt hier meinen Web-Server laufen, der jetzt eine Nachricht gekriegt hat von meinem Browser, dass hier was aufgerufen werden soll.
Der ruft dann push update auf.
So, und push update rufe ich was auf in meinem UI-Thread, was nochmal das hier unterstreicht, dass man das an dieser Stelle gar nicht macht.
So, und nachdem ich jetzt von einem anderen Thread in meinem UI-Thread versucht hab, was...
was zu schreiben im Endeffekt oder was aufzurufen, hat er gesagt, darfst du nicht.
Und wie man es richtig macht ist, man sagt, lieber UI-Thread, leg mal in deine Event-Warteschlange, dass das hier ausgeführt wird.
Und dann funktioniert das auch.
So, also von der Idee her, ich klicke jetzt auf ein Bild und es wird angezeigt.
Bäm.
Poggers und es toggelt sogar.
Das ist geil.
Funst.
Easy Remote Control.
So, und das Geile ist...
Das kann ich jetzt vom zweiten Rechner ausrufen, von meinem zweiten Streaming-PC kann ich das aufrufen.
Äh, wartet mal, Leute.
Nur mal so, dass man sieht, dass es halt mit mehr Bildern durchaus Sinn ergibt, als mit fünf.
Nee, nee, nee, nee, nee, nee.
String und String ist das Gleiche, den sie schreibt.
Also das hier, das hier, ist das Gleiche wie das hier.
Exakt das Gleiche.
Das ist ein Alias auf das oder das.
Das ist ein Alias auf das oder sowas.
Äh, was genau, was genau macht das hier?
Das, ich weiß nicht, wie man es offiziell nennt.
Ich, das, ich nenne das Ding immer irgendwie Lambda-File oder Lambda-Operator oder so.
Du kannst anstelle, wo haben wir denn hier sowas mal?
Also, du kannst an dieser Stelle, wenn du mal guckst, was diese Funktion haben möchte,
diese Funktion möchte eigentlich als Parameter eine andere Funktion, die sie aufrufen kann.
Und ich könnte jetzt hier auch sowas reinschreiben, wie halt dis, ding, bla, haste mich gesehen, halt irgendeine Funktion, die ihre aufrufen soll.
So.
Allerdings müsste ich dann extra eine Funktion definieren, die ich aufrufen will und bla und Parameter und alles.
Und wenn ich das mit Lambda-Filen mache, kann ich eben sagen, okay,
nehmen einfach diese anonyme Funktion hier und ruf die auf.
Also eigentlich die hier.
Hier sieht man es besser.
So.
So.
Ruf diese anonyme Funktion auf, anstatt eine benamte Funktion, die irgendwo steht.
Und was die anonyme Funktion macht, ist, das hier aufrufen.
Also das hier ist quasi der Body von der Methode.
Du kannst da auch, man kann da auch Klammern drumherum machen und dann kann man das mehrzeitig machen.
Das funktioniert auch.
Und das ist in JavaScript ganz cool, weil früher wusste man in JavaScript, konnte man sowas nicht hier machen,
sondern musste dann so komische, guck mal, ob ich das jetzt noch zusammenkriege,
in JavaScript musste man dann früher sowas hier machen, irgendwie Function, Function, bla, bla.
Also in JavaScript hattest du irgendwann mal das Problem, dass du quasi Function, Function, Function in Function von Function irgendwas hattest
und das sah extrem hässlich aus früher in JavaScript.
So ist das schön, oder?
Das war ein dummes Beispiel, das eine hat mit dem anderen gar nichts zu tun.
Aber das geht trotzdem mit Lambda-Pfeilen oder Lambda-Expressions besser.
So.
Okay, also prinzipiell funktioniert ja jetzt das.
Man kann das hier jetzt vom, das geht jetzt nicht, weil ich den Server nicht laufen habe,
man kann das hier jetzt vom Rechner aus aufrufen.
Das ist mega geil.
Guckt.
Also stellt euch vor, ich bin hier gerade auf meinem zweiten Rechner.
Auf dem gleichen Rechner ist das bescheuert.
Auf dem gleichen Rechner.
Äh, ergibt es ja wenig Sinn.
Da kann ich ja Shortcuts drücken.
Aber vom zweiten Rechner aus ist das halt extrem geil.
Jetzt hab ich quasi, und Leute, nicht nur vom zweiten Rechner, vom Smartphone auch.
Also sprich, wenn ihr jetzt am Stream seid und das, das Memeboard laufen habt
und wollt dann quasi, ähm, irgendwie eins von euren 80 Memes einblenden, was kein Shortcut hat,
also Lull hat einen Shortcut, mal angenommen,
irgendwie, Resident Sleeper hat keinen Shortcut,
dann geht ihr mit eurem Smartphone oder Tablet auf das Webinterface,
wenn es, muss halt im WLAN sein, ne, wie euer Rechner,
geht ihr auf das Webinterface und klickt auf eurem Smartphone das Bild
und auf eurem Spiele-PC, den ihr gerade streamt, wird es angezeigt.
Und nochmal klicken macht es wieder weg.
Das ist halt schon, ne, das ist schon Big, Big, Big Brain, muss man sagen.
Ja, du kannst das auch, äh, das Sommeln,
du kannst das auch mit zwei Leuten gleichzeitig steuern.
Das funktioniert.
Da kommst du dir halt ein bisschen in die Quere, wenn du mit mehreren Leuten hier zeitgleich drin rumklickst,
aber es funktioniert, ah, das Dreckentroppen funktioniert, das, wir brauchen, also,
ich werde es ja wieder nach dem Stream dann hochladen.
Ich mache jetzt null Optik hier in diesem JavaScript.
Und ich weiß, ich habe noch zwei Pull-Requests, ich weiß nicht, ob die Leute da sind, die die gestellt haben,
ich habe noch zwei Pull-Requests, die, ähm, Rotationsgeschwindigkeiten sowas anpassen.
Das gucke ich mir das nächste Mal an, weil das bauen wir auch noch ein.
Ähm, aber falls hier ein paar JavaScript-Leute am Start sind,
ich baue das jetzt hier noch fertig, dass das quasi auch Status updatet und noch einen grünen Rahmen oder so macht,
je nach aktivem Meme, aber wenn ihr das JavaScript ein bisschen, ein bisschen schöner machen wollt,
ich freue mich über jeden Pull-Request, kommen da noch mehr Memes rein, du kannst Memes reinziehen, wie du willst.
Da müssen mehr, man kann so viel reingruppieren, wie man will.
Du kannst hier einfach Bilder runterladen und reinziehen und dann funktioniert es.
Das sind jetzt ja nur die, die ich hier für den EA-Stream damals hier runtergeladen habe.
Ja, du kannst da, kannst da reinmachen, was du willst.
Das sind jetzt ja nur meine.
Du kannst sogar während es läuft eins reinziehen und dann lädt er das quasi während es läuft nach.
Okay, nur, dass ich nicht vergesse, also, wir müssen jetzt noch zwei Sachen machen.
Wir brauchen,
...
...
...
...
...
...
...
Wir brauchen Status-Update an Client, wenn sich was geändert hat, auf dem Server.
Und wir brauchen...
...
...
...
...
...
...
...
Also, wir können jetzt vom Client an den Server pushen, dass er nuevas Memes anzeigen soll und wir können uns initial einmal den Stand holen.
So.
...
...
Status-Update an Client, wenn sich, also, wenn, wenn der Client hier Push-Update triggert,
dann kriegt er das ja gar nicht mit, ob der Server das angezeigt hat.
Und das müssen wir jetzt ändern.
Also, das heißt, das heißt, ähm, jetzt müssen wir dem Client irgendwie Bescheid sagen,
nachdem das hier erfolgreich getriggert wurde auf dem Server, wie machen wir das jetzt?
Das ist ASP.NET, ja.
ASP.NET, nein, ASP.NET Core ist das.
Ähm, also ich hätte jetzt zwei Ideen, wie wir das machen.
Wir können entweder dem Client jetzt sowas wie ein Invalidate oder so schicken
und sobald er das bekommt, fragt er selbst nach Request-Update.
Das können wir machen.
Oder aber, wir müssen irgendwie eklig aus dem, aus dem Event hier müssen wir aufrufen,
dass der Client sich updatet.
Wir rufen das erstmal eklig aus, aus dem, aus dem Window auf.
Jaja, das machen wir erstmal.
Wir müssen einfach mal gucken, ob das funktioniert.
Reapparate, oder?
Aber das andere ist schöner.
Also es wäre schöner, wenn ich hier dem Client jetzt einfach sage, update dich.
Der Client dann anfragt beim Server.
Hallo, ich würde gerne updaten.
Und dann schickt ihm, dann schickt ihm der Server das zurück.
Ja, das wäre eigentlich, das wäre schon schöner, ne?
Dann sagen wir hier, this, call, äh, this Client, caller, send.
Irgendwie, wir nennen es jetzt einfach mal so, invalidate.
So, und wenn es dann...
Genau, und wenn es dann eine Anfrage bekommt, dann soll er sich vom Server ein Update holen.
Invalidate, dann soll er sagen, invoke request update.
Soweit von der Idee her sollte das funktionieren.
Wäre es viel Aufwand, es so zu programmieren, dass man mehrere Memes gleichzeitig anzeigen lassen kann?
Nö.
Also ich vermute mal, dass es funktioniert, weil er keine Fehler wirft.
Das wäre kein Problem.
Mehrere Memes anzeigen zu lassen.
Müsste man sich nur überlegen, in welcher, ob Vira das macht.
Also sprich, ob man einen Knopf macht zum Löschen aller Memes oder zum, dass es durchschaltet, quasi, erstes Meme anzeigen, zweites, drittes.
Und beim vierten dann wieder das erste überschreiben.
Das müsste man sich überlegen.
Aber ansonsten wäre das kein großer Akt mehr.
Das wäre kein Ding.
Eine Sache, die ich mir noch überlegt habe, die wir noch einbauen, ist, dass man die Sachen platzieren kann und resizen kann, wie man will.
Also sprich, dass ich einmal initialisieren.
Ich hätte gerne meine Memes, würde ich gerne hier anzeigen und nicht so groß, sondern nur in der und der Größe und so.
Das machen wir noch, weil aktuell ist es halt immer so groß, so groß wie geht im Endeffekt immer an dieser Stelle hier.
Okay, so, das scheint zu funktionieren.
Jetzt müssen wir ein bisschen CSS noch einbauen.
Und wir müssen irgendwie dem Client noch sagen können, welches Meme überhaupt, welches Meme überhaupt anbaut.
Ist.
Weil sonst wird das und klappt das ja nicht.
Okay, das müssen wir anders machen.
Ähm.
File, Response.
Memes.
Okay, ähm.
Wir formatieren uns das jetzt ein bisschen um.
Wir müssen dann nämlich noch, wir brauchen irgendwie noch, ist active und den ganzen anderen Clienten brauchen wir nicht.
Wir brauchen nur den Name und wir brauchen, ob es aktiv ist.
Mehr brauchen wir nicht.
Ähm.
Und dann schicken wir nicht die Memes direkt zurück, sondern die aufbereitete Liste für, für die Antwort.
Ähm.
Boom.
Select new name und, ähm, dann sowas wie, ähm, active.
Active.
So, und das Meme ist active.
Relativ simpel.
Ähm.
Ist das, das was, ähm, wenn das da gleich dem ist, was angezeigt wird.
Ja.
Und die Form sichtbar ist, genau.
Visible.
Is visible.
Und.
Okay, das ist hässlich, aber das müsste funktionieren.
Jetzt funktioniert aber mein, mein JavaScript nicht mehr.
Okay.
Oder?
Boah, da wird, funktioniert was, so, wahrscheinlich, wahrscheinlich funktioniert er sogar noch.
Ja, okay, funktioniert noch.
So, weil jetzt habe ich drinne stehen, ob das active ist oder nicht.
So, und wenn das active ist, dann malen wir einen grünen, einen grünen Rahmen um das Bild, wenn es active ist.
Also sprich, if mean active.
Dann geben wir jetzt erst mal aus, active plus Meme name, gucken ob das funktioniert, ja, nice, nice, nice, das klappt.
Also ich muss sagen, dass mit diesem Signal R, das ist wirklich simpel gemacht, das ist echt, das ist gut und simpel.
So, Meme active name.
So, und da machen wir jetzt irgendwie ein bisschen CSS noch dran, dass es nicht mehr ganz so hässlich aussieht.
So, irgendwie sowas.
Image.
Style.
Inline-CSS, ja, da habt ihr drauf gewartet, ne.
Ähm, CSS, inner border, wir wollen, dass das, dass das ordentlich skaliert, die Seite.
Placing border inside, genau, das wollen wir haben.
Doch, Inline-CSS.
Noch schlimmer, es ist ja nicht mal Inline-CSS, es ist Inline, Inline-CSS, weil es ist Inline-JavaScript, was Inline-CSS setzt.
Wobei, also nach Web-Entwicklungsstandards ist es ja dann wieder gut.
Weil zwei schlechte Sachen zusammen sind, sind bei vielen Web-Sachen meistens wieder okay.
Nur eine schlechte Sache ist nicht gut.
Das ist Massive-Brain.
Massive-Logic.
Outlogic.
Box-Sizing, Border-Box.
Wollen wir haben.
Und dann wollen wir Background.
Ne, Border, Border.
Border.
Border.
So, und dann, was ist ein F, F-Dings für eine, für eine Farbe?
Achso, das ist ja 0, 0.
Okay, das ist, äh, äh, äh, Green.
Green-Hex.
Was ist denn?
Ah.
So.
Das setzen wir jetzt mal.
So, und von der Idee her ist das Active-Meme, hat jetzt einen grünen Rand drum gleich.
Mal gespannt, ob das klappt.
Das Inline kürzt sich beim Inline-CSS-Werk.
Ja, so ist das.
Achtung, Achtung.
Bam.
Pogos.
Und guck mal, wie schnell das updatet.
Seht ihr das?
Das ist wirklich, das, das ist ohne Lack.
Also, natürlich muss das im gleichen Netzwerk sein.
Ist klar.
Also, ohne Lack.
Schlickst an.
Bam.
Grün.
Grün.
Grün.
Und das, obwohl es zweimal nen Ping-Pong über den Server macht.
Okay, der, der Rahmen ist vielleicht ein bisschen dick.
Das gebe ich zu.
Was ist der?
Der ist, der ist, der ist, der ist, der ist, der ist, der ist, der ist, der ist, der ist,
das gefällt mir wirklich gut.
Ich habe hier, wir machen 2, 2 Umwege über den Server.
Wir holen uns erstmal alle, also wir requesten erstmal, schick mir alle Memes.
Dann sagen wir, dann ruft der Server auf meinem Client Update auf mit allen Memes drin.
Ich setz die.
Wenn ich ein Bild klicke, pushe ich das Update zum Server.
Der Server setzt das Bild, ruft dann wiederum auf,
Client, mein Status hat sich geändert, update dich mal.
Und dann macht der Client quasi das gleiche nochmal
und lädt wieder alle Bilder runter, die er hoffentlich gecached hat zwischenzeitlich.
Das ist highly efficient, ja.
Das ist pünktlich im Kreis.
Und dann ruft er nochmal alles ab und erkennt, dass das neue Bild active ist.
Aber so, muss man sagen, gibt es keine State-Probleme.
Weil wenn ich jetzt sagen würde, dass ich nach dem Klick,
also mal angenommen, ich würde jetzt sagen, okay,
nachdem ich zum Server geschickt habe,
dass ich möchte, dass der Server was Neues anzeigt,
wenn ich dann hier das Bild gleichsetzen würde auf grün,
weiß ich ja nicht, ob der Server das gemacht hat.
Wenn ich das hier setze, quasi nachdem mir der Server schickt,
es gibt ein Update, ein Update, was wahrscheinlich aus meinem Push resultiert,
dann weiß ich, dass der Status, den ich hier bekomme, der richtige ist.
Also eigentlich haben wir hier quasi fast ungewollt,
was von der Logik her ziemlich sinnvoll ist, gebaut.
Okay.
Wir müssen jetzt bloß noch einbauen, dass der Rahmen ein bisschen kleiner ist.
Sagen wir mal, fünf Pixel reicht, ne?
Fünf Pixel.
Und kann man hier nicht einfach sagen, green?
Geht das nicht?
Doch, geht.
Wie ist es?
Viel besser.
Okay, aber das Resize ist noch so hässlich, das gefällt mir nicht.
Da machen wir einfach standardmäßig um jedes Bild einen Rahmen drum,
der halt einfach weiß ist.
Okay, das heißt, standardmäßig
ist da einfach ein Rahmen drum, der weiß ist, den keiner sieht.
Dann haben die Bilder auch ein bisschen Abstand voneinander.
Nice. Geht.
Boah, das ist sehr, sehr nice.
Das ist hyper nice.
Guck mal, wie einfach das jetzt war, Leute.
Und jetzt hat man am Streaming-Rechner am zweiten ein Dashboard,
wo man, wo man die Bilder ohne Shortcuts anklicken kann.
Wie gesagt, das kann man auch viel schöner machen.
Man kann sich hier noch die, die Shortcuts drunter anzeigen lassen und sowas in der Richtung.
Alles kein Ding.
Man sieht übrigens auch, dass der relativ clever ist
und die Bilder nicht neu lädt, die er schon hat.
Das JavaScript-Zeug.
Also sehr nice, muss ich sagen.
Sehr, sehr schick.
So, wie gesagt, das ist mega hässlich, das Ganze hier.
Das ist nicht schick oder sonst was.
Das heißt, wenn irgendjemand so ein bisschen mit JavaScript Frontend-Zeug auskennt,
Pull-Requests sind wirklich willkommen, die das ein bisschen schöner machen.
Und dann auch noch ein bisschen...
Hier beispielsweise einen Shortcut drunter schreiben oder sowas,
den man drücken muss für das Bild.
Das beispielsweise noch angezeigt wird, ob es ein GIF ist oder nicht oder irgendwie sowas.
Ja, und das Ganze halt nicht einfach so stumpf nebeneinander,
sondern vielleicht in einem schönen Grid.
Vielleicht auch in einem ordentlichen Hintergrund,
dass es auch ein bisschen so nach einem Dashboard aussieht.
Und natürlich auch gerne mein JavaScript wegschmeißen und schön machen,
weil das ist kacke.
Memes mit Track & Drop, auch das ist eine schöne Idee.
Allerdings müsste man diese Konfiguration ja irgendwo speichern,
dass sie das nächste Mal wieder da ist.
Dann wird es schon wieder kompliziert.
Aber das schreibe ich mir mal auf.
Memes per Track & Drop.
Ja, und dann später noch anzeigen, in welchem Profil die Memes sind,
dass man das Profil-Erleben switchen kann oder so.
Irgendwie sowas.
Könnt ihr eure Kreativität freien Lauf lassen.
Also wenn jemand gut hier JavaScript, HTML, CSS kann, haut rein und macht das schön.
Ist mir egal.
Ich meine, hier gibt es nichts dabei,
hier ist ja nichts an Design dabei.
Könnt ihr euch austoben, wie ihr wollt.
Das werden wir dann das nächste Mal merchen.
Alexa-Integration.
Das ist was, was sinnlos ist bei der Geschichte,
weil du willst ja nicht während einem Livestream sagen,
Alexa, blende WTF ein oder so.
So, schönes, hässliches JavaScript.
So direkt mit DOM-Manipulation, direkt von Hand.
Raw DOM.
So, was haben wir denn jetzt noch?
Status-Update an Client haben wir gemacht.
Gut.
Wir lagern das noch aus dann, weil das Ding hat ja als so Inline in dieser Klasse überhaupt gar nichts drin zu suchen.
Aber ich finde gut, dass das funktioniert.
Und ich muss sagen, das hat wirklich einfach funktioniert.
Da kann man nichts anderes.
Das Microsoft-Zeug da ist echt nicht übel.
Guck mal, das reagiert übel schnell.
Null Lack oder sonst was.
Klick, klick, klick, klick, klick, klick, klick.
Doppel-Klicks in Menge.
Das bringt das überhaupt nicht, überhaupt keine Probleme.
Okay, das Drag & Drop ist kacke, was man aus Versehen macht, weil es halt Bilder sind.
Das könnte man auch noch abschalten.
Ja, das gefällt mir gut.
Di-di, di-di, di-di.
Windwaker.
Moment, ne, war es noch mal Windwaker?
Ist das Windwaker?
Ich glaube schon, oder?
Okay, ähm, sehr nice.
Gibt es da noch irgendetwas Kleines, was wir machen können?
So, dieser Hardcoded-Krempel, der musste auch mal hier raus, ja.
Hat nämlich überhaupt nichts zu suchen, das ist überall Hardcoded, das ist kacke, wir sollten uns, wir machen das einfach.
Also von der Idee her ist es eigentlich am besten, man sagt, man nimmt den Ordner relativ zu dem, wo das Programm liegt.
Aber das machen wir zum Schluss.
Das ist nichts Großartiges.
Und es nervt beim Basteln.
Wenn ich dann jedes Mal die Bilder mit kopieren muss und sowas.
Jo, gibt es da irgendwas, was wir machen müssen?
Weil, das an sich hat wunderbar funktioniert.
Gut, ich kriege das SMS.
Wenn ihr noch was wissen wollt, schießt los, Leute.
Ich muss gleich zum Opa auf dem Friedhof.
Dort neues Zeugchen bringen.
Also ich bin nur noch irgendwie 20 Minuten da.
Ja.
Ähm, weil irgendjemand hat, jetzt ohne Scheiß, ne, muss ich mir mal vorstellen, auf dem Friedhof.
Jetzt hat jemand die Blumen vom Grab geklaut beim Opa.
Weg.
Also, ich weiß nicht, ob er die geklaut hat oder drüber gefahren ist oder sowas.
Es sah aus, als ist einer drüber gefahren und hat die Dinger dann davor, er hat davor die Dinger geklaut und,
nein, es war kein SMS, war ein Message.
Ähm, als ist er davor drüber gefahren und, ne, dann vor geklaut und danach nochmal drüber gefahren.
So sah es aus, äh, so richtig, richtig, alles was noch da war, war komplett.
Komplett platt gewalzt und die Hälfte war auch weg.
Also hat irgendjemand einfach mal die Blumen geklaut vom Grab vom Opa.
Also, verstehe ich nicht, warum.
Ja.
Das ist wirklich confused.
Das ist hyper confused.
So ist das eigentlich eher.
Twitch-Chat-Integration bei Emote-Spamming.
Leute, das habe ich mir sogar schon aufgeschrieben.
Ich habe mir nämlich überlegt, weil letztendlich, ne, ist das ja einfach,
so ein Endlos-Projekt.
Du kannst immer noch was einbauen.
Ich habe mir überlegt, wenn wir, wenn wir dann, wenn wir die erste Version fertig haben.
Check it out.
Englisch UK.
Boah, geil.
Local Experience Pack.
Endlich Microsoft.
Danke, danke, dass ihr das jetzt installiert habt.
Hat ja eine Top-Bewertung, dieses Language Pack.
Keep struggling, install and fail.
Ähm, ja, das ist ja so ein nicht enden wollendes Projekt eigentlich.
Das heißt, wir können da noch so viel einbauen.
Also ich erzähle euch mal, was ich mir, was ich mir noch aufgeschrieben habe, was wir machen.
Also, ähm, wo ist es denn?
Also wir bauen jetzt erstmal ein, dass das noch Sounds abspielen kann.
Also sprich, dann kann man Sounds reinlegen mit einem Bild dabei.
Das muss dann halt ähnlich heißen.
Ähm, dann spielt er halt den Sound ab oder den Sound plus das Bild.
Oder sowas in der Rechnung.
Das bauen wir noch ein.
Dann, dass man die Bilder bewegen kann.
Beziehungsweise resizen kann.
Ähm, halt je nachdem, wo man es haben will.
Weil immer an der gleichen Stelle und immer an der gleichen Größe ist vielleicht nicht für jeden so sinnvoll.
Ähm, Track & Drop Memes habe ich mir gerade auch geschrieben.
Werbeinterface, müssen wir mal gucken, wie wir das machen.
Dann, zwei, zwei richtig geile Sachen, die wir machen.
Wie gesagt, das mit dem, mit dem, mit dem Profil über, über NumPad machen wir auch.
Und das werden wir kombinieren mit, zeigt euch fest, einmal mit, ähm, ich zeige es euch mal, wartet.
Das werden wir einmal kombinieren mit, hm, mit, damit, damit kann man nämlich RGB, ähm, RGB Beleuchtung an Keyboards dafür verwenden, quasi, ähm, also man kann, man kann mit dieser Library kann man RGB, ne, damit, RGB Net was, genau, kann man Keyboards ansteuern aus dem Programm, RGB Keyboards.
Und da kann man dann quasi auf dem Keyboard.
Den Status anzeigen, in welchem Meme-Profil man gerade ist.
Also sprich, wenn man wirklich dann irgendwann mal 80 Bilder oder so hat, die man in verschiedene Profile gruppiert hat, dann kann ich dann quasi je nachdem, in welcher Farbe die Tasten an meinem NumPad leuchten, weiß ich, okay, ich bin jetzt gerade im Profil für, äh, Porra-Memes, ich bin gerade im Profil für Sad-Memes, so ist der in der Richtung.
Jetzt weiß man, baut RGB Beleuchtung ein, weil, man muss ehrlich sagen, jedes, jeder, der was auf sich hält.
Auch in irgendeiner Form was mit RGB Beleuchtung, ganz wichtig.
Und wir bauen Support für Elgato Stream Deck ein.
Da freue ich mich ja schon am meisten drauf, weil ich hab nämlich gefunden, es gibt ne, ne Stream Deck, Stream Deck Library, zwar nichts offizielles von Elgato, aber, das hier.
Da können wir, bauen wir Unterstützung für Elgato Stream Deck ein und das ist dann ein richtig ultra geiles Feature, weil, dann hab ich dann, ähm, nicht nur ein Webinterface vom zweiten Rechner, sondern,
kann den ganzen Mist auch über meinen Elgato Stream Deck, inklusive Vorschau von den Bildern, über Elgato Stream Deck bedienen, wenn man eine hat.
Das ist richtig geil dann.
Dann hol ich mir, da hol ich mir einen Elgato Stream, oder frag mal Elgato, je nachdem, ähm, hol ich mir irgendwo hier einen Elgato Stream Deck und dann basteln wir das hier noch.
Und dann haben wir RGB Unterstützung plus Elgato Stream Deck Support und dann haben wir das beste Memetool aller Zeiten, konkurrenzlos.
Es gibt ja irgendwie nichts Vergleichbares, das ist ja der Witz dabei.
Ich verstehe auch nicht warum.
habe selbst danach gesucht ich habe ja gesagt okay das muss es doch geben
shortcut bildanzeigeprogramme kann nicht sein dass es nicht gibt aber irgendwie
gibt es nichts und die die skipsacken da habe ich mir gedacht gut da müssen wir uns selbst was
basteln und wir sind ja schon relativ weit gekommen ich meine immerhin man kann
ohne probleme mittlerweile memes on the fly rein und raus ziehen aus dem ordner
die werden dann geladen und unloadet inklusive keybindings man kann massig
alle möglichen keys belegen mit memes wo man sich halt irgendwie noch leider
genau merken muss wo was ist und was man seit heute eingebaut haben ist
dass man sogar ein webinterface hat was man vom zweiten rechner oder vom tablet
oder vom smartphone verwenden kann um aus seinem streaming rechner quasi
bilder zu aktivieren es gibt nichts anderes was das hat
es ist mal massiv poggers würde ich sagen das ist übrigens nur in der debug
version dieses ding das ist in der eigentlichen version nicht da
ja
guck diese version hat das nicht die release version aber dein memetool geht
halt nicht auf das obs interface will nicht wissen was passiert wenn du deine
hotkeys ingame drückst nix was soll dann passieren wenn ich hotkeys nehme die das
game nicht belegt hat passiert nichts dann zeigt es das meme an und der witz daran
ist ja dass es gerade nicht auf obs geht das ist ja gerade das ist ja gerade die
idee hinter dem ganzen dass es nicht über obs geht man kann das nämlich in
obs eingebaut machen man kann hier irgendwo und obs shortcuts definieren
dass man dann sachen 1 ausblenden kann 10 versuchen kann und sowas
das problem dabei ist man sieht es selber nicht und das war ein dass das
war der ausschlaggebende grund
das war der ausschlaggebende grund warum ich gesagt habe ich brauch so was weil
das problem ist wenn ich obs was einblenden dann sehe ich das selbst nicht
und wenn ich das selbst nicht sehe
vergesse ich es wieder auszublenden, dann habt ihr dann
eine halbe Stunde 0 3D
kreisen oder so, weil ich
es per Shortcut angemacht habe im OBS
und sehe es nicht, das einzige
wo das Problem ein bisschen weniger ist
ist wenn man es über ein Stream Deck macht von Elgato, da sieht man ja
was man gedrückt hat, aber so finde ich
ist es die optimale Lösung und nachdem
ich es ja letztendlich für mich zum
Stream selbst gebaut habe
ist es halt auch
genau so wie man es braucht zum Stream
weil es ist halt
aus der Not geboren, dass es nichts gibt, was das
macht
wird es dich dann nicht erstmal
aus dem Vollbild Game
rauswerfen, nein
ähm, achso, ja
wie der Milchmann es schreibt, genau, also wenn du
exklusiv Fullscreen machst
dann funktioniert das logischerweise nicht
das geht nicht, das kann man
nicht machen
exklusiv Fullscreen ist
exklusiv Fullscreen, du musst das im Borderless
Fullscreen laufen lassen
aber es gibt kaum ein aktuelles
Game halt, was kein Borderless Fullscreen hat
und
ich sag mal so, wenn ich jetzt
Ultra Tryhard Mode
Overwatch mit Premade Gruppe
spiele, dann würde ich auch Fullscreen spielen
oder was weiß ich, CS oder so, der Ultra
Tryhard Modus, aber
man ist ja meistens im Stream
nicht unbedingt im 110%
Tryhard Modus und
ich streame alles mit Fullscreen
äh, mit Borderless Fullscreen
Fullscreen, einfach weil es
Capture einfacher ist und man einfacher
raus tappen kann und Zeug im Hintergrund machen
und in Borderless Fullscreen
funktioniert das und das Beste ist
dass es eben halt noch nicht mal
es hat keinen Einfluss drauf
ich hab's ja, ich hab gestern im
Battlefield Stream, hatten wir es ja laufen
und
man sieht ja, ich kann durchklicken
es crappt kein Fokus oder sonst was
mit Borderless Fullscreen
hat man immer weniger FPS, das habe ich auch mal
in meinen Zweifel, das dürfte nicht nennenswerten
Unterschied machen
du hast theoretisch
theoretisch, aber auch nur
ganz theoretisch
ähm, weniger FPS, weil
das Bild nicht direkt quasi
äh, in den Grafikkarten
Buffer reinrendert
sondern quasi über den Window
Display Manager rendert
weil es ja noch andere Fenster angezeigt werden können
aber
ich habe noch kein Game gesehen, wo das praktisch einen Unterschied macht
im FPS
warum sollte man überhaupt den Exklusiv Fullscreen nutzen?
weil man theoretisch ein bisschen
schneller
das Bild auf dem Monitor hat, ein bisschen schneller
also wir reden hier nicht von lange, wir reden hier von
keine Ahnung, 2 Millisekunden oder so
nicht viel
also
vor allem mit einem 144 Hertz Monitor
beziehungsweise einem
240 Hertz Monitor
und den entsprechenden FPS
die man in Games hat, wenn man quasi
Triad Comp spielt, dann wird die Grafik so weit runtergestellt
dass man die eben hat
dann, also
nicht wirklich
und wenn das in Games so ist
dann haben die Entwickler irgendwie komische Dinger gemacht
weil es ist ja
für das Game, es ist ja kein Unterschied
du renderst
das Game rendert sein DirectX Zeug
benutzt sein DirectX Gedöns
und
wenn du halt Exklusiv Fullscreen hast
dann ist es halt
dann ist halt der Window
der Windows Display Manager, dieser Windows
ähm, wie heißt der?
DWM, für was steht denn DWM?
Dynamic Window Manager
Desktop Window Manager, der ist dann halt nicht mehr
dazwischen, was halt bei Borderless
Fullscreen so ist
dafür hast du halt auch den Vorteil
wenn du Borderless Fullscreen hast
dass du quasi aus Spielen raus tappen kannst
ohne dass es 5 Sekunden
erstmal Context switchen muss, DirectX
ja und wenn es ein Rechner ist
auf dem man quasi streamen kann
spielen kann
streamen kann und sonst was, das macht
keinen Unterschied, das macht wirklich keinen Unterschied
ich bin was Inputlag angeht
also ich kenne niemand
ich sage mal so, ich kenne niemand
der so empfindlich ist
außer vielleicht der Eax, der geht noch mehr ab
auf Mikro Rockler und sowas
ähm, der so empfindlich ist
was Inputlag und irgendwelche Verzögerungen
angeht, ich merke den Unterschied
zwischen Fullscreen
und Borderless Windows
merke ich nicht, Null
wohlgemerkt in Spielen, die
ähm, halt eh massig FPS
haben, ja, also sprich
wenn ich Overwatch anhabe
und das läuft dann irgendwie auf 3 FPS oder so
was ist Max FPS bei Overwatch 240
irgendwie sowas
dann merke ich es Null
und ich stelle eh immer runter
aber da muss man sich halt entscheiden
wenn man Fullscreen haben möchte
und Fullscreen haben will
dann geht das nicht
dann muss man es halt beispielsweise über OBS Shortcuts machen
und hat halt auch die Nachteile davon
von OBS Shortcuts
und wir haben auch noch ein paar coole Sachen drin
dass wir die Minenbildchen animieren können
sowas, das kann ja OBS auch nicht
ähm, plus wir können auch noch Sounds
abspielen und Gedöns
und haben vor allem
nen Dashboard
was wir vom zweiten Rechner aus steuern können
und sowas, wenn man halt wirklich
Fullscreen Windows braucht
dann kann man es halt nicht nehmen
muss man sich halt was anderes überlegen
aber es ist auf jeden Fall die deutlich
komfortabler Variante, wenn man es verwenden kann
als OBS Shortcuts
auf den Ping hat es
keinen Einfluss, Milchmann
aber ich muss echt sagen
ich bin begeistert davon
das ist die SignalR Geschichte
das ist super simpel
super simpel
und das bei meinem
Kack
JavaScript Skills noch
super simpel und schnell
ach so eine Sache
müssen wir noch machen
wir müssen ja noch mal einstellen
dass der nicht nur auf Localhost
dass der nicht nur auf Localhost
lauscht, sondern
vom Smartphone oder so drauf zugreifen kann
oder vom zweiten Rechner
da brauch ich ja bestimmt Admin Rechte
für Firewall jetzt
ja, allow access
ja ist gut
jetzt gehts wieder
so und jetzt kann ich vom zweiten Rechner drauf zugreifen
ich mein, ich kanns euch jetzt nicht zeigen
ja
weil ich halt keinen zweiten
ich kanns in der
VM zeigen
ich zeig es in der VM
ich zeig euch das mal in der VM
also ne, das ist jetzt mein zweiter Rechner
weil ich kann euch halt keinen zweiten Rechner zeigen
so richtig
starten das jetzt nochmal hier über
release
und dann werden wir auch gucken
dass wir das alles noch in eine Echse dann packen
äh, Memeboard starten wir
zack
ähm
die IP raussuchen
ich probier grad mal aus, ob es vom zweiten Rechner
ob es hier funktioniert
warum nicht, ah ne, weil da ein T drin ist
kann nicht funktionieren, jop
vom zweiten Rechner aus
spackts rum
spackts rum
ach weil ich hardcoded
localhost drin hab, siehste mal ich kack noob
äh, ne machen wir das nächste mal
also prinzipiell
geht das, wenn ich jetzt hier natürlich hardcoded
irgendwo localhost drin stehen hab in meinem HTML
dann äh
ja, da kann das
natürlich nicht funktionieren
aber ich habs grad vom zweiten Rechner aufgemacht
die Seite geht auf, also das funktioniert prinzipiell
alles, wenn man so ein Scheiß hier macht
mit hardcoded IP überhaupt
wie würd man das überhaupt
Javascript mäßig richtig machen
ich will, wie setz ich in Javascript
ähm, die
die Url ein, die im Browser steht quasi
oder der, der
der Domain Name, wie krieg ich
meine Javascript Browser, wie krieg ich
an der Stelle den Domain Name von der Seite
auf der ich drauf bin
also den Teil hier
wie krieg ich denn den in Javascript
ach stimmt, ja klar, ja natürlich
ich, ich muss da gar nichts angeben, ne
ich mach einfach, ich mach einfach so
oder, was ist wenn ich einfach
so mach, geht das
geht das, kann ich einfach so machen
ja, easy
oder
ne, oder doch, nice
jetzt, jetzt mach ich's
ihr seht meine Maus ist, meine Maus ist nicht hier
ich geh jetzt auf den zweiten Bildschirm, zack
kann ich fernsteuern
nein, nein, nein, nein
ich will das nicht connect, ich will
ich will garantiert nicht
mein, mein Mikro irgendwie hier
geh weg
genau, alles, test, test
äh
so, ich zeig euch mal, dass das funktioniert
also, ne, ich bin jetzt in meiner
ich bin jetzt in meiner 4M
drin, wobei, ne, das kann ich euch dann
richtig zeigen, weil das immer noch, egal
scheiß drauf, ich bin jetzt in meiner 4M
und das hat mein zweiter Rechner im Endeffekt
ne, und von hier kann ich quasi jetzt
mein, mein Meme Board fernsteuern
wie man sieht
wie das funktioniert
und, man kann durchklicken, habt ihr das gesehen?
nice
ja, so muss das sein
das finde ich extrem nice
das gefällt mir echt gut, ich bin begeistert
davon, so, ich bin jetzt auf dem zweiten Monitor
quasi am
quasi am Streaming Rechner, wenn man so will
am zweiten Rechner
hab's im Browser auf und kann das Zeug
anzeigen
so, und jetzt brauchen wir bloß noch ein paar Leute
die gut sich mit Yamascript CSS und
HTML auskennen, die das ganze noch
ein bisschen hübsch machen, wie gesagt, ich freu mich
über alle Pull-Requests, die zwei Pull-Requests
die offen sind, gucken wir uns das nächste mal an, wo wir dann
ein paar Animationen und Gedöns einbauen
so sieht's aus
innerhalb von zwei Stunden, ja!
das ist wirklich simpel, der Scheiß
ich bin wirklich begeistert, wie einfach
das ist, ich mein, es ist nicht schön
muss man sagen, das müssen wir noch aufräumen, ja
achso, ich, ich, ich push das
ich push das gleich auf Git noch
ähm
ich push, ich push
das Git, Git
oh, jetzt hab ich wieder das Problem, dass mein Passwort nicht weiß
jetzt muss ich wieder nachgucken auf dem zweiten Rechner
haben wir ein
Github-Passwort, oder hab ich's
mittlerweile KeePass gespeichert
egal, äh
Source
Repos
so, und jetzt müssen wir nach
Meme
Moment, in welchem Ordner müssen wir
Meme Board
Copy Meme Board am Max, das ist auch wieder sehr
intuitiv gewesen, wie das
Zeug genannt hast
so, machen wir hier mal, Commit
my god, ist das Git-Plugin
Scheiße von Visual Studio
Commit
ich, ich, ich weiß, weil ich immer im Stream erzähle, man muss
ordentliche Commit-Messages machen, müssen wir jetzt auch noch ordentliche
Commit-Messages
web interface
for remote
remote control
Commit
Pockers
ich hab meine Igitt-Aliase nicht hier
nothing to commit, so, push
push, push
push origin
wupplorts
so, Passwort
muss ich nachgucken
äh
saved logins
Github
äh
okay, ähm, jetzt muss ich die Karte outen
ich muss endlich mal meine Keys dahinter
legen, jetzt geilen wahrscheinlich schon
alle drauf, dass ich mich vertippe und das Passwort irgendwo
auftaucht
okay, ich hab's gepusht
neuste Version
github, wupplorts, memeboard
keine readme drin und nix
wenn ihr euch berufen fühlt
web interface
bisschen zu verschönern
haut rein
ihr könnt auch gerne
im Backend noch paar Sachen anpassen
zum Beispiel, wenn ihr sagt, dass
ähm, na an der Stelle
ich schick ja quasi zum Client
schick ich ja nur, ähm, den Namen
den Namen von, vom Bild
und, ähm, ob es gerade benutzt wird
also wenn ihr sagt, ich brauch auch noch
die Keybindings, dass ich die dort
als quasi, äh, als, als
Spickzettel anzeigen lassen kann
tragt euch halt hier noch
die, die, äh
lasst euch als hier noch die
äh, Keybindings übergeben
oder so, ist kein Ding
könnt ihr auch anpassen
und wie gesagt, ich freu mich da über jeden Pull-Request
äh, oder
nutzt hier mal CMDR, beste
CMDR, beste
so, ich muss mal kurz gucken, ich hab ein paar Sachen im Chat, das hab ich nicht gesehen
ähm
wie grabst du eigentlich die Hotkeys
ich verwende
eine
Library von
ich glaub das da
aber was
der macht ist, das ist wirklich nur ein ganz
dünner Wrapper um Windows Funktionen
also ich, ich hab
ich hab das einfach mal gesucht auf GitHub, ja
und das macht genau das, was ich will, das funktioniert
ziemlich simpel, du sagst einfach hier
Hotkey, Modifier Key
in dem Fall halt Control oder
ähm
PageUp
und dann halt was er machen soll
ähm, du kannst dir aber auch hier
angucken wie er das macht, das ist wirklich
ziemlich simpel, ja
das ist, das ist im Prinzip
alles, du brauchst hier Register
Hotkey, Unregister Hotkey
äh, als, als von, von aus der
Windows API und
ähm, guck dir an wie er das macht
das ist, das kann man auch easy selbst machen
ich hab mir halt gedacht, warum soll ich das selbst
machen, wenn es schon fertig ist
achso, äh, Zekro, das kann sein
je nachdem
was du machen willst
es gibt bestimmt die ein oder anderen Spiele
die keine Keypresses annehmen
was eigentlich auch
aus Cheatsicherheit
nicht, äh, so
unlogisch ist
allerdings
wenn du, ne
willst du überhaupt Keypress an das Spiel senden
oder verstehe ich das jetzt falsch
weil, die Hotkeys
sollte LOL eigentlich nicht crappen
weil, dann wird's
ja quasi Systemfunktionen aushebeln
das wär blöd wenn
kann aber sein, dass die das machen, in meinem Gen tut das
ja, du kannst
kannst das ja abfangen
macht, VMware macht das ja auch
wenn du VMware Workstation aufhast, kannst du auch keine
Windows Hotkeys drücken
das ist aber ein bisschen, ein bisschen, brauchst du irgendeinen
eigenen Tastaturtreiber für
nehm doch einfach ein Framework wie Bootstrap fürs Layout
ja klar, kann ich machen
kann, kein Ding
kann ich alles machen, ähm
trotzdem muss ich's ja irgendwie einbauen
und dann gucken, dass das im Grid richtig
angeordnet wird und sonstwas
einfach nur Bootstrap einbinden auf dieser Seite
hier
bringt es ja jetzt
im Prinzip
alleine auch nicht, ne
wenn ich jetzt hier einfach mal Bootstrap einbilde
sieht es im Prinzip genau
genauso aus wie vorher
Fallen dir gerade ein paar Bad Practice Beispiele
für schlechte Comment Messages an, ja
fix, fix ist
sehr beliebt, also ich hab auf der Arbeit
ganz viele
Comments, wo, wo irgendwie fix
in irgendwelchen Abwandlungen drinnen steht
der eine schreibt auch
da hat mal einer wörtlich reingeschrieben
edit Dinge
ok, edit Dinge, hat er noch
noch ein Comment gehabt, edit mehr Dinge
ja, ok
was denn für Dinge
und wir hatten mal einen, der war ganz stinkig
der hat Comment Messages gemacht
fuck it, shit it, suck it
hahaha
das war sogar der Felix, den Felix kennt ihr sogar
wenn ihr das Video von der Gamescom mit ihm geguckt habt
das war der Felix, der Felix
ja, aber
im Prinzip
kann man bei Comment Messages, es ist jetzt auch
nicht so essentiell, weil
man kann ja immer noch in das Div gucken, also
es sollte schon was, ich will jetzt nicht sagen
man, ne, also ich will euch auf die Idee
bringen scheiß Comment Messages zu schreiben, aber
ähm
selbst wenn man jetzt eine nicht so tolle Comment Message
geschrieben hat, man kriegt immer noch ein bisschen
so den Gedanken raus von demjenigen
aber es hilft natürlich schon
was kann das denn jetzt genau
Overlay Bilder anzeigen
einmal per Remote Steuerung
Web Interface
oder per Shortcuts
auf der Tastatur
halt als Overlay, das hat keinen Einfluss
auf das
auf das Browser Fenster, wie du siehst hier unten drunter
ich kann hier Firefox bedienen
und so und das juckt überhaupt nicht
Firefox tracken, droppen und so
der merkt überhaupt nicht, dass das Bild da ist
und es kann rotieren, 0.4D
Pogas
Leute, Pogas
CSS Quote wäre dafür optimal
ja, 0.4D Max
wenn du dich damit auskennst, hau einfach
Pull Request rein, dann nehme ich dann das nächste Mal
Merchen wir das Ding
und dann haben wir ein schickes Web Interface
also ich fänd's ja eh ganz nice, wenn man zum Beispiel sagen würde
hey, ähm
ich mein, es ist simpel und funktional
die Fernsteuerung
ja, die ist simpel und funktional
ich mein, man, gibt's nicht viel was nicht funktioniert
ähm
man könnte da noch ein ordentliches, wie gesagt
ein ordentliches CSS Quote dahinter machen
man könnte noch
anzeigen
wenn es auf einen Shortcut gebunden ist
ah, das ist doch Chrome, ja das ist Chrome
hab ich Firefox gesagt?
ah, was auch immer
ähm, war ich denn jetzt grad dabei?
genau, ein ordentliches Quote hier machen
wo das drin angezeigt wird
äh, wenn's viele Bilder sind, vielleicht noch Paging
oder so, keine Ahnung
nee, Paging ist doof
da sieht man immer alle Bilder
ein ordentliches Quote, vielleicht irgendwie noch
irgendeinen passenden Hintergrund
so einen Rahmen oder so
dass es ein bisschen aussieht, ein bisschen mehr aussieht
wie ein Dashboard oder so
dann drunter anzeigen lassen
was das für einen
Shortcut hat, das jeweilige Bild
also man kann ja die Bilder nicht nur über die Fernsteuerung
aktivieren
sondern auch per
per Shortcuts
und man kann es ja dann später immer noch
weiter ausbauen, zum Beispiel, dass man sogar
ähm, die Shortcuts ändern könnte
über das Webinterface, also sprich
also da sind Open End
hast du die WinAPI benutzt, um das auszugeben?
äh, teilweise
das meiste
ist ganz normal WPF
.NET WPF
aber ein paar Sachen sind
über die WinAPI, zum Beispiel
die Hotkey-Geschichte
ja, also dass man
jetzt beispielsweise Strg-L drücken kann
und dann kommt TotalBiscuit
und LULT oder Strg-3 für LULT 3D
oder Bild hoch und runter für äh
Animation
das geht über
die WinAPI
und was noch über die WinAPI
geht ist
die Geschichte
mit, dass man
ups
ich versuch es gerade zu starten, obwohl es schon läuft
ich glaube das crasht jetzt
ich glaube das spackt jetzt rum
machen wir das mal zu
ok, funktioniert, also
ähm, zum Beispiel die Geschichte, dass man
durchklicken kann, dass das komplett transparent ist
das Bild, dafür habe ich
dafür muss man WinAPI verwenden
und vor allem das ist auch kein Focus
Focus-Crap, weil guck hier
ich bin jetzt im Hintergrund im Visual Studio
markiere und wenn ich
es crapt halt kein Focus oder so
und nix, da muss mal
ein bisschen Windows-API-Hacks waren, dass das funktioniert
und
Disclaimer, ich bin da auch noch nicht selbst
drauf gekommen, das ist Stack-Overflow-Copy-Paste
wie das funktioniert
ich hab versucht nachzugucken
Microsoft auf der Seite, was das jetzt eigentlich
genau macht
hab ich nicht richtig rausgekriegt
aber es funktioniert
das ist das wichtige
ja, gibt's noch irgendwelche Fragen sonst?
sonst ähm
geh ich jetzt
mal wieder
Blumen auf das Grab von meinem Opa bringen
nachdem er da letztens einer mit dem Traktor oder so drüber gefahren ist
und alles
platt gemacht hat
wie hast du die Pixel-Ausgabe gemacht?
äh, das da?
du meinst das
Overlay an sich?
oder was meinst du?
die Ausgabe des Bildes, das ist WPF
was ist WPF? das ist äh
jo
da hast du das
einfach Image
Image-Element und dann hier
Resistance
da
genau
und hier setzt er halt einfach nur die Source von dem jeweiligen Bild
wieso fährt einer mit dem Traktor über
ich hab keine Ahnung!
es war platt gewalzt
komplett
das Beet, ja, die Blumen waren platt gewalzt
und manche sogar geklaut
also weg
ich weiß nicht warum, wenn ich das wüsste, dann würde ich dem was erzählen
aber ich weiß es nicht
ich weiß geschweige denn wer, ja
keine Ahnung
muss ja ein bisschen schick machen wieder das ganze
ja, Anzeige
Quatsch
weil da einer
das ist ja nicht kaputt
das ist ja nicht irgendwie zerbrochen oder so
sondern das ist einfach nur platt
Anzeige ist raus
das ist mir zu viel Arbeit, ehrlich gesagt
wegen zwei, zwei, drei
Blumen, Blumentöpfen
und ein bisschen
platt gedrückt
der Erde da
Anzeige ist raus, wird bearbeitet, ist abgelehnt
uuuuuh
so
ich hoffe euch hat es gefallen
wir sehen uns eventuell nochmal heute Abend
ein bisschen später
falls dann noch Battlefield 5 läuft
vielleicht spielen wir noch eine Runde Battlefield 5
ansonsten sehen wir uns morgen
vielleicht
kriegen wir dann morgen die erste
Version vom MemeTool hin, die wir auch mal
auf die Öffentlichkeit loslassen können
releasen wir dann auf Github
falls wir morgen soweit kommen
und wir sehen uns, bis dann, machts gut, tschüss
