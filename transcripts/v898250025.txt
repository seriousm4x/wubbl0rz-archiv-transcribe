da bin ich ich muss erst mal gucken erst mal wieder teams fixen weil teams wieder
mal mein sound umgestellt hatte ich merke es schon sofort ja exzellente
zackertool alter richtiger krepp krepp wäre das ist kein super cloud native
agile geht obs solutions excellence chief engineer officer for devops big
brain scrum max heute hochmotiviert ja ich dachte doch ich bin der fragt wie
war es jetzt noch mal cloud native style geht obs solution
chief engineer officer devops excellence of scrum und kanban bots
naja gut moment wo stellt man das ein ach so das ist so eine windows weite
einstellung hier ne ne da gehen ja manche sachen gar nicht mehr
ne das suckt einfach oder wo geht das wo geht das ein notizblock weißt du wo das
geht weil in windows settings finde ich prinzipiell nix kennst du
dollar bullshit du meinst eine bullshit variable aller skype for business viel
schlechter kann es ja gar nicht mehr werden das hatten wir auch eine weile
also ganz im ernst teams hat ein paar eigenheiten aber es ist alles nichts
gegen skype for business skype for business ist wirklich die ausgeburt der
hölle zumal man ja auch dazu sagen muss das war nie skype ey ventrilo macht
wenigstens was es soll ja es kann nix aber es macht was es soll skype for
business war ursprünglich office communication
dann war es link was komischer name schon wieder dann war skype for business und
jetzt hat es microsoft eingestellt habe ich euch schon mal die geschichte
erzählt wo ich nen skype for business api access machen musste auf der arbeit mit
xml alter war das für ein asch oh so gute idee ob ich das auch moment ich bin mir
nicht sicher ob ich das öffnen darf okay na ist gut
dass dann funktionieren keine anwendungen gleichzeitig und das kannst
du vergessen dass hatte schon mal gemacht
ja vielleicht ich bin mir noch nicht ganz sicher ob wir das brauchen mit xml
skype for business über die api ging irgendwie mit xml du musst dich mit post
machen mit xml drin ich das war ganz ganz ekliger ja ja cwa genau ucw api ich
erinnere mich noch dunkel dran genau
Genau, richtig Monark-Ester-Kram.
Ach, ich will es jetzt, ganz ehrlich, scheiß drauf.
Ich will mich damit einschalten.
Es ist aber, es ist wirklich richtig, richtig eklig gewesen.
Also Leute, ich versuche euch mal kurz zu erklären, was wir heute vorhaben.
Und zwar, ich habe hier aktuell bei Hetzner vier Server laufen.
Ähm, drei Backend-Server und ein Frontend mit Anwendung drauf.
So, also sprich, das was ihr beim Preisschamp seht.
Aber wie gesagt, wir programmieren heute nichts am Preisschamp oder so.
Und ich habe mir jetzt überlegt, okay, so wirklich glücklich bin ich mit der Lösung nicht, wie ich das gerade mache.
Mit dem, mit dem Neuaufbauen.
Und wir machen heute den Big Brain Cloud Native Excellence of GitOps Solution Scrum Kanban.
Das ist ein Safe-Lösungsansatz.
Und als erstes machen wir mal einen Stand-Up, Leute.
Also jeder, der da vorm Rechner sitzt, ist definitiv nicht agil von euch.
Das muss ich euch jetzt mal, wiederholen das nochmal.
Also jetzt müssen wir erst mal, wir müssen jetzt erst mal Stand-Up machen und User-Stories definieren.
Sonst können wir überhaupt nicht anfangen damit.
Also so, so, so wie im echten Leben.
Okay, nein, nein, ich stehe auch nicht wirklich auf.
Also wer jetzt aufgestanden ist, Hut ab, aber...
Oh, ich habe, ich habe Subs übersehen.
Wartet mal kurz.
Easy Killer, 16 Monate schon am Start.
Massive Hyper-Subscription.
Wer ist denn überhaupt alles am Start?
Ich mache das jetzt mal wieder Lost.
Ich lese jetzt auch erst mal drei Stunden einfach die Anwesenheit vor.
Und dann kackt wahrscheinlich Twitch wieder ab.
Wen haben wir denn am Start?
Earsfehler, SiriusMaxis auch da, LenArt,
Kyokun, Xenpy, ClocksHD,
Renax, WorldX, Natax,
Zebix,
Overlay, ich hoffe ich lese nicht doppelt,
lese doppelt vor, jetzt muss ich ja Uniken bei mir im Kopf,
Farkts,
Stripes007,
Herz3, Neuschelmer, Jon69,
Quinn,
Jerotex,
Vorti,
IamBoy,
08max07,
EasyKiller,
CapCobol, CapCobol,
CaptainCobol ist am Start, Leute.
Da kann Captain Marvel und so einpacken, wenn CaptainCobol kommt.
Ich bin nur von CaptainMetal getoppt.
So, dann haben wir noch ein Notizblock,
Changer,
ByteStriker,
nein, ByteStrike,
Geisy,
ChooseMyName,
XFatalist auch am Start,
MatrixHD,
Rindorbrot,
Killphil,
DerBronco,
So Leute, ich glaube ich habe kein Doppel vor gelesen.
Habe ich nicht?
Habe ich ordentlich Unique im Kopf?
Jo, das passt.
Also.
Trotzdem, jetzt habe ich noch mehr Subs übersehen.
Moment, ich bin verwirrt.
Warte mal.
Äh, hier ist Fehler, Simona, danke für den Sub.
Massive.
BigBrainSubscription.
Ja und denkt, Leute, Leute,
selbstverständlich machen wir für alles auch ein
Hira-Ticket auf, oder sorry Leute,
natürlich ein Jira-Ticket.
Was allerdings auch passend
verknüpft sein muss, weil einfach Tickets erstellen,
geht nicht.
Ja, da müssen die passenden Stakeholder
informiert sein. Und natürlich auch
alle Service- und Produktmanager mit ins Boot
geholt werden. Aber Chat, ich sehe schon,
ihr habt die richtige Hands-on-
Mentalität. Das mag ich.
Das mag ich, Chat. Deswegen seid
ihr auch der...
Das geht nur bei mir.
Willst du nicht einen Papp für den Preis-Chat machen?
Na ja, unbedingt. Und Struktogramm.
Struktogramm auch noch.
Wie lang ist der Sprint? Ja, vier Wochen.
Für vier Wochen.
Sprinten einfach jetzt mal los.
Wir haben ja gestern bei der Vodafone-Umfrage
gelernt, es ist gar nicht so wild,
dass man von Anfang an in einem Projekt
einen Plan hat. Das kann sich auch im Laufe
der Zeit entwickeln.
Neue Apex-Season. Oh, habe ich null verfolgt.
Leute, ich hoffe, ich habe keine SAPs
übersehen.
Hast du ein UML-Diagramm?
Nee, UML ist nicht Agile genug.
Mach ich nicht.
Ich mache nur agile Best Practices.
Und da gehört UML nicht dazu.
Bin gerade dabei, mein Projekt
für die Abschlussprüfung...
Äh, was? Moment.
Äh, Efi, dankeschön für den SAP.
Was hat der Giantmaster geschrieben?
Nee, Gigant, nicht Giantmaster.
Bin gerade dabei, mein Projekt für die Abschlussprüfung
zu planen. Was willst du denn machen? Erzähl. Schieß los.
Oh ja.
Wichtig. Wichtig.
Trello-Karte und kann ins Kanban-Board. Muss natürlich auch.
Logisch.
Ich habe XD, XD, XD
vergessen. Ich habe noch nichts geschrieben.
Zu dem Zeitpunkt, wo ich es vorgelesen habe.
Hast du denn auch eine Amazon AWS
Cloud-Zertifizierung für dieses Jahr? Nee.
Aber ich habe eine Azure, ich habe Azure
Schulung gemacht.
Aber keine Zertifizierung.
Confluence. Oh nee, Confluence
suckt. Confluence kann man nicht cool
aussprechen. Manhira kann man auch
wie Gira aussprechen, aber ich
ich wähle meine Tools
nicht danach aus, wie gut sie
funktionieren, sondern ob man sie cool aussprechen kann
oder nicht. Ich meine, es ist ja kein Grund, dass ich
dass ich Ubuntu als
Ubuntu auf dem Server verwende.
Sonst könnte ich
sonst könnte ich ja auch
Zuse verwenden.
Wobei, ganz im Ernst, Zuse wird ich im Leben nicht.
Das fasse ich nicht an,
Alter.
Wie heißt denn Sharepoint richtig? Ja, leider Sharepoint.
Deswegen sagt es auch.
Alter, was geht mit der Musik gerade ab?
Paper Mario, alles klar.
Okay, also ich versuche euch mal grob
zu erklären,
was
ich heute vorhabe.
Also schreib mal
adwublos davor, wenn du was zu deinem
Abschlussprojekt sagst.
Ich übersehe das heute. Ich bin gerade nicht
aufnahmefähig für den Chat.
Kennst du eine
Alternative zu Discord on
premise? By the way, on premise für
die nicht Cloud Native Noobs bedeutet
bei sich selbst installiert, also self-hosted.
Das nennt man heute nicht
mehr installieren oder hosten. Das nennt man
on premise, weil wir sind die coolen
Cloud Native Jungs. Da ist das so.
Ehrlich gesagt,
ne, kenne ich nicht.
Viele
sagen Matrix und sowas, aber ich habe
das noch nie verwendet. Ich weiß nicht, ob das
taugt. Nein, ich will keinen Papp machen.
Ich mache höchstens gleich mit euch zusammen
ein Ishikawa Diagramm,
während wir uns ASMR Maus Sounds
anhören.
Ubuntu.de, beste Seite,
kenne ich. Das ist irgend so ein Zirkus. Das fand ich früher schon
lustig, ja. Hast du schon gesehen,
dass JetBrains was
Neues gelaunt hat? Space oder
wie das heißt. Ja, aber ich weiß nicht.
was es ist.
Alter, ich komme überhaupt nicht dazu, was ich
heute machen will. Chat. Also.
Ähm.
Was ist denn JetBrains Spaces?
Spaces.
Klingt wie irgendwie Teams.
Okay, das ist ein Teams Konkurrent.
Scaled das auch horizontally?
Leute.
Horizontal scalen.
Horizontal scalen ist
out. Wir scalen
weder horizontal noch vertikal.
Wir
scalen diagonal.
Ich lasse mir das morgen patentieren.
Ab dann wird nur noch diagonal
gescaled.
Serverless bei uns.
Serverless. Serverless ist noch
viel zu viel.
Wir haben Infrastructureless.
Läuft unser Zeug. Komplett in der Cloud.
Serverless.
Infrastructureless.
Codeless.
Brainless.
Was sagst du gegen Suse?
Der Umut fragt.
Ich will eine TK-Anlage
von ISDN zur IP-Migration machen
als Abschlussprojekt.
Denkst du, die akzeptieren das?
Ja, wenn du es gut verkaufst. Definitiv.
Das könnte aber ein bisschen viel sein.
Wie viel sind das 30 Stunden Abschlussprojekt?
Das könnte ganz schön viel sein.
Was Wuppti schreibt.
Wir benutzen auf der Arbeit.
Ich muss erstmal einblenden.
Wir nutzen auf der Arbeit seit diesem Jahr
Inlux. Hab ich noch nie gehört.
Kein Blasenschimmer. Was das ist.
Was ist jetzt los?
Browser.
Inlux.
Und das ist die schlechteste Projektmanagement-Software,
die ich jemals benutzt habe.
Ich weiß nicht, wer ich dachte,
die meiste als Outlook-Plugin.
Ach du große Scheiße.
Okay, Moment.
Ich muss mal danach suchen, kurz.
Das sieht schon cringe aus, so ein Werbevideo.
Uuuuh.
PaintChamp.
Oh.
Ne, das will man nicht benutzen.
Schreck dich weg, du Robo-Fürst.
Sonst gastriere ich dir die Eier.
Verschwinde.
Nein, nein, nein.
Das muss echt nicht sein.
Das ist ein Gantt-Diagramm.
Das ist ein Gantt-Diagramm.
Ich hatte in meiner Abschlussprüfung
ein Gantt-Diagramm drin, Leute.
Das fand die IHK richtig geil.
Wisst ihr, mit was ich das Gantt-Diagramm
gemacht habe damals?
Mit MS Project.
Das war das erste und einzige Mal
in meinem Leben, dass ich wirklich
die Big Stonks Office Tools verwendet habe
und danach habe ich das nie wieder angefasst.
Okay, aber
mein Beileid, das sieht wirklich grausam aus.
Das Lean Magazine.
Oh, das ist für die krassen
Management-Stonks, Leute.
Das sieht aus wie 2008.
Boah, was ein Kack.
Ich könnte wetten,
Wopty, ich könnte wetten,
das ist so gelaufen, irgendein Typ
von der Verkaufsabteilung
von Inlogs war am Start,
weil der jemand kennt von eurem
Management und die haben da quasi
beim, was weiß ich, beim
gemeinsam Tennis spielen
oder so gesagt, wir könnten da mal eine
Präsentation machen und dann wurde das
präsentiert und euer
Management hat gesagt, Alter, so ein geiles
Tool, das brauchen wir und dann war es am Start.
Und es wurden nicht einmal die Leute gefragt,
die es am Ende benutzen müssen. Könnte ich mir vorstellen.
Also,
das würde mir zumindest bekannt vorkommen.
Also, ich muss jetzt mal, zack, ich hier mit dem
Chat durchkommen, dass ich euch erklären kann,
was wir heute machen.
On-Premise ist das beste Scheiß auf Cloud.
Ja, wie gesagt,
hosten, installieren, selber betreiben
ist ja komplett out vom Namen her.
Heute nennt man das alles On-Premise
und die richtig geilen
Cloud-Native, Big Brain
Excellence-Leute, die sagen
On-Prem, weil sich das,
weil die damit quasi dann
aussagen wollen, sie haben diesen Cloud-
Jargon schon so verinnerlicht,
dass sie gar nicht mehr normal reden können.
Das heißt, man, also,
wenn man noch On-Premise sagt oder sogar
self-hostet oder installiert oder
auf eigenem Server, ist das komplett,
komplett out. Die richtig coolen Leute
sagen nur noch On-Prem. Und wahrscheinlich,
und wahrscheinlich dauert es
nicht mehr lange, dann gibt es dafür nochmal ein eigenes,
nochmal ein eigenes
richtig cooles, cooles
Sonderwort. Was könnte man
dafür nehmen, für selbst,
für selbst hosten? Weil selbst hosten
und On-Premise ist deutlich zu,
deutlich zu verbreitet schon. Das braucht
so ein richtig, so ein richtig
geilen,
irgendwas mit Inhouse oder so.
Ach, keine Ahnung, ich bin nicht,
ich kann mir sowas nicht,
ich kann mir sowas nicht mehr
nicht ausdenken.
Also, hab, ach genau,
hab als Abschlussprojektthema
ein Smart Home System in einem Besprechen.
Das ist ein cooles Thema, das haben die bestimmt nicht oft.
Es soll mit der Outlook
Raumbuchung verknüpfen, also da kann ich,
naja, okay, das,
ja, kann man verknüpfen, kann man
ja machen, ich mein, da würd ich das nicht, also ich selbst implementieren
würd ich da nix, das geht eindeutig
über den Rahmen raus, aber da kann ich dir
einen Tipp zu geben.
Du hast sicherlich schon
ein, ähm,
was wir, Moment,
ach, ich dachte, ein Buchungssystem
für den Besprechungsraum, ein Smart Home
System in einem Besprechungsraum, okay, das war was
Abgedrehtes, aber ich kann dir trotzdem
einen, einen, einen, einen Tipp geben,
und zwar,
sag nicht,
du installierst da Projekt
X, äh, Produkt XY, sondern
schreib in deinen Projektantrag
rein, Auswahl
eines geeigneten,
ähm,
Smart, wie, wie,
wie auch immer diese, diese Software
Kategorie heißt, äh,
Smart Business Meeting System,
ähm, und dann machst du,
und dann machst du so einen, so einen
Bewertungskatalog, und dein System,
was du eh schon haben willst, gewinnt
dann zufällig. Aber so musst du das
machen, da steht die IHK drauf, und dann nehmen
die das auch an. Also du darfst da auf keinen Fall
reinschreiben, ich nehm System XY und installier
das, das ist zu, zu low brain.
Die IHK will sehen, dass du
quasi, äh, die Strongest Kaufmann
Sachen machst. Du machst dann einfach eine Auswahl
Matrix,
und, äh, vielleicht machst du noch ein
Gantt-Diagramm dabei, und dann bist du auf der sicheren
Seite. Und das ist jetzt kein Witz,
das meine ich wirklich ernst. Vorher hab ich, ich hab,
ich hab bis zu diesem Zeitpunkt nur Scheiße erzählt
im Stream, aber das meine ich ernst, so.
Das reicht jetzt auch, ja.
Ich hab auch, äh, sinnvolle Sachen erzählt.
So. Haben wir's hier.
Wir scalen im Komplex,
wie gesagt, diagonal wird nur noch
gescaled bei uns hier.
Naja. Einfach, äh,
wir brauchen einfach weitere Dimensionen, das kann ja
nicht zu viel verlangt sein, oder?
Wie gesagt, hardwareless, codeless,
infrastructureless, brainless läuft
unser Zeug.
Das ist sogar richtig gut, weil dann brauchst du
keine Menschen mehr. So sieht's aus!
Was, wisst ihr, was das für Kosten spart, wenn man brainless
läuft? Multidim,
dimensional scaling, ja?
Die Griechen sind eh out,
wen interessieren die Griechen heute noch?
Ja, glaub ich.
Du musst das aber gut schreiben, du musst das, wie gesagt, du musst
du musst das, ähm, gut verpacken.
Was ich zu meinem Abschlussprojekt gemacht
hab, war auch
nix Großartiges. Ich hab nen OpenVPN
gebaut, zwischen zwei Rechnern.
Hab das allerdings, äh,
Standortkopplung mit, äh,
ähm, wie hab ich mein
Abschlussprojekt genannt? Ich hab's schon wieder vergessen.
Standortkopplung
auf Layer 2 Basis?
Irgendwie so in der Richtung hab ich's.
Telefonie, Standortkopplung,
irgendwas in der Richtung hab ich das genannt.
Das haben die auch, ich hab im Prinzip
nen VPN von Rechner A zu Rechner B
gebaut.
Moment, das hatten wir doch schon grade.
Hehe.
Outlook ist
bei uns richtig abartig.
Und Bram, genau.
Was ist denn Microsoft
SCCM?
Ist das, ist das Codesafe?
Oder wie das heißt?
So. Ach, System Center
Configuration Manager. Aha.
Ne, ne, bloß nix selbstprogrammieren.
Also meinte ich das noch nicht. Du darfst den
aber nicht sagen, was du verwenden willst.
Du musst den sagen, du wählst Software dafür aus.
Und dann gewinnt halt die Software,
die du benutzen willst. Das ist ja nicht schwierig zusammen zu
faken. Aber wichtig, dass du denen sagst,
ich, ich führe eine Produkt, äh,
äh,
Auswahl durch. Das mögen die, ja.
Statt...
Ja genau, so,
so hieß das. Ich,
mein Abschlussprojekt hieß irgendwie
was in der, in dieser Richtung.
Ähm, ich glaube es war irgendwas mit
Standortkopplung auf Layer 2 Basis.
Irgendwas in der Richtung. Bin mir nicht mehr ganz sicher.
Im Prinzip hab ich die VPN installiert.
Okay, so. Jetzt kommen wir zum eigentlichen.
Keck wait. Jetzt genug Chat. Jetzt.
Ich, ich gucke aber nebenbei immer noch Chat, wisst ihr ja.
Also.
Was wir machen ist folgendes. Ich hab hier
aktuell, also
die Preis, die
Camp Infrastructure,
Infrastructure, ja.
Sieht aktuell so aus. Ein
Frontend Server mit
aktuell 16 Kern, was bescheuert ist.
Es wird runtergescaled. Ich mach mal das was sein soll.
Mit, äh, 2
oder 3 Kern.
Dann gibt es 3,
ähm, ich nenn sie mal nicht Crawler.
Crawler klingt zu negativ.
Ähm,
Worker, Worker.
3 Worker
Server mit
3 CPUs. So.
Das ist Fetcher.
Nein, nein, Worker. Worker ist, ist viel besser.
Aber Worker kann alles sein.
Also aktuell, aktuell sind's 4, sind's
sind's 4 Kisten. So.
Und, das ist aktuell
alles bei Hetzner.
Was ich in Zukunft machen will ist,
äh, äh, und
Cloudflare. Cloudflare davor.
So, so sieht das, ups, mein Numblog
ist aus. So sieht das aktuell aus.
So, und was ich in Zukunft vorhab,
ist, ähm,
das Frontend zu
OVH zu packen wegen, äh, die haben
angeblich so richtig nice DDoS-Protection.
Ich weiß nicht, ob ihr's gemerkt habt, der Preis-Champ wurde
heute Morgen gedDoSt um 8.20 Uhr.
Für 5 Minuten oder so.
Und, äh,
der hat sich aber danach wieder neu gestartet.
Überhaupt kein Problem. Ging wieder.
Wann kommt Cast? Champ as a Service.
Gute Idee.
Champ as a Service. Excellent.
Hast du Abi oder Real?
Ich hoffe, ich hab Big Brain. Das, das
reicht. Nee, ich hab, äh,
Realschulabschluss gemacht.
Und, ähm,
dann hab ich ne Ausbildung angefangen.
Da hatt ich aber keinen Bock mehr drauf. Das war
Stonks Ausbildung.
Deswegen, da hab ich auch die Abneigung
entwickelt. Aber ich kann aus meiner ersten Ausbildung
immerhin die Buchhalternase
und ich weiß, dass man, äh, linear
und degressiv abschreiben kann.
Das hab ich mir gemerkt, ja.
Nicht, dass ich noch wüsste, was man, wie genau,
aber das hab ich mir gemerkt. Mehr weiß ich nicht mehr
von der ganzen Sache. Und, äh,
dann
hab ich
meine Ausbildung
gemacht beim Provider.
Das wär's auch schon 2007 gewesen.
Auf Debate-Basis.
Okay, also. So sieht das, so sieht das aktuell aus.
Was ich, was ich in Zukunft machen will, ist folgendes.
Welche Weiterbildung nach der Ausbildung empfiehlst
du? Äh,
also, wenn jetzt dein Arbeitgeber
da nicht großartig Wert drauf legt auf
Zertifikate, musst du da nicht, nicht
unbedingt professionelle Weiterbildung
besuchen. Es ist einfach wichtig, dass du
am Ball bleibst, was aktuelle Technik angeht.
Und das geht meiner Meinung nach
auch nur, wenn man sich privat dafür
interessiert. Guck mal, das ganze Zeug, was ich
hier im Stream mache, das mach ich aus zwei
Gründen. Zu 90%,
weil's mich interessiert,
zu 5%,
weil ich's cool finde, wenn
dabei Leute zugucken und man sich mit denen austauschen
kann dabei, und zu
5% für
so ungefähr. Bin mir nicht ganz sicher, ob die prozentuale
Verhältnis, ob das, äh,
ob das stimmt, aber
so ungefähr. Okay,
also, in Zukunft,
in Zukunft will ich das so machen,
eigentlich ist es scheißegal.
Wir machen das jetzt einfach.
Vergesst, was ich wollte. Also,
ähm, und ich hab's aktuell so,
ich kann's
euch nicht zeigen, weil dann müsste ich hier reingehen
und guck mal, wie das heißt.
Das kann ich jetzt nicht aufmachen, Leute.
Ich hab das extra drangeschrieben.
Sonst leake ich
wieder alle IPs.
Das muss nicht sein, ja.
Aber von der Idee her, besteht
das PriceChamp Backend quasi
aus, ähm,
vier,
vier solcher Server.
Also, also aktuell besteht,
aktuell bestand das PriceChamp
Backend aus einem so'nem Server, aber das war
total overkill, ähm, und aktuell
besteht's aus vier solcher Server.
Ähm, sprich,
das kostet aktuell,
was denn, 8,2
mal 4,
ja, Google,
24 Euro, 25 Euro.
Also, vollkommen
in Ordnung. Äh, mal 3,
ups, mal 4.
Äh, also, 33 Euro.
33 Euro. Und, und
die erste Variante, die ich hatte,
war ein 16-Kerner plus
10 extra IPs. Das heißt,
ich hab 60 Euro für den Server bezahlt
und nochmal ungefähr 12
Euro obendrauf für die 10 festen
IPs. Oder zusätzliche
externen IPs. Also sprich, ich hab,
72 Euro
bezahlt. Das war mir dann doch ein bisschen teuer
für was, womit ich nichts verdiene im Monat, ja.
Ja, okay, das sackt.
Giant Master,
das sackt. Aber
wichtig ist, dass du dich für so Sachen interessierst.
Das meiste, ganz ehrlich, das
meiste hab ich, hab ich privat gelernt.
Ganz im Ernst. Natürlich
hab ich auch auf der Arbeit recht viel, äh,
mitbekommen und das verfeinert
irgendwo. Aber
so wirklich die neuen Sachen hab ich, ehrlich gesagt, am meisten
privat gelernt, weil's mich interessiert hat.
Und wenn man das dann auf der Arbeit einsetzen kann,
ist natürlich gut, dann sammelt man Erfahrung mit.
Ich hätte,
ich hätte nie damals angefangen
mit, äh,
GitLab und quasi sowas wie Continuous
Integration, Continuous Delegation, da hat man
die Buzzwords damals noch gar nicht dafür gehabt.
Ähm...
Endlich bin ich nicht privat dafür
interessiert. Ja, genau,
choose my name, das muss ich auch noch erzählen
dabei. Genau, das muss ich
auch noch dazu erzählen. Und zwar, die Server
sehen folgendermaßen verknüpft aus. Zeig jetzt
auch nochmal. Also, das Frontend,
jetzt machen wir mal krasse ASCII-Art-Skills,
Public IP,
ne, stimmt, stimmt gar nicht. Cloud
Flair, Public IP,
dann kommt
man auf das Frontend,
darauf läuft, ähm,
also von da wird ausgeliefert
das Vue.js Frontend und darauf
läuft auch das, die
.NET Core App, so.
Und dann gibt's dahinter
drei, drei, wie hab ich's
genannt, Worker Server.
Und die sind verbunden mit dem
Frontend
über, äh,
nen internes, internes
Netz, also,
so funktioniert das.
Wobei es eigentlich nur ein Weg ist.
So, so sieht das, so sieht das aus.
So, und was ich jetzt gebastelt hab, ist folgendes.
Ich hab mir
nen Skript gebaut, womit ich
diese Server wieder aufbauen kann, aber das gefällt mir
überhaupt nicht, das hab ich ganz eklig zusammengewurstet,
einfach, dass es geht, hab ich gestern gemacht,
so, äh, nicht gestern, äh,
oder? Doch, gestern war Montag, ne?
Ja?
Einfach, weil der 16 Core Server
gesackt hat und teilweise schon
ich bei
manchen Seiten im Cloudflare hängen geblieben
bin, deswegen hab ich mir gedacht, ey, erstens
reduzieren wir mal ein bisschen die, äh,
Crawling Rate
und, ähm,
ich hab auch die
IPs aufgeteilt, dass nicht alles geblacklisted wird.
So, gehen wir mal kurz Chat durch.
Achso!
Äh, das kann für dich auch
nen Vorteil sein.
Was ich, äh, ich find's immer komisch,
dass Betriebe Leute ausbilden, um
sie nicht zu übernehmen, aber das würde
natürlich auch passen dazu, wenn du gesagt hast, du hast kaum
was gelernt und bist nur im Service Desk
und machst Tickets, was im Prinzip heißt,
äh, die haben wahrscheinlich
jemand gesucht, der billig ist und den Mist
macht, ja.
Du musst das französische E machen.
Ups, falsches E-Mode.
Ja.
Aber, aber, Peter, Peter
Wublé ist tot,
der wurde auch gebannt auf LinkedIn.
Leute, ich hab mich, ich hab, ich hab heute
mal geguckt, dass ich, ähm,
noch ein paar Jobs raussuche für das nächste
Stellenanzeige-Review und da hab ich gesehen,
Peter Wublé wurde auch gebannt.
Aber,
meinen nächsten LinkedIn-Fake-Account
werd ich ganz furchtbar big brain machen.
Und zwar,
ähm,
mach ich mir ne echte
Fake-Telefonnummer irgendwo, also,
gibt's ja, gibt's ja genug Services,
die das, die das machen, ja.
Ähm, und ich nehme
irgendwie einen, einen meiner
Domains, ich hab ja mittlerweile
genug Domains, und mach mir da ein E-Mail-Postfach.
Und das sieht wirklich
null, null fake aus.
Wahrscheinlich
schaut hier gerade ein LinkedIn-Mod zu, ja gut,
was, was will er denn machen?
Was will er denn machen? Der weiß weder, wie ich mich
anmelde, noch von welcher IP ich zugreife, noch
von welchem Browser, noch wie mein Name ist,
noch welche Domain ich nehme, das
kann er nicht erkennen, außerdem ist es dem auch
persönlich wahrscheinlich scheißegal.
Herr, Herr
j.ebated
Das ist ein geiler Name.
So müsste ich mich echt nennen.
Herr j.ebated
Nee, nee, nicht
ajaja als Profilbild, ich mach
auch irgendwas seriöses ins Profilbild.
Ich, ich nehm irgendwie Mann in
Anzug Stockfoto.
Jeremy ebated, genau.
Gut, also weiter im Text.
So sieht das aktuell aus.
So sieht das aktuell aus, das ist die
Price-Champ-Infrastruktur.
Und ich hätte es gerne, dass
ich das automatisch ordentlich aufbauen
kann. Deswegen habe ich mir
Folgendes überlegt. Und das versuchen
wir heute mal zu skripten.
Ich mach erstens, also das machen wir heute. Ich mach, ich mache
ein neues, ich mach erst mal
ein neues Git-Repo, wo ich
mir mal eine sinnvolle Struktur überlege
für Infrastructure-Files und für
die Apps und für den Crawler und alles mögliches.
Aber gut, das ist eine Sache,
Git innezumachen dauert zwei Sekunden.
Dann
gucken wir
Skript über Hetzner
Cloud-AP
zum Server erstellen.
Da weiß ich schon prinzipiell, wie das funktioniert.
Da muss ich mir
nen AP-Key generieren und da muss ich euch
ausblenden, weil sonst könnt ihr bei mir...
Terraform ist in dem Fall nicht so gut.
Das habe ich mir auch überlegt. Ich habe es
mir auch schon überlegt, ob ich das, ob
ich nicht Big Brain Cloud
Cloud Native
Cloud Native Agile
GitOps Solution Software
Excellence Scrum
Kanban Software verwenden soll.
Ich habe an Terraform gedacht, allerdings
ich muss da ein paar
Sachen wirklich
mit Logik
Skripten dahinter und Kubernetes bringt
mir absolut gar nichts in dem Fall.
Ich brauche ja auch
IPs, die wechseln.
Das kann ich
glaube ich schlecht in Terraform machen.
Oh ne. Overwatch
halte ich geistig
nicht aus. Das geht nicht, Leute.
Unmöglich.
Ja.
So. Dann
müssen wir gucken,
dass man das mit Ansible aufbauen kann.
Das geht ja schon für das Frontend.
So dass ich nur noch mit einem Klick da meinen ganzen
was drauf deployen kann.
So. Und also von der Logik her
muss das so sein, das Skript.
Der legt
der muss einen neuen Server anlegen.
Dann
muss der auch gleich
da bin ich mir noch nicht ganz sicher, wie es funktioniert.
Dann muss der auch das private Netz
attachen über die Hetzner Cloud
API. Die haben zum Glück ein Kommandozeilen
Tool. Da können wir gleich mal gucken.
Da bin ich mir noch nicht sicher. Machen wir es in Python?
Machen wir es in Bash? Machen wir vielleicht sogar .NET Programm
draus? Keine Ahnung. Ich fange erst mal
mit Bash an. Das scheint mir am sinnvollsten
zu sein mit dem Hetzner Cloud
Tool zusammen.
Und dann
muss ich den Server anlegen. Mit Ansible
aufbauen. Also konfigurieren lassen.
Und dann muss ich
den Vorgänger Server
wieder löschen. Weil nur so
ist sichergestellt, dass ich auch eine neue IP
bekomme. Hetzner ist ja nicht doof.
Für Leute, die
50 Server löschen, anlegen, löschen,
anlegen. Die kriegen immer die gleiche IP, dass die
intern nicht so viel Provisioning Aufwand haben.
Aber wenn ich den alten Server
erst lösche, nachdem ich den neuen
angelegt habe, und das mache ich alle paar
Tage, dann ist garantiert,
dass ich eine neue
IP kriege. Und ich habe ja
ehrlich gesagt gar nicht vor, dass ich wieder IP
banned werde. Weil ich habe
meine Rates wirklich ordentlich runtergestellt.
Ich meine, wenn man sich das jetzt anguckt,
das aktualisiert nicht mehr so schnell.
Und seitdem bin
ich auch bei keinen Sachen geblockt.
Übrigens, ich habe heute vorhin
gefixt.
Ich habe gefixt, dass Nintendo Switch
und Lite vertauscht sind. Und
dass dieses komische Play & Charge Kit
für die Xbox Series X angezeigt wurde.
Wir haben übrigens richtig professionell,
oder? Wir haben sogar einen Changelog.
Chat, was sagt ihr dazu?
Die AMD Grafikkarten sind grün, ja?
Mine Factory
und Alternate.
Alter!
Das soll 1000 kosten.
Okay, die sind aber noch nicht so teuer wie
Nvidia.
Ansible kann auf jeden Fall bei Headstander
vm professionieren. Das habe ich noch nicht
ausprobiert. Kann er das?
Oh! Hoho!
Exquisite!
Api-Talken!
Ääääh!
Keine so gute Idee, wenn ich
das hier leake im Stream.
Das ist cool, dass der das kann.
Das gefällt mir. Das könnte man vielleicht
direkt mit Ansible machen. Ich fange aber mal
mit einem Bash-Skript an. Ich muss mir erst mal
überlegen, wie man das Ganze macht.
Ja. Ähm.
Ich fange erst mal mit dem
ich glaube hcloud heißt das Ding
mit dem Headstander Kommandozeilen-Tool an
und dann kann man das hier alles noch ein bisschen
noch ein bisschen äh
verbessern, ja? Also wir machen jetzt
erst mal
ein neues Repo.
Agile
DevOps
Scrum
So, und da haben wir mal git init drin.
Oh nein!
Using master!
Ho!
Triggered!
Jetzt ist es vorbei!
Bann ist raus!
Ja, das darf ruhig Default Master heißen.
Ich bin da nicht so.
Ich bin nicht an jedem Wort.
Ich störe mich nicht an jedem Wort.
Was einer in einem rein technischen Zusammenhang
sagt.
Hast du nicht Angst, dass Reseller da ein cooles Tool
gegen uns Normalos einsetzen könnten?
Wüsste ich jetzt nicht, was die da großartig machen sollten.
Die könnten mich auch crawlen.
Alter, was ist das für Musik?
MonkaS?
Ach,
das ist mir zu geleiert.
Oh, exzellent!
Leute, wer noch nicht Chrono Trigger gespielt hat,
ich sag's immer wieder, das ist eines der
besten Spiele aller Zeiten.
Das müsst ihr spielen, wenn ihr das noch nicht gespielt habt.
Ich weiß, es ist ein 16-Bit-Game
und die meisten Leute sagen wahrscheinlich
Alter, 16-Bit-Games
und so.
Aber wer das, man kann's auch auf dem Emulator
spielen, aber wer das noch nicht gespielt hat,
das ist
das ist echt
eines der besten Games, die
je gemacht wurden.
Vom Gameplay, von der Story her,
von allem.
Ich weiß, Boomer mag's, aber
das ist wirklich super. Grafisch
ist es auch eines der hübschesten Super Nintendo Games
überhaupt. Warum kann ich überhaupt,
warum kann ich das eigentlich grad hier nicht reloaden, Alter?
Für die Weeb-Fans gibt's sogar
gibt's sogar in der Playstation-Variante
gibt's sogar Anime Shot
Cutscenes, ja.
Und was mir bei solchen Games
immer auffällt ist,
dass ich so 16-Bit-Charakteren
irgendwie,
so doof's klingt, ne,
dass ich so
16-Bit-Charakteren
die Emotionen mehr abnehme als im
3D-Render. Es ist
merkwürdig, ja.
Aber das liegt wahrscheinlich daran,
weil man sich die meiste Sache
dort vorstellen muss.
Ja. Da gibt's, gibt's
einmal diese Szene hier,
das, ich mein, das ist huge
Graphics von Super Nintendo gewesen, ey.
Ähm.
Ich hab den,
ich hab den Charakteren übelst
die Emotionen in dem Game abgenommen,
was ich bei 3D-Figuren nicht so sehr
mache. Ja, Tales, Tales
of, kannst, die ersten Tales of Games
waren auch nice. Mittlerweile ist das
übelst Generic-Rahmen, hab ich mir nicht mehr
gegeben.
Das ist nicht To The Moon, nein.
20 Jahre fort, ne.
Reicht nicht. Ja doch, 20 Jahre fort
To The Moon war das.
Es gibt's sogar auf Steam mittlerweile, ohne Mist,
spielt, ihr könnt's einfach mit Emulator
spielen, müsst ihr nicht auf Steam kaufen, aber auf Steam ist
auf Steam ist auf jeden Fall die Version
mit den, mit den Anime-Cutscenes drin,
aber
ich sag, wie gesagt, wenn ihr's noch nicht gespielt
habt und irgendwie so ein bisschen
JRPG-Sachen, was
ähm
äh, was abgewinnen könnt,
ohne Scheiß, das ist eines
der besten Spiele, die je gemacht wurden, meiner Meinung nach.
So, eines mit
dem nicesten Kampfsystem
und auch eins mit, also ich muss
sagen, kaum ein Game ist mir
Story-mäßig so im Kopf hängen geblieben, wie
Chrono Trigger.
Also, wirklich, wirklich, äh, top.
Ja, genug jetzt Werbung gemacht.
Wollen wir kurz in den Chat gucken.
Würdest du eher in
kleinen, pff, kann man
so pauschal nicht sagen.
To The Moon war ähnlich gut, nee, To The Moon
war kein Game.
To The Moon war vielleicht, ähm,
Storytelling-mäßig ähnlich gut, ja,
da gäbe ich dir recht, aber To The Moon
hatte ja keinerlei Gameplay. Chrono Trigger
ist ein richtiges Spiel und auch ein ziemlich gutes
Spiel. Ich kann den
Ansible Secrets nutzen, das muss ich mir auch gleich mal
angucken, ja. Deine was?
Manche Ausdrücke bin ich, bin ich zu,
ich müsste es eigentlich Wubboomer nennen.
Okay.
Weiter, weiter geht's. Also, ich muss
jetzt erst einmal, bevor wir das mal in der
Preisschamp kommen, kommen wir dazu. Also,
neues Repo haben wir am Start. So,
und da mache ich jetzt mal, da kommt der Preisschamp
rein. Da kommt irgendwie mein
Infrascript und mein Ansible
Zeug rein. So, Touch.
Und das, äh,
Aufbauscript nennen wir mal, ähm,
keine Ahnung,
Rebuild oder so.
V-Bucks ist die Echtgeldwährung für Fortnite-Skins.
Ah, verstehe. Das da habe ich
keine Ahnung von.
Okay, Leute, jetzt, jetzt wird's, jetzt wird's
mal kurz, ähm,
kritisch.
Ich muss jetzt
API-Tokens erstellen.
Und da dürft ihr nicht zugucken.
Bam. Da müsst ihr, da müsst ihr
leider draußen bleiben.
Ja, Chat macht die Augen zu,
genau. Äh.
Okay, das passt.
Okay, alles gut, ist weg.
Wunderbar. Okay, gut.
Ich kann euch wieder...
Moment. What the
fuck? Mein Clipboard-Manager
löscht die History nicht.
Was ist das denn für ein Crap, Alter?
Jetzt habe ich echt ein Problem.
Ähm, okay, ich reboote
mal. Ich reboote mal.
Rebooten hilft bestimmt. Leute, ihr seht gleich
wieder was. Ähm...
Das Ding hat extra
einen Clear-Command, ne?
Okay, ist es glaube ich
nicht mehr drin? Ja, nice.
Okay, alles klar. Ich kann euch wieder einblenden.
Gut, ansonsten, ich kann's
ja auch schnell löschen, ne? Aber...
Alles klar, ich blende euch wieder ein.
Guck, steht nichts mehr drinnen.
Ist aber echt Fail, äh.
So. Okay.
Also, jetzt gehen wir mal in unser
Agile-DevOps-
Scrum-Ordner.
Und, ähm, jetzt probieren wir mal
einen Server anzulegen mit dem Hetzner-Cloud-Tool.
Also, es gibt das Ding hier.
H-Cloud. Und damit kann man Server bei Hetzner
erstellen. Und von der
Idee her, also was ich jetzt mal probieren
werde und warum ich auch das mit dem
Bash-Skript anfange ist,
ich glaube, das ist
relativ schwierig, die Logik
in irgendwelchen Orchestrierungstools
abzubilden. Weil ich will ja zum Beispiel
quasi den gleichen, ich will
den Server doppelt erstellen und dann
quasi die vorherige Sache löschen,
sodass ich auf jeden Fall eine neue IP kriege.
Was sind eure Top-Technik-Trends
in den nächsten Jahren?
Web-Assembly wird auf jeden Fall gut abgehen.
Web-GPU wird auch abgehen.
Ob Blazor abgehen wird, weiß ich nicht.
JavaScript wird auf jeden Fall weiter
abgehen, genauso wie die drei großen JavaScript-
Frameworks. Python und AI
wird auch übelst weiter abgehen.
Ich könnte mir vorstellen, dass Rust beliebter
werden wird. C++
leider Gottes immer noch,
auch wenn es die größte Sacker-Programmiersprache
auf der Welt ist.
Java
wird in China immer beliebter werden, ist es
jetzt schon. .Net allerdings
auch.
Ganze Cloud gedönst und
Serverless wird noch
mehr werden.
Ähm...
Und es wird vielleicht auch mal sinnvoll,
gibt es ja jetzt schon sinnvoll verwendbare
Serverless-Functions geben, die immer
hot sind.
Ähm...
Es wird auf jeden Fall immer mehr
bla bla bla as a Service
geben. Das ganze Cloud-Zeug wird auch
weiterhin in Go programmiert werden.
Auf jeden Fall.
Das hat schon seinen Grund.
Also, dass vieles jetzt in Go ist.
Äh...
Was haben wir sonst noch so für Technik? Ach, keine Ahnung.
Fällt mir jetzt nichts mehr ein. Reicht erst mal.
So, also. Wir versuchen jetzt mal
einen Server zu erstellen.
Mit dem
Hetzner Cloud-Tool.
So, und das sollte von der Theorie her...
Äh...
H-Cloud-Tool
help. Da brauchen wir mal irgendwie so
eine Übersichtsseite, wie das funktioniert.
Warum ist Go so im Hype?
Go ist gar nicht mal so sehr im Hype.
Go ist einfach die letzten Jahre über hat sich
das etabliert für das ganze
Cloud-Zeug.
So hundertprozentig sicher, warum
bin ich mir da auch nicht?
Ja, Hetzner-Docs, genau.
Go, ganz ehrlich,
Go ist
also von so den aktuell gehypten
Programmiersprachen, finde ich Go persönlich
eine der,
die mir am wenigst, also am
unliebsten ist. Ich habe ja selbst
schon was halbwegs umfangreiches
in Go gemacht. Wie gesagt, die erste
Iteration meiner Kamera-Überwachungssoftware
war ja, äh, war ja
zumindest die, ähm,
ganze Web-RTC-Sache in
Go.
Aber Go
ist so auf der einen Seite
cool, aber es
es fehlt so viel. Du hast irgendwie, also
in Go hast du irgendwie fünf verschiedene Variablen,
Variablen-Deklarationen.
Dann gibt's so einfache Sachen nicht wie
Filter auf einem Array, sondern nur
mach eine Schleife. Das sagen die, das sagen die
Go-Leute ja ernsthaft, ja.
Also du kannst zum Beispiel in normalen
Programmiersprachen,
äh, nehmen wir mal
sogar, eh, sogar in Javascript, ja.
Sogar in Javascript kannst du mittlerweile
sowas hier machen.
Array gleich, dann kannst du sagen Array
Filter a, äh,
oder i größer,
äh, i größer
drei, äh,
ah ne, a, ar, hab ich's genannt,
ja. Und da kriegst du nur die Zahlen raus,
die größer sind als, äh,
drei, ne. Das war das Ursprungs-Array,
dann sagst du Array Filter, und
dann kriegst du auch das raus. Das kann eigentlich
so mehr oder weniger, äh,
fast
jede Programmiersprache heute.
Ich mein,
bei Node.js sub ich direkt rein,
Klipper, dankeschön, aber wir machen, ich zeig jetzt nur
nen Beispiel grad mit Node.
Natürlich in C-Sharp haben sie's auf die
Spitze getrieben mit Link und Link Extensions
und Assoc Link und, und,
äh, Rx Extensions und hast du nicht
alles gesehen, aber
das heißt nicht sub storniert, es
heißt, äh, Disabo.
Habe ich letztens auf
YouTube gelernt, Disabo.
Und, das kann eigentlich
fast jede Sprache, aber in Go geht das nicht.
Und in Go, also ernsthaft,
ich mein, das ist schon cool,
ne, dass man das so filtern kann, und auch wirklich praktisch
und kurz und knackig. Und in
Go sagen die Leute, nee, nee, nee,
das, das braucht man nicht.
Das braucht man nicht. Go möchte, dass man
sagt, for in
Array, ich weiß grad ausm
Stehgreif die Syntax nicht mehr
genau, äh, weil,
ja, wie gesagt, ich mach Go
nicht täglich. For in Array,
if i
größer 5, dann
push neue Liste,
dann, so. Ja,
genau. Dann hast du diese komische
Iterator Syntax in, in Go, ja.
Wo ich mich frage, warum muss
das echt sein?
Dann weißt du in Go manchmal auch nicht,
ob was Reference ist oder nicht.
Manches, manches macht er unter der
Haube Reference, manches nicht.
Dann, dann brauchst du manchmal ein Sternchen, manchmal
ein und. Also, es ist schon nicht
verkehrt, aber es ist nicht so
griffig, wie ich mir das wünschen
würde, Go. Es ist
vieles davon Übungssache, aber so
grundlegende Dinger wie, dass du
Schleifen anstatt Filtern machen musst,
ja,
ist, ist irgendwie nicht zeitgemäß,
ja. Aber an sich ist Go
gut, vor allem das Ökosystem.
Eine Sache, die mir persönlich auch
extrem und wirklich richtig
hardcore in Go auf den Sack geht,
ist, dass du keine Unused Imports
oben machen kannst.
Also, wenn du in Go was
einbinden willst, schreibst du keine
import fmt,
so. Und bei Go ist es
so, ich kann nicht sagen, import
fmt, import das, import das
und
es nicht, sobald, wenn ich es nicht
benutze, dann
kompiliert Go nicht. Also, wenn ich was importiere,
was ich nicht benutze, obwohl ich genau weiß,
ich brauch das in zwei Minuten,
kann ich es nicht kompilieren.
Oder umgedreht, wenn ich
einen Import habe und
ich kommentiere was aus, weil ich mal schnell
was testen will, dann muss ich
vorher noch den Import löschen.
Das ist so scheiße.
Das fuckt mich permanent ab bei Go.
Keine nicht benutzten Variablen.
Ich kann das verstehen, wenn es in einem Release
Build Warnings gibt oder so.
Ja.
Oder meinetwegen sogar, aber es sollte zumindest
einen Test-Mode geben, wo das erlaubt ist,
oder irgendeinen Flag,
womit das erlaubt ist, weil es kommt total
oft vor, dass man, keine Ahnung, man hat
FNT importiert, so.
Und man hat irgendwo eine Zeile,
FNT printeln
ist das ja, glaube ich, in Go, machst du
bla bla bla, so. Und in Go
kommentierst du das dann aus,
weil du es mal ohne probieren willst
und
dann kompiliert Go nicht, weil du einen Import
hast, der nicht mehr benutzt wird, weil du es gerade
auskommentiert hast.
Ne, also, das kriegt mich richtig auf in Go.
Ich mag das eh nicht,
wenn die
die Hersteller
zu sehr für einen mitdenken.
Also das, das, das,
das extremste Beispiel ist da Ruby on Rails.
Da darfst du ja deine Variable
noch nicht mal, wie du willst,
groß und klein schreiben, so nach dem Motto, dann finde das
schon nicht mehr.
Aber das geht mir in Go auch auf den Keks.
Ich finde, und ich weiß, ich bin der übelste
.NET und .NET Core und C-Sharp-Fanboy,
aber ich finde,
Microsoft hat wirklich
ein sehr gutes,
und ihr wisst, ich bin,
ich bin wirklich kein Microsoft-Fan,
ich flame die oft genug, ja,
aber Microsoft hatte über
die letzten Jahre echt ein sehr glückliches
Händchen, was die Sharp-Features angeht,
und die haben auch genau das richtige
Verhältnis von
was gebe ich vor
und was
überlasse ich den Leuten.
Ja, die greifen auch manchmal
ins Klo. Die Projekt-
Config ist zum Beispiel auch in .NET
kacke.
Es gibt auch in ASP.NET Core so ein paar
Sachen, wo ich mich frage,
warum das sein muss, aber insgesamt finde ich
da wirklich noch am besten.
Ja, Default Interface
Implementations kann man sich auch echt
drüber streiten, ob das sinnvoll ist.
Ich muss dir aber ehrlich sagen, ich glaube,
ich habe es noch nirgendwo verwendet.
Ich weiß aber, warum Microsoft Default Interface
Implementations gemacht hat, also
bin ich mir relativ sicher.
Das haben die gemacht, rein aus
Eigeninteresse, weil
die, also,
ich muss das mal kurz zeigen, was das
ist, für alle, die es nicht wissen,
genau, also, normalerweise
konntest du ein Interface anlegen in .NET
immer so.
Und du konntest eine Klasse anlegen, die hatte
mehrere Interfaces. .NET konnte keine
Mehrfachvererbung.
Eines der Sachen, wo ja C++ immer für geflamed wird.
Du konntest aber mehrere Interfaces
an eine Klasse mehrere Interfaces
implementieren.
Ja, das ging aber auch nur,
weil Interfaces nur gesagt haben,
wie die Methoden heißen müssen,
die du implementierst, nicht wie
genau.
Der Compiler hat einfach nur geguckt,
hast du dieses Ding definiert? Wenn ja, ist gut.
So. Und das war auch
jahrelang so in .NET. Das war auch
eigentlich ganz gut, muss man ehrlich gesagt
mal sagen. Für alles andere
konnte man abstrakte Klassen und sonst was verwenden.
Und jetzt
kam Microsoft auf die Idee, wie wäre
es denn, wenn man Interfaces
Default Implementierung geben könnte.
Also sprich, man definiert nicht mehr nur,
was implementiert werden soll, sondern
wenn deine Klasse das nicht
implementiert, dann
gibt es eine Default Implementierung.
Was bedeutet, C Sharp hat
auf einen Schlag Mehrfachvererbung
bekommen und
merkwürdige Dinge, wo ich mich frage, ob das
wirklich so eine gute Idee war.
Aber ich weiß, warum die es gemacht haben.
Also ich glaube zumindest zu wissen,
warum die das gemacht haben. Microsoft
selbst hat absolut Interface hell.
Guckt euch mal DirectX an.
Texture 1, 2, 3, 4, 5
X
ähm
was weiß ich
Swapchain 1, X
Swapchain 2, 3, 4, 5, X
Die haben
Interface hell des Todes.
Ich glaube, die haben das rein aus
Eigennutz gemacht bei Microsoft.
So, okay.
Wo sind wir stehen geblieben?
Wir wollen den Server bei Headster anlegen.
Zu viel geschwätzt.
Und Extension Methods finde ich
viel schöner, viel viel nicer.
Übrigens eine Sache, die
C++, also
wirklich, das ist eines
auch weder nur meine Meinung nach,
aber eines der Features, was
C++ wirklich zu einer
halbwegs brauchbaren Sprache machen
könnte, wären Extension Methods.
Weil dann kannst du die
rotz Default Implementierung,
die C++ in manchen Fällen
hat, wenigstens
Extenden mit eigenen
Lips auf GitHub oder sonst was,
ohne dass du inkompatibel
zu anderen Sachen wirst, weil du unterschiedliche Typen
verwendest. Also
Extension Methods wäre glaube ich was, was C++
noch halbwegs brauchbar machen könnte.
Du könntest dann zum Beispiel
die Standard C++
Standard String Klasse verwenden,
die einfach nur mal abgrundtief suckt,
wenn du irgendwas wirklich mit
deinem Text machen willst.
Und du könntest
die weiterverwenden, aber mit Extension Methods
könntest du die zu einer halbwegs brauchbaren Klasse, du
könntest da ordentlichen Unicorn Support reinbauen,
du könntest da ordentlich
Groß-Klein-Schreiben und Konvertieren reinbauen,
ordentliches Zählen, alles mögliche
reinbauen über Extension Methods und du
wirst trotzdem kompatibel bleiben zu allem, was
Standard String verwendet.
Das wäre nice, aber das C++
Cremium hat sich gedacht, ne ne,
wir bauen lieber noch bessere
Template Funktionen ein, die
5 Leute auf der Welt verstehen.
Ja.
Der Unterschied zwischen Extension Methods
und einfachem Vererben ist,
dass die Klasse
sich gar nicht ändert.
Also es ist exakt
der gleiche Typ, wie vorher.
Und du kannst die
ich muss aufpassen, dass ich kein Mist erzähle,
du kannst die C++
Standard String Klasse auch nicht
gescheit extenden.
Ich bin mir nicht sicher,
ob C++
das kann, aber ich glaube
C++ ist so schlau und checkt
es, wenn du eine abgeleitete Klasse
übergibst, dass der
die Base Klasse nimmt, aber du hast
keinen Zugriff auf viele internen
Sachen von Standard String.
Wobei, dann
bringen die Extension Methods auch nichts.
Ist ne gute Frage, ist ne gute Frage.
Es hat
es hat seinen Grund, ich bin
mir aber grad selbst nicht so ganz sicher,
warum man nicht einfach ne
Ok, keine Ahnung, kann ich dir grad nicht
gescheit beantworten. So, also wir wollten
aber einen Server bei Hetzner anlegen, wir kommen aber überhaupt nicht
zur Sache. Also, hcloud create.
So viel weiß ich.
Create Server
Also von der Idee her wollen wir jetzt folgendes machen.
Ich will ein Skript, was den Server anlegt
also
ja genau, also was den Server anlegt
den ordentlich
konfiguriert und danach
den gleichen Server
wieder, also
ich will Server rotaten, ich hab keine Ahnung
ob man das versteht, was ich meine, also
mal angenommen, ich hätte nen Server
mit dem Namen 1, so
dann will ich nen zweiten Server anlegen,
mit dem Namen, keine Ahnung
1
underscore 1 oder so
und dann will ich, wenn der fertig aufgebaut ist
will ich den alten Server löschen
und dann den neuen verwenden
und beim nächsten Run
will ich das gleiche mit dem jetzt erstellten Server machen
also sprich ich will so, will die durchrotaten
was den Vorteil hat
ich krieg garantiert immer ne neue IP
und
es ist so wenig Downtime wie möglich
weil ich kann die Server parallel
aufbauen und warten bis der zweite
läuft und dann lösche ich
den ersten, das sind
nur 5 Minuten, die machen die Mehrkosten nicht aus
aber es hat kaum Downtime und ich krieg garantiert ne neue IP
deine Rechnung ist dann
200 Seiten lang, das interessiert mich nicht
die Rechnung wird aber nicht höher
ob die Rechnung 200 Seiten lang ist, juckt mich nicht
Soldat, ich bastel das jetzt mal
dann sieht man was ich machen will
ok, also wir wollen einen Server anlegen, wie geht das jetzt
hcloud create server
help, ah
da habe ich schon die Hilfe, help
ok, was brauchen wir jetzt
image, image
server, mach ich das jetzt richtig
ist das auch alles dockerized
aktuell schon, ich bin mir aber nicht sicher
ob ich das wieder mache
image
ich brauch mal ein Beispiel
wie geht denn der Kram
server erstellen
hcloud
docs
hetzner hcloud
wir haben doch bestimmt nur
hetzner cloud ap
genau, sehr gut
server
servers
die haben ganz gute docs
ist mir schon öfters mal aufgefallen
create a server
ok
ok das ist jetzt über jason, wie geht das mit dem
wie geht das mit dem tool
also was übergeben die da jetzt
name
location data center
ok probieren wir es mal aus
wahrscheinlich muss ich sowas hier machen
image gleich ubuntu
20.4
ah ne
image, image
äh
kann doch nicht so kompliziert sein
kann doch nicht so kompliziert sein
wie man den kram verwendet
alter, ich brauch ein Beispiel
mal
wenn ich ein Beispiel hab weiß ich
wie der kram aufgebaut ist
ja hcloud server create
da muss ich immer noch name und so
ah hier guck mal
server create
nicht create server
ah
server create
ah jetzt kommen wir der sache schon näher
exquisite
alles klar und dann name
ok
so jetzt müssen wir uns einen guten namen dafür ausdenken
dass ich die server wiedererkenne
wir machen erst mal image
image
ok
ok
ok
ok
ok
ok
ok
ok
of
ok
beruf
im stream da könnte man auch da könnte man wenigstens auch mal richtig echte
werbung drinnen machen machen wir bei hetzner bannereien da hat hetzner
ordentlich was vorne ich meine ich gucke gerade wieder 300 leute zu die alle
technik interessiert sind die auch in dem bereich arbeiten und ich glaube da
haben alle was davon da mache ich bannereien ab und zu mal so ein hetzner
overlayer da krieg ich ein bisschen was hetzner hat ordentlich was von das das
sollte man mal machen ja da braucht man rabattcode pocfps genau scotch
dankeschön für den sub scotcho drei monate dankeschön nice okay weiter
weiter beim bauer läuft hetzner wer ernsthaft cool dann ich schreibe die
echt mal morgen an glaube ich ne gute idee also genau also sprich bei typen
muss man jetzt angeben was man für einen server typ haben will ich will den da
haben cpx
21 ich glaube cpx sind die sind die cpx nicht die die auf epic laufen die cx in
celeron und die cpx in sind epics na also cpx 21 weiß ich ob man das schlecht
schreibt kann man wahrscheinlich schreiber makros cpx 21 zum solver
erstellen durch dich bin ich echt zu hetzner gekommen also erfolgt eine
erfahrt du deine werbung schon mal ja genau dass das müssen wir
Wollen wir mal sagen
Ja ich sehe dass nachher in den clips passt weiß dass ich gekippt haben so also was muss man noch angeben nehmen
So jetzt jetzt muss ich mir mal ein bisschen überlegen wie ich den kram nenne
Und zwar ich will den server ja wiederfinden wie gesagt ich will immer zwei server abwechseln
Warum habe ich in meiner stellt kein kein aus kommentieren zu
Fuck muss ich erst mal das ausschalten kann also ich brauche den namen den ich wieder finde
Wie gesagt das ganze setzt sich zusammen aus einem frontend und drei worker server die nenne ich einfach auch worker
worker
Worker 1
So jetzt brauche ich noch eine unique name dafür dass ich den wieder wiedererkenne also wie gesagt ich will das ganze durch rotieren
ich will den server erstellen und
Quasi den gleichen server den ich das letzte mal erstellt habe dann
löschen nachdem der aktuelle aufbau wieder drinnen ist packt doch hetzner rafflings auf den preis
Deine rechnung wird dann dadurch ewig lang ja aber ist doch nicht schlimm oder ich mein
wen juckt
Dann habe ich halt dann habe ich halt drei habe ich halt 30 zeilen in der rechnung ist doch nicht schlimm
Also mich juckt das nicht wieso 720p
48 fps weil das flüssiger ist als 30 und nicht so viel bandbreite braucht
Wie 60
Datum anhängen an den namen ja ich habe ich habe ich mir auch gerade überlegt wir machen so denn wir machen einfach einen
Date oder so
date
Wie sagt man date noch mal
Prozent plus es war das
Prozent es
Ok genau
Und jetzt brauche ich das passende wobei so ein timestamp ist okay
Wir nehmen einfach den timestamp
Der timestamp ist einfach immer unique das passt doch das müsste das müsste eigentlich müsste eigentlich in dem was mache ich denn da
Das müsste doch eigentlich gut passen
Das wirst du eigentlich gut passen so jetzt erstellt einen server
Ubuntu 20 20 04 ist es auch der 3 core mit dem namen worker
Ok geht das jetzt invalid input name warum ist das warum ist das invalid
Ok wir probieren zwar nur mit worker geht das denn
Ok wir probieren zwar nur mit worker geht das denn
Wenn ihr das root-passwort von einer cpx anzeigen müsst ist das so ein typisches name
Wo sich es kleinschreiben cpx
Guck mal jetzt wieder erstellt es created leute
Das ist schlecht wenn er das root passwort anzeigt das ist nicht gut wenn er das root passwort auf der shell anzeigt
Das ist nichts ist keine so gute idee
So schnell habt ihr das und passwort nicht abgetippt
Das glaube ich nicht das ist definitiv keine gute idee gewesen
Okay, kann ich dem Ding irgendwie beibringen, dass er das fucking Root-Passwort nicht anzeigt, dem Stream?
Ja, mit SSH-Key.
Hoffentlich zeigt er das Root-Passwort nicht an.
Ja, ich kann es da runter...
Was, siehe Clip? Was für einen Clip?
Hast du das...
Follow MLS, das glaube ich dir nicht, dass du das so schnell abgetippt hast.
Das glaube ich dir nicht.
Clip, oh, it didn't happen.
Wenn man einen SSH-Key generiert, wird kein Root hinterlegt, okay?
Ich hoffe, der Server ist jetzt auch weg.
Okay, zum Glück.
Sonst machen die Leute irgendwelche Hackermans hier drauf.
Okay, SSH-Key. Also, wie hinterlegen wir einen SSH-Key? Zeig mal her.
So, also, wie hinterlegt man einen SSH-Key?
Wahrscheinlich...
Minus...
Minus, minus SSH-Key.
Äh, der Server ist...
Leute, der Server ist schon längst weg.
Ich habe den gerade wieder gelöscht.
Der ist...
Der ist nicht mehr existent.
Der ist weg.
Da könnt ihr euch auch nicht mehr drauf einloggen.
Äh...
Cloud, wie listet man eigentlich seine Server?
List?
Server?
List?
Ah, gibt nichts.
Sehr gut.
Oder LS, ja, aber es ist wahrscheinlich List.
Ich habe da...
Ich habe also...
Ja, List.
Du bist trotzdem drin.
Immer noch eingeloggt auf...
Auf einem Server, der nicht mehr oben ist.
Exzellent.
Okay, weiter.
Jetzt hoffen wir mal, dass er kein Root-Passwort anzeigt.
Sonst muss ich den gleich wieder löschen.
SSH-Key.
Ich habe einen SSH-Key hinterlegt.
Der nennt sich Test-At-Test.
Auch toller Name.
Serverless ist das, genau.
So, okay.
Ähm, Chat.
Wollen wir es riskieren?
Wollt ihr zugucken?
Ich kann das Ding ja schnell wieder löschen.
Nee, nee, nee.
Ich lasse es.
Ich lasse euch nicht zugucken.
Nice.
Okay, Chat.
Es hat funktioniert.
Da.
Server erstellt.
Worker 1.
Und es wird kein Root-Passwort angezeigt.
So, mal gucken, ob man sich drauf verbinden kann.
Ich werde schon mal in weißer Voraussicht, ähm...
Strict Host-Key-Checking auf No stellen.
Weil ich wahrscheinlich mich jetzt 50 Mal auf der gleichen IP einloggen werde.
So, da ist er.
Da ist er.
So, jetzt mal kurz kontrollieren.
War das hier die gleiche IP wie das letzte Mal?
1, 3, 5, also 2, 4, 6 hinten.
Und davor war es...
Wo ist das mit dem Root-Passwort?
2, 1, 9, 0, 2, 4, 6.
Gucken wir mal, ob die den Server ordentlich resettet haben.
Oder ob das gleiche Root-Passwort immer noch funktioniert.
Äh, wie kann man denn...
Äh, wie kann man denn, äh, äh, Passwort ausforcen, äh...
Wobei, ist Passwort-Auth vielleicht sogar aus, wenn man...
SSH-Force...
Passwort-Auth...
Prefair.
Aha.
Ah ja.
Okay, nice.
Haben sie gut gemacht.
Haben sie gut gemacht.
Alles, alles gut.
Keine Hackermans hier drinnen.
Keine Hackermans am Start, alles klar.
Außer der Chat, der ist natürlich wieder drinnen.
Okay, sehr schön.
Okay.
Also so legt man schon mal den Server an.
Ist gut zu wissen.
Äh, H-Cloud-Server.
Wie kannst du das Root-Passwort jetzt selber ändern?
Äh, ich glaube, es ist gar kein Root-Passwort gesetzt, ehrlich gesagt.
Vermute ich jetzt mal.
Aber ich könnte einfach Pass...
Pass...
Pass-WD machen.
Und dann kann ich ein neues Passwort vergeben, wenn ich will.
Ja, ja.
Genau.
Hast du Passwort geleakt?
Nee, nee, nee, hab ich nicht.
Hetzner hat das Passwort geleakt.
Aber der Server ist schon längst wieder weg.
Okay, also.
H-Cloud-Server-List.
Und wie löscht man den Kram jetzt wieder?
H-Cloud-Server-Help-Remove-Rebuild.
Oh, guck mal, man kann sogar Reset-Passwort machen über den...
Das machen wir jetzt aber nicht.
Delete.
Delete a Server.
Exquisite.
Also, Server-List.
Und dann braucht man wahrscheinlich die ID, denke ich mal.
Server-Delete.
Mal gucken, ob auch sowas hier geht.
Könnte ja sein.
Nee, Anon-Flag.
Dann wahrscheinlich die ID.
Ich hab den in Helsinki gebaut.
Ja, das ist sogar gut, wenn ich den in Helsinki baue.
Dann baue ich den nämlich an allen drei Standorten ein.
Jetzt müssen wir nur noch gucken, genau.
Also, dann erstelle ich nämlich einen Server von den Workern in Helsinki.
Einen in Nuremberg und einen in Falken...
Falken-Dings.
Passt doch.
Drei Server, drei Standorte.
Exquisite.
Exquisite.
Alles klar.
Jetzt muss ich nur mal kurz gucken.
Create.
Wie man jetzt die Location...
Location...
Data Center...
Ähm...
Ja, okay, was sind denn die korrekten Hetzner-Locations?
Hetzner, H-Cloud...
Location...
Die haben Helsinki.
Das heißt, glaube ich, Hell.
Hell.
NBG-FSN.
Hell.
Ah, das ist eine gute Idee.
H-Cloud-Location-List.
Ah, nice.
Excellent.
Also, Location.
Dann...
Also, man kann ID nehmen oder Name.
Okay.
Machen wir mal ID.
Man sollte jetzt was in FSN1 erstellen.
Postchamp.
Nice.
Sehr schön.
Da ist er.
Kann man wieder löschen.
Und jetzt können wir einen ordentlichen Server-Name vergeben.
Also, wir hatten ja gesagt, Underscore...
Date.
Äh, Moment, wie geht das?
Date.
Plus...
Genau, für den Timestamp.
Plus Prozent S.
Invalid Input.
But why?
Vielleicht wegen dem Underscore?
Ha!
Echt?
Nice.
Guck mal, wie ich dem Underscore...
Nee.
Okay, Server erstellt.
Genau.
Worker 1 minus Timestamp.
Sehr schön.
Excellent.
Warum funktionieren denn keine Underscores?
Gibt's da eigentlich Autocomplete für?
Das wär mal extrem.
H-Cloud.
Autocomplete.
Boah, da gibt's Autocomplete für!
Massive, Alter.
Server.
Delete.
Ah, nee, aber...
Ey, das funktioniert nicht.
Ey, das funktioniert nicht.
Ey, das funktioniert nicht.
Ey, das funktioniert nicht.
Ey, das funktioniert nicht.
Ey, das funktioniert nicht.
Ey, das funktioniert nicht.
Ey, das funktioniert nicht.
Ey, das funktioniert nicht.
Ey, das funktioniert nicht.
Funktioniert.
Guck mal.
Der hat Autocomplete für die Server.
Ey, das ist ja cool.
Da muss ich gar nicht nachgucken.
Sehr gut.
Huge.
Okay, also das da brauchen wir schon mal.
Das ist richtig Poggers.
Ah, der setzt es als Hausnehm.
Ja, okay, das ergibt Sinn.
Das ergibt Sinn, dass das da nicht funktioniert.
Ja, da hast du recht.
Big...
Moment, wo hab ich's?
Das such ich nicht.
Wo hab ich mein Big Brain?
Wo ist mein Big Brain-Emote, Leute?
Ich find's nicht mehr.
Hier ist es.
Alles klar.
Da wär ich nicht drauf gekommen.
Okay, also.
Infra...
Ups.
What the fuck?
So, Rebuild.
SH.
Sag mal, wie sieht's mit Autocomplete aus, Shell?
So.
Bin.
Bash.
Okay, wir wollen drei Server anlegen.
Also, 4, I, In.
Vielleicht machen wir es erstmal alibi-weise
nur.
Nur in der Schleife.
Aber wir machen erstmal nur einen.
H-Cloud.
So, also, wir wollen den Server anlegen.
Und zwar Ubuntu, Ubuntu, bla.
Worker.
Der soll nicht 1 heißen, sondern der soll
dementsprechend Worker...
Worker...
1, 2, 3 heißen in dem Fall.
Und Location...
Passt ja wie die Faust aufs Auge.
Location machen wir auch
zwischen 1, 2, 3 durch.
Das passt eigentlich relativ gut.
Moin, Cheat95.
So, okay.
Und jetzt, und jetzt...
Ich lass es einmal laufen, damit ich weitermachen kann.
Aber das ist nicht Sinn und Zweck der Übung.
So soll's eigentlich nicht sein.
Äh, Rebuild.
Erstmal gucken, ob's funktioniert.
Bot-Netzwerk, Inc.
Das Gute ist, der AP-Key...
Selbst wenn ich den AP-Key irgendwie
geleakt hätten sollte,
kann man das nur in diesem Projekt verwenden.
Okay, so.
Und von der Idee her, was ich jetzt machen will, ist,
ich will den Server anlegen,
dann will ich, ähm,
Ensemble laufen lassen,
und dann will ich
den alten Server
vom gleichen Typ,
also den alten Worker 1,
löschen.
Das machen wir doch jetzt.
Das können wir nochmal ausprobieren, ob das funktioniert.
Also, ich muss jetzt erstmal rausfinden,
wie der alte,
wie der alte Server heißt.
Das heißt, ich muss jetzt irgendwas
mit Server...
Server-List machen?
Oder so?
Ja, genau.
Das müsste funktionieren.
Ich mein, in dem Fall mit den ganzen JSON-Responses
und sowas, wäre das wahrscheinlich
in einer ordentlichen Programmiersprache
mit, ähm,
einem ordentlichen REST-Client einfacher.
Aber wir machen das nochmal weiter mit dem Bash-Tool.
Kram läuft da überall.
So, also List.
Wir brauchen jetzt die ID
von dem Server,
der schon Worker 1 heißt.
Splixer.
Big Brain Tool.
Ja.
Ne, ne, ne, mit, mit, mit, mit Ansible
ist das, glaube ich, nicht so einfach, was ich vorhabe.
Oder kannst du das mit Ansible auch so...
Das hab ich schon gesehen.
Kannst du das mit Ansible auch so rotaten?
Ich will ja
erst einen neuen Server aufbauen,
der Worker 1 heißt.
Und danach, wenn der da ist,
will ich, will ich den Kram wieder löschen.
So, Grab Worker 1.
Und jetzt brauche ich...
die ID von dem Ding.
Ja gut, das ist einfach.
Cut D Dings F1.
Das ist die ID.
Easy.
Jetzt habe ich die ID von dem Server.
Von dem alten.
Okay, das machen wir jetzt mal.
Also.
Äh,
wir machen mal sogar Debug-Ausgabe.
Creating Server.
Dass man Bescheid weiß.
Ähm,
dann merke ich mir den alten,
alten Server irgendwie old.
Ähm, dann merke ich mir den alten, alten Server irgendwie old.
Ähm, dann merke ich mir den alten, alten Server irgendwie old.
Dann lege ich den neuen an.
Dann lasse ich Ansible laufen.
Und dann lösche ich den alten Server.
Und dann lösche ich den alten Server.
Und dann lösche ich den alten Server.
Also Hard Cloud.
Server. Delete.
Old ID.
So weit von der Theorie her.
Hast du dir am Sonntag oder so schon mal die
Fanshowdown-Videos von Major Hardware...
Ich weiß nicht, wer Major Hardware ist.
Ne.
So, also der sollte jetzt ein neues Image erstellen.
So, also der sollte jetzt ein neues Image erstellen.
Sollte er das alte löschen.
So weit von der Theorie her,
ob das jetzt klappt.
Äh, ich guck mal, ob ich mir noch die
IP irgendwie rausge... rausgekreppt
kriege, dann kann ich dir nämlich die Infos noch anzeigen.
Äh,
welches Feld brauch ich denn da jetzt?
Fünf?
Sechs?
Sieben?
Hä, wir sind erst mal running?
Okay, das mach ich anders, das sagt...
Äh,
grepp, o,
running,
äh, grepp kann keine
Matching-Groups, ne?
Grepp, o, running...
Äh, wie krieg ich denn das jetzt am besten raus? Ich mein...
Ich mein, ich könnte
das jetzt... Aber schön ist
was anderes.
Wie krieg ich, wie krieg ich denn da möglichst elegant
jetzt die IP raus?
Aus der Ausgabe von dem Server.
Du könntest per Regex die...
IP-Regexe sind doof.
Column ging doch irgendwie, oder?
Mit AWK...
Col...
Column...
Äh, Bash...
Column... Forth, oder so.
Ja, das...
Moment, geht das
ohne irgendwas?
Kann ich... Ohne, ohne Delimiter?
Geht das?
Nö, das funktioniert net.
Die sind... Ich glaub, die Cloud-Farms
sind sogar minutengenau abgerechnet.
Ja, okay, mit AWK könnten wir's
machen, ja, das stimmt. Das ist dem egal, ob's
hype ist. Aber ich dachte, man konnte direkt sagen
Column...
Column 2, oder
so? Nee, das macht keinen
Unterschied.
Das macht keinen Unterschied, ob da...
Aber wir sind, wir sind
heute ein bisschen Stack-Overflow-driven.
Beste. Und da sagt noch einer,
zu programmieren muss man irgendwie was können.
Ja, das... Einfach copy-paste.
Okay.
Ja, dann machen wir's doch mit AWK, dann
ist das wahrscheinlich die einfachste Variante.
Okay, AWK 1 ist dann die
ID und AWK 1, 2, 3,
4...
Oh.
What the fuck?
Ah, ich muss noch creppen.
Hab ich vergessen. Okay. Ich muss noch creppen.
Crep nach
Worker 1.
Excellent. Okay.
Dann, dann merken
wir uns das jetzt mal. Also
Old...
Old IP
ist
dann, äh, Worker
1,
ne? Genau, man muss wissen, wie man
googelt. So, so sehe ich das auch.
Das ist oftmals gar nicht so einfach,
dass man, äh, weiß dann, was man suchen muss.
So, also, jetzt habe ich die alte
ID, die alte IP,
und jetzt kann ich das Rotate, Rotatant
aufbauen.
Wofür ich das Skript brauche? Ich will meine
Preisschirm-Infrastruktur neu erstellen können,
und ich will die Server Rotatant aufbauen.
Also sprich, ich will erstens sicherstellen,
dass ich eine neue IP kriege. Das kann ich dann, äh...
Das geht dadurch, dass ich den neuen Server erst
erstelle und dann den alten lösche.
Ja, und halt so, dass es möglichst wenig Geld kostet,
dass die möglichst kurz parallel laufen. Aber auch so,
dass es wenig Downtime gibt.
Old IP, na das, das kann ich, kann ich dann
zum Debug verwenden.
Delete Old Server. Und da machen wir
jetzt hier, echo
IP
is
weil brauchen wir das gar nicht
an der Stelle, ne? IP is old
IP
und ID. Ich geb das einfach mal
raus, das sieht dann wahrscheinlich besser aus
und, äh...
vielleicht auch ganz praktisch. So, und das
sollte jetzt doch eigentlich schon funktionieren,
bevor wir die ganze Ansible-Geschichte machen. Also sprich,
der sucht sich den alten Server raus,
merkt sich das,
und createt ein neues
Image. Und wenn das Image
created ist, dann löscht er
den alten Server. Okay, also von der Idee
her, wenn ich das jetzt laufen lasse...
Oh, ich muss hier aus dem create...
Ich muss aus dem create mir auch noch
die Sachen rauskreppen.
Ja, Serverlist kann ich auch... Der, der
AP Access macht's nicht fett. Ähm...
Ich muss nochmal den create von Hand
ausführen, um mir nochmal
des, des Outputs
den Output merken,
dass ich am Output gleich mal ne Runde rumkreppen
kann. Ja.
Hier mal
doppel da.
Löschen wir den alten wieder, zack.
Output.
Also, sprich,
wie krieg ich da jetzt am besten hier die IP
raus? Das ist
einfach.
Das ist immer das erste Feld.
Also, kreppen wir
einmal nach, äh,
kreppen wir einmal nach, äh, Server.
Dann kriegen wir nur das.
Und dann ist es wirklich cut
minus f2.
Muss man da Ads haben? Die Limiter angeben?
Genau. Und
dann ist die IP
ist einfach das gleiche,
nur mit, ähm,
IPv4.
Excellent.
Dome Frage, was bringt
dir ein Rotating Server? Also,
das bringt, dass ich
garantiert ne neue IP kriege auf dem jeweiligen
Server, dass
es nicht unnötig viel kostet, weil ich die
nicht lange überlappend da
hab, und dass der zweite
Server auf jeden Fall da ist, bevor
ich den ersten lösche und so die Downtime
quasi so gut wie nicht vorhanden ist.
So, ähm,
also sagen wir jetzt mal hier, äh,
Output, oder Out,
einfach nur Out.
Abkürzenbeste.
So.
Jetzt diesen
ganzen Crap hier rein, Echo,
Out,
und dann kommt hier die IP.
Und dann
kommt das raus. Also,
das müsste so funktionieren.
Das muss ich noch quoten, sonst checkt das
wegen den Zeilen nicht.
So, und dann ist das hier
IP.
Äh, ne, das ist ID.
So, und jetzt bin ich echt mal gespannt, ob
der Kram funktioniert.
Warum kein Webproxy? Weil das gar nicht so einfach ist.
Finde mal ordentliche Proxys,
die dann auch nicht geblockt
sind. Was ist IP?
Ich hab's bei Proxy gemacht,
aber das hat nicht
gescheit funktioniert.
Server wechseln brauch ich nur für den Fall, dass ich
geblockt werde. Ich hab jetzt ja mein ganzes Zeug so weit
runtergeschraubt, dass ich eigentlich
nicht mehr geblockt werde. Das läuft jetzt auch schon zwei Tage,
ohne dass irgendwas ist. Ich mein, ich mach ja im Prinzip
weniger Traffic, als
die Oma, die ab und zu mal die Seite refresht.
Serious Marks, top.
Kann, kann es nicht. Nein.
Keck weh.
Okay. Und jetzt geben wir,
jetzt geben wir die IP aus, denn das funktioniert
nicht. Echo. Kopieren uns das
einfach.
So, okay.
Und da hier dazwischen kommt das Ansible Zeug.
So, von der
Idee her sollte der jetzt alten Server,
wir gucken ihm mal zu,
neuen Server
erstellen und dann alten Server
löschen danach. Also wir sollten
danach einen Worker 1
haben mit einem neuen Timestamp und dieser
und dieser
6056 hinten sollte weg sein.
Die sind verfügbar, aber
Amazon hat wahrscheinlich einfach nicht aktualisiert.
So. Rating Server.
Hey, das hat funktioniert.
Guck mal. Neuer Server
ist da, alter Server ist weg. Gleicher Typ.
Gleich alles so wie sein soll.
Also der rotatet jetzt. So.
6285.
Führen wir das ganze nochmal aus.
Wir gucken ihm jetzt mal live zu bei.
Guck, zweiter Server
wird erstellt und danach
sollte direkt der erste gelöscht werden, wenn das
durchrotatet ist. Ja.
Nice.
Genau so soll's sein.
Sehr schön. Nice. Das gefällt mir.
Wir haben sogar noch
halbwegs brauchbare Ausgabe.
Das def nullen wir,
ach komm, ich schau das mal draußen.
Okay und jetzt kommt das, jetzt wird's bei uns.
Big Brain Ansible Time.
Okay, also das Rotaten funktioniert schon mal.
Dann sollten wir jetzt noch
gucken.
Die Location sollten wir vielleicht
noch angeben.
Machen wir irgendwie
in location
Ja gut, woher weiß
ich denn was, was ist?
Woher weiß ich denn was, was ist?
Lohnt sich das zu mappen?
Location
List
Ja, ich hab auch schon gesagt, ich schreib
mein Headster morgen an. Ich mach so viel Werbung für die.
Ja, 1 ist
Fissen, 2 ist
und 3 ist
Hell.
Die Hölle in Helsinki hier.
Wobei ehrlich gesagt, ist mir das doch vollkommen
egal.
Das muss ich nicht mappen. Ich schreib da
einfach 1, 2, 3 hin und gut ist.
Guck hier, ich führ's nochmal aus. Rebuild.
Location 1, reicht
doch. Da muss doch, da muss doch nicht
Helsinki drinstehen oder
oder Nuremberg oder so. Reicht doch,
dass ich weiß, dass das Location 1 ist
und dass es überall anders ist. Reicht ja, muss ich
sagen, gar nicht. Können wir immer noch
verfeinern. Okay, jetzt kommt
mach random, nee
auf kein, das kann ich nicht machen.
Dann krieg ich doppelte IPs mit Pech.
Also,
die gleichen nochmal.
Wenn dann nämlich zweimal hintereinander
dann zufälligerweise auf das gleiche RZ kommt und
in der Zwischenzeit kein anderer den Server aufgebaut hat,
dann hab ich die gleiche IP von vorher. Und das ist
will ich ja gar nicht.
Okay, ähm,
jetzt, jetzt kommt, jetzt kommt das Ansible Zeug.
Da wird's jetzt ein bisschen big, big
brainiger. Wir haben doch noch
unser Ansible Zeug vom letzten Mal.
Jetzt ist nur noch die Frage
CD, Temp,
Ansible. Nee, ach du Scheiße.
CD, Repos, Ansible.
Ach du große Scheiße, wo hab ich denn das letzte Mal?
Wait a minute.
Hab ich das in meinem Git?
Okay, wenn ich es aber zu meinem Git
geedet hab, dann muss ich es ja auch irgendwo lokal finden, ne?
CD, Ansible.
Achso, das heißt...
Ja, perfekt.
Ich hab das geedet. Ich hab sogar noch was dran gemacht danach.
Massive, devops,
big brain. Nice.
Okay. Ähm.
Wo, wo war
unser Playbook vom letzten Mal da?
Das brauchen wir jetzt.
Ich schau mal kurz Visual Studio auf.
So. Das ganze Zeug,
was wir hier unten haben, brauchen wir nicht.
Caddy Zeug kommt weg.
Price Champ kommt weg.
Wir brauchen eigentlich
erst einmal nur die Sachen bis
Firewall einschalten.
Weil das gibt jetzt ja nicht den
Price Champ Frontend Server.
Das
gibt jetzt ja die Backend
Geschichte, also die Worker Crawler
Geschichte.
Dementsprechend müssen wir auch nicht HTTP
erlauben.
Die Musik hin.
Also. Und Host muss auch
weg. Oh Leute, wie kann man
Ansible direkt auf ne IP
ausführen ohne Inventory?
Weiß das jemand?
Google. Google. Ansible
direct IP.
How to run
Ansible without
specifying inventory. Genau das
Proma. Du kannst einfach die IP hinten
dran schreiben. Das kann dich an den
Komma hinten dran... Ernsthaft? Das funktioniert?
Seriously?
Okay, das ist
ein Bug, oder? Dass das funktioniert mit
einem Komma hinten dran.
Weil gewollt wäre das die abenteuerlichste
Syntax aller Zeiten.
Kann mir nicht vorstellen, dass das gewollt ist. Aber das probieren wir
jetzt mal aus, ob das funktioniert.
Also machen wir mal
Hosts raus. Ne, was sollte man reinschreiben?
Hosts.
Hosts all. It's not a bug.
Tja, da bin ich mir grad nicht so sicher.
So, und jetzt kopieren wir uns das
Ansible Playbook mal. Nämlich
in Base
nach
Agile
DevOps Scrum und
die Ansible Conf
kopieren wir uns auch. Die brauchen
wir bestimmt noch. Was steht denn
da drin? Inventory kann raus.
Host Checking, genau.
Du kannst ein In-Memory Inventory erstellen
und zu Runtime die IP als Variable
übergeben. Okay, aber wenn ich einfach so machen kann,
wäre ja noch einfacher.
Das probieren wir mal aus, ob das funktioniert.
Hcloud
Server
List. Ich führ's jetzt einfach mal
auf so einer Kiste aus.
So, also. Aber das mit dem Komma,
das ist schon eine der merkwürdigsten
Syntax für direkt, die ich bisher gesehen
hab. Okay. Wie hab ich denn? Base
jammel, ne? So, von der Idee her
sollte Ansible jetzt da hingehen
auf den Server
und
Update machen,
Basic Tools installieren.
By the way, Prometheus Exporter brauchen wir
da drauf nicht. Können wir gleich
gleich mal wieder löschen.
Basic
Tools installieren, die Firewall
aktivieren,
SSH erlauben und Firewall
aktivieren. Ob das jetzt funktioniert?
Scheint zu gehen.
Stack Overflow, Leute. Ich sag's immer
wieder. Man muss einfach nur wissen,
nach was man sucht.
Ups.
Jaja.
Man muss einfach nur wissen, nach was man sucht.
Guck, aktuell ist noch nix
installiert, aber sobald
das hier durch ist, sollte der frisch
geupgradet sein und
Tools installiert.
Was natürlich echt nice ist,
weil dann kann ich
den neuen Server
createn über die Cloud-AP.
Ich kann
Ansible installieren, äh, Ansible das Ding
konfigurieren lassen,
bis zu, bis zu
Worker-Anwendungen starten
und wenn das alles fertig
und das Connected ist zum Frontend,
dann lösche ich den alten Server.
Das größte Rätsel
ist immer, woher wissen die das auf Stack Overflow?
Ja, die wissen es wahrscheinlich
von Stack Exchange.
Aber warum ist es
ein Komma hinten dran? Das verstehe ich nicht.
Das ergibt überhaupt keinen Sinn,
aber Ansible-Logik
ist mir egal, Hauptsache es funktioniert.
Genau, und die von Stack
Exchange wissen es von Stack Overflow.
Und irgendwann
explodiert es wegen Endlosschleife.
Wobei, wobei, ich mache
eh nur noch if-Schleifen.
So, kann er das jetzt mal updaten?
Cloudflare-AP,
ich muss die Cloudflare-AP nicht umbiegen,
weil
das Frontend ja immer das
gleiche bleibt. Das sind die Dinger, die
Backend, die Sachen einliefern.
So,
er ist durchgelaufen, jetzt soll ich den T-Max haben.
Nice. Das ist ja
cool. Das funktioniert richtig gut.
Und es ist auch nur noch ein Server da,
oder? Jawoll, nur ein Server
da. Genauso wie es sein soll.
Guck mal, das ist ja richtig nice.
Ups.
Äh, Rebuild. Also
sprich,
der legt einen neuen Server an,
konfiguriert den über Ansible, das muss ich übrigens noch
einstellen. Äh,
Dollar-AP?
Ich mach da mal Klammern drum.
Weil der Bash weiß nie genau, bis wohin
sowas geht.
Der legt einen neuen Server an,
konfiguriert ihn und löscht dann den alten.
Das ist genau so rolling, wie ich das brauch.
Excellent, excellent. Das gefällt
mir richtig gut.
So, ähm,
jetzt ist natürlich die große Preisfrage.
Wie
kriegen wir mit Ansible das Ding so
konfiguriert, dass da
Street Merchant drauf läuft?
Kann Ansible Git-Repos klonen?
Weil ich glaube, die einfachste
Variante ist,
da gar nichts zu großartig
vercontainerisieren.
Ich mein, Street Merchant sieht erstmal so aus,
als läuft's als Docker, also das Ding.
Das ist ja das, was ich im Hintergrund benutze,
um Webseiten zu durchsuchen.
Ähm,
das läuft zwar recht easy im Docker,
aber ich glaube, die einfachste
Variante ist tatsächlich, das komplett ohne
Docker zu machen.
Ich installiere dann ein Node drauf,
klone das Repo,
und es ist gut.
Okay, wie klont man mit Ansible ein Repo?
Äh, Joho, das könnte
ich auch machen. Nee, könnte ich nicht machen.
Äh, das Ding hat
massig CPU-Last, das muss ich verteilen.
Ich werd das so machen,
die erste Kiste kriegt
keine Ahnung, sieben Sachen,
die zweite Kiste kriegt sieben Sachen,
und die dritte Kiste kriegt sieben Sachen.
Dann lohnt sich das nämlich
mit den drei CPU-Kernen auch.
Nur mit Proxy ist zu, zu
zu viel für eine Kiste.
Dann müsste ich weiter
meine 16 Core behalten,
plus, plus noch
ähm, drei
ein Core-Dinger, das ist irgendwie auch
nicht so schön.
Ich glaube, es ist besser, wenn man die jeweils da auf dem Backend
auf einem Desktop mal laufen lässt.
Okay, wie klont man
ein Repo mit Ansible?
Ah, Ansible.
So,
zeig ich mal her, wie geht denn das?
Git repo dest
Version.
Ey, Version braucht man net.
Einfach, einfach das Aktuellste.
Okay.
Ähm, ich mach das mal,
ich mach das mal im, im Visual Studio auf.
Hier, git
clone,
äh,
git clone street
merchant
nach, äh,
root, natürlich,
ihr lasst alles unter root laufen,
root street merchant.
So, und
da klonen wir nicht
das offizielle Repo,
sondern meins.
Mein, mein fork,
weil, da sind ein paar
fixes drin, dass es besser funktioniert
für mich.
Das da. Ja, da hab ich, da hab ich,
da hab ich gefixt, dass das die,
die Switch auf Amazon crawlt, die neusten
minefactory alternate urls
und dass das MQTT Zeug
funktioniert. So.
Ne, das kann man forken,
das ist erlaubt auf GitHub.
Da, sonst würde GitHub gar nicht
funktionieren. So, okay, und jetzt
klont er den Kram?
In das Repo.
Okay, also, das probieren wir jetzt mal aus.
Da bin ich jetzt mal gespannt. Also,
von der Idee her,
also von der Idee her, sollte er jetzt einen neuen Server
erstellen, komplett
das drauf machen, Repo klonen
und danach den alten Server löschen.
Okay.
Okay, neuer Server ist auf jeden Fall schon mal am erstellen.
Follow
Mills Stufe 1, Dankeschön für den Sub.
Oh, das ging ein bisschen schnell.
Pff, äh,
Wonka,
Wupp, Wupp, S.
Was hab ich verkehrt gemacht?
Ah, die Einrückung ist falsch.
Jammel, keck, weh, alter.
Sollte ich vielleicht in meinem Bash
Script oben nen ZE machen, dass der
immer abbricht, wenn er, wenn er
einen Fehler, ach komm. Unsere Sachen
sind so gut
self-documenting programmiert, da
gibt's keine Fehler.
Okay, also, jetzt legt er einen zweiten
Server an, und jetzt sollte er den eigentlich
erstmal provisionen,
ah, macht er.
Sehr gut.
Genau, warum löscht er? Alter,
wo ist das Problem?
No route to...
Fuck, ich bin zu schnell.
Ich bin zu schnell.
Ich muss warten.
Der Server ist noch nicht bereit,
während ich, wenn ich versuch, Enciple drauf auszuführen.
Äh,
entweder, Leute,
wir haben jetzt zwei, wir haben jetzt zwei Möglichkeiten.
Was sollen wir machen? Sollen wir einfach mal nen Sleep
in 10 Sekunden reinmachen, oder
sollen wir die Big Brain Variante
machen, mit irgendwie nem Ping,
oder nem
SSH-Login,
und ner Wildschleife drumherum?
Easy Variante oder Big Brain?
Big Brain Variante bin ich auch für.
Massive Brained.
Agile.
Ja, die agile Variante machen wir.
So Chat, ihr habt, ihr habt
die richtige Hands-On-Mentalität.
So macht man das. Wild, True.
Do.
Erst, erstmal schön
Endlosschleife fabrizieren.
Ähm.
So, dann machen wir noch nen Echo, mit nem Punkt,
dass ich sehe, ob er in der Endlosschleife hängt, oder nicht.
Genau.
Das dachte ich mir auch. Ich führe jetzt einfach
SSH so lange aus, bis es funktioniert. Also.
SSH minus O.
Strict.
Ach du Scheiße. Wie ging das?
Minus O.
Hier, alles klar.
Strict Hostkey Checking. No.
Weil das ist garantiert mehrfach
bewegt, jetzt schon, während ich das probiere.
Ähm.
Root at IP
Exit.
Einfach.
Wobei.
Ich glaube, man muss gar nichts angeben, oder?
Auf jeden Fall Exit. Exit schadet auf jeden Fall
auch nicht.
Ähm.
So, Fehlermeldung braucht kein Mensch.
Def 0.
So, und wenn das funktioniert,
dann machen wir Break.
Okay, das ist zwar nicht schön, aber
das müsste von der Idee her funktionieren.
Hast du eine Idee für
drei verschiedene Server-Configs?
Ja, entweder mache ich ein Ansible-Template,
oder ich mache einfach
Worker1-Conf, Worker2-Conf, Worker3-Conf
und schieb
dann je nachdem, was hier in der Schleife drin steht,
drüber. Ja, das habe ich
Ansible gesagt.
Dass er das ignoriert.
Okay, nochmal probieren.
Wartet er jetzt, bis der Server ready ist.
Oh?
Oh!
Ah, ich sollte da vielleicht noch einen Sleep.
Ich sollte da vielleicht noch einen Sleep reinmachen.
Sleep 1.
Aber das funktioniert schon mal.
Nice.
Wait until finished.
Ähm.
Das funktioniert, glaube ich, nicht.
Das ist nur, bis der Server bei denen erstellt ist.
Nicht, bis er direkt verfügbar ist.
Aber von der Idee her klappt das schon mal.
Ich meine, ich könnte hier drin auch gleich
das Ansible-Playbook ausführen, ne?
Wobei, ich mache es mal so.
Beim SSH weiß ich auf jeden Fall, dass es dann tut.
Was Sleep 0,5 meintest, ist besser.
Äh, 1 reicht.
Wieso funktioniert die
Synchronisierung zwischen Windows-Mail und Gmail
manchmal nicht? Weil Windows-Mail suckt.
Im Zweifelsfall liegt das an Windows-Mail.
Thunderbird besser,
auf jeden Fall.
Thunderbird, IMAP, alles gut.
Die Bash-Syntax, ja.
Das ist
kekleo klein geschrieben und ein anderes Emote
als kekleo groß geschrieben.
Dann brauche ich das auch,
weil das ist eines meiner neuesten
Lieblings-Lach-Lull-Emotes
auf Twitch.
Haben leider nicht so viele.
Outlook, naja.
Will ich eigentlich keinem empfehlen.
Outlook.
Nehmen wir lieber Thunderbird mit IMAP.
Outlook ist eher sowas, wenn man
irgendwelches Business-Gedöns noch sünken will.
Oh, guck mal da, Leute.
Da ist Funk. Oh, oh, oh.
Was habe ich falsch gemacht?
Was? Hä?
What?
Da ist kein Syntax-Fehler. Shell?
LDID?
Was?
Muss der Sleep nicht
vorn break?
Nö.
Wenn der breakt, ist vorbei.
Wenn der nicht breakt, dann sleept er einmal.
Moin, Chainlord.
Okay, ich habe keine Ahnung, warum das
jetzt da LD...
Was der hier
rumspackt.
Ich kann das irgendwie Bash-mäßig so machen
oder so.
Quoten.
Aber es hat wahrscheinlich funktioniert.
Guck mal, es hat funktioniert.
Deleting old Server.
Jawoll, hat funktioniert.
Der hat den neuen Server aufgebaut.
Können wir jetzt gleich ausprobieren, ob alles funktioniert hat.
Moment, no strict hostkey checking.
Können wir ausprobieren, ob alles funktioniert hat.
Zack, auf den neuen Server drauf.
T-Max ist drauf, jawoll.
Und hier ist der Street Merchant drauf.
Sehr schön. Nice.
Und es ist auch mein Street Merchant,
weil man sieht, der Wubblerus hat committet.
Oh.
Chat.
Ihr seid wieder richtig big brain heute.
Das hätte ich gar nicht gesehen.
Mail leaked.
Ne, die Mail ist nicht leaked.
Die ist schon bekannt.
Das ist die Mail, wo man auch
äh, donatet mit Paypal drauf.
Die habe ich extra für den Stream gemacht.
Also, aber man kann nicht mehr
donaten mit Paypal.
Und die steht eh public im Git.
Also das ist nix, äh,
nix geleaktes.
So. Okay, das funktioniert.
Ja, ich bin begeistert.
So, wir müssen jetzt doch jetzt eigentlich nur noch unser Ansible-Skript
insofern anpassen,
dass der...
Oh fuck, Leute.
Wir brauchen ein Node.js drauf, dass ich das laufen lassen kann.
Das habe ich jetzt ganz
vergessen.
Wir brauchen ein 14er Node.js.
Dann vielleicht doch lieber im Container.
Wobei, Node 14 kann ja nicht so
kompliziert zu installieren sein.
Klar, ja, man kann donaten, aber
ich habe den Link nicht mehr drin. Es gibt keinerlei
Notifications oder sonst irgendwas.
Und ich habe das auch nicht mal
verlinkt mit Donation.
Im, ähm, hier irgendwie
im Profil, ne, weil der
Donation-Link nicht klappt.
Und die Notifications nicht klappen. Also sprich, ich bekomme
es schlicht ergreifend nicht mit, wenn einer
donatet. Okay, jetzt habe ich echt
jetzt, okay, jetzt muss ich erstmal gucken, wie man
Ubuntu Node 14.
Wie installiert man Node 14?
Install Node 14. Also in den
Repos ist es, glaube ich, nicht drin.
Uptinfo Node.js
Ne, da ist 10.19 drin.
Und das ist zu
alt für den Crawler.
Haben die offizielle Debian
Ah, excellent, excellent.
Focal?
Moment, was
habe ich für ein Ubuntu?
Ne, äh,
was ist denn issue.net?
Was ist ein
Ubuntu 2004 für ein Codename?
Ah, das ist das!
Okay, passt, dann können wir das eigentlich direkt
direkt nehmen.
lsb-release-a, nice.
Wisst ihr, der Chat kennt sich aus.
Ah, oh, das ist gut zu
wissen. Also sprich, eigentlich
können wir dann das direkt eintragen lassen.
Okay, also
ansible
add-apt-repo
Machen wir das doch.
add-apt-repo
Jawoll.
Also.
perform-perform-before-dem-clone machen wir das.
add-node-14-repo
add-node-14-repo
So, und was hatten wir da?
So, und ist das Source? Braucht kein Mensch.
Das da brauchen wir.
Sehr schön, wir machen jetzt mal ein bisschen größer das Fenster.
Ja, nice, sehr gut, sehr gut.
Also sprich, jetzt sollte
das Repo hinzufügen und jetzt muss ich Node noch
installieren.
Also, ne, ne, ne.
Install
Node 14
Update Cache
Yes, sollte man vielleicht hinten dran
machen, dass es dann auch funktioniert. Upgrade brauchen wir
nicht. Wow, wow, wow, ist ja gut.
So,
und da wollen wir jetzt einfach nur Node.js
installieren.
So, jetzt bin ich ja mal gespannt, ob das funktioniert.
Ich führ das jetzt nochmal aus.
Und schauen wir mal, ob
der das jetzt auf dem
Hcloud Server
List, ob der das jetzt auf dem Server ausführt.
Ansible
Ich mein, die
Base Sachen hat er schon gemacht. Mal gucken,
ob der jetzt Node.js drauf installiert.
Ja, ich mag Manjaro am liebsten.
So, das hat er alles
schon gemacht, deswegen geht das jetzt schnell.
Okay, schauen wir mal, ob das jetzt
funzt mit Node.
Ah ne, das gibt's ja nicht mehr. Alter, Twitch!
Ihr könnt doch nicht laufen, die ganzen Emotes
entfernen, wo man sich schon so dran gewöhnt
hat. Kein PogChamp,
kein Blast RNG. Mir ist es ehrlich
gesagt persönlich vollkommen egal, was
es mit den Leuten auf sich hat. Ich mag das
Emote. Das ist der aktuelle
PogChamp, okay.
Den mag ich, das gefällt dem
Sibaro bestimmt, der aktuelle PogChamp.
Keine Blind Speedruns mehr.
Stimmt, hab ich gar nicht dran gedacht.
Ja, das, okay, das
kann ich auch...
Mich würde
echt mal interessieren, ob jemand, der blind
ist, da wirklich
offended war. Oh, fuck.
Dass es Blind Speedruns
gibt. Keck, wait.
Oh ne, jetzt muss ich noch Keys importieren.
Okay, wir machen das anders, Leute. Wir machen das anders.
Wir machen das anders. Ich hab's
mir anders überlegt.
Wir curlen einfach einen Command in
ähm... Das war Shell, ne?
Ansible Shell.
Dann weiß ich aber nicht, wie es weitergeht.
Ansible Shell.
Ansible
kann den Key adden. Ja, ich weiß,
aber den Key nicht.
Und falls er sich ändert... Ich... Wir curlen das
jetzt einfach rein und gut ist.
Ähm... Einfach so hinten
ausführen. Okay, das ist easy.
Shell und dann einfach
das hier so hinten dran, oder wie?
Okay, probier mal aus, ob's funktioniert.
Okay, mal schauen. Schauen, ob das jetzt
klappt.
Es wird gecurlt. Gecurlt.
Danach wird Node.js installiert. Okay, also wenn
das klappt, dann wird das auf... Oh, oh.
Was? Ansible.
Nerv nicht rum. Mach einfach.
Was soll ich machen?
Warn...
Warn false.
Warn...
Ah.
Okay, manchmal ist die Beschreibung nicht so... Nicht so geil.
Viel besser.
So, und jetzt? Und jetzt? Hab ich jetzt?
Hab ich jetzt ne Node drauf? Ich hab ne Node...
Paukas, ich hab ne Node drauf. Nice.
Sehr gut.
So, und jetzt geht nämlich auch
der Street Merchant, würd ich sagen.
Können wir jetzt ausprobieren.
Äh, npm install
muss man, glaub ich, einmal machen.
Und dann npm
run start, wenn ich's so richtig im Kopf
hab. Okay, den npm install
kann ich da gleich hinterher...
hinterher schicken, nochmal.
Mit nem
shell arg. Es gab da noch
changedir. Changedir
gab's da auch noch. Changedir.
Oh, das ist nice. Also, changedir
zu, äh,
root...
äh, street...
Ich kann das richtig schreiben. Ich copy-paste das lieber,
bevor ich mich da verschreibe.
Monka-Corona, äh,
wupp c, Leute, wir haben ein extra Emote
dafür jetzt. Falls es euch noch nicht aufgefallen ist
vom Chainlore, wupp c.
Okay, das hat funktioniert.
Äh, also, was soll das?
npm install, muss man machen.
Ich führ's nochmal aus, ob's jetzt funktioniert.
Haben Hausnamen eigentlich
eine Längenbeschränkung? Ja, mit Sicherheit.
Ich weiß aber nicht, was.
Es ist wahrscheinlich entweder
32, 64
oder 128 oder sowas.
Die stehen ja auf
gerade Zahlen.
Cool.
Ja, das passt doch. Das ist doch mal mega nice.
Oh, ich hab noch was vergessen,
Leute. Das Wichtigste,
dass das Ganze noch kommunizieren kann. Ich muss noch,
ich muss noch nen private network adden.
Dass die, dass der eine Server überhaupt
zum anderen hinkommt.
Äh, local, 122,
680.0 slash 24.
So der Klassiker.
Ähm.
Und jetzt, ups.
Und jetzt muss ich noch gucken, wie man den Server
attached beim erstellen.
Create. Help.
Help.
Ähm. Seht ihr irgendwas
von network?
Hier, network.
Ich vermute mal, dass ich dort sagen kann,
das mach ich, das testen wir jetzt einfach
direkt hier drin.
Dass ich da noch sowas sagen kann, wie, äh,
minus minus network gleich,
oh.
Äh, minus minus network
gleich
local, hab ich's
genannt. Ja, genau.
Jetzt passt das nämlich auch.
Dass das, der Server, also, wie gesagt,
ich hab's ja, ich hab's ja vorhin, ähm,
aufgemalt im Wim.
Das ist ja so, äh,
das Frontend und die drei Worker-Server,
die hängen zusammen im privaten Netz und das muss ich
natürlich dranhängen.
Attached to network node 1 net...
Warum muss ich attached to network node...
Achso, das ist,
wenn ich's nachträglich machen will. Ne, ich kann
es ja beim erstellen angeben. Dann ist's
doch eigentlich besser. Der Chat ist heut, ähm,
richtig massive
brain wieder, ja. So.
Und nun, von der Idee her,
passt das doch alles so, oder?
Oder hab ich jetzt irgendwas vergessen?
Der sollte jetzt wirklich...
Äh, by the way, hat einer
Ahnung, was passiert, wenn ich
mit ansible was blockendes starte?
Kann ansible was im
background starten? Na gut,
ich kann einfach das shell-command so angeben, dass er was
im background startet.
Ich muss ja noch npm start machen.
Okay, gucken wir mal.
npm install, npm
run start.
Der sollte jetzt einfach nur starten mit default-config,
dass ich weiß, dass es funktioniert.
Der Name vom letzten ansible-Punkt
ist noch falsch. Echt?
Ach, hier. Äh,
Moment.
Wow,
fuck, geht nicht. Failed.
Oh, fuck.
Oh, da fehlen libraries.
Da fehlen libraries.
Ähm, das Print-Planning
haben wir am Anfang gemacht. Wir haben auch alle
im Kreis für nen Scrum gestanden und haben unser
Kanban-Board hergeschoben.
Wiki.
Street Merchant.
Die hatten nämlich die Dependencies drinstehen
im Wiki, das weiß ich noch. Das hat mich das letzte
Mal auch verwirrt. Das haben wir nämlich
schon mal gesehen.
Xerox Hino 17 Monate.
Massive Subs hier.
Poggers. Das ist ja richtig
so, äh,
Debian-based.
Oh, sorry, sorry, Leute.
Debian-based. Wir sind ja die coolen
Leute, was die Aussprache angeht.
So, und das sind die Dependencies, die ich
brauch. Fuck, da muss ich nochmal nen riesen
install. Dann testen wir doch gleich mal, ob das
install hier drüber funktioniert.
Also, install
install
install, das machen wir gleich da
oben.
install
dependencies
und jetzt brauch ich was?
Alles. Okay, da muss
ich mal mein Terminal groß, äh, mein
Editor groß. Wow, what the
fuck. Ach du große Kacke.
Was, der installiert ja da das halbe Internet.
Das ist ja, na gut. Es ist,
es ist ne Node.js Anwendung, da ist das eigentlich
normal. Da ist das quasi Best Practice,
dass man das halbe Internet mit installiert.
Erstmal das halbe Internet als
Dependencies und dann nochmal das halbe Internet
als, äh, NPM
Packages. LibGTK,
Alter, was will der denn?
Das braucht der für n Chrome. Das braucht der,
das braucht der 100 pro für n Chrome.
Das ganze Zeug hier, das, das braucht
der bestimmt nicht für sein Node, das braucht der, das
braucht der für n Chrome, dass der läuft.
Siehste, wenn wir jetzt den Wim
hätten wir das viel stylischer machen können mit den,
mit den Kommas.
Okay, ich hätte ja auch n Search
Replace machen können, aber
Wget, das ist doch bestimmt schon
truff. Okay, dann schauen wir mal, ob das
jetzt funktioniert. Der sollte die Dependencies
installieren.
Der macht n NPM Install
hier hinten dran. Okay,
ich führ das jetzt nochmal aus
und dann schauen wir mal, ob das Ding startet
an sich. Was, Control
plus rechts.
Ah, cool.
Weiß, das wusste ich noch gar nicht.
Also hätte ich quasi sowas machen können.
Ne, hätte ich net machen können, ha.
Das ist für Chrome, ja.
Das ist halt der Vorteil, wenn es im Container laufen
lässt. Aber bevor ich da jetzt noch Docker-Config
mitmachen muss, da ist es glaube ich immer noch
einfacher, so direkt laufen zu lassen.
Okay, so. Jetzt schauen wir mal,
ob das wenigstens starten würde.
Start.
Eine Runde Pause Champion Chat.
Ha, Funst. Äh.
Ah, das sind, das sind Browser Settings.
Das kenn ich.
Das, doch, es funktioniert.
Da hab ich, das musste ich in meiner Config
machen. Äh.
Genau. Das musste man machen,
dann geht's.
Das muss ich aber nicht im Ansible machen.
Weil ich hab ja schon eine fertige Config
für dieses Ding. Kellerkind,
drei Monat, danke schön für den Sub.
Nice, es funktioniert, Leute. Sehr gut.
Sehr gut. Excellent.
So, Ansible.
Execute, Command
irgendwie Async oder Background
oder sowas. Background.
Geht das?
Ah, cool, dass er das gleich dabei schreibt.
Genau das hätte ich jetzt, genau das in der
Richtung hätte ich jetzt gesucht.
Start Simple. Ja, cool.
Ähm. Ja, nice.
Dann lassen wir es doch mal abschließend laufen.
Dann lassen
wir es doch mal laufen, die Sache.
Okay, also ich lass jetzt mal abschließend
das Skript laufen. Wir gucken mal, ob es funktioniert.
Damit ich jetzt sehe, dass es auch wirklich
funktioniert, muss ich erst einmal noch zwei
Fake Server erstellen, dass er die danach
wieder löschen kann. Die heißen noch
falsch, aber das, äh,
können wir gleich fixen.
Wobei, ist doch egal, ob ich die richtig auswähle oder nicht.
Wieso kein SystemD?
Äh, pff, ja.
Wir können auch ein Unit-File anlegen, hast du
eigentlich recht. So.
Äh.
Worker 2?
Und
Worker
3.
So, und jetzt sollte unser Skript, also
von der Idee her, was das Skript jetzt machen sollte,
wenn das alles richtig funktioniert.
List.
Der sollte jeweils drei neue Server
erstellen, die mit
Ansible richtig konfigurieren
und danach
die alten Server wieder löschen.
Deine Meinung zu Blackberry? Habe ich
null verfolgt, was da gerade, äh,
börsenmäßig abgeht. Ich weiß nur, dass
irgendwas abgeht.
Okay, Pausechamp, mal gucken, ob das funktioniert.
Rebuild.
Creating Server in Location 1. Gucken wir ihm mal zu.
Macht er auch, macht er auch.
Neuer Worker 1 wird erstellt.
Don't cry so much. Danke für den, für den
Sub, falls ich ihn nicht schon gesehen hab.
Oh.
IQ++ auf jeden Fall wieder.
Oh, guck mal, wie nice unser
Timeout auf Server warten funktioniert.
Das ist ja richtig cool.
Achso, die Smartphones
an sich, äh,
ja.
Kein Schimmer.
Wusste gar nicht, dass es Leute gibt, die noch Blackberry-Smartphones
haben.
Oh. What?
Kein...
Ah, Moment, ich hab das noch auskommentiert.
Leute, ich kack noob.
Ich hab das Wichtigste noch auskommentiert, lull.
Ah.
Ich hab das Update auskommentiert.
Not like this.
Aber zumindest das Server-Rotaten sollte funktionieren.
Guck, den ersten hat er
gelöscht. Jetzt macht er den
zweiten, jetzt macht er den dritten.
Failed nochmal. Wobei, ne, jetzt failed
er nicht. Beim dritten failed er nicht.
Ich kommentier's nochmal schnell aus. Ich will, dass er failed.
Schneller. Warum
Telnet? Weil Telnet gut ist, um offene Ports zu checken.
Und wenn's ne HTTP ist,
kann man auch schnell nen Get machen und sieht, ob das
richtig ist. Okay, es ist
gefailt. Jetzt machen wir das Ganze nochmal.
Aber prinzipiell hat's
funktioniert, sieht man. Wir haben alle Server
Rolling geupgradet.
Äh, was? Es gab ihn neu erstellt.
Nice. Okay, Rebuild.
Nochmal. Jetzt sollte's
aber funktionieren.
Ich seh schon, wir werden heute nicht ganz fertig, glaub ich.
Wie oft willst du das Rolling dann
machen? Ich rotate auch durch
die Locations, ja.
Naja.
Ehrlich gesagt hoffe ich, dass ich das
vielleicht,
keine Ahnung, einmal die Woche oder so machen muss.
Oder gar nicht. Je nachdem.
Ich hab ja, ich hab ja alles
runtergestellt. Ich sollte jetzt eigentlich nicht mehr
geblockt werden. Ich will den ja auch irgendwie keine,
keine irgendwie nicht großartig Load verursachen
oder sowas. Aber falls ich
ne neue IP brauche, dann kann ich
einfach die Config für den Street Merchant
anpassen. Dann stell ich
einfach das, das noch ein bisschen weiter runter,
dass das nicht unter die Limits
fällt. Und dann mach ich Rebuild
und äh, ich hab gleich ne neue IP und ich seh
auch gleich, ob's funktioniert.
Wie werden denn die Shops auf die Worker
aufgeteilt? Naja, es gibt jetzt, so wie ich das
seh, zwei Möglichkeiten. Entweder
ich mach ne Config-Datei
für jeden der drei Nodes
und kopier die dahin. Und
ähm, oder ich mach ein
Template. Heute schon
GameStop gepreist, Champ. Ne,
was macht denn, was macht denn der GameStop-Kurs?
Der Pause champt.
Oh, der Paint, Paint
champt. Ich find's ja witzig,
wie sehr sich da jetzt die ganzen, äh,
Stonks-Leute drüber aufregen,
so nach dem Motto, es wäre ein
Banden, was hat jemand letztens erzählt?
Ein Bandenmäßiger,
eine Bandenmäßige
Marktmanipulation wär das jetzt gewesen, ja?
Aber wenn sich irgendwelche
Big-Brain-Stonks-Typen im Puff treffen
und Sachen absprechen, dann ist es das natürlich
nicht klar, oder?
Logisch.
Wer hätte das nicht denken können?
Vor allem bandenmäßig.
Nur weil irgend so ein Dude mal was auf Reddit gelesen hat
und das nachmacht.
Aber guck mal, jetzt scheint's zu funktionieren.
Der hat sein Upgrade gemacht.
Okay, wir sehen auch gleich, wie lang's dauert.
Wir sehen auch gleich, wie lang's dauert.
Also ich hoffe, dass der so in 5
Minuten durch ist mit dem ganzen Kram.
Genau, Stripes, so sieht's aus.
Die suchen nach
aktuellen Grafikkartenpreisen, CPU-Preisen.
Aber wie gesagt, ich hab's
so niedrig gestellt, dass
wenn ich daheim die Seite bei Amazon mal ab und zu
refreshe, dass fast mehr ist, wie da.
Deswegen, ich wurde jetzt ja
auch schon in den letzten Tagen, seitdem ich die Limits
ein bisschen runtergepasst hab, nirgendwo mehr gebannt.
Äh, ist...
Ich bin nicht von Docker weg für den Preis-Champ.
Also aktuell läuft das, läuft
der Preis-Champ selber noch im Docker-Container.
Ähm, ich muss es aber halt
aufteilen auf mehrere Backend-Server.
Das ist billiger und funktioniert besser.
Und ich hab's jetzt ohne Docker
laufen, weil ich den Eindruck hab, das funktioniert in dem
Fall hier jetzt deutlich einfacher.
Ne Node installieren, das
Repo klonen und starten und fertig ist.
Mächtig viel Aufwand, nur zum Spaß.
Naja, wieso? Du kannst's auch benutzen. Guck mal.
Preis-Champ.org
Kannst du dir angucken und
Notifications schicken lassen, wenn's neue Grafikkarten
gibt. Aber ich verdien damit nix,
ne? Muss ich doch mal sagen. Das einzige,
wo ich da was verdiene, ist, wenn zufällig mal einer
was über den Amazon-Link verkauft.
Und die 70 Euro Serverkosten
wobei, damit reduziere ich ja auch
die Serverkosten, die krieg ich im Leben dann wieder rein.
Die RTX-Preise werden
sinken, aber das wird wahrscheinlich schon bis zum Sommer dauern,
denk ich. Ey, und ich mein,
man erkennt allein schon daran,
dass das ein mega professionelles
Software-Projekt ist, ja.
Das hat ein Changelog.
Und alles, was ein Changelog hat, muss
richtig massive
Hackerman sein.
Wolltest du nicht auch noch AdSense reinmachen?
Ja, ich hab mir jetzt überlegt, aber
das ist erstmal, und guck mal, was das kostet.
Das ist die 3
WM. Also, wenn das sich in Grenzen
hält, und wenn ich das jetzt umziehe, von
dem 16-Core auf die Einzelnen,
dann kostet's nur noch die Hälfte,
und
dann kann ich das eigentlich auch erstmal so bezahlen.
Da brauch ich kein AdSense, weil mir persönlich gehen auch Werbung,
Seiten mit Werbung auf den Sack.
Aber wenn das
doch zu viel kostet, dann mach ich
vielleicht AdSense rein, keine Ahnung.
Das ist aber nicht mal so, dass ich... Wobei, mal ganz
ehrlich, ich hatte jetzt
glaub, 25.000
Views
auf der Seite die letzten
zwei Tage, also so wenig ist das gar nicht.
Mehr als,
jetzt witzigerweise, mehr als
ähm,
95% der Domains
von meinem Arbeitgeber zusammen, ey.
Hat der Preisschamp im Monat.
Wir haben da teilweise
Domains, ey.
Das gucken sich zwei Leute im Jahr
gefühlt an. Nee,
Chillfreak, das kann nicht passieren,
weil die Locations unterschiedlich sind.
Und unterschiedliche Locations haben unterschiedliche
IPs. Wir haben 8000
Domains, Leute. Ungefähr.
Da, wo ich arbeite.
8000 Domains, Alter.
Und da sind Domains dabei.
Da greifst du dir echt an den Kopf, wer
sich das registriert hat,
ja.
Ich sag euch mal ein Beispiel, aber
ich denk, also, ich denk mir ein Beispiel
aus. Bringt euch nix, wenn ihr danach sucht,
die ähnlich sind zu diesem, zu diesem
ähm... Wir haben
Domains so in dieser Richtung,
ähm...
Was kann ich da jetzt mal als Beispiel bringen?
Äh...
Erspare dir dein Traumhaus.de
oder sowas in der Richtung.
Das hab ich mir jetzt ausgedacht, aber so Domains
in dieser Richtung haben wir.
Erspare dir dein tolles Traumhaus.de
und sowas. Pff, Alter, wer sich die Dinger
registriert hat. Die wollen übrigens
jetzt sogar ne eigene Top-Level-Domain haben.
Also stellt euch vor, es wär
die Commerzbank oder so.
Gibt's... Ja, ist es nicht, aber
die wollen dann
Top-Level-Domain.Commerzbank
wollen die sich jetzt holen.
Ist das nicht ultra teuer? Who cares?
Die Leute haben Geld. Ja, die wollen
ne TLD haben.
Die kriegen die auch, die haben genug Geld.
Die Typen, die registrieren
alles, was nicht bei drei auf den Bäumen ist,
wenn man genug Geld hat.
Leute, ich würd sagen, es funktioniert alles.
Ich bin begeistert.
Wie teuer ist das circa? Ich hab ehrlich gesagt keine Ahnung.
Aber ist das nicht nice?
Guck mal, der macht jetzt den Rolling Server
Rebuild.
Inklusive Setup von dem System.
Das einzige, was ich jetzt noch machen muss,
ist gucken, wie ich...
Das müssen wir aber morgen machen, das wird heute zu eng.
Wie ich die richtige
Config für den jeweiligen Node drauf bekomme.
Und dass ich das Ganze im Hintergrund
starte.
So, und starten mach ich entweder mit nem Unit-File
oder NoHub starten, gut ist.
Das gefällt mir echt gut.
Guck, jetzt ist er grad beim
Builden. Einer ist noch da, der hat
Worker 1, Worker 2 hat er fertig.
3 ist er grad dabei.
Und die existieren kurzer Zeit mal parallel.
Aber das sind nur ein paar Minuten.
Was heißt, ich bezahl da
keine Ahnung, 5 Cent extra.
Das macht nix. Und dafür ist
die Downtime gering.
Ich krieg auf jeden Fall ne neue IP.
Die Downtime ist gering.
Also genau das,
was man haben will.
Dritten Punkt hab ich vergessen.
Hab ich am Anfang gesagt, hab ich auch wieder verdrängt.
Neue IP, geringe
Downtime und
ich weiß nicht, irgendwas war noch.
Warum ich das machen wollte.
Gut, CPU Last verteilen, klar.
Das Ding braucht, bis sie CPU last.
Mal gucken, wie lang das Skript
jetzt braucht dafür.
Was passiert, wenn du bei Headstanders Traffic
Limit exceedest und wird
automatisch nachgekauft?
Keine Ahnung, hab ich noch nie geschafft.
Zumal die 20 TB
sind ja auch nur
outgoing sind.
Ohja, also
glaub auch nicht, dass ich das hinkrieg.
Nice Leute, alle Server da, Poggers.
Ich will mal sagen, das ist richtig
Cloud Native Hyper Poggers.
Also Traffic
pack ich im Leben nicht.
Leute, das finde ich echt cool,
dass das so gut geht. Sehr nice.
Sehr nice. So und jetzt gehen wir mal
List, gucken wir mal, Server.
Root Add
haben wir hier den da.
Haben wir keine
Worker 3.
Tmax drauf.
Street Merchant drauf.
Und NPM
Run Start.
Also geht auch, bloß der Browser geht nicht,
weil die Config Datei noch nicht drauf ist.
Martin, 13 Monate.
Hyper Subscription hier.
Danke für die 18 Monate Subscription.
Funst, perfekt.
Das ist mal Agile.
Auf Knopfdruck
komplette Infrastruktur
neu gebaut, so muss das sein.
Exquisite.
So und da ich nicht arm werde, lösche ich
die Server jetzt wieder.
Server Delete.
Kann man da mehrere Sachen hintereinander machen?
Ne, vielleicht mit Komma?
Ne, okay.
So, Servers.
Okay, da muss man die 1
löschen. Jetzt Server Delete.
Bam.
Bam.
Bam.
Leute, es ist jetzt 22 Uhr, ich muss jetzt gleich ins Bett.
Aber ich würde sagen, wir machen das
morgen fertig.
Weil mein Ziel ist, dass ich
ich möchte die Worker
Rebuilden können, auf einen Schlag.
Wenn es mal notwendig ist.
Und neben dem mit Terraform
funktioniert das nicht so gut.
Ich habe es mir auch überlegt, ob ich es mit Terraform machen sollte.
Aber gerade dieses Rolling
Upgrade und so.
Ich glaube, das ist nichts, was man gut mit Terraform
Skripten, das kannst du ja gar nichts
großartig Skripten, also nichts die Logik
gut einbauen kann.
So, und deswegen, also mein Ziel
ist, dass ich den, dass ich das
Price Jam Frontend und
die Worker Server mit
Knopfdruck quasi hinstellen kann.
Die Worker Server
gehen ja schon.
Und,
dass ich dann nur noch quasi einmal auf
Deployen drücken muss so. Und was wir uns
vielleicht sonst noch überlegen könnten ist,
dass die
dass
die Worker Server
das
Github Repo regelmäßig pullen.
Da mache ich doch, da mache ich doch ein
Docker Compose File,
weil dann kann ich regelmäßig checken, ob es
Updates vom Repo gibt
und die
Worker restarten lassen.
Übrigens,
nicer RGB Keks, ne?
Wie würdest du empfehlen, die
Dot Files in ein Git Repo zu
bekommen? Alles über
Sim Links und dann Soft oder Hard Links?
Ne, ich würde dir empfehlen, du
nimmst, ähm,
das
was ich auch nehme dafür, äh,
fuck, wie heißt's?
Yadim.
Yadim nimmst du. Yadim.
Das da.
Das da. Github
Yadim.
Das macht das für dich.
Das ist quasi ein Git Repo, der
für dich Sim linkt.
Die Lösung ist einfach POC.
Ja, ich hoffe, dass die auch wirklich POC funktioniert,
ja.
Jetzt, also von der Idee
kann ich das jetzt einfach so machen.
Ich, äh,
so, also sollte ich Probleme haben
mit den Worker Servern,
dann mache ich einfach, nicht App,
dann mache ich einfach hier nen, äh,
Rebuild, dann ist es wieder
da. Und das Frontend aufbauen
werde ich folgendermaßen machen, da mache ich noch ein zusätzliches
Ansible Script, das, äh, ich, by the way,
ich sollte das nicht Base nennen, ich nenn das, äh,
Worker YAML.
Rebuild Ansible
Worker YAML.
Genau. Ähm, dann mache ich noch
ein Frontend YAML, Ansible.
Und das mache ich auch so, dass das
alles komplett installiert, das haben wir ja letztens im Stream
schon gemacht.
Und dann muss ich einfach
nur noch
die Anwendung drauf pushen und gut ist.
Ich habe mir auch überlegt, dass ich den
Breitstab, aktuell mache ich das ja alles mit,
äh, ich habe nen Docker Compose File
und ich push das Repo
und ich habe nen Github,
der quasi das Compose File
jedes Mal neu startet.
Funktioniert ganz gut,
aber in dem Fall, also
in meinem Anwendungsfall ist es, glaube ich, komplett
ohne Container wirklich am
einfachsten.
Ich mache, ich, ich mache das Frontend per
Ansible, fertig.
Da kommt ein Webserver drauf
und ich werde einfach die Vue.js
Anwendung lokal bilden,
per SCP in das Webroot
Verzeichnis vom Webserver schieben
und auch das DotNet
Programm lokal bilden und
per SCP auf den Server schieben und dann
einfach starten. Das ist, glaube ich,
sogar einfacher als irgendwelche
Container Action zu machen in dem Fall.
Da brauche ich keine
Private Container Registry für oder
irgendwie großartige
Magic.
Einfach lokal committen
und
nen Deploy Script starten, was
zwei Dinger baut
und SCPt.
Das ist in dem Fall, glaube ich,
die mit Abstand einfachste Variante.
Und dann hinterher nen System
ZCL Restart schicken für die jeweiligen Services.
Man muss es nicht immer
vercontainerisieren. Wie gesagt, aktuell
habe ich es vercontainerisiert
und ich glaube, dass das in diesem
simplen Anwendungsfall ganz ohne Container
tatsächlich
die einfachste Variante ist.
Dann kann der Webserver auch direkt
das ganze HTML ausliefern
und Reverse-Proxien zu der .NET Anwendung.
Ich glaube, das funktioniert am besten.
Werden wir dann sehen.
Aktuell läuft der
Preisschamp auf Container Action.
Da ist er.
Oh.
Ich habe schon gedacht, er wäre kaputt, Leute.
Ich habe schon gedacht, er wäre kaputt.
Aber ist er nicht.
Er ist am Start.
Exzellent.
Oh.
5.800 haben wir aber gerade ganz schön viele.
Guckt mal hier.
Fast.
Leute, guckt mal hier.
Fast UVP-Preis.
Aber das ist
der 5.800 schon immer.
War der 5.800er
nicht die CPU, die eigentlich irgendwie
voll sinnlos war?
Weil sich alle einen 5.900er
kaufen? Oder den kleinen?
Zeigt so hohe Preise an?
Nein.
Mein Factory. 448.
448.
Zeigt überhaupt nicht zu hohe Preise an.
Ist vollkommen richtig, was da drin steht.
Alternate.
479.
Passt doch.
Ist genau das, was da steht.
Ist nicht unter UVP.
UVP ist 449.
Oder die haben es angepasst. Kann auch sein.
Ja, ist übelst teuer.
Ja gut. Das liegt daran.
Mein Factory ist tatsächlich unter UVP.
Der Durchschnittspreis über alle Shops.
Weil es ja auch eine
History ist, wo du gucken kannst.
Wie teuer war es denn so im Durchschnitt?
Na, dann passt das natürlich so jetzt nicht.
Wenn du jetzt auf den einen Tag, auf den einen Shop
aktuell guckst. Dafür gibt es das hier unten ja.
Aber vielleicht bewegen
wir uns wieder in halbwegs gescheite Preisregionen.
Ja.
PP Hands.
So, alles klar Leute. Wir sehen uns. Ich gehe ins Bett.
Bis morgen. Macht's gut. See you.
