MonkaS?
MonkaS?
Moin Leute.
Hat jemand ein MonkaGiga-Bild?
Transparent und ein bisschen größer?
Das ist nicht genug.
Das reicht nicht mehr.
MonkaS ist nicht mehr genug.
MonkaX.
Das brauch ich.
Aber auch schon im Discord.
Hermes ist so mega lull.
I am rude.
Twitch Prime.
Dankeschön.
Nice.
Ach ja, Moment.
Ich habe ja extra einen Sound dafür gemacht.
Cute Chatte.
Prime.
Samus Climber.
Dankeschön für den Sub.
Wenn das so weitergeht, kannst du bald von Twitch leben.
Wenn ich mir überlege,
dafür bräuchte ich wahrscheinlich
mindestens 1000 Subs hier.
Plus ein bisschen YouTube-Zeug.
Ein Patreon-Account.
Alles bräuchte ich dann,
dass ich davon halbwegs leben kann.
Und dass ich das machen könnte.
Das wird in nächster Zeit nix.
Und außerdem habe ich das auch nicht vor.
Den Spaß hätte ich ja vor ein paar Jahren schon machen können.
Da hatte ich keinen Bock drauf.
Was ist MaxFPSWeep eigentlich für eine Timeline?
Du meinst im Discord?
Ja, das weiß ich auch nicht.
Das will ich gar nicht so genau wissen, was da abgeht.
Will ich gar nicht so genau wissen.
Ich hoffe, unser Discord-Invite-Link
ist mittlerweile nicht so gut.
Ich bin nicht mehr auf dem Weeb-Channel, ey.
Ey, das ist die Eingangshalle, zum Glück.
Das wird nämlich die Leute echt verstören.
Und Casino-Content, ja.
Du musst das machen wie I Love Cookies.
Der ist jetzt krasser Poker-Pro,
habe ich irgendwo gehört.
Was hältst du von Reverse-Engineering?
Hast du dich schon mal damit beschäftigt?
Ein bisschen Reverse-Engineering
werden wir heute wahrscheinlich die Hermos versandt, Arpi.
Wobei das
Ingenieren da recht überschaubar ausfällt.
Aber erstmal basteln wir
noch einen Tracker für die
DPD-Api.
Also richtig, für alle mit Big Brain
heute.
Achso, ich muss mein Chat-Tool noch starten,
fällt mir gerade auf. Sonst übersehe ich
wieder alle Fragen.
Richtig pepega, ja.
Fuck.
Jawohl, starten.
Haha.
Dass das Video noch jemand kennt.
Max, auch wenn jetzt
ziemlich random ist, gibt es eine Chance, dass jemals wieder
ein Video wie War's der Skiller kommt.
War War's der Skiller, wo ich...
Was war War's der Skiller
nochmal? Das ist schon
lange her, oder?
Ach, das da!
Wartet mal, wartet mal.
War das das Video, meinst du?
Ja, das
macht man heutzutage, weil mein Video startet so.
Ich bevorzuge
Frag-Montages.
Oh Gott, das ist so
cringe, das kann ich mir gar nicht mehr angucken, gell?
Keine Ahnung, da muss es mal
da muss es mal eine gute, ähm,
da muss es ein gutes Game geben, wo
das irgendwie so eine Szene drin ist, die dazu passt.
Was ich viel besser fand,
ist das Video hier, das hab ich ja gelöscht.
Ähm,
aber das gibt's noch auf YouTube.
Ähm,
was da? Kennt ihr das da?
Das war für COD 2015.
Ja.
Wenn man seine eigene Witze lustig
findet, ne?
Ich komm mit den Scheißen. Das ist so ein Video,
das könnt ihr mir echt zwei Stunden lang gucken.
Dabei, ne?
Dabei hab ich mir den Mist ausgedacht.
Und das Lustige ist,
das ist 2015, ne?
Das ist 2015, das könntest du
original für jedes weitere COD,
für jedes weitere COD, was danach gekommen ist,
könntest du das gleiche verwenden.
Äh?
Äh?
Ich hab sie gefunden,
weil ich sie mit der Maillette
in die Piedern des Schipionis
in den Sparrow befestigt habe.
Und wenn ich in ein Restaurant bin,
dann sehe ich sie mit einer Maillette
und sie hat sie nur mit der Maillette.
Ich hab das gelöscht, weil das eigentlich aus dem spanischen
Fernsehsender ist.
Und das nicht frei
zum Verwenden zur Verfügung gestellt wurde.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Das war das Snoop Dogg,
das Snoop Dogg Voice Pack.
Ich zähl Spiele.
Ernsthaft.
Das ist ja doch nicht mal ein Witz.
Die PC-Version ist halt
voll.
Die PC-Version ist halt voll.
Die PC-Version ist halt voll.
Das war gar nicht gewesen die letzten Jahre.
Jetzt kommt's.
Jetzt kommt's.
Jetzt kommt's.
Jetzt kommt's.
Jetzt kommt's.
Jetzt kommt's.
Zwei.
Zwei.
Das ist ja nichtIkai, oder?
Aha!
SPEAKER 1
Blick auf die gerne.
Finde ich wirklich
fably.
Fable.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ich weiß nicht, warum.
Das sagt doch alles Glass.
�
Mit dem Geld, das ich gewonnen habe, haben sie mir 20 Paare gekostet.
500 Kilo, das ist alles, was ich in Suiza bekommen habe.
Und ich habe die Playa geborrt.
Es ist sehr seltsam.
Das ist so dumm.
Im Original reden die darüber, dass der irgendwelche Pfannen im Meer verloren hat oder so.
Im Original erzählt er dem, dass er irgendwelche Pfannen an den Strand gestellt hat und die wurden dann irgendwie im Meer weggespült oder irgendwie sowas in der Richtung.
Also eigentlich nur halb so lustig, wie diese ganzen Fake-Interviews, die es gibt.
Das ist so ein bisschen...
Ähm...
Ja, deswegen kriegt er sich nicht mehr so ein.
Das ist halt ein Video, was im Prinzip nur lustig ist, wenn du kein Spanisch kannst.
Wenn du Spanisch kannst, ist es halt nicht lustig.
Das ist genauso, wie es online ja zig, kennt ihr ja bestimmt, so 30.000 Videos Hitler-Reacts gibt.
Wo sie alle irgendwie so eine Szene aus der Untergang genommen haben.
Ja, der Angriff Steiner ist nicht erfolgt, bla bla.
Das kennt, kennt, hat ja jeder schon Videos von gesehen.
Das Problem ist, dass wir das halt als Deutsche verstehen und das ist halt, wenn du Deutsch verstehst, nicht lustig.
Ähm...
Aber die Amis pissen sich da drauf weg.
Die haben...
Die...
Da gibt's Hitler-Reacts, ist da...
Zu jedem Vorfall gibt's, gibt's ein Hitlers-React-Video.
Genau.
Jojo, das ist, das ist für Deutsche halt nicht lustig.
Genauso ist das für Spanier nicht lustig.
Ähm...
Weil man's halt versteht, hm?
Aber die Amis, die pissen...
Also generell, alle anderen pissen sich da übelst drauf weg, weil sie halt kein Deutsch verstehen.
Wo ist eigentlich die Musik hin?
Achso, die hab ich ausgemacht.
Aha.
Hier.
Big Brain.
Wenn man Musik ausmacht, geht's auch nicht.
Wer hätte...
Wer hätte das...
Nee, eher das da.
Passt eher.
Wer hätte das gedacht?
Ja, genau.
Genau, genau, sowas.
Clocks HD.
So, ich will jetzt nochmal ein Chat-Tool starten.
Dass ich Chat-Fragen im Chat mitkrieg.
Ich hab hier wieder zig Dinger übersehen hier.
Das ist nämlich ganz Chat, ist rot.
Hier das eine ist der Bot.
Börsengenieur ist das.
Wie viele Subs hast du mittlerweile?
Ruhig mal gucken, ich hab's grad nicht auf.
Zumindest, ihr habt jetzt die einmalige Chance.
Unter die ersten 200 Subs noch zu kommen.
Und das geht ganz einfach.
Ganz ohne Geld auszugeben.
Indem man einfach seinen Twitch-Account mit seinem Twitch-Prime-Account.
Na, äh, äh, nein.
Seinen Twitch-Account mit seinem Amazon-Prime-Account verknüpft.
Passt das Ganze nix.
Man kann einmal im Monat einen Streamer unterstützen.
Seiner Wahl mit einem Tier-One-Sub.
Und da gibt's auch schon den ersten Sub von ASDEA.
Asta.
Wahrscheinlich eher ASDEA.
0815.
POG.
Nice.
Samus Climber.
Samus Climber.
POG.
Studenten können nicht mit Twitch-Prime abonnieren. Warum?
Echt nicht?
Warum nicht?
Geht das mit dem Amazon-Studenten-Account nicht?
Geht das mit dem Amazon-Studenten-Account nicht?
Geht das mit dem Amazon-Studenten-Account nicht?
Das ist ja Massive.
Pepehands.
Ach, meine IP hat sich geändert.
Einfach mal so. Einfach so.
Einfach, weil's keinen Bock hat.
Oh, ich hab oben irgendwas überlesen.
Hat das einen Grund,
dass du VMware nicht
VirtualBox Hyper-V verwendest?
Na gut, Hyper-V verwende ich nicht,
weil ich mir gar nicht mal sicher bin, ob das überhaupt dabei ist.
Ähm, bei, bei,
beim normalen Windows 10.
Und dazu kommt, dass Hyper-V generell nicht so der
Wahnsinn ist für Desktop-Virtualisierung.
Also sprich, dass du halt ne grafische Ausgabe
hast. Den konnte beispielsweise ein paar
Versionen lang noch nicht mal USB-Sachen durchreichen.
Das ist Mist. VirtualBox kann man verwenden.
Nimmt sich nicht viel mit VMware.
Ich find VMware an sich eigentlich
einfach, einfach runder, ja.
Und das Support von VirtualBox ist ja auch ein bisschen
ein bisschen, ein bisschen
langsam geworden.
Das ist ja schon seit ein paar Jahren bei Oracle.
Und da tut sich, da
tut sich nicht allzu viel.
Na, wir können mal gucken, ob's
hier ne Visions-History von gibt.
Ähm, also da tut sich nicht so viel wie bei
VMware Workstation. VMware Workstation ist ein rundes
Produkt. Das ist eines der wenigen
Software, eines der wenigen Stücke Software
auf dem Desktop, die, wo ich
wirklich auch Geld für ausgegeben hab,
beziehungsweise auch ausgeben würde immer noch.
Das ist auch gar nicht so teuer. Die haben immer
Die haben immer
irgendwelche Aktionen, wenn du entweder
nen alten Key hast,
oder die haben auch ab und zu einmal
im Jahr oder so ist es besonders billig.
Jaja,
bla bla bla. Das
äh
Ja,
seems legit. Also ich würde
ja niemals 250 Euro dafür ausgeben.
Das kriegste auch für deutlich
weniger. Keine Ahnung,
bei dem Preis würd ich's wahrscheinlich sogar mal so
nen komischen Keyseller ausprobieren.
Viel wichtiger, warum kein Docker?
In Bezug auf
was? Abonniert
Twitch Prime, POG, ChicoSS
Wobei man
sollte es wahrscheinlich eher ChicoESES
aussprechen, weil das in Deutschland ja
ein bisschen negativ behaftet ist, die Aussprache.
Ähm,
übrigens, wo wir grad beim Thema
Chico sind.
Meine Katze heißt auch Chico.
Hier heißt sie zwar Chica auf dem Bild,
allerdings, in Wirklichkeit
heißt sie Chico, weil das ehemalige Herrchen
sich gedacht hat, Chico ist
ein guter Mädchenname.
Warum auch immer?
Weil.
Keine Ahnung warum. Aber was
haben wir hier? Twitch Prime Subscriber.
Ja, ich weiß, dass Chico
Junge ist und Mädchen Spanisch, wobei ich hab's hier mit K
geschrieben. Ich glaub, man schreibt's mit C, ja, ne?
Ähm.
Und ich nenn sie manchmal Chica oder Chico.
Also offiziell heißt sie wie gesagt Chico, aber
das ist eine ziemlich beknackte Bezeichnung für
eine Katze. Deswegen wechsle ich
das ab. Das ist aber egal, weil
wenn die irgendwas mit Chica, Chico
hört, dann ist sie eh schon am Start.
Weil sie denkt, es gibt was.
Wenn sie
denkt, dass es was gibt, dann ist sie sofort
am Start.
MonkaG, was gibt MonkaG?
Was soll MonkaG geben?
MonkaS
Get rekt
easy as fuck
easy as fuck
easy as fuck
MonkaG ist wichtig. Ich such mal
im anderen Bildschirm MonkaG.
Das ist ne goldene
Goldene Mülltonne?
MonkaG ist ne goldene
Mülltonne.
Ich glaube nicht, dass das gemeint ist, oder?
Hast du im Discord gepostet?
Guck mal.
Äh. Kann ich da jetzt
reingucken?
Da ist nix.
Im Discord ist nix.
Ach, PepoG.
Ach, der.
Das kann man
tatsächlich machen.
Ach, der mit der Brille.
Den auch gibt's in transparent.
Ah, ne.
Okay. Dann mach ich das
jetzt, also wenn ihr den unbedingt braucht.
Rank your
faces Z.
Stell ich mir mal ein. Pepo, was?
PepoG heißt das Ding. Okay.
Emotes. Emotes.
PepoG.
PepoG.
Ja.
Stark.
Add to Channel.
Stark ist drin.
Easy.
Ist geadded.
Falls du bei der TwitchTV verwendest,
dann dauert das nen Tag, bis
es gecheckt hat irgendwie. Um was geht's
heute? Ja, das hab ich noch gar nicht erzählt.
Wir waren grad mit allen möglichen Dingern beschäftigt.
Ja, um was geht's heute?
Übrigens, ich muss grad noch was anderes erzählen.
Heute auf Twitter. Ich hab heut
den ultimativen
Lifehack gefunden.
Für alle Leute, die nasse Schuhe haben
und nen Serverrack in der Nähe.
Nehmt einfach
ne Kiste,
dass eure Schuhe auf der Höhe
vom Server sind und dann stellt
eure Schuhe dahinter und dann sind die Schuhe nach 2 Stunden wieder trocken.
Dazu kann man
eigentlich nur sagen, Massive
Big Brain.
Oder eigentlich schon 900 IQ.
Das ist
nicht übel, ne?
Hat funktioniert. War komplett trocken, der Nachwitter.
Hab ich jetzt 4 Stunden anpusten lassen
von den Kisten. Problem ist, das ist ein bisschen
widersprüchlich, weil
drumherum ist halt Klimaanlage
und irgendwie, keine Ahnung, 18 Grad
oder so in dem Raum.
Ähm,
das ist nicht groß. Was ist das?
42 oder so?
Ähm, das sieht bloß so groß aus.
Im Karton, weil man halt keinen Vergleich hat.
Und drumherum ist es halt
kalt, aber da kommt halt das Warme vom Lüft da hinten
dran und zack, 4 Stunden später war das Ding
wieder trocken.
Da geht eh keiner rein.
Ja. Wenn da Leute reingegangen
sind, haben die sich vielleicht gewundert, warum
da so komische Luft auf einmal drin ist.
Der 42 ist nicht
groß. Kommt aber immer ganz
entscheidend auf die Größe an, ja?
Also, umso größer du bist,
umso größer sind in der Regel auch die Füße.
Wer hätte das gedacht?
Ich glaube, es sind gar nicht 2.
Ich glaube, es ist 43,5.
Ich glaube, 43,5 ist es.
Ich merke mir das immer nicht, weil ich gucke einfach in meine Amazon-Bestellung,
weil ich zuletzt bestellt habe.
1,70 und
46 ist nicht schlecht.
Also, ich bin es 1,74.
Ich habe früher auch immer
zu große Schuhe angezogen.
Bis ich dann irgendwann gemerkt habe, okay, so langsam
meine Füße wachsen nicht mehr.
Und es ist viel bequemer, wenn man Schuhe hat, die genau passen.
Ja, also,
was haben wir heute? Ähm, zwei Sachen.
Als erstes,
oder ich weiß nicht, was wir als erstes machen, müssen wir mal schauen.
Ähm, wir müssen
ja in unser,
in das Paket-Tracking-Tool, müssen wir ja noch,
aktuell ist ja noch ein DHL eingebaut,
also in den Versand,
den Versand-Traxor. Ich zeige den mal für alle, die ihn noch nicht
kennen, die ihn noch nicht gesehen haben,
was der Versand-Traxor so macht.
Der heißt tatsächlich so,
und zwar, was der Versand-Traxor macht, ist,
wer hätte das gedacht? Versand-Traxor.
Ähm,
zum Beispiel, kann man da
automatisch
aus einem E-Mail-Postfach
ähm, Tracking-Nummern
hinzufügen lassen. Der scannt
das E-Mail-Postfach nach Tracking-Nummern
und fängt die dann an zu tracken
und kann einem eine Benachrichtigung schicken, wenn das Ding unterwegs ist.
Aktuell kann das nur ein DHL,
wie man hier gerade sieht.
Dafür kann das DHL
eigentlich schon ganz gut.
Das erkennt DHL, dass
das Ding unterwegs ist, dass das Ding
im Auto ist und dass das Ding angekommen ist.
Das ist schon mal ganz praktisch.
Man kann auch manuell hinzufügen
eine Tracking-Nummer, aber
ähm, die Idee dahinter
ist eben, dass man automatisch scannen lässt,
ob man Benachrichtigungen kriegt, wo Tracking-Nummern
drinnen stehen und der die dann weiter
verfolgt und einen benachrichtigt,
sobald es was gibt, beziehungsweise,
dass man das auch einfach mit
seiner Heimautomatisierung integrieren kann. Einfach, dass man
eine einheitliche Schnittstelle hat,
wo man Bestellbestätigungen, äh,
wo man Benachrichtigungs-
ähm, Sachen zu Paketen
bekommen kann und wo man auch ordentlich Arbeit
hat, um das Ganze anzusprechen. Aktuell ist
geplant, dass man, dass wir Amazon
Logistics, DPD,
Hermes, äh,
DHL und UPS unterstützen
und aktuell kann das Ding allerdings
plus DHL. Das ist
nicht so viel, aber wie gesagt, DHL funktioniert schon ganz
gut. Und was wir heute machen ist, wir
gucken uns mal an, wie das mit Hermes funktioniert.
Hermes habe ich schon gesehen, Hermes ist ein bisschen
ekliger. Hermes hat keine offizielle API.
Das einzige,
was ich gefunden habe, ist Hermes API
UK, das da.
Aber,
da kriegt man nichts gescheit von
abgefragt. Das ist anscheinend nur zum
erstellen von Paketen. Das sagt ein bisschen.
Und das ist auch keine
offizielle API. Das ist irgendwas, was man
über Google findet, also vielleicht nicht so sinnvoll zu
verwenden.
Ähm, genau.
Das heißt, wir müssen mal irgendwie gucken, wie man, ach ja,
übrigens, Dankeschön nochmal an alle, die mir Paketcodes
geschickt haben. Ähm,
ohne die Paketcodes könnte ich das hier im Stream
gar nicht machen. Zum Beispiel,
machen wir mal Sendeverfolgung
Hermes. So, und dann
nehmen wir jetzt mal eine Nummer, die mir jemand geschickt hat, hier aus dem Stream.
Geben das ein. Und dann sehen wir,
das Ding ist, ist unterwegs,
ne? Und ich habe
halt keinen Bock, Webseiten zu
parsen. Das Sack, das müssen wir schon für Amazon
machen. Bei Amazon bleibt uns nichts anderes
übrig, wie Webseiten parsen.
Ähm,
Sub-Icon. Ach stimmt, Sibaro, du warst ja noch gar nicht
da. Ja, wir haben mittlerweile ein Sub-Icon.
Einfach nicht mit Hermes senden.
Ja, das Problem ist ja,
du hast ja recht. Ich würde ja auch nie
im Leben mit Hermes verschicken. Allerdings
kann ich mir das oftmals bei Online-Shops halt nicht
aussuchen.
Kann sich das ja bei Online-Shops oftmals nicht aussuchen.
Die haben eine Versandmethode, ist halt
Hermes. Und
da kann man eigentlich nur dazu sagen,
ist halt so. So, und
deswegen müssen wir uns angucken, wie Hermes das Ganze
macht. Das können wir jetzt mal schnell machen.
Ähm, oh, hier, wen haben wir da?
Pinguin Bob, Pock,
Prime,
Pock,
Dankeschön, Twitch Prime Sub.
Ist, ist der Chat heute eigentlich,
ist der Chat heute Q-Chat?
Ihr habt es noch sehr wenig
gesehen, dass es heute Q-Chat ist.
Ist das, ist das Q-Chat heute?
Oder ist das, keine Ahnung,
Angry Chat?
Hate, Hate-Speech Chat.
Nee, das ist Q-Chat. Sehr schön.
So mag ich das. Q-Chat ist bester
Chat. Smog Chat.
So gefällt mir das.
Q-Chat.
Die Musik weiß auch nicht,
ob sie laut oder leise werden soll.
So, dann gucken wir uns
das Ganze nämlich mal an, wie Hermes das macht.
Ähm,
und,
oh, was geht denn hier ab?
Ach, ich habe eingestellt, dass das
aussehen soll wie ein iPhone.
Ah, okay,
wie stellt man den Kack nochmal um?
Ach, hier, ne?
Ha! Ähm,
und ich muss ja, ich muss ja gestehen,
so ganz ahnungslos bin ich in dem Fall nicht,
weil ich habe mir das im Vorfall schon mal angeguckt
und es ist ziemlich einfach
von Hermes die, ähm,
Paket, den Paketstatus abzufragen.
Um nicht zu sagen,
es ist
easy.
Weil, guck mal hier, wenn man im Network Traffic
guckt, wo man gerade beim Punkt,
weil am Anfang einer gesagt hat, hier,
Reverse Engineering, man kann es nicht so wirklich,
also so viel reversen müssen wir
an der Stelle nix, das ist eigentlich ziemlich,
ziemlich easy. Easy. Ähm,
aber wenn man sich hier mal anguckt, was das ganze
überträgt im Browser, ja,
ähm,
dann wird einem irgendwann auffallen, wenn man da so durch,
so durchklickt, da fällt einem erstmal
auf irgendwie so, äh, empfangen
Sendungsinformationen, Sendungsinformationen,
also die sind schon mal richtig, richtig
huge, big brain, die haben den ganzen Kram erstmal
deutsch genannt, ja.
Teaser Wunschzustellung, sowas,
also da weiß man schon mal, was Hermes für ein Verein ist,
Funktionsnamen erstmal auf deutsch machen.
Das, das machen wirklich nur
Next Level Leute.
Und Hermes ist anscheinend, Hermes gehört da anscheinend
dazu. So, und dann haben wir
die einzige Funktion, die irgendwie
halbwegs sinnvoll aussieht und sich ordentlich,
ordentlich benannt ist, wo
darauf zu schließen ist, dass das Leute programmiert haben,
die wissen, was sie machen,
ist das hier. Shipments.
Shipments, Services,
Tracking,
Shipments. Und dann search, search
nach der,
nach der Trackingnummer. So,
wenn man sich das ganze anguckt und jetzt hier auf Response geht,
sieht man, hier hat man alles schön
in JSON drinne, ohne dass man irgendwie
HTML parsen muss.
Navigationsleiste CSS.
Haben sie ernsthaft?
Ne, haben sie nicht, aber werden wir ja nicht gewundert.
Ähm,
zumindest man sieht hier, hier ist komplett
alles drin, was wir brauchen bei Hermes.
Das ist total einfach.
Wir können uns einfach die Uhr nehmen
und das jeweilige, ähm,
Tracking, jeweilige
Hermes Trackingnummer reinschreiben und schon kriegen wir alle
Informationen. Leider,
kriegt man bei Hermes
keine Infos drüber, in welcher
Stadt das ganze gerade ist.
So, und deswegen, bevor wir jetzt mit Hermes
anfangen, machen wir mal was, was ein bisschen
mehr Spaß macht, weil man ein bisschen mehr, mehr Sachen
machen muss, und zwar DPD.
DPD wird, wird lustig, weil
ich mach da, ich mach schon mal ein neues
Projekt, wo man das drinne ausprobieren kann.
Ähm, ja,
unsere, bei welcher, welcher Konsolen-
App sind wir eigentlich mittlerweile?
Konsolen-App 13, DPD,
Tracker. Ähm,
DPD wird witzig, denn
ich hab ne PDF gefunden.
PDF, DPD
API. Die machen's im Vergleich,
ähm, ne, ne, ne,
wenn man die Postleitzahl eingibt, ich hab's ausprobiert, eben
mit ner Sendung von mir, wenn man die Postleitzahl
eingibt, ist das einzige, was bei,
was bei Hermes noch zusätzlich
da
zukommt, Moment, wo sind wir denn?
Das einzige, was bei Hermes noch zusätzlich
dazukommt, wenn man die Postleitzahl eingibt,
ist, ähm, dass
das Absende, dort, wo
das Paket aufgegeben wird, und
die eigene Adresse drinsteht.
Mehr nicht.
Also, man hat da keine Chance, das großartig
raus, raus zu, zu,
ah, gut, mein Hermes, ja, man kann, man kann
nicht bei jedem Service alles haben.
So, und, ähm,
mit DPD
wird das Ganze ein bisschen lustiger, weil ich hab ne,
ich hab ne PDF gefunden von DPD,
für die DPD
Cloud,
ne, äh,
das da,
ähm,
das ist anscheinend ein Service für,
von DPD für, für
Litauen und, und, ähm,
Estland,
weil die Sprachen, die es da gibt,
ist, äh, Englisch,
Litauisch,
Estländisch, und, äh, was
gibt's da noch? Estland, Litauen,
Lettland, und, und Lett,
Lettländisch.
Aber, das Gute ist,
das funktioniert mit allen DPD
Paketnummern international.
Und, ähm,
was hältst du davon, dass Manjaro
LibreOffice durch Softmaker FreeOffice
ersetzen will? Ähm, ganz davon abgesehen,
dass ich LibreOffice für absoluten Crap halte,
aber es ist halt irgendwie notwendig und
vorhanden, ähm,
hab ich Soft, Softmaker FreeOffice
noch nicht ausprobiert.
Ist DPD nicht deutscher Paketdienst?
Naja, kann schon sein, allerdings,
äh, sind sie halt
huge brain und sagen halt,
die ordentliche Web-API
verbieten wir bloß für Litauen an.
Kann uns ja egal sein, ja.
Zumindest, ich hab ein PDF gefunden,
ähm,
Parcel-Status-PDF, und jetzt haltet euch
fest, jetzt, es wird wirklich
abgedreht, was die Jungs sich von DPD
abge-, was die, äh, was sich die Jungs
von DPD ausgedacht haben.
Ähm, und zwar, ach ja,
man sollte der Form halber sagen, DPD
hat auch eine offizielle API,
das Problem ist, die ist, ähm,
XML-Soap,
muss man sich dafür registrieren mit einem
API-Key und ist nervig.
Allerdings, die haben auch diesen Free-Service,
der wohl anscheinend für Litauen
gedacht ist, aber wurscht, das funktioniert mit jeder, mit jeder,
mit jeder Paketnummer.
Und wenn man sich das PDF anguckt,
wird man nämlich erkennen,
äh, dass die ein bisschen merkwürdige Sachen machen bei,
bei, bei DPD.
Das erste, was mich freut schon mal,
ist, die haben ganz gute Beispiele drinne,
wie das Ganze funktioniert.
Also, ich hab's mit Curl schon mal ausprobiert.
Ah, kann man zum Beispiel sagen, hier, ähm,
All-Status, zack.
Achso, wir müssen eine gültige Paketnummer eingeben.
Nehmen wir mal eine gültige
DPD-Paketnummer. Haben ja auch wieder
eine im Stream geschickt. Also hier nochmal,
pock, so, zack.
Und dann rödelt's
ein bisschen rum. Und wenn's
rumgerödelt hat, das kann manchmal, das kann manchmal
zehn Sekunden hängen oder so, aber es ist,
kann man mit leben.
Haben die noch nie was von Swagger Open API gehört?
Nein, haben sie nicht. Haben die wenigsten
haben davon was gehört.
So, drei Stunden später hat es dann
aktualisiert. Wenn man das einmal gemacht hat, geht's
danach schneller.
Huge Speed.
Okay, es ist, es ist grade, glaub ich, überlastet.
Ich glaub, es ist grade überlastet.
Ich hab's vorhin mit Curl ausprobiert,
ging ohne Probleme.
Ach hier, stimmt's doch hier.
Status Delift, das stimmt nicht.
Der Status ist zu kurz, ähm.
Normalerweise steht da noch viel mehr drinne.
Also, als ich das vorhin ausprobiert habe,
mit der gleichen Tracking-Nummer,
Oh, das ist wirklich die gleiche Tracking-Nummer.
Ja.
Also, als ich das vorhin ausprobiert habe,
mit der gleichen, der gleichen Tracking-Nummer.
Moment, ich hab noch eine hier von DPD. Probier mal die mal aus.
Ne. Ich hab, ich hab nur eine
von DPD. Falls noch einer von euch
eine Paketnummer hat von DPD,
von innerhalb der letzten 120 Tage,
wär das eine super Sache, wenn er
die mir zum Testen zur Verfügung stellen könnte.
Ähm, man liegt von euch
nichts, außer
grob die Stadt, wo ihr
wohnt. Sonst, sonst sieht man nichts
davon, wenn man die Tracking-Nummer hat.
Ähm.
Also, ich weiß nicht, was das hier
für Schmerzen hat, ehrlich gesagt.
Als ich das vorhin ausprobiert habe,
äh, hat's doch funktioniert.
Na. Ähm, dann steht da, stand da
nämlich noch, in delivery, en route
und, und alles mögliche, ne.
Ah, hier, der Glock ist HD. Dankeschön.
Ok. Äh, die DPD-API
ist gerade für'n Arsch.
Die ist grad kaputt. Ich hab's
vorhin ausprobiert, da kam viel mehr raus.
Ähm, ach ja, vielleicht muss ich
All-Status machen. Kann das sein, dass ich
All-Status machen muss?
Mal entscheiden.
Äh, äh, oh Gott, warum ist
das PDF so schlecht?
PDF, please, komm.
Ah ja, hier, gut, funktioniert.
Äh, vielleicht geht's mit der anderen Paket-Nummer
auch. Ich denk mal,
ich denk mal, ich hab da einfach zu wenig, zu wenig
eingegeben. Ja, geht,
jetzt geht's wieder. Ok, alles gut.
Ähm, also, was man bei DPD
aus der JSON-API rauskriegt, ist leider
auch nicht so ganz, ähm,
zufriedenstellend.
Man kriegt raus, dass der ganze,
das Ding wurde abgegeben zu diesem Zeitpunkt,
es war unterwegs zu diesem Zeitpunkt,
es war unterwegs zu diesem Zeitpunkt, es war unterwegs zu diesem Zeitpunkt.
Ähm,
was interessant ist an der Stelle, man kriegt bei,
von der DPD-API kriegt man raus,
ob es, ob's
einen Fehler gibt, also sprich, ob's die Paket-Nummer
überhaupt gibt. Das ist schon mal eine ganz
nützliche Geschichte. Aber es wird, es wird noch
schlimmer, es wird noch schlimmer. Ähm,
bis jetzt ist ja noch ok, bis jetzt sieht es ja noch ziemlich,
ziemlich standard aus,
ja. Ähm, so, und dann kann man
hier halt abfragen, ganz viele
verschiedene Pakete, äh, also mehrere
Pakete zusammen und, und.
Es geht alles,
ja, es ist, es ist alles, man kann auch
zum Beispiel hier noch machen,
detail1, da kriegt man
dann noch so komische Service-Codes angezeigt.
Was auch immer die uns sagen sollen.
Das Problem ist,
für mich, was mich ein bisschen nervt, ist,
in der JSON-API
steht zwar drinne, dass das Ding unterwegs
ist, es steht aber keine genaueren
Informationen drinne, wie zum Beispiel
ähm, wurde ins Fahrzeug
geladen, ist jetzt an der Station eingetroffen
und, was auch nicht drinne
steht, ist
ähm, der Ort.
Weil wenn man mal in der
DPT-Sende, in der DPT-Sendeverfolgung
guckt, wird man, äh,
wird man feststellen,
weiter
ohne Postleitzahl, wird man feststellen,
ähm, man,
ja, genau, man bekommt hier raus, Paket
im Paketzustellungszentrum,
Paket, also man bekommt mehr Informationen.
Und man bekommt auch
ohne, ohne
die, ohne die Postleitzahl noch mehr
Informationen raus. Dazu muss man
aber, und jetzt wird's eklig,
dazu muss man allerdings die CSV-API
verwenden. Du willst doch wissen,
wo du wohnst, das ist doch nicht meine.
Das ist doch nicht meine Trackingnummer.
Ich würd das gerne kopieren.
Wir müssen das, wir müssen die CSV-API verwenden.
Ich hab noch nie eine CSV-API gesehen.
Nein, ich möchte dich nicht stalken.
Ich brauch noch nicht mal ne
Paketnummer von dir, weil ich hab schon ne Paketnummer.
Also, man kann das jetzt ausprobieren.
Ähm,
mit der Paketnummer gibt man das an
und dann lädt er ne, dann lädt er ne CSV-Datei runter.
Ich hab so ne Art von API noch nirgendswo gesehen.
Ich weiß nicht, was mit dem nirgends bei DPD los ist.
Zumindest, wenn man das öffnet,
wenn man das öffnet,
dann sieht man hier, ähm,
wir sind hier
in Transit
in, in Mahl. Ich hab
keine Ahnung, wo Mahl liegt.
Äh, der Zipcode stimmt.
Der ist nämlich überall gleich, obwohl die Städte
unterschiedlich sind.
Ähm, ganz normale
CSV-API. Ja, es gibt auch
so viele normale CSV-APIs, ne?
Ähm,
und dann sieht man hier Freiburg,
Freiburg. Also, man, man, man erkennt,
okay, der,
ich weiß nicht, war das vom,
war das, war das von der Eichler?
Ich glaub, der Eichler hat die, die Nummer
geschickt. Ich glaub, ich glaub vom Eichler
ist das, die Nummer, die wir hier
probieren. Also, wahrscheinlich sehen wir jetzt hier,
dass er in Freiburg wohnt, aber
mehr, mehr erkennen wir hier im Prinzip auch nicht.
Ähm,
und,
ja, was
auch noch interessant ist, das hier,
ich hab mir vorher das PDF ja schon
angeguckt, das hier ist die Zeit,
das hier ist die Zeit
in, in, in, in, in
Stunden, in, in,
also, was ein Format, ne?
In Stunden und
Minuten, allerdings
mit, mit möglichen Leerstellen.
Also, nicht 06, 06, 09,
sondern 16669.
So, und das hinten
sind die Minuten.
Das, das ist, das ist schon ein bisschen wir.
So, und das hier vorn ist auch ohne irgendwelche
Trennzeichen, das, ähm,
das Datum.
7.
2.7.
Ist das auf Englisch? Ne.
Das haben die aber in ihrem PDF drinstehen,
wie rum das ist. Also, ihr seht schon, das ist ein
bisschen,
also, schon ein bisschen hässlich, ja?
Du, nein, man bekommt die
Stadt, man bekommt die Stadt, die Stadt bekommt man nicht
aus der JSON-API, vergiss es.
Ich hab ja schon gesagt, show all
und detail one, mehr geht nicht.
Mehr kannst du nicht machen. Du bekommst
die Stadt nicht aus der JSON-API.
Das heißt, wir müssen zwei Sachen machen.
Ach ja, allerdings
teilt uns die JSON-API,
das ist mega pepega, das ist huge pepega,
pe, pe,
pe, de,
pepega de ist das, das ist also,
der deutsche pepega-Dienst,
wenn ich mir die API
angucke. Und die ist aktuell hier, vom Januar
2019.
Ähm, und,
was soll ich jetzt sagen?
Wir brauchen allerdings beide APIs, weil
die
CSV-API,
die teilt uns beispielsweise
nicht mit, wenn die Paketnummer
nicht stimmt.
Wenn ich jetzt hier zum Beispiel eingebe,
äh, Paketnummer ist
omega 0, ach Quatsch, Moment, äh,
irgendwas mit, irgendwas mit,
mit 10 war das hinten, ne?
Wie war die,
wie war die CSV-API nochmal?
Wartet mal, hab schon wieder
Tracking, Copy,
Tracking, so.
Wir nehmen jetzt mal was, was es garantiert nicht gibt hier,
omega 0.
Das Problem ist, man kriegt
eine CSV zurück, obwohl es die, die
Tracking-Nummer nicht gibt. Und wenn man das öffnet,
stellt man fest,
ach Mist, okay, das funktioniert.
Ähm, ja, man kriegt eine
Fehlermeldung, wenn das nicht dem richtigen Format
entspricht, aber man kriegt keine Fehlermeldung,
wenn es die, wenn es die Tracking-Nummer
nicht gibt. Also nehmen wir jetzt mal eine Tracking-Nummer,
die es gibt, und machen
da mal eine Tracking-Nummer draus, die es gerade nicht gibt.
Dann sieht man auch, da lädt eine CSV runter,
ja, die könnten einen 404
zurückgeben, das könnten die machen, ja.
Die könnten auch irgendeinen
x-beliebigen anderen Status-Code zurückgeben,
aber,
können wir mal gucken, ob sie das tun, ähm,
ich denke, das tun sie nicht.
Und man kriegt einen CSV
zurück, was einfach leer ist.
Das heißt, du hast eigentlich keine Ahnung so genau,
ob das stimmt. Das heißt, so wie ich mir das jetzt
überlegt habe, brauchen wir die JSON-API,
brauchen wir die JSON-API, um,
ähm, okay,
brauchen wir die JSON-API, um zu
gucken, ob die
Paketnummer, ob das Paket
überhaupt existiert.
Du brauchst noch eine DPD-Nummer, kannst mir gerne schicken,
ich hab schon ein paar, aber zum Testen sind
äh, Nummern nie, nie genug, ja.
Aber es hat doch eben schon noch mal eine Nummer
geschickt, musst du mal kurz hochrollen.
Ja, top.
LogX, der SteffKris
und der Kalf.
Beide DPD-Nummern geschickt, sehr schön.
Die trage ich dir mal ein hier in meinem Test,
dass ich, äh,
jetzt hab ich zu viel gelöscht,
ähm, kann man nie
genug haben,
testen. Aber das reicht, also jetzt
hab ich fünf, sechs Nummern.
Perfekt. Ja, dankeschön.
Das reicht zum Ausprobieren heute.
So, ähm,
und die Sache ist
die, dass wir brauchen auf jeden Fall
beide ARP's, um das zu verwenden.
Warum auch immer die
nichts, die liefern gar nichts, ach doch,
guck mal hier, was liefern sie zurück?
200 liefern sie zurück. 200,
auch wenn es
das Ganze nicht gibt.
Was ist das
für ein Winner-Mensch, das i3-WM?
Also man sieht, es gibt auch 200 zurück, wenn's
das Ganze gibt. Content-Typ Text-CSV
hab ich
selten gesehen, dass es direkt
von einer, direkt
zurückgeliefert wird, aber okay.
Wobei Text-CSV stimmt noch.
Text-CSV ist richtig.
Ähm, was auch immer.
Es ist auch wurscht.
Ähm, zumindest
man kann an dem Status nichts erkennen.
Also die ARP ist schon, wie gesagt,
deutscher PP-Gardin.
Und
ja, es wird ja
noch besser.
Es wird ja noch besser, wenn man sich jetzt mal das Dokument
anschaut.
Wird man feststellen, die Beschreibung
für die JSON-ARP ist relativ
okay.
Allerdings, die Sprachen sind schon mal geil.
Es gibt Englisch, äh,
Estländisch,
Litauen und Lettland.
Lettländisch oder sowas.
Weil, auch immer. Ich hab keine Ahnung, warum.
Aber Hauptsache,
es gibt Englisch.
Reicht schon mal.
Ja.
Steht ja auch Estonia, Latvia,
Lissuania.
Und Portugal kann man nicht abfragen.
Ich weiß nicht, wer das Ding
designt hat. Es ist auf jeden Fall nicht schön.
So, ähm.
Dann haben sie noch ein paar Beispiele
drin, das ist eigentlich ganz okay.
Und was man hier dran sieht ist, dass man mit der JSON-ARP
relativ einfach rausbekommt,
ob es einen Fehler gibt
und, ähm, ob
was der Fehler ist.
Also wir können zum Beispiel einmal
initial, äh, prüfen damit,
ob es diese Sendungsnummer überhaupt gibt.
Das würde mit, äh,
das würde mit der CSV-ARP schon mal
nicht richtig funktionieren.
So, ähm,
dann bla bla bla, der Rest ist egal.
JSON, JSON-Output.
Kann halt ein paar Messages enthalten, ist auch gut.
Das hier hinten ist auch schon sehr, sehr, äh,
sehr merkwürdig, ne.
Hier, Nummer 1, droppt den Pickup-Point,
hat den Status-Code
Job-Key, äh,
En-Hoot hat den Status-Code 0202.
0-3-4-5-6-7-8-9-10-14.
Allerdings, wenn man
im Pickup-Point ist, dann ist es
keine Nummer, sondern D0-PKI, äh,
Pickup, wahrscheinlich
Pickup, man weiß nicht. Es ist, es ist
komplett wir. Also das
muss man nicht versuchen zu verstehen, was da passiert, ja.
Es ist, es ist komplett wir.
Ähm, haben wir noch mal
Beispiele drin, ist auch okay.
Muss man aber gar nicht
so sehr versuchen durchzublicken.
Es ist im Prinzip, kann uns im Prinzip fast
egal sein. Kleines
Sidetrack, gib mal LibreOffice auf Ebay ein.
Äh, ich weiß, dass LibreOffice verkauft wird.
Ich weiß nicht, warum man das
kauft, aber ich weiß, dass es verkauft wird.
So, ähm, und was man halt hier auch sieht,
ist, man sieht keine, keinen
Progress so richtig, ne, und keine
Stadt. So, und jetzt
kommen wir mal zur CSV-AP.
Die wird nämlich noch ein Ticken ekliger als das,
was ich euch grad schon gezeigt hab.
Immerhin, es ist ein
UTF-8-CSV, ja.
Immerhin.
Jetzt schon mal was. Type.
10. Achso, das muss man
angeben, dass CSV generiert. Jetzt, wisst
ihr was? Wisst ihr was? Wollen wir mal ausprobieren?
Also, hier kommt,
hier kommt das CSV raus.
Was passiert denn da, wenn wir da mal
9 eintragen? Oder 11?
Nix. 12.
Ah, nix.
Ich könnte, ich könnte mir
vorstellen, wenn wir das lang genug ausprobieren, finden wir
irgendwelche internen DPD-APs
oder so. Gut, ähm,
so, und dann
kommt die Beschreibung von der, von
der CSV-Tabelle.
Die ist, die ist ein bisschen, die ist ein bisschen
konfus, aber man kann damit was anfangen.
Was jetzt richtig abgedreht wird, ist
folgendes.
Äh,
das da. Und zwar,
anstatt,
dass die in ihrer, ich zeig's euch mal,
wenn man das, wenn man das,
das CSV öffnet,
ups, wir sollten vielleicht mal das CSV
öffnen, wo was drinne steht.
Wenn man das CSV öffnet,
dann sieht man, dass die auf die, dass die auf die glorreiche
Idee gekommen sind, den Status
dieser Meldung, ähm,
als, als Text reinzuschreiben.
Also,
der, der,
der Status ändert sich,
je nach ausgewählter Sprache.
Das ist, das ist ziemlich ätzend
zu programmieren. Ich mein, gut,
wir verwenden immer Englisch, ja,
aber es wäre deutlich schöner, wenn da
einfach ein Status-Code drinne stehen würde.
Und wir könnten das anhand der Liste hier oben irgendwo
anhand des Status-Codes checken.
Das heißt, was wir jetzt machen müssen,
ist, wir müssen diese ewig lange Tabelle hier nehmen,
wo drinne steht,
was jeder einzelne mögliche
Status in jeder einzelnen unterstützten
Sprache bedeutet.
Äh, wir ignorieren mal
Lettländisch, Estländisch und, und
Litauisch.
Ignorieren wir mal. Wir nehmen mal
nur Englisch. Das heißt, wir müssen jeden
Status, weil wir keinen Code
bekommen, wir bekommen ja nur den Text,
müssen wir jeden
Status, ähm, mappen
auf einen Status von uns.
Also, das wird
dann ein ganz schön langes
Switch-Statement mit irgendwie
18 oder so, 18 verschiedenen
Einträgen drinne.
Ähm, das ist auch schon mal eklig, ja.
Und das programmieren wir jetzt.
Wir programmieren jetzt mal eine Runde
DPD-ARP.
Das wird,
wird toll.
Ähm, also das heißt, dazu muss man,
was wir jetzt machen müssen, ach ja,
und, ich habe noch den Bonus,
den Bonus habe ich ja noch vergessen,
den wollen wir auch noch machen, ist, ähm,
wir werden
die, die Stadt, die wir hier rauskriegen,
ja, kommt dann sowas wie Freiburg oder, oder
Mahl, kommt dann da raus.
Die Stadt werden wir
Reverse-Look-Uppen
zu einer,
zu einer, zu einer Koordinate,
die man dann auf einer Karte anzeigen lassen kann.
Äh,
Alf, ich hab keine Ahnung, auf
was du dich, auf was du dich liest jetzt.
Also genau, wir werden das dann,
wir werden die Stadt, also die hier, in dem Fall
Freiburg.de und Mahl.de
werden wir Reverse-Look-Uppen
per, per, über eine
Geo-ARP
und uns quasi
Koordinaten auf einer, auf einer
Karte generieren lassen, die wir dann
speichern können, dass ich dann wiederum im
Web-Frontend anzeigen lassen kann,
bei jeder Station, also sprich,
äh, muss,
muss den Versand-Tracker gerade nochmal
starten, dass ich es euch zeigen kann.
Was ich meine.
Versand-Tracks, starte mal.
Versand-Tracks, da geht übrigens trotzdem.
Genau, weil ich will hier eine Karte
anzeigen lassen können, wenn man nämlich die
Informationen hat, wie gesagt, das Frontend
ist eh noch nicht Final, das gefällt mir ehrlich gesagt
auch nicht so gut, ähm,
da kann ich hier eine Karte dann so anzeigen
lassen, wenn ich dann weiß, okay, das ist jetzt gerade in Freiburg,
kann man hier noch quasi einen Kartenausschnitt
anzeigen lassen, man hat ja genug Platz im Endeffekt
auf der Seite, ähm,
wo das gerade ist. Das ist, das, das bringt
jetzt nicht so wirklich was, weil
ich meine, jemand, der
dort wohnt, wird wissen, dass er dort
wohnt, aber ich glaube,
so eine Ansicht auf einer Map ist eigentlich ganz,
ähm, ganz
nützlich, weil du ungefähr einschätzen kannst, wie weit
das Ganze noch weg ist. Achso,
ja, das könnte man auch machen.
Allerdings, wir brauchen es ja nur
an einer Stelle, aber wir können, wir können,
wir können da auch eine Map machen. Das
macht eigentlich in dem Fall wenig Unterschied,
ja, aber können wir auch machen.
Nicht so.
Kommt aufs Gleiche raus. Ja.
So sieht's aus, Leute.
Das machen wir jetzt.
Machen wir mal für SunTrack so wieder zu.
Ja, also wir müssen jetzt machen,
wir müssen JSON-API abfragen von
DPD, CSV-API abfragen,
die ganzen Informationen daraus extrahieren,
ähm,
programmierst du das für Hardware-Rat? Nee.
Das hat damit
nichts zu tun. Das Hardware-Rat
Tool ist, äh, ist schon lange da in
Benutzung. So.
Und, genau,
JSON-API abfragen, CSV-API abfragen,
das Zeug alles extrahieren
und dann
den Lookup machen.
So, ähm, ich hab das ehrlich
gesagt mit OpenStreetMap noch nicht ausprobiert,
aber ich weiß schon, welchen Geo, GeoMap,
äh, nicht Geo, wie heißt, Geocode
Dienst wir verwenden.
Die Städte bei der DPD-API sind nicht so 100%
korrekt. Ja gut, ich mein,
wir können nur das anzeigen, was uns die API zurückliefert.
Im Zweifelsfall ist es halt verkehrt,
aber wir können immer noch sagen, das ist nicht unser Problem.
Wir können nichts dafür. DPD,
liefert das Falsche zurück.
Okay, also, ähm,
wir erstellen
uns jetzt mal schnell, oder ich kopier mir das
einfach. Ich kopier mir mal
zwei Sachen aus dem anderen Projekt rüber.
Hab ich nämlich hier gerade auf dem zweiten Bildschirm auf.
Ähm,
das da, das brauchen wir nämlich.
Das sind die Klassen, die wir auch
im Versand, im Versand-Tracker drinnen
haben, ne. Chipment-Status,
ähm, ups,
vielleicht sollte ich es an die richtige Stelle kopieren.
Also das sind die Sachen, die aus dem
Versand-Tracker kommen.
Neuer Chipment-Status, Chipment-Progress,
äh, Chipment-Tracker, das haben wir
alles, das ist, das kommt alles aus der Versand,
Versand-Tracker-Anwendung.
Das hab ich jetzt einfach nur rüberkopiert.
Weil, ähm, der Tracker
kommt ja dann später in, in,
in die größere Anwendung rein.
Da brauchen wir den ganzen Kram wieder. Okay,
also, dann fangen wir mal an.
Wir brauchen eine Klasse für den, äh,
DPD-Tracker.
So, und der
kriegt als Interface
iChipment-Tracker, hab ich das ganze mal genannt.
Das ist ganz nützlich, weil
wir können das dann so machen, ähm,
so sieht's aus, Karl.
Ich mach, ich mach verschiedene Projekte,
dass ich, dass ich ausprobieren kann.
Ich find's immer blöd, in einem schon bestehenden
Projekt neues Zeug, wo man noch nicht weiß, wie es genau
funktioniert, auszuprobieren.
Ähm,
ja, und der Sinn von dem Interface in dem Fall
ist, dass wir, äh,
quasi nicht intern
alle möglichen Tracker, die wir kennen,
wissen müssen.
Sondern, dass wir einfach gucken können,
nach allen Klassen, die iChip,
iChipment-Tracker haben,
und die laden wir dann einfach
und können sie verwenden.
Das macht's, das macht's halt deutlich, deutlich
einfacher, als, äh,
dass ich dann in meiner, in meiner
Background, also die, die, die Klasse, die im Hintergrund
die ganzen Tracking-Werte
sagt, müsste ich dann immer sagen,
New DPD-Tracker, New DHL-Tracker,
New Hermes-Tracker, New Amazon-Tracker.
Und ich müsste die Dinge alle kennen.
Könnte ja auch sein, dass ich, äh,
irgendwann mal auf die Idee komme, und, ähm,
sage, ich will jetzt
irgendwie, äh, mail.ru,
nee, warte mal, das ist ein Mail-Anbieter, das ist eine Post.
Keine Ahnung, ich will, ich will, äh,
China, China Airmail
implementieren, und, äh,
ich will allerdings ja nicht meine, meine,
meine Tracking-Klasse anpassen, sondern ich will einfach
eine Klasse implementieren, äh,
China, China-Tracker,
iShipment-Tracker, gut ist.
Ja, über Reflection werde ich das machen, also ich werde
dann einfach gucken, äh, ich lade
dann einfach alle, alle CS-Dateien
in einem Verzeichnis, oder mal gucken,
wie man das machen, genau, muss ich mir noch überlegen,
und, äh, schaue mit Reflection einfach,
welche iShipment-Tracker haben, und dann, dann ist
gut.
Dann wird das aufgehoben. Ähm,
wir machen dann vielleicht noch eine Methode,
wo man nachgucken kann, ob dieser
jeweilige Tracker sich überhaupt,
äh, für den jeweiligen Anbieter
zuständig fühlt, müssen wir mal schauen,
das können wir dann einfach machen, wenn wir soweit sind.
Okay, also
das einzige, was der DPD-Tracker machen
muss, das einzige, das einzige nach außen
hin ist,
der braucht eine Methode,
die heißt Track, der kriegt
eine Tracking-Nummer übergeben,
und er gibt uns eine History zurück,
von einzelnen Schritten
bei der Paketverfolgung.
Also vom, vom, vom Interface
her ist es relativ simpel,
aber
das zu implementieren wird jetzt noch ein bisschen,
bisschen komplizierter.
Okay, ähm, wir machen, wir machen
als erstes mal, wir nennen es mal ret,
letztens hat mir irgendwie einer erzählt, er steht, er steht auf
Variablen, die ret heißen,
ja, ähm,
ja,
und das returnen wir mal, dass das Ding,
dass wir das Ding kompilieren können.
Dann rufen wir es bei uns in, rufen wir es
in main auf,
dass wir gucken können, ob es auch prinzipiell
funktioniert, exit,
bla bla bla,
Tracker, DPD-Tracker,
so, dann brauch hier,
hier muss die, die Versandnummer
rein, Versandnummer
vom Eichler, kommt da jetzt rein,
ich glaub das ist vom Eichler gewesen,
so, ähm,
und dann,
achso, was mach ich denn da für einen Blödsinn,
stimmt überhaupt nicht,
weg, so, da kommt die nochmal rein,
ähm,
Result,
bla,
und dann machen wir eine Schleife mit den
Ergebnissen, und geben
hier mal irgendwie, keine Ahnung, geben wir mal aus, was er
gefunden hat, äh, äh,
Stadt, die er gefunden hat,
ähm,
Message, die er gefunden hat,
bei DPD, Status,
und als letztes
haben wir dann noch
Zeit, da machen wir irgendwie so ein
Trenn,
Trennricht runter, gut.
So, wenn wir das jetzt ausführen, passiert
ja, genau genommen, gar nichts.
Er startet, sagt Exit,
ich drück den Knopf, ist weg.
Das ist auch gut so,
ja gut, aber Beatport, wie würd's, wie würd's du's denn machen?
Ich hab ja noch keine Ahnung, wie viele
Trackers gibt, letztendlich.
Was macht das nicht,
es leuchtet noch nicht mal blau, es macht eigentlich,
macht wirklich nichts.
Es gibt, ja, Sub-Badges haben wir
seit zwei Streams,
10k Viewer, ja, die wollen alle den Keks
abhaben.
Ich mein, wir unterstützen aktuell eh nur vier
oder vier oder fünf Anbieter, das heißt,
man kann auch ohne Probleme, ähm,
zur Compile-Zeit, wirst du das ja
wissen, nicht unbedingt,
nicht unbedingt, ja,
ähm, also zumindest nicht
unbedingt zur Compile-Zeit von
von der
Klasse, die dann das Background-Tracking macht.
Oder ich will ja vielleicht nicht unbedingt
die Klasse anpassen, dass der die kennt.
Ja, also ich find das mit, ich find das über Reflection und
dem Interface eigentlich gar nicht so schlecht.
Da findet man alles, ansonsten muss
ich quasi jedes Mal alles anpassen.
Da kann man sich jetzt, da kann man sich jetzt schon drüber
streiten, wie man das macht, aber
ich find im Prinzip so, so oder so ähnlich
funktionieren alle Plugin-Systeme
unter .NET.
Also wenn du jetzt irgendwelche Sachen hast,
wo, wo du, also wenn, ne, wenn das
Programm fertig ist, du kannst dazu irgendwelche
Erweiterungen basteln, dann machen die das
alle so oder so ähnlich.
Die haben dann ein Interface, iPlugin, was mit
irgendwie fünf, sechs verschiedene Methoden hat, so nach dem
Motto, äh, Post-Run-Hook, Preview,
Run-Hook, sonst was.
Aber vielleicht machen wir das auch noch anders.
Ist ja eigentlich erst,
ist egal, wir müssen jetzt erst mal DPD
äh, an, ansteuern.
So, als erstes brauchen wir
einen HTTP-Client, dass wir DPD
abfragen können.
Äh, kann man in C-Sharp
bei einer Sealed-Class per
Reflection-Subclasses abfragen?
Äh, du kannst
bei einer Sealed-Class keine Subclass
machen. Oder wie meinst
du das jetzt? Oder
was meinst du, wenn du Subclasses
und die dann sealst?
Ähm, vielleicht habe ich vorhin was verpasst,
aber warum kannst du das nicht nehmen? Weiß ich nicht.
Vielleicht habe ich das schlicht und ergreifend nicht gesehen. Was ist das denn?
Komm mal her.
Hi, schon mal her.
Ach, cool. Wo hast du
das her? Das habe ich bei denen nicht
gefunden. Ich dachte,
also alles, was ich bei DPD gefunden habe,
ist, dass man, äh, dass man einen kompletten
also, wenn man
die offizielle API verwendet, braucht man API-Code.
Oder hast
du das von der Webseite von dem
Ach, das hast du von der
von der Tracking-Webseite,
ne? Von der
Senderverfolgungs-Webseite.
Oder?
Sei wurscht.
Das könnte man verwenden.
Das könnte man verwenden. Allerdings
würde ich lieber
für diesen Tracker, ähm,
zumindest halbwegs
offizielle APIs verwenden,
als die hier. Weil das ist ja quasi
eine interne API, die die, die
das Frontend von DPD verwendet.
Da kann sich ja jederzeit was dran ändern.
Und das andere ist
immerhin eine offizielle
API mit einem offiziellen API-Dokument.
Auch wenn die API eklig ist, wird
die sich wahrscheinlich nicht, äh, morgen
mal ändern. Das hier kann sich ja theoretisch
jederzeit, jederzeit ändern.
Na, wenn die da, wenn die da Meinung
sind, dass das hier jetzt, keine Ahnung, nochmal
nochmal in den Array reinkommen soll,
dann ist das morgen so.
Die haben ja hier, die haben ja hier im Prinzip,
ähm,
kein, keine Verpflichtung, ihre, ihre,
ihre Frontend, ihre Webseiten,
Frontend-API irgendwie so zu
gestalten oder so beizubehalten,
dass das andere weiterverwenden können, außer
ihr Frontend.
Kann man aber machen. Also,
ist wahrscheinlich sogar schöner
zu verwenden.
Aber wir, wir benutzen jetzt mal die offizielle
DPD-API, wo man keine API
braucht. So, ähm, also,
als erstes brauchen wir einen,
würdest du dann einfach unter
allen geladenen Clusten nach den Trackern
suchen, oder in einem Ordner auf dem
File-System. Na, wenn ich es wirklich komplett,
sagen wir mal, Plugin-mäßig
Extended, äh, haben will,
dann würde ich im Ordner nach, nach Files
suchen.
Ähm, bei
mir, nachdem ich ja keine Extended Plugins
haben will, bei mir könnte es sogar sein,
dass ich im geladenen,
geladenen schon suche.
Vielleicht mache ich es auch ganz anders. Es,
klingt mir jetzt aber erstmal sinnvoll, so zu machen.
Ähm, so.
Also, wir brauchen jetzt erstmal einen HTTP-Client.
Also hier,
BeatBoot, wenn du irgendwelche guten Vorschläge dafür hast,
ich, das muss man, müssen wir so nicht
machen. Letztendlich machen wir es ja auch on Stream,
dass man
auch ein bisschen sich da zusammen Sachen überlegen
kann. Ich mache es jetzt erstmal so,
ähm,
der HTTP-Pega-Client,
ja. Ich mache es jetzt erstmal so, und wenn es
da irgendwas Besseres einfach kommt, was wir machen.
Sprich da nicht dagegen. Und außerdem,
kommt das ganze Ding ja im Endeffekt auf GitHub,
und wenn irgendwie einer so eine super tolle Idee
hat, wie man das alles noch viel toller
machen könnte, kann er das ja ohne Probleme
mal hinschreiben.
Also, wenn es hier danach ist, ja.
Und ja, ich weiß, es gibt,
es gibt, ähm, quasi
so, so, nennen wir es mal so, Plugin-Frameworks,
gibt es ja auch sogar offiziell, ein offizielles von Microsoft,
ist schon ein paar Jahre alt. Das ist aber übertrieben.
Das ist, das ist, das ist richtig übertrieben
dafür. Da hast du dann Client-Side-
Interface, ähm,
Application-Side-Interface,
dazwischen irgendwie Bridge-Interface,
das ist super, total
durch, durch die Brust ins Auge, ja.
Okay, also, machen wir mal
einen HTTP-Client.
Wir brauchen einen HTTP-Client,
das ist schon mal sicher.
Ich muss mal gucken, ob ich nicht irgendwelche Subs übersehen hab.
Das wäre nämlich auch ziemlich
PEGA-mäßig.
Ne, hab ich nicht. Der Pinguin Bob war der letzte.
So, dann brauchen wir noch
die, ähm,
naja, die URL von der API,
müssen wir uns jetzt mal hier rausholen.
Ja, Daniel Lull, das habe ich
am Anfang gesagt, sowas in der Richtung müssen
wir auch noch machen, ähm,
wo wir gucken,
ob
die jeweilige Klasse sich überhaupt für den Anbieter
zuständig fühlt. Sowas
müssten wir eigentlich auch noch machen.
Da hast du recht, Daniel, das, das, das stimmt.
Das müssen wir, das müssen wir
auf jeden Fall machen. Also, wenn man das so, wenn man das
quasi so, ähm,
dass man es einfach
erweitern kann aus dem Gesichtspunkt, so,
macht, dann müsste man auch noch ne,
ne, ne Klasse einbauen, wo man dann quasi
den, den
Name oder so vom Anbieter
oder ne ID vom Anbieter reingeben kann
und der sagt dir, ob
er sich überhaupt dafür zuständig fühlt. Oder
aber, was man auch machen könnte,
ist, achso, ja, es gibt, es gibt auch noch
ne Alternative zu dieser Interface-Geschichte.
Man könnte halt sagen, ähm,
das müsste ne gewisse,
gewisse Naming
Convention einhalten. Das könnte es natürlich auch noch
machen. So macht das beispielsweise,
ähm,
du sagst in ASP.NET Core,
hast du beispielsweise, dass die ganzen Controller, Controller
heißen und sowas.
Ja, da passiert nichts großartig weiteres,
außer, dass die Controller, Controller heißen
und dann mappt er das alles richtig,
ja, dann ist dann, wenn das Ding dann irgendwie
HostsController heißt, dann
mappt er das automatisch und das Slash-API,
ähm,
Hosts und macht dann
gute, die Get, Get-Requests
quasi schon richtig an die Indexes.
Also,
gibt's verschiedene, verschiedene Mangel. Man kann den
PPGa-Controllers übrigens falsch,
die offizielle .NET, .NET
äh, Naming Convention wäre PPGaS
Controller.
PPGaS Controller.
Die wollen eigentlich gerne die, die Mehrzahl
haben. Ich tu mir aber auch
immer damit schwer, ich lerne die Dinger eigentlich auch meistens,
äh, einzahlen.
Weil ich es irgendwie gesprechender finde.
Ähm,
MonKaS Controller, MonKaS
Controller wäre eigentlich,
schon fast falsch, weil MonKaS
ja das einzelne Ding ist, also müsste
es MonKaS's
Controller heißen.
Gut, OmegaLoot.
So, wo sind wir denn jetzt eigentlich stehen geblieben?
Ich hab wieder schon so viel, so viel geschwätzt.
Äh, genau, wir brauchen die
Uhrl, die Uhrl von dem,
von dem Service.
Der ist,
blub.
Der ist da. Da.
Okay.
Das ist die Jason Uhrl.
Wobei, brauchen wir die Uhrl?
Eigentlich müssen wir die ganz global hinschreiben.
Machen wir, machen wir anders. Machen wir anders.
Wir laden uns jetzt erstmal das Jason Zeug runter.
Gehts euch allen gut?
Ja, mir schon. Und dem Chat auch, weil der Chat ist,
der Chat ist Cute Chat.
Okay, äh, äh,
String, Async,
Gut.
Dann laden wir, uh,
ich hätte das nicht alles kopieren sollen, the fuck.
Ähm,
so, wir laden jetzt erstmal das Jason hier runter.
Vielleicht machen wir da ne eigene.
Was hast du eigentlich mittlerweile für den Subcount?
Weiß es gar nicht.
Oh, ich guck mal nach.
Wahrscheinlich so 130 oder 140
oder sowas. Ähm,
141.
Pock.
Genau 2 Millionen.
Der deutsche Ninja am Start.
Ähm,
wir machen,
wir machen mal ne eigene, wir machen mal ne eigene Methode.
Und zwar,
ähm,
das einzige, was ich von dieser Jason-AP will,
ist ja,
abfragen, ob es nen Fehler gibt. Mehr will ich nicht.
Also machen wir mal hier irgendwas so
public, äh, nicht public, private
bool,
äh, check
for, for, for error oder sowas.
Wie gesagt, ihr wisst ja, ich bin
im Benamen von Sachen ganz, ganz toll.
So, und dann kopieren wir das mal rein.
Weil die können wir dann auch async machen.
Dann passt das. So, check for error, bla bla bla.
Get await.
Dann machen wir das hier mal raus.
Machen wir hier all gleich.
Machen wir hier rein,
dass das alles ein bisschen kürzer ist.
So, da kann man das nämlich schon gleich wieder viel schöner lesen.
Was hat er denn für Schmerzen? Achso, ja.
Return true.
Es gibt einfach immer Fehler.
Ähm, was hat er für Schmerzen hier?
Warum mag er nicht?
Achso.
Vielleicht soll ich das auch mal da drinnen schreiben
anstatt da oben irgendwo, ne?
Äh, genau. Und wenn es async ist,
müssen wir einen task
bool zurückgeben.
Geht das nicht?
Okay.
Float, string, alles gut.
Ähm, jetzt geben, jetzt lassen wir uns mal
den, ähm,
das sollte jetzt hier einfach der
JSON-String sein von
von diesem Paket.
Wir haben übrigens das falsche Paket ausgewählt.
Das ist unser test-Paket.
Wahrscheinlich, wenn wir fertig entwickelt sind,
sind wir bei dpd erstmal geblacklisted.
Komplett geblacklisted.
Gunnar, was hackst du heute?
Äh, die dpd-API.
Wobei, ich hack's heute nicht.
Ich verwende die offizielle
API-Dokumentation, die ich hier gefunden hab.
Auch wenn die sehr merkwürdig ist.
Und beinhaltet, dass wir einen CSV
parsen müssen.
Wow! Alter, Sibaro,
was ist jetzt los?
Hast du, gab's
Gehalt oder was? POC?
Alter, huge.
Was ist da los, äh?
Wir haben ja den Sibaro.
10 Stufe 1 Subs.
Okay, 10 mal klicken.
Wen haben wir da?
Der Sibaro verschenkt an
Koi-Boy666,
Endless Dimension, Four Steps,
X-Whites, Yara97,
Sidelane, Newton814,
Dubnox26
und
Podrumo88.
Hello.
Ah, das ist ja lustig.
Äh, Beatbrot, ich wollte dir gerade
ein Abo schenken.
Ähm, und ich hab festgestellt, dass ich meine eigenen
Abos bezahlen muss.
Dann
verschenke ich doch kein Abo.
Big Brain, ne?
Ich dachte, ich könnte es jetzt einfach
anklicken und du kriegst eins.
Nachdem ich meine eigenen Abos
bezahlen muss.
Ähm, mach ich's dann doch nicht.
Stimmt, aber kriegst du 2 Euro
zurück. Oh, das ist Big Brain.
Also im Prinzip, wenn ich selbst
in den Subscription gifte, bedeutet das
eigentlich, ich bezahle an Twitch
2,50, oder?
Weil 2,50 kriege ich wieder?
Ja, Beatbrot.
Sibaro, jetzt übertreib's man nicht, ey.
Jetzt übertreib's man nicht.
Pog. Huge.
Da hab ich den richtigen
gemoddet.
Ich bin da, ich bin
da komplett sellout, ja?
Also wenn einer 50 Subscriber giftet, oder so,
kriegt er Instant Mod. Guckt mich nicht.
Sellout easy, easy sellout easy
live, hab kein Ding.
Hast du Saps hier im Chat? Ja, ist es.
Ich muss echt sagen, ich find,
ich find das, also der Chat ist, wie gesagt,
wir haben ja auch hier Cute Chat
am Start, und ich find's super,
dass es in jedem Stream sind,
sind sehr oft die gleichen Leute,
ja, das find ich, find ich sehr nice.
Na, wenn ich hier so durchguck,
ich kenn, ich kenn fast, fast jeden hab ich schon mal gesehen.
Den Steffkris hab ich schon gesehen, Jojo haben wir schon öfters
gesehen, Jelora hab ich auch schon öfters
gesehen, der Enderboy ist auch schon am Start.
Äh, ganz schön sneaky, Pog.
Ähm, Twitch Prime.
Sa-sa-sa-
Samuskrai Prime.
Samu-na-na-na-nice.
Dankeschön, Twitch Prime.
Ähm,
Twitch Bot as a Service, ja. Wen haben wir denn hier sonst noch?
Den Beat Prot, den hab ich auch schon gesehen.
Der Moonbeer ist auch öfters mal am Start.
Dann haben wir, ähm, den Patrick,
der ist natürlich auch, der Sibaro eh.
Ähm, der Kalf ist auch am Start
öfters, der Boss FTW ist auch da,
der Milchmann ist auch oft da, Void Danny
haben wir auch schon öfters gesehen, Boss FTW auch.
Ähm,
Air Worker
ist auch öfters am Start.
Tribolon ist auch öfters am Start.
Zutona ist
öfters am Start. Sidelane hab ich
heute, glaub ich, zum ersten Mal
gesehen.
Ganz schön sneaky,
hab ich auch, glaub ich, zum ersten Mal gesehen.
Der Haze sagt mir auch nix.
Den haben wir sonst
noch hier.
Der Daniel ist auch öfters da.
Dry
den, der Name sagt
mir auch was.
Der Kwai ist auch öfters da.
So, ich scroll jetzt nicht den ganzen Chat
durch, wer alles da ist, aber, ähm,
der Haze, das kann natürlich sein.
Ich, äh, sag mal so,
ich seh natürlich nur die Leute, die schreiben, ne?
Ich hab ja keine Zuschauerliste.
Gibt's bei Twitch eigentlich auch Analytics
von Zuschauern? Äh, ich glaube schon,
hab ich mir aber noch nie angeguckt.
Ich glaube, dass es sowas gibt.
Der Matt ist auch öfters dabei, ja, das stimmt.
Twitch.
Ups.
Okay, machen wir weiter, schon 20 Uhr.
Sonst kommen wir heute wieder nicht über zwei Zeilen
Hallo Welt raus.
Ähm, okay.
Weiter im Text.
Hier aufrufen, das Ganze.
Check for error.
ID.
Okay, gucken wir, ob da jetzt,
ob da jetzt, äh,
ja, passt, okay.
Jason Abbey von DPD-Abfragen funktioniert.
Das ist doch schon mal ganz nice.
Achso, äh,
übrigens, wir machen das,
machen das doch nicht.
Wozu sollen wir das S-Sync machen?
Für einen API-Aufruf, auf den wir eh,
auf den wir eh warten müssen.
Das ist eigentlich, äh, Overkill.
Result, gut, ist,
äh, ist egal.
Ich hab letztens in einem Webcast gesehen,
dass man, dass man Result nicht verwenden soll,
sondern
get a waiter, get result.
Weil's dann automatisch die Exception,
falls es eine gibt, unwrapped.
Aber ich find das so unleserlich, ich schreib immer nur Result.
Weil.
Best Practice, genau.
So sieht's aus.
Subscriben ist eindeutig Best Practice.
Ja.
Also sozusagen, ähm,
das dann.
SARS.
Subscriber as a Service.
Sam ist, äh,
nicht nur Huge Brain, das ist
2000 IQ.
So, wieviel, wieviel Subs haben wir denn jetzt eigentlich?
Das hab ich eben gerade geguckt, voll die Übersicht,
Übersicht verloren, ja.
Ah, das hat's, Streamlabs hat's
noch gar nicht mitgekriegt.
Oder der Sibaro hat
gebated, 10 Subs gegiftet und dann gleich
wieder gecancelt.
Aber ich glaub, das geht gar nicht. Ich glaub, man kann
gegiftete Subs nicht canceln.
Wieviele Subs sind das schon? Eben war's 141,
jetzt müssten's, jetzt müssten's so 13 mehr
sein oder so. Also die 150 haben wir
geknackt. Das heißt, wir haben sogar, glaube ich,
mittlerweile schon ein weiteres Emote
freigeschaltet. Also jetzt hab ich
quasi, äh, ein Emote
mehr, was ich nicht verwende.
Verwendet habe. Ich hab ja, ich hab ja noch gar
kein Emote. Das einzige, was wir haben, ist
das Subbadged.
Das ist auch ein geiles,
geiles Satz. Aber ich kann das,
glaube ich, nur schwer
chargebacken.
Patrick,
eine, das heißt,
ihr kriegt jetzt ein Low-Level-Programming
Drill bei euch.
Das ist natürlich sehr pock.
Ähm, okay, weiter im Text.
Das dauert schon wieder, dauert schon.
Ähm, wir gucken jetzt,
ob in dem Result, in dem Result,
Error gesetzt ist.
Oh, ich glaub, wir sind geblacklisted.
Guck mal, wie lang das dauert.
Guck mal, wie lang das dauert.
Kann das sein, dass wir uns geblacklisted
haben oder irgendwie sowas in der Richtung?
Ach Quatsch, ich ruf das Ganze gar nicht
auf. Ich bin ja auch hier
Hardcore, äh, Hardcore-Pepega-
Loop. Okay, also, gucken wir mal,
wenn Check Error,
wenn das, äh, wenn das
True zurückliefert, dann, äh,
dann gehen wir,
dann gehen wir erstmal raus
und liefern nix zurück,
wenn das den Error hat. Wir könnten allerdings
auch ne Error Message,
wozu den DPD-Tracker,
äh, das kann ich dir zeigen, wir haben, wir
basteln ein eigenes, ein eigenes Tracking-Tool,
was aktuell allerdings
nur, äh, DHL kann.
Ich hab's jetzt leider nicht auf, glaub ich.
Ne, ich starte
es mal. Der Versand-Track,
so. Die nette
Network-Marketing-Mucke. Keine Ahnung, das ist
ne 8-8-8-Stunden-Playlist auf
auf YouTube.
Genau, wir haben hier den Versand-Tracker,
der aktuell nur DHL kann. Der kann dir sagen,
äh, wo dein Zeug ist,
äh, und kann dir Benachrichtigungen schicken.
Und der eigentliche Trick
dabei ist, weil Versand-Tracker,
wo du manuell, ähm,
Sachen hinzufügen musst, gibt's ja wie Sand am Meer,
das ist ja nix Neues. Ähm,
was mir allerdings fehlt ist,
ein Versand-Tracker, der sich automatisch
die Bestellungen, die ich gemacht habe,
einsammeln kann.
Zum Beispiel aus nem E-Mail-Postfach.
Und das dann für mich trackt und
mir immer Bescheid sagt.
Das basteln wir grade. Ähm,
das heißt, wir können ja nicht einfach die Webseite
von DPD verwenden, weil da können wir nicht automatisch
Bescheid auswerten damit.
Äh,
Prime-Sub!
Hast Flex.
Bitch Prime, dankeschön, nice.
Hast du vor, den Tracker in nem Store anzubieten?
Den gibt's kostenlos auf GitHub dann.
Falscher Sound?
Oh, stimmt! Falscher Sound!
Prime!
Okay, ähm,
ich muss mich jetzt mal konzentrieren.
Weiter im Text. Wir rufen den Kram ab.
Genau, da haben wir das auch.
So, und jetzt müssen wir den JSON-Kram
parsen.
Dürfte auch relativ easy sein, den JSON-Kram
zu parsen.
Ähm,
sagen wir jetzt einfach mal hier, dass ich
JSON gleich JObject
...
JObject...
Okay, wir müssen...
Ich kann nicht mehr schreiben, ey.
JObject!
Da müssen wir den
JSON-Parser mal installieren im Hintergrund.
Ja, MrMilchmann, das
äh, kenn ich.
Ich geh auch immer, wenn ich was
machen will, auf Twitch.
Denk mir so, ey, lass den Twitch nebenbei laufen.
Und dann stell ich fest, ich mach
nichts mehr, wenn ich Twitch gucke.
So, wir parsen jetzt das...
Wir parsen jetzt das JSON
in ein JSON-Object.
Und dann
holen wir uns
den Error-Key da raus.
Na, das war ja relativ, äh...
Ich zeig's nochmal.
Das war relativ einfach.
Äh, ach so.
Ich müsste vielleicht auch mal einen Code eingeben,
der einen Fehler produziert, ne?
Oh, ich hab...
Ich hab den Scheiß ja noch hardcoded drin.
Omega lul.
Ähm, okay, Moment.
Paketnummer.
Oh, das machen wir hinten hin.
Ja, wie wir ja alle wissen.
Äh, bei 0 Parametern ist die Reihenfolge ziemlich egal.
Plus ID.
Okay, und jetzt produzieren wir mal ein...
Gucken wir mal, ob's auch funktioniert.
Hallo, Nimolo.
Error-Reading-Object. Ja, okay, es gibt ja auch keinen Fehler.
So, jetzt müssen wir uns das Error...
Oder auch nicht.
Wo ist das Problem?
Das ist doch super, super simples...
Super simples Chasen, eigentlich.
Da soll's doch gar kein Problem geben.
Warum kann er das nicht parsen?
Der Fakt ist doch vollkommen Standard hier.
Parcel-Number, bla bla bla. Details-Error.
Code. No stat...
No statuses found for your shipment.
Program.
Ja, ich, ich, äh, lese Program immer einmal am Tag
komplett durch, dann weiß ich Bescheid.
Ah, muss man wissen.
Und danach die üblichen anderen Dinger.
Hat C Sharp eigentlich auch Probleme,
wenn man viele Strings miteinander...
äh, concatted? Ja, hat's.
Aber das müssten schon sehr viele sein.
Also, wenn du ne Schleife machst,
keine Ahnung,
1 bis, ähm, 20 Milliarden
und machst da drin
jedes Mal ein Plus, dann ist das langsam, aber du kannst
einfach nen String-Builder verwenden.
Und ich glaub, mittlerweile
gibt's noch was anderes, aber früher hat man
immer nen String-Builder verwendet, und dann ist das schnell.
Also, und nachdem ich,
nachdem ich Program gelesen hab,
muss ich lesen, Reddit
was letzte Preis?
Seh ich auch immer gern.
Da sind Screenshots
von eBay Kleinanzeigen.
Was letzte Preis?
Da kommen dann so Dinger
wie...
Hehe, kostet 70,
könnte, könnte, kostet 40 Euro
sind Dinger für 40 Euro zu haben.
Ah, das war jetzt nicht so lustig.
Egal, das
guck ich mir dann auch öfters an.
Was letzte Preis?
Reddit 600 Euro, das kenn ich nicht.
Was ich auch noch ab und zu mal
lese, ist, äh, wenn mir die
Leute im Zug so sehr auf den Sack gegangen ist,
dieses, ähm, wie heißt das?
Dieses, ich hasse Kinder, Reddit,
wo sich alle drüber auslassen,
wie kacke Kinder sind, vor allem im Zug.
Also nicht vor allem im Zug,
so generell, wie kacke Kinder sind,
dann kommen dann auch ab und zu Leute, die sind, die haben
etwas, nennen wir's mal etwas
radikale Ansichten, die schreiben
dann so Dinger wie, ähm,
ich hasse Kinder und lasse mich kastrieren.
Und sowas.
Da denk ich mir auch immer, okay, gut, dass du uns das auf Reddit mitteilst.
Wollte ich schon immer
mal wissen. Ich mein, das ist eigentlich
die logische Konsequenz, ja.
Eigentlich, eigentlich ist das
gar nicht dumm, eigentlich ist das next level.
Äh, wo, wo, wo, wo
ist jetzt eigentlich genau das Problem, dass der Ding
Wo genau ist jetzt das
Problem, dass der mein Jason nicht passen kann?
Error Code.
Ist doch vollkommen okay, Error.
Ach!
Das ist doch mal in nem Array drin. Ah!
Das ist okay.
Wundert mich bei DPD, wundert mich
nichts mehr. Also müssen wir nicht
JObject parsen, sondern
JArray
müssen wir parsen.
Ähm, und
äh, danach müssen wir uns das erste
das erste
rausholen. Geht's.
So, und dann sollte das eigentlich auch funktionieren, wenn ich den Error
jetzt ausgebe.
Ja, funktioniert. Okay, da. Code.
Start aus 200.
So, das heißt, wir können jetzt sagen, return
return, ähm
ob Error 0 ist oder nicht. Also sprich,
wenn Error 0 ist
wenn, wenn
Error 0 ist
haben wir hier return
was ist hier, äh, String
0, was haben wir hier, 0, White Space
äh, Error
dann
so
das war's. Ach so, hier.
Zu String. Ach ne, Moment.
Ha, stopp, stopp, stopp, stopp, stopp.
Stimmt nicht so genau. Da war doch noch was.
Da war doch noch was drinnen, ne? Ähm
Ja, Errorcode
fabrizieren.
Ah, ich muss, ich muss, ähm
Achso, ne, passt, passt.
Wenn es 0
ist, dann haben wir kein Error.
So einfach.
So.
Wer guckt jetzt?
Gibt es einen Fehler? Wenn es einen Fehler gibt?
Meistern
Error. Können wir mal ausprobieren, ob das funktioniert.
Ähm
Ach, gucken wir mal hier.
Error
Debug, Print
Debug, beste, ja.
Wer braucht, wer braucht Debugger?
Ja
Error, passt.
Error, passt, funktioniert.
Gut, ähm, und dann
returnen wir das Ganze einfach.
Ne, wir, wir
müssen noch einen Status reinschreiben.
Okay, also, adden wir einen neuen Status.
Ein shipment
progress.
Hier, so.
Da schreiben wir jetzt rein. Also wir wissen ja,
wenn da ein Fehler auftritt, wissen wir, dass das Ding
location, haben wir keine Ahnung.
Message, haben wir keine Ahnung.
Status wissen wir aber.
Der Status ist auf jeden Fall
invalid.
Hä?
Ach, komm mal.
Also, wenn
es einen Fehler gibt, ist der Status auf jeden Fall invalid
und updated at ist
ja gut, jetzt, jetzt gerade, in dem
Moment, wo er abgefragt hat.
So, wisst ihr, was wir noch machen könnten?
Wir konnten, äh
Heute ist eigentlich cool, heute kann ich mich
ganz gut konzentrieren, da kommt man ein bisschen, kommt man ein bisschen
ein bisschen vorwärts, ja.
Ähm
Wir könnten, wir könnten die
Wir könnten hier noch die, die Error
Nachricht zurückgeben, also irgendwie sowas wie
hier out, warm,
mess, hat.
Ach, Moment, geht gar nicht hier wahr
an der Stelle, String Message.
Oder
Error Message.
So, ähm
Error Message
ist leer.
Kommt aufs gleiche raus.
Ähm, dann machen wir das
Return weg, jetzt sagen wir, if
wenn
Überlegen, äh, wenn es
keinen, wenn es
keinen Fehler gibt,
also hier wollen wir auf jeden Fall schon mal
return false.
Ne, wenn es einen Fehler gibt, so rum,
wenn es einen Fehler gibt,
also wenn da was drinne steht, wenn es
einen Fehler gibt, dann
wollen wir die Error Message
return, äh, die Error Message
mit zurückgeben.
Also Error Message,
Error
ähm, Message
zu String
zack, return true.
So.
So müsste das
funktionieren. Und hier sagen wir jetzt, war
au, halt,
was ist das Problem?
Na?
Out, war
Error Message.
Oder Error einfach nur.
Sogar gut, dass ich das Error
Message gehört habe, da unten hieß das Ding, hieß schon mal Error.
Ähm,
und
dann, können wir jetzt nämlich die Message
Message gleich zuweisen.
Nämlich
Error Message. Das ist übrigens ein neues C Sharp 7
Feature, dass
man quasi, ähm,
das direkt zuweisen kann, eine Variable,
und das dann auch gleich in einem if, also
direkt inline machen kann.
Das ist ganz nützlich.
Übrigens, ich bin
grad relativ konzentriert, wenn ich über irgendwelche,
wenn ich Fragen komplett
übersehe, es bleibt mich einfach mal ein bisschen zu.
So, okay, jetzt kriegen wir hier schon mal
was ordentliches zurück.
Haben wir, sollten wir auch eine Status Message zurück kriegen?
Genau. No statuses found
for your shipment.
Status
Invalid. Aktuelle
Uhrzeit. Sehr gut.
Das gefällt mir schon mal.
So, hier mal das
Debug wieder raus machen. Okay, weiter.
Jetzt kommt diese komische
CSV-AP.
Jetzt kommt diese, ich guck mal, ob ich
im Chat irgendwas gesehen habe.
Im Chat ist überhaupt nichts drin.
Also Chat ist, äh,
Diskussion am Start,
aber ich wurde nicht erwähnt. Das heißt, ich ignoriere das jetzt mal,
bis da irgendwas kommt.
Ähm, gut, also.
So, jetzt müssen wir diese komische CSV-AP
mal anzapfen.
Also,
war CSV
HTTP Client
get string?
Und zwar
brauchen wir jetzt von dieser
Url das Ganze, und zwar
wo ist die, wo ist die CSV-AP?
Da ist die CSV-AP.
Kommt euch das auch so komisch
vor, CSV-AP zu sagen?
Es gibt
keine, also, niemand
macht CSV-APs.
Außer, man hat DPD jetzt auch, genau.
Okay, ähm,
dann gehen wir das CSV mal aus.
Gucken, ob das funktioniert.
Achso.
Vielleicht sollte ich
auch die Nummer anpassen, dass
...
Ah, vielleicht. Achso,
das Ding ist nicht, nicht.
Ja, da steht da, guck, da haben wir
unser superhübsches, äh,
superhübsches CSV.
Wir parsen das von
Hand, oder? Wir holen,
wir laden uns jetzt keine CSV-Library
oder so runter. Ich meine, im Endeffekt
müssen wir das obere, müssen wir eigentlich
die erste Zeile wegschmeißen,
die nächste Zeile splitten und irgendwie
das Feld rausnehmen, das Feld rausnehmen,
das Feld rausnehmen und das Feld rausnehmen.
Da brauchen wir
auch keine, keine extra CSV-Library
für.
Ähm,
was genau ist eigentlich
der Use Case von Out-Parametern?
Also in welchem konkreten Fall sind die nützlich?
Zum Beispiel genau für sowas hier.
Also, in der Regel, wenn du mehr als
einen Rückgabewert brauchst,
sind die ganz praktisch.
Wo das in .NET relativ
oft verwendet wird, ist sowas hier,
tryPath. Da hast du eine Funktion,
tryPath,
die gibt dir dann halt ein Out-Parameter,
also da übergibst du dann irgendwie, was weiß ich,
das zum Parsen
und kriegst dann ein Out-Parameter zurück,
der dir dann quasi das, ähm,
Ergebnis
von diesem Parse-Vorgang gibt
und, ähm,
du kannst allerdings hier an dem eigentlichen Rückgabewert erkennen,
ob das funktioniert hat. Also im Prinzip
ein bisschen sowas wie, wie
hier oben. Du guckst, ob's
ein Fehler ist, ob's einen Fehler gibt
und wenn's quasi einen Fehler gegeben hat
oder wenn hier was drinsteht, dann kannst du es gleich verwenden.
Es gibt, es gibt aber mehrere Möglichkeiten.
Ähm,
Exceptions, nee, an der Stelle, ich will ja keine
Exception werfen.
Ich, ich, das ist vollkommen
okay, wenn's einen Fehler gibt.
Wenn's einen Fehler gibt, eine Exception werfe ich, wenn die Webseite
nicht erreichbar ist, ja. Aber
wenn's einen Fehler gibt, ist okay.
Das ist ja auch ein gültiger Status.
Der Fehler besagt in dem Fall, die
Tracking-Nummer stimmt nicht.
Ja, wenn du jetzt keine Verbindung zur
Webseite kriegst, dann kannst du eine Exception werfen
oder die Exception nicht abfangen vom
HTTP-Client. Es gibt noch
eine, also es gibt noch ein paar andere
Varianten, wie man mehrere
Rückgabeparameter machen kann in C-Sharp.
Du kannst einen Tuppel zurückgeben
mit mehreren Rückgabeparametern.
Du kannst natürlich eine Klasse basteln
oder irgendwie ein Struct, wo du es zurückgibst.
Ähm, oder was es jetzt ganz neu
gibt, ist, es gibt jetzt offiziellen Support
für mehrere Rückgabeparameter.
Den verwende ich aber so gut wie nie.
Der sieht, der sieht so aus.
Ich muss mal gucken,
ob ich das jetzt zusammenkriege.
Der sieht, der sieht ungefähr
äh, Test,
der sieht ungefähr so aus.
Ich probier das mal zusammenzufuddeln.
Ähm, mehrere
Return-Parameter. Wie ging das?
Bool,
R1 oder irgendwie
was weiß ich.
Das da und dann
String.
Das hier.
Hm.
Irgendwie so ging das.
Aber die Syntax ist natürlich komplett falsch,
wie ich sie gerade verwendet.
So. Ah, das sieht
schon besser aus.
Genau, das ist auch ein Tuppel intern.
Aber das Schöne ist, dass das quasi
dann auch richtig benannt ist.
Also sprich, wenn ich das hier dann aufrufe,
also wir rufen
das jetzt nicht auf, wir gucken uns bloß die IntelliSense
dazu an. Wenn ich das hier dann aufrufe,
Test, Blub,
dann sehe ich hier als
als, ups,
als Return-Wert sehe ich die Dinger
schon da drinnen.
Meine zwei Return-Werte auch noch richtig benannt.
Das ist quasi
die neueste Variante, wie man mehrere Return-Werte
haben kann. Unter der Haube ist das aber auch
ein Tuppel, was automatisch
quasi geunboxed wird.
Das ist einfach syntaktisch
ein bisschen schöner. Das hätten wir hier auch machen können.
Ja, wir hätten auch hier ohne Probleme
sagen können, Bool irgendwas
ähm, also geht
genauso. Geht ganz genauso.
Mittlerweile ist die
Sharp eh so eine Sprache, wo manche
Sachen tatsächlich auf
mehr als
eine Art und Weise
doch gemacht, oder?
Error-Message
gleich
Ding, empty.
Ah, gut.
Perfekt.
Die Sharp wird zu C++. Davon sind wir
wirklich zum Glück noch meilenweit entfernt.
Das wäre das.
Dann würde ich, keine Ahnung, würde ich
zu
Rust wechseln oder zu Go
oder
zu
Javascript eher nicht.
Ne, zu Java auch nicht.
Ähm
Da würde ich mir wahrscheinlich wirklich ernsthaft
Go angucken, wenn das der Fall ist.
Dann mach ich Swift.
Swift mach ich.
Swift mach ich ab dann.
Oder ich mach Kotlin unter Java.
Oder Java VM.
Das ist auch...
Kotlin hat sich auch sehr schön viele Sachen von
C Sharp abgeguckt, von Ruby abgeguckt, von Java
abgeguckt, also...
An sich ist das wirklich eine ganz, ganz
hübsche Sache, was ich
bis jetzt gesehen hab.
Rust, ja doch, Rust ist auch sehr nice.
Ok, also
wir haben das CSV runtergeladen.
Ähm...
Was
meinst du, wie viele Produkte, Exporte,
Maschinen im CSV sind, fragt der KlocksHD.
Saumäßig viele, könnte ich mir
vorstellen. Saumäßig
viele. Bei uns auf der Arbeit gibt's
auch noch sauviele Excel-Tabellen und CSVs
und sowas, wo ich mir auch immer denke, Alter, wir sind im Jahr
2019. Muss
das echt sein?
Gut, ähm...
Also, wir splitten das
jetzt mal. Das CSV
wird jetzt mal gesplittet
an Newlines.
Wir splitten das an
Newlines.
Und dann sagen wir, der
Header ist
die erste Zeile.
Dann haben wir,
nennen wir's mal, äh,
Body, Body? Content?
Content? Ne, keine Ahnung.
Body? Content?
Äh...
Also die restlichen Zeilen. Data.
Data! Data ist immer so schön
nichtssagend.
Data. Ok.
Ich glaub Records
heißt, ich glaub Records heißt es bei CSV.
Payload!
Payload ist ja alles.
Wisst ihr, was das Beste ist?
Wir nennen das einfach Temp.
Wenn da nix einfällt,
dann wird das ganze immer Temp.
V1.
Ne, ne, wir nennen's nicht Temp. Komm, wir nennen's,
wir nennen's, komm, wir nennen's Content.
Wurscht. Ne, wir nehmen einfach das erste,
was mir eingefallen ist und gut ist.
So, und das sind,
und jetzt können wir ein tolles neues C Sharp 8
Feature verwenden. Hab ich nämlich
äh, erst heute Morgen
einen Artikel drüber gelesen.
Und zwar, C Sharp 8 kann jetzt
Range Operator.
Also man kann jetzt hier sowas machen.
Eins bis Ende.
Falls man das so schreibt.
Da bin ich mir jetzt grad nicht so sicher, ob man das so schreibt.
Ja. Das ist neu und das ist
richtig praktisch.
Das ist wirklich cool. Ansonsten wär
das gar nicht so einfach gewesen. Ansonsten hätte ich
hier irgendwie so was sagen müssen.
Lines, ähm, Split. Ne, nicht Lines.
Äh, Array, äh, Split.
Und, aber so ist das
mit dem Range Operator, ist das richtig, richtig
Nice!
So.
Gehen wir mal Content aus.
Gehen wir jetzt mal
Content aus. Ja, Content.
Und wir gucken mal, ob ich
das mit dem Range Operator richtig gemacht hab.
Einfach 1 Punkt Punkt.
Ja, echt? Wow.
Okay, das...
1 Punkt Punkt,
sagste?
Ah! 1 Punkt.
Ja, das muss ich... Das ist cool.
Das ist noch schöner.
Ich dachte, es gäbe vielleicht einen Operator extra so nach dem Motto
von hinten oder sowas.
Und jetzt nicht auf falsche Ideen kommen, Chat.
Ich mein, das Array von hinten.
Aber so ist es natürlich noch besser.
Tata Stre... Was?
Äh, ähm...
Tata Stresemann sagt... Ach!
Du warst der, der den Ryzen gewonnen hat. Genau.
Er schreibt, er hat sein Board
geflasht und lief auf Anhieb. Das ist nice.
Okay, ähm...
Komm, wir nennen's Records.
Der Mist heißt...
Der Mist heißt Records in CSV.
Also,
For Record in Records.
Wobei, nee.
Denn Record ist ein einzelner
Eintrag aus einer Zeile.
Das heißt,
Records in
Dings, genau.
Ähm...
Und den wollen wir
jetzt splitten.
Geht das net?
Geht das net splitten?
Achso, weil es mehrere Zeilen sind.
Okay, also sagen wir Select.
Warum gibt's das? Hab ich keinen Link importiert.
Kann das sein?
Ha!
So, ähm... Wir splitten
jetzt jede
Zeile an, weil
ich mein, das ist eine CSV.
Das heißt, wir splitten jede Zeile
an einem Komma.
Ich mein, das ist halt CSV.
Und CSVs muss man am
Komma splitten.
Ähm...
MoinFlow96...
Was ist das in Zeile 83?
Das ist ein C Sharp 8 Feature.
Das ist, ähm...
Range Operator.
Das ist vom ersten Element, also
vom zweiten Element,
von der Logik her, ja.
Von Index 1 bis zum Ende des Arrays.
Ähm...
Die Range.
Also alle Zeilen vom
ersten, von Index 1
bis zum Ende.
Die Kolon...
Es war, glaube ich, Komma.
War Komma.
Es war ziemlich sicher Komma.
Wegen dem Header, den man überspringt.
Genau. Ähm...
Was ich jetzt nochmal mache ist, ich lass mir das
nochmal ausgeben.
Und kopier mir mal eine Beispiel
Ausgabe
von dem CSV
in mein Visual Studio rein.
Dass ich mir merken kann, wie die Ausgabe aussieht.
Dass ich gleich weiß,
welche Felder ich da
rausholen muss und welche nicht.
Okay, ähm...
So. Dann sind es doch nicht Records.
Doch, doch, sie sind Records.
Genau. Wir kriegen jetzt ja hier...
Wir kriegen jetzt hier ein Array raus mit, ähm...
Wobei, was mache ich denn da?
Funktioniert das überhaupt?
Funktioniert das überhaupt, was ich hier treibe?
Was war das jetzt?
Kommt denn hier raus?
Kommt ein String Array raus?
Ach ja, doch.
Genau, wir haben...
Wir haben ein
Numerable mit einem String Array drin.
Also quasi ein Array in einem Array, wenn man so will.
Stimmt, ja, das ergibt Sinn.
AnotherSteiny, dankeschön.
TwitchPrime.
Poc.
SirHitRand, äh...
Wir...
ähm... programmieren für unser Tracking-Tool
den Tracker
für DPD. Und DPD hat eine sehr merkwürdige
API mit JSON und
CSV-Dateien, die man parsen muss.
Nice.
Nice.
Baumi1237, TwitchPrime, dankeschön, nice.
Poc.
TwitchPrime.
Also, wenn man... wenn man
subscribt, ist man... kriegt man automatisch
ein viel, viel größeres Hirn.
Ich glaube, das ist allen klar.
Okay, jetzt können wir uns das Ganze
raus... Also, wir haben jetzt quasi
einen Array in einem Array drin.
Was auch, wenn man einen Sub geschenkt bekommt...
Was, was ist, wenn man einen
Sub geschenkt... Ja, ja, ja.
Wenn man einen Sub... Achso,
ich hab's nicht gecheckt. Wenn man einen Sub geschenkt
bekommt, ist es sogar so, dass beide
HugeBrain haben. Derjenige, der den
Sub giftet und derjenige, der den Sub
äh, received. Das ist quasi
DoppelBrain.
Das ist... das ist nicht HugeBrain, das ist,
ich würd schon sagen, fast MassiveBrain.
HugeBrain.
Ja, es ist auch schwierig, sich hier auf den
Namen zu konzentrieren, Chat zu lesen, plus
sich noch zu merken, was man da alles erzählt.
Okay, auf geht's.
Ähm, Date.
Nicht Dater. Date.
Äh, Date ist
das erste Feld.
Also, das da.
Das ist Date.
Ähm, Next.
So. Nächstes Feld ist
Time.
Das, das da.
Äh, dann haben wir als
nächstes Feld...
City.
Das ist
0, 1, 2, 3, 4.
Dann haben wir als nächstes Feld, was wir brauchen, die
Message.
Die Message ist
0, 1, 2, 3, 4,
5. So.
Ähm, was wir jetzt noch machen müssen, wir müssen
Date und Time parsen in ein
DateTimeObject,
weil wir sonst nicht ordentlich, äh, verarbeiten
können. Also.
Aber hier, DateTime ist
ähm, DateTime
ParsExact.
Das ist, manche, manche .NET
APIs sind ein bisschen merkwürdig. Man würde
normalerweise vermuten,
dass man einfach sagen kann,
äh, DateTimePars.
Das funktioniert nicht. Man muss sagen DateTimeParsExact.
Weil,
weil es nur Microsoft,
weil nur da kann man ein Format
String angeben, was man, was man
braucht. So.
Als String wollen wir in dem Fall unser
Date.
Wir parsen, wir parsen
erstmal nur das Date. Das ist ein bisschen,
das ist ein bisschen doof, ja. Es ist 0,
7, 0, 2, 2, 0,
19. Also, Jahr,
Tag,
Monat. So. Und jetzt müssen
wir angeben, wie das Ganze
formatiert ist. Also sprich,
was welcher Buchstabe
sagt. Ich probier das jetzt mal ganz
naiv und sage,
es ist Monat,
Monat,
Tag, Tag,
Jahr, Jahr.
Aber das wird wahrscheinlich nicht funktionieren.
Was will der noch? Will der noch mehr Parameter?
FormatProvider braucht keinen.
Schauen wir mal, ob das funktioniert. Wahrscheinlich,
wahrscheinlich. Da muss ich jedes Mal nachgucken,
was die passenden Format, äh, Parameter
sind, von wie die, wie die Dinger heißen.
Gibt alles mögliche. Liste
funktioniert nicht.
String 0, 7, 0, 2 was
not recognized as valid
DateTime. Also, müssen wir
auf die Microsoft-Doku-Seite gucken.
Format DateTime.
Was es da alles gibt.
Hier noch ein schönes Beispiel.
Also, de, de, de, blub, blub,
blub, blub. Ach, m, m
is minutes.
Ja, ich will das haben.
Will großes m haben.
Will großes m haben.
Und dann,
was ist day?
Day ist richtig und ja,
here no leading zero.
Here leading zero.
Ah, ja, ja, ja.
Das war jetzt Rand.
Der hat ein Abo an Enderboy verschenkt. Pock.
Nice, dankeschön.
Ja, es ist, da hat sich das Gehirn quasi, quasi
verdoppelt gerade.
Okay, also, wahrscheinlich
einfach nur
groß machen und dann geht's.
Ja, wo ist dann das Problem?
Wo ist das Problem?
Warum geht das nicht?
Das ist doch voll logisch,
dass das geht.
Großes m ist Monat.
Wir haben da Monat vorne drinstehen.
Dreimal y
ist, ja,
haben wir auch, viermal y ist ja,
haben wir auch drinstehen. Und kleines d
ist der Monat, äh, ist der
der Tag.
Das muss auch stimmen. Das ist richtig.
Wo ist das Problem?
Nehmen wir mal date aus.
Vielleicht ist da ein Leerzeichen
davor oder dahinter oder sowas.
Aha!
Ach!
Ach!
Das sind Quotes drumherum.
Hier sind keine Quotes drumherum.
Wahrscheinlich
filtert das OpenOffice raus.
Also.
Replace Quotes
durch nix.
Wobei, das können wir,
das könnten wir einfacher haben.
Wir könnten, wir könnten direkt hier oben,
könnten direkt hier oben replaced.
Ich hoffe, das funktioniert jetzt noch.
Fuck!
Jetzt habe ich zu viel replaced.
Lowbrain.
Jetzt habe ich zu viel replaced.
Okay, das funktioniert. Wir replace, wir replace
unten.
Wir, wir replace unten.
Index was out of...
Index was...
Das ist die DPD-Kacke, genau.
Eine Statusbeschreibung
ein Komma enthält,
denke ich, ich würde mal sagen, eine Statusbeschreibung
darf kein Komma enthalten.
Wo ist denn das?
Ja, weil das ein CSV ist.
Geh mal davon aus, dass in einem CSV
kein Komma vorkommen darf.
Außer, wenn man das trennen will.
Ist deshalb nicht alles
in Quotes gerappt? Kein Schimmer.
Was ist das Problem hier?
Ich glaube, die DPD-API
ist einfach nur lahm gerade.
Innerhalb
der Anführungszeichen dürfen Kommas vorkommen?
Da bin ich mir nicht so sicher.
Ehrlich gesagt weiß ich das nicht. Ob das...
ob das erlaubt ist.
Ich weiß gar nicht, ob die Anführungszeichen
überhaupt einen tieferen Sinn haben.
NoStatusFound?
Ich glaube, die DPD-API mag
nicht mehr.
Probier mal das als dritten Parameter.
Wir haben gerade überhaupt nicht das Problem, dass das Paasen
nicht funktioniert. Die DPD-API
liefert uns gerade keine Antwort.
Ich glaube, wir wurden gerade gedrosselt oder sowas, weil wir
zu oft darauf zugegriffen haben.
Wir müssen wahrscheinlich jetzt 2-3 Minuten warten
oder so, bis wir wieder darauf zugreifen können.
Wir können einfach mal eine andere.
Ich hab doch noch eine andere.
Ich hab doch hier genug DPD-
DPD-Keys.
Ah.
Jetzt geht's wieder.
Vasilois1905
Twitch Prime sagt POC.
POC, dankeschön.
So, und jetzt machen wir das mal hier.
Replace.
Hä? Was ist das Problem?
Übrigens, man sieht hier, dass es prinzipiell
funktioniert, ne?
Mit dem Paasen, dass das klappt.
Okay.
Gucken wir mal in unseren Debugger rein.
Records. Bring one.
Hm? Was?
Das könnte tatsächlich
sein, ja. Das könnte
tatsächlich sein, dass die letzte Zeile
leer ist. Gucken wir mal
nach. Die letzte Zeile
ist leer.
Achso.
Ja gut, das ergibt Sinn, dass es nicht
funktioniert, ne?
Wie ist denn die Syntax von
1 bis sowas
hier, hm? Okay, da müssen wir
nachkommen. Äh, C-Sharp
8 Range
Operator.
System Range.
Ach, guck mal da.
Hütchen 1.
Ey.
Doch, Hütchen 1.
Wenn man das in einem Range...
Ach, hier!
Einfach, einfach so?
So?
Ja, Sly, Sly, das kriegt
jeder hin. Aber ich will das mit dem Range Operator
machen. So?
Och, komm DPD, mach hinne.
Minus 1 hätte ich auch
intuitiver gefunden.
In Ruby ist das auch minus 1.
Deswegen habe ich es gerade ausprobiert.
Wahrscheinlich in Python auch so.
Die DPD API
mag das gar nicht.
Wenn man da so oft abfragt.
Die haben da was dagegen, glaube ich.
Die haben da was dagegen,
wenn man da so oft abfragt.
Die mögen das nicht.
Ich glaube, wir sind gedrosselt worden, oder so.
Fragen wir mal was ganz anderes ab,
was wir noch nie abgefragt haben.
Das hat mit der Tracking-Nummer anscheinend
nichts zu tun. Die haben wahrscheinlich, äh...
Wahrscheinlich haben die
meine API erstmal gedrosselt.
Ich gehe nicht davon aus, dass
es lange ist. Wahrscheinlich haben die einfach so ein
Limit drinne, dass ich
wahrscheinlich jetzt eine Minute warten muss, oder so.
Und dann geht's wieder.
Das ist ein scheiß System, ja.
Ist ein scheiß System.
Was willst du machen, ne?
Na gut, wir machen mal so.
Wir tun mal so, als funktioniert jetzt alles.
Dann parsen
wir noch
die Zeit.
Dann machen wir jetzt Trick 17.
Wir hängen das einfach zusammen.
Daytime. Und sagen jetzt,
wir parsen jetzt
auf, fuck. Stunde.
Stunde parsen
wir. Stunde und...
Stunde, okay. Und dann Minute
ist was. Kleines, kleines m.
Okay, also parsen
wir noch. Stunde und
zweimal kleines m.
Okay, DPD hat uns, glaube ich, echt
geratelimited.
Das sagt...
Sagt hart, ey.
Nicht rate. Rate.
Woher nimmst du die Stunde
und die Minute? Na, ich sag ihm was, was bedeutet.
Guck. Also, hier steht...
Also, es steht ja hier folgendes
drin. In Date
steht das da drin, genau so.
Und in Time
steht das da drin, genau so.
Und ich parse mir das hier
hier raus. Übrigens, das hier muss ich noch
stracen. Ich parse mir
das hier raus und hänge die zwei Sachen hintereinander.
Das heißt, ich hab dann einen String,
da steht drin, das da und das da
direkt hintereinander.
Und dann sag ich ihm, wie das ganze formatiert
ist. Nämlich, Monat...
Also, Monat, Tag, Tag, ja.
24 Stunden,
Uhr, Minute,
Minute.
Ey, NoScaler, das ist ne ziemlich gute Idee.
Müsste mal gucken, ob HTTP-Client
einen Cache drin hat. Vor allem nen Restart
überlebenden Cache.
Hast du nen Beispiel mit einstelligen Minuten?
Ja, ein M.
Haha, es funktioniert
wieder. Und unser parsen funktioniert.
Aus der API.
Ne, ich glaub, die API
ist immer im zweistelligen.
Die hat die Minuten immer zweistellig.
Ne, ja doch.
Achso, meinste. Hm.
Gute Frage, ob die...
Die Null bei Minuten werden die nicht
weglassen, oder? Da würde dann
sowas stehen wie 96.
Das ist ja mehrdeutig. Irgendwie dann...
Ne, das glaub ich nicht, dass man so was denn machen wird.
Hoffen wir mal, das machen sie nicht. Sonst kackt
unser Pars-Vorgang ab und wir müssen das noch einbauen.
So.
Jetzt haben wir das geparst. Sehr schön.
Ähm, jetzt brauchen wir...
Leute, es ist fast eins...
Wir werden heut fertig, glaub ich.
Wir werden damit tatsächlich fertig.
Add for new.
Da brauchen wir jetzt ein Progress.
Items.
Äh, okay. Progress.
Location wissen wir noch nicht.
Aber Message wissen wir. Message ist
Message. Ähm...
Location ist City.
Klar haben wir die Location. Aber die Location,
müssen wir gleich noch, gleich noch anpassen.
Die Location soll, ähm...
Seitengrad, Längengrad
rein. Jetzt müssen wir noch Reverse
Lookupen. Äh...
Location haben wir. Updated at
haben wir auch. Das ist nämlich
DateTime. Ähm...
Warum mach ich da immer... Ich kann mir das nicht angewöhnen, dass das
ein Komma ist. So, und Status
haben wir ja auch. Status...
Ah, ne. Fuck.
Oh, ne. Da hab ich jetzt keinen Bock drauf.
Was ist ein Progress-Item?
Ähm...
Das ist...
Die Klasse für...
Quasi einen Eintrag in der History
von, von nem Paket.
Also, eine Station,
wo das Paket war.
Für jede Station in der
Sende-History, in der, in der Sendeverfolgung
gibt es ein Shipment Progress
Item.
Och, ne. Das, da hab ich jetzt echt keinen...
Ich stell das mal
auf Transit, weil wisst ihr, was wir jetzt machen müssten?
Das ist das, was ich am Anfang schon angekündigt hab,
obwohl ich keine Lust drauf hab.
Wir müssten jetzt folgendes machen. Laut, laut
PDF von DPD
kann die Ausgabe
jetzt folgende Items enthalten.
Diese Tabelle
hier, kann da drinne stehen.
Wir müssten jetzt nen, nen,
nen Dictionary bauen oder nen Switch
bauen, was quasi
den Text abgleicht
und daraus uns den passenden Statuscode
ähm...
generiert.
Och, ne. Das mach ich mal Offstream.
Ich glaub, ihr wollt mir nicht zugucken, wie ich jetzt irgendwie
20 Switch, äh...
20 Zeilen in nem Switch
Statement copy-paste, oder?
Äh...
Was wird denn hier schönes programmiert, kann ich dir zeigen.
Wir haben nen Versandtracker
programmiert.
Sieht so aus, aktuell.
Aktuell kann er nur DHL.
Ähm...
Der automatisch deine E-Mails
scannt, nach neuen, ähm...
Nach neuen, äh...
Versandbestätigung
von Anbietern. Du kannst auch manuell
hinzufügen, wenn du willst, ja?
Der scannt deine E-Mails.
Wenn du ihm das erlaubst, natürlich. Du musst
natürlich dein E-Mail-Postfach hinterlegen.
Ähm, aber es läuft bei dir lokal. Das ist nix in der
Cloud oder so. Das kann man, kann man lokal starten
bei sich. Er guckt in deinem E-Mail-Postfach
nach, ähm...
ob es neue Versandbenachrichtigungen von Shops gibt.
Und trackt dann
den Versand für dich automatisch
und schickt dir Nachrichten und du kannst nachgucken,
soweit das Ganze ist. Aktuell kann er nur DHL.
Dafür kann er DHL
relativ gut. Der DHL
Versand sieht dann ungefähr so aus.
Hat sich in unterschiedlichen Stationen
anzeigen lassen und kriegst auch hier die Nachricht
drüber. Er ist grad unterwegs.
Es wird grad transportiert.
Es ist im Auto. Wird an dich, äh...
Wird an dich grade zugestellt.
Oder...
Es ist fertig.
Äh, also logischerweise verwendet ihr
deren API dafür. Ja,
aber deren API ist kacke.
Die
da muss man CSV für parsen bei DPD.
Ähm...
DHL hat ne... hat ne
schöne API.
Hat ne ziemlich gute 0815
JSON-API, an der
nix großartig raussticht.
Ähm, UPS hat glaube
ich noch ne XML-SOAP-API.
Das haben wir noch nicht ausprobiert.
Ähm, Hermes
hat nur ne, nennen wir's mal
inoffizielle JSON-API.
Die wir verwenden werden.
Und was ganz eklig wird mit Amazon
parsen. Weil Amazon hat
gar keine API-Schnittstellen für
äh, Versand.
Da müssen wir die Webseite parsen.
Was natürlich ein bisschen fehleranfällig ist.
Aber es gibt halt nix anderes, ne.
Ist das der echte?
Aber sowas von.
Java, das ist
kein Java. Aber sieht Java ähnlich.
Das
Lied Pepega.
Äh,
halt Playlist, ne.
Nützlich für Leute in
Essen bestellen. Ja, vor allem, also warum ich das ganze
gemacht hab, ist, ähm, ich
hätte gerne auf meinem Heim-Automatisierungs-
Dashboard halt ne Übersicht,
ähm, wie's so mit
Paketen aussieht. Und ohne, dass ich
jedes Mal selbst tracken muss, wenn ich was bestellt
hab. Es gibt, es gibt, äh,
Paket-Tracker wie Santa Mea,
wo du manuell die Codes einfügen
willst. Aber ich will die Codes nicht manuell einfügen.
Ich will, dass er die sich automatisch aus
den E-Mails rausholt. Weil jeder Shop,
jeder, mir fällt kein Gegenbeispiel
ein, verschickt an die Adresse.
Wo du dich registriert hast, ne Versand-
Versandbestätigung. Und in der Versandbestätigung
steht, ähm,
eigentlich so gut wie immer
drinne,
der, der, der Anbieter
und die Sendenummer.
Das heißt, wir scannen einfach die
E-Mails durch, nach, äh, Sachen
wie Hermes, DHL, UPS
und nach nem Regex, der nach der jeweiligen
Sendenummer aussieht. Und dann gucken wir online
beim jeweiligen Dienst nach, gibt's diese
Sendenummer.
Und wenn's die Sendenummer gibt, fliegen
wir's ein.
Ich bin 35. Seit
6 Tagen.
1842. Vielleicht auch 96.
Äh, 69.
Ja, danke Max.
Äh, also, ich programmier
seit ungefähr so 2002 rum.
Wir haben uns das ja letztens mal überlegt.
Ähm, aber ich verdien,
also, ich verdien damit kein Geld. Ja, also,
äh, ich, äh, ich programmier
zwar auf der Arbeit auch, aber ich bin kein
Hauptberuflicher Softwareentwickler.
Bin im DevOps-Bereich. Wenn's nicht genau
interessiert, ich hab's mal versucht zu erklären.
Musste einfach mal Ausrufezeichen, ähm,
Ausrufezeichen Beruf machen.
Hab ich versucht zu erklären, weil ich so treibe.
So.
Also, Leute, das, das schieb
ich mal auf, ja.
Mit dem richtigen Sendestatus.
Das mach ich mal off-stream.
Weil, wie gesagt,
es will keiner mich, mich jetzt ne halbe
Stunde noch sehen, wie ich hier, ähm,
Status-Sachen aus
der DPD-Tabelle
copy-paste. Wir machen jetzt die letzte Stunde
nochmal was viel Interessanteres.
Nämlich,
ähm, wir haben ja hier
die City als Text.
Und die City als Text
können wir,
lass mir das mal,
merken wir mal die Ausgabe hier.
Wobei, ich hab die Ausgabe
hier schon drinnen stehen. Ähm,
und die City als Text können wir
jetzt reverse look-uppen,
zu, ähm,
Längengrad und Breitengrad.
Und diesen Längengrad und Breitengrad
können wir dann im Webinterface auf einer Karte darstellen lassen.
Wir wollen
sehen, wie du das PDF passt und dann
den Switch-Block generierst. Das wäre,
das wäre wirklich, das wäre super.
Next Level.
Big Brain.
Da müssen noch ein paar Leute subscriben, für das mein Brain
dick genug wird, dass ich das hinkrieg.
So, ähm,
wir können uns ja mal den ganzen,
den ganzen Blödsinn hier sparen.
Wir suchen jetzt einfach mal
Mahl. Hab ich noch nie gehört.
Weiß nicht, wo das liegt.
Wir gucken mal bei Google Maps, wo das liegt.
Mahl.
Scheint ja sehr groß zu sein.
Huge.
Huge Stadt hier.
Ja, geht doch. So klein ist das gar nicht.
Wo liegt das?
Nordrhein-Westfalen.
Und hat wie viel Einwohner?
7800.
Das ist gar nicht so klein.
Warum manuell denn?
Ich glaub, wir müssen ja auch
paasen.
Gibt doch eine Million Paaser.
Weil ich glaube, für,
ich mein, wir müssen dem Paaser ja auch sagen,
was wir paasen wollen.
Äh, und ich glaube, für das bisschen, was wir hier machen,
ist es deutlich einfacher,
um hier unsere fünf Einträge rauszuholen,
das mal kurz von Hand zu splitten,
als wir uns noch anzugucken, wie man eine CSV-Library bedient,
wie man da Sachen rauskriegt.
Ich glaube, das ist auch nicht viel kürzer.
Es könnte ein bisschen robuster sein,
und da müssen wir uns einfach mal auf DPD verlassen.
Okay,
wir machen das jetzt mal mit dem,
mit der Geo-Abfrage.
Dazu
kommentieren wir mal den ganzen Krempel aus,
den ich hier hab.
Den brauchen wir erst mal nicht.
Wir machen erst mal eine Abfrage,
dass wir,
also das Problem ist ja,
ne, nur um das zu erklären,
ich will quasi sowas hier anzeigen lassen,
ungefähr auf meinem Versandtracker.
Also, ne, das werden wir jetzt hier mal
aufklapsen und dann drüber gehst,
will ich, dass der eine Karte anzeigt,
wo das Paket gerade ist.
Also zumindest, wenn der Versanddienst
quasi sowas
an Informationen rausgibt.
Also würde ich gerne sowas
hier anzeigen lassen, im Endeffekt.
Im Interface.
Also, dass dann hier,
wenn man hier drauf geht, da kommt halt eine Karte,
oder zwischen den Einträgen kommt
beim aktiven Eintrag eine Karte,
irgendwie sowas.
Dass ich das machen kann,
muss ich erst mal die Stadt auflösen
zu Längengrad, Breitengrad.
Und,
da kann man da zig verschiedene
APIs für nehmen.
Man könnte Google Maps für nehmen,
man kann da Open, Open, Open,
ob Open Street Map sowas ist,
das weiß ich gar nicht.
Zumindest,
ich kenne einen Anbieter,
womit das funktioniert,
den habe ich vor einer Weile schon gefunden,
und zwar ist das,
hm, warum ist das immer im Text?
Das da.
Das da, die habe ich mir irgendwann
auf GitHub gefunden.
Ähm,
die haben quasi eine API programmiert,
das Open Street Map durchsucht.
Haben auch ein GitHub-Projekt,
das kann man selbst hosten,
der Server ist in Java programmiert,
und die bieten an, dass man das
kostenlos verwenden kann.
Allerdings, ähm,
sagen sie, sie können dich
drosseln, wenn du zu viele Abfragen machst.
Machst.
Google Maps geht nicht.
Google Maps muss den
API-Key generieren.
API-Key ist mit der Anwendung spezifisch,
und hat maximal 2000 Aufrufe
am Tag.
Und die könnten relativ schnell erschöpft sein,
wenn mehr als 5 Leute das Programm verwenden.
Also ich brauche sowas,
was quasi auf User-Basis ist.
Und die drosseln pro Absender-IP.
Das ist viel
besser.
Deswegen nehmen wir die API von denen jetzt.
Du kannst auch einfach Maps plus
Url-Variable übergeben.
Nee, wieso?
Ich habe nichts, was ich den Maps
übergeben könnte, als Längengrad und Breitengrad.
Ich meine, ich könnte quasi diese
Such-API von Google Maps verwenden.
Da muss ich erstens Google Maps verwenden,
und da müsste ich dann irgendwie Google Maps
iFrame
oder sowas einbinden bei mir.
Weiß nicht, ob das so schön ist.
Zumindest
hier drüber
kriegen wir relativ easy raus.
Außerdem will ich Google Maps gar nicht verwenden.
Jaja, doch,
Sibaro, aber ich kann ja daran nichts,
also ich weiß nicht, ob das geht, ehrlich gesagt.
Aber ich kann an Google Maps nichts
customizen.
Also das einzige, was ich machen könnte, ist
ein iFrame einbinden mit
der offiziellen
Google Maps Suche für Frankfurt, wo man dann halt
rauskommt.
Ich kann nichts customizen.
Also weder Zoom-Level
noch
Scroll-Geschichten
noch kann ich auf die Map was
malen lassen, zum Beispiel, dass dann
ein Punkt angezeigt wird oder sowas.
Ich kann nichts einstellen.
Sobald ich das
machen will,
brauche ich den
API-Key für Google Maps.
Also da ist das auf jeden Fall die schönere Variante.
Dann nehme ich nämlich irgendwie, keine Ahnung,
Leaflet mit OpenStreetMap
und kann dann auf der Map machen,
was ich will. Außerdem ist mal ganz interessant,
rauszukriegen, wie das funktioniert.
Muss mal kurz Licht anmachen.
Hier ist es dunkel geworden.
So.
Licht in 2019.
Ups.
Äh.
Wollte ich jetzt
eigentlich gar nicht einblenden.
Ähm.
Also.
Stimmt, HTTP davor machen. Funktioniert jetzt wieder nicht.
Okay, queryen wir das Ganze
mal für Berlin.
Gucken mal, ob es an sich funktioniert. Client.
Get string.
So, mal gucken, ob das
jetzt klappt. Ups.
Äh. Vielleicht sollte ich das auch
komplett angeben.
Ja.
So.
Da findet jetzt alles mögliche raus. Sehr schön.
So, da übergeben wir jetzt mal als
Parameter mal, weil mal suchen wir.
Ähm. Natürlich können wir das jetzt hier an der Stelle
nicht direkt übergeben. Das funktioniert nicht, weil
da sind Leerzeichen drin.
Und wir müssen den Kram erstmal
url encoden, dass es funktioniert.
Kann man, kann man vielleicht noch die
Sprache eingeben?
Wäre nicht verkehrt.
Mal wollen wir jetzt url encoden.
Da gab es url encode.
Da gab es irgendeine Klasse.
Macht das encoden nicht automatisch? Nö.
Ich muss hier den String, den er abruft, selbst zusammenbauen.
Da gab es eine fertige Klasse.
Url encode.
Http Utility.
Genau.
Http
Utility
Da.
Url encode.
Geo url plus
So. Plus.
Wo ist es?
Mal.
Moment. Muss ich da überhaupt
die url reinschreiben? Ne.
Einfach nur.
Mal muss ich da reinschreiben.
Encoded City.
So. Und dann hängen wir das jetzt mal
hintereinander.
Und jetzt sollten wir die Infos
zu mal kriegen.
Ich weiß nicht, wo das Ding ist.
Morgen Feier... Was? Morgen ist Feiertag?
Aber nicht in Hessen, ne?
Damals doch schon.
Koordinaten.
Ähm.
Muss ich mal hier unter Linux
mal kurz angucken.
Das müssen wir mit curl machen
und es ordentlich ausgeben lassen.
curl
url encode
für online auch
ja.
url encoder
Ja. Da. So. Encode.
Und das ganze
jetzt nach jq pipen, dass es ordentlich ausschaut.
Ok. Also das kriegen wir
hier als Antwort.
Und da haben wir drinnen
Features. Geometry.
Coordinates.
Type Point.
Type Feature.
Ah. Das ist GeoJSON.
Deutschland.
Country.
Place.
Achso. Ne. Dann ist in Hessen bei uns
kein Feiertag.
Die drei beste.
Also im Prinzip wollen wir hier
im Prinzip wollen wir hier das da raus
ähm. Parsorn.
Features.
Also was müssen wir
jetzt raus parsen? Features.
Und daran. Oh. Das wird wieder eklig.
Ok. Also.
Probieren wir das mal aus. Was brauchen wir jetzt da raus
holen? Features.
Ne.
Was hab ich jetzt falsch gemacht?
Achso. Ich hab sogar nicht JSON geparsed.
Ah. Stell dir das an.
J. Object.
Parsed.
Ah.
Und jetzt gucken wir mal.
Features.
Ok. Das funktioniert.
Das ist das
innere Array.
Dann.
Hehehe.
Ich hab auch keine Schmerzen damit, dass ich arbeiten muss.
Ok.
Dann filtern wir das ganze mal. Also.
Type.
Ne.
Property. Ne. Oh fuck.
Ich will jetzt
quasi das Element.
Das erste Element.
Was.
Was Country Deutschland
ist.
Was ist denn das dann?
Value.
Property.
Type.
Ah. Type.
Keine Ahnung.
Value.
Musik geht mir auf den Sack.
Value. Type.
Ne.
Nach was muss ich denn gucken jetzt?
Ich will doch da quasi das nächste.
Ich will den nächsten Key.
Der der Country heißt.
Du bist sub.
Ja. Pock.
Nice.
Der nächste Key der Country heißt.
Wie kriege ich das denn raus?
Was ist das denn hier beim Parsen?
Bei Jason.net.
Debugst du eigentlich nie?
Na nie würde ich nicht sagen.
Wir haben heute schon mal Debugged.
Was könnte das sein?
Ja das können wir tatsächlich machen.
Das ist eigentlich keine schlechte Idee.
Äh.
Also was haben wir da drinne?
Wow.
Na gut.
Das ist das Root Element.
Das bringt uns jetzt ja nix.
Äh.
Aber wir können mal gucken.
Type. Object.
Path. Nix.
Type.
Okay.
First.
Type.
Feature Collection.
Ach da unten Type.
Achso. Type. Feature Collection.
Kann ich jetzt?
Ich müsste doch jetzt eigentlich Properties.
Hier raus holen können.
Das müsste doch eigentlich funktionieren.
Ähm.
Also haben wir hier.
First.
Machen wir mal Where.
Ähm.
Ist. Ähm.
Properties.
Ne.
Fuck. Warum nicht?
Achso. Ja klar. Ich dachte der meckert an sich.
Ähm.
Properties.
Und dann.
Will ich nach. Nach ähm.
Country gucken.
He has.
Country.
Gleich gleich.
Da ein bisschen.
Okay.
Das ist nicht schön. Ich muss mal gleich gucken.
Ob es hier Geojason Parser gibt.
Amp.
Nehmen wir mal das erste.
Und gucken ob das funktioniert hat.
Ja.
Nice.
Das muss man ein bisschen.
Ein bisschen fehlertoleranter gestalten.
Was machst du da?
Gerade versuche ich.
Nen.
Wenn ich ne Stadt in Deutschland habe.
Den Lookup zu machen.
Was die für.
Längen und Breitengrad Koordinaten hat.
Das ich dann in meinem Paket Tracker anzeigen kann.
Wo das Paket gerade ist.
Arbeitest du eigentlich genau in Frankfurt.
Viel näher in Frankfurt kann man nicht arbeiten.
Das ist.
Fast am Hauptbahnhof.
Okay das funktioniert.
Das gefällt mir zwar nicht richtig.
Ehrlich gesagt.
Und wir könnten jetzt auch sowas hier machen.
Dann ist es null.
Ist es null oder ist was.
Weil ich jetzt halt nicht weiß.
Was passiert wenn er das hier nicht findet.
Ne.
Ja.
Alles klar.
Jetzt.
Jetzt wäre es schön wenn man das als Methode aufrufen könnte.
Weil dann könnte ich den hier davor machen.
Darf man das machen?
Das geht nicht oder?
Moment das geht?
Das geht?
Das ist aber neu oder?
Das geht?
Na gut er kackt immer noch.
Aber interessant dass das geht.
Geht das auch weiter so dann?
The fuck?
Das geht?
Das geht?
The fuck?
Hätte ich jetzt ja nie mit gerechnet dass das geht.
Das ist neu.
Das ist neu.
Das habe ich so noch nie gesehen.
Das ist ähm.
Das ist Dotnet Core 3.
Review 7.
Visual Studio 2019.
Vorschau Version.
Und ähm.
C Sharp 8 Features.
Und ähm. C Sharp 8 Features.
Ja my life is home.
So würde ich das mal interpretieren.
Also was es schon eine Weile gibt ist quasi das da.
Also was es schon eine Weile gibt ist quasi das da.
Was im Endeffekt heißt.
Wenn. Wobei das jetzt blöd.
Das da. Das da gibt es schon eine Weile.
Was im Endeffekt heißt ähm.
Wenn das da 0 ist dann ähm.
Hier nicht abkacken.
Sondern einfach 0 zurückgeben insgesamt.
Ich wusste allerdings nicht dass das mit dem Indexer funktioniert.
Ich wusste allerdings nicht dass das mit dem Indexer funktioniert.
Ich weiß gar nicht ob das.
Ich weiß gar nicht ob das neu ist.
Das habe ich so noch nie gesehen.
Aber es wäre cool dass das funktioniert.
Also es gefällt mir echt gut.
Naja dann sind wir ja mehr oder weniger.
Naja dann sind wir ja mehr oder weniger.
Eigentlich haben wir jetzt alles zusammen was wir brauchen.
Dann machen wir jetzt hier noch Private ähm.
Dann machen wir jetzt hier noch Private ähm.
Irgendwie äh.
Coordinate.
Lookup.
Lookup.
Da übergeben wir die City.
Da übergeben wir die City.
Äh hopp.
Dann werfen wir den ganzen Campel den ich hier habe.
Dann werfen wir den ganzen Campel den ich hier habe.
Mal da rein.
Mal da rein.
Ähm.
Und dann returnen wir.
Was hat der jetzt für Schmerzen?
Also das darf man nicht returnen oder was?
Also das darf man nicht returnen oder was?
Achso ich returne void.
Lull.
Oh megalull.
Ähm.
Wir müssen so was gucken.
Ja ich.
Lull.
Ähm.
Also wir haben es ja schon drinnen stehen hardcoded.
Also wir haben es ja schon drinnen stehen hardcoded.
So und jetzt holen wir uns da einfach hier.
So und jetzt holen wir uns da einfach hier.
So und jetzt holen wir uns da einfach hier.
Properties.
Geomet...
Simple Geometry.
Coordinates.
Koordinates holen wir uns raus.
Wenn der Gram nicht.
Dann müssen wir mal gucken was man da schöner machen kann.
Wenn der Gram ungleich 0 ist.
Wenn der Gram ungleich 0 ist.
Echt nicht so hübsch.
Äh. Moment was.
Äh.
Moment äh.
If.
Moment so viele Klammern.
So viele Klammern.
Jetzt.
Ähm.
Wenn das nicht 0 ist.
Boah ist das.
Boah ist das hässlich.
Äh. Wie nennen wir das denn?
Kann man dem Ding überhaupt einen gescheiten Namen geben?
Äh.
City.
Geocity.
Geocity das war mal so ein Webposting Portal.
Geocity das war mal so ein Webposting Portal.
Nice.
Ähm.
Was äh hab ich nicht gesehen.
Was hast du geschrieben Christian?
Äh.
Morgen wird ein interessanter Tag.
Morgen wird ein interessanter Tag.
Ach.
Das hat er heute gespoilert.
Jetzt verstehe ich das auch.
Ähm.
Oder hast du dich beworben?
Bei uns im Team heute?
Oder hast du dich bei uns im Team beworben?
Oder woanders?
Der Alex hat heute gesagt.
Ähm.
So nach dem Motto.
Da kommt vielleicht wieder jemand.
Und das hat sich für mich so angehört.
Als ist es jemand den man kennt.
Nachdem du das jetzt geschrieben hast.
Hab ich gedacht vielleicht wärst du das jetzt gewesen.
Ach andere Position.
Also nicht bei uns.
Gehst du da hin.
Gehst du zu äh.
Gehst du zum Dominik?
Nee oder?
Das ist für die Leute jetzt übelst wir.
Das checkt keiner um was es geht.
Warum nicht?
Achso hab ich.
Er geht zu Chantal.
Wahrscheinlich.
Du gehst zu den iOS.
iOS App Entwicklungs Mädels.
Huge Brain.
Ja.
Wenn ich mir nochmal aussuchen dürfte.
Würde ich auch zur iOS Entwicklung gehen.
Hehehe.
Ach Firewall. Ach Netzwerk.
Ah verstehe.
Dann ist der. Dann sieht es demnächst so aus.
Interessant.
Ja da bin ich mal gespannt.
Da bin ich mal gespannt.
Vielleicht bist du ja demnächst wieder am Start.
Ne Sebao. Da musst du schon selber gucken.
Der ist auch wieder da ja.
Der ist auch wieder da.
Egal.
Das haben wir genug gespoilert.
Im Prinzip checkt da keiner um was es hier geht.
Ähm.
Alter kommen sie zurück.
Du wirst einige bekannte Leute finden.
Noch bei uns.
Und auch den ein oder anderen der schon mal da war.
Und nicht bei uns.
Und mittlerweile bei uns ist.
Es hat sich ein bisschen was getan.
Aber das kann ich jetzt nicht im Stream erzählen.
Sonst wäre zu viel geleakt.
Weißt du.
Aber da bin ich echt mal gespannt ob das funktioniert.
Da bin ich mal gespannt ob das funktioniert.
Da bin ich mal gespannt ob das funktioniert.
Kommst du irgendwann auch mal vorbei.
Für Bewerbung.
Oder wird morgen erst quasi festgelegt.
Ob man überhaupt überlegt.
Dich mal einzuladen.
Sieg Max go go.
Das würde mich echt mal interessieren.
Das ist cool.
Nice nice nice.
So okay.
Dann sind wir nämlich fertig.
Ähm wenn.
Das da nicht null.
Ich verzichte jetzt mal auf ordentlichen Namen.
Dass wir fertig wären.
Weil wir haben nur eine halbe Stunde Zeit.
Wenn das hier ungleich null ist.
Dann holen wir uns was hier raus.
Ähm.
Moment was holen wir uns da raus.
Muss man nochmal die Ausgaben angucken.
Geometry holen wir uns dann da raus.
Geometry coordinates.
Das ist so hässlich.
Das holen wir uns da raus.
Oh wir sind schon gedrosselt.
Wir sind glaube ich wieder gedrosselt oder kann das sein.
Man bekommt keine Antwort.
Wir haben uns schon wieder gedrosselt.
Ah.
Hier da.
Da sind die Koordinaten.
Okay cool.
Was ist Längengrad und Breitengrad.
Was ist da von Längengrad und was ist Breitengrad.
Wer kennt sich so Geometrie mäßig aus.
Ist das Längengrad oder Breitengrad.
Ist das Längengrad oder Breitengrad.
Ich weiß nicht.
Müsste Long Lat sein.
Müsste Long Lat sein.
Dann habe ich das so geschrieben.
Also.
Ach so war Long geht nicht.
Oder geht das.
Weil das wäre ja eigentlich
Datentyp.
Fast.
Ne das geht nicht.
Link.
Okay.
So.
Das ist jetzt zwar richtig hässlich.
Das mache ich dann Offstream nochmal hübsch.
Aber wir gucken mal ob der Return-Wert
jetzt stimmt.
Hat eigentlich .NET
einen eingebauten Typ für
Geo-Coordinate-Class.
Das geile ist ja an .NET
man hat wirklich mittlerweile
jeden Shit eingebaut.
Moment warum ist das jetzt nicht.
Ach ne.
Ist nicht.
Add Long.
Ich mach lieber Link.
Okay das muss ja sein.
Haben die da schon was eingebaut.
Anschein.
Anschein nicht.
Na gut.
Okay.
Wir könnten jetzt echt mal.
Wir könnten doch jetzt echt mal dieses neue.
Das neue Feature verwenden.
Was wir vorhin angesprochen haben.
Das wir quasi.
Ähm.
Das wäre jetzt ein String gewesen.
Was programmierst du gerade.
Zeige ich dir gleich wenn ich mal ausprobiert habe.
Also wenn ich den Schritt fertig habe.
Weil.
Ich habe noch eine halbe Stunde Zeit.
Okay das ist ein.
Double parsen.
Da muss ich mir ein bisschen was schöneres überlegen.
Aber erst mal dass der Kram.
Fertig wird.
Ach das ist kein String.
Boah wird das hässlich.
Huge Ugly gerade.
Huge Ugly.
Nehmen wir das nächste mal noch.
Geo-Jason-Parser.
Ähm.
So und jetzt können wir das nämlich mal ausprobieren.
Neue doppelte Rückgabewert.
Also zwei Rückgabewerte.
Feature mal verwenden.
Double.
Double.
So.
So kann man das vielleicht jetzt direkt.
So machen.
Wie weist man da überhaupt was zu.
Jetzt.
Wie weist man da jetzt überhaupt was zu.
Muss man da jetzt sagen.
Return und dann hier quasi.
So.
Mach mal mehrere Rückgabewerte.
Und ich mit Out-Parameter hier oben.
Hab ich es ja mit Out-Parameter gemacht.
Ähm.
So ich muss jetzt ja was returnen.
So ich muss jetzt ja was returnen.
0 0 was.
Ja ich will es jetzt einfach nur mal ausprobieren ob es funktioniert.
So.
Jetzt bin ich mal gespannt.
Jetzt bin ich echt gespannt ob der Krempel tut.
Den ich hier gebastelt habe.
Ähm zack.
Alles wieder einkommentieren.
Ähm.
UPS ist so.
Und jetzt gucken wir hier drinnen.
Jetzt gucken wir hier drinnen.
Lookup Coordinates.
Lookup Coordinates.
Für City.
So.
Der sollte das jetzt ausgeben für.
City.
Machen wir anders.
Machen wir anders.
Machen wir anders.
Ähm wir machen.
Wir brauchen noch ein extra Feld.
In Shipping Progress.
Das nennen wir dann Double.
Das nennen wir dann Double.
So.
Das da rein.
Mache ich das immer warum mache ich da keinen.
So R.
So und jetzt können wir mal gucken ob das funktioniert.
So und jetzt können wir mal gucken ob das funktioniert.
Ich bin ja mal echt gespannt.
Große Kleinschreibung wurscht.
Große Kleinschreibung wurscht.
So weiter das funktioniert.
Funktioniert.
Es geht.
Alle Verfolgung inklusive Breitengrad.
Wir können jetzt ja mal gucken ob das auch richtig ist.
Wir können jetzt ja mal gucken ob das auch richtig ist.
Es steht nur bei jeder Stadt die selben Koordinaten.
Es steht nur bei jeder Stadt die selben Koordinaten.
Stimmt.
Ach ich glaube ich weiß warum.
Schaut mal.
Kann ja nicht funktionieren.
Nochmal.
Das sieht jetzt schon ein bisschen besser aus.
Also es geht los hier in 51.7.
Also es geht los hier in 51.7.
Dann wissen wir jetzt da wohnt der Eichler.
Dann wissen wir jetzt da wohnt der Eichler.
Dann geht es nach Freiburg.
Und dann kommt es an.
Das ist doch echt hübsch.
Die Brokkastreams sind einfach pock.
Die Brokkastreams sind einfach pock.
Ja vor allem wenn sie funktionieren.
Ich meine ganz ehrlich.
Die Funktion gefällt mir null wie sie aufgebaut ist zur Zeit.
Die Funktion gefällt mir null wie sie aufgebaut ist zur Zeit.
Und auch das hier gefällt mir ehrlich gesagt nicht.
Und auch das hier gefällt mir ehrlich gesagt nicht.
Vielleicht machen wir wirklich.
Eine eigene Class.
Geo
Geo Coordinates
Und da schreiben wir dann rein.
Double
Da kann man es nämlich auch richtig nennen.
Da kann man es nämlich auch richtig nennen.
Double
Das ist doch besser.
Komm wir machen eine eigene Klasse dafür.
Wofür ist das Interface a Shipment Tracker?
Wofür ist das Interface a Shipment Tracker?
Das gibt es der DPD Tracker implementiert.
Der Amazon Tracker, der Hermes Tracker, der DHL Tracker.
Der Amazon Tracker, der Hermes Tracker, der DHL Tracker.
Der Amazon Tracker, der Dah
Das ist natürlich wieder etwas anderes.
Ich glaube das tausche ich ab, das gefällt mir.
Genau das
Das war das erste, was ich gedacht hab
Man könnte da auch einen Struck draus machen
Und da hab ich mir direkt danach gedacht
Weißt du was, wurscht
Ja, aber könnte man machen
Könnte man machen, das ist ja komplett
Value-Semantik eigentlich
Da hat ja nix mit
Nix mit Kapselung
In dem Sinn zu tun, das ist ja ein logischer Typ
Der zusammengehört, ja
Also, da könnte noch sowas wie Höhe oder sowas reinmachen
Ähm
Aber das haben wir, jaja, aber du hast recht
Welcher Vorteil hätte dann ein Struck
Na eigentlich, also
Praktisch gesehen eigentlich nur, dass man sich besser fühlt
Es hat ein paar, unter der Haube ein paar
Unterschiede, zum Beispiel, dass Werte
Gruppiert werden und nicht referenziert werden
Aber, also ne
Wenn du das als Parameter übergibst
Aber an sich, eigentlich nur, dass man sich besser fühlt
Zu 99% ist das wurscht
Ja
Wo es nicht wurscht ist
Muss man sagen
Sind sobald es um irgendwelche
Unmanaged Sachen geht, ja
Also wenn du irgendwelche
Wenn du zum Beispiel mit irgendwelchen
CAPs oder so interagierst
Dann ist das wichtig, dass
Weil in einem Struck
Kannst du dir sicher sein
Dass quasi der Speicher
Hinterlander so ist
Also sprich, du hast in einem Struck
Hast du zuerst deine Zinten
Das, wie weit sind das
Wie weit sind ein Longboard?
Überhaupt 32?
Nicht Byte, Bit?
Hier, 8?
Weiß gar nicht, was ein Long ist
23 Bit
Da hast du dann direkt die 23
Bit hintereinander
Also sobald du mit
Native Sachen interagierst
Und die wollen ein Struck haben, dann muss das auch ein Struck sein
Du kannst dann auch noch
Layout angeben, wie das aufgebaut ist
Aber
Ansonsten ist es eigentlich ziemlich wurscht
Ja, Hauptsache, dass es ein Struck ist, oder?
Ja, Hauptsache, dass es ein Struck ist, oder?
Ja, Hauptsache, dass es ein Struck ist, oder?
Der hauptsächliche Unterschied zwischen der Klasse und einem Struck ist eben
Dass du
Also dass im Struck
Manche Sachen defaultmäßig schon implementiert sind
Die in der Klasse, die du selbst implementieren musst
Und wenn du einen Struck als Parameter verwendest
Dann werden die Werte kopiert
Und nicht eine Referenz auf etwas übergeben, was schon da ist
Aber eigentlich
Eigentlich ist es zu 99% egal
Aber ich finde es schick, dass es funktioniert
Das hier oben muss ich mir nochmal überlegen
Das war jetzt einfach nur so dahin gerotzt
Das war jetzt einfach nur so dahin gerotzt
Rotz, dass es irgendwie funktioniert.
Flo96 hat gefragt,
da gefragt, wo ist es,
könntest du die Anwendung des Interfaces
genauer erklären? Verstehe ich es immer noch nicht ganz.
Boah, wie erkläre ich das jetzt am besten?
Also, kommen wir da für ein schönes Beispiel.
Also, du verwendest immer
dein Interface, verwendest du immer dann,
wenn du
dich ein bisschen abkoppeln
willst von der eigentlichen
Implementierung.
Also, zum Beispiel,
ich glaube, mir ist was Gutes eingefallen.
Zum Beispiel,
du brauchst eine Datenbank als Speicher.
Weil du eben,
keine Ahnung, du willst Adressen speichern,
Adressen und
verknüpft mit Namen von Kunden
oder von
Leuten, denen du was schicken willst,
irgendwas. Du willst Adressen speichern,
mit ein bisschen Verknüpfung, ja, du brauchst eine Datenbank.
So, jetzt könntest du
entweder sagen, okay,
ich
ach so,
ach, du meinst, was das hier macht.
Ja gut, das macht im Prinzip das gleiche.
Deswegen erzähle ich das jetzt erstmal fertig.
Und du kannst das jetzt so machen.
Du sagst, okay,
ich nehme eh als Datenbank, keine Ahnung,
Postgres,
ja, oder
ich nehme eh als Datenbank
SQLite. Ja, sag mal, du nimmst
als Datenbank SQLite
und machst jetzt einfach
dein SQLite-Zeug,
direkt von Hand.
Ohne das irgendwie
zu abstrahieren, ohne ein Interface
zu machen, einfach Klasse, SQLite,
Dings, reingehauen.
So, und später kommst du mal auf die Idee,
ah, ich würde jetzt doch gerne
anstatt SQLite,
würde ich gerne Postgres oder so verwenden.
Da musst du quasi deine ganze,
da kannst du deine SQLite-Klasse wegschmeißen
oder deine SQLite-Klasse umstricken
zu der Postgres-Klasse.
Hättest du dir ein ordentliches
Interface überlegt,
so nach dem Motto
Schreibedaten, Lesedaten, Filterdaten, was auch immer
und hättest das implementiert
in deiner Klasse, in deiner
SQL-Klasse, in deiner SQLite-Klasse,
dann könntest du einfach eine neue
Postgres-Klasse machen,
implementierst das Interface wieder, sodass es sinnvoll
implementiert ist mit Postgres,
du kannst die zwei Dinge austauschen.
Also du bist quasi unabhängig davon,
dass es
SQLite drunter ist oder Postgres drunter ist.
Und das ist im Prinzip hier genau der Fall.
Du hast ein Interface,
iShipment-Tracker
und jede Klasse,
das ist noch nicht ganz perfekt,
man müsste hier noch eine Methode definieren,
so nach dem Motto, bin ich auch
wirklich dafür zuständig?
Also eine Methode,
wo ich fragen kann, so nach dem Motto,
ey, unterstützt du DHL oder sowas?
Das müsste man noch machen.
Zumindest,
es gibt einen DPD-Tracker, es gibt einen DHL-Tracker,
es gibt einen Hermes-Tracker, einen Amazon-Tracker
und es könnte ja auch sein,
dass es demnächst mal einen China-Mail-Tracker gibt.
Und was mich interessiert, ist ja nicht,
nicht wirklich, ob es einen DPD-Tracker gibt,
einen China-Tracker gibt
oder ob es vielleicht
sogar einen Tracker gibt,
der China-Mail,
India-Mail und Dings
alles in einem kann.
Es muss ja nicht pro Anbieter einen Tracker geben.
Das ist mir allerdings im Endeffekt
in meiner Klasse, also
in diesem Background-Scanner,
wo ich das verwende,
das ist mir nicht so gut.
Und gucke, ob quasi der Status
immer wieder bei alle paar Minuten
in Statusabfrage von dem Paket,
da ist mir das egal.
Da nehme ich nämlich nicht
explizit die Klasse
DPD-Tracker oder die Klasse DHL-Tracker
oder die Klasse China-Tracker,
sondern ich sage, ich hätte gerne
irgendeine Klasse,
die dieses Interface hat.
Und dann ist es egal,
ob es der China-Tracker ist oder der DPD-Tracker.
Also sprich,
mein Scanner,
also das Ding, mein Background-Scanner,
der guckt, was die Pakete
für einen Status haben,
der muss gar nicht mal wissen,
dass es überhaupt
DPD gibt.
Der weiß einfach nur,
ich habe hier ein Paket
von dem und dem Anbieter
und der guckt einfach,
okay, ich habe hier irgendwie
zehn verschiedene registrierte
Shipment-Tracker.
Man fragt da einfach mal alle zehn an,
unterstützt ihr Hermes,
und dann antwortet halt einer
oder keiner
und der da sagt, ja, ich unterstütze Hermes,
der wird dann aufgerufen mit Track.
Und dass das die Klasse
DPD-Tracker heißt
oder XYZ-Omega-Lull
ist vollkommen wurscht.
Und das Interface implementiert...
Ne, ne, ne, ne.
Das hier ist das Interface
und hier drinnen sagst du,
was die Klassen, die das Interface
implementieren oder was die Klassen, die das Interface
anbieten wollen, implementieren müssen.
Ähm, du kannst auch sowas hier sagen.
Ich möchte, zum Beispiel, ne,
was wir theoretisch noch brauchen ist,
ähm, keine Ahnung, äh,
Support for
irgendwas?
Ja, und da
übergibst du dann den Name von deinem
ich weiß nicht,
ich meine, dein Name ist jetzt nicht so schön, ne,
da würdest du dann übergeben, zum Beispiel,
ich habe hier China-Mail,
ich habe hier China-Mail
und der wird dann antworten mit,
ich unterstütze China-Mail
und der DPD-Tracker würde natürlich antworten,
ah, ne, ne, also, ich unterstütze China-Mail nicht.
Und wie würdest du nun die Klasse DPD-Tracker ansprechen
über das Interface?
Das kann ich dir zeigen.
Das ist eigentlich ziemlich, ziemlich simpel.
Anstatt, dass ich hier DPD-Tracker nehme,
ich soll mal rausschmeißen noch.
Anstatt, dass ich DPD-Tracker nehme, was ich hier mache,
sag ich einfach, äh,
so.
Und nach dem hier
muss ich nie wieder den Namen DPD-Tracker verwenden.
Sondern T ist jetzt vom Typ I-Shipment-Tracker.
Und das kann ich überall als Parameter verwenden,
die dieses Interface haben wollen.
Und wenn ich jetzt mal auf die Idee kommen sollte,
dass mir der DPD-Tracker doch nicht gefällt,
dann tausche ich den DPD-Tracker einfach durch den neuen DPD-Tracker aus
und ich muss in meiner Klasse, die es verwendet,
absolut gar nichts ändern.
Ich glaube, das, ich glaube, das konnte man jetzt halbwegs verstehen, oder?
Ach so.
Irgendjemand hat gefragt, Unterschied zur abstrakten Basisklasse.
Das ist, das ist eigentlich recht subtil,
weil spätestens mit dem neuen C-Sharp,
also mit der neuesten Version,
verschwimmen die Unterschiede zwischen Interface und abstrakter Klasse weiter.
Bisher war es so, du hast eine abstrakte Klasse genommen,
wenn du ein bisschen mehr Kontrolle über den jeweiligen Typ haben wolltest.
Oder wenn du Basisfunktionalität,
einbauen wolltest.
Ja, also zum Beispiel, du hast irgendwie eine Basisklasse für einen, sagen wir mal, Request
und die hat halt Basisfunktionalität, dass die sich schon mal irgendwo anmeldet oder so.
Ja, die Anmeldung ist immer gleich, die kann man in der Basisklasse machen
und da muss sich dann jemand nicht mehr drum kümmern,
der da eine extra Klasse von ableitet oder sowas.
Jetzt ist es allerdings so, oder wenn du, wenn du einen Konstruktor brauchst zum Beispiel,
ja, wenn du, wenn du, wenn du, wenn es,
wenn es erforderlich ist, dass deine Klasse unbedingt im Konstruktor einen bestimmten,
irgendwas bestimmtes haben muss,
dann nimmst du eine abstrakte Basisklasse, weil das über den Interface nicht funktioniert.
Bisher war es auch immer so, sobald du Logik, also Basic-Funktionen bereitstellen wolltest,
dann musstest du das in der Basisklasse machen,
weil in dem Interface kannst du bloß die Signaturen vorgeben,
also nur wie die, nur was da implementiert werden muss.
Und nicht wie. Allerdings in, ähm, in C-Sharp 8 ist es jetzt so,
oder kommt das vielleicht noch, in C-Sharp 8 ist es jetzt so,
und das wissen wahrscheinlich auch noch nicht viele,
man darf jetzt Default Implementations in Interfaces machen.
Das ist jetzt neu, das ist jetzt neu.
Da wird man sich natürlich erstmal fragen, warum, wozu, wozu sollte ich so einen Blödsinn machen, ja?
Also wozu?
Wozu sollte ich eine Default Implementierung in einem Interface machen?
Könnte man sich jetzt ja mal so, ist ja eine berechtigte Frage, wozu man so einen Blödsinn, ähm, Blödsinn haben will.
Ähm, das ist in, das ist, in einem Fall ist das wirklich sinnvoll.
Und zwar, ich weiß nicht, ob ihr euch schon mal die Klassen angeguckt habt,
die in DirectX und Direct3D so drinne sind.
Ähm, die haben so Sachen dann wie, keine Ahnung, oder nennen wir irgendein anderes Beispiel.
Die haben da sowas wie irgendwie, keine Ahnung, Text und so.
Ähm, die haben da sowas wie irgendwie, keine Ahnung, Text und so.
Texture 1, Texture 2, Texture 3, Texture 4, das geht dann, geht dann bis, keine Ahnung, äh, Text, Texture 95 oder so.
Und warum gibt's das Ganze?
Weil, ich weiß, dass das nicht bei allen Klassen so ist, ja, nur als Beispiel jetzt.
Ähm, weil, irgendwann hat sich Microsoft überlegt, okay, wir haben eine Klasse, die heißt Texture.
Wir wollen jetzt allerdings mehr Funktionen einbauen.
Wir, wir können aber die Klasse nicht ändern, beziehungsweise das Interface nicht ändern,
weil das Interface verwenden ja jede Menge Leute.
Und wenn wir das Interface jetzt anpassen, dann ist jeglicher Code, der das Interface verwendet, kaputt.
So, und deswegen hat Microsoft gesagt, ah, nee, dann machen wir Texture 2.
Dann kam das wieder, ah, wir wollen was Neues einbauen, ah, dann machen wir Texture 3.
Und irgendwann ist man bei Texture 95.
So.
Und dafür ist das ganz gut.
Da kann man nämlich sagen, okay, man erweitert einfach die Klasse.
Man erweitert einfach ein altes Interface, um, um eine neue Methode, die man implementieren kann.
Ähm, und damit der alte Code nicht kaputt geht, der die alte, der das Interface schon implementiert,
macht man einfach eine Default-Implementierung rein.
Und somit muss man es nicht mehr implementieren, weil es ja schon da ist, aber halt Default.
Wahrscheinlich wird die meiste Default-Implementierung sein, not implemented.
Pff, wenn man schreiben könnte.
Das wird wahrscheinlich die Default-Implementierung bei den meisten Sachen sein, könnte ich mir vorstellen, ne?
Dafür ist was da.
Also, wie oft man das braucht, ehrlich gesagt, mir fällt jetzt da gar nicht so viel ein, wo ich das gebraucht hätte, mal.
Ehrlich gesagt fällt mir da eigentlich gar kein, gar nichts ein, wo ich das mal gebraucht hätte.
Weiß nicht, vielleicht fällt ja NoobDevTV was ein.
Die Erklärung, die er geschrieben hat, klingt so, als, äh, kennt er sich aus.
Vielleicht fällt ihm was ein, wo er das mal gebraucht hätte.
Oder vielleicht fällt euch auch was ein.
Also mir fällt jetzt nichts ein, wozu ich das mal gebraucht hätte.
Könntest du das C-Sharp-File paste binden, damit ich mir die gleich nochmal angucke?
Kannst du einfach Stream-Wort gucken.
Ansonsten kann ich dir das auch für API-Keys drin oder so nicht unbedingt.
Kann ich dir paste binden, wenn du willst.
Ja, du kriegst sogar Syntax-Highlight.
Oh, hier.
What?
Okay.
Da.
Da.
So, kannst du eintippen, kommst du darauf raus.
Oh ne, ich will gar nicht sehen, was die auf Paste-Binden so treiben.
Man muss aber immer gucken.
Ich habe mir angemerkt, ich erzähle ja öfters mal was, wie das so in der...
So wie das die reine Lehre sich mal überlegt hat.
Man muss natürlich in der Praxis immer gucken.
Also, es hat oftmals keinen Sinn, nur weil...
Das quasi nach irgendeinem Best-Practice, was mal irgendeiner ausgerufen hat oder nach irgendwelchen Microsoft-Dokus oder nach irgendwelchen Programmierbüchern.
Ja, nur weil das da quasi die sinnvollere Lösung ist, ist es nicht unbedingt automatisch immer so, dass es für euer Projekt das Sinnvolle ist.
Also, wenn die, sag mal so, wenn die theoretisch schönere Lösung oder die sauberere Lösung darauf rausläuft, dass ihr drei Wochen länger braucht,
und das in der Praxis nicht viel besser funktioniert,
dann muss man sich das überlegen, ob das so sinnvoll ist, ja.
Meistens ist es aber allerdings so, dass die sauberere Lösung auch automatisch die kürzere, knackigere, schönere Lösung ist.
Und die fällt ja meistens auch erst nach einer Weile überlegen ein.
Und dann kann man, dann sollte man es auch schon nehmen.
Wie soll das jetzt die Uhr gemerkt haben? Ganz einfach, ins Wort gucken.
Oder, oder...
Schnell screenshotten.
So, Leute, es ist 22 Uhr, ich muss ins Bett.
Unser...
Unser, ähm...
DPD-Tracker funktioniert.
Nicht so ganz schön an allen Ecken und Enden, aber wir haben es heute im Stream tatsächlich mal geschafft, was fertig zu machen.
Ich hoffe, euch hat es gefallen. Ich gehe jetzt instant off und pennen.
Morgen wieder 5.45 Uhr aufstehen.
Dann ist ja morgen schon Donnerstag, ne?
Ich muss mal kurz gucken, ob ich...
...morgen irgendwelche komischen Gemiete habe, wo ich keinen Bock drauf habe.
Oder ob das ein Tag ist, wo ich...
Oh ja, habe ich...
Workshop Nummer 3.
Optimierung, Incident Management und Monitoring.
Oh, ha, ha, ha, ha, ha.
Klingt das nicht nach ganz viel Spaß?
Da habe ich schon Bock drauf, ja.
Optimierung, Incident Management und Monitoring.
Also, das Ding, ne?
Ist ja immer so.
Diese Einladungen nennen sich immer Optimierung, bla, bla, bla.
Faktisch wird da in diesen Meetings nichts optimiert, ne?
Da wird allerhöchstens besprochen, was man eventuell mal optimieren könnte.
Das ist aber auch das Höchste der Gefühle, was da besprochen wird.
Aber den, den, also den, ehrlich gesagt, den einzigen Tipp, den ich habe,
für langweilig zu sein, ist, dass man sich nicht mehr so viel Zeit hat, wie man es macht.
Also, langweilige Meetings, so doof das jetzt klingt, ja,
ist die Meetings einfach nicht langweilig werden zu lassen, indem man mitmacht.
Ich weiß, also, ich habe selbst immer keinen Bock auf solche Sorten Meetings.
Und ich hatte früher immer das Problem, ich bin da eine halbe eingepennt bei.
Da hast du dann da gesessen, da hast du dich null interessiert.
Das Einfachste, was man machen kann, ist, mitzumachen.
Da muss nichts Sinnvolles rauskommen.
Es erwartet bei diesen Meetings meistens noch nicht mal einer,
dass man sich nicht mehr so viel Zeit hat, um zu machen.
Dass da wirklich jetzt bahnbrechende neue Sachen rauskommen.
Einfach seinen Senf dazugeben.
Was einen meistens daran hindert,
oder was mich, oder was mich, was mich früher immer daran gehindert hat, ist,
wenn es in den Meetings um ein Thema ging,
wo ich mich nicht so hundertprozentig ausgekannt habe,
habe ich lieber die Klappe gehalten, weil ich gedacht habe,
ey, wenn ich jetzt was sage, und, ähm, das ist Blödsinn,
dann, dann, dann nimmt dich ja keiner mehr ernst, so nach dem Motto, was, was du da erzählst.
Die, die Wahrheit ist aber,
dass keiner, oder,
dass kaum einer wirklich Ahnung von dem Zeug hat, was in diesen Meetings immer besprochen wird.
Und noch weniger jemand, der Ahnung hat, und sich gleichzeitig dafür interessiert und mitmachen will.
Also eigentlich kannst du, kannst du nur gewinnen dadurch, wenn du was sagst.
Das ist ja selbst nicht so langweilig.
Das einzige, der einzige Nachteil daran ist,
dass dann der Veranstalter denkt,
oh, der, der interessiert sich ja aber voll, für den kann ich zum nächsten Mal auch wieder einladen.
Das ist der einzige Nachteil davon.
Aber das, das, das, das wirklich, also, das, was bei langweiligen Meetings,
das am besten hilft, ist, seinen Renz dazugeben.
Dann ist man nämlich ein bisschen, dann ist man nämlich einfach ein bisschen beschäftigt, ja.
Anstatt jetzt einfach nur zwei, zwei Stunden, das geht ja auch wieder, glaub ich, drei oder vier Stunden morgen, ey.
Boah, ja.
Richtig neulich, IQ wieder abnehmen, Dreck, ja.
Gut, Leute, C.O., bis morgen.
