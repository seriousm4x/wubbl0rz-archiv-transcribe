Ganz schön früh, oder?
8.46 Uhr, so früh war ich lange nicht mehr an.
Ich war heute auch nicht rennen oder so.
Ich bin einfach aufgestanden aufs Klo und dann mich vor den Rechner gesetzt.
So wie ich das früher immer gemacht habe.
Was kriege ich denn für einen Schwachsinn empfohlen, gerade auf Twitch?
Ich bekomme gerade auf Twitch, ich habe ja auch einen zweiten Bildschirm, da habe ich das ja offen.
Bekomme ich empfohlen, Ask Jesus.
Ask AI Jesus.
Gut, war ja nur eine Frage der Zeit im Endeffekt.
Bis wir AI Jesus auf Twitch haben.
Würdest du noch nicht mal, was ich nicht AI Jesus fragen sollte?
Passives Einkommen.
Ja, das muss aber sehr passiv sein, weil der hat nur 14 Zuschauer.
Aber wird trotzdem empfohlen, keine Ahnung, was da los ist.
Wie sind die neuen Azubis in der Firma?
Also.
Wir hatten einen für zwei Wochen letztens.
Also, das hielt sich sehr in Grenzen in der Menge.
Deswegen kann ich nicht sagen, wie die so sind.
Wir hatten einen für zwei Wochen und der war auch, glaube ich, im zweiten Jahr schon.
Also, kann man nicht so sagen.
Dafür hat der den Eindruck gemacht, dass ihn das interessiert.
Was ich ja prinzipiell immer ganz gut finde.
Wenn es zumindest so wirkt.
Also, interessiert das irgendjemand?
Moin.
Moin.
Neuer Pipo am Start.
Mit dem Shave-Champ.
Fox.
Zack.
Äh, falsches Fenster.
Translate-Page.
So.
Updates.
Weil Arch, by the way.
Also, wie?
Was ist da los?
Ich habe gestern Abend geupdatet und am nächsten Morgen gibt es keine neuen Updates.
Was ist mit den Arch-Leuten los?
Machen nichts für ihr Geld.
Ich brauche Updates.
Ich hätte keinen Bock, Arch irgendwie, generell irgendwie, Maintainer zu sein.
Die müssen schlafen.
Das geht nicht.
Meine Paid-Subscription.
Ich weiß, doch, du hast recht.
Die müssen sich darauf vorbereiten, dass nächstes Jahr das Jahr das Linux-Desktops ist.
Dann ist es okay.
Denn dieses Jahr war auch schon das Jahr des Linux-Desktops.
Aber das mal alles zu hier.
Brauchen wir nicht.
Wobei, ne, ich muss nicht rebooten.
Es gab keine neuen Updates.
Macht überhaupt keinen Sinn.
So.
So.
So.
So.
So.
So.
So.
So.
So.
So.
So.
So.
So.
So.
So.
So.
So.
So.
So.
So.
So.
So.
So.
So.
So.
So.
So.
ArcheLinuxDeskTops, objects.
Wer das Arche-Linux-Desktops, ah, genau.
Arch only.
Wobei ich den Eindruck ich habe, dass mittlerweile, Arche-Linux ist immer noch so das Arch-By-theway-CS nay
wo die Leute halt immer ab und zu mal irgendwelche kleinen Jokes machen aber, ich glaube, das
richtige, echte Hackerman-OS mittlerweile also das…
Das Trend-OS, wo man so als richtig cool gilt, wenn man das verwendet, ist aktuell eher nix OS.
Mit Arch, by the way, kannst du vielleicht noch die ein oder anderen Lacher generieren oder so,
aber du lockst keinen mehr so hinter, wie hat mein Opa gesagt, hinterm Ofen hervor, ja, wenn man Arch verwendet.
Jeder verwendet Arch mittlerweile, gefühlt, ja.
Aber die richtig krassen Hackermans, die sind schon eine Stufe weiter.
Für die ist Arch mittlerweile auch schon deutlich zu Mainstream.
Deswegen verwenden die richtig coolen Leute, glaube ich, heute eher nix OS.
Nicht, dass es jetzt irgendwie, dass denen so viel bringen würde als Vorteil,
aber die haben halt was, was nicht Mainstream ist.
Ich muss ja sagen, ich zähle mich da ein bisschen dazu, ja.
Ich bin auch jemand, der Sachen cool findet, aber sobald sie Mainstream, zu Mainstreamig werden,
habe ich oftmals keinen Bock drauf.
Twitch ist anders.
Das ist eines der wenigen Sachen, die sich trotzdem gehalten hat.
Ja, geht ja auch, ja.
Ich habe ja auch hier den Nix-Package, habe ich nicht.
Auf meinem anderen, auf meiner anderen VM, die ich sonst verwende, wenn ich nicht streamen soll,
auf dem anderen Account, da habe ich das.
Habe ich auch den Nix-Package-Manager.
Das ist ganz praktisch, das ist für manche Sachen.
Ja, ich habe ja auch oftmals so das, sobald es zu Mainstreamig wird, habe ich keinen Bock mehr drauf, ja.
Ich habe zum Beispiel vor Jahren mega gerne Speedruns geguckt.
Alles mögliche.
Aber, irgendwie habe ich jetzt auf die wenigsten Sachen da noch Bock.
Ich habe auch die ganzen Speedrun-Marathon-Events geguckt und so, aber das ist teilweise jetzt so...
fast schon...
fast schon Standard, dass das Gefühl, jeder guckt, ich habe irgendwie keinen Bock mehr drauf.
Also habe ich öfters.
Bei Sachen, die ich cool finde, aber sobald, sobald sie irgendwie zu Mainstream werden,
habe ich dann keinen Bock mehr drauf.
Twitch ist so eines der Sachen jetzt, das hat sich irgendwie gehalten.
Twitch ist ultra Mainstream mittlerweile, aber ich gucke es immer noch.
Und YouTube kann man nicht dazuzählen, weil YouTube war schon quasi als Haupt-Video-Plattform, war schon immer Mainstream.
Natürlich nicht so krass an Nutzerzahlen wie heute, aber es war schon immer die Video-Plattform schlechthin, seit sie gab eigentlich.
Vielleicht, vielleicht die ersten 1-2 Jahre nicht, aber danach war es das.
Ich meine, was, was war damals die Alternative zu, zu YouTube?
Clipfish oder, oder was, was weiß ich, was ist da noch?
Dings, ähm, wie hieß das?
Vimeo und so ein Schrott, ja, die können sich knicken.
YouTube war immer schon, seit es das gab, sagen wir mal die ersten 1-2 Jahre, vielleicht 1000 vor, ja,
die, die Mainstream-Video-Plattform, auch wenn es nicht so krass viele User hatte, wie MyVideo und was ich, äh, genau, ja.
War nicht Vimeo MyVideo? Ist das nicht irgendwie umgegangen? Ja, gab's, gab's ja alles.
Ich kann mich noch dran erinnern, also in der, an die Pre-YouTube-Zeit,
und zwar gab's da ganz viele, so, heute würde man sagen, so, so, so, so Meme-Webseiten, wo, wo, wo die Leute irgendwie so kleine Videos und Sachen posten.
Damals hat niemand das Wort Meme dafür verwendet, ja, da wurden dann so Sachen gepostet, wie, keine Ahnung, der Assitoni oder sowas.
Da, da, da, der ist ja nicht auf YouTube, YouTube gab's ja noch nicht, als der Assitoni sein, die Wahrheit veröffentlicht hat, ja.
Ich weiß aber nicht mehr, wie diese ganzen Videos heißen.
Das war so zu der Zeit, wo die Leute auch in irgendwelchen Webchats rumgesessen haben und Chatter-Stells gemacht haben den ganzen Tag.
Oder Zeiten, wo Leute noch AOL Messenger verwendet haben oder, äh, MS, nee, wie hieß das Ding, MSN Messenger und so.
Davor, davor auch noch ICQ, wobei ICQ, ich muss euch ehrlich sagen, von den ganzen Messengers, die es damals gab, so MSN Messenger, AOL Messenger,
da gab's ja noch irgendwelche, welche, ähm, Multi-Messenger, die alles andere unterstützt haben und sowas.
Ich war damals ICQ-Fan, ich mein, ich hatte Accounts auf diesen, auf diesen anderen Plattformen und so.
Ich hatte sogar mal, ich hatte sogar mal einen Jabber-Account.
Ähm, IC, ICQ war, war schon nice.
Man muss auch sagen, ICQ war ein bisschen seiner Zeit voraus, weil ICQ hatte damals schon so ne, so ne, so ne App-Plattform mit eingebaut, ja.
Du konntest, du konntest über, über ICQ kommen.
Du konntest, du beispielsweise, äh, Web-based oder, ich denk mal, Web-based Games spielen und solche Geschichten, Multiplayer, so, so Casual-Multiplayer-Games über ICQ.
Ich weiß ehrlich gesagt auch nicht, was schiefgelaufen ist bei ICQ, weil die waren mal ne Zeit lang so das Chat-Tool schlechthin.
Wurde übrigens, by the way, falls das irgendjemand noch nicht mitbekommen hat, wurde eingestellt.
Wenn man ICQ heute verwenden will, soll man VK Messenger verwenden.
Und ganz ehrlich, VK Messenger.
Ist nett.
Ist mir eindeutig zu gecommodet.
Mal ganz einfach nachgesehen, es hat ja auch keinen Sinn, irgendwie.
Warum sollte man das verwenden?
Man kann auch einfach Discord verwenden heutzutage.
Ja.
Ja, und ich weiß nicht, was bei ICQ falsch gelaufen ist, aber die haben irgendwann aufgehört, einfach Neues zu machen.
Oder mit der Zeit zu gehen.
Die waren der etablierte oder eines der etabliertesten Messenger schlechthin.
Hatten auch die besten Voraussetzungen mit ner eigenen, nennen wir es mal App-Plattform.
Damals hätte man das noch nicht so genannt, aber, ja, mit nem eigenen Store und alles.
Aber als die Leute dann angefangen haben, ja, das stimmt schon.
Ja, als die Leute dann angefangen haben, so Sachen wie WhatsApp und sowas zu, genau, ja, WhatsApp zu verwenden,
war es halt vorbei.
Da sind die nicht mit der Zeit gegangen.
Man muss halt auch sagen, WhatsApp ist das beste Beispiel dafür, wie sich, nennen wir es mal, eigentlich nix Besonderes,
von der Technik her, oder jetzt auch eigentlich nix wirklich bahnbrechend Neues,
durchsetzen kann, indem es einfach für den Casual-Noob einfach ist.
Ich finde, da ist WhatsApp eines der besten Beispiele, für die es gibt.
Weil, letztendlich war WhatsApp unter der Haube nen ganz normalen Messenger übers Internet, wie ICQ und alles andere auch, ja.
Das war nix Besonderes in dem Fall von der, von der Technik, von der Idee.
Natürlich, wie die das damals alles skaliert haben, das ist auch, Hut ab, ne, also das ist nicht einfach.
Aber es war, es war im Prinzip nix Besonderes.
Aber, ihr erinnert euch vielleicht noch an so, weiß ich, wann, wann kam WhatsApp, weiß ich, wann kam das raus hier,
WhatsApp Release 2009.
Ihr erinnert euch ja wahrscheinlich noch so an diese Zeiten, 2009, 2000.
Ich hätte, ich hätte sogar drauf geguckt.
Ich hätte drauf wetten können, das war noch ein bisschen früher.
Aber, ne, passt schon.
iPhone ist, das erste iPhone kam ja auch so in dem Dreh raus.
Zumindest, ihr erinnert euch vielleicht noch an die ganzen Casual-Noobs, die keine Ahnung hatten, ja.
Ich weiß noch, damals, irgendeine Freundin von meiner Mutter hat erzählt, also hat sich damals wieder, wieder Mega-Hackerman gefühlt.
Und ihr könnt euch vorstellen, das ist, das ist jetzt, äh, 15 Jahre her und die waren damals auch schon alt.
Vielleicht nicht ganz so alt wie heute, aber die waren damals auch schon alt.
Die waren, die waren damals halt definitiv auch nicht großartig technikaffiner als heute, ja.
Und die hat sich wieder Ultra-Hackerman gefühlt und irgendwann hat die so erzählt, oh, kennst du schon, ich glaube, die hat damals nicht App gesagt.
Ich, ich glaube, das Wort App war, auch wenn es WhatsApp heißt noch nicht.
Kennst du schon irgendwie die Möglichkeit, kostenlos SMS zu verschicken?
Das haben die Leute damals, genau das haben die Leute damals immer gesagt.
Die haben immer geschrieben, da kannst du, stell dir vor, da kannst du kostenlos SMS verschicken.
Und also, oh, kostenlos, damals war ja für viele Leute, 2009, die hatten ja noch diese ganzen, äh, Nokia, äh, solche Dinge und sowas hatten die Leute damals noch.
Oder diese, wie hießen die, 4110, nee, wie hieß, die hier, ja, genau, die Leute hatten ja damals noch solche Dinger.
Nee, das war 2015, ja, äh, äh.
Die Leute hatten ja damals teilweise noch solche, noch solche Dinger, ja.
Und da lief natürlich WhatsApp nicht drauf, aber die Leute haben damals noch saumäßig viel SMS geschickt.
Und SMS war für viele Leute damals noch voll die Hyper-Bleeding-Edge, supermoderne Geschichte.
Oh, ich habe eine SMS geschrieben.
Und als dann WhatsApp um die Ecke gekommen ist und gesagt hat, ihr könnt kostenlos SMS verschicken.
Was ja gar keine SMS waren, haben die alle gesagt, boah, das ist das Ding schlechthin, das machen wir jetzt.
Und WhatsApp hat eine Sache gemacht, die alle anderen Messenger zur damaligen Zeit verkackt haben.
WhatsApp hat als Identifikation einfach die Handynummer genommen.
Letztendlich könnte man jetzt sagen, warum ist man so blöd und macht sowas?
Das ist doch datenschutztechnisch und will man überhaupt, dass jeder, jeder Depp auf einmal meine Handynummer hat?
Ich persönlich hätte damals gesagt, nee, auf gar keinen Fall.
Aber ich bin auch nicht der normale User für sowas.
Der normale User, der macht sich um sowas überhaupt keine Gedanken.
Die Freundin von meiner Mutter, die war hin und weg, dass sie mit WhatsApp kostenlos SMS verschicken kann.
Und die fand das sogar gut, dass ihre Handynummer dafür verwendet wird, weil es waren ja SMS, auch wenn es nie SMS waren.
Und ihre Handynummer hatten die ganzen anderen Leute auch schon.
Und letztendlich war es eine eindeutige Identifikationsnummer.
Du hast keine extra Nummer gebraucht wie bei ICQ.
Ich meine, ich weiß heute meine ICQ-Nummer noch.
Aber WhatsApp ist das beste Beispiel dafür, wie man eine Sache bauen kann, die technisch und auch von dem, wie es funktioniert, überhaupt nichts Besonderes mehr für die damalige Zeit war.
Das ist nicht viel anders gemacht als alle anderen Messengers auch.
Aber WhatsApp hat es einfacher gemacht und zugänglich für den Ultra-Casual.
Was ist mit der Twitch-App passiert? Sieht aus wie TikTok.
Ja, also gestern, als ich die offen hatte, sah die noch aus wie die ganze Zeit.
Das Einzige, was sich die letzten Monate in der Twitch-App geändert hat, das war es dann aber eigentlich auch schon, ist, dass es jetzt so komische Stories gibt auf Twitch.
Und ich habe bis heute keine Ahnung, was diese Stories überhaupt sein sollen.
Gucken wir doch mal nach. Was sind Stories auf Twitch?
Das ist so ein Feature wie dieses komische Livestream-Feature auf Reddit, was auch nie jemand verwendet hat.
Wo man sich immer fragt, was ist denn das eigentlich?
Story, Story, nicht Store. Was ist eine Twitch-Story? Ich habe keine Ahnung.
Stories auf Twitch. Abonnenten müssen einfach mal pushen, um eine Story zu halten.
Das ist im Prinzip quasi eine News-Post oder sowas.
Es ist so eine Art News-Post.
Ah, okay. Da hat sich Team Bezos gedacht, wir probieren es auch mal.
Also, ich lese die Stories nicht. Die Stories sind immer am oberen Bildschirmrand und ich frage mich immer, was soll das?
Ich habe da sicherlich schon ab und zu mal draufgeklickt.
Oh, was haben wir hier?
Benutzt auch keiner.
Die letzte Story, die mir vorgeschlagen wird, 39 Stunden ago.
Geil, okay.
Klicke ich die Story an und da steht, bald live mit Warzone Royale.
Jawoll.
Das ist ganz wichtig, dass man das im Vorfeld weiß, Twitch.
Wobei, so blöd ist es gar nicht.
Aber ich benutze dieses Feature gar nicht.
So, dann ist irgendein random Typ, der durch einen Park läuft.
Ich habe keine Ahnung, warum mir das empfohlen wird als Story.
Ja, und dann irgendjemand, der whatever, sein dreckiges Auto filmt.
Okay.
Kein Schimmer, warum das irgendwie die Stories sind, von denen Twitch meint, die interessieren mich jetzt.
Ja, das hätten die gerne so, ne?
Dass du sagst, ah, Moment, Lieblingsstreamer A kommt dann on.
Ah, dann will ich nachher Warzone gucken.
Ah, dann gibt es hier noch irgendwie das und das.
Und dazwischen muss ich noch schnell einkaufen gehen.
Ja, das ist, das ist der Traum von Twitch.
Ja.
Ich folge keinen HotTube-Channels, dementsprechend weiß ich nicht, was die so für Stories posten.
Aber ich könnte wetten, dass die meisten HotTube-Channels Twitch-Stories dafür verwenden, um indirekt ihr OnlyFans zu promoten.
Rate ich jetzt einfach mal so.
Wahrscheinlich habe ich damit auch recht.
Ich muss ja sagen, es gibt so ein paar Dinge, wenn man gewisse Sachen im Internet, zumindest geht mir das, also, wenn man so ein paar Sachen im Internet eine Weile verwendet, kann man es oftmals schon vom Angucken ganz gut einschätzen.
Zum Beispiel, ja?
Zum Beispiel konnte ich zu Zeiten, wo ich 24-7 MMOs gecrimen habe,
konnte ich anhand der ersten 2-3 chatten und das kann ich heute immer noch, ja?
Anhand der ersten 1-2, also, müssen wir mal ein Beispiel machen.
Stellt euch vor, ich spiele irgendein MMO und ihr wisst ja, wenn ich oder der Fabian oder auch ein paar andere Leute, mit denen ich öfter spiele,
wenn wir irgendwelche MMOs spielen, da wird ja immer hardcore reingecrindet und wir kriegen alle Anfälle, wenn rumgenubt wird, ja?
So.
Und was ich gelernt habe zu meinen 24-7 MMO-Kreisel-Crimes,
ist, ich kann anhand der ersten Chatnachricht oder spätestens anhand der ersten paar Chatnachrichten einschätzen, ob einer ein Noob ist oder nicht.
Kennt ihr das? Vielleicht auch von anderen Online-Games?
Also mal angenommen, ich, man baut irgendeine Gruppe für, also, du baust irgendeine Achtergruppe für PvP und du sagst hier, wir suchen noch Leute für das und das.
Und dann meldet sich irgendjemand und du kannst anhand der Chatnachricht,
ich erkenne anhand der Chatnachricht, anhand der ersten 1-2 Chatnachrichten schon, ob der Typ taugt oder ob es ein Kack-Noob ist.
Ich kann euch gar nicht so genau sagen, woran ich das festmache.
Das ist eher so ein Intuitionsding, an der Art zu schreiben, was geschrieben wird, welche Klassen gespielt werden, ob der auch gleich schreibt,
der hat zur Not noch irgendwie einen Alternativ-Slot, den er besetzen kann, so alles.
Ich kann euch anhand der ersten 1-2 Chatnachrichten sagen, ob der Typ ein Kack-Noob ist,
oder ein guter Spieler. Ich will nicht sagen, dass ich damit immer Recht habe, ja.
Ich habe auch schon falsch gelegen, dass ich gedacht habe, der ist ganz gut, ist übelst der Kack-Noob und umgedreht.
Aber zu 95% liege ich richtig. Das ist Skill-Profiling. Ja, so. Und das Gleiche ist mittlerweile, also ähnliche Sache wie das.
Ich kann euch mittlerweile, wenn ich auf Twitter, oder sorry, sorry, x ehemals Twitter,
wenn ich auf x ehemals Twitter irgendwie einen Random-Post empfohlen bekomme, von Leuten, die ich nicht kenne.
Ist ja mittlerweile auf Twitter normal, dass du übelstes Random-Zeug empfohlen kriegst.
So, und wenn ich den Post aufmache, ich klicke den Post an, lese den Post und klicke auf das Profilbild.
Ich kann euch zu 99% sagen, ob der ein Onlyfans-Account hat oder nicht.
Rein von der Message auf Twitter und vom Profilbild. Und das Profilbild muss kein typisches Onlyfans-Bild sein.
Es gibt irgendwie so eine gewisse Sache, man kann es schlecht erklären, aber du guckst dir den Post an, du guckst dir das Profilbild an
und du weißt, okay, Onlyfans-Account, ja oder nein. Und du liegst zu 95% richtig. Schwer zu sagen, woran man es festmacht, keine Ahnung.
Gibt es so ein paar Internet-Posts?
Die Internet-Skills, die lernt man mit der Zeit.
Wahrscheinlich ist es zum größten Teil die Art des Profilfotos, ich weiß nicht, woran man das festmacht.
Ja? Ja klar, auf Reddit kannst du das auch 100% einschätzen.
Ja gut, das ist das Nächste, sobald du aufs Profil gehst und du schon denkst, okay, Onlyfans-Account am Start
und dann einen Linktree-Link siehst, musst du da eigentlich gar nicht anklicken, du weißt, da ist Onlyfans am Start.
Naja, es gibt so ein paar Sachen mit der Zeit, wenn man einfach das Internet benutzt.
Das ist genauso, ohne Mist, das ist genauso, wie man Clickbait-Thumbnails und Videos mit der Zeit relativ treffsicher erkennen kann.
Oder generell Content, der sich lohnt zum angucken oder nicht. Es gibt einfach, ich will nicht sagen, man liegt damit immer 100% richtig,
aber es gibt einfach so gewisse, ja oftmals auch so subtile Sachen, wenn du das siehst, weißt du, okay, das lohnt sich eigentlich nicht anzugucken
und umgedreht, ey, passt. Das ist aber ganz schwer zu sagen. Da müsste ich mal wirklich drauf achten, was das denn jetzt letztendlich ist.
Aber ich würde sagen, ich liege da auch zu 95% richtig. Ich kann euch zu 95% sagen, okay, das ist irgendein Cheatbait-Video, der einfach nur reinschreibt, hier super krass, sonst wie.
Oder zum Beispiel, wenn ich schon einen Videotitel sehe, das ändert alles. Und da ist dann irgendein Pfeil auf irgendwas oder sonst was.
Da weißt du schon, okay, in der Regel ist das Schwachsinn. Was immer ein ganz guter Hinweis ist bei Technik-Videos, wenn du dich selbst schon ein bisschen auskennst in der Thematik
und dann spezielle Stichwörter liest und denkst, okay, das schreibt nur einer rein, der auch weiß, wovon er spricht und so weiter.
Ja, das ist, ja, ja, ja. Bei AI-Bildern liegt man auch relativ richtig.
Also, was mir bei AI-Bildern aufgefallen ist, dass die, zumindest gehe ich mal davon aus, dass das so die Standardmodels sind, ohne dass man da sich großartige Prompts überlegt hat und so,
die generieren Haut immer sehr glänzend, ja. Ja, da weißt du auch schon Bescheid.
Aber gerade Haut und so reflektierende Sachen, das ist dann oftmals so übernatürlich glänzend bei AI-Bildern.
Ich kann das nicht anders beschreiben, ja. Und es gibt so Sachen, da einfach durch das pure Benutzen einer Plattform lernt man mit der Zeit so,
was man sich angucken sollte und was besser nicht, ja. Ich weiß gar nicht, wie ich jetzt da drauf gekommen bin, aber random.
So, Updates habe ich gemacht, gibt keine Updates. Dann lasst uns doch mal kurz gucken, was es für Shithub-Trends gibt.
Und wir müssen uns unbedingt das Stack Overflow...
Survey 2024 angucken.
Was sich da so tut bei den ganzen Proggermans.
Also, was trenne denn auf GitHub? Draw DB. Free, simple, online database design tool.
Wofür braucht man denn sowas?
Da kann ich meine DB... Ist das quasi DB as a Service? Nee, nee, nicht as a Service. DB as a Canvas. Oder sowas.
Aha, aha.
Okay, jetzt kann ich meine Datenbank malen.
Table.
Okay, das ist sicherlich ganz nice für Leute, die da was ganz komplexes designen wollen.
So Datenbank-Modeling-Tools und so gibt es ja schon eine Weile.
Ich muss euch ehrlich sagen, ich habe noch nie in meinem Leben ein Datenbank-Modeling-Tool verwendet, um mein Datenbank-Zeug zu modeln.
Vielleicht bin ich einfach nicht Business Enterprise genug.
Was meint ihr? Ist das overrated, jebaited oder bin ich nicht Business Enterprise genug?
Verwendet ihr...
Verwendet ihr solche DB-Modeling-Tools?
Also, ich bin da eh sehr noob-mäßig unterwegs.
Ich erstelle... Also ich...
Ich erstelle in .NET, sagen wir mal, ich mache eine Web-Anwendung, ich erstelle irgendeine Klasse für meine Datenbank-Entries
und lasse dann Entity Framework Core die Datenbank-Tabellen dafür anlegen.
Mich interessiert eigentlich bloß die Sicht aus Software-Sicht.
Und wie die Tabellen, was Entity Framework dann im Endeffekt für die Datenbank-Tabellen anlegt,
was die Framework dann im Endeffekt für Tabellen darunter für mich anlegt, ist mir eigentlich wurscht.
Aber vielleicht ist das im großen Business Enterprise-Stil nicht mehr... nicht mehr gut.
Zu visualisieren im Nachhinein, ja, da stelle ich mir das vielleicht auch ganz sinnig vor, wenn du schon was hast.
MySQL Workbench.
Sieht das so ähnlich aus?
Oh nee, das sieht noch abgedrehter aus.
Alter.
Okay, das ist die... Das ist... Das ist eindeutig die Business Enterprise-Variante hiervon.
Es ist Windows, es ist Client-seitig.
Es ist von Oracle.
Ja, das ist... Das ist Hardcore Business Enterprise.
Ist das echt so?
Also sicherlich ist das umfangreich, ja.
Aber was interessiert es einen im Endeffekt?
Die Binary Size ist ja nicht wirklich ausschlaggebend am Ende.
Und ist Entity Framework Core wirklich uneffizient?
Ich denke, du kannst in Entity Framework Core ohne Probleme sehr ineffizient sein.
Das heißt, du kannst in Entity Framework Core sehr effizient Queries bauen.
Das kannst du allerdings von Hand auch.
Ich würde sagen, im Durchschnitt ist das eigentlich schnell genug.
Okay, ich verstehe...
Also mal angenommen, wenn du irgendwelche wirklich super optimierten High-Performance-Abfragen brauchst,
ja, dann kann ich mir vorstellen, das ist vielleicht noch sinnvoll, SQL von Hand zu bauen.
Okay, das kann... Dann... Das kann ich mir vorstellen, ja.
Da weiß ich gar nicht, inwieweit das alles unterstützt wird überhaupt mit Native AOT.
Das ist ja ein nettes Wort, ja.
Jeder andere, ja, kompiliert das einfach.
Go macht Single Binaries draus.
Und AOT, das haben die bei .NET irgendwie...
Das ist kein neues Wort, aber die verwenden das gerne.
Ahead-of-Time-Compilation, ja.
Wahrscheinlich, um das Ganze von JIT abzugrenzen.
Also ich sehe, ich bin einfach nicht Business Enterprise genug, solche Tools zu verwenden.
Okay.
Keine Ahnung, was das sein soll.
China-Chinesen-Kram.
One-Stop-High-Quality-Data-Extraction-Tool.
PDF.
Okay, whatever.
Docker für macOS.
Ach nee, Run macOS 4M in Docker.
Okay, wollen wir wetten, Leute, dass das im Prinzip einfach nur ein Image mit KVM ist.
Äh, kein Image mit KVM.
Also quasi, dass du mit KVM einfach passtruhen musst und das mit ein paar Configs für macOS daherkommt.
Ja, ist es. Ist es im Endeffekt.
Also kann man auch ohne Probleme selbst machen.
Aber nice ist es schon, weil ansonsten...
Arch, by the way. Sehr schön.
Als Basis wird es verwendet.
Aber es ist natürlich trotzdem ganz angenehm.
Weiß die Frage.
Wie kommt dieses Ding an sein macOS-Image?
Sicherlich sehr legit alles.
Der OS X Serial Generator.
Die Frage ist, wo bekommt er sein ISO her?
Wollen wir das mal ausprobieren, ob das funktioniert?
Wir können es einfach ausprobieren. Das interessiert mich.
Also wenn das taugt, starte ich Docker und habe dann ein funktionierendes macOS.
Okay.
Was ist denn das aktuelle macOS?
Monteri Ventura Sonoma macOS Versions.
So Mona. Okay.
So Mona. Ich probiere das jetzt einfach mal aus.
Ich mache vorher mal einen Snapshot.
Man weiß ja nie, was das so treibt mit seinem System.
Drei Tabs. Ja, Moment. In der VM wenigstens.
Ich habe hier schon ein bisschen mehr Tabs offen.
Gerade hier ist ordentlich getappt.
Ich bin auch mal gespannt, ob das funktioniert.
Ich meine, das ist nested-Virtualisierung in dem Fall jetzt.
Das ist eh schon nicht so dolle.
Aber schauen wir mal. Mal gucken, was passiert.
Vielleicht muss man das gut laufen lassen wegen KVM.
Mal schauen. So.
Docker pullt. Dann pull mal Docker.
Massive. Download-Stells. Erst mal das halbe Internet runterladen.
Wobei immer noch besser als Node-Module-Zynken.
Weil da ist es wirklich das ganze Internet.
Selbst mit Hardware-Beschleunigung.
Ach so, meinst du das? Ja, ja.
Das wird nicht richtig laufen. Gehe ich auch von aus.
macOS ohne Grafik-Hardware suckt.
Kannst du knicken.
Ich habe einmal macOS installiert auf einer Third-Party-Kiste.
Wegen so einer alten Asus-Box.
So eine Art NUC.
War das damals noch, bevor es NUCs gab.
Das ging überhaupt nicht richtig.
Erst als ich den Nvidia-Grafik-Treiber irgendwie da reingepatcht habe, ging es halbwegs brauchbar.
Okay. Lädt er jetzt macOS runter?
Permission denied. Permission denied.
What the fuck? What is happening?
Was passiert hier gerade?
Initialization failed.
Okay.
Ich glaube, wir lassen den Sound weg.
Wobei, der Sound ist schon weg, oder?
Ja, keine Ahnung. Das scheint nicht zu funktionieren.
Moment. P?
Man muss das doch bestimmt...
Man muss das... Man muss das doch bestimmt...
Da muss man doch bestimmt noch irgendwas anpassen.
Ähm. Wie startet man das jetzt?
Also das ist... Das sind die User.
Was muss ich hier wie mappen?
Also so richtig selbsterklärend ist es nicht.
Initial Setup?
Achso. Ja, das ist wie man QEMO und KVM und so installiert.
Ich meine, ich kann das mal installieren. Ich gehe aber davon aus, ich habe davon alles, was man braucht.
IP... Remove IP Terrier. Okay, meinetwegen.
Ich werde meinen Snapshot dann wieder...
Eigentlich gedacht, das meiste habe ich da schon drauf.
Okay.
Gut, dass ich einen Snapshot gemacht habe, Leute.
Wird Log D. Okay, whatever.
Alles klar. Ich mache das einfach mal.
Ja, Modprobe KVM muss ich nicht machen. Das habe ich auf jeden Fall schon geladen.
Und Windows. Nein, nein, nein, nein, nein, nein.
Okay, und jetzt...
Probieren wir das nochmal aus.
Ist hier irgendeine Soundkarte, die nicht geht?
Okay.
Also, Leute.
Wir rebooten mal einmal. Man weiß ja nie.
Gucken wir mal, ob das funzt.
Da steht jetzt halt auch nicht, was man machen muss mit dem User.
Irgendwie "-p user".
Muss das mein lokaler User? Aber meine lokale User haben garantiert nichts.
Mein lokaler User hat ID 1000, ja.
Erster User.
Und ich glaube nicht, dass man hier irgendwas ändern muss. Das hätte man ja beischreiben können.
Warum muss man, by the way, bei dem neuen so viel mehr angeben?
Ich probiere mal was Älteres an.
So, da kann nicht so viel schief gehen.
Could not create a backend.
Also, ALSA hat irgendwelche Schmerzen. Okay.
Sound.
Ich will gar keinen Sound benutzen, ehrlich gesagt.
Wie wäre es mit Sound erstmal weglassen?
Oder bootet macOS nicht? Ohne Sound.
Okay, gucken wir mal, ob das Ältere bootet.
Wenn nicht, dann nicht.
Ich will mal nicht ausschließen, dass es auch an meinem VM-Set ist.
Aber ich kann ohne Problem eine nested-Virtualisierung starten hier drinnen.
Also, daran liegt es nicht.
Ich kann mir das auch vorstellen, dass macOS nicht bootet ohne Sound.
Okay.
Okay, keine Ahnung, das funktioniert nicht so einfach.
Gut, dass wir einen Snapshot gemacht haben.
Reverten wir den ganzen Shit mal wieder.
Und freuen uns, dass wir eine VM verwenden und Snapshots machen können.
Dann hat sich das jetzt erledigt.
Aber trotzdem ein nices Projekt, wenn es funktionieren würde.
So, was haben wir sonst noch im Trend diesmal?
Dice.
Shop in Replacement of Redis.
Minus P ist der Port, du hast recht.
Ja, ja, du hast recht.
Und ich wieder auf User komme.
Real-Time Interactive Streaming Digital Human.
What?
Das ist schon wieder so ein Titel von einem Projekt, wo ich absolut keine Ahnung habe, was es sein soll.
Ich glaube nicht, dass es an der VM liegt.
Weil ich kann Nested-Virtualisierung starten ohne Probleme.
Nested-Virtualisierte Sachen.
Real-Time Interactive Streaming Digital Human.
Was soll das sein?
Ah, China-Chinesen-Zeug, okay.
Ali-Jungs.
Was soll das? Leute, also...
Ich will jetzt da nicht weiter gucken.
Wer weiß, auf welchem China-Chinesen-Kram man da rauskommt.
Keine Ahnung, was das sein soll, oder?
Motion Capture.
Ach so.
Okay, wenn man das kennt, dann ergibt das Sinn.
So hätte ich jetzt keine Ahnung gehabt, was das sein soll.
Free Code Champ.
Dann wäre das ja von mir.
Das ist bestimmt was für VTuber.
Gut möglich.
Dass man sich jetzt Anime-Girls streamen kann, ja.
So.
Irgendwas Spannendes.
Pocket Base.
Da habe ich mir schon ein paar Tutorials angeguckt.
Pocket Base ist für die ganzen Frontend-Stelzer gut, die keinen Bock haben, Backend-Zeugs selbst zu programmieren.
So als Single-Single-File.
Alter, Chatge, was ist da los?
Max, warum benutzt du noch Windows? Welche Dinge benutzt laufen nur unter Windows?
Zum Beispiel Spiele mit Anti-Cheat.
Sony Vegas funktioniert auch nur gescheit unter Windows.
Und wie es mit Affinity Designer aussieht, bin ich mir gar nicht so sicher.
Ich könnte mir vorstellen, das läuft auch nur gescheit unter Windows.
Okay. Sekunde, Leute.
Ah, nice, Tarex. Ich wollte auch gerade...
Ich wollte auch gerade...
Du kannst den ruhig bannen.
Keine Ahnung, was da abgeht.
Ich war gerade auch am Tippen. Ich hatte schon slash bann getippt.
Also bei mir wäre er für immer weg gewesen.
Draw.io für den Desktop. Ja, gut.
Übrigens, das heißt ja gar nicht mehr Draw.io.
Das ist für mich ein Fall von...
Die haben einen guten Namen mit einem schlechten Namen umbenannt.
Die heißen nicht mehr Draw.io, die heißen jetzt app.diagrams.net.
Ich meine, seriously, Leute. Was ist besser?
Hä?
Diagrams.net?
Oder Draw.io?
Also jeder, der sagt, Diagrams.net ist besser als Draw.io,
den... ja, da gehe ich nicht mit.
Draw.io war eines der griffigsten und besten Namen für so ein Produkt,
was man hätte sich ausdenken können.
Ja, und sie haben es dann umbenannt.
Das ist richtig dumm.
Denen war die I.O. Domain zu teuer.
Also, wenn es das wirklich gewesen sein soll...
100 pro war das Managerentscheidung, eine doofe Managerentscheidung.
Draw.io war der beste...
Die Domain haben sie ja immer noch und leiten immer noch weiter.
Wann treffen Manager mal gute Entscheidungen?
Ich würde sogar so weit gehen und sagen,
die meisten Entscheidungen, weil die müssen ja viele Entscheidungen treffen,
die meisten Entscheidungen sind relativ neutral.
Und viele sind auch gar nicht so übel,
aber es fallen einem halt immer besonders die richtig schlechten Entscheidungen auf.
Ich finde es auch nicht schlimm, wenn Manager schlechte Entscheidungen treffen,
weil du weißt es ja nicht, du kannst ja nicht in die Zukunft gucken.
Ja, manche Sachen sehen halt zum aktuellen Zeitpunkt
nach einer guten Entscheidung aus, sind es dann aber nicht.
Was ich aber immer bescheuert finde, ist,
wenn man schlechte Entscheidungen getroffen hat
und danach nicht zugeben kann, dass es eine schlechte Entscheidung ist,
indem man einfach immer weiter mit den schlechten Sachen macht.
Also, ich erwarte gar nicht, dass einer immer nur gute Entscheidungen trifft,
das geht ja gar nicht.
Echt, der Bun wurde removed? Hat er dir was geschrieben oder was?
Hat er appealed?
Zumindest, wenn man danach...
Also, ich erwarte nicht,
dass man das jetzt groß zelebriert und sagt,
oh, ich habe hier eine falsche Entscheidung getroffen als Manager,
aber ich würde erwarten, wenn man feststellt,
okay, es war eine doofe Entscheidung,
dass man dann nicht noch weiter die blöden Sachen macht,
die sich als schlecht herausgestellt haben,
einfach nur, weil man nicht zugeben kann, dass es eine schlechte Idee war.
Also, ich habe das bei ganz vielen Projekten schon gesehen,
gerade beim letzten Arbeitgeber auch.
Da hat sich herausgestellt, dass es eine blöde Idee war,
auf, sagen wir mal, Technologie X zu setzen.
Das hat ja mal irgendjemand entschieden,
das zu machen.
Und daraufhin hat sich dann halt im Laufe des Projekts auch herausgestellt,
ey, es war eine blöde Idee, auf Technologie X zu setzen.
Nur mit dem Unterschied, dass man das dann nicht eingesehen hat offiziell,
sondern gesagt hat, wir setzen jetzt erst recht weiter auf Technologie X,
obwohl die sich halt schlecht geeignet dafür herausgestellt hat,
weil, wenn man das jetzt nicht mehr macht,
dann müsste ich ja zugeben, dass es eine schlechte Entscheidung war.
Ja, unklare Sachen, es taugt auch nichts.
Ja, wenn du so in der Luft hängst und nicht weißt, sollst du jetzt, sollst du nicht.
Ja, das stimmt.
Aber das finde ich auch immer blöd.
Wenn dann schlechte Sachen weiter gemacht werden,
nur damit man keinen Gesichtsverlust oder so, was auch immer man sich da so denkt, erleidet,
weil man ja mal was entschieden hat, was nicht richtig war.
Ich finde das überhaupt nicht schlimm, wenn Mist entschieden wird.
Manche Sachen, du kannst nicht immer 100% richtig liegen.
Mein Lieblingsbeispiel dafür ist, beim letzten Arbeitgeber wollten sie,
das habe ich euch schon mal erzählt,
dass sie so eine Art Dropbox-Konkurrent bauen.
Nicht wirklich, also kein Public-Dropbox-Konkurrent,
also dass jeder das benutzen könnte oder so,
sondern nur für Leute mit einem Abo so als Zusatzfunktion.
Und natürlich haben sie sich gedacht,
boah, Dropbox, geiles Zeug, das ist Cloud.
Und deswegen müssen wir es jetzt auch so richtig Cloud-Native bauen zu einer Zeit,
wo man mit solchen Buzzwords noch vollpumpen konnte.
Naja.
Und im Endeffekt hat man sich dann eine Software hingestellt,
die richtig gut war, so Distributed File Storage zu sein,
wenn man sie richtig verwendet.
Wenn man beispielsweise mehrere Standorte über die Welt verteilt hat.
Wenn man nur zwei Rechenzentren in Frankfurt hat,
war die Software so ziemlich die schlechteste Variante
und hat auch richtig viele Probleme gemacht.
Zum Beispiel, weil die Software dann,
sagen wir mal, du hast dann zehn verschiedene Nodes gehabt
für diesen Storage-Cluster.
Und eigentlich war es dafür gedacht,
dass du halt zehn verschiedene Standorte hast.
Oder sagen wir mal, du hast fünf verschiedene Standorte
mit jeweils zwei oder drei Nodes.
Also in der Richtung war das gedacht.
Was wir gemacht haben ist, wir hatten zwei Standorte
und an jedem Standort dann fünf Nodes und sowas in der Richtung.
Und da war dann halt das Problem,
ein hausgemachtes Problem, weil man weiterhin trau...
Es war nicht Ceph. Nein, es war nicht Ceph.
Es war... Wie hieß denn das? Das gibt es nicht mehr.
Das hieß... Es war irgendwas... Gibt es mal...
Irgendwas, was... React oder so. React Cloud Storage war das.
So ähnlich. Irgendein Produkt von denen.
So. Und das kennt keiner.
Ich habe auch sonst danach nie wieder erlebt,
dass das irgendjemand verwendet hat.
Zumindest war dann halt das Problem,
dass man es so aufgebaut hat, wie es der Hersteller empfohlen hat.
Ja, also mit, sagen wir mal, zehn Nodes.
Das Problem war, dass es halt gedacht war, zehn Nodes an, keine Ahnung,
acht Standorten oder so zu betreiben.
Diese zehn Nodes insgesamt.
Und wir haben zehn Nodes halt gesplittet auf zwei Standorte betrieben.
Das heißt, an jedem Standort fünf Nodes.
So, und da hattest du jetzt das Problem gehabt,
dass du ja, wenn du nur zwei Standorte hast, ja,
du musst halt sicherstellen, weil es da,
weil mit zwei Standorten ist es halt immer noch 50-50 die Chance.
Wisst ihr, wie ich meine?
Also du hast immer noch die Chance, wenn ein Standort ausfällt,
dass dann Replikas der Files gerade nur in diesem Standort lagen.
Und standardmäßig hat diese, diese Distributed Storage Lösung,
hat halt drei Replikas von jeder Datei angelegt.
Aber ihr könnt es euch ja überlegen.
Ich habe euch das ja schon mal erzählt.
Wenn ihr zwei Standorte habt mit jeweils fünf Nodes,
aber drei Replikas von einer Datei,
ist die Chance gar nicht mal so gering,
dass eine Datei dreimal am gleichen Standort liegt.
Und wenn dieser Standort ausfällt,
dann ist die Datei halt nicht verfügbar.
Was halt schlecht ist für einen Dropbox-Ersatz.
Das Problem hättest du nicht,
würdest du die Software verwenden, wie sie gedacht ist,
nämlich, keine Ahnung, sechs, sieben Standorte auf der Welt
mit jeweils eins, zwei Nodes, ja,
dann hättest du das Problem gar nicht.
Also, hättest du verwendet, wie es gedacht wäre,
wäre das alles gut gewesen, hat man aber nicht.
Und deswegen musste man im Endeffekt in den sauren Apfel beißen
und hat gesagt, okay, wir stellen die Replikas hoch von drei auf sechs,
damit man mindestens sicherstellen kann,
dass am zweiten Standort noch mindestens eine Replika da ist.
Das heißt, man einfach mal den Storage-Bedarf verdoppelt
und alles schlechter gemacht.
Und dass dieses Produkt nicht dafür geeignet ist,
wie man das architekturtechnisch bauen will,
hat sich schon relativ früh in diesem Projekt rausgestellt.
Aber die Manager-Dudes, die daran beteiligt waren,
die konnten nicht zugeben,
dass sie eine schlechte Software ausgewählt haben für das Projekt.
Hätte man ab dem Zeitpunkt gesagt, ey, war keine gute Idee,
dann hätte man sagen können, wir bauen das anders.
Aber man hat das bis zum Ende durchgezogen.
Das ging dann irgendwann live und war scheiße.
Aber das System muss doch wissen, welche Nodes an welchem Standort sind.
Keine Ahnung, ob das das weiß oder nicht.
Zumindest gab es anscheinend keine Location-Affinity oder sowas,
die man einstellen konnte.
Also beispielsweise, wenn man Kubernetes in Google betreibt,
da kann man ja einstellen, ich möchte, dass diese Anwendung dort läuft,
wo eine andere Anwendung läuft oder wo dieser Node-Typ ist
oder in dieser Location und sowas.
Das ging da nicht.
Deswegen musstest du die Replikas hochstellen.
Das war im Endeffekt eine richtige Schrottlösung,
die sehr viel Geld gekostet hat und im Endeffekt auch dann nicht richtig funktioniert hat.
Weil logischerweise das halt nicht dafür gedacht war oder nie dafür gedacht war.
S3, wisst ihr, was mein Vorschlag da gewesen ist damals?
Die wollten das halt unbedingt als Cloud-Storage verkaufen.
Aber die hätten das ja auch nach außen als Cloud-Storage verkaufen können,
egal wie es im Backend läuft.
Das interessiert doch keinen, wie das im Backend funktioniert.
Also mein Vorschlag damals wäre gewesen, wir machen einen stinknormalen File-Server
oder aber wir nehmen einfach unser Storage, unser ganz normales,
klassisches Storage im Rechenzentrum und replizieren das zwischen zwei Standorten
und machen dann halt an den zwei Standorten irgendwie einen File-Share
und greifen darauf zu.
Man könnte ja davor noch S3-Storage, S3-Gateway stellen,
wenn man besonders Cloud-mäßig sein will.
Aber das wollten sie nicht.
Sie wollten unbedingt eine Cloud-Lösung für ihren Cloud-Service,
obwohl die Architektur, wie es aufgebaut wurde, halt alles andere als Cloud
und so wie der Hersteller sich das gedacht hat war.
Also das ist für mich so ein Paradebeispiel von so einem Projekt,
wo es nicht schlimm ist, dass man am Anfang die falsche Software ausgewählt hat.
Ich meine, auch Projektleiter, Manager und so, die sind nicht perfekt, was das angeht.
Aber wo man sich richtig, also massive Probleme und auch sicherlich sehr viel Kosten und Geld
Probleme eingefangen hat dadurch, dass man nicht zugeben konnte,
dass es eine schlechte Software war, die man ausgewählt hat
und es bis zum Ende durchgezogen hat.
Ja, also das ist so ein Beispiel, das ich halt sagen würde, das war eindeutig
Management verkackt.
Was haltet ihr von Shopware? Habe ich noch nie was mitgemacht.
I don't know.
Ist das sowas wie Shopify?
Nee, noch nichts mitgemacht.
Lass uns mal die Stackoverflow-Umfrage angucken, was da rausgekommen ist dieses Jahr.
Ich glaube, da braucht man keinen Darkreader.
Braucht er doch einen Darkreader für?
Moment, das ist aber dieses Jahr sehr unübersichtlich.
Okay, das meiste werden wir eh suchen.
Skippen, wenn ich schon sehe, dass es irgendwelche Umfragen zu AI und sonst was gibt.
Also Stackoverflow hat wieder eine Umfrage durchgeführt.
Es haben über 65.000 Entwickler und Entwicklerinnen und generell Technikinteressierte, würde ich mal sagen, mitgemacht.
Und da wurde wieder abgefragt, so was ist eure beliebteste Technologie und sonst was.
Mal gucken, was da rausgekommen ist.
Ich finde, es ist dieses Jahr sehr unübersichtlich.
Die Webseite sieht aus, wie als möchte man ein bisschen auf Apple machen.
Sah das letztes Jahr nicht etwas übersichtlicher aus?
Doch.
Naja.
Ja, doch.
Sah übersichtlicher aus.
Du konntest nämlich einfach durchscrollen und wusstest Bescheid.
Dieses Jahr weiß ich gar nicht, wo ich anfangen soll zu gucken.
Finde ich, finde ich...
Okay.
Hier geht's los.
Da doch.
Geht halbwegs.
Also.
Es sind über 65.000 Leute mitgemacht.
Die 62% haben JavaScript benutzt.
Da zähle ich uns auch mal dazu.
Der Rest ist Top Countries.
Also.
Die meisten Leute haben aus den USA mitgemacht.
Gefolgt von Deutschland.
Die Chinesen haben nicht mitgemacht anscheinend.
Oder mal gucken.
China.
Doch.
402 Leute aus China haben mitgemacht.
Na gut.
Wahrscheinlich ist Stack Overflow Access da reglementiert.
Du kommst da gar nicht drauf.
Firewall ist dazwischen, ja.
So.
Der Rest ist eigentlich ziemlich wurscht.
Databases.
Postgres.
Asynchronous Tools.
Ja.
Das gucken wir uns alles gleich an.
Celery.
Fangen wir mal an.
Das meiste können wir wahrscheinlich skippen.
Ist das...
Ist das verbuggt?
Oder lag das daran, dass ich's mit Darkreader mal kurz geöffnet hatte?
Ist das verbuggt?
Darkreader macht nix mehr.
Darkreader ist aus für die Seite.
Kann das sein, dass die Webseite verbuggt ist?
Gut.
Das juckt eh nicht weiter.
Wo die Leute gelernt haben zu programmieren, ist eigentlich wurscht.
So.
Das juckt mich nicht.
Okay.
Wie viel Erfahrung haben die Leute in Softwareentwicklung, die bei der Umfrage mitgemacht haben?
Die meisten haben fünf bis neun Jahre Erfahrung.
So voll von zehn bis vierzehn.
Tjetke, wo seid ihr da?
Also ich bin auf jeden Fall nicht da.
Weil so alt bin ich nicht.
Also ich hab angefangen Broggers-Stells, keine Ahnung, 2004, 2005 rum oder so.
Also in jetzt zwanzig Jahre, würde ich sagen, hier befinde ich mich.
Aber wie gesagt, ich arbeite ja nicht als hauptberuflicher Entwickler.
Fünf bis neun, also die meisten befinden sich ja auch hier.
Also ich bin, ich lege hier gerade Professional Coding, less than one.
Ich verdiene mein Geld nicht als Entwickler.
Ich bin zwar öfters mal am irgendwas programmieren, automatisieren, verskriptoren, sonstwas.
Aber so nach dem Motto, dass ich bei einem Job eine Stelle hätte, wo was mit Developer dransteht, ist nicht so.
Also gar keine Jahre of Professional Coding.
Years of Professional Coding Experience by Developer Type.
Ja, ist gut.
Wurscht.
Developer Types, Full Stack, Backend, Student, Student Type, okay.
Frontend.
Das macht jetzt auch nicht wirklich Sinn, oder?
Hier geht's quasi so um den Bereich.
Aber erstmal Student.
Na gut, warum nicht?
Da lernt man halt alles mögliche.
Ja, okay.
Also die meisten Leute machen Full Stack.
Nur das ist auch wurscht.
Alter, das ist natürlich interessant.
So, lass mal gucken.
Die meisten Leute sind zwischen 25 und 34 oder zwischen 35 und 44.
Ja, ich gehöre jetzt hier rein mittlerweile.
Aber ich gehöre zumindest noch nicht zu den Cobol Entwicklern.
Wäre ein reiner Developer Job.
Keine Ahnung.
Eher nicht, ja.
Alter, was geht mit der Musik ab?
Leute, ich hab ein Problem.
Oh, das ist schon lang her.
Das ist schon lang her.
Ich muss immer rechtzeitig Bett gehen.
Das kannst du mich am anderen Tag nicht gebrauchen.
Also, dass ich mal nicht gepennt hab nachts über, das ist schon ganz, so lang her,
dass ich mich nicht mal mehr dran erinnern kann.
Ähm, Leute.
Ich muss mal ganz kurz.
Afg Klo.
Es drückt.
Ich bin gleich wieder da.
Das, ähm.
Ah, dringend.
Ja, ich seh, der Chat hat weitergemacht.
Excellent.
First Level Support.
Ja, abgenommen wieder.
Keine Ahnung.
So, wo sind wir denn stehen geblieben hier bei der Umfrage?
Okay, das Alter ist mir eigentlich jetzt relativ wurscht.
Technology.
So.
Most Popular Technologies.
Lass mich raten.
Natürlich, was sonst?
Javascript ist am beliebtesten.
Es wundert mich jetzt ehrlich gesagt nicht.
Ich glaube, Javascript ist auch die Sprache, wo auf Stack Overflow am meisten gefragt wird.
Warum genau muss Python abgekürzt werden?
Wenn Bash Shell ausgeschrieben wird, hätte man nicht wirklich Pi schreiben müssen, ne?
Okay, Javascript ist beliebt in Kombination mit HTML und CSS.
Gut, ganz ehrlich, wer hätte es gedacht?
Gefolgt von Python.
Mein Headset, das spackt in den letzten Tagen öfters rum.
Ich weiß nicht, ich muss es schon wieder abmachen und mal einknoten.
Ich weiß nicht, ob es daran liegt, dass ich immer irgendwie zu viel kreisele mit dem Stuhl oder so.
Aber das ist laufend verknotet.
So, ich hoffe, jetzt geht es besser.
Warum ich so wenig Python mache?
Nicht wirklich der Anwendungszweck dafür.
Eines der Sachen, die sich bei mir anbieten sind, wenn ich für die Arbeit was mache,
sind Sachen, die sich gut verteilen lassen.
Da ist Go ziemlich gut drin.
Generell finde ich bei Python halt, solange du es nicht vercontainerisierst,
halt fast nicht richtig brauchbar.
Weil du brauchst immer irgendein Dependency-File, wo du dann Dependencies installierst.
Das ist fast so schlimm wie bei Node.
Und wenn du aus irgendeinem Python-Skript, aus irgendeinem Python-Programm
ein fertiges Binary rauspurzeln kannst,
dann läuft das auch auf vielen Rechnern gar nicht.
Also das ist, weiß ich nicht, nicht so nice.
Wenn man das vercontainerisieren kann, ist das alles top.
Dann hast du die ganzen Probleme nicht.
Aber für irgendwelche Standalone-Automatisierung-Sachen,
wofür es potenziell gut sein könnte als Shell-Skript-Ersatz,
ist es halt zu schlecht portable, finde ich.
Bei Python gibt es ja verschiedenste Ansätze.
Ich glaube, die offizielle Sache ist bei Python so ein Requirements.txt-File.
Ja, ist es.
Aber weißt du, wie die das machen?
Die bringen ihre eigene Python-Runtime mit.
Die Dinger sind auch übelst fett.
Die bringen ihre, wow, hier, Spezial-Twitch-Feature.
Was ist das denn, Rico?
Pog.
Ja, Twitch hat auch öfters was Neues.
Ich habe keine Ahnung, was das ist, aber nice, whatever.
Was ist das?
Ist das die neue Variante von Bits?
Ach, irgendwas mit Bits.
Du bist Top-Bit-Leader.
Also, man kann jetzt Emotes in groß posten, okay.
Das ist auf jeden Fall neu.
Dieser Chat ist jetzt deutsch.
Was soll dieser Satz bedeuten?
Wenn du Standard hast, vermutlich auf Linux geht es ohne Probleme, was jetzt heißt.
Ja, also das, wofür sich Python prinzipiell gut eignen würde, als Ergänzung zu Bash-Script,
sonst wie was, macht es ein bisschen zunichte dadurch, dass das Dependency-Management so eklig ist.
Also, deswegen mache ich damit wahrscheinlich auch so wenig.
Das ist halt ein riesen Vorteil von Go.
Also, ich stelle mir jetzt mal ein Live-Contain-Binary raus und es geht einfach.
Auf allen Linux-Systemen, egal wie alt, egal wie neu, es geht einfach.
So, dann machen die Leute SQL, das wundert mich auch nicht.
TypeScript, Bash, Java.
Gut, Java und C-Sharp irgendwie gleichauf.
Warum C++ überhaupt noch da drinnen ist?
Na gut, ich weiß, warum C++ drinnen ist.
Höchstwahrscheinlich wegen Spieleentwicklung.
Und Unreal.
Ansonsten weiß ich nicht, wie geistig umnachtet man sein muss,
um freiwillig Sachen, die damit nichts zu tun haben,
in C++ zu machen.
Okay, Microcontroller-Embedded-Kram vielleicht noch.
Aber ansonsten...
C++ halt einfach kompletter Schrott.
Ja, Rust ist typisch.
Das war die letzten Jahre auch ähnlich.
Rust ist die Technologie,
die mit Abstand am beliebtesten immer ist in diesen Umfragen.
Aber die nicht wirklich entsprechend der Beliebtheit weit oben auftaucht.
Heißt im Endeffekt,
die Leute mögen Rust, die Leute programmieren gerne Rust,
benutzen gerne Rust,
beschäftigen sich gerne mit Rust.
Aber im Business-Enterprise-Umfeld
ist Rust immer noch nicht so richtig angekommen.
Wobei es besser ist als die letzten Jahre über.
Aber wie gesagt, ich finde, das ist auch verständlich.
Rust ist eine Programmiersprache,
die hat seine Daseinsberechtigung
für einen ganz speziellen Typ von Anwendungen.
Und das sind die meisten Business-Enterprise-Anwendungen nicht.
Also Rust ist gut für Anwendungen,
die schnell sein müssen,
aber auch so sicher wie möglich sein,
was irgendwelche Zugriffe auf nicht existierende Array-Elemente,
auf Threads, die nicht mehr laufen,
auf generell Memory-Safety,
also Sachen, die zur Compile-Zeit so sicher wie möglich sein müssen,
mit möglichst wenig Runtime-Checks auskommen
und so schnell wie es dann halt noch geht,
sein sollen.
Dafür ist Rust gut.
Also zum Beispiel für eine CSS-Engine
in einem Browser oder sowas.
Unter anderem hat es ja so einen Grund,
dass Mozilla Rust auch entwickelt hat.
Für sowas ist Rust super.
Für alles andere bin ich der Meinung,
auch wenn Rust viel verwendet wird,
ihr müsst mal auf GitHub gucken,
ich glaube, ein Großteil der Trending-Projekte
ist zur Hälfte in Rust oder so.
Und es gibt ja auch diesen Trend,
alles und jedes an Tools,
was es schon gibt,
irgendwie in Rust neu zu entwickeln.
Ja, das ist schön, da lernt man was bei,
aber das ist nicht das,
wofür im Business-Enterprise-Umfeld
jetzt jemand Zeit hat und Bock hat.
Und die meisten Business-Enterprise-Anwendungen,
die profitieren von Rust gar nicht so sehr.
Ja, was hast du da?
Da hast du irgendwelche Windows-Desktop-Anwendungen
oder du hast irgendwelche Web-Backends und sowas.
Das ist, das kannst du alles in Rust machen.
Aber du bist in Rust auf jeden Fall langsamer
als in den etablierten Programmiersprachen da drinnen,
ohne dass die Vorteile von Rust da jetzt so ausschlaggebend sind.
Zum Beispiel Spieleentwicklung, ja.
Spieleentwicklung könntest du sagen,
oh ja, klingt ja richtig gut, Performance ohne Ende,
Rust wäre dafür richtig gut geeignet.
Das Ding ist halt, es gibt keine gescheite Game-Engine in Rust,
doch es gibt eine, die gerade im Kommen,
aber das kannst du nicht mit Unreal vergleichen, ja.
Es gibt keine Game-Engines in Rust,
und selbst wenn es die gäbe,
ist es immer noch deutlich langsamer,
in Rust was zu entwickeln, als sagen wir mal in C-Sharp
oder halt Unreal mit C++, wenn's sein muss, ja.
Und da können sich die Rust-Leute noch so viel drehen und wenden,
der Output oder sagen wir so die Entwicklerproduktivität,
die wird bei Rust immer ein bisschen schlechter sein
als bei den meisten anderen etablierten Sprachen.
Dafür hat Rust unbestreitbar andere Vorteile,
aber wenn du halt eine Anwendung entwickelst,
wo diese Vorteile nicht so wirklich relevant sind,
dann bringt's das halt im Business-Enterprise-Umfeld nicht.
Dazu kommt, dass Business-Enterprise-Software gerne mit Sachen gebaut wird,
die schon bekannt ist, ja.
Zum Beispiel Java, einfach weil du da zig Leute hast,
die sich schon damit auskennen und easy neue Leute findest.
Das sind ja auch Gedanken,
die sich Projektmanager und Leute da machen.
Dementsprechend gibt's da wenig Rust.
Nur da, wo's wirklich sinnvoll ist.
Ich hab gehört, dass irgendwelche US-Behörden,
ich hab den News-Post nicht mehr richtig im Kopf,
ihre gesamte C-Codebase jetzt umstellen wollen
über die nächsten Jahre auf Rust.
Ja, das könnte noch ein bisschen Boost geben,
aber bei denen macht's ja eventuell auch Sinn,
je nachdem, was das für Software ist, ja.
Die brauchen Software,
und die brauchen Software, die memory-safe ist,
so weit wie möglich.
Und man muss da sagen,
C ist jetzt auch nicht der Programmierkomfort schlechthin.
Also C ist halt auch super minimalistisch.
Da bist du jetzt auch nicht so schnell drinne.
Ja, Kotlin ist halt so ein Ding.
Ich glaube, Kotlin ist in Wirklichkeit relevanter,
als das aus dieser Umfrage hervorgeht.
Und das liegt daran,
weil wahrscheinlich alle, die Kotlin verwenden,
auch Java verwenden.
Das heißt, 10% von den Java sind schon die 10% Kotlin-Leute.
Und weil Kotlin nur bei neuen Projekten verwendet wird.
Und dementsprechend ist es wahrscheinlich,
wenn es um neue Projekte geht und wie aktiv entwickelt wird,
ist Kotlin wahrscheinlich noch eine ganze Ecke höher,
als es hier jetzt drinne ist.
Kotlin ist eine Sprache von JetBrains,
die auf der Java-Runtime basiert.
Du kannst quasi mit einer besseren Sprache als Java,
Java programmieren.
Und dementsprechend hast du auch Zugriff auf das gesamte Java-Ökosystem.
Du kannst bestehende Java-Sachen aufrufen
und bestehende Java-Sachen können deine Kotlin-Sachen aufrufen.
Also im Java-Umfeld ist das sehr beliebt.
Und ich glaube, dass das hier ein bisschen täuscht mit dem nur 10%.
Ich glaube, dass es eigentlich, wenn es um Aktivität geht,
wie aktiv was benutzt wird, das höher anzusiedeln ist.
Also wie aktiv die Projekte sind, die benutzt werden.
Wo dies benutzt wird.
Oh, der Rest ist jetzt erstmal nicht so wild.
Scala.
Monke S.
Du magst C-Sharp. Ich mag auch C-Sharp.
Ist ja ungefähr gleichauf mit Java.
Die letzten Jahre über stetig zugenommen.
Zurecht auch.
Microsoft gibt sich da ja wirklich sehr viel Mühe.
Was .NET und C-Sharp angeht.
Für meinen Geschmack gibt sich Microsoft da sogar ein bisschen zu viel Mühe.
Und es wurden die letzten Jahre über enorm viele Features in C-Sharp eingebaut,
die oftmals nur so halb fertig, halb durchdacht und für ganz kleine Nischen-Sachen sinnvoll sind.
Also einiges davon hätte ich nicht gebraucht,
was die letzten Jahre in C-Sharp gekommen ist.
Ich habe beispielsweise nicht einmal Default Interfaces verwendet.
Wobei, da verstehe ich, da erkenne ich den Sinn wenigstens noch.
Ja, dass es mittlerweile fünf Arten gibt, irgendwelche Sachen zu definieren.
Du hast struct, ref structs, read-only, ref structs und records structs und records classes und classes und...
Ey, Alter.
Das hätte man sich schon irgendwie schöner machen können.
Ich bin auch der Meinung, Primary Constructors hätte man nicht gebraucht.
Ja, struct ohne was davor, ja.
Also wenn man sich die, wenn wir jetzt mal, machen wir jetzt nicht,
aber wenn man mal so die, die neuesten C-Sharp Features der letzten paar Jahre durchgeht,
würde ich sagen, die Hälfte davon kamen unfertig und wurden erst später gut.
Ja, Pattern Matching hat irgendwie drei Versionen gebraucht oder so, bis man es verwenden konnte.
Und auch ihre komische Immutable Features.
Ich glaube Record Syntax hat eine ganze Weile gebraucht.
Nicht alles, nicht alles.
Das meiste schon.
Das meiste ist einfach nur syntaktischer Kram, der in Sachen kompiliert wird, die es vorher schon gab
oder umgewandelt wird, die es vorher schon gab und dann kompiliert wird.
Die haben aber auch für einige Features, müsste man jetzt genau nachgucken, aber habe ich in einem Konferenztalk gesehen von den C-Sharp Entwicklern,
die haben auch für einige neue Features tatsächlich die Runtime geändert.
Ah, der Rest interessiert mich jetzt nicht so.
Databases, okay.
Postgres.
Ja.
Ja.
Ja, ja.
Postgres hat es verdient.
Postgres ist zu Recht vorne.
Cobol 0,7, da immerhin.
Also Postgres ist zu Recht vorne.
SQLite wundert mich auch nicht.
SQLite ist immer noch.
Ich würde sogar sagen, die verbreitetste Datenbank der Welt.
Was ist da besser als MariaDB?
Da hat Oracle nichts mit zu tun.
Wobei, hat mit MariaDB Oracle was zu tun?
Mit MySQL hat Oracle was zu tun.
Und ich denke, MySQL ist auch relativ weit oben, weil historisch vieles halt noch mit MySQL war.
SQLite dürfte trotzdem nach wie vor die weit verbreitetste Datenbank der Welt sein.
Ist aber ein bisschen unfair, der Vergleich, ja.
Ich meine, du brauchst eine Postgres und eine MySQL-Datenbank als Datenbank-Backend für eine Anwendung.
Für irgendeine Netzwerk-Anwendung, für irgendeine Web-Backend oder so.
Und SQLite ist zu 95% ja bloß so eine Embedded-Site-Datenbank für eine Anwendung, die halt auch dabei ist.
Beispielsweise hat jede Android-Anwendung, glaube ich, standardmäßig eine SQLite-Datenbank, wo sowas reinschreiben kann und sowas.
Wie es bei iOS aussieht, weiß ich nicht, aber da haben es auch ganz viele dabei.
Also der Vergleich ist vielleicht nicht so ganz fair, aber man vergleicht ja nur ganz grob Datenbank-Technologien.
Die beliebteste NoSQL-Datenbank ist MongoDB.
Okay, wundert mich auch.
Redis für Caching und sowas auch relativ oben mit dabei.
Wundert mich auch nicht.
Was für Vorteile hat Postgres zu MySQL und MariaDB?
Also für mich ist der größte Vorteil, dass Oracle nichts mit zu tun hat.
Und wie gesagt, ich bin nicht der größte Datenbank-Checker.
Aber eine Sache, die ich persönlich unschlagbar nice finde in Postgres, dass Postgres so viele Sachen dabei hat.
Ich denke mal, dass MySQL die meisten Sachen, die man mit Postgres machen kann, auch dabei hat.
Aber Postgres hat JSON-Support, hat wahrscheinlich MySQL mittlerweile auch.
Time-Series-Daten-Support.
Volltext-Suche-Support.
Volltext-Suche mit Substring-Suche-Support.
Und das alles in Kombination, würde ich mal behaupten, gibt es keine andere Datenbank, die so viele Sachen included hat und Möglichkeiten hat wie Postgres.
Wenn man es nicht braucht, ist egal, kann man was anderes benutzen.
Aber wenn man es braucht, ist es nice zu haben.
Gerade die Text-Such-Funktionen von Postgres sind nice.
Also ich habe keine Ahnung, wie das zu Millionen Euro oder so geht.
Wenn man es nur mit teuren Oracle-Sachen comparet.
Ich weiß nur, dass bei mir auf der Arbeit neue Software nicht mehr mit Oracle entwickelt wird, sondern mit Postgres.
Also es scheinen die meisten tollen Zusatz-Funktionen von Oracle wohl nicht so relevant zu sein, dass es den Preis aufwiegt.
So sieht es aus. Was H2 ist, weiß ich gar nicht. Keine Ahnung.
Superbase auch.
Access.
Muss das sein.
Influx.
Cassandra.
Ja, das ist ja auch wirklich eine Nischen-Datenbank.
Für den Anwendungszweck, wofür sie gedacht ist, quasi eine Distributed-Datenbank in der Cloud zu haben, super.
Für alles andere wahrscheinlich die Klassiker wie Postgres besser.
Learning to Code ist MySQL vorne.
Das wundert mich auch nicht.
Ganz viele Leute machen ja noch Tutorials und PHP und sowas.
Kennt jemand ProgressDB?
Ne, habe ich noch nie gehört.
Scheint auch nicht so beliebt zu sein.
Taucht hier nicht auf.
Okay, Cloud-Plattform, AWS, wundert mich nicht.
Und dann mit einigem Abstand Azure und Google.
Ja, so hätte ich mir das ehrlich gesagt auch vorgestellt.
Genau so.
Ob jetzt Google oder Azure dieses Jahr, ich hätte auf genau diese Reihenfolge getippt.
Aber dass AWS vorne ist, das war klar.
Danach bei den anderen Cloudflare.
Firebase.
Auf was setzt Firebase auf?
Auf Google?
Ich glaube schon, gell?
Firebase ist Google Cloud mit fancy UI.
So, Vercel ist die letzten Jahre über sehr im Kommen gewesen.
Die haben auch sehr viele Projekte, die sie sponsoren.
Die sponsoren zum Beispiel die Svelte-Entwicklung.
Und ich glaube, die sponsoren auch Teile von irgendwelchen React-Frameworks.
Also Vercel ist gerade, was Frontend-Sachen angeht, sehr active dabei.
Und ich würde mal sagen, für Frontend-Hosting wahrscheinlich auch eines der besseren.
Netlify gibt es gar nicht mehr, oder?
Netlify benutzt niemand mehr.
Ach doch, hier.
Netlify waren glaube ich ein bisschen früher, aber Vercel hat die mittlerweile überholt.
Okay, Hetzner bei so klassischen.
Das finde ich cool.
Hetzner so bei den klassischen Server-Anbietern bzw. VM-Anbietern vorne mit dabei ist.
Das ist eigentlich der höchste.
DigitalOcean vielleicht, wobei DigitalOcean.
DigitalOcean ist in so einem Hybrid-Spot, ja.
DigitalOcean kann alles, aber nicht so umfangreich wie beispielsweise.
Also ich muss jetzt alles erzählen.
Wohingegen Netlify und Vercel eindeutig sich an Frontend-Sachen richten.
Und so Sachen wie die großen Cloud-Anbieter sich rundum richten.
So ist es halt so.
Oder Hetzner sich hauptsächlich an, ja, klassische Sachen.
Miete dir einen Server mit Linux drauf, miete dir eine VM mit Linux drauf, richten.
Da ist DigitalOcean ein bisschen dazwischen.
DigitalOcean hat bei weitem nicht so viele Services im Angebot.
Wie die großen Cloud-Anbieter.
Hat aber mehr Managed Services als beispielsweise Hetzner, ja.
Also kannst du dir bei DigitalOcean genauso gut eine VM kaufen wie bei Hetzner mit Linux drauf dich einloggen.
Gut ist.
Aber die haben beispielsweise auch ein Managed Kubernetes.
Und ich glaube auch Managed Datenbank.
Managed Postgres.
Also das ist so ein Hybrid-Ding.
DigitalOcean ist glaube ich ganz gut.
Ich habe lange DigitalOcean nicht mehr ausführlich verwendet.
Ich verwende DigitalOcean ab und zu für eine indische VM.
Dass ich eine indische IP habe, wenn ich irgendwelche Abos über Indien abschließe.
Weil es billiger ist.
Aber ansonsten verwende ich DigitalOcean.
Da habe ich schon lange DigitalOcean nicht mehr verwendet.
Ich glaube DigitalOcean ist eine richtig gute Plattform.
Wenn man bereit ist, Hetzner arbeitet gerade an Managed Kubernetes.
Das ist nice.
Das probiere ich mal aus, sobald es da ist.
Ich glaube DigitalOcean ist eine richtig nice Plattform.
Wenn man bereit ist.
Etwas mehr selbst zu machen.
Und vielleicht auch ein bisschen mehr Infrastrukturnowhow hat.
Aber nicht wirklich alles vom Scratch selber machen will.
Und dementsprechend bereit ist, vielleicht ein bisschen mehr zu bezahlen.
Wie wenn man bei Hetzner ist und alles selbst machen muss.
Aber trotzdem eine ganze Ecke weniger zu bezahlen.
Als jetzt bei den großen drei Cloud-Anbietern.
Also wenn man Managed Kubernetes haben will.
Würde ich sagen.
Und keine anderen Services hiervon anbinden, benutzen will.
Sonst was.
Ist wahrscheinlich DigitalOcean eine ziemlich gute Wahl.
Fly.io letzten Jahre über sehr im Kommen gewesen.
Das kann ich nicht. China, Chinesen.
Was hältst du von Tanzu Kubernetes?
Also mal davon abgesehen, dass man das mit Z schreibt und das anders.
Also man weiß aber was du meinst.
Ich kann dazu nichts sagen.
Ich weiß was es ist.
Ich weiß, dass Tanzu quasi eine Kubernetes API für VMware ist.
Also quasi eine Kubernetes API über ESX.
Könnte man das so sagen.
Ich habe mich da nie so im Detail damit beschäftigt.
Max hast du irgendwelche Zertifikate im Bereich Cloud, Azure oder so?
Weder für AWS noch für Azure.
Na wobei das stimmt nicht.
Doch habe ich.
Ich habe tatsächlich.
Ich habe.
Wobei das ist kein richtiges Zertifikat.
Ich habe so ein paar Abschluss PDFs.
Dass ich ein paar Azure Kurse gemacht habe.
Die wurden mir bei meinem alten Arbeitgeber mehr oder weniger aufgeschwätzt.
Diese Microsoft Kurse sind richtig schlecht.
Ich hatte überhaupt keinen Bock darauf die zu machen.
Man hat nichts gelernt.
Und der Trainer hat die ganze Zeit einfach das offizielle PowerPoint durchgeklickt.
Voll für den Arsch.
Also ich habe ein paar PDFs wo drinnen steht.
Ja ich habe irgendwie die Azure Admin Schulung gemacht.
Und die Azure Dingschrift.
Aber pfff.
Juckt keinen.
Und aktuell mache ich weder AWS noch Azure.
Hauptsächlich zur Zeit mache ich Google Cloud.
Der Scaleway ist auch relativ beliebt.
In letzter Zeit.
Da wusste ich gar nicht, dass 1&1 Managed Kubernetes hat.
Okay das hat ehrlich gesagt.
Okay machen wir hier weiter.
Web Framework Technologies.
Node.js.
Ja gut.
Wobei man da sagen kann.
Ist Node.js wirklich eine Web Framework Technology?
Was ist dein Fazit zu Google Cloud?
Was ist?
Okay da muss ich jetzt mal überlegen.
Was ist mein Fazit zu Google Cloud?
Also wie die alle drei großen Cloud Anbieter gibt es Gott und die Welt an Services dort.
Die haben alles und mehr.
Es ist so wenn du das Google.
Ich habe hier keinen Account mit dem ich mich einloggen kann.
Wenn man sich das Google Cloud Web Interface anguckt.
Da hat man links so eine Leiste.
Geil.
Hier.
Man hat links so eine Leiste mit allen Services.
Wie schlecht kann eigentlich eine Webseite sein.
Wenn wir einfach nur dieses komische Bild hier aufmachen.
So.
Da hat man hier links so eine Liste mit allen möglichen Services die die anbieten.
Und die ist schon standardmäßig beschnitten diese Liste.
Da gibt es unten so einen Knopf.
Zusätzliche Services anzeigen.
Und wenn man das ausklappt hat man ohne Scheiß irgendwie 8000 oder sowas.
Keine Ahnung verschiedene Services.
Vielleicht ein bisschen übertrieben jetzt aber gefühlt unendlich Services.
Wo du 90% davon noch nie gehört hast.
Und keine Ahnung hast wann du sie jemals verwenden sollst.
Aber Google Cloud kann alles.
Es ist ein bisschen wie bei Azure.
Ich muss ehrlich sagen mit AWS.
Die Plattform die ist zwar am verbreitsten.
Aber mit AWS kenne ich mich persönlich am wenigsten aus.
Bei Azure ist es auch so.
Azure hat dieses hässliche Doppel ausklapp Menü.
Also bei Google ist es so.
Du klickst hier was an.
Du hast vielleicht nochmal hier so ein Flyout Menü.
Und dann bist du auf der Seite.
Und dann hast du permanent so ein doppeltes Ausklapp Menü.
Das ist gewöhnungsbedürftig.
Wobei ich der Meinung bin dass das Azure Web Interface trotzdem das beste ist.
Kein gescheites Bild hier.
Azure ist am schlimmsten.
Findest du?
Also ich hab mich in Azure eigentlich immer ganz gut zurecht gefunden.
Und ich mochte bei Azure auch dass das Gruppieren in Ressource Gruppen quasi Pflicht ist.
Das fand ich ganz gut.
Weil da konntest du relativ easy aufräumen wieder.
Ja aber Fazit zu Google Cloud.
Also wie gesagt.
Wie alle drei großen Cloud Services haben die Gott und die Welt an Managed Services die die anbieten.
Und die versuchen dich halt auch sehr im eigenen Ökosystem zu halten.
Die haben Erweiterungen für Kubernetes.
Also Custom Resource Definitions für Kubernetes.
Die es dann nur in Google gibt.
Die du nur in Google verwenden kannst.
Zum Beispiel ihr Managed Prometheus Collection, Metric Collection und sowas.
Das kannst du dann nur in Google gescheit verwenden.
Und auch bei anderen Sachen.
Also ich bin aber der Meinung wenn man das vergleicht.
Azure Kubernetes versus Google Kubernetes.
Es ist jetzt schon vielleicht ein bisschen unfair.
Weil es ist schon eineinhalb Jahre her.
Wo ich Azure zuletzt verwendet hab beim letzten Laden.
Im größeren Stil.
Habe ich den Eindruck dass das Entticken besser durchdacht ist.
Was Managed Kubernetes angeht.
Bei Google als bei Azure.
Und dass die out of the box auch ganz coole Sachen mitbringen wo man sich bei Azure recht schwer tut.
Zum Beispiel lokale SSDs und sowas.
Weiß ich nicht wie das mittlerweile bei Azure funktioniert.
Ansonsten muss ich sagen ist Google letztendlich wie die anderen großen Cloud Anbieter auch.
Sie versuchen dich bei ihnen zu halten.
Sie versuchen dir an alle Ecken irgendwie ihre eigenen Services aufzudrücken.
Sie funktionieren in der Regel relativ gut.
Sie funktionieren in der Regel auch ohne Probleme und ohne große Ausfälle.
Die Sachen die sie Managed anbieten sind auch meistens gut durchdacht und tun.
Es gibt genug Optionen.
Also Google zwangsupgradet ja deine Kubernetes Cluster zum Beispiel auf neue Versionen.
Da kannst du einstellen wann das passieren soll und sowas.
Ist schon ganz gut durchdacht.
Aber.
Ist gemein mit den anderen großen Cloud An Services.
Auch einfache Sachen sind enorm teuer bei Google.
Richtig teuer.
Also du kannst dir bei Hetzner eine VM kaufen.
Mit ich sag jetzt mal so auf dem Kopf 32 Kernen.
Und was weiß ich 480 GB RAM und 20 TB SSD oder so.
Und du bezahlst bei Hetzner was weiß ich 400 Euro im Monat.
Bei Google bezahlst du dafür dann 6000 Euro im Monat.
Wenn es überhaupt geht.
Bei Google geht es ja gar nicht.
Bei Google ist ja bei 12 TB SSD Schluss.
Und dann ist das SSD Handling auch eklig.
Also für solche Sachen sind die großen Cloud Anbieter oftmals extremst teuer.
Und wir reden hier wirklich von einfach 10 mal teurer.
Also VM Preise bei Google sind.
Sind gerade wenn du SSD so ein bisschen advancedere Sachen brauchst.
Sind wirklich jenseits von dem was man bezahlen möchte.
Es ist teuer.
Und die rechnen dir halt auch wirklich jeden Furz ab.
Cloud Konsole aufgemacht.
Bam Speicherplatz.
Bam kostet.
Sind zwar nur ein paar Cent.
Aber es kostet einfach alles.
Und wenn du nicht aufpasst.
Und das ist auch bei allen Cloud Services gemein.
Hast du auch mal ganz schnell 10.000 Euro in der Rechnung.
Deswegen ist das wichtigste was man machen kann.
Gerade wenn man sich privat damit beschäftigt.
Ein bisschen was lernen will.
Ein Demo Account zu haben.
Der hart limitiert ist.
Sagen wir mal irgendwie auf 200 Euro.
Wenn das nicht geht.
Wenn es ein Account ist mit hinterlegter Kreditkarte.
Und Abrechnungsmöglichkeiten.
Dann als aller aller erstes.
Irgendein Limit und Budgets einstellen.
Was dir ja leider die Cloud Anbieter unnötig schwer machen.
Warum wohl?
Kann man sich ja überlegen.
Aber das ist ja nicht so einfach.
Kann man sich ja überlegen.
Weil ansonsten hast du nicht aufgepasst.
Und hast morgen 10.000 Euro Schulden.
Ja ist so.
Das ist viel günstiger.
Also die großen Cloud Anbieter sind teuer.
Und mein Fazit zu Google Cloud an sich.
Ja man kann es verwenden.
Also es ist nicht so.
Dass ich da jetzt irgendwie in komplette Verzückung gerate.
Wenn jetzt einer sagt.
Oh Max muss Google Cloud verwenden.
Aber würde ich auch nicht.
Wenn ich AWS oder Azure verwenden muss.
So ein in sich geschlossenes Ökosystem.
Ja.
Hm.
Die Dinger funktionieren.
Ich glaube das kann man sagen.
Also da muss ich keine Gedanken machen.
Letztendlich ist es egal.
Ist egal ob ihr euch für.
AWS, Azure oder Google entscheidet.
Außer in ganz speziellen Ausnahmefällen.
Wenn ihr ganz spezielle Dinger haben wollt.
Oder für euch.
Irgendwelche Datenschutz Vorgaben.
Und sowas wichtig sind.
Da kann das durchaus relevant sein.
Weil es da Unterschiede gibt.
Mit wir garantieren nur EU Standort.
Und sonstige Geschichten.
Aber ansonsten ist eigentlich fast egal.
Welchen Cloud Anbieter man nimmt.
Ich müsste.
Was kannst du bei AWS mehr automatisieren.
Als bei Amazon oder bei Google.
Letztendlich wird man es eh über sowas wie Terraform machen.
Einfach weil sich das.
Als Standard Tool durchgesetzt hat.
Und sowohl bei Google.
Als auch bei Azure oder auch bei AWS.
Du kannst eigentlich nahezu alles über Terraform machen.
Johnny Tell.
Dankeschön für den Sub.
Massive Subscriptions.
Ne hast du nicht.
Aber es hat sich so angehört.
Als wäre das was was besonders AWS auszeichnet.
Wir müssen uns mal beeilen.
Sonst kommen wir hier gar nicht ansatzweise durch.
Also warum NodeJS.
Bei Web Framework Technologies steht.
Verstehe ich nicht so ganz.
Es ist ja keine wirklich Web Framework.
Es ist.
Oftmals.
Eine Dependency.
Frontend Frameworks.
Es sind ja auch nicht Frontend.
Es sind Web Technologies.
Da ist es ok.
Also NodeJS.
Wundert mich nicht.
NodeJS ist die Grundlage.
Von so gut wie allem.
Was aktuell Frontend mäßig.
Und Web Entwicklungs mäßig geht.
Und sei es nur.
Zur Entwicklungszeit wo man das braucht.
Also das wundert mich nicht.
React wundert mich auch nicht.
Das meist benutzte.
Und verbreitetste Frontend Framework.
jQuery immer noch am Start.
Hält sich hartnäckig.
NextJS.
Ja weil React.
Express wundert mich auch nicht.
Wenn es Backend Sachen mit Node ist.
Dann ist es Express.
Express ist übrigens uralt.
Express ist von 2004 oder so.
Das ist uralt.
Wann kam NodeJS raus?
2009.
Das ist auch 2009 raus.
Das ist uralt.
Ok 2010.
Das ist schon 14 Jahre alt.
Aber das ist immer noch.
Wenn einer irgendwelche Backend Sachen macht mit Node.
Ist das immer noch das verbreitetste.
Angular wenn es sein muss.
ASP.NET Core beste.
Das ASP.NET.
Hier bin ich mir mal wieder nicht sicher.
Hier hat es halt Microsoft wieder verschissen.
Mit der Benahmung.
Hier hat es Microsoft wieder verkackt.
Wie viele Leute für ASP.NET gestimmt haben.
Aber eigentlich ASP.NET Core meinen.
Und wie viele Leute.
Wissentlich für ASP.NET gestimmt haben.
Weil sie gedacht haben.
Das Zeug heißt ja nicht mehr Core.
Ganz ganz wir.
Microsoft richtig verschissen.
Es könnte natürlich auch sein.
Das es stimmt.
Und es so viel Legacy Zeug noch gibt.
Wobei ich das ehrlich gesagt gar nicht glaube.
Ich glaube die meisten Sachen.
Wurde hier Mist abgestimmt.
Man muss nämlich dazu wissen.
Das ASP.NET Core das neue ist.
Und ASP.NET das alte.
Es ist nicht etwa so.
Das ASP.NET Core quasi eine Minimalvariante.
Von ASP.NET ist.
Ne ne.
ASP.NET Core ist das neue Web Framework.
Von Microsoft.NET.
Und ASP.NET ist das alte.
Warum Microsoft die Dinger so scheiße benannt hat.
Es ist Microsoft.
Microsoft ist Meister im Scheiße benennen.
Ja und um die Verwirrung.
Noch perfekt zu machen.
ASP.NET Core.
.NET Core.
Das war beides neu.
Das war eine neue Implementierung von .NET.
Und C Sharp.
Und es war eine neue Implementierung von ASP.NET.
Mit neuen Funktionen.
Und intern funktioniert es ganz anders.
Also ASP.NET Core.
.NET Core.
Entity Framework Core.
Das kam alles zusammen neu raus.
Neue Entwicklung.
Und war Core nicht ursprünglich auch mit Linux Unterstützung.
Aber es ist nicht ursprünglich.
Das ist eines der besten Cross-Plattform Entwicklungssachen die es gibt.
Ja.
Bei .NET Core war Linux Support.
Beziehungsweise Cross-Plattform Support neu.
Das klassische .NET Framework lief nur unter Windows.
Deswegen haben das ja manche Leute heute immer noch im Kopf.
.NET würde nur unter Windows funktionieren.
Aber das ist ja Schwachsinn.
.NET funktioniert wunderbar.
Cross-Plattform.
Und ich entwickle seit Jahren.
.NET nur noch unter Linux mit Rider.
Und das funktioniert wunderbar.
Kommt gar nicht auf die Idee mit Visual Studio Code .NET zu entwickeln.
Das suckt.
Wenn uns Rider gut ist.
Kostet zwar ein bisschen was.
Aber ist die beste IDE.
Würde ich auch unter Windows verwenden.
Ja. Hier.
Rider.
Beste.
Ja. Das ist wichtig.
Dass die Schriftgröße so groß ist.
Das muss so sein.
Sonst erkennt man nichts.
Ich weiß auch nicht warum ich das so fett gemacht habe.
Aber ist die beste Idee.
Für .NET.
Zumindest eine Sache jetzt noch dazu.
Also wie gesagt.
.NET Core war die Neuentwicklung.
Mit ASP.NET Core dabei.
Mit Entity Framework Core und so dabei.
Es war also quasi alles was neu war.
Mit .NET hatte Core im Namen drin.
Konnte man sich ganz gut merken.
Und dann hat sich Microsoft gedacht.
Nach .NET Core 3.
Das war bis zum damaligen Zeitpunkt.
Übrigens auch easy in der Benahmung.
Es war .NET Core 3.
ASP.NET Core 3.
Entity Framework Core 3.
Bis dahin war es easy.
Und dann kam Microsoft um die Ecke.
Und hat gesagt. Ja Moment.
Das ist viel zu einfach die Benahmung.
Wir lassen Core weg.
Und seit .NET Core 3.
Also der Nachfolger.
Von .NET Core 3.
War.
Also .NET Core 3.
Gab es.
Und der Nachfolger von .NET Core 3.
War .NET 5.
Was ist .NET Core 3?
Das ist quasi das Java von Microsoft.
So .NET 5.
War der Nachfolger.
Von .NET Core 3.
Das Problem.
Bei dieser Benahmung ist.
Erstens.
Das es früher.
.NET Framework gab.
Was nichts mit .NET Core 3.
Zu tun hat.
Und das hatte die Version 4.8.
So.
Dann hat man nicht .NET Core 4 genommen.
Weil das zu ähnlich war.
Aber man hat .NET 5 genommen.
Das heißt .NET 5.
Sieht für viele Leute jetzt so aus.
Wie der Nachfolger von .NET Framework 4.8.
Und um die Sache.
Noch komplizierter zu machen.
Man hat das Core.
Zwar rausgeschmissen.
Aus dem Namen der Runtime.
Aber man hat das Core.
Behalten.
Im Namen der Libraries.
Das heißt im Endeffekt.
Das.
ASP.NET.
Nicht etwa.
Wie man vielleicht denken könnte.
Quasi.
ASP.NET Core 3.
Und dann zu ASP.NET 5.
Wurde.
Nein.
ASP.NET Core.
Ist nach wie vor.
Das Web Framework für .NET 5.
Aufwärts.
Also die Benahmung bei Microsoft.
Behaupte ich hier einfach mal.
Dass bei der Abstimmung.
Die meisten Leute schlicht und ergreifend.
Nicht gecheckt haben.
Was sie überhaupt anklicken.
Also Microsoft und Benahmung.
Ist halt echt so ein Ding.
Das ist komplett für den Arsch.
Okay.
Das Welt ist beliebter.
Als ich gedacht hätte.
Also ich wusste das Welt beliebt ist.
Aber nicht das es auch benutzt wird.
Business Enterprise Umfeld.
So.
Astro hätte ich ehrlich gesagt gedacht.
Ist beliebter.
Deno.
Ja das ist auch so ein Ding.
Was ich witzig finde.
Sowohl Deno als auch Bun.
Sind gestartet so als.
Richtig nice Node.js Alternativen.
Und man hat aber gesehen.
Dass.
Ja einfach nur ein paar neue Ansätze.
Reinbringen.
Eben nicht reicht.
So ein etabliertes Tool.
Um Node.js auch nur.
Ein bisschen was abzujagen an Prozenten.
Node.js ist die verbreitetste.
Javascript Runtime.
Auf Serverseite.
Letztendlich ist es.
V8.
Also das gleiche wie in Chrome.
Ja.
Aber sowohl Deno als auch Bun.
Das ist da.
Die Leute feiern es auf Github.
Aber keiner benutzt es richtig.
Und wenn wir mit .NET Standard.
Wobei das ja kein eigenes Framework ist.
Beziehungsweise auch keine eigene Technologie.
In dem Sinne.
Sondern ein Katalog.
Was du an APIs unterstützen musst.
Das ist halt.
Ja Microsoft Benahmung.
Ist halt für den Arsch.
Embedded Technologien.
Raspberry Pi.
Wundert mich nicht.
Das Raspberry Pi CMake.
Ich würde nicht sagen.
Dass GCC und CMake zwangsläufig.
Eine Technologie ist.
Aber gut.
Wenn wir uns das mal angucken.
Wir haben hier selbst in letzter Zeit.
Öfters mal ein bisschen.
Embedded Kram gebastelt.
Siehe hier.
Und Zeug.
Das ist letztendlich auch.
Das ist kein Raspberry Pi.
Das ist ein ESP32 gewesen.
Aber da ist ein bisschen Arduino dabei.
Minimal.
Aber es ist CMake.
Und es ist GCC.
Wobei Arduino ist nicht mehr dabei.
Arduino haben wir komplett rausgeschmissen.
Reines ESP EDF Projekt.
Ja das stimmt.
Übrigens.
Zum Thema Microsoft Benahmung.
Auch so ein Ding.
Ich verstehe nicht.
Warum man Office 365.
In Microsoft 365 oben benannt hat.
Ist mir komplett.
Unverständlich.
Weil Office.
War jedem ein Begriff.
Und das nächste was ich nicht verstanden habe.
Es wurde in Azure.
Active Directory umbenannt.
Active Directory ist so ein bekannter.
Griffiger Begriff.
Mit dem jeder was anfangen kann.
Aber nein.
Es wurde in Entra ID umbenannt.
Das hört sich schon.
Zungenbrecher mäßig an.
Entra ID.
Sind das unterschiedliche Dinge?
Nee.
Du Chebatest mich oder?
Das ist ein Chebat Versuch.
Wenn ich das letzte mal drauf angesprungen bin.
Nein.
Office 365 ist jetzt Microsoft 365.
Office 365.
Office ist jetzt.
Microsoft 365.
Also.
Wenn du es mir nicht glaubst.
Dann glaubst Microsoft.
Okay das der Raspberry Pi vorne ist.
Wundert mich auch nicht.
Das Platform I O.
Vorne mit dabei ist.
Wundert mich auch nicht.
Aber es gibt.
Ich sag mal.
Embedded Noobs und Einsteiger.
Was auf die Reihe zu bekommen.
Einfach weil es sehr viel vom Setup automatisiert.
Und vereinfacht.
Also keine Frage.
Das verstehe ich.
Ist super.
Ich muss sagen in letzter Zeit kein Platform I O mehr verwendet.
Sondern RAW ESP EDF.
Der Rest kein Plan.
Cute.
Ich weiß nicht was das sein soll.
Was ist das?
Cute OS.
Okay.
Das wird es alles nicht sein.
Das wird es alles nicht sein.
Aber kann man Raspberry Pi.
Das ist eh ein bisschen schwammig.
Bei dieser Umfrage immer.
Kannst du mal auslesen.
Ob der VM Champ noch funktioniert.
Ja okay.
Da müsste ich auch mal weiter dran bauen.
Bin halt so faul.
Gucken wir mal.
Oh.
Die haben was an ihrer API geändert.
So wie es aussieht.
Da habe ich aber jetzt ein Problem.
Weil.
Das ist scheiße wenn die an grundlegenden APIs was ändern.
Weil wenn jemand den VM Champ verwenden will.
Mit einer Version.
Mit einer alten libvirt Version.
Geht das nicht.
Du kannst doch nicht einfach irgendwelche Sachen da ändern.
Mit einer alten libvirt Version geht es da nicht.
Wenn ich den neuen Funktionsaufruf mache.
Und den.
Äh.
Müsste man jetzt gucken an welcher Stelle der abkackt.
Aber der Rest funktioniert noch.
Okay.
VM Champ.
Ja benutzt eh keiner.
Außer mir selbst.
Das könnten wir tatsächlich.
Mal fixen.
Ich glaube nicht das das was großartig.
Kompliziertes zu fixen ist.
Version checken.
Ein Interface und zwei Implementations.
Ja aber es nervt mich.
Warum lassen die das nicht einfach gleich.
Ja das muss im Endeffekt.
Geh ich mal stark von aus.
Muss das irgendwo.
Run Command.
Muss das irgendwo hier sein.
Da ist er abgekackt bei Waiting.
Waiting for Network.
Da ist er abgekackt.
Ja.
Get first IP by ID.
Da kackt er ab bei.
Ja.
Get first IP by ID.
Wrong LNL Message Length.
Also.
Er kackt wahrscheinlich ab.
Hier bei.
Via Domain Interface Address.
Das ist jetzt meine Vermutung.
Das er dabei abkackt.
Das hier. Ist das hier eine Länge?
Wrong NLM Message Length.
Wrong NLM Message Length.
Flex.
Also vermutlich kackt er an der Stelle irgendwo ab.
Das müssen wir mal debuggen.
Hatte man.
Gab es nicht hier einen.
Ich hatte keinen verbose oder so eingebaut.
Wo man irgendwie noch.
Wo man noch mehr gesehen hat.
Ja.
Ich glaube es lässt sich relativ einfach fixen.
Es muss.
Es muss ja letztendlich hier irgendwo passieren.
Weil er quasi unendlich lange auf die IP wartet.
Ja.
Gucken.
Kriege ich das die nächsten Tage gefixt.
Sieht nicht.
Sieht nicht kompliziert aus.
Was auch immer die da geändert haben.
2018 nenne ich wirklich.
Keine Ahnung.
Kriegen wir wahrscheinlich raus.
Okay.
Kann man nachher fixen.
Ich schreibe es mir auf. Fixen wir nachher.
Ich habe ewig an dem Projekt nichts mehr gemacht.
So. Also lasst uns mal weiter das Survey angucken.
Das interessiert mich.
Other Frameworks.
.NET is the most used.
Okay.
.NET zählt als eigenes Framework und Library.
Äh.
Das ist. Also.
Die.
Wo die hier eine Grenze ziehen ist immer ein bisschen.
Das stimmt.
So.
Ansonsten ist Docker und NPM vorne mit dabei.
Wundert einen logischerweise nicht.
Also das Docker vorne dabei ist wundert mich gar nicht.
Das NPM vorne dabei ist wundert mich auch nicht.
Pip.
Ja gut. Python ist vorne mit dabei. Wundert auch nicht.
Homebrew.
Die haben viele MacOS User. Wundert mich auch nicht.
Wobei ich mir sagen lassen habe.
Das die richtig coolen MacOS Hackerman User.
Wohl auf.
MacOS.
Auch mittlerweile den.
Nix Package Manager benutzen.
Anstelle von Homebrew.
Wahrscheinlich werden.
Die meisten Leute beides benutzen.
Je nachdem wo es was gibt.
Webpack. Mein Beileid.
Jan habe ich den Eindruck.
Verwendet kaum noch einer.
Die meisten sind wieder bei NPM.
So. Vite. Wundert mich auch nicht.
Im Prinzip die meisten Frontend Tool Sachen.
Basieren ja heute fast schon auf Vite.
Make.
Okay. Oldschool Shit.
Kubernetes.
Ist Kubernetes in other Tools.
In Form von NPM und Pip.
Nicht wirklich. Das ist auch eine relativ.
Willkürliche.
Visual Studio Solution. What the fuck.
So ein bisschen Terraform ab.
So ein bisschen willkürliche Zusammenstellung.
Ah hier unten ist Ban.
Puppet, Pulumi, Chef.
Ja man sieht die Dinger spielen alle keine Rolle.
Terraform ist das Ding.
Wobei man sagen muss. Puppet ist.
Puppet und Chef ist kein Terraform.
Keine Terraform Konkurrenz.
Die ist viel viel länger als Ansible gibt.
Aber Ansible hat sie alle abgehängt.
Zurecht. Ich finde.
Das Design ist kaputt.
Die meisten Leute verwenden.
Visual Studio Code. Ja.
Ich auch. Ich verwende Visual Studio Code.
Für Frontend Zeug.
Und Jetbrains Sachen für Backend Krempel.
Oder für alles wo ich.
Nicht Visual Studio Code verwende. Verwende ich.
Jetbrains Sachen.
Und wenn ich auf der Command Line was editieren will. Halt Wim.
So.
Und das Visual Studio selbst so weit oben ist.
Wundert mich. Ich finde Visual Studio selbst.
Sehr Paintschamp.
Zu usen.
Ansonsten IntelliJ wundert mich auch nicht.
Ist eigentlich so die Java IDE schlechthin.
Zumal auch kostenlos.
Auch von Jetbrains.
Die Base zwischen den IDE's von Jetbrains.
Ist ja sehr ähnlich.
Also auch die .NET IDE.
Läuft witzigerweise auf Java Basis.
Also Rider.
Läuft auch auf Java Basis.
Nano.
Nano ist auch dabei. Guck mal.
9% verwenden Nano.
Ja Wim ist.
Ich meine ich benutze Visual Studio Code.
Und ich benutze Wim.
Und ich benutze Rider.
Und ich benutze PyCharm.
Und ich benutze.
Goland.
Man könnte dieses ganze Jetbrains Zeug.
Fast zusammenfassen zu einer.
Aber ist es ja nicht.
Also es ist viel.
Notepad++.
Ja das benutze ich auch zwangsläufig.
Weil es auf der Kiste bei mir auf der Arbeit.
Vorinstalliert ist.
Und ich manchmal aus versehen damit was öffne.
Aber ich mache eh so gut wie nichts über die Windows Kiste.
Also ja.
Ich denke übrigens auch das viele NeoWim User einfach Wim angekreuzt haben hier.
Was haben wir sonst noch?
Moment Jira sind.
Asynchrones Tools.
What?
Wie sind sie denn auf das Wort gekommen hier?
Jira Confluence Markdown File.
Okay.
Wim möchte eine Zusammenstellung sein.
Das sind ja Synchrone Tools.
Teams Slack.
Ach jetzt.
Verstehe ich was sie uns damit sagen wollen.
Das ist aber ne.
Abenteuerliche Benahmung.
Zumal Microsoft Teams genauso.
Asynchron sein kann.
Nur weil du was geschrieben hast.
Also lange nicht das dir einer sofort antwortet.
Selbst wenn du mit einem sprichst über Teams.
Heißt es nicht das er sofort antwortet.
Ja keine Ahnung.
Windows System.
Okay das könnte noch ganz spannend sein.
Windows.
Wundert nicht.
Es sind sehr viele MacOS User dabei.
Wundert mich auch nicht.
Entwickler benutzen sehr gerne MacOS.
Was ich auch verstehen kann.
MacOS ist ne gute Kombination aus.
Wieder komische Musik.
MacOS ist ne super Kombination aus.
Unix artig.
Verfügbare Tools.
Zu Usability.
Out of the Box.
Danach benutzen tatsächlich.
Fast 27%.
Ubuntu.
Oder sollten wir es besser.
Jubantu nennen.
Wie die coolen Leute das aussprechen.
Ja also wenn ich die Auswahl hätte.
Zwischen Windows und MacOS.
Dann würde ich auch eindeutig.
Aber tausendprozentig.
MacOS bevorzugen.
Okay.
Manche benutzen WSL.
Arch by the way.
Red Hat.
Das ist auf Servern.
Ist das 90% vertreten.
Bestimmt aber.
Also im Business Enterprise Umfeld.
Aber auf Developer Rechnern.
Jetzt eher weniger.
Haiku.
Ernsthaft.
Das verwendet überhaupt irgendjemand.
Okay das ignorieren wir.
Chat GPT, Co-Pilot, Google Gemini.
Admired and Desired.
Ja okay.
Das finde ich immer ne spannende Umfrage.
Ähm.
Was die Leute benutzen.
Zu was die Leute gerne benutzen möchten.
Ist das glaube ich.
Die Umfrage.
Also 67%.
Wollen es benutzen.
Und.
Ne.
Ach ne.
41% mögen.
Ne.
67% mögen es.
Und 41% wollen es benutzen.
Was soll das sagen.
Wie sieht es denn hier aus.
Also Python ist so.
Na ja.
Javascript so.
Okay Rust.
Rust ist natürlich.
Rust ist nicht so gefragt.
Also nicht so viel nachgefragt.
Was man ja auch oben bei der Verbreitung gesehen hat.
Also Rust ist im Business Enterprise Umfeld nicht so gefragt.
Aber viele Leute.
Wollen es benutzen.
Also 82%.
Würden das gerne benutzen.
Sehen auch.
Oder finden es nice.
Und würden es gerne benutzen.
Aber es gibt halt nicht so viel Bedarf für.
C++.
Okay.
C++ hat.
C++ hat mir noch ein bisschen zu hoch admiret.
Ehrlich gesagt.
Ich hätte eigentlich gesagt.
C++ muss irgendwo hier liegen.
Bei admiret.
Ach Moment.
Das ist desired oder.
Ja.
Das sind 50% Leute.
Die es geil finden.
Das sollte ehrlich gesagt.
Ehrlich gesagt.
Sollte C++ die einzige Programmiersprache hier drin sein.
Wo.
Finde ich gut.
Unter wird gefragt liegt.
Was ist an Mac OS so toll.
Ich weiß nicht.
Ich bin kein großer Mac OS User.
Aber so von außen stehend.
Als Außenstehender würde ich sagen.
Dass das out of the box einfach gut funktioniert.
Also das.
Das ist mir noch ein bisschen zu hoch.
Ehrlich gesagt für C++.
Was ist denn die tiefste Sprache.
Die beliebt ist hier.
Visual Basic.
Okay zurecht.
Hat es verdient.
Visual Basic darf so tief sein.
Der ganze Pearl auch.
Ein ganzer Schrott da.
Aber die die meist gehasste.
Programmiersprache ist Prolog.
Gefolgt von Kobol.
VBA.
Und Objective C.
Und Matlab.
Math.
Wie spricht man das aus.
Dass ich das nicht nach Drogen anhöre.
Ist die meist gehasste Programmiersprache.
Ist das verdient Leute.
Ich habe das noch nie verwendet.
Das Lisp so weit oben ist.
Ja Lisp.
Sind die ganzen.
Die so auf theoretisches Sprachdesign.
Und so stehen.
Die mögen Lisp.
Das gibt es nicht mehr.
Aber Rust ist mit Abstand.
Die beliebteste Sprache.
Okay schön ist was anderes.
Dachte ich mir.
Aber C Sharp ist auch nicht schlecht.
Javascript nicht so.
Ich muss sagen Javascript hat sich gut entwickelt in den letzten Jahren.
Platinzahn danke für den Zap.
Ich glaube Chat.
Ich glaube bei MacOS ist es so.
Das wenn du im Enterprise Umfeld wirklich die Auswahl gestellt bekommst.
Zwischen Mac oder Windows.
Dann werden halt die meisten Entwickler.
Mac sagen.
Dass es halt abartig ist unter Windows zu entwickeln.
Du hast nicht die Tools die du brauchst.
Und du hast dann noch die grausame Oberfläche dabei.
Und unter MacOS.
Hast du zumindest out of the box.
Mal eine gescheite Shell.
Gescheites Terminal.
Eine gescheite Oberfläche die man bedienen kann.
Plus die Möglichkeit mit dem NixOS Package Manager.
Und Home Pro.
Alles an Command Line Tools nach zu installieren was du brauchst.
Ich persönlich würde trotzdem den Arch Linux.
Als Entwickler Umgebung bevorzugen.
Aber wenn ich die Auswahl hätte.
Mac oder Windows.
Würde ich eindeutig sofort MacOS nehmen.
Auch mal den Link von der Seite her.
Moment.
Ja.
2024.
So weiter.
Databases.
Postgres ist die beliebteste Datenbank.
Ja.
Eines der verbreitetsten.
Begehrtesten.
Und auch eines der beliebtesten.
Vollkommen zu Recht.
Postgres beste.
Redis ist auch sehr beliebt.
Für das was es macht ist Redis auch rundum gut.
SQLite.
Anderen habe ich noch nix oder nur sehr wenig gemacht.
Meistens habe ich noch gar nichts gemacht.
Cloud Plattformen.
Hetzner.
Hetzner ist die beliebteste Cloud Plattform.
Aber halt auch die.
Gleich sind eines derjenigen die nicht so begehrt ist.
Ist aber klar.
Bei Hetzner kannst du ja im Endeffekt nur.
Klassisch dir VMs mieten mit Linux drauf.
Oder Server mieten mit Linux drauf.
Aber das sehr gut.
Also das Web Interface.
Ist extrem angenehm.
Schnell.
Und gradlinig wie es funktioniert.
Gut.
Es ist ein bisschen unfair zu vergleichen.
Weil über das Web Interface von Hetzner.
Kannst du halt nur ein paar Sachen machen.
Du kannst VMs anlegen.
Also kannst VMs managen.
Du kannst einen Load Balancer anlegen.
Und du kannst ein paar Firewall Regeln einstellen.
Das wars.
Netzwerke anlegen.
Oder GCP Interface.
Aber ich mag das auch.
Also ganz ehrlich. Ich sehe es genauso.
Für mich.
Ich würde es ähnlich sehen.
Ich finde es super.
Ich finde es super.
Man kann es halt oftmals.
Nicht für alles was man gerne hätte benutzen.
Und dementsprechend ist es auch nicht so gefragt.
Aber wenn man es benutzen kann.
Ist es eigentlich ziemlich sorglos zu benutzen.
Die Plattform.
Cuba Libre. Danke für den Sub.
Wundert mich auch nicht.
Node.js wundert mich auch nicht.
ASP.NET Core.
Finde ich sehr nice.
Dass das so weit vorne ist.
Würde ich auch ähnlich sehen.
Ich finde das super.
Man kann es nicht für alle Sachen verwenden.
Ist auch nicht so ultra beliebt.
Aber für Backend Sachen ist es auf jeden Fall eines der gefragtesten.
Wie man hier auch sieht.
Ist quasi mit.
Node.js kann man nicht so wirklich da rein reichen.
Für Backend Anwendungen.
Das ist für mich das begehrteste Framework.
Und auch gleichermaßen.
Mit das beliebteste Framework.
Ich finde das sagt schon.
Das Microsoft das richtig macht.
Das hier ist ASP.NET ist das Gegenteil.
Noch weniger begehrt und unbeliebt.
Phoenix ist mega beliebt.
Habe ich noch nie benutzt.
Svelte auch sehr beliebt.
Was überhaupt nicht beliebt ist.
Gatsby habe ich auch noch nicht verwendet.
Trupal wundert mich auch nicht.
Dass es nicht so beliebt ist.
Das unbeliebteste Webfile.
Framework.js.
Moment AngularJS.
Nicht das normale Angular.
Das normale Angular ist beliebter.
Das ist das oldschool AngularJS.
Ist überhaupt nicht beliebt.
Und begehrt.
Ruby on Rails.
Ruby.
Ja.
Bei weitem nicht mehr so begehrt wie früher.
Aber immer noch relativ beliebt.
Jack Quarry.
Embedded Technologien.
Cargo.
Cargo ist doch keine Embedded Technologie.
Cargo ist der Package Manager von Rust.
Also ganz ehrlich.
Diese Zusammenstellungen sind teilweise schon etwas random.
ZMK. Ich habe keine Ahnung was das ist.
HTTX.
Das ist glaube ich überhaupt nicht verbreitet.
HTMX meinst du hier.
Das ist super beliebt.
Aber nicht so gefragt.
HTMX.
Andere Framework.NET.
Ja ok.
Pandas wundert mich auch ein bisschen.
Machine Learning Gedöns.
Apache Kafka. Wundert mich, dass das so beliebt ist.
Hugging Face Transformers.
Ok whatever. Klingt nach AI-Kram.
.NET MAUI.
Ja. Ist zum Glück nicht so beliebt.
Was ich auch verstehen kann.
Ok was sehr beliebt ist, ist Ruff.
Ich habe keine Ahnung was das ist.
Was ist Ruff?
Ah. Ein Python Linter und Formata in Rust.
Das ist quasi BiomeJS.
BiomeJS für Python.
Ich hoffe es funktioniert besser als BiomeJS.
By the way. Wer sich fragt wo der BiomeJS Stream hin ist von gestern.
Den habe ich gelöscht.
Weil ich habe 15 Minuten.
Ich habe 3 Stunden gestreamt und 15 Minuten das gemacht was im Titel stand.
Das war mir zu blöd den Stream oben zu lassen.
War nice. Wir haben ein bisschen Laberstream gemacht.
Aber eigentlich vom Titel her habe ich was anderes versprochen als gemacht habe.
Aber ich kann auch nichts dafür um das Biome nicht richtig funktioniert hat.
Docker immer noch sehr begehrt und auch sehr beliebt.
Verstehe ich.
Docker tut einfach.
Und ich finde auch die Art und Weise wie sich Docker bedienen lässt.
Die Docker File Syntax und alles.
Rundum gelungene Sache.
Die meisten Leute verwenden Visual Studio Code.
Das ist ja nichts neues.
Jira ist beliebt.
Aber Jira ist gefragt und semi beliebt.
Markdown Dateien sind halbwegs begehrt und super beliebt.
Verstehe ich.
So ziemlich die stressfreiste Variante.
Irgendwo ein bisschen halbwegs ordentlich aussehenden Doku-Kram reinzukriegen.
Das gucken wir uns jetzt nicht an.
Ich hoffe nicht, dass die meisten Leute Slack finden.
Discord. Seriously?
Wollt ihr mir ernsthaft erzählen, dass die zu 30% im Business Enterprise Umfeld Discord mittlerweile verwenden?
Ich persönlich würde es feiern.
Mir wäre Discord wahrscheinlich lieber als Teams.
Aber ich stelle mir das einfach als kompletten Datenschutz-Albtraum vor.
Arbeitsbezogene Sachen über Discord zu machen.
Ja, beim Teams weißt du auch nicht.
Aber du kannst wenigstens mit Microsoft Verträge machen, dass es nicht so krass ist.
Und du kannst nicht rausreden.
Also ganz ehrlich, rein von der Software her würde ich wahrscheinlich auch lieber Discord verwenden als Teams.
Word-Dateien zugeschickt.
Ja, das habe ich glücklicherweise sehr selten.
Nur AI überspringen wir.
Das ist mir zu advanced.
Das kriege ich geistig nicht verarbeitet.
Diesen Graph.
Oder.
Ach so.
Ah.
Ich verstehe.
Leute, die quasi JavaScript, äh, die TypeScript verwenden, wollen auch gerne SQL verwenden und sowas.
Okay, das finde ich jetzt nicht so interessant.
Die meisten Leute, die Rust verwenden, wollen mit Rust arbeiten.
Ja, wirklich.
No shit.
Hättet ihr das gedacht?
Die meisten Entwickler gerne mit Rust arbeiten.
Ich nicht.
Und danach gefolgt von sie wollen mit Python arbeiten.
Okay.
Aha.
Na gut, das ist jetzt nicht so spannend, finde ich.
Databases.
Ah, nee.
Das gucken wir uns nicht an.
Das sind alles diese komischen.
Da können wir mal kurz hier skippen.
Ah, jetzt wird es noch mal interessant.
Okay.
Was wird, welche Sache wird am besten bezahlt?
Das ist nicht.
Ich finde, das ist nicht so richtig aussagekräftig immer.
Ja, manche Sachen sind ja auch ein bisschen Nische und dementsprechend haben nicht so viele mitgemacht.
Aber so, so als grobe Sache.
Oh, nice, guck mal hier.
Mit Bash und Shell Scripting kann man, äh, Stonks verdienen.
So, Erlang gibt viel Kohle.
Das kann ich irgendwie auch nachvollziehen.
Das ist halt ein bisschen Nische Erlang, ja.
Es hat sehr viele Klammern.
Also, wenn man Klammern mag, ist man bei Erlang genau richtig.
Elixir, das ist, das ist, das ist quasi Erlang für, für Frontend.
Ist, ist Elixir nicht diese Geschichte gewesen mit, irgendwie Transpiled nach JavaScript oder so?
Ach, ich weiß nicht.
Kriegst du mal zusammen.
Es gibt so viel Kram.
Also, zumindest, es sind irgendwie so ein bisschen, ja, sagen wir mal komplizierte, aber nicht so verbreitete Sachen vorne, mit denen man viel Geld verdienen kann.
Das wundert nicht.
Ganz ehrlich.
Kobol müsste da eigentlich auch vorne mit dabei sein, ne.
Kobol ist hier gar nicht drin, guck mal.
Kein Kobol.
F-Sharp, das wird so überhaupt nicht benutzt, eigentlich.
Ja, das ist nicht so richtig aussagekräftig, finde ich.
Ja, mit C-Sharp kann man kaum was verdienen.
Mit C und C++ noch weniger.
Ja, also, ganz ehrlich.
Hust du aus?
Wie aussagekräftig das jetzt ist.
Ja, ich schwöre, es ist nicht genau.
Wieso gibt es F-Sharp eigentlich?
Das frage ich mich ehrlich gesagt auch, warum es das noch gibt und warum es noch nicht die wichtigen Sachen in C-Sharp aufgegangen sind.
Mein Interop mit beiden geht ohne Probleme.
Die letzten Jahre hat sich an F-Sharp kaum was entwickelt.
PowerShell, ja, warum nicht PowerShell?
Ja, das ist, das ist, da kann man nicht so wirklich was mit anfangen.
Das, das ist auch wurscht, das muss man sich auch nicht angucken.
Guck mal, mit Bash, mit Bash kann man dieses Jahr viel mehr verdienen als letztes Jahr.
Ich würde aber mal sagen, das liegt einfach daran, weil die meisten Sachen dieses Jahr mehr Geld bringen sollten, oder?
Ne, nicht wirklich. Pearl nicht.
Pearl bringt dieses Jahr weniger.
Na dann.
Ja, das kannst du nicht so, das bringt es nicht so wirklich zur Umfrage.
Moin.
So, den Rest werden wir skippen.
Boah, das hört ja gar nicht mal auf.
Das kann ich mir jetzt nicht anders angucken. Ist da noch irgendwas spannend?
Also, AI skippen wir mal komplett.
Work, Salary und sonst wie was.
Okay, ne, das, das gucken wir uns jetzt nicht noch alles an.
Da drehst du ja, drehst du ja, wobei ich glaube, ganz ehrlich, Work ist das letzte, was wir uns angucken müssen.
Community, Professional, Developers ist nicht so interessant.
Und das auch nicht. Ja, das gucken wir uns noch an. Work ist, glaube ich, das letzte wirklich halbwegs spannende.
Okay, die meisten Leute sind voll zufrieden.
Vollzeit angestellt als Entwickler. Hätte ich jetzt bei dieser Umfrage, ehrlich gesagt, auch nicht anders erwartet.
Ja.
Auch, auch in Germany.
Peter von Microsoft Support.
Work Environment, Hybrid, Remote. Ah, okay.
Die meisten Leute dürfen heutzutage Hybrid arbeiten. Also, im Büro und Remote.
Das finde ich cool.
Und man sieht, dass die meisten Leute,
wo es möglich ist, Hybrid und Remote zu arbeiten, sind...
Kann man gar nicht so, so abwandern.
Was ist denn das wenigste? Also, wo ist denn Hybrid überhaupt nicht möglich?
Just me, I'm a Freelancer. Okay.
Ja. Okay.
Diese super, die supergroßen Business-Dinger sind dann auch schon wieder nicht so.
Aber, und wenn sie wieder größer werden, sind sie wieder? Hä?
Okay, das könnte daran liegen, ganz ehrlich.
Ich glaube, das ist einfach ein bisschen schlecht gemacht in dem Fall.
Wahrscheinlich haben nur eine Handvoll Leute abgestimmt bei diesen großen Läden.
Und dementsprechend steckt das halt sehr ins Gewicht.
Company Size. Die meisten arbeiten in Company Size 20 bis 99 oder 100 bis 400.
Also, ich bin... Ich würde sagen, mein Arbeitgeber liegt hier.
Ich bin mir da aber, ehrlich gesagt, nicht sicher.
Und je nachdem, was man alles mitzählt,
kann das durchaus auch noch eine ganze Ecke mehr sein.
Je nachdem, ob man quasi nur so dieses Kern mitzählt und auch die Sachen, die dazugehören und...
Salary by Developer Type.
Der Senior Executive verdient am meisten. Ja.
Das hätte ich mir fast schon gedacht.
Am wenigsten verdient der Student.
Gefolgt vom Frontend-Entwickler. Okay.
Gefolgt von System-Administrator und Tester.
Games ist auch nicht sonderlich gut.
Cloud-Infrastruktur-Engineer.
Also, ein bisschen sowas in der Richtung, was ich jetzt mache.
Sowas hier... Ja, kann man sich jetzt drüber streiten.
Wie auch immer. Da kann man anscheinend Kohle mitverdienen.
Steht da irgendwo Crypto-Blockchain-Zeugs drinne?
Blockchain! Hey! Bam! Guck mal!
Ich habe mir anscheinend das Richtige ausgesucht.
So... Das interessiert mich nicht. Das auch nicht.
Oh, what the f...
Ah, das ist tatsächlich ganz interessant.
Wie viel Einfluss der jeweilige Entwickler denkt darauf zu haben, welche Technologie eingesetzt wird.
Also, die meisten sagen, sie haben...
Okay, sagen wir mal so.
Ein Drittel sagt, sie haben wenig oder gar keinen Einfluss drauf.
Die wenigsten sagen, sie haben viel Einfluss.
Und, ja, so mittelmäßig sagt, ich habe ein bisschen Einfluss.
Ja, ich würde auch sagen, ich habe ein bisschen Einfluss drauf.
Also, ich habe...
Ich würde sagen, ich habe zwischen viel und mittel viel Einfluss drauf, welche Technologie gekauft wird.
Je nachdem, ein bisschen in welchen Aufgabenbereich das fällt, ja.
Ich kann zu alles meinen Senf geben.
Aber...
Wenn es was ist, wo ich jetzt, sagen wir mal, nicht viel damit zu tun habe,
dann kann das durchaus sein, dass sie sagen, ja, nice Max, dass dir das nicht gefällt.
Aber du musst ja damit eigentlich gar nichts machen, also nervt nicht.
Wenn das was ist, womit ich viel zu tun habe,
dann würde ich sagen, habe ich auch doch verhältnismäßig viel Einfluss drauf.
Unterm Strich kann das natürlich immer überschrieben werden,
wenn irgendwie der Chef, dessen Chef vom Chef kommt und sagt,
nein, wir machen das jetzt aber company-weit so, dann haben halt alle gelitten.
Warum ist das eigentlich so kaputt?
Coding outside of work.
Okay, viele Leute programmieren auch hobbymäßig.
70% der Entwickler programmieren auch hobbymäßig.
Ja, würde ich bei mir auch so unterschreiben.
Ich meine, ich bin kein professioneller Entwickler, damit seid hauptberuflich Geld verdient.
Also bin ich ja eigentlich eh nur da drinnen in dieser Kategorie, ja.
Stack Overflow.
Okay, welche Seiten so benutzt werden und so, juckt jetzt eigentlich relativ wenig.
War es schon.
Das gucken wir uns jetzt nicht an.
Das ist...
Okay, wobei, doch, doch, ist gar nicht so, ist gar nicht so uninteressant.
Und zwar das hier.
Hier.
Tägliche Zeit, die man braucht, um nach...
zu googeln nach Problemen.
Less than 15 minutes.
Okay, Leute, die less than 15 minutes am Tag nach irgendwelchen Sachen googeln müssen,
die werden wahrscheinlich am Tag einfach nicht viel machen.
Also, es schwankt bei mir, ja.
Es gibt Tage, da google ich gefühlt jeden zweiten Befehl,
weil es irgendwelche unverständlichen Dinger sind, die man benutzen muss,
und manchmal gar nicht.
Oder so gut wie gar nicht.
Daily time spent answering questions.
Ich wollte sagen, haben die vielleicht...
Frequency of productivity frictions.
Ja, ich hätte jetzt eigentlich gesagt, so gibt es eine Umfrage.
Es ist quasi Arbeiten zu Mieten-Anteil.
Most common frustrations.
Ich habe gedacht, zu viele Meetings.
Gibt es aber nicht zur Auswahl.
Satisfied at current job. Wo war das?
Satisfied at current job.
Ein Drittel ist nicht happy.
50% geht so.
Und 20% sind richtig glücklich.
Also, ich würde sagen, bei mir schwankt das so.
Von Tag zu Tag.
Je nachdem, was ist und was gewesen ist.
Bei mir schwankt das so zwischen den zwei hier, würde ich sagen, ja.
Weiß nicht, wie sieht das bei euch aus?
Oder fragen wir mal anders.
Seid ihr überwiegend happy oder nicht happy auf der Arbeit?
Not happy, okay.
Solange es den Obstkorb gibt.
Ja, okay, dann ist gut.
Also, ich bin...
Also, ich bin...
Bei mir schwankt das zwischen happy und...
Was heißt ein Complacement?
Das heißt, glaube ich, sowas wie zufrieden oder sowas.
Was heißt denn Complacement genau?
Selbstgefällig, naja, das trifft es jetzt in dem Fall eigentlich nicht.
Zufrieden, ja, ich glaube, zufrieden trifft es ja eigentlich ganz gut.
Zufrieden, ja, sowas, ja.
Also, bei mir schwankt das zwischen diesen zwei Sachen.
Je nachdem, was so anliegt und was ist.
Insgesamt so mittelmäßig, okay.
Aber was man hier auch wieder sieht ist,
das finde ich immer ganz spannend, weil
das deckt sich auch mit anderen Umfragen und sowas, was man so hört,
dass ein Drittel der Leute eigentlich innerlich da schon abgeschlossen hat mit dem Laden, ja.
Sobald die ein Angebot haben, sind die weg.
Für sie also attraktiv genuges Angebot sind sie weg.
Also, das ist auch so ein Trend, was so Recruiting angeht.
Die letzten Jahre über, dass man dadurch, dass halt die Leute nicht mehr einfach,
wenn du eine Stellenanzeige schaltest, jetzt zu dir gerannt kommen,
dass die Recruiter, Leute, man sieht es auf LinkedIn, ja,
dass immer mehr versucht wird, aktiv Leute anzusprechen,
die schon einen Job haben gerade, in der Hoffnung, dass die eben not happy sind
und bei einem guten Angebot auch gewillt sind zu wechseln.
Und ganz ehrlich,
gibt viele, also gerade auf der alten Arbeit,
die meisten Leute auf der alten Arbeit, würde ich sagen,
sind bereit, sich, zumindest zum Zeitpunkt, als ich da weg bin,
wären bereit gewesen, sich bei einem guten Angebot,
sich das anzugucken und auch zu wechseln, wenn das dann unterm Strich stimmt.
Wie das mittlerweile ist, weiß ich nicht.
Ich habe ja noch ein bisschen Kontakt zu den Kollegen vom alten Arbeitgeber,
ab und zu ein bisschen schwätzig,
da auch mal eine Runde noch.
Ich habe gehört, dass es dort ein bisschen besser geworden ist, seit ich weg bin.
Also nicht, weil ich weg bin, sondern von der Zeit her, seit ich weg bin.
Da wurde ein Abteilungsleiter gewechselt und alles mögliche.
Muss ich ein bisschen gebessert haben.
Vielleicht auch besser, weil ich weg bin, keine Ahnung.
Es muss wohl ein bisschen besser geworden sein,
so gerade das letzte Jahr über.
Aber die meisten Leute, mit denen ich geredet habe, die sagen immer noch,
ich werde da wahrscheinlich nicht alt werden.
Und dementsprechend, glaube ich, ist das hier auch eine große Gruppe an Leute,
wo Recruiter versuchen, etwas abzugreifen.
Yo, fertig.
Jetzt wissen wir Bescheid.
Oder auch nicht.
Was ist das?
Das habe ich gebraucht jetzt.
Little Cat is sleeping.
Der sleept überhaupt nicht.
Offensichtlich sleept die nicht.
Fake News, ja.
Sleepy nicht sleeping.
Oh Gott, Chat. Ihr habt recht.
Oh Gott, High IQ Chat am Start.
80% der Programmers are not happy.
Der wird sich um das Stack Overflow Survey kümmern, ne?
Dann hören wir uns doch mal die Fireship-Zusammenfassung an.
Wie viele Katzen hast du eigentlich derzeit?
Ich keine.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Und auch wenn sie zurück in den Büro gezwungen werden, haben sie meistens Napppads und ältere Ballpizzen, um Depressionen zu beheben.
Aber das ist nicht genug.
In diesem Video werden wir das Gehirn des modernen Code-Monkeys entdecken und seinen seltsamen Umfeld beobachten,
um die Wahrheit zu finden, warum Bäuer und Pflümer statistisch glücklicher sind.
Und am wichtigsten, was man tun kann, um darüber zu kämpfen.
Es ist Juli 29, 2024 und ihr schaut den Code-Report.
Letzte Woche wurde der Stack Overflow Annual Survey mit über 65.000 Antworten von professionellen Entwicklern weltweit veröffentlicht.
Und es enthält eine Menge erstaunlicher Inhalte über den aktuellen Zustand der Programmierer und der Technologie.
Nicht nur werden wir diese Daten anschauen, sondern auch Anekdoten von Fremden auf der Internetseite,
um die unterappreizten Probleme, die diejenigen, die Coden, befinden, aufzuhalten.
Grund Nummer 1. Dollar-Dollar-Bills, Jungs.
Geld kann nicht glücklich sein, aber lasst uns ehrlich sein.
Ihr habt niemals jemanden schreien sehen, während ihr einen Lambo fahrt.
Programmierer sind gut bezahlt, aber nicht so gut bezahlt, wie ihr denkt.
Sie sagen, wenn ihr PHP lernt, seid ihr garantiert ein Lambo.
Das habe ich noch nicht gesehen, aber ich sehe allgemein wenige Lambo.
Aber hier ist ein Realitätscheck.
PHP ist fast die niedrigste bezahlte Sprache mit einem medienlosen Preis von 49.000.
Und um es schlimmer zu machen, war das ein Verlust von letztem Jahr.
Die Realität ist, dass jeder PHP-Millionär, wie Zuck oder Levels, auch ein Entrepreneur ist.
Das aktuelle Problem mit PHP ist, dass es populär ist.
Und ihr werdet bemerken, dass weniger populär spezialisierte Sprachen wie Erlust und Low-Level-Sprachen wie Rust bessere Steuern erzielen.
Der beste Weg, mehr Geld zu machen, ist, in den USA zu respawnen, wo die Steuern höher sind.
Oder zu lernen, mit Leuten zu sprechen, damit du irgendwann ein Manager werden kannst.
Paradoxal ist es so, dass die Depressionen in den USA viel höher sind als in Südostasien.
Also ist es vielleicht wahr, dass Geld nicht wirklich Glück verkauft.
Wenn du einfach nur für Geld programmierst, möchtest du das Plan wiederholen.
Zweiter Grund. Technische Steuern.
Die größte gemeinsame Frustration zwischen professionellen Entwicklern ist technische Steuern.
Und das ist, wie technische Steuern aussehen.
Diese Kode-Base ist schmutzig und schmutzig, aber sie bekommt den Job gemacht,
also werden wir nur weiter auf dem Boden bauen, weil es zu hart ist, zu anfangen.
Dieser Prozess dauert Jahre und Jahrzehnte, bis die Kode-Base erfüllt wird, um zu sagen, ich werde es später ändern.
Und wenn du auf Get-Blamed gehst, um herauszufinden, warum der Build nicht funktioniert, wenn du diese eine Linie des Kodes ablässt,
zieht es das Objektiv von einem Mann auf, der dort acht Jahre lang gearbeitet hat.
Das bedeutet, dass das Beste, was man tun kann, ist, diesen Kode nicht anzutun.
Wir alle wollen gute Arbeit machen, aber es ist fast unmöglich, wenn man sich gegen technische Steuern befindet.
Es hat auch den Vorteil, wenn man nichts macht, kann man nichts kaputt machen.
Aber was kannst du damit machen?
Na ja, um ehrlich zu sein, ist es fast nichts.
Es ist keine Schuld eines Programmierers, aber ein systemisches Problem, das von Grund Nummer drei,
Hustle-or-Die-Kultur.
Als du Kode schreibst, hast du einen Techniker, der dich pressiert, all diese Tickets vor dem Ende des Sprints zu schließen,
der von einem Ingenieur-Manager pressiert wird, um dieses Produkt am Ende des Quartiers zu schicken,
der von einem VP pressiert wird, um die Produktstrategie zu erledigen,
der von einem CEO pressiert wird, um Rechnungen zu öffnen,
der von einem BlackRock-Betreuer pressiert wird,
der von einem Anonymous-Deep-State-Trillionär pressiert wird, um interdimensionale Kriege zu finanzieren,
außer deiner Verständnis.
Die Maschine muss sich bewegen.
Und all dieser Druck wird dann durch die Software-Ingenieure von Boots-on-the-Ground eröffnet,
welche in Form von
unrealistischen Zeitlinien und Erwartungen verursacht werden.
Nun, was du damit tun kannst, ist, deinen Job zu verabschieden.
Die Aufstiegsrate der Software-Ingenieure ist extrem hoch, weil...
Habe ich ehrlich gesagt auch, ja.
Unlike many other industries, you can often make a lot more money by switching jobs.
But you still might not be happy, if you end up working for a corporate dinosaur,
where you become nothing more than a cog.
Many companies are so bloated with bureaucracy,
that it becomes nearly impossible to get anything done.
When programmers have to go to meetings to schedule pre-meetings to...
Das ist nicht... Das ist tatsächlich... Das Ganze, die ganze Umfrage ist...
Ach, das hier.
Ähm...
Wahrscheinlich zum größten Teil auf OS bezogen, allerdings...
Ist das... Dürfte das auch den...
größten Teil ausmachen?
Wie das hier ist...
Ich... Ich glaube, hier ist es vielleicht minimal länger,
aber im Großen und Ganzen ist es wahrscheinlich auch nicht viel besser,
wenn du hier für Google arbeitest.
Ich glaube auch ein, dass es einfach sehr stressig ist, ja.
Also, du kriegst halt...
Es ist aber so ein sehr prestigeträchtiger Job irgendwo.
Du kriegst sicherlich auch massig Kohle.
Aber ich glaube, dass du gerade bei...
Bei diesen äh...
...großen...
Unternehmen, sowas wie beispielsweise jetzt hier bei...
bei Google,
Google oder Microsoft oder gerade bei Google,
Google ist ja bekannt dafür,
dass es dort sehr,
dass da quasi permanent
quasi geguckt
wird und du permanent
quasi dafür sorgen musst, dass es
immer gut ankommt, was du machst
und dass du es immer gut verkaufst
und dich
das breittrittst, was du Tolles gemacht hast.
Du bist quasi permanent irgendwie dazu gezwungen,
dass du dich selbst gut darstellst
und das
ist, glaube ich, alles sehr
sehr genau beobachtet
wirst auch. Ich glaube, das ist auf Dauer
sehr stressig, auch dort zu arbeiten.
Und
ich bin mir auch gar nicht mal sicher,
wie harmonisch
das Miteinander dort ist,
weil wenn es da quasi
für jeden permanent immer ums Überleben
geht, ist man
vielleicht jetzt auch nur
vordergründig
nett und freundlich zu den
Leuten und nutzt sie im Endeffekt
sonst einfach nur aus. Aber keine Ahnung,
wie das da wirklich läuft.
Es muss zumindest seinen Grund haben, dass sich diesen
Stress und das alles drumherum
nicht viele Leute lange geben.
Das ist der Meister da.
Ich habe jetzt...
Ja, ganz so schlimm ist es ja glücklicherweise
als Entwickler nicht.
Ja, gut, das stimmt.
Ja, ja, das ist so.
Das ist...
Ja, ja, hätte ich das gedacht, ja.
Habe ich ja gestern auch ausführlich gesagt.
Ja, ja, ja, ja, ja, ja.
Bei Apple, bei Google, sonst wo gewesen
zu sein. Und da profitierst
du quasi gefühlt dein Leben lang von,
weil es in deinem Lebenslauf drinne steht
und beißt du dich dann halt mal 1-2
Jahre durch und dann CU.
Dann stellst du fest... Wobei ich
mir auch vorstellen könnte, dass viele Leute da so
sehr idealistisch hingehen und sagen, boah,
ist das geil bei Google. Und wenn sie
dann da feststellen, merken sie, ey, die bezahlen
ja ordentlich, aber das ist auch fucking anstrengend.
Und dann haben sie nach 2 Jahren keinen Bock mehr.
Da ist das Interview auch schwerer
als der Job selbst. Ja, erstmal den
Binary Tree Inver...
Ich habe keine Ahnung, ob das
wirklich noch in den Interviews drankommt.
Aber das ist ja so
die Meme-Interview-Question schlechthin.
Binary Tree Inver...
Ja, das mit Sicherheit.
Wir haben regelmäßig einen Call
so einmal im Monat mit ein paar
Google Cloud Leuten.
Das sind jetzt nicht die Ultra-Technik-Leute,
sondern die sind schon ein bisschen
am Verkaufen. Aber man muss
sagen,
man merkt den Leuten
an, die dort arbeiten,
dass sie das ein oder andere
wie kommuniziere ich
ordentlich Seminar besucht haben.
Weil die machen das immer sehr geschickt
und selbst wenn Sachen nicht gut gelaufen
sind oder Sachen nicht supported
sind oder so, die haben da immer
eine gute Antwort drauf, sodass
du nie das Gefühl hast, die haben dich jetzt abgefuckt.
Also sie haben da sicherlich das
ein oder andere Kommunikationsseminar
gesucht. Wobei bei Google hast du auch gelitten.
Wenn das nicht stimmt, wenn du es irgendwie
ein bisschen verkackt hast, gibt es gleich
deinen persönlichen Performance Improvement Plan
und du bist weg vom Fenster.
Ich glaube, dass das echt sehr stressig ist,
da zu arbeiten.
Auf Dauer. Weshalb es die meisten Leute sich
nicht länger als zwei Jahre geben.
Ja, ich weiß.
Wir haben heute nicht viel gemacht, außer
geschwätzt.
Aber ich habe Hunger.
Es ist gleich zwölf.
Ich muss Nudeln mit Lachs futtern.
Ich habe übertrieben Kohldampf.
Ich war heute auch schon recht früh on.
Ich fresse jetzt was.
Und wir müssen unbedingt die Stellenanzeigen
fertig machen. Ich habe noch so viele offen,
sonst bin ich bis nächsten Monat nicht fertig.
Chat, wir hören uns. Bis denn. Macht's gut.
See you.
