easy easy easy easy easy so gerade was zu trinken anstatt gebracht während ich
500 mal das easy immer gedrückt habe ich weiß nicht wie du von ich habe mir
was zu trinken geholt auf ich wusste runde kacken kommst aber gibt bestimmt
leute die gehen auch ins bad sich trinken und ich muss unbedingt package
updates machen archlinux by the way gestern waren stellenanzeigen habt ihr
das nicht mitgekriegt? delay? ne, kein delay. ich habe auch gestern gar nicht
gestreamt debated ich habe gesagt ich würde streamen aber ich habe nicht
gestreamt aber ein bisschen wupp wupp wupp oder sowas an wupp wupp wupp wupp
irgendwas entspannendes
so package updates
aha meine maus steht ihm die andere maus steht wieder auf dem mauspad drauf
jetzt backt es wieder rum
gerade mal rausziehen und wieder reinstecken hier
gachibas
seit wann arch? seit zwei tagen erst
guck mal was der pfo in der hand hat gucken ob das heute programm ist okay
dependency cycle entdeckt oh nein leute sind verloren
kkkk wait wie was das keine updates das stimmt doch irgendwas nicht chat das
kann ja sein also es gab schon updates aber keine package updates auch nicht
mal visual studio code oder so ein schrott ey was ist denn dass vielleicht jetbrains zeug hast du doch schon vorgestern alter!
Das ist zwei Tage her, als wären zwei Tage, ja, wenigstens das ganze Chatbrains-Zeugs bei Updaten.
Bam.
Ordentlich mal 100% CPU-Auslast erzeugen gleich.
Passt mal auf, das geht ab.
Guckt euch mal an hier, das Chatbrains-Zeugs ist nicht damit zu spaßen.
Da brauchen schon die Updates 100% CPU-Auslast.
Ich finde, du solltest das GNU Arch, beziehungsweise GNU Plus Arch.
Warum nicht GNU Plus Arch Linux?
Oder warum nicht GNU Plus Linux Arch Linux?
Das ist gerade echt wie sowas.
Ich use Arch GNU Plus Linux, by the way.
McFly, danke für den Sub und übrigens auch an, wen habe ich denn hier ganz am Anfang gar nicht mit?
Desplixer und irgendjemand war noch?
Den sehe ich gerade, warum sehe ich den nicht?
Ah, Andreas Fuchs, ja, bock, nice, danke schön.
Excellent, Leute, excellent, excellent.
Wupp, wupp, wupp, wupp, wupp, wupp, wupp, wupp.
Jetzt ist es wieder zu laut.
Die können wir dir irreplikieren.
Ich muss die Playlist nicht ordentlich einstellen.
Das regert mich immer.
Jetzt passt die Playlist wieder.
Was ist das für ein Terminal-Emulator?
Das ist Westterm.
W-E-Z-Term.
McFly EDV Forensik am Start.
Danke, Leute, für den Sub.
Der Updater ist, nee.
Der Updater, das siehst du doch auch hier gleich.
Wobei, steht das überhaupt dabei?
Das ist alles Java.
Java, wie die geilen Leute sagen.
Written in Java.
Okay, hat er anscheinend geupdatet.
Kann man die Toolbox selbst irgendwie updaten?
Ja, das ist das hier.
GitHub, Westterm.
Beste.
What makes Westterm bad?
Ich weiß nicht.
Es ist für mich der beste Terminal-Emulator, den es zurzeit gibt.
Aber Hauptsache, man gibt Flamed auf GitHub.
Okay, man kann sein Terminal auch absichtlich hässlich machen,
aber ich finde, das sieht doch eigentlich deutlich schicker aus.
Okay, das ist ja mal ein Debate-Github-Issue, oder?
Ich mach ein Issue mit.
What makes Westterm bad?
Und als erstes kommt ja übrigens, nein, nein, das ist der beste Terminal-Emulator, den es gibt zurzeit.
Übrigens, noch mal was zum Lachen, Leute.
Ich mach mal einen Restart, weil Updates den durch.
Mal was zum Lachen, Leute.
Ich hab heute einen Comment gesehen, da musste ich echt kecken, als ich das gelesen hab.
Äh...
Wo ist das Video?
Das ist so ein typisches Comment von irgendeinem Facebook-Boomer.
100 Pro.
Es ist so insane, wie viele Konsolen es gibt für sowas Simples wie...
Ganz ehrlich, Terminal-Emulation ist viel, viel komplexer, als es auf den ersten Blick aussieht.
Zum größten Teil wegen 50 Jahre altem Legacy-Shit, der teilweise noch supported werden muss.
Da gibt es 30 Milliarden Escapes.
Da gibt es 30 Millionen Flash-Sequenzen, die sich je nach Terminal-Modus widersprechen gegenseitig.
Das ist echt nicht einfach.
Aber Westterm ist die beste.
Das ist das beste Terminal, aus meiner Sicht.
Es kann einfach alles und mehr.
Geht mal in den chat, es gibt sogar eine Suchmaschine für Api-Keys.
So, passt mal auf.
Wenn ihr mal kecken wollt, ne Runde.
Der Jörg Weber hat kommentiert, Leute.
Der Jörg Weber.
Ich bin mir bei solchen Comments immer nicht sicher, ob es Debate ist oder ob es ernst gemeint ist.
Aber das ist so eine typische...
Ich bin Facebook-Boomer und lustig.
Also, Jörg Weber schreibt...
Das ist in diesem Video.
Übrigens nochmal angemerkt.
In diesem Video, ich kann Kitty nicht verwenden, weil Kitty, SSH und Temux nicht gescheit miteinander funktionieren.
Und der Kitty-Autor möchte das auch nicht ändern.
Weil der auf alle Temux-User scheißt.
Sinngemäß von ihm selbst gesagt.
So.
Ich mache in diesem Video in keinster Weise irgendwie sowohl Windows als auch Linux grundlos schlecht.
Auch wenn die Leute das in den Kommentaren schreiben.
Ich berichte einfach nur darüber, wie sich die aktuelle Situation für Linux aus meiner Sicht als jemand, der das seit 15 Jahren mindestens schon benutzt und damit sein Geld verdient.
Sich als Daily-OS auf dem Desktop als Standardsystem.
So darstellt.
So.
Und eigentlich finde ich das Video im Nachhinein, wenn ich es heute aufnehmen würde, immer noch ziemlich gut.
Und ich würde es wahrscheinlich wieder so aufnehmen.
Hat sich nicht so viel geändert.
Zumindest.
Der Jörg ist der Meinung.
Benutze Linux Mint.
Mache alles damit.
Musik, Gaming, Office, einfach alles.
Ich frage mich, was er für Gaming so macht.
So Binding of Isaac und sowas.
Ja, das läuft überall. Brauche Einarbeitung.
Beschäftigt.
Erkennt man, dass Linux Vorteile hat und sicherer ist.
Da hat er ja recht.
Tux Racer spielt er wahrscheinlich.
Das ist ja alles in Ordnung.
Habe bis jetzt noch kein Programm gefunden, das nicht eine gute Alternative zur Bezahlsoftware von Windows ist.
Jedenfalls auch alles okay.
Und jetzt kommt, und jetzt kommt, und jetzt wird das Comment irgendwie ein bisschen cringe.
Deine Probleme kommen daher, dass du damit nicht umgehen kannst.
Also dann bleib bei Windows.
Besser.
Du kannst alles unterstreichen, was du sagst.
Ja, was denn zum Beispiel?
Was denn?
Das wäre ja auch mal ganz sinnvoll zu schreiben.
Was?
Und ja, im Zweifelsfall nur, wenn ich das alles auf zwei Mal...
Aber, wisst ihr?
Das ist halt so richtig geil.
Erstens, ein ganz normales, sinniges und ja auch nicht verkehrtes Comment geschrieben.
Aber dann irgendwie sowas noch dahinter.
Ja.
Jörg, warum?
Schreib doch einfach...
Hättest du das erste Comment von der ersten Hälfte da gelassen, wäre gut gewesen.
Ja.
Aber die meisten Leute haben es sich überhaupt nicht richtig angehört.
Aber das ist ja der YouTube...
Der YouTube-Klassiker.
Gaming funktioniert erstaunlich gut im Vergleich zu früher.
Das stimmt schon.
Ich sag ja auch...
Sag ich ja sogar auch im Video, ja.
Habe ich jetzt eigentlich schon rebooted?
Ja, habe ich.
Pass mal auf neue Updates, nachdem ich geupdatet habe und rebooted habe.
Ich meine, das ist Archie-Lux.
Da gibt es 5-mal am Tag Updates, wenn es sein muss.
Betaigeuts, so sehe ich das auch.
Ich komme immer noch nicht darauf klar, wie die Amis den Stern nennen, aber...
Aber du hast recht, ich verstehe es auch nicht.
Das habe ich damals schon nicht verstanden, als es um diesen ganzen krassen Konsolen-Flame-War ging.
Ich hatte einfach zu dem damaligen Zeitpunkt alles.
Ich hatte eine Switch...
Nee, Quatsch, keine Switch.
Keck, wait.
Was war? Eine Wii.
Eine Wii, natürlich.
Eine Xbox 360 und eine PS3.
Und ich habe einfach das gespielt,
auf derjenigen Plattform, wo es sich angeboten hat.
Aber die haben sich da die Körbe eingeschlagen.
Und es ist genauso bei mir,
was Android und iOS angeht.
Ich verwende auch beides.
Und ich sehe es auch.
Und ich sehe es auch überhaupt nicht ein,
mich da irgendwie auf eins festzulegen.
Ja, das stimmt.
Wobei, es gibt ja Untersuchungen dazu.
Man könnte nachgucken.
Also, das ist jetzt nichts, was ich mir ausdenke.
Es gibt Untersuchungen dazu,
dass so...
Wie nennt man das so?
So Fanboy...
Fanboyen ist gar nicht mal das richtige Wort dafür.
Wie könnte...
Ich nenne es mal Fanboyen,
in Ermangelung eines anderen gescheiten Wortes,
was mir...
Wow, sowas...
Jünger, das trifft es sehr gut.
Ja?
Genau das trifft es ganz gut.
Die Leute haben ja da gar nichts davon.
Muss man ja mal sagen.
Rein praktisch gesehen haben die nichts davon.
Es ist nicht so, dass Apple jetzt sagen würde,
oh, du bist der Apple-User des Jahres,
du kriegst das neue iPhone umsonst oder sowas.
Und gerade die Super-Fanboys,
das sind ja die ersten,
die komplett verarscht und ausgenommen werden.
Habe ich aber vergessen, was ich eigentlich...
Es gibt ja tatsächlich Untersuchungen dazu,
dass das religiöse Gefühle
im Hirn der Fanboys auslöst.
Apple-Produkte
oder Konsolen-Flame-War
oder was es nicht alles gibt.
Gibt ja in fast jedem Bereich was.
Gibt es Untersuchungen dazu,
dass quasi Beten
bei religiösen Leuten
und iPhones angucken
bei krassen Apple-Fanboys
die gleichen Areale im Gehirn anspricht.
Oder aktiv sind.
Also für viele ist das
keine Frage
dessen,
was jetzt in der Situation
vielleicht das bessere Gerät ist,
sondern mittlerweile
eine Glaubensfrage.
Und wenn man das aus dem Gesichtspunkt sieht,
versteht man auch,
warum die Wogen
damals zwischen
Playstation und Xbox
so hochgekocht sind.
Das war für die Leute keine Frage,
dass, ja, ich kann auch
ohne Probleme zugeben,
dass Online-Sachen auf der Xbox 360
waren als auf der Playstation.
Dafür viele Exklusivspiele auf der Playstation besser.
Das konnte man nicht zugeben,
weil das keine rationale
Denkweise war, sondern
eine Glaubensfrage für die Leute.
Und so ist das heute
bei Apple-Produkten zum Beispiel auch.
Und deswegen muss ich euch auch erzählen,
ich muss euch ja konvertieren,
äh, heißt das konvertieren?
Nee, äh, missionieren,
Archlinux zu verwenden natürlich.
Das ist das beste.
Askiquarium heißt das hier, guck.
Gibt es
auch sogar als
das ist so essential,
dass das sogar ein Standardpaket
wäre. By the way, zum Thema
NixOS habe ich mir
wurde mir gestern Abend
blicke gerade nicht mehr durch,
ich habe zu viele Sachen.
Nix, Nix
Terminal, wurde mir ein Video
empfohlen, das habe ich noch, das hier.
Das habe ich noch nicht geguckt.
Das gucken wir jetzt auch nicht.
Aber ich mache mir das mal auf.
Ich bin da immer interested dran,
was das tut. Und gerade
NixOS juckt mich persönlich nicht.
Aber was mich interessiert ist
NixOS als
Paketquelle.
Ja, dafür muss man auf Twitter.
Sorry, x
ehemals Twitter.
Devbox habe ich ausprobiert.
Das hat mir nicht gefallen.
Weil?
Ja, weil es im Endeffekt kein Container ist.
Weil du immer noch
was du machst,
alles auf deiner
eigentlichen Platte
erledigst. Und du nicht
einfach sagen kannst, ich bin jetzt fertig, clean
und wegschmeißen. Das habe ich
nicht so 100 pro gecheckt,
was der Sinn davon ist.
Moin, was ist Hackermans?
Ein nicht näher definierter
Begriff.
Aber es umfasst auf jeden
Fall lange
schnell tippen auf Tastaturen
und Hoodies anziehen und im Keller
sitzen. Eventuell.
Aber das lassen wir heute.
Wir tippen heute nur
lange auf der Tastatur.
Ich habe mittlerweile nicht
nur viele Tabs offen, ich habe mittlerweile
sogar noch vier verschiedene
Browser-Fenster
offen, weil es nicht mehr reicht.
Achso, ja, vielleicht
soll ich euch erzählen, was wir machen. Wir bauen heute
am ESP32 weiter.
Das heißt, wir müssen heute
einen neuen
Hackermans-Titel
aufbauen.
Und zwar
C++
Hackermans bis zum Umfallen.
Oder nennen wir es...
Leute, gibt es irgendeine dumme
andere Bezeichnung für C++,
die so richtig dumm ist?
Sowas wie Win doof.
So eine richtige Boomer
C...
C...
Das ist gut. Plus mit B.
Das triggert ein paar Leute.
Die kommen dann nur um zu schreiben, der Titel ist falsch im Stream.
Oder wir können es
C++ nennen oder so.
Das hatte ich ja letztens schon.
CNG.
Das checken die Leute nicht.
C++
Das ist auch eine gute Idee.
C++ gleich 1.
Ja, das finde ich auch nicht schlecht.
Das merke ich mir mal für die
nächsten Streams.
C++.
Ja, wir beinhalten am ESP32 weiter. Der Webserver funktioniert ja, aber der macht ja noch nichts. Der muss ja noch Wifi-Sachen updaten können und alles mögliche. Und es gibt auch noch kein Webinterface und sonst was. Da bauen wir heute weiter dran.
Ich habe einen ganzen Tag Zeit. Ich habe Zeit bis 22 Uhr. Dann gehe ich ins Bett gehen. Sehe ich genauso. Ja, sehe ich genauso. Man sollte das nehmen, womit man am besten klarkommt. Es macht überhaupt keinen Sinn. Also es macht aus zwei Gründen keinen Sinn.
Das erste, was keinen Sinn macht, ist einfach irgendwas zu nehmen, weil irgendeiner gesagt hat, das ist das Beste. So, das ist das erste. Und das zweite ist, einfach stur auf das beharren.
Weil man sich irgendwann mal dafür entschieden hat, ohne mal ein bisschen über den Tellerrand zu gucken. Weil dann verpasst man ja auch einiges. Ich weiß, es ist manchmal ein bisschen schwierig, gerade wenn man so glühender Verfechter von irgendwas ist.
Überlegt euch mal, ihr hättet damals eine Playstation 3 gekauft und hättet auch in irgendwelchen Foren auf Reddit, auf YouTube Kommentare alle Xbox-User immer dumm angemacht und die Playstation super krass gefanboyt. Ihr hättet im Leben keine Xbox gekauft.
Aber vielleicht wäre das...
Nämlich für Online-Modus und eben Xbox-Exklusiv-Spiele oder Spiele, die besser dort liefen oder was auch immer. Aber das hätten die Leute aus Prinzip nicht gemacht. Also wenn man gar so sehr fanboyt, entgehen einem manchmal auch sehr sinnvolle Sachen.
Und es gibt Sachen, die finde ich persönlich auch kacke. Na, zum Beispiel C++. Wollten wir mal kurz erwähnen, ja. Es ist nicht, dass ich das mache, weil ich da wahnsinnig Bock drauf habe, sondern weil es das Einzige ist, was ordentlich funktioniert.
Oder Nextcloud. Ich hasse Nextcloud, Leute. Ich kann es einfach nicht ab. Und jedes Mal, wenn ich das ausprobiere, stelle ich fest, dass es Ultra-Abwachs-Software ist. Aber so richtige Abwachs-Software.
Trotzdem probiere ich es regelmäßig so einmal im Jahr mal aus, ob sich da vielleicht was dran geändert hat. Aber ich werde dann... Ich würde jetzt schon bestimmt zum, frag mich nicht, fünften, sechsten Mal bestätigen, dass das die Ultra-Abwachs-Software ist.
Wo ich auch nicht verstehe, warum die mittlerweile angeblich 5000 verschiedene Sachen können und nichts davon richtig.
So simple Sachen wie dein fucking Notizprogramm ist Schrott. Wie kann man Notizprogramm verkacken, Alter?
Ja, Nextcloud ist echt so ein Ding. Da kann ich mich auch überlegen.
Es könnte nur noch getoppt werden, wenn Nextcloud in C++ entwickelt wäre.
Äh, gar nichts. Das meiste, was Nextcloud drinne hat, braucht man schlicht und ergreifend nicht.
Das Einzige, was ich von Nextcloud vermisse...
Was ich von Nextcloud verwende, ist wirklich die absolute Core-Funktionalität, nämlich Kaldorf und Kartdorf.
Eigentlich, eigentlich noch nicht mal mehr das mittlerweile.
Ich hab das noch laufen, weil ich noch ein paar alte Kontakte da drin gesynkt hab und die noch nirgends woanders hin exportiert hab.
Kalenderplanung, so mach ich das schon gar nicht mehr drüber.
Aber das, was die da alles drinne haben mittlerweile, meine Güte.
Und nix davon richtig.
Das ist auch das, was mich jedes Mal nervt, wenn ich Nextcloud ausprobiere.
Dass du, sobald du nur ein, ein, wie sagst du das?
So ein...
Eine blanke quasi hochhebst und unter die Haube guckst.
Feststellst, ah, hier ist ja gar nix.
Ist nix dahinter.
Nie Probleme gehabt.
Funktioniert mittlerweile die Volltext-Suche ordentlich out of the box, ohne dass du dir ein Bein ausreißen musst.
Früher war Suche immer so ein Ding der Unmöglichkeit für Nextcloud.
Und ich meine mit Volltext-Suche nicht, dass der Dateinamen findet, sondern, dass der auch, wenn du beispielsweise in der Suche eingibst, blub.
Und in irgendeinem deiner Notizen.
Kommt blub.
Am besten sogar noch als Substring vor, dass er es dann findet.
Das bezweifle ich ja, dass sie das hingekriegt haben mittlerweile.
Wenn ist gut.
Wenn ist gut, ja.
Übrigens, diesen Monat war Premiere, oder nicht Premiere, mal seit langer Zeit mal wieder was.
Ich hab hier seit Jahrzehnten, kann man eigentlich schon sagen, hier die CT als Abo.
Äh, nein.
Die CT als Abo.
Und bei mir stapeln sich...
Stapeln sich eigentlich nur die Hefte.
Ich schmeiß die alle zwei, drei Jahre dann mal weg.
Ich les die eigentlich gar nicht mehr.
Diesen Monat war mal tatsächlich wieder Premiere, dass ich mal seit Jahren, wirklich seit Jahren, mal wieder in die CT reingeguckt hab, die ich schon eigentlich ewig auch bezahle, aber zu faul bin abzubestellen.
Und zwar nicht wegen Nextcloud, das war nämlich auch drin.
Fällt mir by the way so nebenbei gerade auf.
Nein, weil die Fahrrad- und Running-Apps, oder nur Fahrrad-Apps, ich glaub...
Ich glaub, dass ich hauptsächlich über Fahrrad sage, Navigations-Apps getestet hab, fand den Test gar nicht so schlecht.
Kam raus, was ich mir schon gedacht habe im Endeffekt, Komoot ist die beste Allround-App, aber, wenn es einem rein um gute Routenplanung für Fahrrad geht, sind andere besser.
Was aber nicht so schlimm ist, weil ich nie einfach A und B setze in Komoot und dann die Strecke fahre, sondern die immer von Hand nochmal durchgehe.
Das heißt, mir ist das nicht so wild.
Was, wegen YouTube?
Das guck ich auch, das guck ich auch.
Das guck ich deutlich öfters, als ich in die echte CD reingucke.
Das ist ein niedliches Emote.
Channel kenn ich nicht.
Aber, nice Emote.
Stimmt, OwnCloud wollte Go rewriten, wie sieht's denn da jetzt eigentlich aus? Das hab ich gar nicht...
OwnCloud Go, wie sieht's denn da aus mittlerweile?
Ja, außer, dass die vor drei Jahren gesagt haben, sie rewriten in Go.
Ah, Okis ist das.
Okis.
Und was können die jetzt besser?
Introduct to infinite scale.
Ja, ist klar.
Try online, okay.
Äh, what?
Ne.
Äh, äh, hier?
Und wie sign ich mich da jetzt in?
Admin.
Ne.
Einstein Relativity.
Admin User.
Das war ein witziges Login.
Funktioniert ja erstklassig.
Ja, Single Executables mag ich.
Das bietet sich ja mit Go auch direkt an.
So, machen wir hier den Camper mal zu.
Wo sind wir stehen geblieben?
Wir haben eine Partitionstabelle generiert, glaube ich.
Wir müssen mal das offizielle Exempel Repo von denen angucken, was die für Settings haben in ESP EDF.
Ja.
Ja.
Flash Size.
Das haben wir ja schon anders eingestellt.
Partitions.
Default 16 MB.
Was ist das?
Gibt's nicht.
Ja, also.
Ich zeige euch mal kurz, was ich hier für eine Hardware am Start habe, beziehungsweise
wo wir stehen geblieben sind.
Ich muss gerade mal kurz gucken, in welchem Ordner wir waren.
Wie?
Ja, vielleicht kann ich das mal richtig schreiben.
Hier, Display, Display Champ.
Da sind wir stehen geblieben.
Display Champ.
Warum habe ich ein Display Champ im Display Champ?
Display Champ.
Unterordner.
Weird Champ.
Kann man dazu nur sagen.
Und das dann in Visual Studio Code aufmachen.
Jawoll.
Ist alles noch sehr übersichtlich.
Noch nichts Wildes.
Dann stöpseln wir das Board.
Das Board stöpseln wir mal an.
So.
Connect.
Und dann zeige ich euch, was ich an Hardware am Start habe, beziehungsweise was wir schon
gemacht haben.
Monitoren.
Monitor.
Export.
Monitor.
Aha.
Nice.
Wifi-Verbindung funktioniert noch.
Anscheinend habe ich das Passwort nicht geändert.
Sehr gut.
Also, ich habe mir folgende Hardware gekauft und zwar den neuen Flagship Microcontroller
von Espressif.
Dieses Ding hier.
Ich muss das jetzt ein bisschen ausholen, weil ich glaube, man könnte das jetzt missverstehen.
Das ist nicht der neue Flagship Microcontroller von Espressif.
Das hier ist der.
Und das ist ein fertiges Board, wo der drauf verwendet wird.
Das ist ein ESP32 S3 auf einem Board mit integriertem Display.
Und haltet euch fest.
Weil das richtig nice Specs hat im Vergleich zu den alten.
Sieht nach einer E-Zigarette aus.
Was?
Also, ich habe ja da schon ganz gutes Vorstellungsvermögen, aber ich finde, es hat absolut keine Ähnlichkeit
zu einer E-Zigarette.
Chat, wie seht ihr das?
Ich sehe da die E-Zigarette nicht drin, ehrlich gesagt.
Zumindest.
Das Ding hat 16 MB Flash.
Und 8 MB plus 512 KB RAM.
Bisschen wie ein USB-Stick, ja?
Und das ist massive gegen die alten ESP32 Kisten.
Die hatten nämlich nur 4 MB Flash und 512 KB RAM.
Und das Ding hat die eingebauten 512 KB plus 8 extra.
Was aber auch sehr nice ist.
Gerade für Grafikausgabe auf dem Display.
Da ist es definitiv nicht verkehrt.
Ein bisschen RAM zu haben.
Ansonsten sind die Hardware Specs vom ESP32 S3 die gleichen.
Zwei Cores, 240 MHz.
Also ein kleines Ding für 15 Dollar bei AliExpress.
Das kostet hier mehr.
Für 15 Dollar bei AliExpress.
Ist, ja, schneller als die ersten paar Konsolengenerationen zusammen.
Ey, es gibt 100 pro Doom auf dem ESP32.
Ja.
Vor 7 Jahren hat das schon einer gebaut.
Das war so klar, dass es schon einen Doom-Port für den ESP32 gibt.
Ja.
Guckt.
War doch klar.
Also Doom gibt es ja mittlerweile sogar auf Schwangerschaftstests.
Also Doom gibt es mittlerweile überall.
Und die Dinger sind nun wirklich stärker als die PCs von der damaligen Zeit, wo Doom rausgekommen ist.
Ja.
Das heißt, das wundert, das wundert echt nicht.
Der limitierende Faktor an der Stelle hier ist nicht der ESP32, sondern eher dieses, dieses Kack-Display.
Ja.
Das war, das war, das war eh Fake mit dem Doom auf Schwangerschaftstests.
Ja.
Ja.
Und das Teil habe ich mir gekauft.
Mittlerweile im Doppelpack.
Eins mit Case und eins ohne Case.
Ja.
Eins mit so einem Case.
Und eins ohne Case.
Kostet im Prinzip...
Guck mal, witzigerweise ist das mit Case billiger als das ohne Case.
Warum?
Man weiß es nicht.
Also sprich, warum irgendwas anderes kaufen?
Das ist dieses exakt das gleiche Board, ne?
Es, es sieht ein bisschen aus wie ein...
Ah, vielleicht entfernt wie so ein Legostein.
Macht aber einen ganz, also macht echt einen ganz brauchbaren Eindruck.
Ich habe das hier vor mir liegen.
Wie gesagt, heute machen wir nichts mit dem Display.
Deswegen auch keine Kamera.
Steht aber auf jeden Fall.
Steht aber auf jeden Fall noch auf dem Plan.
Das Gehäuse macht auf jeden Fall einen guten Eindruck.
Denn das ist kein billig 3D-Druckgehäuse.
Also wenn es ein 3D-Druckgehäuse ist, was ich mir eventuell vorstellen könnte.
Dann auf jeden Fall sieht man keine Layer.
Und es ist auch kein billiges Material hier.
Das ist auch, ist echt okay.
Ähm, das Gehäuse ist magnetisch.
Das kann man an die...
Das kann man...
Das ist ja cool gemacht.
Das Gehäuse ist magnetisch.
Das kann man an die Wand hängen.
Auch eine gute Idee.
Ja.
Da ist ein Magnet drinne.
Das kann man an die Wand hängen.
Das Gehäuse.
Cool.
Fällt mir jetzt erst auf.
Heck.
Wait.
Das ist sehr nice, dass man das an die Wand hängen kann.
Da braucht man nichts zum irgendwie festschrauben und so.
Ja.
Ansonsten hast du neben, hast du den Reset-Knopf.
Und hast hier vorne deine zwei Push-Buttons.
Wo ist der Link?
Geil.
TCC.
Achso.
Das hatte ich von AliExpress.
Ja.
Moment.
AliExpress Tee Display.
Ja.
Da.
Gucken wir ob das noch, der ist.
Ja.
Das ist das 15€ ohne Case.
Äh.
Tee display S3 mit Case.
Sollen wir mal gucken.
Ok.
das case 1 also das mit case habe ich nicht von aliexpress aber hier gibt es das case 1 kann
man easy also mitbestellen 16 euro kauft man sich den controller kauft man sich ein case dabei ist
man bei 16 16 euro doch 16 euro 16 euro nicht dollar 16 euro und das ding ist lieferbar von
einem warenhaus aus eu irgendwo aus der eu deswegen ist innerhalb von einer woche da vom
ali warum nicht weil da weiß jeder was gemeint ist ich meine okay manch einer könnte auch meinen
dass es eine abwertende bezeichnung gegen den dönerladen ist oder so aber ich würde auch sofort
aliexpress reinkommen hat er eigentlich gesehen dass aliexpress die fußball-em-sponsor was du
hast alipay alipay und aliexpress auf den bahn auf der bande stehen ganz oft und ich habe das
auf twitter gepostet da kamen gleich schon die die leute die gemeint haben so nach
dem die mich dann belehren mussten so aber max das ist doch nichts schlimmes weiß gar nicht wie
die auf die idee gekommen sind dass ich das gepostet habe dass es was schlimmes ist ich
bestelle selbst seit jahren bei aliexpress für mich seine besten shops überhaupt auch wenn es
china chinesen sind es mir doch egal da wo es billig ist und da wo man zeug kriegt was ich
haben will das können chinesen inder das können alle sein ist wie vollkommen wurscht ja wo die
herkommen hauptsache ich krieg mein zeug billig
da bin ich ganz da bin ich bin ich käuflich was das angeht was genau machst du damit ja also jetzt
kommen wir zu dem was ich was ich gebaut habe beziehungsweise wo wir im stream bisschen
experimentiert haben also mein ziel ist folgendes ich also ich habe ich will damit mehrere sachen
ausprobieren ich habe mir das nicht gekauft weil ich ein konkretes projekt im kopf habe
es vor allem wer dauern was wirklich
heute
ist irgendwas dauern bei mir nicht ja dann vielleicht bist du bei irgendeinem provider
mit carrier krept und irgendwelche leute aus seinem ip aus aus deiner aus seiner ip range
machen komische dinge vielleicht auch der download gerade weg ich weiß nicht ich kann jetzt nicht
ausprobieren downloaden kann man ohne account nicht mehr also ich habe zwar ein projekt im kopf
hierfür aber deswegen habe ich mir nicht
gekauft. Also ein Projekt, was ich
im Kopf habe, ist mit einem Analog-Digital-
Konverter Spannung von meiner
Tür-Gegensprechanlage messen. Aber das ist
nichts, wofür ich ein Display bräuchte und sonst was.
So.
Und was ich damit machen
will, sogar
nur 9 Euro übersehe ich was?
Das zeigt man ja.
Äh, ja.
AliExpress-Anzeige ist wie immer Schrott.
AliExpress-Anzeige ist
Pepega, wie immer.
Aber wenn du es für 9 Euro
mit Rabatt kriegst, bei AliExpress
gibt es meistens keinen Haken.
Klingt jetzt
Sellout-mäßig, aber wenn es
das ist, was du haben willst, was da steht,
kannst du kaufen. Und AliExpress
ist tatsächlich deutlich
unproblematischer bisher gewesen, Geld
zurückzubekommen als beispielsweise
mit PayPal-Käuferschutz. Und außerdem,
es sind fucking 9 Euro.
Selbst wenn die dir einfach nur
eine leere
Packung schicken, gibt es Schlimmeres.
Ich würde mir das bestellen
für 9 Euro.
Ich gehe davon aus, zu sehr hoher
Wahrscheinlichkeit, dass du genau das kriegst, was du bestellen
wolltest. Oder warte mal, ich gucke
mir mal das Produkt an, was du gepostet hast.
Ob da irgendwas... Nee, das... Ja, Moment!
Das ist das Falsche! Das ist das Falsche!
Deswegen ist es so günstig.
Das ist das Falsche! Das ist der C3.
Du willst S3 haben,
nicht C3.
Das ist der Falsche. C3 ist
der Nachfolger,
quasi der inoffizielle Nachfolger vom
ESP8266.
S3 willst du haben.
Du willst die Display
S3 haben.
Ja, die Anzeige bei AliExpress
ist immer so ein Ding, ne?
Pico C3
ESP S3.
Das ist T
E D S3?
Und das ist C3?
Das ist wieder hardcore
undurchsichtig bei AliExpress, man.
Dual MCU?
Das ist auch ein C3.
Das ist ein ESP32 S3.
Okay, okay, das ist das Richtige dann.
Und das ist keine Ahnung was.
Weil den normalen ESP32T
Display, das sieht ganz anders aus.
Viel kleineres Display.
Ja, das ist...
Das ist der... Hä?
Alter.
Keine Ahnung.
Keine Ahnung. Wo hab ich's denn?
Eben hatte ich's doch gefunden.
Ey, kein Bock mehr, AliExpress.
Muss man einfach genau gucken.
Ja, die
Beschreibung bei AliExpress,
ist sehr wild, teilweise.
Hol dir doch das... Moment, Moment, Moment.
ESP32 S3.
Ich hab doch hier gerade was gepostet.
Das ist das Richtige.
Das ist das Richtige hier.
Das brauchst du.
C-Display S3 ESP32.
14,38€.
Da kannst du noch das Case dabei holen.
Für nochmal einen Euro.
Und dann bist du
die Sache geritzt.
Das war's ohne Versandkosten.
Und direkt aus
Warenlager in Deutschland
lieferbar ist.
Ich kann ja auch den Link posten.
Warte mal. Ich poste dir den Link.
Da kannst du bestellen,
wenn du willst.
Ja. Beim Ali
kannst du bestellen. Die haben nur
Arduino-Demos. Die kleinen
PP-Gasärmen.
Warum haben die nur Arduino-Demos? Was soll denn das?
Schrott.
Ich hätte nämlich gerade mal die SDK
SDK
Config interessiert.
Gibt's nicht. Gibt's das nicht?
Klonen wir mal kurz das Repo.
Weil ich wollte mir mal was davon abgucken.
So. Und jetzt kann ich euch zeigen,
kann ich euch noch erzählen, was ich damit
vorhabe. Alter, was ist denn
da alles drinne?
Da wird ja halb China geklont gerade.
What the fuck?
Irgendwelche illegalen
Musik-Downloads auf GitHub, okay?
Oder was auch immer.
Ja, die China-Chinesen, denen ist das alles
egal.
Hm. Aha!
Hier ist ein Beispiel...
Nein, ist kein Beispiel
dafür. Na, dann können wir's...
Dann können wir das Ganze auch wieder
wegschmeißen.
Yes. Ach, Moment. Yes.
Gibt's eigentlich noch... Ja, Ausrufezeichen,
Commands oder so?
Wobei das meiste davon irgendwann mal eingerichtet
wurde und wahrscheinlich gar nicht mehr aktuell ist.
Was wir alles haben an Commands. Ey, neun!
Neun fucking Seiten!
Als Command.
Ich mach die Robbe.
Ja.
Guck mal, gibt's sogar Links zu meinen Battlefield-Videos.
Ja, also.
Kommen wir mal zur eigentlichen Geschichte.
Also, was ich damit mache, beziehungsweise
jetzt basteln will, ist folgendes.
Oder beziehungsweise, was wir schon
gebastelt haben. Ich kann's euch ja zeigen.
Mein Ziel ist folgendes.
Also, ihr seht ja, das Ding hat
ein Display. Das heißt, wir machen auch was mit dem
Display. Es gibt zwei Sachen,
die ich machen will. Und zwar,
als erstes
will ich auf dem Ding einen Webserver laufen
lassen, der
nicht einfach nur irgendwelche Sachen
ausliefert, sondern das Ganze über HTTPS
macht. Das haben wir schon gebaut.
Das funktioniert. Kann ich euch auch gleich
zeigen.
Dann ein Webserver, der
also, Webserver über HTTPS
im Endeffekt. Dann ein
Webserver, der eine Websocket-Verbindung
akzeptiert, darüber
Sachen austauschen kann. Funktioniert
auch schon halbwegs.
Und dann möchte ich ein Webinterface
bauen auf dem Ding, wo ich
das WiFi-Passwort
ändern kann. Das ist nix
außergewöhnliches. Das ist nix,
was man unbedingt bräuchte. Es gibt zig Projekte
auf GitHub, die man einfach track
und droppen kann. Und die bringen
solche Funktionalität mit. Aber ich will's mal
selber bauen. Und das nächste ist,
ich will das Display
verwenden. Und zwar zwei
Funktionen für das Display.
Als erstes muss ja,
also mal angenommen, man schaltet das Gerät
zum ersten Mal ein. Es hat auch keine WiFi-Credentials
drauf. Dann muss man ja
dann macht
das Gerät nen Hotspot auf. Das haben wir übrigens
auch noch nicht eingerichtet.
Dann macht das Gerät nen Hotspot auf. Und auf dem
Hotspot muss man sich einloggen.
Dafür, um das einfacher zu machen,
will ich auf dem Display ein QR-Code anzeigen.
Wenn man den QR-Code scannt,
kommt man mit dem Handy direkt in das
WiFi rein, was
der Microcontroller aufgemacht hat,
macht. Was? Man kommt
direkt in das WiFi rein, wenn man den
QR-Code scannt, was der Microcontroller aufgemacht
hat, indem man dann seine WiFi-Credentials
eintippen kann. Über HTTPS!
Das habe ich nämlich so
noch nirgendswo gesehen. Die machen das
alle unsicher über
HTTPS. Ich meine, das ist nicht wild. Das sind
30 Sekunden, da ist nicht klar ein anderer
im WLAN. Aber warum nicht über HTTPS?
Das Ding hat
mehr als genug Power,
um das über HTTPS zu machen. Auch
der alte ESP32 schon.
Und das nächste ist, dass man
dann auch noch einen QR-Code umgedreht
scannen kann für seine WiFi-Credentials
über das Webinterface.
Wie viel Hertz hat das Display? Ich habe keine Ahnung.
Ich weiß auch nicht, ob das hier irgendwo steht.
Vielleicht steht das bei
Specs? Also das hier ist der
Das hier ist
der Controller. Das
sagt jetzt nicht so wirklich aus.
Datasheet.
Vermutlich wegen Self-Sign-Zertifikate.
Boah, wie
jetzt? Was wegen Self-Sign-Zertifikate?
Oh, nice.
Also das sind quasi
China-Chinesen-PDFs.
Ist das wichtig?
Nö, ist nicht wichtig.
Man macht da eigentlich nichts so
geschwindigkeitsintensives drauf.
Okay, alles klar.
Seht ihr das auch so?
Zumindest hat man hier einen GPIO
beziehungsweise einen Pin-Out-Plan.
Das finde ich schon mal ganz gut.
Was ich hier sehe, weiß ich nicht.
Lichters-Display.
Okay.
Shitronics.
2014.
Also absolut keine Ahnung, was
die hier für
komische PDFs
drinnen hängen haben.
Keine Ahnung.
Das sind zumindest nicht die Display-Specs.
Ja, ganz bestimmt. Ach, guck mal.
Das finde ich cool.
Guck mal, es gibt das Gehäuse
zum Selbst-Ausdrucken.
Das finde ich cool.
Dass sie die 3D-Drucker-Files gleich mitliefern.
Das ist nice.
Die sollten so eine schöne Qualität sein,
wie die offizielle Shell.
Die hat ja keinerlei
Layer und sowas.
Ja, und das ist das, was wir tatsächlich letztes Mal
schon gebaut haben. Ich zeige euch das mal.
Zurzeit ist das relativ übersichtlich.
Was hier passiert, ist folgendes.
Ich zeige euch das mal schnell.
Leute, wir machen mal die Button.
Wobei, ich kann
sie mal lassen.
Wenn man den Button drückt,
passiert was. Aber das ist erstmal nicht so wichtig.
Er verbindet sich per WLAN.
Was ich glücklicherweise
versteckt habe.
Er verbindet sich per WLAN.
Er kackt ab, wenn er sich nicht per WLAN
verbinden kann. Dann startet er
den Webserver auf HTTPS und dann
gibt er auf Standard-Out nur noch
sinnloses Zeug aus, dass ich weiß, dass das funktioniert.
Die eigentliche Sache
passiert
hier bei Webserver.
Oh, das ist ein bisschen unübersichtlich.
Das können wir noch ein bisschen schöner machen.
Listen HTTPS, der startet,
der liest Zertifikate ein.
Die Zertifikate, das haben wir richtig
high IQ gemacht, das zeige ich euch gleich nochmal.
Der liest Zertifikate ein,
weil das Ganze geht ja über HTTPS, also
muss es
auch Zertifikate haben.
Der liest die Zertifikate ein.
Dann startet er den Webserver auf
Port 443, Default Port.
Was die Default-Config ist, sieht man hier.
Die muss er aber nicht großartig interessieren, außer dass es
Port 443 ist.
Startet den Webserver. Das muss natürlich
passieren, logischerweise,
nachdem man sich mit WiFi verbunden hat.
Also, Webserver starten,
bevor man sich mit WiFi verbunden hat,
wird wahrscheinlich auch crashen.
Startet den Webserver, dann
registriert er zwei Händler.
Einmal einen für eine
Index-HTML-Seite.
Ihr seht, der liefert im Prinzip immer nur
eine Index-HTML-Seite
aus, wenn die URL,
die aufgerufen wird, oder der Part, der aufgerufen
wird, Slash oder Slash Index-HTML ist.
Besser gesagt, wenn der
Part nicht Slash oder nicht
Index-HTML ist, dann gibt es
in 404 not found und
ansonsten liefert er die Index-HTML
aus, als Gzip-encodete
Content.
Für Websocket
wird das ein ganz bisschen komplizierter.
Websocket ist hier registriert, Endpunkt
Slash WS und
da macht der Websocket Magic.
Das habe ich mir aus dem Beispiel
abgeguckt von Espressif
und habe es ein bisschen umgebaut.
Im Endeffekt guckt er,
ob das eine Websocket-Verbindung ist.
Wenn nicht, upgradet er die zu einer
Websocket-Verbindung und dann liest er die Daten
ein, die über Websocket geschickt werden.
Ja, und wenn in Websocket Nachricht
reinkommt, dann
broadcastet er Zeug an
alle connecteten Clients. Das sieht dann so aus,
wenn ich mich auf die,
wenn ich mich verbinde, das ist die IP
vom, hoffe ich mal zumindest, ich drücke
mal kurz Reset, dann sehe ich die IP, wenn ich
eingeloggt, wenn ich
ja, 148,
wenn ich mich hier drauf connecte
an den Websocket-Endpunkt, dann
sieht man hier Session,
Handshake, okay,
er hat zumindest erkannt, dass ich
Blub als Websocket-Message
geschickt habe. Achso, ich muss den Knopf drücken,
genau, so, und wenn ich den
Knopf drücke, hier am Gerät,
dann
schickt er mir so ein bisschen Sachen
über Websocket, schickt
er mir so ein minimal JSON, guck jedes Mal, wenn ich
den Knopf drücke, ja, Achtung hier,
klick, klick,
klick, jedes Mal,
wenn ich den Knopf drücke, schickt er mir so ein minimal
JSON über Websockets zurück.
Das war einfach nur so Proof of Concept,
ob es funktioniert.
Was man in Terminal oben macht,
das Ding lockt zur Zeit über Standard
Out einfach die Uptime
alle 100 Millisekunden,
dass ich sehe, dass er noch da ist,
sonst nix.
Der lockt seine Uptime,
ja, und
deswegen habe ich diesen Button
Händler hier unten drinnen, weil ich das
ausprobieren wollte, wie das mit dem Button funktioniert.
Also jedes Mal, wenn ich den Button drücke, dann
klick, klick,
und nur mal so zum
Beweis, dass das
tatsächlich eine Websocket
Verbindung ist, hier, wenn ich das nochmal
aufbaue, hier so eine Websocket
Broadcast Verbindung, wenn ich jetzt mal
vier Websocket
Verbindungen aufbaue dahin, was auch
ohne Probleme funktioniert, und jetzt den
Knopf drücke, dann klick,
dann seht ihr, dann kommt auf allen
vier connecteten Clients
kommt dieses JSON
raus. Das heißt, das ist so
Websocket Broadcast im Endeffekt.
Was sehr nice ist, dass das funktioniert.
So, und
da bauen wir jetzt weiter dran.
Ich habe im Vorfeld schon ein bisschen
geguckt, ein bisschen Gedanken gemacht, was wir
bauen können, aber so sieht's aus.
Ich werde
dieses Button Zeug hier
nochmal komplett weghauen.
Wir machen mal, wir sind mal,
ich bin mal so frei.
Machen mal einen
Comet Stream
Start,
dass ich im Zweifelsfall, falls ich irgendwas
verkacke. Nicht, dass ich das
gleiche Problem habe, wie das letzte Mal, wo ich nicht
mehr weiß, was ich jetzt eigentlich kaputt gemacht
habe. So, und
das Ziel für heute wird sein,
hoffen wir mal, dass
das funktioniert, ein Web
Interface auf das Ding zu kriegen,
über das ich
WiFi Credentials setzen kann,
beziehungsweise umschalten kann, ob ich,
ja, also mir schwebt vor,
dass man zwei WiFi Credentials
setzen kann. Quasi
WiFi Credentials 1, WiFi Credentials
2, und der
probiert dann beides aus. Das ist so ein
Feature, was mir bei vielen
Microcontroller, beziehungsweise bei vielen
IoT Geräten fehlt. Man kann
ein WiFi Passwort vergeben und das
war's. Was ziemlich suckt, wenn man
nämlich mal sein WiFi wechseln will, muss
man quasi jedes IoT Gerät
neu pairen, in der
Hoffnung es funktioniert, aber nicht muss man es wieder
neu irgendwie standardmäßig einrichten. Es wäre
doch viel nicer, wenn man sich einfach
connecten könnte mit dem alten WiFi,
umstellen könnte
und dann
ins neue bootet oder wieder
zurück ins alte geht, falls man sich vertippt hat.
Also so ein Backup WiFi Credentials,
das sehe ich selten.
Tasmota kann das, Tasmota kann das, ja.
Sowas will ich auch bauen, dass man WiFi Credentials
1 vergeben kann, WiFi Credentials 2,
eventuell sogar auswählen
kann, was er
zuerst probieren soll und
dass er sich dann halt zum
Erstbesten connectet, wo er
dann reinkommt.
Der probiert dann WiFi Credentials 2 aus,
wenn es nicht geht, macht er Fallback auf 1 wieder.
Sowas in der Richtung.
Schwebt mir da vor.
Und dafür müssen wir jetzt noch ein bisschen was am
Webserver rumbauen und
wir müssen ein Webinterface
bauen. Das Webinterface bauen wir in
Svelte, das haben wir hier auch schon irgendwie
rumliegen, irgendwo hier, WebApp.
Liegt das ganze schon rum. Mal Visual Studio
Code mal auf, auf dem vierten Desktop.
Das ist, zur Zeit passiert da gar nichts.
Außer, dass eine Websocket-Verbindung
aufgebaut wird zum testen.
Die aber auch schon funktioniert. Ich zeige euch
das mal. Machen wir hier unten
mal WebApp
npm run
dev. Machen wir mal Chrome
auf. Ah ja, da kommt ja
auch gerade gar keine Message rein.
Ich muss einen Knopf drücken, dass eine Message reinkommt.
Zack, guck. Funktioniert auch.
Also jedes Mal, wenn ich
den Knopf drücke, wenn ich den Button drücke,
dann taucht das hier auch im Browser auf.
Also meine Web-Anwendung ist noch sehr
minimalistisch, ja. Aber es ist eine
vollständige Web-Anwendung. Und wer sich
jetzt fragt, wie kriege ich denn die
Web-Anwendung, ja, ich meine, ihr seht ja, das ist
eine Svelte-Web-Anwendung mit 5000
Files, so wie halt mittlerweile Web-Anwendungen aussehen.
Unter 800 MB
Notenmodules tut sich da ja nichts mehr.
Wie kriegen wir die denn in den
Microcontroller rein? Das ist
richtig Trick 17 zur Zeit.
Und zwar, es gibt hier eine
webapp.h
Und was ist
da drinne? Ganz viel Binary
Shit. Nämlich
einmal mein Zertifikat,
self-signed Zertifikat,
mein self-signed Server,
mein self-signed Private Key, mein self-signed
Zertifikat und
mein gegezipte Index HTML,
die meine komplette Web-Anwendung
enthält.
Als
C-Arrays. Und
warum habe ich das so gemacht? Und warum habe
ich das nicht auf das Filesystem gepackt, was wir
theoretisch haben auf der Kiste?
Wir haben hier nämlich
ein, was ist denn das?
Keine Ahnung, 3 MB
großes Filesystem drauf.
Da könnte man die Web-Anwendung draufschieben,
aber
das ist aus mehreren Gründen doof.
Der erste Grund ist,
falls man dann wirklich OTA-Updates
machen möchte, also
die Firmware updaten über WiFi,
dann ist es sehr doof, wenn ich die
Firmware updaten muss und das Web-Interface
irgendwie getrennt updaten muss.
Das heißt, wenn die Firmware das Web-Interface mitbringt,
ist besser. Und das zweite
ist, Webseiten ausliefern
vom Microcontroller aus diesem
Flash-Filesystem ist lahm,
weil
der Verbindungsaufbau vom Browser
auf die Kiste über HTTPS
so ungefähr 1,5
bis 2
Sekunden dauert. Und das
für jeden neuen Request am Anfang.
Das heißt,
da brauchst du 20, 30 Sekunden,
bis die Webseite geladen ist, weil die
aus ganz vielen kleinen Dateien am Ende besteht.
Das heißt, so ist besser.
Ich baue die Webseite zu einem
Single HTML
Index HTML,
gezippe das Ganze
und dann
generiere ich daraus
C-Style
Arrays. Und das liefert dann
meinen Web-Server aus. Wie das
generieren funktioniert, kann ich euch auch noch kurz
zeigen. Das ist
mit einem sehr
teilweise ekligen Bash-Script.
Das generiert sich mit
OpenSSL neue Keys.
Setzt hier den Namen im Zertifikator
drauf. Dann macht es
Magic.
XXD wandelt die Zertifikate
um in C-Style Arrays.
Mit Seed wird irgendwelches Zeug da drinnen gelöscht.
Ich glaube die letzte Zeile. Wird alles
an webapp.h angehängt.
Dann werden die Zertifikate gelöscht. Dann
wird die Svelte Web-Anwendung gebaut.
Dann wird die Index HTML gezippt.
Mit XXD in C-Arrays
umgewandelt. Angehängt. Und am Ende
wird noch unsigned durch
const ersetzt. Warum bin ich mir nicht mehr sicher.
Achso, ja. Damit es
ordentlich im Flash landet alles.
So sieht es aus. Und das ist das, wo wir
gerade sind. Wir haben einen Microcontroller,
der läuft mit einem
Web-Server drauf, der Websockets kann.
Das war's. Und jedes
Mal, wenn ich den Knopf drücke,
kriegt er per Websockets einen minimalen
JSON los. Da sind wir stehen geblieben.
Heute bauen wir ein Webinterface dafür,
über das ich WiFi-Credentials setzen kann.
Soweit zumindest der Plan. Mal gucken,
wie gut das funktioniert. Ich muss mir gleich
noch was Neues zu trinken holen.
Okay.
Wo fangen wir denn jetzt am besten an?
Der Web-Server ist sehr übersichtlich. Da müssen
wir glaube ich noch nicht allzu viel machen.
Ich würde sagen,
das Websocket Zeug funktioniert auch.
Ja. Ich weiß, wo wir
anfangen. Und zwar,
von der Logik her, muss das ja so sein,
wie machen wir das am besten?
Also ich würde sagen,
wenn man sich verbindet, wenn sich das, also
sobald eine Websocket-Verbindung
aufgebaut wird, bekommt er quasi
als Begrüßungs-Message
einmal
die aktuellen Settings geschickt,
dass wir die Webinterface
verwenden können.
Danach nur noch alle 5 Sekunden oder so.
Weil wir müssen ja den Client nicht
komplett vollspammen. Hat dein
Access Point eine API?
Ja.
Und
noch ein bisschen
mehr inoffiziell.
Also ich habe sogar eine Browser-Erweiterung
programmiert, die mir Zusatzfunktionen
in meinem Access Point im Webinterface
hinzufügt. Die offizielle
API ist sehr rudimentär. Damit kann man glaube ich
bloß irgendeine CSV-Datei für
WLAN-User hochladen.
Mit Passwort und
Username drin.
Wie kommst du da drauf? Aber an sich
kannst du damit relativ viel machen,
solange es keine offizielle API sein soll,
die
dokumentiert ist mit Swagger oder
so. Man kann alles,
was das Webinterface macht, auch so ansteuern.
Wie kommst du da drauf?
So, also wie fangen wir jetzt an?
Äh...
Mein Access Point?
Ich kann jetzt den...
das nicht mit
Access Point in Verbindung bringen.
So.
Ne, ich will Wifi-Credentials
setzen. Nicht für meinen
Access Point, sondern
der Microcontroller
hier, der soll den
Access Point aufmachen. Darauf kann ich mich dann
verbinden mit dem Handy und darüber
Wifi-Credentials setzen. Und wenn er dann im Netzwerk
ist, was er jetzt ja schon ist, also was man
jetzt auch erstmal so lassen, dass
man sich dann über ein Webinterface auf
die Kiste verbinden kann und neue Wifi-Credentials
setzen kann.
Also für den kleinen, nicht für den Access Point.
So, also ich würde
sagen, wenn sich der Access...
Wenn sich der
Client zum ersten Mal
verbindet über Websocket,
dann soll man so eine
Hello-Message bekommen. So eine
Hello-Message, in der
alle Infos drin sind,
die man anzeigen möchte im Webinterface
und wo alle
Infos drin sind, die man
braucht um Settings
darzustellen. Also,
wie sendet man eine Welcome-Message
über Websocket?
Quasi on connect, sowas in der Richtung.
Das heißt, als erstes
wir machen mal folgendes.
Wir schmeißen diesen Krempel hier mit dem
Button, diese Sache mit dem
Button, die schmeißen wir erstmal wieder raus.
Im Zweifelsfall habe ich sie in meiner Git-Historie.
So. Und jetzt
schicken wir mal testweise über den
Webserver mal
irgendein Mist
hin.
So. Websocket
Broadcast Message. So.
Hier. Irgendein JSON-Objekt.
Keckel.
1.
Das ist das beste JSON, das einzige
JSON, was man jemals brauchen wird hier.
So. Dann flashen wir das Ganze.
So. Jetzt sollte ich
theoretisch alle 100... Wir machen mal nicht
100 Millisekunden. Komm, wir machen mal...
Wir machen mal alle 500 Millisekunden.
Wir müssen es ja nicht
übertreiben. Alle 100 Millisekunden muss da
nichts geschickt werden.
Okay, der muss nochmal komplett neu kompilieren, weil
whatever.
Das macht es manchmal. Normalerweise...
Aber 100% CPU-Last.
Schauen wir mal, ob das jetzt funktioniert.
Also theoretisch sollte
ich mich jetzt verbinden können.
Und ich sollte voll gespammt werden
mit Keckel 1.
So direkt von Anfang an.
Alter, warum flasht der so langsam gerade?
Gib Gas. Gib alles hier.
Ja. Okay.
Ja. Keckel 1. Funktioniert.
So. Im Browser kriege ich da auch was.
Wunderbar. Keckel 1.
Das wollte ich sehen.
Also.
Ich will eine Message
schicken.
An den Browser.
Beziehungsweise an den Websocket-Client.
Einmalig.
Sobald er sich
zum ersten Mal verbindet.
Wo mache ich das jetzt
am besten?
Also. Websocket-Händler.
Hier irgendwo.
Ne. Haben wir noch Inline?
Ach, das habe ich hier noch Inline drin gestehen.
Ich kann... Ich würde sagen, das machen wir.
Das machen wir mal kurz hier raus.
Das wird sehr unübersichtlich hier mit diesem langen Zeug.
Da kommt jetzt ja noch ein bisschen mehr gleich rein.
Jaja. Das ziehen wir mal kurz hier.
Der Übersichtsheit halber
ziehen wir das hier mal raus.
Benennen wir das Ding hier
auch mal um. Rename Symbol.
Nennen wir das mal
Send
Async
Websocket.
Nicht Händler. Ist ja Blödsinn.
So. Und jetzt machen wir hier noch
einen static
äh
ja
Händler Websocket.
So. Und da kommt
jetzt dieser Kerbel rein.
Weil ansonsten
blick ich schnell mal durch
in spätestens einer Viertelstunde
wo ich irgendwas hingeschrieben habe.
So. Und dann können wir hier
eigentlich sagen, das soll
Händler Websocket sein.
Funktioniert nicht, weil... Ah! Moment!
Ähm. Es darf nicht Void sein.
Es muss...
Ah! Auto kann man bestimmt auch sagen.
C++ stells.
Ja.
Okay. Das Funst, das hier unten
könnte... Das hier unten ziehen wir auch
raus. Das wird sonst zu unübersichtlich.
Warte mal. Ich copy-paste mir das noch mal.
Wir haben hier Händler Websocket.
Und haben jetzt hier noch Händler, ja einfach
keine Ahnung, restliches http.
So.
Und da kommt der Kerbel rein.
Wunderbar.
Ein bisschen übersichtlicher.
Händler http.
Äh. Wo ist es hin?
Okay. Das müssen wir nicht ausprobieren. Das ist einfach nur
Extracted. Das sollte hoffentlich...
Famous Last Words. Das sollte hoffentlich immer noch so tun.
Also.
Alles klar.
Ich will eine Message schicken
an meinen Client, wenn der sich neu verbindet.
Das heißt, wir brauchen schon mal hier zwei Sachen.
Nämlich...
Ich brauche ein Websocket-Example.
Websocket...
Webscript.
Bin da zu noobig für.
Writing Websocket Client.
Websocket. Websocket. Tutorial.
Websocket.
Ja, das sieht doch gut aus hier.
OnError. OnClose. OnMessage. OnOpen.
Perfekt.
Das will ich haben.
Dann ist hier einfach Socket.
Alter, was für eine super Oldschool
Tutorial-Sache habe ich denn da kopiert
mit Alerts drinne. Aber es funktioniert
zumindest schon mal.
Aber okay. Alerts.
Wer benutzt denn Alerts im Jahr
2024? Mann, von wann ist denn das
Tutorial?
2022. Alerts.
Wer macht denn sowas freiwillig?
Log.
So. Du benutzt
Alerts? Was? Alerts ist...
Hyper-Cringe.
Und so log.
Verwendet irgendjemand von euch noch Alerts?
Außer Bu...
Bugelkuch.
OnError. OnError juckt mich nicht.
Reload.
Okay. Okay. Ja, ja.
Geh weg. Okay.
Jetzt sehen wir es hier unten. Das ist doch deutlich besser als Alerts.
Connection established.
Data received from Server.
Okay. Data received from Server. Schön und gut.
Aber ich möchte ja Data receiving
onConnect. OnConnection
open. Da möchte ich
da... Data
receiving irgendwie.
By the way, warum nennen sie das nur E
und das andere ein Event?
Äh...
Code? Kann man onOpen nix
receiven oder wie?
Ah, man receivt nix onOpen. Man kriegt das dann
auch ganz normal in onMessage rein.
Aber ich...
Okay, das muss ich nicht auf dem Client machen.
Das muss ich auf Serverseite machen.
Wie kriege ich den hier jetzt dazu,
dass der an meinen Client eine Message
schickt, sobald er sich
connectet? Wahrscheinlich
hier drinne, oder? Sowas wie hier.
Oh, jetzt muss ich...
Wahrscheinlich hier. Wahrscheinlich muss ich hier
und... Message.
Ja. Okay.
Das heißt, ich brauch ein...
Jetzt kommt wieder C++-Shit, ne?
Ich muss diese
Methode static machen,
damit der Callback sie frisst.
Ich brauch aber Zugriff auf
Sachen aus
meiner Klasse. Das funktioniert jetzt wieder nicht.
Das heißt, ich muss jetzt wieder
dieses...
Durch die Brust ins Auge machen.
Was das einzige ist, was
geht.
Nämlich das hier übergeben.
Mein Pointer auf mich selbst.
Und dann...
Kann ich hier sagen...
This is reserviert.
Das darf man, glaube ich, nicht benutzen.
Muss ich self nennen.
Das ist so bescheuert.
Request.
User Context. Irgendwie so muss das funktionieren.
Nur mal so zur Erklärung, wie dämlich
das Ganze gemacht ist, ne?
Äh, okay. Brauch ein bisschen.
Das ist richtig blöd. Also.
Man muss...
Das hier wird aufgerufen.
Quasi für jeden Web-Request.
Im Endeffekt, ja? Oder das hier.
Jeden Web-Request.
Das ist allerdings ganz oldschool C.
Was der hier haben will als
als Parameter ist, ja quasi
eine URL, für das das gilt.
Welche HTTP-Methode und
anderes Zeug. Das ist eine Websocket-Verbindung.
Und hier kann man ein Callback setzen.
Quasi. Der aufgerufen wird.
Eine Funktion, die aufgerufen wird.
Jedes Mal, wenn es einen neuen
Request auf diesem Endpunkt gibt.
So. Und mein
Händler dafür quasi ist das hier.
Das Ding ist nur, der muss static
sein. Wenn der nicht static
ist,
dann sagt er mir an der Stelle hier,
dass er den Händler nicht verwenden kann.
Weil der ja hier explizit
eine Funktion sucht
mit dieser Signatur.
Und das haben die in C++ super weird
gemacht. Ich könnte,
ich kann es nicht so
nennen. Also sobald
das ein Pointer ist, im Endeffekt.
Achso, ja klar, weil es immer noch static
ist. Sobald das quasi
nur eine Funktion ist, die es in meiner Klasse
gibt, dann ist das nicht kompatibel zu
alten C-Callbacks. Ganz
wirr. Und das kann man nur
umgehen, indem
man quasi die Referenz
hier auf die eigene
Klasseninstanz hier reinschreibt.
Und jeder
Aufruf hierhin, übergibt
dann diese Referenz, die ich vorher selbst gesetzt
habe, hier als User-Kontext wieder
rein. Das heißt, im Endeffekt ist das
an der Stelle
das gleiche wie this
überall anders. Just
C++-Things.
Ich weiß nicht, warum man es so abartig
gemacht hat, warum
das nicht
automatisch kompatibel ist zu
C-Style Callbacks.
Ja,
gerade C++, was sich ja rühmt damit,
besonders kompatibel zu C zu sein,
was es ja übrigens auch nicht
hundertprozentig ist. Also es gibt Sachen,
die kannst du in C machen, aber nicht in C++.
Und es gibt natürlich sehr viel mehr Sachen,
die kannst du in C++ machen, die kannst du natürlich nicht
in C machen. Aber es gibt auch Sachen,
die kannst du in C machen und nicht in C++.
Zum Beispiel
diese komischen Struct Initializer
Dinger, die funktionieren nur in C
und nicht in C++. Und bestimmt noch das eine oder
andere. Ich glaube, irgendeine
komische moderne Array-Syntax geht glaube
ich auch nicht.
Und es gibt ein paar Sachen,
die gehen in C, aber die gehen nicht in
C++. So.
Und jetzt kann ich
sagen, self send
genau, eine Message über Websocket
Ne, das ist falsch.
Ich will Broadcast
über Websocket haben.
Eine Message. So, und dann
nennen wir einfach hier Message welcome.
Wir machen da
ein JSON-Objekt rein, das ist wenigstens der
Ich hab irgendwie
Wait a minute, ich hab falsch escaped.
Oder?
Jaja, ich hatte falsch escaped, deswegen.
So, ich hoffe, das funktioniert.
Also, wenn ich das richtig checke,
dann sollte der jetzt,
sobald ich eine Verbindung
aufgebaut habe,
einmal mit blub welcome antworten.
Bin ich mal gespannt,
ob das funktioniert.
Oder muss ich das schon hier oben
drin machen? Wir könnten allgemein
mal ein bisschen mehr locken, oder?
Wir könnten mal ein bisschen mehr locken,
damit man so halbwegs weiß,
was da überhaupt abgeht.
Also, machen wir mal hier
request-method get
logger.loginfo
upgrade
http to websocket
Da weiß man doch schon ein bisschen
besser Bescheid.
So, hat er geflasht? Jetzt bin ich mal gespannt.
Sobald ich mich verbinde, sollte ich jetzt
Welp, ne.
Wait.
Erst wenn ich selbst was schicke,
kriege ich die welcome-Message?
Das suckt. Chatgear.
Vielleicht muss ich das
Vielleicht muss ich das doch hier drinnen
schicken. Quasi direkt nach dem
Upgrade der Connection.
Mh. Fangen wir mal. Flash.
Bam. Okay.
Mh.
So.
Ich will noch mal überlegen, wie machen wir
das jetzt gescheit. Mir gefällt das
hier irgendwie nicht so
ganz, weil man mal kommt,
kommt hier überhaupt keine Fehlermeldung, wenn
irgendwas kaputt ist. Und es wird wahrscheinlich öfters mal was kaputt
sein. Lass mal gucken, ob's jetzt funzt.
Nice. Habt ihr das gesehen? Zack.
Direkt nach dem Verbinden kriege ich
einmalig die welcome-Message.
So muss das sein. Und da kann ich jetzt
jede Menge
initiale Config übergeben.
Ja, guck hier.
Data received. Einmalig. Und danach kriegt er nur diese
Standard-Message. So, das heißt
in dieser welcome-Message
Ich nenn's mal welcome-Message. Also in dieser
in dieser einen Websocket
Message, die der Client
initial kriegt. Beim
Connecten kann ich jetzt so Informationen übergeben
wie beispielsweise
WiFi-Settings und sonstige Sachen, die ich im
Webinterface anzeigen will. Da spare ich mir
einen extra Get-Request und zig Händler.
Mach das einfach alles
über Websocket.
So. Aber das müssen wir mal irgendwie bisschen
schöner machen. Dass ich auch
sehe, wenn was kaputt geht.
Also, das ist soweit.
Ergibt das glaube ich
Sinn? Check ich irgendwo
den Error? Ne, ich checke nie den Error.
Das sollte ich vielleicht auch mal machen.
If das
wenn das nicht okay ist
Nein.
Geiles Auto complete.
Wenn das nicht okay ist
dann return
wir denn das da und sagen
Logger. Log
Warning würde ich mal sagen, weil
war halt
nix komplett kaputt, aber
so nicht gedacht.
Failed to
read. Ne, komm
Receive. Da steht ja auch hier Receive
drin. Failed to
Receive.
Was mache ich an der Stelle?
Ich gucke wie lang die
Websocket-Message ist. Failed to
Receive Websocket
Frame Length. Okay, so.
So können wir das machen.
Kann man? Chat, ich weiß
vielleicht ist das nicht hübsch. Moin
Sie also. Vielleicht ist das nicht schön,
aber kann man in C++ so
was machen? Ist das erlaubt?
Dass man sowas hier sagt?
Geht das?
Moment, das macht keine Syntax-Fehler.
Aber
aber was passiert denn jetzt?
Ähm
Ja, 77 ist, weil
es jetzt nicht mehr definiert ist hier. Das passt schon.
Das ist es nicht.
Okay, was macht der jetzt?
Der führt das hier aus, weist
das hier zu und dann
danach checkt das if, ob
das quasi
0 oder nicht 0 ist oder wie.
Ja,
das ist jetzt vielleicht
nicht unbedingt
die leserlichste
Art und Weise, aber ich habe
eine Idee.
Result. Wir können
das Ganze in ein ESP
Error wrappen.
Dann ist das nämlich ein bisschen
hübscher. Geht das nicht?
Ach so.
Okay.
Das heißt, dieser
Typ da drinnen muss
quasi convertible
zu einem Bool sein,
dass man das verwenden kann in einem
if. Verstehe.
Du meinst, es sieht besser
professioneller aus, wenn man es sieht?
Dann hast du schon nicht unrecht.
Dann schauen wir doch mal, wie man das
macht.
Das ist eine Klasse, die ich mir mal irgendwie
zum helfen gebaut habe.
Deswegen
ist es auch in helper.h.
Wie kann man eine Klasse in
C++ implizit zu Bool
convertieren lassen?
C++ implicit
convert to Bool.
Implicit conversions.
Äh.
What? Gibt es da auch irgendein
Beispiel, was normal...
A love letter. Ich bin mir nicht
sicher, ob ich da richtig bin.
Implicit... Bool in implicit
conversion. Okay, ich brauche ein Beispiel.
Wo ist ein Beispiel dafür?
Wie geht denn das? Okay, wir
gucken uns die offizielle Hilfe an.
Ich kopiere mir jetzt einfach mal das hier.
Operator klingt gut, ja.
Machen wir jetzt irgendwie mal, keine Ahnung, hier hin.
Copilot.
Ich habe kein Copilot.
Ich habe auch kein Login gerade am Start
für ChatGPT.
Und anstelle von T schreiben wir einfach Bool.
Und dann geht's,
oder wie? Okay, und
wir wollen checken, ob
ist okay.
Nee, Moment.
Wenn wir den Error convertieren, wollen wir
sehen, ob es ein Error ist. Wenn es ein Error ist, dann
ist es true.
Das geht schon mal nicht.
Was? To non const?
Äh...
Muss ich irgendwie const
noch hinschreiben oder so? Irgendwie...
Const? Random?
Nee. Const?
Ah, shit, Alter.
Mann, C++.
Wie könnte das aussehen?
Oder...
Was ist denn eigentlich dieses hässliche
Ding hier, dieses geklammere da? Kann man
das nicht einfach wegschmeißen? Oder kann man hier vielleicht das
und wegmachen? Ach ja!
Obviously! Jetzt geht's! Natürlich!
Logisch, oder?
Ist ganz klar, dass das
und vor den
Klammern dafür sorgt, dass es nicht geht.
Natürlich.
Na klar.
Also offensichtlicher Selbsterklären
kann das eigentlich nicht mehr sein.
Okay, und jetzt funzt das hier jetzt?
Jetzt funktioniert das auch!
Guck mal hier!
Das ist jetzt gar nicht mal so
schlecht, oder?
Jetzt kann ich sagen,
zuweisen result
zu nem Error.
Der Error ist true,
wenn's halt nen Fehler ist.
Das convertet zu true, wenn's nen Fehler ist.
Das ist gar nicht so schlecht an der Stelle
mit diesem implicit
operator overload Gedöns.
Vielleicht mal ein bisschen was Positives,
was man C++ ab...
gewinnen kann.
Eigentlich ganz gut, oder?
So, dann machen wir jetzt
nicht so'n doofes if, sondern wir machen das,
was einem auch die ganzen
Programmierinfluencer auf YouTube erzählen
immer. Nämlich
wir early returnen, wenn das kleiner
gleich null ist. Weil, ich mein, wir machen
eh nix. Guckt mal. Wir machen
wenn die Länge größer null ist, machen
wir was und dann geben wir's aus, wenn die Länge
das ist total hängengeblieben. Wir gucken
wenn die
also wenn die Daten, die wir empfangen,
wenn das kleiner gleich null ist,
mein kleiner null kann's eigentlich nicht sein, aber
vielleicht durch irgendwelche Fehler. Wenn das kleiner gleich
null ist, dann ist das auf jeden Fall
nix, wo wir weitermachen wollen.
Und sagen jetzt mal an der Stelle
ähm
ne, eigentlich
wollen wir nix sehen.
Gods empty
Websocket frame. Und dann
return
ESP, okay. Ich mein, das ist ja kein
Fehler, ne. Ist ja in Ordnung. Man darf
auch, man darf, es ist erlaubt
leere Sachen zu schicken.
Sooo
und dann können wir uns
das an der Stelle ja sparen
mit diesem if, weil das geht nur
dahin, wenn's funktioniert.
So,
jetzt muss ich mal kurz in mich gehen.
Buffer. Wo kommen Buffer her?
Da. Buffer brauchen wir nur
hier, also können wir das auch gleich hier unten
anlegen.
Und wir müssen Buffern
eigentlich resizen. Wir können Buffer
direkt die richtige Größe geben.
Weil wir wissen an der Stelle ja
die Größe.
Ja, den hatte ich schon ein paar Stunden hinter mir das letzte Mal,
als ich das programmiert hab. Das ist nicht so
nicht so schön und klar,
was ich da gebaut hab. So.
Dann, also das
ist quasi, wo wir die Websocket Daten
einlesen, die wir geschickt kriegen
vom Browser.
So, Websocket Länge
plus 1. Es muss plus 1 sein, dass
0 Termin
Terminator am Ende, String dranpasst.
So.
Dann haben wir Buff, dann müssen
wir die Websocket Payload
da draufsetzen. Länge
ok. Dann können wir
im Prinzip hier jetzt nochmal das gleiche
machen. Wir packen das hier
wieder da rein. So.
Aber
rappen das in einen
ESP Error.
Im Prinzip das gleiche
wie da oben.
Und wir nennen's auch
Result, dass das einheitlich ist.
Wir return wieder den
Fehlercode.
Und wenn das fehlen
schlägt, dann sagen wir Logger
Warning.
Ich kopier mir das hier mal.
Weil dann haben wir
einen Fehler
Content zu
Receiven.
Ich muss das so machen, dass ich am Ende jetzt auch weiß,
wenn jetzt was kaputt geht, woran's denn jetzt
wirklich auch kaputt gegangen ist.
So.
Und das
war's erstmal.
Und jetzt muss ich checken, ob der Krempel noch
funktioniert, den ich gebaut hab.
Optimalerweise steigst du
in einem halben Jahr. Dass es so und so ist, immer so.
Egal
wie ordentlich ich das mache.
Ja. Ich steig
da eh nicht. Ok. Es hat schon mal
kompiliert. Das heißt noch lange nix. Aber es ist
nix grob kaputt. Und?
Ok.
Es funzt noch.
Und wir kriegen jetzt tatsächlich auch ganz sinnvolle
Fehlermeldung. Äh, was heißt Fehlermeldung?
Statusmeldung, was hier Sache ist.
Ja. Ok.
Es funktioniert noch alles. Ich bin zufrieden.
Gut.
Natürlich ist Bloop Welcome
vielleicht nicht so ne tolle Message,
die man anzeigt.
Was brauchen wir denn im Webinterface?
Im Webinterface hätte
ich gerne so ein paar Infos
über
den Controller
und Wifi
Wifi
Settings.
Wobei ich nicht meine Passwörter ins
ins Webinterface schicken möchte.
Sondern einfach nur
vielleicht, dass die
gesetzt sind oder nicht.
Wir schicken, ganz ehrlich, das Webinterface
ist noch so
leer. Das macht noch gar nix.
Wir schicken einfach mal ein bisschen Fake Daten
zurück und gucken dann, dass wir im Webinterface
ein bisschen was bauen können.
Also, Handle Websocket.
So.
Ich würde sagen, an der Stelle
schicken wir nicht mehr Bloop Welcome,
sondern mal irgendwas
halbwegs sinnvolles.
Und zwar so...
Hatte ich nicht letztens irgendwie sowas
zusammengebaut?
Jason-mäßig mit Mac-Adresse
und IP-Adresse?
Achso, das ist das, was ich gerade vorhin gelöscht hab, oder?
Das ist das, was ich vorhin aus dem Button
rausgeschmissen hab.
Wie dem auch sei,
wir schicken einfach mal was halbwegs sinnvolles
zurück. Gut.
Dann
schicken wir hier nicht
irgendwelche random Messages zurück, sondern
Machen wir doch mal sowas hier.
Void
Websocket
Broadcast
Status
Ja, da schicken wir dann so Zeug,
was das Webinterface zum Arbeiten braucht, zurück.
So. Und da müssen wir
uns halt ein bisschen was generieren.
Und im Endeffekt rufen wir dann hier unten
nur noch das da auf.
Gut, ähm, was
generieren wir da? Da darf man jetzt übrigens
wieder Twist sagen, nur um es ein bisschen komplizierter zu machen.
Chatge,
wir müssen jetzt ein bisschen
Jason-Zeug zusammenbasteln.
Wollen wir es uns einfach
oder schwer machen? Ich würde sagen, wir machen
es uns einfach. Wir installieren uns einfach
Arduino-Jason als
Library dazu.
Und gut ist, weil
man kann zwar hier mit
diesem
C-Jason-Zeug sich
den ganzen Krempel auch zusammenbauen,
aber schön ist, glaube ich,
was anderes. Komm, wir machen es uns
einfach. Gibt es das?
Espressif, gibt es das als
fertiges Paket? Arduino-Jason?
Ich glaube schon. Ich glaube sogar, das habe ich mal
da schon installiert.
Ja.
Arduino-Jason als
Abhängigkeit. Beste.
Ach ja. Und wir müssen
unsere Svelte-Webanwendung
auch noch upgraden auf Svelte 5.
Wenn schon. Wir verwenden
nur Bleeding Edge
Technologie.
Arduino-Jason.
Ok. Nochmal
bilden.
Ich muss ja die ganzen Krempel nochmal neu
kompilieren. Hoffentlich
kompilierter. Ok.
Sieht ganz gut aus.
Darf man das jetzt schon
includen?
Womit machst du Dependency Management?
Sowas gibt es bei C++. Sowas gibt es
auch nicht. Nichts
offizielles. Das ist auch nichts offizielles.
Das ist
eine Registry an
Komponenten.
Also, das ist der
Hersteller von dem Microcontroller, den ich
verwende. Der hat so
ein offizielles Entwicklungskit.
Und
dort gibt es ein paar Komponenten,
die man über dieses CLI-Tool
für installieren kann.
Dass das quasi direkt in das Projekt eingefügt wird.
Im Endeffekt kommt unter der Haube
hier so eine
Komponent-Jason raus. Guck, da steht es jetzt auch
drinnen. Das geht aber nur,
solange man das mit dem SDK des
Herstellers dann verwendet, das Projekt.
Leider gibt es in C++
keinen offiziellen Package Manager.
Das ist ja einer meiner drei Punkte, wie man
C++ besser machen könnte.
Oder bedeutend besser machen könnte.
Eins davon ist ein offizieller Package Manager.
Ist die Arduino-Jason-Label
so viel besser als C-Jason?
Die ist sehr viel angenehmer
auf jeden Fall als C-Jason.
Wir können es auch...
Das habe ich schon ein paar Mal gelesen.
Ich weiß aber aus dem Kopf nicht, was das für eine Library ist.
Du musst quasi eine
C++-Library interfacen mit
SIG.
Ja, aber nicht.
Was mich an SIG auch merkt...
SIG hat auch diese komische Pointer-Syntax.
War das nicht irgendwie
Sternchen.Sternchen oder sowas?
Ich kann mich noch dunkel daran erinnern.
Das habe ich auch neulich gemacht das letzte Mal.
Ja, Sternchen.Sternchen muss man da machen.
Also...
Moin.
Ich weiß nicht, ob Arduino-Jason
so viel besser ist.
Keine Ahnung.
Wir können das ja mal vergleichen.
Okay, Chat.
Wir machen jetzt
diese Funktion hier.
Die wird nicht so umfangreich sein.
Wir machen diese Funktion einmal
in Arduino-Jason
und einmal in
C-Jason,
was dabei ist.
Also, Arduino-Jason weiß ich noch
so ungefähr, wie das funktioniert.
Das habe ich schon ein paar Mal verwendet.
Die haben auch eine ziemlich
gute Hilfeseite.
Muss ich jedes Mal abgucken. Genau, Jason-Document ist es.
Also, Jason-Document
und dann kann man einfach sagen, so wie man das
von ordentlichen Programmiersprachen aus kennt,
dann kann man einfach sagen, hier
Document
gleich 1.
Das funktioniert.
Deswegen finde ich Arduino-Jason ganz praktisch.
Wir vergleichen das jetzt mal.
Wir vergleichen mal Arduino-Jason versus das hier
im Framework eingebaute
C-Jason, ob es sich lohnt.
Ob es sich lohnt, das zu verwenden.
Also, Chat, wir machen das so.
Ich habe hier schon mal irgendwo mal was gebaut
in der Richtung. Ich gucke jetzt ab.
Ich gucke jetzt ab.
Ich kann das auch theoretisch
einfach rüberkopieren,
weil dieses Beispiel,
das ich hier habe,
dieses Beispiel,
der Source-Code bei mir aus meinem
GitLab, äh,
GTA ist es,
wenn man das richtig ausspricht,
ist hier.
Das kopieren wir einfach rüber.
Das eignet sich
dafür, glaube ich, ganz gut.
So.
Okay, das muss Doc heißen.
Stats,
wobei das ja auch Stats sind irgendwo.
Was wird das am Ende?
Was ist das schon?
Ich habe ein ESP32 S3
Board gekauft
und darauf soll ein Web-Server laufen,
was der auch schon macht,
der Web-Socket-Verbindungen annimmt,
auf Web-Socket-Verbindungen auch antwortet
und ein Web-Interface
ausliefert, wo man dann Sachen einstellen kann.
Ja, zum Beispiel sein WiFi-Passwort ändern oder sowas.
Nicht, weil man das unbedingt braucht
und es das nicht schon gibt,
sondern einfach, weil mich interessiert, wie das funktioniert.
Und er soll dann, weil das eine mit Display ist,
und er soll dann auf dem Display auch
ein QR-Code anzeigen zum Scannen
für den initialen Access-Point
zum einmaligen Einrichten.
Und das Ganze
und das Ganze
über HTTPS.
Über HTTP ist das easy, da findest du 30 Milliarden Projekte
auf GitHub, aber über HTTPS nicht.
Moin Patrick, gibt es nicht.
Übrigens, gettimeunix gibt es nicht.
Dann lasst mich doch mal
kurz abchecken, was ich da
gebaut habe.
gettimeunix S.
Aha.
Das ist auch was, was ich selbst gebaut habe.
Okay.
Ich muss ja sagen, mein lokales Git
ist alles andere als ordentlich.
Da sind Projekte
der letzten Jahre drin, 8 Seiten oder so.
Einfach random gepusht.
Meine Comets haben so tolle Namen wie
Temp
oder Keck-Waite
oder
Omega-Keckel.
Das Comet.
Ich hab hier gerade das Projekt offen
von diesem
Disp, was wir mal gebaut haben.
ACTFT heißt das.
Wir haben doch mal versucht,
vor Jahren
mal so einen
ESP mit
Infrarot-LED zu bauen,
der meine Klimaanlage steuern kann.
Und das Projekt heißt bei mir
ACTFT.
Und da guck ich gerade rein
und das Comet, das letzte Comet
von mir in diesem Projekt
hat legit die Message
Omega-Keckel.
Was auch immer das sein soll.
Warum weiß ich nicht.
Aber Omega-Keckel
ist das E-Mode, gibt's ja nicht mal.
Okay.
Get Unix Dings S
Time S.
Hier, kopier ich hier mal raus.
Meine Comets sind richtig porger.
Okay.
So Leute, so sieht
Get Time Unix S aus.
Es gibt jetzt
zwei Sachen, die ich machen könnte.
Entweder ich versuche zu verstehen,
was ich damals da gebaut habe.
Oder mir irgendwo her copy-pasted habe.
Oder
ich glaub einfach,
dass das das macht,
was ich denke, dass es macht.
Ich denke, dass ich ein Unix Timestamp kriege.
Chat,
soll ich meinem zwei Jahre alten
ich vertrauen, dass das schon das macht,
was da steht? Ich würde sagen, ja.
So, und jetzt
übergeben wir das hier einfach.
Wie serialized man hier Arduino
Jason?
Deserialization.
Serialize and deserialize.
Serialize Jason.
Ach, da muss man das aufrufen, okay.
Ja, wir vertrauen mal meinem eigenen, zwei Jahre alten
ich.
Output. Was muss in den Output rein?
T-Destination.
Ja, das ist auch immer sehr
aussagekräftig.
Das ist ein Buffer mit Size.
Aber ich weiß ja gar nicht, wie groß das
Jason wird.
Tja, da wird's wieder abfucked C++,
weil
in C-Sharp wäre das relativ easy.
Na gut, auch nicht
unbedingt.
Aber da wäre irgendwo ein Match drinnen, welcher Typ.
Und dann könnte ich, aber
darf ich da einfach einen String?
Darf man da irgendwie einen String? Gibt's da nicht einen Guide oder so?
Deserialize,
Serialization
Tutorial. Okay, der
printet das auf Serial. Ja, das will ich ja nicht.
Ich will's ja in einen String
printen.
Ein PDF?
Wie alt ist dieses Tutorial?
Richtiger Macher, ne?
Warum kriegen wir nix als Antwort?
Hä?
Hä?
Äh...
Warum funktioniert denn das net?
Crasht der Server oder so?
Nee, ne?
Das andere funktioniert.
Hä?
Geht das jetzt net?
Ist der String irgendwie zu lang oder was?
Hä?
Also...
Okay, das wollt ich jetzt nochmal testen.
Broadcast 0w.
Scheiß auf was das Jason macht, warum geht denn das net?
Ich mein, an der Stelle vorhin ging's doch noch.
Bin ich jetzt...
Habt ihr irgendeine glorreiche Idee?
Was ich verkackt haben könnte?
Ich sollte mir das
Jason vielleicht nochmal ausgeben lassen.
Hä?
Ich bin ultra verwirrt,
warum geht denn das jetzt net mehr?
Hä?
Ich hab doch legit eben an der Stelle was zurückgeschickt
und das ging.
Ich hab doch eben...
Im Prinzip hab ich doch einfach nur das hier ausgetauscht jetzt.
Ich hatte sowas hier drinstehen vorhin.
Keckel?
Doppelpunkt 1 oder so?
Ah ja, Self.
Versteh ich net.
Das ist jetzt bestimmt wieder irgend so'n komisches C++ Zeug,
wo wir drei Stunden brauchen,
bis wir da drauf gekommen sind, was das ist.
Oh, danke für den Sub.
Arzi.
Okay, das funktioniert.
Ich mein...
Okay, ich mach das Jason Zeug
da mal weg davor, okay?
Also wir sind uns jetzt ja einig,
es passiert nix anderes
wie eben, nur dass das durch ne Funktion
mehr geht.
Also es geht, wenn hier einfach nur Keckel kommt,
ohne Jason Zeug drumherum.
Hä?
Ja, es mag mich nicht mehr.
Gut, ich mag's auch nicht, ja.
Okay, das funktioniert noch.
Das heißt, irgendwas hab ich mit diesem Jason Zeug
verkehrt gemacht.
Aber was?
Okay, ich kommentier das wieder ein
und wir loggen jetzt mal unser Jason,
ob das funktioniert.
Hab ich da irgendwas, was...
Aber wenn das Ding crashen würde,
dann würde er abkacken.
Und nicht einfach nur nichts machen.
Wisst ihr, wie ich mein?
Also eigentlich kann er gar nicht so viel kaputt sein.
Was macht der denn so lang da?
Ach...
Ich weiß, woran's liegt.
Boah, das ist ja...
Oh Gott, ist das dumm.
Alter, ist das dumm.
Ich weiß, woran's liegt.
Ne?
Patrick, daran liegt's nicht.
Ich weiß, woran's liegt.
Der versucht, die Zeit von NTP abzurufen.
Aber NTP geht nicht.
Weil ich nichts gesetzt hab für NTP.
Deswegen hängt der einfach ne...
Frag mich nicht...
Ne...
Zwei, drei Sekunden oder so.
Und das wird dem
Websocket zu lang.
Und er macht einfach weiter.
Also, das wird schon funktionieren hier.
Aber das dauert einfach zu lang.
Wahrscheinlich hat dieser Callback
irgendein Timeout, irgendein Timeout drinne.
Diese HTT...
Weil im Endeffekt läuft das ja so,
der...
Wo ist der denn?
Der queut das in irgendeinem Message Queue.
Und führt's dann aus.
Und ich geh davon aus, dass es dort irgendein
Timeout-Parameter gibt.
Brauch keine Lösung für
zu viele Browser-Tabs.
Beste. Viele Browser-Tabs beste.
Das hängt. Das ist 100 pro.
Ich wette mit euch. Okay, wir können das
verifizieren. Ich mach Timestamp
raus und jetzt geht's.
Chat...
Ne, wir machen keine Umfrage.
War meine Erklärung
logisch oder nicht? Glaubt ihr, es geht
jetzt mit Timestamp raus?
Oder es geht
weiterhin nicht? Also ich sag, daran liegt's.
Geht. Okay.
Der Patrick glaubt nicht, dass es geht.
Der glaubt, es liegt an dem String.
Das kann aber auch durchaus sein, dass es damit was zu tun hat, ne?
Der ist äußerst
sass, der String.
Aber das ist der Arduino Library und
das ist der Arduino Standard-Lib-String.
Geht.
Okay, jetzt muss ich noch das Chasen
zurückgeben.
Okay, wie können wir das fixen?
Weil es könnte ja...
Also es gibt zwei Fixe.
NTP setzen und dann ist gut.
Auf der anderen Seite, es könnte ja durchaus sein,
dass man mal kein NTP hat.
Man bräuchte
so eine Art Timeout.
Ja, geht. Guckt hier.
Ich krieg hier
mal einen Krempel.
Zum Glück hab ich mein Passwort nicht geleakt hier.
SSID, CPU Temperature
40 Grad.
Uptime. Achtung.
Ja, es liegt daran.
Wie könnte ich dem Ding jetzt ein Timeout...
Fuck, wie bring ich dem ein Timeout bei?
GetTimeUnix. Was mach ich denn hier
überhaupt?
Was passiert hier?
GetTimeUnix
S.
Was ist das überhaupt für ein bescheuertes...
für eine bescheuerte Funktion?
Ach, jetzt check ich das.
Der guckt,
ob er LocalTime getten kann.
Wenn er...
Wenn er nicht LocalTime bekommt,
dann sagt er, es ist 0.
Das ist wahrscheinlich der Test,
ob NTP geht
oder nicht.
Was macht denn GetLocalTime?
Das ist jetzt Standard Library, das ist nicht von mir.
GetLocalTime
Start, Sekunden,
Wa...
Das ist hier irgendwie ne... Ja.
Der wartet.
Der eidelt. Bisschen rum.
Der wartet.
Bis...
Bis...
Ah, hier.
5 Sekunden. Ja, 5 Sekunden.
Chat.
Warum hat es... Warum?
Warum hat es hier angeblich nen Default-Parameter?
Nämlich 5000 Millisekunden.
Und hier steht das nicht.
Das ist im Header.
Ja.
Ich finde dieses System aus Header und
Cpp-Dateien ja eh so geil schon.
Ja.
Hm.
Also ich könnte das, ich könnte das
im Endeffekt überschreiben.
Ich könnte quasi sagen,
ey, wenn du nicht
innerhalb von 100 Millisekunden
deine Time
getten kannst, dann return ne 0.
Ok, dann...
Dann sollte das jetzt ja eigentlich
funktion... Aber das gefällt mir
trotzdem nicht. Ich müsste einfach
vorher checken, ob...
Hab ich nicht irgendwie die Möglichkeit im Vorfeld schon zu
checken, ob NTP geht?
Muss doch irgendwas Gescheites geben.
Egal.
Kurzer, quick, quick
gefixt.
Wollen wir uns jetzt nicht zu lang dran aufhalten.
Ja. Funst. Timestep 0.
Ok. Ich...
Und jetzt machen wir mal was anderes.
Pfeifertime. Wir setzen
jetzt einfach NTP.
Bam. Wie setzt man
NTP?
Irgendwas mit WiFi bestimmt. WiFi?
NTP? Ne.
Set? Irgendwas?
Hostname?
Äh... Keine Ahnung.
WiFi?
ESP32
Set NTP.
Ich hab das bestimmt
auch irgendwo noch bei mir
irgendwo im Sourcecode von alten
Projects.
WiFi?
Jaja, bla bla bla bla.
Config Time?
Leute, ich muss mal kurz was zu trinken holen.
Trockener Hals.
Gachi-Bass. Ok.
Wieder am Start.
Große Wasserflasche
geholt hier. Große Trinkflasche vollgemacht.
Dass ich die laufen raus muss.
Ich schreib kein Websocket in C++.
Ich benutze
eine Library, die Websockets kann.
Weil C++ die einzige Möglichkeit
ist, ordentlich einen ESP32
S3 Microcontroller
zu programmieren.
Sonst würde ich's
auch anders machen. Ich bin nicht so
geil auf C++, dass ich das unbedingt
in C++ machen muss.
Machen wir mal ein Mikrofon-Spack drum.
So.
Ok, wie setzt man NTP mit
...
...
...
Ja, das kommt mir noch irgendwie bekannt vor.
Wie macht der das denn jetzt?
Einfach Config Time
aufrufen, oder was?
Config Time? Nee.
Geh weg!
Wo ist denn Config Time?
Wollen wir nämlich verarschen? Gibt's das nicht, oder?
Sag mal, ist das eine AI generierte
Seite?
Die Definition von Config Time gibt's
hier nicht, oder sehe ich das falsch?
Man soll Config Time aufrufen, aber
Config Time
gibt es nicht.
Oder muss ich da irgendwas
inkluden, ne?
Hä?
Gibt's die doch?
Ich guck mal kurz nach.
Ich guck mal kurz nach, wie ich das
hier...
Ich hab das garantiert im anderen Projekt auch schon hier gemacht.
So, also
gehen wir mal hier Main
C++, NTP
...
Set NTP
Das ist auch wahrscheinlich was von mir.
Ok.
Set
NTP
Alles klar.
Ok, Chatgear.
...
Ich hab da was.
Gut, wenn man sein Zeug einfach immer in Git pusht.
Also.
Was mach ich da?
Set NTP.
Server? Vermutlich mal der NTP Server.
Static IP?
What?
Static?
Warum um alles in der Welt Static?
Ah!
Ich glaub ich weiß warum Static.
Ist aber keine gute Idee, oder?
Ich glaub man muss da Static machen.
An der Stelle, weil
ich sonst Config Time das nicht mag.
Wenn das
out of scope geht.
Ok, Set NTP.
Ich vertraue mir mal selbst, dass das funzt
was ich da gebaut hab.
Set NTP.
Ja.
IP-Adresse. Nice.
Ja kann man das nicht irgendwie
automatisch setzen?
So auf den Gateway oder so?
Wifi?
Gateway IP!
Excellent!
Logger.
Log.
Ja mir egal.
Gateway IP. Mal gucken ob das auch stimmt
was da drinne steht.
Kann der Gateway das? Ja der kann das.
Weil, also mein Gateway kann das.
Weil der Gateway ist mein Mikrotik
Router und der macht bei mir auch
automatisch für alle Clients NTP Server
mit.
Guys I'm in Tutorial Hell.
Was?
Guys am I in
Tutorial Hell?
I haven't learned OOP yet.
We can know if you are in
Tutorial Hell.
Are you in Tutorial Hell?
Fuck ich war zu lahm.
Gateway.
Ja.
60.1
Nice.
Sehr schön.
Also können wir im Endeffekt einfach sagen
Set
Set NTP
und dann
die IP.
Und jetzt
ähm
hab ich auch irgendwas um die Zeit zu getten?
Irgendwie gettime?
Ach nee.
Jetzt kann ich. Oh doch ich hab hier auch
noch was gettime. Guck mal hier.
Weil ich da nicht alles zusammen
gefrickelt hab schon.
Dann probieren wir das doch mal aus hier.
gettime
als String.
Okay. Wenn jetzt alles funktioniert
sollte ich
per NTP
Zeit
bekommen. Also 15.35
sollte dann da stehen.
Es ist mir noch ein bisschen sus
ob das funktioniert.
Aha.
NTP Funds. Guck mal.
Man sieht sogar richtig
die Stelle an der NTP gesynct hat.
Hier. Noch nix.
Bam. Hier war der NTP synct.
Und hier haben wir 6.
Was ist denn das für ein absolut.
Was ist das für ein bescheuertes Format.
062224
Ist das Kekona Format?
Warum. Warum schreibe ich
Kekona Format hier raus.
Warum mach ich denn sowas hier.
gettime. Falls.
GR. Danke für den Sub.
Wenn euch der Content
gefällt. Freue ich mich natürlich auch
über normale Follows.
Ein bisschen Sellout machen
zwischendurch. So.
Kann man das hier um.
Ah. Ok.
Ich weiß warum ich das englische Datumsformat habe.
Weil ich faul war.
Und wahrscheinlich einfach %d verwenden wollte.
Ok.
strifftime.
Da gibt es doch bestimmt
eine.
Da gibt es doch bestimmt eine Erklärung
welche Escape Sequenzen
was bedeuten.
%c suche ich.
Schauen wir mal.
The preferred date and time representation
for the current local.
Ich glaube sowas habe ich nicht
gesetzt.
Ich habe keine lokalen Dinger gesetzt.
Weil das ist ja nicht Linux. Das ist ja ein ESP32.
Der so ein bisschen
die ein bisschen was gerippt haben
von der Linux AP.
Wollen wir mal gucken was passiert
wenn ich da C reinschreibe.
Wahrscheinlich kommt weiterhin Kekona Format
raus.
Es gibt ja kein System
unten drunter. Das ist ein
Microcontroller wo ich selbst die Firma drauf flashe.
Und ich habe nirgends wo.
Garantiert gibt es was.
Garantiert gibt es was zu setzen.
Irgendwie.
Ne bei mir steht da einfach nur 2024.
Das ist auf jeden Fall nicht das.
Lass mal da muss doch irgendeine Hilfe
dazu geben.
ESP32.
Ja.
Da muss man doch irgendwie.
Moment.
Wo kommt denn das her?
Ist das Arduino?
Ne das ist die ganz normale.
Dann machen die auch
%C. Ich sehe es genau.
%C. Guck mal.
In Shanghai.
Local Time.
Ah.
Aber ZNV mache ich doch schon.
Aber ZNV mache ich doch schon.
Ah. TZZ.
Okay.
ZNTP macht folgendes.
Das macht
so Zeug.
Time Zone Data setzt das.
ZNV. TZ.
1. Was auch immer 1
da hinten sagt.
Und jetzt muss ich noch machen.
TZZ muss ich noch hinterher hauen.
Wahrscheinlich.
Und dann geht auch %C.
Das ist ja wieder Wissenschaft
für sich.
Habe ich überhaupt %C richtig geschrieben an der Stelle?
%C.
Mal gespannt.
Ach ne. Okay.
Ach das ist der komplette
Date Time String jetzt.
Ganz ehrlich. Mir würde das
Lokal Aware
Date Part
würde mir davon reichen. Ehrlich gesagt.
In Kurzschreibweise.
Das ist ein bisschen viel. Ja.
Aber das gibt es bestimmt auch noch
in kürzer.
Name of Day.
Full Name of the Day.
Ne. Ja.
Ich weiß, dass ich das
selbst machen kann. Aber ich dachte vielleicht
hat das schon was eingebautes.
%C.
Aha.
Das hatte ich ja schon.
America's Only.
Okay.
Es gibt
Jahr, Monat, Tag.
Das ist auch okay.
Minus F. F ist auch okay.
Es gibt aber kein
lokale abhängige
Ah.
The preferred date representation
of the current local.
Das wollen wir haben.
Das wollen wir haben.
Time. Genau. Ja.
%X.
Da lernt man tatsächlich was.
Hätte ich nicht gewusst, dass es sowas gibt.
Letzter Satz.
This is equivalent to.
Äh. Ne.
Wait.
Ach ne.
POSIX Lokal. Ne. Plötzchen. Plötzchen.
Ey. Das ist wieder Kokona Datum.
Wir haben doch eine extra
Lokale gesetzt. Scheiß drauf.
Scheiß. Ohne Scheiß. Da habe ich keinen Bock drauf.
Wir machen %F jetzt.
Scheiß drauf. Das ist mir zu dumm.
So. Jetzt haben wir %F.
Ist das jetzt besser, Chat?
Wisst ihr was?
Wir machen es jetzt so. Wir machen jetzt
Ähm.
Wir machen jetzt einfach so.
So. Day.
Was findet ihr besser? %F oder
Weil %F hat
den Vorteil. Du siehst das Datum vorne.
Okay. Wenn ihr das gut findet.
Ich finde es auch gut. Passt. So lassen wir das.
Ich habe keinen Bock da jetzt ewig dran rum zu
wursteln. Äh.
Nach dem Set sollte %D
auch richtig angezeigt werden.
Ne. %D
zeigt da.
Ne. %D ist immer.
Ist immer
das. Unabhängig von.
Wir wollen eigentlich.
Eigentlich wollen wir %X.
Aber %X funktioniert auf
dem ESP32 irgendwie nicht richtig. Aber
Scheiß drauf. Ich habe echt keinen Bock mich mit diesem Thema
auszusetzen. Wir machen %F. Okay.
%F ist vollkommen in Ordnung. Ich wollte
eigentlich nur checken ob NTP funktioniert.
Und NTP funktioniert.
Also alles gut.
Wenn man sich jetzt connectet. Zack.
Kriegt man auch
die Time. Alles gut.
Und man hat einen
aktuellen Unix Timestamp.
Ist das ein Unix Timestamp?
Unix Time.
Bam. Ja.
Genau. Perfekt. Aktueller Unix Timestamp.
Okay. Nice.
Viel rumgebastelt.
Um Kleinigkeiten. Aber nice.
Frunz. Okay. So. Also.
Wir haben eine aktuelle Uhrzeit. Und
dementsprechend. Warum haben wir das eigentlich nochmal gemacht?
Achso. Weil das hier sonst
Timeoutet. Na gut.
Aber wir haben ja das Problem mit dem Timeout auch
gefixt. Weil wir hier ne. Nur.
Weil wir ihn hier nur 100 Millisekunden
warten lassen. 100 Millisekunden ist ne Ewigkeit.
Irgendeine Funktion aufzurufen.
Das ist wahrscheinlich nur dafür
gedacht. Dass man ihm Zeit gibt.
Nach einem Reboot. Kurz
NTP zu holen. Aber wenn
einer das Webinterface aufmacht. Dann ist schon
lange. So schnell ist da keiner.
Bis dahin ist NTP gesetzt.
Was habe ich
mir eigentlich hiermit gedacht? Leute. Ist das
europäische
Sommerzeit? Oder
Was sagt uns diese?
Ah. Ne. Dieser String sagt.
Es gibt CET-1
und CEST. Das ist minus 2.
Und das sind die Regeln wann die
Zeitumstellung passiert. Glaube ich.
Wir beschäftigen uns aber jetzt nicht
zu sehr mit dem Kram. Weil dieses Thema
ist wirklich
so ein extremer Abfuck.
Das nehmen wir einfach
zur Kenntnis. Und das geht.
Mehr müssen wir gar nicht wissen. Das geht.
Das reicht.
So. Jetzt haben wir unsere Zeit gesetzt.
Was auch heißt. In meinem Webinterface
kriege ich jetzt
initial einmal mein Zeug
geschickt. Nice.
So muss das sein.
So gefällt mir das. Und unsere ursprüngliche
Idee war ja. Wir wollen uns mal angucken.
Was schöner ist.
Arduino-JSON
oder das eingebaute C-JSON.
Lass uns das mal vergleichen
miteinander. Also das hier
ist. Wie macht man
Blog-Comments?
So. Also ich will das eigentlich
gar nicht. Blog-Comments reicht der Sache.
So. Das ist die Arduino-JSON Variante.
Ja.
Wobei das. Ja. Lassen wir
das mal noch dabei. Okay.
Die Arduino-JSON Variante und das hier ist
die C-JSON Variante.
Also. Wie ging das jetzt hier?
Auto.
JSON gleich
C-JSON create oder sowas.
Hätte ich das mal nicht vorher gelöscht.
Ne. Aber da hat er bestimmt
ein Example drin.
C-JSON pass.
C-JSON create object. Okay.
C-JSON
create object.
So. Und wie kriege ich jetzt da was rein?
C-JSON create
string. Chat. Ich bin richtig
doof. Ich habe doch vorhin.
Wir gucken jetzt einfach mal in das Diff vom letzten
Git-Comet. Habe ich mein Secret
File excluded?
Da haben wir Glück gehabt. Sonst hätte ich jetzt
ja mein WLAN-Passwort geleakt.
Aber wie gesagt. Ich habe extra nur
dafür dieses WLAN aufgemacht.
So. Hier haben wir noch ein Beispiel drin.
Create object.
Add number to
object. Uptime. So hatten wir das
gemacht. Okay.
Also UID.
Get.
Funzt das dann an der Stelle
überhaupt?
U64. Ja.
Okay. Okay. Und dann
Back-Address ist ein String.
Das wird schon mal so nett
funktionieren. Da muss ich sagen
C-String. Und dann
Add
String to object.
Also Leute. Ich sehe schon,
dass es sogar in der Handhabung hier schon ekliger
ist. Aber noch okay.
Aber noch okay.
Aber wie mache ich das mit der IP?
Da wird es jetzt schon
Da wird es jetzt schon ein bisschen ekliger.
Da muss ich hier quasi sagen
Und das ist übrigens auch nicht UID.
Das ist MAC. Das ist IP.
Da muss ich dann quasi sagen, dass das
mit C-JSON funktioniert.
Muss ich dann quasi sagen.
Wifi local IP
to String
to C-String
Also die Arduino-JSON-Sache
ist schon hübscher, gell?
Ob es jetzt natürlich
rechtfertigt, dass man
ein extra
dass man extra
Library da included, weiß ich nicht.
Aber wir haben eh keinerlei
Speicherprobleme.
String ist das jetzt?
Die RSID ist auch ein String.
Aber wir bauen das jetzt mal an der Stelle nach
und gucken dann, ob das besser
schlechter.
Beides ist ganz okay, ne?
Das hier unterstützt halt
den Arduino-Krempel, deswegen ist
es ein bisschen kürzer.
Äh, SRI ist...
Achso!
Eine Number ist das, okay.
Ich weiß nicht, ob
Multiple Cursor hier gescheit funktionieren.
Äh, CPU
Temperature ist wahrscheinlich das da.
Ist wahrscheinlich auch eine Number.
Uptime ist definitiv
eine Number.
Und das ist ein Timestamp, das ist auch eine Number.
Ja...
Also...
Es ist beides okay.
Oder?
Achso, Moment, wir sind noch nicht fertig.
Moment, Moment, wir sind noch nicht fertig.
Wir brauchen jetzt hier
output2 gleich json
äh
serialize, ach nee, wie heißt das Ding, ähm
String
äh
Ich muss nachgucken hier, wie ging das?
Print! Print.
json print
und dann
musste man unbedingt noch sagen
delete, weil ansonsten gab's
Memory Leaks.
Und free message.
Genau. Die zwei Sachen
braucht man. Das macht halt kein automatisches
Memory Management.
Ja, Multicursor
funktioniert, aber ich glaube nicht, dass es großartig
was gebracht hätte, weil ich in jeder Zeile was anderes
machen muss. Chat?
Was denkt ihr?
Das hier?
Versus
äh, das mit dem
Logger, das können wir mal wegmachen.
Ja, also im Prinzip
geht's um
das hier versus
das hier. Also ich finde
die C-Variante ist gar nicht schlecht.
Für das, dass es eine reine C-Geschichte
ist, ohne irgendwelche Overload
Geschichten und sonst was, geht es schon echt in Ordnung.
Oder?
Ich glaube, wir können sagen, dass da oben ist schon
eine Ecke besser lesbar.
Und auch eine
Ecke eleganter.
Aber das da unten ist vollkommen fein.
Was sagt ihr?
Wollen wir
Arduino-JSON verwenden oder C-JSON?
Ich meine, wir können doch erstmal C-JSON verwenden und
sobald wir was haben, was damit abfuck ist,
nehmen wir Arduino-JSON.
Nicht auf MSP32!
Habe ich schon ausprobiert.
Also erstens ist die ziemlich groß.
Was die Firmware super fett macht.
Und das
richtig coole daran
ist das automatische
deserialisen.
Und das hat Probleme auf dem MSP32.
Guck mal, Katze im Chat
am Start. Ich habe das passende
Emote dafür.
Hast du
Arduino noch was anderes drin?
Ähm...
Was meinst du?
Ich habe...
Achso, meinst du Arduino-Libraries?
Ne, nur Arduino-JSON aktuell.
Ich habe aber eh den ganzen
Arduino-Core als Modul geladen.
Also...
Es ist jetzt nicht so, als will ich
großartig Firmware-Platz sparen.
Ich benutze auch das ganze
WiFi-Handling aus Arduino,
weil das viel angenehmer ist als
das mit reinem
MSP32-Standard-SDK.
Ok, Chat.
Aber das ist schon eine Zusatz-Library.
Das Arduino-JSON
gehört nicht zur Arduino-Standard-Library.
Das ist eine Zusatz-Lib.
Die man installieren muss.
Und C-JSON ist standardmäßig dabei.
Ja, Chat.
Wie machen wir weiter?
Welches der beiden soll ich löschen?
Wir können nur eins da drinnen lassen.
Ich werde mir eins auf jeden Fall mal
in meiner Zwischenablage speichern.
Welches sollen wir löschen, Chatge?
Und wie wollen wir jetzt weitermachen?
C-JSON oder Arduino-JSON?
Weil...
Beides ist natürlich jetzt...
Auf irgendwas müssen wir uns jetzt festlegen.
Arduino ist einfacher zu erweitern,
wenn wir nur ein bisschen weniger tippen.
Ok.
Da ist natürlich was dran.
Da ist was dran.
Gerade wenn wir irgendwelche Custom-Typen
serialisieren wollen.
Ok, kommen wir mal auf Frage.
Arduino-JSON
versus C-JSON
verwenden?
Zack.
Zack. Zack.
Keine additional votes.
So.
Irgendwas muss ich jetzt machen.
Eins von beiden muss ich löschen.
Ok. Arduino-JSON ist...
würde ich sagen,
der klare Gewinner.
Ok.
Ich würde sagen, es wird eindeutig Arduino-JSON.
Aber ich finde,
für eine reine C-Library
ist das hier auch sehr ordentlich gelöst.
Da kann man nichts sagen.
Weg damit. Zack.
So.
Ich würde mal sagen,
es ist mehrheitlich gewonnen.
Ok.
Dann. So.
Next.
Also, wir kriegen jetzt schon mal Zeug hier.
Das können wir jetzt...
Ich brauche jetzt noch meine
WiFi-Settings.
Wir lassen das mal kurz hier anzeigen.
Ja. Da haben wir irgendwie Data
und das ist...
Config oder so.
Gibt es beides nicht.
Oh shit.
Ich sehe da schon ein Problem.
Ich weiß nicht, was wir haben.
Das müssen wir auch gleich noch beheben.
So. Also.
Data wird im Prinzip
hier IF.
IF. Also wir müssen das auf jeden Fall
erst mal als JSON parsen.
Also. Out.
Fuck. Das ist ja immer abweichlich
zwischen JavaScript und C++ zu switchen.
Äh.
Ähm.
Was ist es?
Ah. Const. Ne.
Let. Deine WiFi-Settings. Doch. Kann ich.
Weil ich die Passwörter nicht mit übertragen werde.
Keck. Wait.
Mach ich nicht. Also. Const.
Const. JSON. So. Ja.
JSON. Pass.
Event.
Data.
Okay. IF.
Oh. Wir haben ein Problem, Leute.
Die Events registrieren sich immer doppelt
und dreifach.
Da weiß ich aber schon, wie wir es lösen.
Mit Vitevents.
Aber...
Oh. Das müssen wir uns auch angucken. Da habe ich schon die ganze
State-of-JavaScript. Nicht jetzt.
Umfrage.
Äh. Ne. Das meine ich nicht.
Was kam raus?
War das State-of-Frontend?
2023?
Ne. Da gab es doch erst letztens eine Umfrage.
Ach. Hier ist es doch.
Ne. Ist doch richtig. Genau.
Das gucken wir uns aber nicht jetzt an.
Ja. Also das...
Dass sich immer die Events nicht unregistrieren.
Das müssen wir gleich mal fixen.
Also. IF. Vielleicht habt ihr eine Idee,
wie man das schöner machen kann. Hier.
Wir müssen...
Wir gucken jetzt, ob es da drin...
Ah. Ne. Okay. Wir müssen...
Wir müssen unser...
Wir müssen unser JSON noch ein bisschen anders verpacken.
Und zwar...
Das hier...
darf nicht das Root-JSON
sein.
Wir brauchen...
Wir nennen das hier mal Root.
Und... Oh. Wie macht man das denn?
Ja.
View ist nicht das beliebteste.
View ist das zweitbeliebteste nach React.
Mittlerweile.
Und ich glaube,
jQuery ist gar nicht mehr dabei.
So. Also. Warte mal.
Wir machen ein Root-Element.
Und...
Wir...
Ich will jetzt sowas machen im Endeffekt.
Guckt mal. Hier.
Root. Vielleicht geht das auch so hier.
Config.
Und darunter will ich jetzt diesen ganzen anderen Shit machen.
Muss ich jetzt...
Muss ich jetzt jedes Mal...
Quasi...
Ne. Oder?
Das muss doch schöner gehen.
Arduino JSON
Nesting.
Nicht wirklich, oder?
Nested?
Wie macht man das?
Ah. HTMLX interessiert keinen.
Das hat so ein bisschen Hype. Aber das juckt nicht.
Ach. Guck mal. Das kann sogar Message Pack.
Arduino
JSON nested.
Wie nennt man das denn jetzt richtig?
How to create complex
nested objects.
Arduino version 5.
Ah. Mann. How to nested.
Nested.
Gibt's da nicht irgendwas...
Wo ist da irgendwie eine mögliche...
Wie ging das in Arduino?
Create nested array.
Create nested
object.
Geht das vielleicht irgendwie so, dass ich jetzt sage
Root
Create nested
object.
Ja.
Und dann config.
So würde ich sagen.
Wobei config ist falsch.
Stats. So hieß das andere doch vorher auch.
Stats.
Was macht denn das?
Deplicated. Nice.
Was?
Use doc
.key to JSON
Moment. Will ich's
unleserlicher machen, oder wie?
Was soll ich machen?
Ok. Moment. What?
Root? To?
What?
Und das ist jetzt besser?
Es funktioniert noch nicht mal.
Was? Clears the document?
Ne. Ich sollte so machen.
Also seriously?
Ich finde die andere
Sache deutlich hübscher.
Sag doch mal
ehrlich. Was ist schöner?
Das?
Oder
das?
Das ist easy.
Das ist hässlich as fuck.
Letztendlich rappt der das ja auch nur.
Naja.
Komm. Wir machen den nicht
deprecated way.
Hoffentlich funktioniert das jetzt.
Ok. Und dann brauchen wir jetzt noch was.
Das nennen wir config.
Für mein WiFi Zeug.
Äh. Moment. Stats. Und das heißt config.
So rum.
Und das machen wir so übrigens nicht, sondern wieder zurück.
So. Und da krieg ich
jetzt hoffentlich
was übrigens jetzt root heißt
und nicht mehr doc.
Und da krieg ich jetzt hoffentlich das richtige json
zurück. Flash.
Ahem.
Da bin ich jetzt ja mal gespannt.
Ob das. Ob dieses komische
Konstrukt da oben tut.
Ja. Mein
Online ist kaputt. Das juckt mich jetzt wenig.
Wir gucken mal hier unten
mit dem Websocket ob das das richtige
rauskommt. Ähm.
Ja. Ja. Ja. Ja. Guck hier.
Stats. Config. So.
Jetzt habt ihr ne bessere Idee das zu machen.
Ich guck jetzt ob in json
und dann nennen wir das hier
stats gleich. So.
Also. Ich guck jetzt ob das
hier ein config
Objekt enthält.
Das json. Und wenn ja.
Dann setz ich config
da drauf. Kann man das irgendwie schöner machen?
Oh. Stats.
Machen wir das gleiche.
Kann ich nicht.
Ich kann sowas machen oder?
Stats. So. Oder?
Ist das nicht das gleiche?
Also hier würde ich
quasi. Ne.
Ne. Ne. Ne. Ne. Ne.
Das kann ich nicht.
Weil hier wird immer wenn das nicht drinnen steht
das auf leer gesetzt. Das will ich ja gar nicht.
Ich will das letzte behalten.
Ok. Ne. Dann geht wahrscheinlich echt nur sowas hier.
Naja.
Config ist leer. Lass uns mal schauen.
Aber stats sollte jetzt gesetzt sein.
Nice. Es funzt.
Ok. Guckt. Ich krieg.
Beim initialen connecten einmal
das hier mit geschickt. Da kann ich schon gleich
mein Frontend bisschen besser
dann mit
Infos füllen.
Das ist gut.
Mein Frontend ist ein bisschen viel gesagt.
Das enthält außer Text gerade noch gar nichts.
Aber immerhin Leute.
Darkmode.
Mein Frontend hat schon Darkmode
bevor es überhaupt ein Frontend ist.
Andere haben es 15 Jahre später immer noch nicht.
Wichtig und richtig.
Ok.
Jetzt steht hier übrigens das Problem von dem ich hier rede.
Also guckt mal.
Jetzt bekomme ich einmal pro Sekunde
bekomme ich eine Message.
Wenn ich die Site jetzt hot reloaden lasse
bekomme ich zweimal die Sekunde
schon eine Message.
Und wenn ich sie nochmal hot reloaden lasse
bekomme ich dreimal die Sekunde eine Message.
Das liegt daran
weil ich diese Events hier subscribe
aber keinen
kompletten Seitenreload mache.
Das macht
VEET macht hot reload.
Und die Events werden jedes Mal
neu registriert aber die alten werden nicht
unregistert.
Und ich bilde
mir ein es gab so einen
Check
also das ist ja eine reine Sache
zur Development Zeit.
Wenn das Ding erstmal auf dem Server selbst
läuft dann gibt es kein hot reload mehr.
Aber ich glaube man konnte irgendwie
sich von VEET notifizieren
also
VEET ist dieses Frontend
Bild Tool unten drunter
was letztendlich die
Webseite hier zur
Entwicklungszeit lädt und automatisch
refresht und alles mögliche.
Man sieht es ja auch hier unter Proxied
auf den ESP und sowas.
Es gibt irgendwie die Möglichkeit
dass man sich darüber
benachrichtigen lässt. Also ich muss auf jeden Fall erstmal
gucken ob wir
ich muss quasi sowas machen
wenn wir nicht in Pod sind
falls es Dev gibt
wenn wir nicht in Pod sind
dann unsubscribe für die Event
unsubrube genau
unsubrube wollen wir
machen
ich traue mich nicht das Wort zu googeln
manchmal ist es
gefährlich Wörter zu
googeln
ah ok Google macht da gleich unsubscribe
draus
VEET
hot reload
unsubscribe
how
can I turn off hot reload
unsubscribe event
unsubscribe event
ja genau
ja sowas in der Richtung brauchen wir
import meta hot
man's not hot
ok für hot
hot reload
gibt es da auch ein schönes Beispiel für
weil ganz ehrlich TypeScript
Templates sehen fast
so hässlich aus wie C++
change my mind
hot
hot except
ich hab ich weiß was
VEET hot reload
set interval
wie man das ausschaltet da findet man auch bestimmt was
hier hot reload mit set interval
replacement set interval
aha
if module
hot
module hot
moment
log
tackle
nein nice
funktioniert natürlich nicht
aber moment wir sollen das ja auch
import meta
if
dispose
das wollen wir haben
das wollen wir genau das das hier
if import meta hot
schauen wir mal ob das
das sollte jetzt ausgeführt werden
wenn ich hot reload
keine Ahnung ob es das wird
jetzt geht
hot reload einfach gar nicht mehr gerade
ja
ah ah funzt funzt funzt ok nice
pog
funzt
welche high iq community
chatter
kann mir sagen wie ich Events unsubscribe
in javascript
also ich will quasi sowas machen wie
minus
on function
remove javascript
event
remove event listener
moment da brauche ich die Funktion
das geht ja nicht
anonymous function in javascript
äh
das ist
nicht das was ich
machen will
hä was machen die da für
für wilde
dinger what
was ist denn
was ist denn wenn ich einfach
jetzt mal blöde blöde sache ne vielleicht
memory leak das irgendwie
was ist denn wenn ich einfach sage socket
on error
gleich null
socket
on close gleich null
mal gucken ob ich das darf mal gucken
was es macht ok
so ich bekomme einmal die Sekunde
was ja was funzt
mein hot reload ist kaputt nach
dem ersten mal glaube ich
du musstest glaube ich muss das nochmal hier neu
testen wir mal hier diff
hinzufügen hot reload funzt
einmal noch
ein diff hinzufügen hot
alter das zerstört mein hot
reload
was ein schrott man
warum ist das alles so so broken immer
keck we javascript
leute ich sags euch
keck we javascript
was mach ich denn jetzt
warum macht das mein
hot reload kaputt
versteh ich net
hab ich da irgendwas drin was es net gibt
on error ne
kann man irgendwie checken
vor allem beim ersten mal funzt hot
reload noch
beim zweiten mal ist hot reload aber kaputt
kann man irgendwie auch checken
ob man in entwicklung ist
äh
vit ap environment
prot def
nth variables
nth variables and modes
import
meta nth
und dann
gibt es da sowas wie def oder prot
oder es gibt autocomplete
leute ja es ist
echt so
import meta nth def
okay nice ja ja
ich will das eh nur in def machen wir checken jetzt
ob wir in def sind
vielleicht fix das ja irgendwie
vielleicht soll ich das doch so in der richtigen
reihenfolge machen irgendwie
close
es ist kaputt
warum alter warum ist
warum ist mein hot reload danach kaputt
es gibt ja auch keine fehlermeldungen
vor allem
wie kann denn durch das pure entfernen
von paar events mein hot reload verrecken
okay leute wir starten das mal
kurz neu das ist es ist kek kek
javascript das hier starten wir
auch neu drum
es ist einfach
es ist kaputt nach dem ersten mal
hot reload ich raste aus
warum
okay besser zeitpunkt
wir upgraden unser vit projekt
was hat er hier
ah
svelte for visual studio bam restart
okay und error können wir rausschmeißen das braucht man nicht
es ist procken
es ist procken danach
ne das wirds wirds auch nicht
fuck man was ist das denn für ein kack
slash ws
ah vielleicht muss ich
vielleicht muss ich den socket irgendwie closen
aber
wartet mal ich hab jetzt ja gar nichts
damit gemacht
ich hab ja im prinzip hier nur ne
console log drin ansonst nix
es geht einfach kaputt
alter kek
wait webentwicklung
ohne scheiß man
warum ist das so cancershit
immer
ist das vielleicht ein bug in vit oder so
es ist einfach kaputt nach dem ersten mal reload
okay wie upgradet man so ein komisches
webprojekt
ähm
wie upgradet man jetzt auf svelte 5
npm
svelte 5 upgrade
wie wie fandst du das
ich hab mir da nen screenshot gemacht
auf dem handy irgendwo wie das geht
zack
äh
hier
npm install svelte add next
an welchem event startest
dann bist du dann am wind
gar nicht das injected wheat für mich
keine ahnung was das macht
ne aber warum geht das dann beim ersten reload
und beim anderen nicht
das ist ja das ding der erste reload funktioniert
aber der zweite dann nicht mehr
und da check ich
check ichs net
okay ich habs ja auf dem handy wie man svelte updatet
npm install
svelte add next
natürlich was sonst
add next
pass auf jetzt ist
jetzt ist bestimmt alles broken leude
natürlich jetzt ist alles kaputt
invalid
attempt to instantiate
app svelte with new app
which is no longer valid
okay
index html
ne
äh main.js
okay okay
new app
das macht man jetzt nicht mehr so oder wie
sondern jetzt
wie macht man das jetzt
wobei warte mal das hab ich glaub ich auch
moment moment moment das hab ich auf dem handy auch fotografiert
ich hab so nen blogpost von irgendeinem typ
then just change your main.js
to
okay okay
also import app css
soll ich weitermachen
import mount from svelte
import mount from svelte
import
und dann was
mount
rom ach du scheiße alter
svelte
moment hab ich doch schon
muss ich nicht nochmal machen ist schon ist schon imported
äh und dann muss ich sagen
const
what das muss ich abschreiben vom handy jetzt
const app gleich
okay ich lass das einfach mal kurz weg
hier const app gleich
mount
app
tag
target
ne das gibts doch gar nicht mehr
geil aah
okay jetzt
so
wie jetzt mount is not defined
eben hat er mir gesagt das muss ich nicht
importieren das hab ich schon
okay ist funzt sehr gut excellent
easy
äh moment hot reload funktioniert jetzt
wait a minute
aber bestimmt
bestimmt nicht wenn ich das hier jetzt
editiere
äh
das hats ernsthaft gefixt
das hat ernsthaft mein
hot reload problem gefixt
alter javascript
dazu fällt mir nichts anderes ein
als eine runde
el risitas
man hat ernsthaft
keine ahnung was da abgeht
what the fuck
was
was hat svelte 5 mit dem
hot reload zu tun
das ergibt
überhaupt keinen sinn alter
aber hoffentlich
funzt das jetzt auch was ich machen will
okay
keine events mehr
moment aber das unsubscriben
hat nicht gefunzt
doch jetzt okay
okay aus irgendwelchen
gründen hat das
update auf
svelte 5 alle meine probleme gefixt
okay gut
nice
so können wir das lassen
ähm wo sind wir denn jetzt stehen geblieben eigentlich
nachdem wir uns mit bisschen keck keck
javascript auseinander gesetzt haben
also wir bekommen hier
jede menge infos
von dem so also ich brauche jetzt noch
das machen wir ein bisschen kleiner hier
so also ich brauche jetzt im endeffekt hier noch
stats habe ich
vielleicht wisst ihr
diese stats die sollte ich ja
nicht nur einmal schicken
bei seiten reload sondern sagen wir mal
einmal schicken bei seiten reload
und
alle 5 sekunden
oder so sagen wir mal
also dann brauchen
wir nämlich noch ein task der das im hintergrund
macht x
task create
äh
ich muss nachgucken moment
muss spicken
schinkenspicker
was auch immer
gab es das nicht
ist das nicht rügenwalder mit der mühle
rügenwalder
schinkenspicker
würzig zart herzhaft
fein wir hauen rein
wo habe ich denn mal hier ein beispiel
für create
task das habe ich doch bestimmt
hier schon mal irgendwo gemacht
hmm
also mal kurz greppen
danach x
task create wobei
da muss ich gar nicht hier greppen sondern
ich glaube
das haben wir doch schon in unserem anderen projekt
gemacht
da hatten wir wir hatten doch letztens schon mal was
sigbee mäßig gebaut
sigbee
nicht wirklich
ähm wie habe ich denn das genannt
wir hatten noch so ein wir hatten noch so ein projekt
mit mit sigbee krempel drin
ach so wie ich mich kenne ist es bestimmt
in tmp
hello world klingt gut oder
ja das ist das sigbee projekt
wie ich das wieder gefunden habe
es ist obviously
natürlich das projekt
tmp esp 32 hello world
also
klarer kann das ganze nicht sein wo man die sachen
findet sondern da habe ich irgendwie
x task create
genau
da haben wir ein beispiel für
wie das aussehen muss
easy
ob obvious der
ordner überhaupt
also x task create
also der task der heißt
web
socket
update
darf man das überhaupt so lange nennen
16 zeichen
so
hier brauchen wir eine methode da machen wir hier
ah diese syntax
so callback
so wir brauchen auf jeden fall user
context
this sonst wird das ganze nix
und void
und unsere parameter
ja ok nice oh jetzt
nein die lambda formatierung
schlägt wieder zu
mich schon wieder haben wir das nicht
das letzte mal erst 5 mal gefixt bis es
funktioniert hat jedes mal
jedes mal dieser shit man
ok ja ok ok
so ist es in ordnung
oh dann kopieren wir uns mal hier den krams
dass wir es ein bisschen abkürzen
können ok
ähm ich möchte
alle 5 sekunden updaten also
sprich while true
delay
delay
5 sekunden
websocket
broadcast status
ok
so und jetzt sollte ich alle 5 sekunden
zusätzlich zu den normalen websocket messages
nochmal ein update
von den esp intern
sachen bekommen
was eigentlich auch ganz nice ist
weil
dann kann ich automatisch erkennen
nach nem restart im frontend
dass mein esp wieder da ist
weil dann wird meine websocket verbindung abkacken
dann wird er sich ein paar mal versuchen
so zu reconnecten
wobei ne dann kriegt er es eh noch
egal schauen wir mal
also ich sollte jetzt alle 5 sekunden
ok ich bekomme jede sekunde weiter meine
sensor ja
alle 5 sekunden gibt es ein update
mit den stats
ja sehr nice
excellent
könnte man schon fast sagen
zack
easy
das lassen wir hier inline drinne
bis jetzt auch noch alles
relativ übersichtlich
ok
jetzt muss ich wifi
settings schicken
ich speichere aber meine wifi settings
noch nirgendswo
meine wifi settings sind aktuell
hardcoded
hier drinne
mit hot reload
meine wifi settings sind aktuell
hardcoded hier drinne
perfekt
ich muss jetzt meine wifi settings
irgendwo im flash
speichern
unter irgendeinem key
dass ich das wieder auslesen kann
und am besten beide
weil ich will ja
wifi backup password
setzen können
oder backup wifi setzen können
falls eins abkackt
ok da brauche ich jetzt
sehr viel fifeat dabei
dass das funktioniert
was haltet ihr davon
wenn wir eine klasse machen
so
wir sind ja
die hellen der objektorientierung
ja
die nicht helper heisst
was haltet ihr davon
wenn wir eine klasse machen
ich gebe zu
ich lasse mich da jetzt sehr stark
von einem asp.net projekt inspirieren
die nennen wir appconfig
so
wir haben einen ganzen schmodder drin
den wir brauchen
so wir brauchen
na moment
das war jetzt zu viel c sharp
hat c++ eigentlich auch sowas
properties
ähm
das ist ne gute frage
was bin ich lesend
was zum teufel
lese ich hier gerade
in c++
you can write your own features
ja aber die sehen aus wie
draufgeschissen alter
was soll denn das sein
was ist das
das ist kein feature
das ist kurz vor
lungenentzündung man
was ist das
das ist doch kein ersatz
für properties
man wolle mich verarschen
ja allschool struct
ja gut ob es ne klasse oder struct ist egal
ich dachte einfach nur vielleicht
vielleicht haben die ja sowas
string wifi ssid
und so
ne das kann man ja machen
das ist kein problem
komm wir machen die coole arduino schreibweise
wifi ssid
wifi password
und ich hab gesagt
ich will 2 stück haben
dann nennen wir die wifi ssid 1
und wifi ssid 2
und wifi 1
und wifi 2 password
so
machen wir noch
das habe ich mir nämlich im vorfeld schon überlegt
da machen wir noch einen bool
und da schreiben wir jetzt sowas rein
wie keine ahnung
wifi 1 first oder sowas
das ich auch auswählen kann
ob ich starten möchte
mit wifi 1 oder wifi 2
und welches als backup fungiert
wisst ihr wie ich mein
also mein hintergedanke ist folgender
stellt euch vor ihr habt ein gerät irgendwo im wlan hängen
ihr ändert jetzt
ihr habt vor euer wlan
zu ändern
ssid password änderung
was auch immer
dann kommt es ja öfters mal vor
oder ich hatte zumindest nicht schon öfters das problem
aber ihr wahrscheinlich auch
dass ihr euch dann auf diesem gerät einloggt
quasi im alten wlan
wo das drin hängt
ins web interface geht
dort das neue wlan eintragt
speichert
dann startet sich das gerät neu
und taucht nicht im neuen wlan auf
bis euch dann irgendwann auffällt
dann habt ihr gelitten
weil das gerät dann entweder wieder komplett neu setup werden muss
oder mal im schlimmsten fall
sogar noch eine handy app für installieren muss
und ich dachte mir wir machen es einfach so
man kann
wifi 1 und wifi 2 setzen
und
der fängt dann immer bei dem wifi an
was man hier ausgewählt hat
sollte das nicht gehen
versucht der immer noch wifi 2
so hat man immer noch nen backup
also sprich ich kann
beispielsweise wenn ich jetzt mein wlan wechsle
von blub 1 auf blub 2
dann trage ich einfach blub 2
als zweites wlan ein
schaue ob
switche um dass der blub 2
als erstes wlan benutzt
um sich zu connecten
und wenn das nicht klappt
dann connectet er sich als backup
immer noch zu wifi 1
ihr versteht was ich meine hoffe ich
deswegen
deswegen speichern wir beides
wir speichern wifi 1
wifi 2
und das ganze zeug
also wir setzen nochmal ein paar default werte
das ist leerer string besser als 0
das ist so ein teil
was ist denn dieses ding
in c++ eigentlich
standardmäßig
nicht 0 weil es ist kein pointer
es ist wahrscheinlich tatsächlich leerer string
auch wenn ich nichts zuweise
so
ok
und nun brauche ich irgendwie die möglichkeit
den ganzen kempel zu speichern
und zwar im flash
was macht der speiseplan
heute gab es
lax mit nudel
man könnte auch sagen nudel mit lax
gucken ob der pepo das auch so sieht
ne der pepo hat es eher mit fastfood heute
der pepo kann aber
random auch
nudel mit lax futtern
aber heute hat er sich für
hamburger entschieden
was auch gerade immer mit meinem desktop passiert ist
ist nudel mit lax
nudel mit lax am sonntag
gibt es immer wenn es nudel mit lax
am samstag auch gab
sonntag nudel mit lax
gibt es immer die reste vom samstag
deswegen gibt es
chat
meint ihr ich habe so einen high iq speiseplan
im kopf dass ich automatisch
immer schon weiß was es sonntags
ich weiß nur was es sonntags
gibt weil das die reste vom samstag
sind da habe ich das secret
meines speiseplans geleakt
wie da was überbleiben kann man muss
einfach genug machen
easy massive leak
ich muss gerade mal ein paar
fenster zumachen
ok wo sind wir stehen geblieben
so ich muss das ganze jetzt im flash
speichern wie viel monitor haben wir 2
beide fast
gleich groß
und nicht groß
23,5
gibt es sowas
wenn es sowas gibt 23,5
ansonsten 24 zoll
manch einer wird sagen
oh das ist aber klein
ich brauche mein 80 zoll curved
ja aber dann sitzt ihr wahrscheinlich
auch nicht nur wie ich gerade gefühlt
mit dem gesicht 20 cm vom monitor
weg ah ok 30 vielleicht
oder
40 nicht weit vom monitor
weg auf jeden fall
ups das wollte ich
moment moment moment
warum kann man überhaupt
einem bool ein string
zuweisen was ist denn das schon wieder
c++ warum geht das
warum ist das syntaktisch erlaubt
true soll das sein
bool ist nur ein int
ja das mag ja alles sein
aber die können ja schon mal ein bisschen mehr checken
als irgendwelche ultra low level kram oder
ich mein niemand möchte
seriously einem string einem bool zuweisen
es kann meinetwegen auch gerne compiler fehler geben
aber
ihr kennt meine meinung über die sprache entwicklung
von c++
wenn es einen fehler werfen würde
wollen wir mal gucken ob es ein warning ausgibt
hat es ein warning es gibt
sehr viele warnings aus
warum eigentlich
warum gibt es eigentlich so viele warnings aus
config set but not used
ja das ist wurscht
handle vs protocol frames
missing initializer
what
damit mach ich doch überhaupt nix
aber nein es gibt kein warning
es gibt kein warning dafür
vielleicht muss ich das auch irgendwo
usen erstmal dass er meckert
vielleicht muss ich das auch irgendwie usen
in den webprojekten habe ich eigentlich
so gut wie keine compiler warnings
da fix ich das immer alles bei c++
ist mir das scheiß egal
nö das juckt das ist dem egal
das ist dem vollkommen egal
dass ich ein string zuweise
ist auch schon dämlich oder
wie auch immer
so also machen wir mal weiter
app config ich muss das ding irgendwie speichern
auf der disk
meine wlan passwörter
initial über den access point der aufgeht
und ich geh dann über das web interface aber
das fast machen wir heute nicht auf
wir hardcoden mal ein passwort
also wir nehmen das passwort was aktuell schon ist
und dann schreiben wir es da mal rein
aber
ich muss
es ja da noch auslesen
also wir brauchen auf jeden fall schon mal was
um die sachen im flash
persistent abzuspeichern und dafür
gibt es eine nice klasse in arduino
die nennt sich
preferences
das ist quasi ein wrapper
um den nvs storage
was soll das eigentlich werden
das ist ein esp32
mit display
das teil
und darauf soll ein webserver laufen
mit websocket support
nur über https
wo man seine wifi credentials
setzen kann
und am ende wird noch ein qr code
angezeigt auf dem display
das sag ich eher so um zu gucken
wie man das macht
storage
dann brauchen wir noch einen
constructor
den wir aber private machen
ich hab da so eine idee
private constructor
der muss nämlich sagen
hier beginn
sonst funzt das dem ding nämlich nicht
dann brauchen wir ein prefix
der vor alle variablen
die ich im flash speichere angehängt wird
das es keine konflikte gibt
nennen wir den mal einfach
appconfig chatgib
chat
also dann noch mal eine frage
gibt es in c++ sowas
name of
ich mein das ist schwachsinn an der stelle
man brauchts nicht wirklich aber
nee ne sowas gibts nicht
warum gibts die ganzen coolen sachen in c++
eigentlich nicht
was soll name of machen
name of gibt den namen der variable
es macht im prinzip
also es würde im prinzip genau das machen
was ich hier stehen hab
das würde an der stelle relativ wenig sinn machen
aber später
wenn ich irgendwelche sachen
serialisieren will auf dem flash
dann würde es schon sinn machen
weil dann müsste ich nicht mit strings rumhantieren
sondern zum beispiel
also ein vorteil hätte das hier
wenn ich jetzt hier schreibe name of
appconfig
und
ich würde die klasse ändern
dann gibts erstmal ne compiler warning
weil es das nicht mehr gibt
wenn ich das hier hardcoded habe als string
und das hier oben umbenenne
kann ich das hier vergessen
name of gibts mit
macro magic
je nach compiler
ok
name of operator for modern
c++
simply obtain the name of
a variable type macro file 2k
scheint beliebt zu sein
aber das ist irgendwas
ja aber das macht
im prinzip genau das was ich haben will
name of
name of person address zip code
das ist im prinzip genau so was
wie ich mir das vorstelle
lasst uns mal reingucken
wie er das gebaut hat
ich sag jetzt mal vorsichtig
allzu kompliziert kann es ja nicht sein
aber es ist c++
also insofern
wo ist denn der source code hier
davon überhaupt
name of
ok
alter
was
das ist einfach mit einem c
die dinger sind ja
ah ne das ist irgendeine gcc eigenheit
mit dem raute
oder
ja funktioniert
easy
das ist irgendeine
ok
dann verstehe ich
das mit der raute ist irgendein gcc ding
ja das ist schon enormst
pains champ
ja moment
name of geht ja nicht nur für variablen
für funktionen
für alles mögliche
sogar für e-names habe ich gelesen geht das
also der wird in der library schon ein bisschen mehr machen
aber das finde ich hübsch
dass das so easy geht
das gefällt mir
da hat zumindest der c-preprozessor
bei mir wieder pluspunkte gesammelt
aber wir brauchen es ja trotzdem nicht
ok
storage begin app config
so jetzt können wir den kram speichern
also
settings
ich teste erstmal ob das prinzipiell
funktioniert
also wir machen mal so ne
wenn ihr ne bessere idee habt sagt bescheid
ich wurstel mir da jetzt mal was zusammen
app
config
ja und hier lade ich den kram jetzt
im prinzip storage
get string
so
name ist wifi
hier guck dafür ist das
dafür wäre das name of jetzt halt echt praktisch
vergessen irgendwas um zu benennen aber
wir lassen das weg
default value ist
default value ist
ähm
das was ich hier vorhin
gesetzt habe
ja schauen wir mal
so also sprich
er liest vom flash versucht er
die wifi 1 ssid
auszulesen wenn das nicht geht dann nimmt er den default
wert von hier was leerer
string ist wir testen das mal nur damit
und ich brauche jetzt noch was zum
schreiben
keine ahnung
write to flash
nennen wir es mal so write to flash
und
dann machen wir im prinzip das gleiche
quasi storage
set
string
put string
wieder das hier
und im prinzip auch das hier
so
zum
testen reicht das dann
und dann machen wir das doch erstmal
dann probieren wir das doch mal aus
also
app config
irgendwie config ist auch egal wie
äh
warum nicht
äh
is inaccessible
warum hä warum habe ich denn den private
gemacht
ah ich weiß warum ich den private gemacht habe weil ich
glaube ich was anders machen wollte
jetzt gehts ok config
so config war irgendwie eine wifi 1 ssid
gleich keckel
ist eh nur zum ausprobieren
so
und dann machen wir mal da was
temporäre neue instanz von
und sagen wifi
ssid 1
ok
so wenn das funzt dann sollte der ja
ah moment moment ne ne das funktioniert
ich muss erst noch sagen config
write to flash
so wenn das jetzt funktioniert den kram
im flash zu speichern
dann sollte der jetzt gleich mehrfach
hier einfach nur keckel locken
und dann ist gut
schauen wir mal
bin gespannt
oder er crasht
weil das nicht funktioniert mit dem schreiben
er lockt nix
das schau mal
wifi 1 ssid not found
ok nice
also das hat anscheinend schon nochmal net
funktioniert
warum net
warum nicht
es macht doch jetzt eigentlich
keinen sinn das das net funktioniert hat
port string
wifi 1 ssid
wifi 1 ssid
und dann
gibts da noch irgendwie sowas wie save oder so
save ne
das ist glaube ich schon
da habe ich auch write to flash
hat das alles funktioniert ja
hä warum geht das nicht
ich starte mal neu
ich starte mal neu
warte mal vielleicht ist es jetzt drin
hä hä warum nicht
täglich net
aber er hat nicht gemeckert
der müsste
moment moment der liest das gar
führt er den konstraktor überhaupt
aus so
führt er den so aus ja muss er doch oder
mach mal hier
0w heißt das ding
beste name dafür
wifi ssid 1
machen wir mal ein paar locks rein
warum ist sowas einfaches schon wieder so
so weird kompliziert
keck
oh
bester lock
save load
dass ich wenigstens weiß was passiert okay
oh
ah das check ich jetzt nicht
was kann denn da dran groß verkehrt
sein
er lädt die sachen vom flash
und
er
das kann fehlschlagen
das kann fehlschlagen
vielleicht schlägt das
storage initialisieren fehl
aber da würde ich jetzt erwarten dass der
irgendwas meckert
schlägt das storage initialisieren fehl
haben wir die nvs partition
ja haben wir
hä
und wir schreiben auch das gleiche mit dem gleichen
das verstehe ich
jetzt nicht warum das nicht funktioniert
ups was jetzt
was
was
alter diese fehlermeldung man
ach so
die fehlermeldung ist okay
die fehlermeldung ist okay wenn auch sehr
ja
äh unspezifisch
wo genau
ich hätte jetzt eigentlich erwartet man kann da
easy in den storage zu schreiben
ja du bräuchtest
ohne scheiß da warte ich drauf
dass irgendwie eine automatische AI
hä
chatge
ich kapier's null
wo ist das problem
also wir machen das jetzt mal ganz unabhängig von dieser
komischen klasse da unten okay
das das kommentieren wir einfach
mal aus
so wir nehmen jetzt hier preferences
nsding storage
sagen
dann hier storage
begin
prefix
keckel ist vollkommen egal wie das
heißt so jetzt lassen
wir das hier einfach weg sagen jetzt
storage
put string
ach
ne
string null
mit dem content kek
w
kann das sein dass das speichern
einfach nicht richtig funktioniert hat
vorhin
da hätte er nicht gesagt
das war einfach leer
das war einfach leer
was aber doch überhaupt keinen sinn
macht
ich hatte es doch
das doch gesetzt
so also
put string so und jetzt lesen wir
das hier einfach aus
storage
get string
und zwar das was hier
was bei null steht
und das geben wir aus
ich würde erwarten dass jetzt
kek w in der ausgabe kommt
parameter
übergeben ne brauch ich net
ich hab das ja hier gesetzt ich hab das ja hier gesetzt
ich hab das ja hier gesetzt
und dann habe ich es gespeichert
und dann habe ich es gespeichert
das sollte doch eigentlich gehen
schauen wir mal schauen wir mal was jetzt ist
also spätestens jetzt gibt es ja wirklich nichts
was nicht funktionieren könnte
jetzt gehts das geht
hä was mach ich denn hier verkehrt
bin ich jetzt ganz ganz
furchtbar verwirrt
ich mein ja der hier
der string ist leer das ist mir auch klar
solange nichts drin steht ist der leer
aber ich schreib ja was rein
machen wir es nochmal rückgängig
so
so
ich erstelle ne neue config
danach setz ich
wifi 1 ssid
auf kekel
und dann write ich
wifi 1 ssid
in flash
und warum ist die denn das nächste mal
net da
ok wir schreiben jetzt mal einfach nur das wir sehen
das es nicht leer ist
putten wir mal hier
omega kekel rein
und hier
putten wir rein default das wir sehen
an welcher stelle es jetzt leer ist
musste den constructor nicht explizit
aufrufen nee
das hier called den
default constructor
und man sieht das auch
weil die logmeldung aus dem
constructor kommen
das ist leer
ist mein logger richtig das ist ne sehr gute frage
ja ist er
wir können ja auch noch
blub mal was dahinter schreiben
dass man sieht
guck load ist
in dem default constructor drinne
x fatal danke für den sub
aber 0w ist ja nicht config
doch ist es
ey
das ist doch gerade der sinn
in der config schreib ich aufs flash
und in der config lese ich von der gleichen stelle
im flash
das ist schon ne absicht check ich schnell
das check ich net
achso
oh bin ich dumm
alter ich bin so hängen geblieben
ich weiß das nirgends wann zu
das hat alles funktioniert
ich habs nur nirgends wo reingeschrieben
ihr habt es aber auch nicht gesehen chat
alle blind
pass mal auf jetzt funktioniert es
jetzt steht da
kekel
großbuchstaben drinne
ich hab langsam echt kein bock mehr
ok also das erste problem haben wir schon mal
gefixt
nämlich das ich nirgends wo zugewiesen hatte
achso ja gut jetzt ist klar
ich schreibs jetzt ja auch wieder net rein
das ist jetzt
das eine zum anderen
so jetzt funktioniert es
ok ich war einfach nur zu dumm
es liegt ausnahmsweise nicht an c++
ok
ok
so ich bin sehr zuversichtlich
dass es jetzt einfach funktioniert
ja es funktioniert alles
sehr schön
ich bin voll in freundlichkeit
für jeden
auch mein freund
aber auch für auch mein freund
ja
so
ich mach da auch jetzt
so ein bisschen
also
ich hab's halt
oder
also
warte mal
also
ok
Das ist halt das Dumme, wenn ich das jetzt hier machen könnte, mit Name of, wäre das halt gar kein Problem.
Da würde ich mich jetzt, ich garantiere euch, ich werde mich irgendwo jetzt vertippen, bei irgendwas.
Put bool, Wi-Fi first, und zwar, Wi-Fi first, okay.
So, jetzt schreiben wir das alles da rein.
Jetzt brauchen wir den gleichen Shit hier oben nochmal.
Äh, bisschen umständlich alles, aber was willst du machen?
So, Wi-Fi SSID, ich hab doch hier, ich hab 100 pro hier irgendwas verkehrt geschrieben, ich seh's bloß, ich weiß nicht.
Ne, ja, jetzt weiß ich, was ich gefragt hab.
Ich hab Chat-GPT gefragt, ob man in Terraform, wie man in Terraform, ähm, quasi, nen If um ne Ressource macht.
Nicht wirklich um ne Ressource, um ein Key in einer Ressource.
Also, stellt euch mal vor, ihr habt in Terraform sowas.
Ja, Ressource, keine Ahnung, ihr wollt hier in Terraform irgendwas zuweisen, was so aussieht, okay.
Blub, äh, Keckel, gleich 1, und Blub, äh, gleich 2.
So, Blub gleich 2 wollt ihr aber nur machen, wenn, keine Ahnung, If, Enf gleich Brot, so, oder Test, oder, oder so, ja.
Es gibt nichts.
In Terraform, was sowas machen kann.
Nix.
Und da hab ich Chat-GPT gefragt, sag mal, wie kann man das umsetzen?
Hat Chat-GPT sich auch ganz wirren Kram zusammen halluziniert, was man angeblich macht.
Es hat sogar gesagt, man könnte, da musste ich mal kecken, es hat sogar gesagt, man könnte in Terraform angeblich sowas machen.
So, jetzt ist das ja, nein, Chat-GPT, das geht nicht.
Es, es ist eigentlich lustig, ne, dass es in Terraform kein gescheitens If gibt.
Also, du kannst in Terraform, kannst du sagen, If, ja.
Gleich Dings.
Das kannst du sagen in Terraform.
Das funktioniert, aber das setzt Blub zu Null.
Ich möchte Blub nicht, also gar nicht setzen.
Ich will nicht, dass da Null drin steht.
Ich will, dass Blub nicht gesetzt ist in Test.
Oder besser gesagt, in was anderem als Test.
Und da hab ich nix gefunden, außer irgendwelche komischen extra Blocks gedünst, das in Terraform zu machen.
Und das erstaunt mich an Terraform immer.
Wie, wenn man Probleme hat.
Und die most basic Programmier-Fluss-Sachen oftmals einfach nicht vorhanden sind.
Übrigens ähnlich wie dieser Operator in C++ hier.
Komm, jetzt kann ich es mal rückgängig machen.
Weil ich nicht weiß, wo wir aufgehört haben.
Ja.
Ja, wir lassen es jetzt einfach so.
Sagen wir mal so, das in die GCC-Geschichte finde ich jetzt auch nicht, nicht so viel hübscher.
Weil ich ja hier schon in die Fall drinne stehen hab.
Ich will ja nur zuweisen, wenn das hier hinten Null ist.
Wie auch immer, wir lassen das, ist egal.
Kann man so lassen.
Sieht zwar nicht schön aus, aber im Prinzip immer noch ganz in Ordnung.
So, hier können wir jetzt unsere WiFi-Credentials und Sachen drinne speichern.
So.
Wenn wir Sachen aufs Flash, in den Flash-Speicher schreiben, dann sollten wir vielleicht vorher noch checken.
Nicht, dass ich irgendwie aus Versehen das überschreibe.
Vielleicht sollten wir WiFi-Credentials.
Echt, nur schreiben, wenn die nicht Null sind.
Also quasi, if this WiFi-SSID empty, not empty.
Und das Passwort not empty.
Das ist glaube ich so als kleine Vorsichtsmaßnahme, dass wir jetzt gleich irgendwie fünfmal den Controller reinnehmen.
Okay.
Okay.
Setten müssen, nicht verkehrt.
Und das gleiche machen wir im Endeffekt für zwei.
Ja, das ist übrigens auch der Grund, warum ich das nicht irgendwie als eigenen Typ und als Array oder sowas mache.
Wir haben genau zwei Sachen und das ist so noch übersichtlich.
Ja, das ist glaube ich als Schutz davor, dass wir nichts schreiben und sonst irgendwie den WLAN-Access kaputt machen.
Nicht verkehrt.
Okay.
Wub, wub, wub, wub, wub, wub, wub, wub, wub.
Wub, wub, wub, wub, wub, wub, wub, wub, wub.
So.
Dann lassen wir das erstmal so.
Ähm.
Ich, ich fummel mal an meiner WiFi-Config selbst noch nix rum, ja.
Ich, ich schreib da einfach mal irgendeinen Kram rein, der nicht gültig ist.
Hack W oder irgendwie.
Hackle und dann massive Passwort.
Highly secure.
Highly secure face rolled übers Keyboard Passwort.
Okay, und das da unten lassen wir weg, weil das schwach ist.
Das war jetzt nur zum, zum ausprobieren.
So, das schreiben wir jetzt einmalig in das Flash rein.
Und danach schon löschen wir das wieder.
Weil eigentlich will ich das nicht hier im, im Sketch setzen, sondern über das Webinterface im Browser.
Aber nachdem ich keinen Bock hab, jetzt das vor meinem Handy auszumachen, brauche ich initial einmal WiFi-Credentials drinne.
Und ja, ihr könnt das abschreiben und euch versuchen einzuloggen, das wird nicht funktionieren.
Und dann schweißt ihr das wieder raus.
So, und dann können wir die ganze Sache jetzt ans Webinterface schicken.
By the way, Leute, was findet ihr schöner?
Wenn wir das so machen?
Also, wir haben zwei, wir haben zwei Varianten, wie wir diese, diese App-Config anlegen können.
An, äh, also instanziieren können.
Entweder so über den Konstruktor.
Was haltet ihr denn davon?
Was haltet ihr denn davon?
Was haltet ihr denn davon?
Oder können wir sowas machen hier?
Static, App-Config, Load from Flash.
Da ist irgendwie klarer, was passiert.
Und im Prinzip können wir immer noch das gleiche machen.
Naja, ein bisschen, ein bisschen hässlicher ist es vielleicht, ja.
Äh, was hat der für Schmerzen?
Ah, Moment, es muss ja ein Punkt, ein Punkt muss es sein.
Kein, ohne hinten muss es auch Konfig-Punkt sein.
Und das jetzt private machen.
Hm.
Ähm, findet ihr das schöner so?
Was man jetzt sagen kann hier, keine Ahnung, Auto, Konfig, gleich, App-Konfig, Load from Flash.
Findet ihr es besser so, oder, oder App-Konfig, ja, Konfig 2.
Das ist die kürzere Variante auf jeden Fall, aber du weißt ja nicht so genau, was passiert.
Load from Flash ist es, okay.
Was sagen die anderen Community-Gigs?
Was sagen die anderen Chat-PP-Gas?
Was sagt ihr dazu?
Ich tendiere auch zu Load from Flash, weil hier weißt du gar nicht, dass überhaupt irgendwas passiert.
Du schlägst halt was an, ja.
Dann lassen wir es so.
Ich glaube, das gefällt mir jetzt instinktiv irgendwie auch besser.
Cringe-Syntax.
Wobei, kann man?
Ne, das ist kein Struct, ne.
Ne, da geht es natürlich nicht.
Aber wenn es ein Struct wäre, würde es funktionieren.
Würde es aber auch nicht wirklich viel besser machen.
Okay.
Okay.
Mal letzten Check machen, ob das noch tut.
Logger.
Ich muss mir unbedingt mal ein, ja, meinetwegen, ich muss mir unbedingt mal ein Makro machen hierfür.
Ob ich das schon tippe?
Du siehst das auch nur, weil das Hersteller-SDK das alles so ausliefert mit CMake und sowas.
Load from Flash.
Ne, Moment.
Ne, ne, ne, ne.
Falsch, was ich hier mache.
Ne, richtig, Konfig.
WiFi, SSID, so.
Da sollte jetzt der Mist drinstehen, den wir eben geflasht haben, bevor ich es gelöscht habe.
Also, irgendwie, keck HD oder was auch immer ich da reingeschrieben habe.
Äh, what?
Errors?
Ah, okay.
Wenigstens mal ein Error, mit dem man was anfangen kann.
Return, Konfig.
Komisch, dass mein Visual Studio hier nichts angezeichnet hat.
Wupp, wupp, wupp, wupp, wupp, wupp.
Wupp, wupp, wupp, wupp, wupp.
Aber das gefällt mir schon einmal.
Es ist eigentlich von der Handhabung her so ganz nice.
Gucken wir mal, ob es funktioniert.
Zack.
Ja, Funst, warum auch immer ich das als Error...
Gut, die anderen Sachen findet er nicht, aber das ist in Ordnung.
Wo wir gerade dabei sind...
Wo wir gerade dabei sind...
Ich meine, wir können ja zumindest...
Noch, weil das werden wir früher oder später eh brauchen.
Wir können ja zumindest noch hier machen.
Guck mal.
Ähm.
Host Name und NTP Server.
Das brauchen wir eh.
Früher oder später.
Das konfigurierbar zu machen, ist definitiv nicht verkehrt.
Ja, generell C++ Bildsysteme, das alles.
Ich verstehe gar nicht, warum sie das nicht auf die Reihe kriegen.
Es würde ja die ganzen Sachen vielleicht...
Naja, gut.
Das Bild macht es nicht wirklich einfach.
Wenn es wenigstens mal eine offizielle Library Registry oder irgendwas gäbe.
Dieses ganze Header-File rumgefrickle da.
Das ist so richtig seit 30 Jahren outdated.
Also wollen wir im Endeffekt noch...
Host Name.
Aber das ist kein Bool, das ist ein String.
Static IP.
Ja.
Äh.
Static IP ist...
Für Noobs.
Habe ich jetzt einfach mal so definiert, ja.
Ja.
Host Name.
Was haben wir hier?
This.
Storage.
Put.
String.
Kommt hier weg.
Static IP denke ich mal drüber nach, nachher.
Aber das brauchen wir jetzt erstmal nicht.
Okay, NTP ist noch drin.
Und jetzt machen wir noch ein...
Default.
Ein Default Host Name.
Und zwar...
Der Host Name ist standardmäßig DisplayChamp.
Allerdings nicht einfach nur DisplayChamp, sondern es ist DisplayChamp plus, ähm, ESP get MAC-Adresse.
Das ist nice, weil dann selbst wenn ich, wenn, selbst wenn man quasi mehrere Geräte flasht,
mit dem gleichen Hostname.
Gibt es immer noch nen...
Randomizer hinten dran, dass die sich nicht in die Quere kommen.
Nicht, dass es groß passieren würde, aber das glaube ich ganz, ganz gut so.
Okay, jetzt haben wir den ganzen Kram hier.
Nice.
Dann können wir doch mit dem WiFi-Krempel weitermachen.
Also meine...
Moment, Moment, Moment, Moment.
Ha.
Haha.
Wenn wir jetzt einfach hier...
Bei WiFi-Config...
Das dranhängen...
Dann, dann leake ich ja meine WLAN-Passwörter.
Was jetzt nicht schlimm ist, weil da stehen ja noch keine WLAN-Passwörter drinne, aber die, die will ich ja nicht...
Ich will die, ich will ja eigentlich die WLAN-Passwörter auch gar nicht ins Frontend irgendwie da übertragen, ne.
Also, Config gleich.
So, also wir brauchen jetzt hier App-Config.
Ja.
App-Config, Load from Flash.
Dann müssen wir das Ding irgendwie anders nennen.
Ähm, äh, Config, äh...
Äh...
Ähm...
Was ist es denn?
Config...
Data.
Config 2.
Ja.
How to not name...
Config...
Jason einfach?
Config.
Noch besser.
Ach, ja.
Irgendwie...
Keine Ahnung.
Ja, ne, ich kann nicht eins Config oder eins Config nennen.
Das ist doof.
Ich muss das, ich muss das Jason nennen, ja.
Und, und das hier auch.
Dann, dass es halbwegs einheitlich ist.
Und das hier auch, aber...
Benamungsdinger.
So, hier Config, bam.
Noch besser. Oder Underscore-Config.
Wir können auch einfach das Ding App-Config nennen.
So, dann ist...
Gibt's gar keinen Konflikt mehr.
App-Config.
Es...
So, und...
Wir setzen den Config jetzt...
Ne, Moment, Moment, Moment.
Moment, Blödsinn, Blödsinn.
Was mach ich denn hier?
Das gefällt mir irgendwie nicht.
Also, weil jetzt müsste ich hier wieder diesen ganzen Shit setzen.
Wifi 1, SSID und sowas.
Ne, manchmal so Name-Off ist schon ganz cool.
Ich mein, das können wir machen.
Das ist jetzt nicht so schlimm.
Wir könnten aber auch,
anstatt das hier drin zu machen,
was haltet ihr denn davon,
wenn wir sowas hier bauen?
Ähm...
JSON-Document?
To JSON.
Fahren wir hier rein?
Wir machen das hier drinnen.
Vielleicht brauchen wir das ja woanders auch noch.
Woop, woop, woop.
Was sagt ihr dazu?
Was findet ihr sinniger?
Das hier nochmal alles zu machen,
oder im Endeffekt hier dann im Endeffekt
plus zu sagen, to JSON und gut ist.
Was man dann quasi sagt,
to JSON.
Äh...
Dann bräuchte man...
Ey, dann bräuchte man config hier auch nicht mehr, oder?
Dann bräuchte man noch jetzt...
Dann bräuchte man nur noch root
config
gleich.
Wie realistisch das ist.
Nicht
sonderlich realistisch.
Aber dann könnten wir das auch so machen.
Das finde ich gar nicht mal so doof.
Ehrlich gesagt.
Wobei, ich muss noch die Passwörter rauslöschen.
Ja...
Wir machen das so.
Wifi 1, SSID.
Da können wir auch
explizit die Passwörter weglassen.
Wifi 2, SSID.
Wifi 1, first.
2, SSID.
First.
So.
Passwörter machen wir jetzt anders.
Wir sagen...
Wo ist denn hier NTP und sowas?
NTP...
No...
Hostname...
Die Passwörter lassen wir nämlich explizit weg.
Die sollen nicht mit...
Da in das JSON reinkommen.
Wir können
aber für das Frontend
noch die Info
setzen, dass
ein Passwort gesetzt ist.
Das ist glaube ich gar nicht verkehrt.
Da können wir nämlich in dem Passwortfeld,
in dem Passwortinput im Frontend quasi
Sternchen anzeigen lassen, falls ein Passwort gesetzt ist.
Dann nennen wir das hier
irgendwie mal Wifi
1
Passwort set
True.
Oder nicht.
Ja, ist die Frage.
Adivarius, ja ich bin da auch noch
unschlüssig.
Appconfig
Wifi 1
Passwort is empty.
Wenn das not empty ist, dann ist
Passwort set true.
Okay, so.
Damit kann man doch jetzt schon ein bisschen was
anfangen im Frontend.
So, jetzt hängt ja das hier auch alles an.
Mich ärgert die Benahmung von dem
Ding immer noch, aber meint drauf geschissen.
Zack, Flash.
Ah, okay, was jetzt?
Achso, ich hab das angelegt,
aber ich returne nix.
Das wird temporär mal wieder ausgeschmissen.
Bumm.
Leute, während das flasht,
afgklo.
Ja, eine Runde AskIquarium für euch.
Fullscreen.
Ah.
Wieder da.
Eine Runde AskIquarium.
So, hat er jetzt geflasht
eigentlich?
Ah, warum logge ich immer noch
ein Error? Das ist hochgradig verwirrend.
Kein Error mehr loggen.
Info loggen reicht
voll und ganz.
So.
Okay.
Aha, guck mal da.
Wir haben unsere ganzen Sachen
im Frontend, die wir brauchen.
Massive.
Jetzt könnten wir eigentlich ein bisschen
ein Formular oder so bauen.
NTP.
Ja, NTP ist nicht gesetzt.
Es gibt
keine NTP-Config.
Dementsprechend ist die leer.
Macht ja nix.
Ja, das ist doch ganz nice.
So. Okay, wir machen
jetzt mal eine Sache, um zu sehen, ob das hier
das andere auch funktioniert.
Irgendwie Sensor.
Und...
Kann ich denn...
Warte mal.
Wir können da auch direkt JSON übergeben.
Das ist vielleicht auch nicht verkehrt.
Gleich sagen...
String Output wegen das
Serialize
JSON
Message
Output
und dann übergeben wir das weiter an
WebQL Output.
So.
Weil jetzt kann ich hier
sagen...
Finde ich immer doof, dass man das nochmal anlegen muss.
So.
Und da gibt es jetzt Sensor
Gleich
Temp
Temperature Read
Will einfach eine Nummer haben, die sich
ab und zu mal sich ein bisschen
wechselt.
Könnten auch einfach random
übertragen lassen. So, flashen wir das
nochmal. Data bekommen wir
hier und dann müssen wir gucken, ob
ähm...
Sensor gesetzt ist.
So, jetzt sollte er auch gleich die Daten vom
Temperatursensor anzeigen.
Was?
Oh...
Was willst du denn?
153...
Ne, wo hat er was?
Achso...
Return.
Wisst ihr, das ist auch immer geil, dass da
bei C++ immer solche
Wand an Fehlermeldungen kommt.
So, das würde reichen.
Wupp, wupp, wupp, wupp, wupp.
Okay. Guck mal.
Die Werte für den Temperatursensor
die updaten sich deutlich
schneller als die Werte für die anderen Dinger.
Außer er liest dann manchmal das gleiche aus.
Dann kannst du nix machen, ja.
Ich muss sagen, das gefällt mir jetzt echt gut.
Damit kann man schon was anfangen.
Jetzt müssen wir halt ein bisschen keck
WHTML drum herum bauen.
Ja, und wir haben auch noch...
Es ist...
Ich mein, mein, es ist doch noch
relativ übersichtlich alles.
Und es scheint auch ohne zu crashen
zu funktionieren.
Also soll mir recht sein.
Okay. Ich weiß nicht, ob ich jetzt
mit dem Webinterface heute anfangen will.
Keine Ahnung.
Keck JavaScript.
Oder ob wir noch...
So...
Ja.
Könnten...
Ich weiß nicht, ob ich
Keck JavaScript und HTML jetzt
aushalte. Ein bisschen.
Wir könnten zumindest mal... Okay, wir machen was
ähnliches einfach, ja.
Um zu wissen, ob das funktioniert.
Ob wir irgendwie die WiFi-Sachen setzen...
setzen können.
Ach, nee. Moment.
Haha. Nee, nee, nee, nee.
Wir müssen ja noch was anderes bauen.
Und zwar...
Aktuell startet der
hardcoded mit meiner hier
vor euch versteckten
WLAN-SSID
und dem Passwort.
Der soll ja eigentlich aus App-Config starten.
Also brauchen wir App-Config
schon mal hier ganz oben, vor WLAN.
Und wir müssen
jetzt gucken, dass
der sich WLAN-technisch
in der richtigen Reihenfolge connectet.
Nämlich, der soll zuerst
gucken,
ob
WiFi... Also, wenn
WiFi 1 first ist,
dann soll er zuerst mit dem ersten WLAN anfangen.
Wenn nicht, dann mit dem zweiten WLAN. Und wenn das
nicht geht, das erste WLAN nochmal probieren.
Also brauchen wir da irgendwie so
ne Logik drumherum.
Und probieren wir
das doch mal aus. Also...
Also wir haben jetzt sowohl in WiFi 1
als auch in WiFi 2 irgendeinen Mist reingeschrieben.
Der nicht funktioniert,
aber das ist ja in Ordnung.
Also, als allererstes,
bevor wir überhaupt
irgendwie WiFi-Connection
müssen wir
erstmal checken eigentlich,
ob überhaupt
was gesetzt ist.
Weil es könnte ja sein, dass der
gerade Factory Resetted wurde.
Wobei, das müssen wir glaube ich auch noch bauen.
Factory Reset.
Also, es kann ja auch sein,
dass das Ding initial zum Einrichten da ist.
Das heißt, wenn keine WiFi-Sachen
gesetzt sind,
dann
will ich ein Access Point aufmachen.
Können wir eigentlich mal ausprobieren, wie man das
gescheit macht.
Also sprich, wenn... Wollen wir das hier einbauen?
Ja, das bauen wir nicht hier ein.
Also, im Endeffekt
müssen wir gucken,
if
config
WiFi 1 SSID
Schon wieder, ne?
Dass die SSID
nicht leer ist.
Oder, dass
die zweite WLAN-SSID
nicht leer ist.
Kann der Fall überhaupt auftreten?
Weiß nicht.
So, wenn das...
Oh ne, umgedreht. Wir machen es umgedreht.
Wenn die leer sind,
beide.
Wenn die beide leer sind,
dann
AP.
Oh, da muss ich ein Access Point aufmachen.
Wenn nicht,
dann
Connect.
Und wenn da nichts funktioniert, dann Crash.
Okay, so muss das laufen.
Genau, ja.
Okay, wir machen auf jeden Fall
ein WiFi-Disconnect davor.
Falls... Aber ich meine, gut,
das ist ja eh noch nicht connected an der Stelle.
Also, das macht eigentlich keinen Sinn,
an das Connect davor zu schreiben.
So, WiFi beginn.
So, wie machen wir das denn jetzt,
dass es in der richtigen Reihenfolge connected?
Also, das ist ja schon mal ganz gut hier alles.
Ja, und Set Gateway
und so auch wunderbar.
Und HTTPS Listen und so alles,
wenn WiFi oben ist.
Wie baue ich das jetzt?
Also, Ziel ist folgendes.
Der soll gucken,
mit welcher SSID er anfangen soll.
Die probieren.
Wenn die nicht geht, die zweite probieren.
Macht es langsam schon Sinn,
das Setup auszulagern.
Ja, vielleicht machen wir so ne...
Ja, sag ich recht, vielleicht machen wir so Mool.
Try, Connect, WiFi
oder sowas.
Da können wir auch WiFi-Disconnect machen.
Äh...
WiFi Off.
Ja, auf jeden Fall.
Erase AP, warum nicht.
WiFi Disconnect.
String.
So, SSID, String,
Passwort.
Ja, wenn die
SSID
leer ist, dann
returnen wir
false.
Da können wir nix machen.
Und ansonsten sagen wir WiFi...
Ansonsten sagen wir das hier im Endeffekt.
Ne, Moment.
Das da, das da nicht.
Ja.
Passt doch eigentlich.
Versucht sich zu connecten zu
WiFi whatever.
Und hier unten ist dann return
true.
Wenn die SSID gesetzt ist,
schmeißt er erstmal, falls es irgendwelche
bestehende Verbindungen gibt oder die noch hängen,
schmeißt er die weg. Dann versucht er sich
zu verbinden und zwar nicht damit, sondern
damit.
Dann guckt er, wartet
20 Sekunden,
ob er sich connecten
konnte. Ne, ne, das ist ja Blödsinn.
Ich will ja hier auf jeden Fall
nicht failen an der Stelle.
Sondern,
ich will einfach nur gucken,
ob er sich connectet hat.
So, wenn das, wenn das
ungleich, ja,
wenn er sich nicht
connecten konnte,
dann returnen wir auch false.
Dann hat es nicht funktioniert. Ansonsten hat er
sich connectet. Wir setzen noch NTP und
freuen uns. So, heißt
auch, jetzt müssen wir mal gucken, wie wir das in der richtigen
Reihenfolge machen. Also, können
wir quasi sagen, if,
wenn, ne, config.
Da bin ich mir jetzt nicht sicher. So, er soll mit
wifi 1 anfangen.
Also,
machen wir jetzt hier, anstatt
so, sagen wir ihm
try
connect wifi.
Wenn das nicht
funktioniert hat,
und zwar mit config
wifi ssid 1
config
wifi password 1.
Wenn das nicht funktioniert hat,
dann abkacken.
Ne, dann, ne, ne, ne,
nicht abkacken. Dann
wifi 2 probieren.
Können wir nicht einfach so machen?
Wenn wifi,
wenn wifi 1 connect nicht geklappt
hat, und,
ja, machen wir das mal
unten hin, oder so, keine Ahnung.
Er und
wifi 2 nicht geklappt hat,
wir schreiben da unten jetzt rein, ja, Chillfreak,
du hast recht, wir schreiben da unten rein,
wifi 1
und 2
failed. So, ich muss einmal
noch was machen, und zwar in die config,
ich will das jetzt ja gleich mal ausprobieren, mal was
sinnvolles reinschreiben, und zwar
wifi ssid 1, das ist nix,
was es irgendwie gibt, ist
techw
und das config,
das password ist
irgendwas, ok?
So, und wifi 2
muss das einmal noch speichern gleich.
So, es wird beides nicht
funktionieren, aber das ist ja auch mal tech.
So, und wifi 2 ist
pepo shy.
Mit
auch krassen Passwort.
Config write
to flash.
Leute, wir sollten dieses write to flash
ein bisschen saven,
und zwar, sobald
wir das gespeichert haben, muss das Ding sich
restarten, oder?
Soll ich da, meint ihr
eigentlich soll da ein hardcoded restart
danach einbauen?
Weil es macht keinen Sinn,
das zu schreiben, ohne zu restarten.
Man könnte jetzt sagen, nee, eigentlich
ist das nicht der Job von appconfig,
dem
ESP neu zu starten,
aber so kann man's
nicht vergessen.
Wir können höchstens noch sagen, restart gleich
true, dass man das
überschreiben kann, oder so.
If
not restart
Nee, if restart.
Dann sag ich hier einmal false.
Wenn es wifi 2 nicht
gibt,
dann versucht er ja als Backup
wifi 1 noch. Das ist ja gerade der Sinn davon.
Wenn du ein neues WLAN hast
und es ausprobieren willst, ob es funktioniert,
trägst du es einfach ein als 2,
dann sagst du ihm, du willst,
dass der hochkommt mit wifi 2,
indem du einfach das hier auf false setzt, also übers
Webinterface dann, du musst ja nicht wissen, wie es unter der Haupt
funktioniert.
Und wenn es nicht geht, probiert er als
Backup immer noch wifi 1.
Aber du musst restarten, weil nur beim restart
versucht er sich überhaupt zu reconnecten
ins neue WLAN.
Andererseits theoretisch
streng genommen geht das ohne
Reboot. Wifi
disconnect und reconnect.
Streng genommen geht's ohne Reboot.
Aber den
ESP juckt es halt gar nicht, ob
der rebooted muss oder nicht.
Ich glaub wir machen das mit dem Reboot jetzt.
Okay.
Ich lass den
einmal noch flashen gerade,
dass die
diese Zugangsdaten
da drinstehen, die fake Zugangsdaten
sind. Guckt's im Hals.
Und dann nehm ich das raus.
Hunger.
4 Stunden
30 Broggerstells.
Okay, ich drück mal Reset.
Jetzt sollte er das eigentlich alles finden.
Äh.
Hallo, ESP please.
ESP please.
Nein, nicht flashen.
Oh, ich kack nur.
Eigentlich nur Monitoren, Mann.
Äh, ja, er hat keine Fehler
mehr geschmissen. Okay, nice.
Weißen wir
das weg. Okay.
Ja, und das Return muss
raus. Lul, das macht ja keinen Sinn.
Okay.
Jetzt vielleicht nochmal kurz abbrechen.
Jetzt vielleicht nochmal hier was
loggen. Ja, wir machen
hier logge.
So.
Try connect
to SSID.
Wir
loggen nicht das Passwort, das wäre ein bisschen
bescheuert. Okay.
Jetzt weiß er Bescheid.
Jetzt bin ich mal gespannt, ob er das macht.
Okay.
Try connect to SSID piposchei.
Äh.
Ah, da vorne. Ah, hier.
Hier. Try connect to SSID
kekw.
You must call begin first.
Ach gut, ist ja okay.
Doch, doch, doch, das funktioniert.
Das klappt. Ja.
Der versucht sich zuerst zu kekw zu connecten.
Das geht nicht.
Dann versucht er sich zu piposchei
zu connecten.
Der lässt sie nicht
rein.
Und dann schmeißt er eine Fehlermeldung
und startet sich neu.
Was soll er auch sonst machen?
Er kriegt keine WLAN-Verbindung.
So.
Ich schreibe mal I1 and 2.
Ja.
So, und jetzt hier brauchen wir noch ein else.
Und jetzt machen wir das umgedreht.
Jetzt machen wir das einfach umgedreht.
Wenn das hier nicht gesetzt ist.
Ja. Ja, du hast recht.
Ein bisschen Delay schadet nichts.
Äh.
Jetzt machen wir das hier einfach umgedreht.
Hier testen wir jetzt zuerst
WiFi 1, WiFi 2
und dann hier unten WiFi 1.
Also das kann man bestimmt eleganter machen,
weil WiFi 1 ist ja ein
Ja.
Ich muss mal schnell was fordern, Clay.
Oder einfach retry alle 5 Sekunden
statt reboot.
Kommt ja aufs gleiche raus
im Endeffekt.
Ich glaube, ich bleibe beim reboot.
Dann kann ich es nämlich hier mit
Aber wir können ein Delay
einbauen. Das ist wahrscheinlich wirklich
ganz sinnig.
Ich weiß bloß nicht, wo wir das Delay einbauen sollen.
Ehrlich gesagt.
Hier.
Ein WiFi Delay, man.
Fünf, eine halbe Sekunde warten.
Ist eigentlich blöd.
Da machte das ja jeder wobei.
Moment. Das macht der nur nach dem connect.
Wenn es failt.
Wenn es failt.
Nur da.
Der wartet 20 Sekunden zu connecten.
Ob es funktioniert.
Je nach.
Je nach würden wir jetzt tatsächlich nochmal
jeweils eine Sekunde warten.
Aber.
Das lass' weg.
Oder, warte mal, wir können das, können wir das nicht sogar so machen.
If.
Ob, ist das doch schöner, oder?
Weniger, weniger Nesting.
Den Web Surfer Listen können wir hier unten rein machen.
Das If funktioniert aber auch nur, weil er von oben nach unten evaluiert.
Sonst wäre Problem angesagt.
Bin ich lost oder ergibt der Fehlerstring keinen Sinn?
Ist er das da?
Warum?
Warum? Der kackt ab, wenn er, der kackt mit dem Fehler ab und rebootet danach.
Ja, weil er, weil er hier mit WiFi 2 einfängt und dann WiFi 1 probiert.
Und hier probiert er zuerst WiFi 1 und dann WiFi 2.
Eigentlich könntest du, ohne Scheiß, eigentlich könntest du den Fehler,
eigentlich könntest du das komplett schenken, ja.
Eigentlich könntest du einfach reinschreiben, WiFi Fail oder Gutes.
So, Chat, wir machen gleich weiter.
Ich muss jetzt was.
Essen.
Ich hab Hunger.
Können wir uns denn zu Gemüte führen?
Das Ziel ist bei...
Nee.
Windows viel schneller.
Ja, das gucken wir morgen früh, da gucken wir nicht heute.
Was ist das?
Äh.
Lego 1000 Füßler, man.
Okay, das ist optimales, optimales Futter, Futter Content für mich.
So, ich futter mal kurz mein Müsli.
Hier, Pippo Snack, Pippo Fett, wobei von Müsli wird man nicht Pippo Fett, da wird man dünn.
Zumindest haben wir sich auch ein bisschen bewegt dabei.
Haben wir noch mehr Müsli Enjoyers hier.
Lachs, nee, das gab's, das gab's heute Mittag und es gibt morgen wieder Nudeln.
Nice, Lego 1000 Füßler, excellent.
Oh ja, ich könnte mir zum Essen wieder mal eine Runde Barbecue Pit Boys angucken.
Oh, ne, Kokona Grill.
Was passiert da gerade?
Ich glaube, diese 4 Minuten 40 Video waren echt aufwendig zu produzieren.
What is happening?
Oh, so ein Ding hätte ich früher gerne gehabt.
Da hätte ich den ganzen Tag Oma und Opa genervt, weil ich damit hier durchs Haus gedüst wäre.
Oh, wie nice, ein PS3 Controller.
Nee.
PS4 ist das, oder?
Also ich habe keine PS5, ich weiß nicht, wie der aussieht.
Wie lange ist das Teil?
Kein schön langes Teil, hä?
Erst das Müsli, dann die Milch, nee.
Lass den.
Genauso sehe ich das auch.
Ich kann labberig das Müsli auch nicht ab.
Eigentlich sind diese Videos immer voll belanglos, aber irgendwie gucke ich trotzdem gerne.
Und es sieht aus der Kameraperspektive viel schneller aus als dieses.
Okay.
Hat was von Snake.
Gleich beißt sich selbst in den Arsch Gatschi.
Ja, ja, ja, ja.
Bam.
Geht weiter.
Oh, hat Fireship was Neues?
Jetzt.
Leute, wir machen heute eh Podcast-Stream.
Wir können das jetzt auch zusammen, während ich esse, das NixOS oder Nixwhatever-Was-Es-Da-Geht-Video angucken.
Oh, das ist PeopleSleep, oder?
What is it?
Let's get into it.
Before we start, here's a quick drawing to make sense of everything.
As I mentioned earlier, Nix is a few things.
It's an OS, known as NixOS, a package manager, known as NixPackages, and a language, known as the NixDSL.
What?
Nix, das habe ich noch nie gehört.
Ja, das ist wahrscheinlich diese, diese JSON-Config-Sprache.
It's important to keep in mind that each of these are not the other and stand on their own.
Moreover, they can be used independently.
For example, I can start running NixPackages as my macOS package manager of choice, without having to run NixOS.
Hat der macOS gesagt gerade?
Also, die coolen Leute verwenden nicht mehr Homebrew, oder wie?
Ich weiß schon, was das heißt, aber ich weiß nicht, wie NixDSL aussieht.
Nix D...
What the fuck?
NixDSL.
Nix Language.
Das sieht ein bisschen einf...
Öh, das ist einfach.
Viele Klammern haben sich fast von Er...
Jason plus Erlang, so.
Ja, Homemanager.
Ah, wirklich?
DSL.
Leute verwenden Nix auf macOS, nicht, nicht mehr Homebrew.
If you're a macOS user, Nix is simply better than Homebrew or MacPorts.
The same goes for Linux users.
Yep, even you, ArchSnowflakes.
Nix isolates dependencies.
Arch, besser.
Making it easy to create reproducible and reliable environments.
More so than other package managers.
You can roll back changes, perform atomic upgrades to prevent failures, and create immutable environments.
This is a key principle of Nix.
Environments should be immutable to ensure maximum confidence.
Let's install a Nix package.
Installing a package can be done with this simple...
Ich finde auch, also, es sollte alles immutable sein.
User input sollte auch immutable sein.
Und generell Tastatur-Input auch immutable.
Alles immutable.
Weil dann können wir uns sicher sein, es gibt keine Fehler.
Du kannst damit zwar auch nichts machen, aber es gibt keine Fehler.
Ist halt die Frage, was dann wichtiger ist.
Was machen können oder keine Fehler haben.
One-Liner.
This will install RipGrep with any other dependency, making sure it's available to the user immediately.
The flags IA stands for Install Attribute.
And Attribute here would be NixPackages.RipGrep.
Let's take a closer look.
Nix installs RG with a pinpointed version.
In this case 14.1.0.
And this is stored at slash nix slash store hash and kept as a DRV, which is a Nix derivation.
A derivation.
Specifies how to produce a particular build output.
For example a package or a binary from specific input.
Jetzt mal ernsthaft.
Es gibt doch für diese ganzen Dinger etablierte Wörter.
Warum müssen die sich alle immer irgendeinen Shit ausdenken, wo du nichts mit anfangen kannst.
Und dann erstmal wissen, ah, ein Attribute ist ein Package.
Ah, eine Derivation ist ein Install-Skript oder sowas.
For example a package or a binary.
Von spezifischen Inputs, such as Source Code, Build Scripts and Dependencies.
Checking which RG now shows that it's installed by Nix Profile and provided by bin slash RG under Nix.
I can now happily start RipGrepping, searching for code on my machine.
Remember we talked about how big the Nix Package Registry actually is?
Well, there's a bunch of ways to search for downloadable artifacts,
the most direct of which is a simple search of the official directory at Nix's...
Das muss man ausprobieren.
Das muss ich mal ausprobieren, ich habe auch einen perfekten Test dafür.
Das probieren wir mal aus.
Ich habe einen guten Test.
Nix OS Registry.
Blake.
Nix Dev.
Ah, wo finde ich das denn, wo der gerade drauf war?
Nix Package Search.
Nix OS Search.
Ja.
Packages.
Passt mal auf.
Wenn's das hat, ready zum installieren bin ich begeistert.
ESP-IDF.
Anscheinend nett, hä?
Zusammen geschrieben.
Mit einem Minus vielleicht.
Nein, es hat kein ESP, ESP-IDF, Nix OS, gibt's nicht.
Hä?
Wie jetzt?
Doch jetzt?
The Easy Way.
Das sieht für mich nicht aus wie The Easy Way, ehrlich.
Also ein Git-Clone auf das offizielle Repo vom Hersteller ist für mich der deutlich easyere Way als das hier.
Okay, erster Test fehlgeschlagen.
ESP-IDF gibt es nicht.
Gibt es...
Okay.
Bisschen unfair.
Was könnten wir ansonsten noch suchen?
Meiner Wireshark und sowas würden wir nicht gucken, das wird auf jeden Fall drinne sein.
ESP-Tool.
Okay, das stimmt.
Ähm, der VM-Champ.
Oh, den gibt's nicht.
Sway, der hat das bestimmt drinne.
Ja.
Okay.
Es hat viel, aber es hat nicht alles.
Wenn's da out of the box usable ESP-IDF gäbe, fänd ich cool.
Weil aktuell musst du halt jedes Mal...
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Es wäre in der Mitte nicht so gut.
Geht Clone auf Videos zu accounten, geht auf Version-Taxt, geht auf gestote Version- freshly
erstellen und danach $Toolchain installen.
Das ist nicht kompliziert.
Aber wenn du es fertig gäbe, mit einem Command, warum nicht.
...
The Nix Package Registry actually is...?
Well, there's a bunch of ways to search for downloadable artifacts, in most direct, which
is a simple search of the official directory at nixos.org.
Netcat, for example, is obviously provided in many versions and flavors.
I'll pick one of them and run the same package installation command and run the same package
Das heißt, es ist ein bisschen wie ein Docker-Image, wenn jedes, nur dass es kein Docker-Image ist, wenn quasi jede Software seine Dependencies alle mitbringt.
Oder ist das Ding so schlau und checkt, dass, was weiß ich, fünf Pakete Dependency auf OpenSSL haben und installiert OpenSSL dann nur einmal.
Wenn ihr dieses Terminal seht, jetzt wisst ihr, warum ich immer einen zweizeiligen Prompt habe, damit mir sowas nicht passieren kann.
