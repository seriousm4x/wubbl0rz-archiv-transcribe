Und leute ich muss unbedingt meine hetzner rechnung heute bezahlen habe ich vorhin gesehen ich habe noch sieben cent offen über die letzten zwei monate
Nicht dass das irgendwie noch auswirkungen auf den account hat wenn das zu lange offen bleibt
Weiß zwar nicht wie ich die sieben cent verursacht habe aber irgendwie muss ich sie hingekriegt haben
Na gut sieben cent ich meine das paar vms mal kurz für ein paar minuten gestartet wahrscheinlich
Dann würde ich sagen bevor das stream so richtig angelaufen ist
Wir kommen gerade mal das übliche was immer am anfang sonntag im stream mache
Eigentlich wirklich das ist ja nicht dass ich das hier machen würde hätte stokes abzusahnen
Wir kommen zwar die aktuellen github trends der woche an und hoffe ich hoffe dass es nicht wieder 95 prozent nur
So interessant das sein mag
gerade wenn man sich da super für interessiert aber
Ich fände es nice wenn man auch mal ein paar andere projekte sieht als nur in den github trends
ok
ei ei ei ei ei
Ei
China chinesen gedichte zeug okay das ist keine wobei vielleicht ist auch von ihr geschrieben weiß ja nicht aber
warum ist okay warum ist chinese poetry in javascript
also immer
das ist auch ein bisschen
Irgendwas was nur so halb legal ist würde ich mal vermuten wenn ich das
titel Kurze anhöre
Was
cross
platform file explorer
Überlegt gerade ob ich da ja ob ich mir schon gewünscht ein cross platform file explorer gehabt zu haben aber okay
gibt es ein bild von
Okay, es sieht ein bisschen aus wie Mac.
Und das für alle Plattformen.
Okay, written in Rust.
Hauptsache written in Rust, weil blazingly fast und so.
Ja, gut, aber ich bin ja froh, dass es noch andere Projekte gibt, die nicht AI sind.
Oder Kryptogramm.
Ich wüsste jetzt zwar ernsthaft nicht genau, warum ich das wirklich verwende.
Will außer, dass sie eine hübsche Webseite haben.
Die im Endeffekt aussieht wie eine App, die man gleich im App Store sich beziehen kann.
Sieht schon sehr Apple-Style mäßig aus.
Das ganze Icon, der Hintergrund, die Anwendung an sich.
Aber gut, das ist in Rust programmiert.
Da würde mich doch an der Stelle gerade mal interessieren, wenn das in Rust programmiert ist.
In Rust und in JavaScript.
Mich würde interessieren, welches UI-Framework die benutzen.
Wollen wir mal bei den Cargo Dependencies.
Was ist mit denen los?
10.000 Zeilen Dependencies.
Okay, das ist Rust.
Ja, das darf man nicht vergessen.
Für Rust gibt es für jeden Furz extra Packages.
Aber das ist schon krass.
Man könnte ja fast sagen, es ist bloated und nicht mal blazingly fast.
Ja, was verwenden die denn als Apps?
Ah, die haben verschiedene Frontends.
Für die eigentliche App.
Okay, die mobile App ist M.
Was ist denn M?
M-Main.M
Ah, das ist, das ist, ich hätte fast gesagt, das ist Objective-C.
Ist das Objective-C?
Ne, das ist nicht, das ist nicht Swift.
Ich bin mir nicht so wirklich sicher.
Was das sein soll, aber okay.
Ähm, okay, die haben Android, das ist bestimmt Java, Java-Shit, ja.
Ähm, die haben bestimmt, ja, ja.
Okay, das ist natürlich auch ein Ansatz.
Der dürfte dafür sorgen, dass man unterm Strich wahrscheinlich potenziell die besten Apps machen kann.
Beziehungsweise die besten Frontends machen kann.
Indem man sich für jede Plattform.
Die jeweils beste.
Das beste UI raussucht.
Die Sache ist bloß die, das ist halt enorm aufwendig.
Okay, was heißt, äh, nicht so ganz.
Auf dem Desktop ist es Elektron-Shit.
Okay, Tauri, aber, sagen wir, Elektron-Krempel.
Ja.
Naja, okay, gut.
Weiter, was haben wir sonst noch?
Äh, AI.
Ich weiß nicht, was ist da wahrscheinlich auch AI?
Ja, wenn wir schon so in der Richtung.
Ja, Text, okay, AI.
Ähm.
Ähm, Re-React-Kram?
Wahrscheinlich?
AI?
Hä?
Was soll das sein?
China-Chinesen-Kram.
Ah, Admin-Dashboards.
Ich, ich hab den, die, die Existenz dieser Dinger eh nie kapiert.
Weil, ich mein, das kann man sich einfach ja selbst aus den fertigen Komponenten bauen.
Also, keine Ahnung.
Gibt's ein paar solche Admin-Dashboards.
Ähm.
Accelerate.
Okay, AI.
AI.
AI.
Deep-Fake-Software-for-all.
Ja.
Kann man sich ja vorstellen, was damit hauptsächlich deepfaked wird.
Ähm.
AI.
Ein TypeScript-Map, äh.
Ob, weil, weil, ORM ist ein was?
Ein Object-Relational-Mapper oder wie auch immer man das genau ausspricht.
Also quasi ein TypeScript-Mapper.
TypeScript-ORM-F...
Ja.
TypeScript-ORM.
Naja.
Gut.
AI.
Und nochmal AI.
Okay.
Ich bin begeistert.
Es war bei den Github-Trends tatsächlich ein paar Sachen drinne, die nicht AI waren und
wo man sich, wo man zumindest mal ein bisschen neugierig ist, was steckt dahinter.
Ja.
Moin Leute.
Alle schon am Start.
Ah.
Ja.
Ja.
Ja.
Ah escr...
B...
Bad Gil.
Oder.
Fa...
Fast noch.
Fast noch Bad Gil.
Wobei ich schon ungefähr ne Stunde auf bin.
Naja.
Ist sogar ein bisschen länger.
Fast schon eineinhalb Stunden auf.
Also hundertprozentig wach bin ich noch nicht.
Ja das mit den Zip-Domains, was wir letztens, wo wir uns letztens drüber unterhalten haben
im Stream.
Das hat ja noch ein bisschen mehr Kreise gezogen die letzten Wochen über.
habe ja noch ein bisschen mehr scam versuche also was ich meine ist ja ja
was ich meine ist so was hier so könnten die betrüger das machen die
schon google war ja der schlauen meinung punkt zip als domain registrierbar zu
machen ja das ist genau das was ich gemacht
habe das kann ich euch auch empfehlen blockiert einfach in eurem dns oder im
browser oder wo auch immer ist am besten macht punkte zip domains niemand
braucht realistisch gesehen hier zum aktuellen zeitpunkt punkt zip domain
sollte es irgendwann mal wirklich was geben was ihr euch unbedingt angucken
wollt was nur auf einer punkt zip domain verfügbar ist was wahrscheinlich nie
passieren wird ja muss das halt mal kurz ausschalten aber es ist aktuell einfach
nur bescheuert das anzulassen also ich würde komplett deaktivieren warum die
das eingeführt haben oder warum es deaktivieren soll
naja
weil man zum beispiel weil eine der ersten domains die registriert wurde war
microsoft minus office punkte und wenn du auf die seite gegangen bist hast du
ein login gesehen der aussieht wie für microsoft accounts und das war natürlich
du kannst es sicherlich erraten keine microsoft seite dann gibt es noch die
gestern gibt es noch den basic trick dass es aussieht wie als würdest du was
runterladen von sagen wir mal geht habe aber in wirklichkeit lädt sich von anderen
seite runter
das ist ziemlich für den arsch mit der zipp mit den zippen warum dies gemacht
haben ganz ehrlich ich bin mir da nicht sicher aber es ist google das heißt im
zweifelsfall werden die sich schon bewusst gewesen sein dessen dass das
security technisch bisschen blöd ist aber sie haben sich gedacht für ihr
geschäft dürfte es besser sein aus irgendwelchen gründen und deswegen haben
sie es halt gemacht weil ich glaube nicht dass google einfach nur zu doof war das
vorauszusehen aber irgendein vorteil muss es google bringen ich verstehe es auch nicht so genau
also ich hoffe ja dass die neue firefox version standardmäßig das mitbringt weiß
gar nicht ob es da pläne gibt ich hoffe ja dass sie das einführen dass die es gibt
schon die ersten addons zippen moff domain blocker und jubel bringt vielleicht ja
auch mit dem nächsten ich glaube nicht dass sie nur nachträglich sicherheitsbedenken
hat hatten wahrscheinlich nicht wahrscheinlich schon im vorfeld sicherheitsbedenken haben aber irgendein manager bei google hat gesagt wir machen das trotzdem
und da kommt also was kann mir durchaus vorstellen dass er am besten ist natürlich direkt in seinem dns einzutragen punkten domain zweck damit gut ist ansonsten ich sehe hier es gibt
addons dafür wobei man sie fragen muss warum man wirklich nicht addon aber bei
addons hast du auch wieder was zusätzliches ich meine ich hatte ja schon mal selbst das problem
dass ich in malware verseuchtes addon hatte im browser glücklicherweise ist nichts passiert es
gab mal einen also nicht installieren leute
sagst ich sag's jetzt mal es gab mal eine erweiterung für chrome glaube ich
die nannte sich kappa everywhere so und genau hier sieht man es ja auch und ihr
könnt euch ihr könnt euch ja schon denken was die was die erweiterung
gemacht hat wenn du twitch emotes benutzt hast konntest du quasi auch auf
alle du konntest auf allen seiten twitch emotes sehen die haben quasi die seiten
gescannt nach twitch emotes haben die dann replaced fand ich teilweise ganz
lustig gerade weil ich ja auch jemand bin der auf twitter noch in twitch emotes
schreibt und so so hatte ich installiert und nach einer weile kam halt raus dass
die dass die erweiterung removed wurde und jetzt als malware klassifiziert ist
weil hier ist hier steht es auch weil der der creator also der der programmierer
von der erweiterung an irgendwelche chinakinesen den zugang für seine app
verkaufte also man sieht das schon auch
hier steht es auch weil der der creator also der der programmierer von der erweiterung an irgendwelche chinakinesen den zugang für seine app verkaufte also man sieht das schon auch
wenn man irgendwie überprüfte browser browser addons und sowas installiert
dagegen bist du nie geweiht dass das nicht mal nach hinten losgehen kann
das heißt die beste vorkehrung dagegen ist nur addons verwenden die es schon
quasi die große verbreitung lange history haben wobei eine große
verbreitung natürlich auch mehr zerstörungspotenzial hat wenn was
wirklich passiert und nach möglichkeit halt jetzt nicht auch 50 addons oder so
installieren
man könnte jetzt sagen gut einfach er uns nicht auto updaten
ja ok aber da hat man andere probleme eventuell weniger weniger addons also ich
habe ich habe auch nur ich habe drei addons installiert ich glaube man sieht
sogar hier jeder stimmt gar nicht guck mal ich habe vier addons installiert ich
habe einen volume regler installiert wo man einzelne tabs die lautstärke leiser
stellen kann man kann sie nicht wirklich lauter stellen das geht zwar theoretisch
aber das übersteuert dann also man kann eigentlich lautstärke nur wirklich
sinnvoll leiser stellen in den tabs also lautstärke steuerung für unterschiedliche
tabs habe ich installiert ich habe you blog installiert dark reader weil manche
seiten halt immer noch nicht gescheit ausschauen und return youtube dislikes
das war's mehr addons habe ich nicht reicht's auch so und in meinem browser den ich privat verwende für für meinen für meinen zeug
und youtube da hab ich eigentlich außer you blog nichts installiert ich glaube das
einzige was ich im firefox installiert habe ist wirklich youblog und in meinem chrome habe ich
glaub auch nur das hier und nichtmal dark reader installiert wie apple zu
deiner bank werden will okay der high performer henning da frage ich mich bei
dem namen ist das ein witz doch ich hab ich hab ffz habe ich
installiert aber ich gucke ja auch nicht in meinem browser wo ich normalerweise in youtube eingeloggt bin und so twitch das ist das ist doch bestimmt so eine job
ich guck ja auch nicht in meinem browser wo ich normalerweise in youtube eingeloggt bin und so twitch das ist das ist das doch bestimmt so eine job
Sponsorblockname, oder? Ja, gut, ist es.
Sieht man ja schon am Video.
Das ist der High Performer Henning, das ist
irgendwelche, ähm,
nicht wirklich Community-Gruppe-Videos sind,
sondern eher was Kritisches drüber. Anders kann ich mir
das hier nicht erklären.
Sponsorblock, Sponsorblock habe ich nicht, ich skippe
das immer, manuell.
Fun Terminal Commands for New User.
Moment, haben wir nicht letztens gelernt,
bei dem, bei dem, äh, bei, bei,
äh, wie hieß der?
Linux Guides, der, der Reacted hat
auf meinem Video, dass das Terminal,
dass das eigentlich überhaupt nicht notwendig ist.
How to make coding fun.
Da muss, ich muss mal kurz,
lasst mich mal kurz in das, in die
Kommentare, ich muss, ich muss es mir einfach
geben jetzt, was die
Leute noch zu, zu, zu meinem Video
geschrieben haben.
Alter, das ist ja mega erfolgreich,
guck mal hier, da hat sich,
da hat sich das Reacten, jetzt bin ich
grad nicht, bin ich blöd hier,
da hat es ja richtig gelohnt, hat ja richtig,
hat ja viel mehr Views als das andere, wie viel hat
er meins?
Ja, jetzt hat er mich verlinkt, ne?
Original Video.
Hallo Leute, hier.
Jetzt wüsste ich eigentlich noch eine Counter-Reaction, okay, meins hat 70,
immerhin, ähm, ja,
ich fand das, ich fand das by the way, hab ich ja damals
auch gesagt, überhaupt nicht schlimm, was er erzählt hat
über mein Video, weil ja manche Leute,
sogar bei mir unter Video, jetzt haltet euch mal fest,
wie bescheuert die Leute sind, guck mal,
irgendjemand hier unter meine Video hat geschrieben,
ich soll ihn verklagen.
Ja, guck mal, lässt sich ein,
er nimmt das Video und sagt, ja, ich würde
dir anrechnen, rechtlich vorzugehen,
hehehehe,
komplett, ich glaube,
ich glaube, der mag den anderen nicht sonderlich,
ja,
rechtlich, gegen was, warum,
warum sollte ich allen Ernstes
rechtlich dagegen vorgehen,
weil einer mein Video gezeigt hat
und seine Meinung zugesagt hat,
da ist überhaupt nichts Schlimmes,
der Dennis Freiberger,
da ist überhaupt nichts Schlimmes
dabei gewesen in dem Video, er hat halt nur
gesagt, dass er manches anders sieht und zum
größten Teil, witzigerweise,
war,
haben wir sogar einer Meinung,
ja, bei den, bei den meisten Sachen.
Es ist das Einzige, wo wir uns, glaube ich,
grundsätzlich unterschieden haben, war,
dass ich Linux in der VM
zur täglichen Benutzung eigentlich recht nice finde
und er mag, und er mag das in der VM
überhaupt nicht, er meint es ja okay, er hat vielleicht seine Gründe
für, aber der Rest, der Rest
waren wir uns doch erstaunlich
einig, ja, also keine Ahnung,
ich wollte mal kurz gucken, was haben die Leute da eigentlich hier noch
als Comments geschrieben, soll auch jeder nutzen,
was er will, ja, das sehe ich genauso,
sage ich mir auch immer. Ich, ich habe mir übrigens
überlegt, was, was haltet ihr denn
davon, wenn ich, warte mal hier, Oggi,
das ist ja das Original-Video, so, das
Original-Video hier hat ja Titel
Linux ist kein Ersatz für Windows.
Ich habe mir überlegt, ob ich einen zweiten Teil
dazu machen sollte, den ich nenne
Windows ist kein Ersatz für Linux.
Oder es einfach mal aus der
anderen Sicht beleuchten, weil ich erzähle
ja hier nur, wie das ist für jemand, der sich
denkt, Microsoft, Windows geht mir auf den Sack,
ich will auf Linux umsteigen, warum
das vielleicht keine gute Idee ist, vielleicht
soll ich mal ein umgedrehtes Video machen,
warum vieles, was ich mit Linux mache, so unter
Windows gar nicht so ohne weiteres möglich
ist, beziehungsweise einfach nur abfuckt.
Vielleicht kann ich mal
einen zweiten Teil dazu machen.
Wobei ich nicht weiß, ob ich das dann nennen soll,
Windows ist kein Ersatz für Linux.
Vielleicht ist es zu ähnlich und die Leute checken es nicht,
dass es ein neues Video ist.
Aber gut, muss man passendes Thumbnail
dafür machen. Muss mir das mal aufschreiben.
Zweiter Teil,
so.
Ja, ich wollte mal kurz gucken, ob die Leute noch irgendwelche blöden Comments
geschrieben haben. Ich finde das eigentlich immer ganz lustig.
Das sind ja
richtig sachliche und normale Comments.
Was ist denn da los?
Dann mach bitte auch, MacOS ist
kein Ersatz für Windows.
Das Problem ist, dass ich mich mit MacOS nicht wirklich
gut auskenne. Also meine
MacOS-Erfahrungen sind wirklich nur sehr
rudimentär, ja.
Die Kommentare sind ja komplett
sachlich und so. Was ist denn los?
Das sind,
so die ersten Comments da waren viel lustiger.
So, ich weiß nicht, was dieser Maxi
da wieder zusammenspinnt.
Also ich bin übelst aufgeregt. Aber die waren
jetzt ja voll, ganz, ganz normal.
Ja, MacOS kenne ich
mich nicht wirklich gut genug damit aus. Und da
stichhalte ich
bloß was zu sagen zu können.
Das Einzige, was mich immer übelst
verwirrt unter MacOS ist
Control
Windows Alt und
die haben ja, du hast ja so eine
so eine Spezialtaste unter Mac.
Ich weiß gar nicht, wie die heißt. Die Apple-Taste.
Weiß ich nicht, sogar Control.
Ne, Command
meine ich, genau. Du hast
hier unten vier Stück
anstatt
drei, die man
normalerweise hat.
Und
ich bin da immer verwirrt, weil
ich nicht weiß, wann ich was drücken soll.
Zum Beispiel für
Control-C, Control-V drückt man unter
Mac Command-C
Command-V.
Objektiv betrachtet
ist es besser. Das mag eigentlich
alles sein. Das ist einiges. Objektiv
betrachtet besser.
Was man nicht macht aus
Gewohnheit. Ich meine, es ist zum Beispiel auch
objektiv betrachtet besser gesund zu essen.
Aber
macht trotzdem nicht jeder.
Ups.
Und ich hab's nicht geschafft, mich da dran zu gewöhnen.
Gibt es ein
Ja, also es gibt noch
die Möglichkeit, das auf Intel-Hardware
zu installieren.
Wenn du eine halbwegs aktuelle hast,
solange das noch geht.
Du kannst es auch in der VM installieren,
aber das haben wir ja sogar im Stream schon
ausprobiert. macOS in der VM ist
sagen wir mal,
es ist nicht wirklich gut benutzbar.
Also du kannst das benutzen, um
mal so ganz grob zu gucken.
Aber du hast, also die Oberfläche ist
super langsam. Es gibt Grafikfehler.
Also es ist nicht zu vergleichen hier mit einem
Linux in der VM. Linux in der VM
ist ja extrem zackig.
Ist ja sogar kaum ein
Unterschied zu einem Native Desktop System.
Ernst. Ich habe auf der Arbeit jahrelang
Native
Linux Notebook gehabt.
Am Ende sogar mit einem halbwegs
modernen
Surface Book mit irgendwie 8 Kernen und sowas
drin. Also ja,
man könnte schon sagen, manches war
Native auf dem Notebook schon schneller.
Aber im Großen und Ganzen
merkst du wirklich
keinen Unterschied zwischen
Native Linux, so wie ich
es hier eingerichtet habe und hier in der VM.
Der einzige Unterschied, den du merkst,
ist, wenn du zum Beispiel Videos abspielen
möchtest. Wenn du Videos abspielen möchtest,
geht das in der VM natürlich auch,
aber halt mit viel mehr CPU-Last, weil
du halt kein GPU
oder CPU-Video-Decoding
hast, weil das nicht
durchgereicht wird. Oder zumindest du hast
kein GPU-Video-Decoding.
Ja, das ist halt Pech, aber gut.
Ansonsten fühlt sich Linux
halt wie Native an
in der VM. Und das ist mit
macOS überhaupt nicht so. macOS in der VM
fühlt sich an,
wie Kaugummi.
Zweite GPU dann durchreichen?
Ne.
Zumindest nicht unter Windows mit VMware Workstation.
Das kannst du
höchstens machen, wenn du KVM benutzt.
Unter Linux zum Beispiel.
Und eine GPU durchreicht
und dann die
Hackintosh-Installation machst, quasi
Mac auf einem Custom Intel-Based-System.
Das würde funktionieren,
aber nachdem die meisten ja unter Windows
unterwegs sind, ja.
Bringt dir das ja nix.
Kann man WSL eigentlich auch so
installieren, als man eine Desktop-Umgebung hat?
Also, es gibt die Möglichkeit
mittlerweile
unter Windows mit
WS... Ne, GWSL
oder wie heißt das Ding?
Ne.
WSLG?
WSLG.
Was zum Teufel ist GWSL?
Das ist mir neu.
Kann ich noch gar nicht.
Okay. Also es gibt mittlerweile
einen X-Server für WSL,
ja, sogar, sogar
offiziell von Microsoft.
Die haben sogar
Wayland-Support drin, ne.
Sachen gibt's, ja.
Und teilweise sogar 3D-Acceleration
und sonst was. Also, wenn man
angewiesen ist auf Linux...
Achso, ich glaube, es geht nur unter Windows 11.
Es gab mal eine Preview-Version für Windows 10,
aber ich glaube, es gibt...
Ja, ja, nur...
Das ist anscheinend...
Ach ne, okay.
Geht auf Windows 10, alles klar.
Ja, also, gibt es, gibt es.
Ich muss dir ehrlich sagen,
ich hab's noch nicht ausprobiert.
Am Ende geht's ja irgendwie über RDP
trotzdem rüber.
Und was braucht man für eine GPU mindestens dafür?
Weil einfach in der VM installieren
ist ja wahrscheinlich nicht.
Wäre auch merkwürdig.
In der VM Windows mit WSLG, dann...
Müsste ich tatsächlich...
Also ja, es funktioniert
anscheinend sogar...
Ja, ja, ja, ja, ja, ja, ja, ja, ja, ja, ja, ja, ja, ja, ja, ja, ja, ja, ja, ja, ja, ja, ja, ja, ja, ja, ja, ja, ja, ja, ja, ja, ja, ja, ja, ja, ja, ja, ja, ja, ja.
Sogar Wayland-Anwendungen drüber.
Eventuell, eventuell
kann man damit dann tatsächlich auch...
Guck mal, sie haben Rider laufen.
Ne, nicht Rider.
Pied Charm haben sie laufen.
Und wenn man Glück hat,
kann man dann... Ja, super.
Den ollen X-Calculator.
Wenn man Glück hat, könnte man da
vielleicht sogar eine Desktop-Oberfläche mit laufen lassen.
Und vielleicht,
vielleicht würde man das sogar hinkriegen,
wenn man
...
Also das wäre tatsächlich mal ein Versuch wert,
wenn man das auch
auf einen zweiten Desktop packt, so wie ich
mein Linux, ob man nicht
mit WSLG
Fullscreen-I3 oder
Fullscreen-Sway oder so starten kann.
Und das dann
quasi auf einen zweiten Desktop unter Windows,
dass man dann quasi das ähnliche Setup hat
wie ich hier mit der VM.
Allerdings, dass es in WSL läuft.
Das müsste man tatsächlich mal ausprobieren.
Ich schraube halt nur
ungern rum an meinem
Windows,
an meinem Main-Windows-System
und würde es gerne in der VM testen,
aber ich glaube nicht, dass man das in der VM
testen kann.
Naja.
Gut. Alles klar.
Ja.
Ach so, du meinst den
Desktop in einem extra Fenster
laufen zu lassen.
Du hast doch eine Windows-Kiste. Ja, ja.
Aber ich schraube ungern an der Windows-Kiste rum.
Und,
ich bin mir gar nicht...
Ne, ne. Ich kann es nicht benutzen.
Leute, ich kann WSL auf dem System nicht benutzen.
Jetzt weiß ich wieder, warum ich das noch nie ausprobiert habe.
Ich kann WSL auf dem System nicht benutzen
und nicht gescheit, weil, um WSL
benutzen zu können gescheit,
muss man Hyper-V aktivieren.
Und wenn man Hyper-V aktiviert,
dann muss man irgendwelche
frag mich nicht,
Virtualisierungsfunktionen in Windows aktivieren.
Das können wir mal ausprobieren.
WSL gehen da vor allem.
Mal gucken, ob das geht.
Ich glaube aber nicht.
So, und wenn man Virtualisierungsfunktionen
mit Hyper-V in Windows aktiviert,
dann gibt es Bugs mit
vor allem bei Workstation.
Guck mal.
Unser Background-Changer funktioniert.
Wer sich jetzt übrigens fragt,
woher der nice Background kommt,
jeder kann den Background benutzen.
Und zwar,
ihr geht einfach bei mir auf GitHub
und dann whitepepo happy desktop
und dann ist hier unter
Images
sind alle,
oder auch hier alle Background-Bilder.
Für jede Tageszeit gibt es eins.
Es gibt was für Mittags,
wo der Pepo am Futtern ist,
am Arbeiten ist,
am Energy-Drinking ist,
wo er am Essen,
wo er Frühstücken isst,
ein Cornflakes sich reinhaut,
wo er pennt und träumt,
wo er Zähne putzt abends,
wo er Fernsehen guckt
und dann, wo es dunkel wird,
er weiter Fernsehen guckt,
also whitepepo happy für alle Tageszeiten.
Und wenn einer automatisch,
also wenn einer Linux benutzt
und automatisch den Desktop-Hintergrund geändert haben will,
kann er sich sogar theoretisch eines dieser Scripts hier...
Ja, ihr könnt das auch selber machen,
muss man nicht.
Max und ich haben jeweils was zusammen gescriptet,
dass der automatisch
den Background ändert,
abhängig von der Tageszeit.
...
...
Der Max hat es auch übertrieben, der hat nämlich noch eingebaut, dass der von wetter.in, ist es glaube ich,
er abruft ungefähr, wo man sich gerade befindet und dementsprechend auch weiß, wann Sonnenaufgang und Sonnenuntergang ist
und dann die passenden Zeiten die Bilder einblendet.
Mein Skript ist ziemlich billig dagegen, ich gucke einfach nach Uhrzeit und dann setze ich die Backgrounds.
Ja, man sieht es funktioniert, wir haben einen White-Pepo-Happy-Frühstück-Background, so muss es sein.
Ansonsten lasst mich gerade noch mal ganz kurz gucken bei GitHub Trends, wir haben es zwar schon geguckt heute,
aber ich wollte mal ganz kurz gucken, ob irgendwas interessantes in der .NET Welt trendet, manchmal,
ach Quatsch, nicht Spoken Language, manchmal gibt es ja da ein bisschen was interessantes,
so, zeig mal her.
Microsoft Teams Global Hack, Moment, warum, warum hostet sowas Microsoft selbst?
Achso, ne, das ist irgendeine Konferenz oder sowas.
Windows Dev Home Application, ja den Sinn davon habe ich nicht verstanden,
das haben sie letztens gezeigt, wo ich mir denke, ja gut, wie kann man das?
Windows Exploit, Power Toys, Avalonia,
Avalonia hat jetzt auch ein Business,
hat hier irgendeine Business-Geschichte dahinter,
die wurden doch, wurden die nicht gekauft oder, oder, oder werden jetzt gesponsert irgendwie von irgendwem?
Da war doch was, habe ich doch letztens gelesen.
Avalonia ist doch jetzt, hat doch jetzt irgendwie so ganz so einen Business-Plan.
Ach, keine Ahnung, vielleicht bringe ich es, ich bringe es auch durcheinander.
Avalonia ist ein UI-Framework, wo man Desktop, also grafische Desktop-Anwendungen erstellen kann
und theoretisch auch Mobile für C-Sharp, was mir persönlich lieber ist,
als MAUI, aber ich mag immer noch das XML-UI-Zeug nicht richtig,
aber wenn ich, wenn ich eine .NET, eine .NET-UI-Anwendung machen würde,
dann würde ich es wahrscheinlich erst mal mit Avalonia heutzutage probieren.
Unity, was, was soll das sein?
Ah, ein RGB-Steuerungstool für Asus-Laptops, Alter, da muss man erst mal drauf kommen.
Windows Optional.
Optimizer.
MAUI, geh mal weg.
Got Potato Trended.
Okay, was ist das?
Keine Description?
Ah, Security-Kram?
Workflow Library brauchen wir nicht.
Material Design.
Okay, wenn ich zwei eklige Sachen kombinieren will, dann Material Design und .NET-Sammel-Oberflächen.
Boah, das ist ja ganz schlimm.
Rekt.
TFI-Installer.
Was soll das sein?
Rekt.
TFI-Installer.
Hä?
Ich weiß nicht mal, was das sein soll.
Windows 11 Modification to make Windows Mac consistent.
Okay, irgendwelche Zusatz-Hacks, die ich mir bestimmt nicht installieren werde.
Ihr wisst ja, ich find's immer bescheuert, wenn die Projekte haben.
Ich mein, was zum Teufel soll mir das sagen?
Try to tame the three-headed dog.
Headed dog, ja.
Hä?
Ach, Kerbera.
Okay, das macht tatsächlich Sinn in dem Kontext.
Allerdings, warum schreibt man nicht,
C-Sharp-Toolsets for raw Kerberos-Interaction?
Warum schreibt man das nicht hier oben hin?
Weil ich mein, ernsthaft, das Erste, was du von dem Projekt liest, ist das da.
Und...
Zumindest vielleicht noch einen zweiten Satz hinschreiben, was es ist.
Okay.
Ist GitHub dafür da, um neue Sachen vorzustellen, wie kann...
Nee, GitHub ist dafür da, dass du dein Source-Code darauf hostest.
Allerdings haben die auch so...
Also du kannst ja Repos...
Warte mal, ich mach jetzt einfach mal bei mir.
Hier, keine Ahnung.
Du kannst halt Repos auch Likes geben.
Das heißt halt Sterne in dem Fall bei denen.
Und da gibt's so eine Trending-Übersicht.
Was, wie viel Sterne die Woche oder heute.
Also es gibt für Sterne heute, Sterne Woche, Sterne Monat.
Da kann man halt immer gucken, welche Projekte gerade besonders angesagt sind.
Und da findet man, wenn man sich das regelmäßig anguckt,
durchaus mal ganz interessante Sachen, ja.
Man sollte allerdings nicht den Fehler machen und sich täglich die JavaScript-Kategorie angucken,
wenn man nicht ganz durchdrehen will im Kopf.
Nee, du, danke schön für den Sub.
Pogu Subscriptions, dazu kann man nur sagen.
Ja, ich hab draufgeklickt, weil ich wusste, was es ist und jetzt hier Zeit für hab.
Aber normalerweise sollte man in der Projekt, in der GitHub-Projekt-Kurzbeschreibung
zumindest mal so ganz grob erkennen, was es ist.
Ja, hätten die geschrieben, C-Sharp Kerberos Library noch als zweiten Satz,
wäre ja viel verständlicher gewesen.
Lukas, danke schön für den Sub.
Ich muss mal grad was gucken, wie viele Issues gibt's jetzt hier?
Schraubt mal.
Schraubt mal.
Fuck, Alter.
Ich muss hier, ich muss hier echt mal ran, Leute.
Ich muss hier echt mal ran.
Ich muss echt mal das aktualisieren.
Guck mal.
So viele offene Issues.
Ich glaub, der 4er-Champ 2 muss mal langsam angegangen werden.
Was macht der 4M-Champ?
Oh, der 4M-Champ hat ein Issue.
Ah, nee, nur Bash-Completion.
Das hatten wir schon vom FIPS.
So kommst du nicht in die Training-List.
Naja, ich will auch nicht in die Training-List.
Weil wenn ich in der Training-List bin, muss ich mich ja noch mehr um die Software kümmern.
Und ihr kennt mich.
Nämlich, sobald ich mal was erstellt habe, habe ich meistens keinen Bock mehr daran, weiterzubauen.
Und das, obwohl ich selbst ja oft verwende.
Nee, das Problem ist halt, eigentlich habe ich überhaupt keine Zeit großartig,
mich langfristig, intensiv da täglich um irgendwelche Software-Projekte zu kümmern.
Also, keine Zeit und auch wenig Bock.
Aber auf den 4er-Champ, den ein bisschen zu erweitern und aus den Fehlern zu lernen,
die ich bei der ersten Version gemacht habe, hätte ich schon mal Bock drauf.
Weil ich habe manche Sachen nicht so clever gemacht.
Aber gut, das war auch mein erstes Home Assistant-Add-On.
Also, da könnte man schon einiges verbessern noch dran.
Das ist doch nice.
Der ganze Schub?
Wieso hast du mit 50 Bots geliked?
Oder wie, wie, was?
Ach, der wollte einfach nur wissen, wie du unter anderem dazu gekommen bist, ihn zu liken.
Ja, und wie bist du dazu gekommen?
Hast du irgendwie bei ihm, hast du es einfach zufällig gefunden?
Ja.
Muss man sich im Vorfeld mit sowas befassen?
Wenn man die Ausbildung im IT...
Nö, nö, nö, nö, musst du nicht.
Also, ich sage ja immer, dass ein Azubi eigentlich keine großartigen Vorkenntnisse braucht.
Es ist das Wichtigste, dass der sich für das Thema interessiert.
Natürlich haben die meisten Leute, die sich für das Thema interessieren, schon gewisse Vorkenntnisse.
Das ist nicht verkehrt.
Also, wenn du Azubis hast, die schon ein bisschen Hardware gebastelt haben,
oder welche, die schon ein bisschen programmiert haben, vielleicht schon ein paar Webseiten gemacht haben,
so ist natürlich immer eine super Geschichte.
Aber wichtig zumindest für mich wäre,
und war auch immer, dass sie sich dafür interessieren.
Und das merkt man auch relativ schnell, ob die das interessiert oder ob die da nur ihre Zeit abhocken.
Ansonsten würde ich gar nicht großartig erwarten, dass Azubis große Vorkenntnisse haben.
Du hast dich für eine Umschulung zum Fachinformatiker Systemintegration gewonnen.
Habt nächste Woche Vorstellungsgeprächt.
Sind so Sachen, wodurch man glänzt.
Ach so, wo du sicherlich, also ich kann es jetzt nicht sagen als Azubi, aber als Azubi sicherlich auch,
wo du bei normalen...
Bewerbungen glänzen kannst, ist, wenn du ein Github-Repo hast, ja.
Wo man auch sieht, dass du ein bisschen was gemacht hast.
Ich mein, als FISI vielleicht weniger.
Wobei ich selbst sagen würde, als FISI, selbst wenn sich jemand...
Wenn sich jemand, ähm...
Als FISI bewirbt und der schickt mir ein Github-Repo mit,
fände ich auch nice, ja.
Weil ich bin ja eh der Ansicht, ihr kennt das, ihr wisst das ja,
dass ich der Meinung bin, dass es eh fließende Übergänge gibt zwischen FISI, Fachinformatik, zwischen den ganzen Technikberufen.
Und alle Seiten ein bisschen, auch gerade in der aktuellen Zeit,
äh, wo immer mehr Richtung DevOps, äh, geht bei, bei klassischen, von der klassischen Admin-Rollen weg,
wo auch immer mehr Richtung Fullstack, man guckt sich alles ein bisschen angeht.
Es ist nicht verkehrt, wenn man ein bisschen Ahnung hat.
Also, es ist als Entwickler nicht verkehrt, sich ein bisschen um Infrastrukturthemen Gedanken zu machen, ja.
Dass man sich auf der Linux-Kommandozeile ein bisschen auskennt.
Dass man vielleicht schon mal, äh...
wenn, wenn seine Anwendung, äh, containerisiert läuft,
dass man sich vielleicht schon mal so einen Grundtutorial, äh, angeguckt hat, paar CubeCTL-Sachen, äh, weiß,
dass man auch mal in die Logs reingucken kann von seiner Anwendung.
Und umgedreht, sollte man sich als FISI auch ein bisschen damit auskennen, wie Anwendungen entstehen, wie Anwendungen entwickelt werden.
Und auch die ein oder andere Programmiersprache können jetzt neben Bash und PowerShell,
je nachdem, ob man eher im Windows- oder im Linux-Bereich unterwegs ist,
aber so ein bisschen Ahnung vom Programmieren sollte man als FISI auch haben.
Zumal ich es gar nicht richtig verstehen kann.
Ich weiß, da gibt's genug, ihr könnt mir ja mal, ihr könnt, schreibt mir mal in den Chat, wie das bei euch ist.
Aber ich kenne viele FISIs, ich kann's bloß nicht verstehen, die sagen,
oh, nee, ich bin ja FISI geworden, weil Programmieren nichts für mich ist.
Und, äh, ich, äh, also, die Aussage gibt's oft, aber ich versteh's nicht so ganz,
weil ich finde, es gibt kaum was Interessanteres, wie, äh, Sachen auszuprobieren, äh, an, also,
Programmiertechnisch Sachen auszuprobieren, wie, sei es jetzt irgendwie, was wir hier im Stream schon gemacht haben,
Web-Assembly mit C++ und FFmpeg im Browser und so was, das ist schon ziemlich advanced und krempel,
was wir da gemacht haben, aber es ist halt auch mega spannend, zu sehen, was alles mittlerweile funktioniert.
Oder auch irgendwelche, äh, Microcontroller-Geschichten, äh, zu bauen, oder, äh, auch, sei es auch irgendwelche Kommandozeilen-Tools.
Und da sind wir, und da sind wir mittlerweile bei dem Punkt, man muss keine Web-Frontends, Backends oder, äh, Machine-Learnings,
Sachen programmieren können als Physi und, und so was, aber ein bisschen Ahnung von, von Programmieren und von Anwendungsentwicklung sollte man haben,
denn das kann einem nicht nur zugute kommen, dass man die Anwendung besser, ja, besser betreiben kann, die die, die die AE gebaut hat,
sondern man kann auch hilfreiche Tools bauen, die intern verwendet werden, ja.
Gerade, gerade was Kommandozeilen-Tools angeht, gibt's, äh, in jeder Firma Sachen, die Leute nerven, die man vielleicht in, in, in schöne Kommandozeilen-Tools packen kann.
Zum Beispiel.
So, mal ein Beispiel vom, vom letzten Arbeitgeber, wo ich gewesen bin.
Da gab es immer das Problem, dass die Leute Wartungsarbeiten gemacht haben, also es gab so ne, es gab so ne Change-Meeting einmal die Woche,
da wurde angekündigt, ja, wir machen jetzt auf den, äh, auf dem Cluster ABC, müssen wir jetzt irgendwie Kernel-Update machen,
das heißt, wir starten in der Reihe nach neu, bla bla blub, so, wurde angekündigt, wurde genehmigt, so.
Und dann haben die Leute immer vergessen, bevor sie die Wartungsarbeiten gestartet haben, immer ist übertrieben, aber sehr oft,
haben sie es vergessen, wenn sie die Wartungsarbeiten gestartet haben, äh, im Monitoring-System eine Maintenance einzutragen oder das zu deaktivieren.
Und da kam es öfters vor, dass die Leute angekündigte Wartungsarbeiten durchgeführt haben und dann, dann schlug im, äh, Support bei uns, irgendwann nachts um 23 Uhr auf, äh, System-Down.
Klar, meistens haben die das gecheckt, weil die wussten, ey, Moment, an dem System sind noch Wartungsarbeiten, ah, der Typ hat einfach bloß wieder nicht Bescheid gesagt oder, äh,
hat nichts eingetragen, aber das war natürlich nervig.
Und da hab ich, darf ich dir die Stellenanzeige schicken, was du, ja, klar, schick, schick her.
Wir, wir, ich mein, wir, wir sind ja nicht nur hier, Sonntagmorgens zu Videos gucken.
Das wollen wir gleich auch machen.
Ja, und da hab ich ein Kommandozeilentool gebaut, das haben wir sogar angefangen, hier im Stream zu bauen, damals.
Da hab ich ein Kommandozeilentool gebaut, was, äh, auf jeden, auf jeden Linux-Server draufgekommen ist.
Tatsächlich eines meiner ersten, etwas umfangreicheren, äh, Systeme, äh, Systeme, äh, Systeme, äh, Systeme, äh, Systeme, äh, Systeme, äh, Systeme.
Also, mit umfangreich meine ich jetzt von Command-Line-Parsing bis, äh, automatisch refreshende Ausgaben und sowas.
So, und da hab ich ein Kommandozeilentool gebaut, wo du direkt, wenn du auf dem System drauf bist, eine Maintenance setzen kannst für eine Viertelstunde für das System, worauf du drauf bist.
Das konntest du unter Linux dann so ausführen.
Ah, so hieß das auch.
Du konntest das, oder besser gesagt, das war, äh.
Du konntest das so ausführen.
Das hieß Set-Downtime.
Und was das gemacht hat, war, es hat sich zur Alert-Manager-API verbunden.
Alert-Manager ist von Prometheus das System, was eben, äh, ja, Monitoring, Alarme verwaltet.
Und auch Notifications schickt und solche Geschichten.
Und der hat sich dann verbunden zur Alert-Manager-API.
Musste vorher Proxy setzen und so, dass du rauskommst und alles.
Ja, hat sich verbunden zur Alert-Manager-API.
Und hat dort eine Maintenance eingetragen für das System.
15 Minuten lang.
Für den Hostname, auf dem man gerade drauf ist.
Das heißt, du musstest jetzt nicht mehr entweder beim Support anrufen und sagen, ich starte jetzt mit den Wartungsarbeiten diese und diese Systeme, bitte in Maintenance nehmen.
Oder dort ins Webinterface gehen, dir das zusammenklicken.
Du warst auf den Server.
Du bist auf den ersten Server vom Cluster.
Hast gesagt, ah.
Ich fange jetzt mit meinen Wartungsarbeiten an.
Ich mache jetzt Kernel-Update.
Und dann hast du einfach kurz eingekippt.
Set Downtime.
Bam.
Enter gedrückt.
Und du hattest das System für eine Viertelstunde in Maintenance.
Es gab dann, es gab dann für die Anwendung noch mehr Parameter.
Ja, du konntest dir Maintenance auflisten lassen.
Maintenance für in der Zukunft eintragen.
Alles ein bisschen advanced.
Aber wichtig war mir, dass du einfach nur eingeben kannst.
Set Downtime.
Und bam.
Hast du Viertelstunde, Viertelstunde Maintenance.
Und das haben die Leute dann auch, nachdem es da war, regelmäßig bemerkt.
Und ich glaube, jeder, der mal eine Anwendung entwickelt hat, wird sich, wird das bestätigen können.
Irgendwie freut es einen ja immer, wenn das, was man gebaut hat, dann auch gut ankommt und die Leute das benutzen.
Genau.
Also, da sieht man auch aus dem Gesichtspunkt ist es nicht verkehrt, wenn man auch als Fachinformatiker Systemintegration ein bisschen programmieren kann.
Wobei ich sagen muss, ich habe zwar eine physische Ausbildung gemacht vor 15 Jahren.
Aber es ist schon lange nicht mehr klassische, rein klassische hier.
Systemintegrationssachen.
Aber gut.
Irgendwo musst du mal anfangen.
Also es ist nicht verkehrt, wenn man sich ein bisschen auskennt im Vorfeld.
Und guten Eindruck.
Ja, guten Eindruck kannst du sicherlich mit dem GitHub-Profil machen.
Wenn du kein GitHub-Profil hast, bringt das dir natürlich auch nichts.
Ansonsten.
Ja, du machst eine Umschulung.
Vielleicht hast du ja in deinem Beruf jetzt schon was gemacht, wo sich so das gut transferieren lässt.
So sprich, wovon du jetzt Ahnung hast.
Was du dann auch gut gebrauchen kannst als Physi.
Das würde ich auf jeden Fall erwähnen.
Dass du sagst, hey, ich habe in meinem jetzigen Beruf ja schon gewisse Überschneidungen mit dem, was man so als Physi macht.
Deswegen bin ich da, was auch immer, muss irgendwas ausdenken.
Das würde ich auf jeden Fall erwähnen, wenn es da irgendwelche, ich weiß nicht, gibt es irgendwelche Überschneidungen?
Also wenn ja, würde ich das auf jeden Fall erwähnen.
Ansonsten weiß ich auch nicht weiter gerade, was man noch schön erzählen kann.
Meine Bewerbung, also meine Ausbildungsbewerbung ist schon zu lang her.
Zentrix als Trinker erinnern, ja, gute Idee.
Exzellent.
Erstmal kleines Projekt pushen, dass da nur Initial Comment steht.
Ja, das würde mich dann auch nicht großartig interessieren.
Also ich habe mein GitHub-Profil verlinkt bei meiner letzten Bewerbung.
Und zwar habe ich in die Bewerbung tatsächlich reingeschrieben.
Moment, ich muss mal kurz gucken.
Lebenslauf PDF.
Ich habe reingeschrieben.
Ich habe reingeschrieben.
Genau, ich habe zwei zusätzliche Sachen reingeschrieben in den Lebenslauf.
Ich habe reingeschrieben, seit 2012 nebenberuflich Web-Videoproduzent, so nennt man das ja auf Deutsch.
Klingt zwar ein bisschen cringe.
Klingt zwar ein bisschen cringe, aber dachte mir, ist mal erwähnenswert.
Zumal ich es auch aus einem anderen Grund erwähnt habe.
Und zwar, dass keiner bei mir auf die Idee kommt zu sagen,
so nach dem Motto, wie jetzt?
Sie haben eine Nebentätigkeit.
Ich meine, das stand schon in meinem Lebenslauf drinnen, ja.
So, und dann habe ich noch reingeschrieben, mehrere Open Source Projekte auf GitHub,
zum Beispiel für Elektroautos.
Da habe ich natürlich hier drauf angespielt, aber ja.
Ja, also ich weiß nicht, ob das gut ankam oder schlecht.
Also schlecht kam es nicht an.
Ich weiß nicht, ob es gut ankam, ob die das interessiert hat.
Aber ich vermute mal, weil im Vorstellungsgespräch war das,
Thema mit Elektroauto und was ich da gebaut habe.
Ja.
Ist ja auch sinnig, ja.
Finde ich auch wirklich sinnvoll, ein bisschen Anwendungsentwicklung zu lernen.
Auch als Physi.
Man darf nicht vergessen, man hat ja auch in der Berufsschule Programmieren als Fach.
Wobei, ganz ehrlich, in der Berufsschule sind wir, glaube ich, über Printf nicht rausgekommen in drei Jahren.
Also in der Berufsschule lernt man da nichts.
Ja.
Würdest du Wert auf die Comment-Nachrichten legen?
Ich habe ein paar Prämien nie gewertet.
Okay.
Ehrliche Antwort.
Ich lege Wert auf Comment-Nachrichten außer von mir selbst.
Bei anderen meckere ich immer ganz gerne, dass man die Comments ja irgendwie ein bisschen aussagekräftiger schreiben könne.
Bei mir schreibe ich da den übelsten Schwachsinn rein.
Jemand guckt dir das mal an hier.
Was steht denn hier drin?
Okay, hier.
Hier steht tatsächlich was ganz Sinnvolles in den Comment-Messages drin.
Aber ich glaube, ich habe hier nur sinnvolle Comment-Messages, weil ich automatisch Release-Notes aus den Comment-Messages generiere.
Ja, so in anderen Projekten habe ich auch viel, viel Schwachsinn drin.
Da habe ich ja kaum was gemacht.
Also meine Comment-Messages sind auch zum größten Teil Crap.
Ich habe auch schon Twitch-Emotes in Comment-Messages geschrieben und sowas.
Also.
Also ja, ich lege Wert auf Comment-Messages außer auf meine eigenen.
Ja, dann würde ich sagen, es ist Zeit, sich das mal anzugucken, weil ich glaube, man kann ohne Übertreibung sagen, dass Git heutzutage das wichtigste Versionsverwaltungssystem ist.
Es gibt sicherlich Leute, die haben noch SVN oder irgendwelche Oldschool-Krempel, aber sogar Archlinux hat mittlerweile jetzt seit zwei, drei Wochen Git.
Oder manche haben auch noch...
Wie heißt das andere von...
Ich weiß gar nicht, von wem das ist.
Was auch viele...
Was auch viele eine Zeit lang verwendet haben, als Git noch nicht ganz so verbreitet...
Mercurial, meine ich.
Team Foundation.
Ich meine, dieses Mercurial oder sowas noch gab, habe ich nie verwendet.
War auch mal eine Zeit lang relativ beliebt.
Aber ich denke, man kann ohne Übertreibung sagen, Git ist das aktuell bedeutendste und wichtigste Quellcode-Versionsverwaltungs-Source-Control, wie auch immer, System, wie man es nennen mag.
Das heißt, das würde ich mir auf jeden Fall angucken, wenn du damit noch nichts gemacht hast und im AE-Bereich unterwegs bist.
Also, Git ist eigentlich immer Voraussetzung.
Aber auf der anderen Seite...
Also, man sollte sich jetzt nicht allzu viele Gedanken machen.
Wenn man sich das mal ein paar Tage anguckt, kommt man da auch easy rein.
Also, die Basics kriegt man sehr schnell hin.
Allerdings ist bei Git halt so, dass Git nicht sonderlich selbsterklärend ist.
Also, man kann sich die Basics angucken, versteht es dann auch.
Also, man kann sich angucken, wie mache ich einen Pull, wie mache ich einen Push, wie mache ich einen Commit.
So, das sind die easy Sachen, die kriegt dann auch jeder hin.
Aber es ist nicht so einfach zu verstehen, was Git eigentlich genau immer treibt.
Und die Git-Hilfe-Seiten sind auch mega bescheuert.
Mein Lieblingsbeispiel ist dafür...
Manpage von Git Push.
So, lest euch das mal durch und erklärt mir, was Git Push macht.
Git Push macht...
Update remote refs using local refs while sending objects necessary to complete the given refs.
Obviously, klar, was da passiert, oder?
Und der nächste Satz ist auch schon sehr vertrauenserweckend.
You can make interesting things happen to a repository every time you push into it.
Also, die Erklärung in den Git-Webpages, wenn technisch natürlich korrekt,
aber insgesamt vielleicht nicht so selbsterklärend, wie man sich das vielleicht wünschen würde.
Guck, update remote refs...
What the fuck?
Ja, also die Git-Hilfe ist oftmals nicht so selbsterklärend.
Dabei ist es meistens relativ easy.
So die Basics.
Aber wie gesagt, bei Git ist halt das Problem, es ist nicht sonderlich selbsterklärend.
Manchmal ist es Leerzeichen-Branche, manchmal ist es Slash-Branche,
manchmal ist es Doppelpunkt-Branche.
Nach einer Weile macht es irgendwie alles Sinn, aber nicht, weil es in sich sinnig ist,
sondern weil man es sich gemerkt hat.
Ich gehe davon aus, dass sich Git unter anderem so schnell durchgesetzt hat,
erstens, weil es gut ist,
und zweitens, weil es eben mit dem Linux-Körnel einfach einen Use Case hat,
wo man sieht, der Scheiß funktioniert.
Ich meine, bessere Werbung fürs Projekt kann es ja nicht geben,
wie übrigens der Linux-Körnel benutzt das auch.
Ich meine, es gibt kaum ein Projekt, was so krass gescaled ist weltweit
und so viele tausende Commits bekommt und so komplexe Anforderungen hat,
wie der Linux-Körnel.
Also du kannst davon ausgehen, wenn sich ein Source-Verwaltungssystem für den Linux-Körnel eignet,
dann geht es für alles andere auch.
Und das ist, glaube ich, eines der Sachen, was Git sehr geboostet hat.
Nutzt Microsoft auch Git für Windows?
Ich weiß es nicht, ob man das offiziell weiß.
Ich persönlich würde fast vermuten, mittlerweile ja,
aber wissen tut es, glaube ich, niemand.
Ich habe mal ein Tool gemacht, das via Cron-Job eine Arbeit von vier Stunden oder so ist.
Ja.
Alles.
Ja, sowas, genau.
Deswegen sollte man, das sind solche typischen Sachen,
so Abläufe, die alle Leute abfacken, automatisieren und in schöne Tools bauen.
Das ist was, wo es sich richtig lohnt, auch wenn man Physi gelernt hat,
sich ein bisschen mit Anwendungsentwicklung zu beschäftigen.
Können wir uns gleich angucken.
Ich will bloß noch den Rest beantworten.
Ja, ich habe mir auch schon ein paar gespeichert dafür.
Hast du schon mal von Berufs...
Moment, was?
Langsam, was?
Hast du schon mal von Berufswettbewerbe für nachwuchsjunge Leute gehört?
Gibt es IT-Kategorien von Parallel-Q3-Pass-Grid bis zu jener Zeit?
Worlds? Nö, kenne ich nicht.
Sagt mir gar nichts.
Bin ich mit 39 noch jung genug, dass ich da mitmachen darf?
Wahrscheinlich nicht.
Tom schreibt, ich habe von unserem CTO den Auftrag bekommen, unsere Ops...
Moment, unsere Ops an so Tools wie Ansible und Terraform,
an so Tools wie Ansible und Terraform zu gewöhnen.
Die sind leider etwas altmodisch unterwegs.
Also, wenn eure Admins keinen Bock auf Ansible haben,
dann ist ihnen wahrscheinlich nicht mehr zu helfen.
Aber ich kenne das, das gibt es selbstverständlich überall.
Gerade Leute...
Das ist...
Sind wir wieder beim Beispiel, was ich gestern gebracht habe.
Das ist genau das Problem, was meine Generation hat.
Also Leute zwischen, sagen wir mal, irgendwie 35, 45 jetzt.
Ich bin jetzt 38, so.
Also, das ist genau das Problem, was meine Generation hat.
Es gibt einmal welche, die boomerigste Boomer überhaupt sind.
So nach dem Motto, ah, wenn ich das nicht so machen kann,
wie vor 15 Jahren oder vor 20 Jahren, wo ich damit angefangen habe,
ist das alles Müll und Cloud ist Müll und Automatisierung ist Müll
und ich will das alles von Hand eintippen, jedes Mal auf der Shell und so.
Dann hast du die und du hast Leute, die irgendwie ein bisschen mit der Zeit gehen
und das eigentlich ganz spannend finden.
Ja.
Ich finde das besonders in meiner Generation sehr verbreitet,
weil die Generation davor...
Den nehme ich das nicht übel, wenn du 40 Jahre lang gefühlt das so gemacht hast,
dass du da keinen Bock mehr hast.
Okay.
Aber bei meiner...
Und generell hat meine Generation allgemein, unabhängig von der IT, das Problem.
Du hast welche, die sind mega krasse Boomer.
Die sitzen dann auch immer beim Stammtisch und flamen drüber, wie kacke die Welt ist
und dass sie eigentlich Bescheid wissen, wie das laufen müsste, aber sie fragt keiner.
Und du hast welche, die ein bisschen mit der Zeit gehen
und die eigentlich, denke ich, doch recht weit von Boomer entfernt sind.
Aber...
Irgendwie die Leute sind einfach mal so im Alter von 12, 13 verkehrt abgebogen.
Die Leute in meiner Generation, die sich mit 12, 13, 14 Jahren angefangen haben,
mit Computerkram, Technik, Gaming, Internet und sowas zu beschäftigen,
das kam ja da erst so richtig auf und wurde dort so richtig langsam Mainstream.
Und die, die damals schon abgebogen sind in die Richtung,
ah, Technik und so finde ich kacke, interessiert mich nicht,
das sind heute die Ultra-Stammtisch-Boomer, auch schon mit 38.
Und dann hast du die anderen wie mich,
die in die andere Richtung abgebogen sind.
Natürlich gibt es in der Mitte auch schon ein bisschen was.
Ich meine, nicht jeder ist so bescheuert drauf wie ich,
der mit 38 vorm Rechner sitzt und in Twitch-E-Mails spricht.
Aber, ja.
Gibt es auch.
Gibt es sicherlich bestimmt noch mehr.
Aber ich kenne das, ich kenne das.
Sowohl in der alten Firma als auch in der neuen.
Wir haben Leute, die sind da nicht sonderlich aufgeschlossen.
In der alten Firma hatten wir beispielsweise einen,
der sollte sich um E-Mail-Sachen kümmern.
Und der hat es auch nicht so mit neuen Dingern.
Das ist normal.
Ja, und in der neuen Firma haben wir auch einen, der mag,
sag mal so, ich will nicht sagen, der mag neue Sachen nicht,
aber der ist sehr skeptisch, was neue Sachen angeht.
Gerade so, ah, warum sollte ich mich jetzt an Terraform gewöhnen,
wenn das eh bald wieder durch was Neues ersetzt wird und sowas.
Er hatte natürlich irgendwo nicht Unrecht.
Es ist durchaus denkbar, dass Tools, die heute super angesagt sind,
morgen schon wieder outdaten.
Wobei man sagen muss, gerade was Ansible angeht,
das ist jetzt schon lange am Start und auch sehr etabliert
und ist morgen nicht weg.
Und auch Terraform sehe ich jetzt nicht,
dass Terraform in nächster Zeit durch irgendwas abgelöst werden würde.
Das gibt es ja auch schon ein paar Jahre und wird eher nur größer.
Ich könnte mir tatsächlich vorstellen, dass Terraform ergänzt wird
oder auch andere Tools benutzt werden in Bereichen,
wo Terraform jetzt nicht sonderlich gut ist.
Was vielleicht auch dazu führt, dass sich Terraform verbessert.
Also es gibt eine Sache, wo Terraform richtig eklig ist.
Das ist zum Beispiel, um Kubernetes-Resourcen zu verwalten.
Das würde ich mit Terraform eigentlich normalerweise auch nie, nie machen.
Man kann sein Cluster initial mit Terraform aufsetzen.
Nichts dagegen zu sagen.
Aber die eigentlichen Kubernetes-Resourcen-Objects in Terraform,
das geht, aber es ist kompletter Abfuck und richtig, richtig eklig.
Also da finde ich so Sachen wie Crossplane sehr interessant vom Ansatz her.
Und ich könnte mir vorstellen, dass sich das im Kubernetes-Umfeld,
oder ich hoffe zumindest, dass sich so Sachen wie Crossplane im Kubernetes-Umfeld etablieren
und dort Terraform komplett rausfliegt.
Ja, aber so Leute gibt es. Ja, ist so.
Und gerade Admins, und gerade wenn es ein bisschen ältere Admins sind,
die sind sehr festgefahren in dem, wie sie sich denken, dass die Sachen gemacht werden müssen.
Fünf Jahre ohne Fehltage, siehste, das habe ich noch nie geschafft.
Also ich habe noch nicht ein Jahr ohne Fehltage geschafft.
Na vielleicht hast du damals da Bock drauf gehabt aus...
Wie nennt man das? Also jetzt nicht...
Also wie nennt man das so?
Äußere Einflüsse, ja? Vielleicht haben ja damals äußere Einflüsse dafür gesorgt,
dass du das halt machen musstest wegen Geld oder so.
Ich meine, wir wissen es ja nicht.
Aber es ist nie zu spät, sich umzuentscheiden, was anderes zu machen.
Ich habe meine Ausbildung auch angefangen, damals relativ spät, glaube ich mit 24 oder so.
Das war für die damalige Zeit noch recht spät.
Ganz ehrlich, ich sehe da aber überhaupt kein Problem drin.
Auch mit 35, 40.
Noch mal was anderes zu machen.
Gerade in der heutigen Zeit und gerade wenn es um IT geht, ist das überhaupt kein Problem.
Die suchen händeringend Leute.
Bis auf 24 ja dann.
Ich habe ja vorher auch was anderes gemacht.
Das habe ich euch ja schon ein paar mal erzählt.
Ich habe davor ja auch...
Man mag es kaum glauben und ich finde das eben auch dazu jetzt nicht.
Aber ich habe ja davor tatsächlich BWL Zeug gemacht.
Ich weiß, man kann sich das bei mir kaum vorstellen.
Ja, ja.
Ich habe eine Ausbildung gemacht.
Nein, nicht...
Ich habe weder BWL studiert, nicht...
Nein, nein, ich habe...
Nein, nicht Büro...
Man hat immer gesagt, Büro-Kaufmann.
Kaufmann für Büro-Kommunikation habe ich eine Ausbildung angefangen.
Vor 20 Jahren oder so.
Ich habe die Ausbildung aber nicht fertig gemacht.
Also...
Warum ich das gemacht habe, ist eigentlich ganz einfach erklärt.
Ich war mit der Schule fertig und ich war mega faul.
Ich habe daheim gehockt und habe MMO Kreiselgrind gemacht den ganzen Tag.
Also ich bin aufgestanden, habe den Rechner angemacht und habe mich MMO-technisch eingeloggt und habe Kreiselgrind gemacht.
So und dann habe ich das bis abends gemacht.
Und dann bin ich ins Bett und dann habe ich gepennt und habe MMO-Kreiselgrind gemacht.
Oder irgendwelche Online-Sachen gespielt.
Ich habe den ganzen Tag vom Rechner gehockt und irgendwelche MMO-Sachen gespielt.
So.
Und irgendwann kam dann meine Mutter auf die Idee, es kann jetzt nicht sein, dass du nach der Schule den ganzen Tag vorm Rechner sitzt und nur am Spielen bist.
Und ich habe halt gesagt, wie, warum, warum kann das nicht sein?
Das ist doch eigentlich eine ganz tolle Geschichte.
Also ich finde schon, dass das so sein kann und so sein sollte.
Und die hat gesagt, nee, sie will aber nicht, dass das so ist.
Und ich soll doch jetzt mal eine Ausbildung machen.
Ja und die hat mich halt so lange genervt, bis ich dann...
Ich war ein Macher, genau, ich habe MMO-Kreiselgrind.
Und dann habe ich dann irgendwann halt den...
Weil sie mich alle so genervt haben, habe ich den halt mich beworben und habe eine andere Ausbildung angefangen, auf die ich damals schon keinen Bock hatte.
Also ich wusste ja damals schon, dass ich eigentlich Computerkram machen will.
Aber ich habe...
Ich habe halt überhaupt nicht gesucht.
Da hat man das erstbeste und BWL-Zeug gab es damals halt.
Oder so...
Das war der größte Scheiß.
Ich würde es nie wieder machen.
Das ist das einzige, was ich mir gemerkt habe.
Habe ich auch schon ein paar Mal erzählt.
Das einzige, was ich mir gemerkt habe aus der Ausbildung ist, wie man die Buchhalternase macht.
Und dass man linear und degressiv abschreiben kann.
Wobei ich letztens gelernt habe, dass degressiv abschreiben anscheinend gar nicht mehr funktioniert.
Das ist das...
Ohne Scheiß legit, das ist das einzige, was ich noch von der Ausbildung weiß.
Wie man die Buchhalternase macht.
Ja, ich zei...
Ich...
Ich weiß.
Recycle Story.
Aber für alle, die nicht wissen, was die Buchhalternase ist.
Das ist die Buchhalternase.
Das...
Das ent...
Das entwertet das also nicht.
Das sorgt dafür, dass man seine Bilanz nicht fälschen kann.
Also normalerweise ist es ja so, wenn ich...
Wenn ich irgendeine...
Guck mal.
Wenn ich irgendeine Bilanz...
Wenn ich eine Bilanz mache und würde das hier unten leer lassen.
Ja.
Und hier unten erst zusammenrechnen.
Dann könnte ich ja nachträglich noch hier was reinschreiben.
Und damit man das nicht fälschen kann, muss man die Buchhalternase drunter machen.
Das Ding heißt offiz...
Ich glaube, ich bin mir nicht sicher, ob es offiziell Buchhalternase heißt.
Aber jeder nennt dieses Ding Buchhalternase.
Wird das immer noch gemacht?
Keine Ahnung.
Wie gesagt, ich habe die Ausbildung vor 20 Jahren angefangen und nie fertig gemacht.
Keine Ahnung, ob man das immer noch so macht.
Wahrscheinlich...
Wahrscheinlich macht man das...
Macht man das...
Wenn man das...
Wenn man das von Hand macht, macht man das immer noch so.
Elektronisch wirst du die Buchhalternase wahrscheinlich nicht brauchen.
Okay.
Offizielle Wikipedia-Eintrag gibt es dazu sogar.
Buchhalternase.
Die Buchhalternase...
Ähm...
Synonyme Begriffe auch Buchhalterknie oder Wakanstrich.
Oh, Wakanstrich klingt auch gut.
Ist eine Sperrlinie mit der Freiräume in T-Konten...
Okay, das sagt mir auch noch was.
...gefüllt werden.
Damit man nachträglich nichts mehr hinzufügen kann.
Ja.
Genau.
Ja, das ist natürlich nur was, wenn man das analog erfasst.
Sobald das digital irgendwo drinsteht, ist das unsinnig.
Du brauchst...
Also ich denke nicht, dass irgendjemand eine Excel-Tabelle macht und ernsthaft dann eine
Buchhalternase reinmalt.
Dafür gibt es bestimmt eine ISO-Norm.
Garantiert gibt es dafür irgendeine Norm.
Das ist in Deutschland.
Da gibt es bestimmt...
Da gibt es für alles Normen.
Ja.
Ähm...
Ich weiß jetzt gar nicht, wie ich darauf gekommen bin, aber es ist auf jeden Fall nie
zu spät, nochmal eine Ausbildung zu machen oder sich was anderes anzuschauen.
Achso, Ausbildung.
Ob wir uns die Stellenanzeige angucken können.
Ja, klar.
Können wir machen.
Also.
Angebot zum Fachinformatiker für Systemindikatoren.
Okay, was Ausbildungsstellen angeht, da bin ich jetzt nicht so im Bilde, nach was man da
gucken muss, aber wir schauen einfach mal.
Okay.
Anforderungen.
Brauchst keinen Führerschein.
Du brauchst Sprache.
Du brauchst.
Sprach...
Sprachenspezifisch.
What?
Okay.
Jobbeschreibung.
Ihre Aufgaben.
Das sind deine Aufgaben.
Das lernst du.
Du erhältst eine fachkundige Einweisung in dein Berufs- und Tätigkeitsfeld.
Gut.
Es ist eine Ausbildung.
Würde ich mal erwarten.
Ja.
Du lernst komplexe EDV...
EDV-Systeme.
Das ist noch so die Oldschool-Bezeichnung.
Das erinnert mich immer an Reddit.
Reddit.
Das Deutsche...
Gibt es ja einen Subreddit.
EDV.
Deutsche Community zum Thema EDV.
Ja.
edv nein das meine ich nicht edv de ja das war nicht 106 106.000 mitglieder edv das ist das so
typisch deutsches ding oder elektronische daten sagt niemand jeder nennt es so noch it aber ok
du lernst komplexe edv systeme konzipieren und zu realisieren okay du wirst darin geschult als
dieses thema im betrieb zu nehmen verwalten und benutzergerecht anzupassen ok klingt auch so nach
standard physik ram du bekommst einblick in moderne experten und diagnose systeme und nutzt
diese um auftretende störungen zu ihnen für moderne experten und diagnose systeme braucht
man da mehr als ssh du wirst du wirst ansprechpartner beziehungsweise ansprechpartnerin
bei aufnehmen du wirst sorry leute das muss man ja korrekt sagen sonst regt sich auf twitter eine
auf du wirst ansprechpartnerin beziehungsweise ansprechpartnerin
bei auftretenden störungen lernst diese zu beheben ja du hältst das know how it anwender
anwender das auswahl da hätte ich jetzt persönlich keinen bock drauf aber gut wenn das in der
ausbildung halt vermittelt wird also lauter ihk soll so was ja auch in der ausbildung vermittelt
werden das ist ja auch richtig laut ihk ist man ja zur hälfte auch kaufmann aber die ihk erzählt
viel blödsinn wenn der tag lang ist du wirst da problematik anwendungen system zu ermitteln zu
lesen und lernt systemdokumentation zu lernen systemdokumentation zu lernen systemdokumentation
zu lernen systemdokumentation zu lernen systemdokumentation zu lernen systemdokumentation zu lernen
zu erstellen und schulung durchzuführen systemdokumentation das ist existiert in
der theorie immer und alle sagen oh ja dokumentation schreiben ist wichtig oh ja
und wir müssen auf jeden fall bei dem projekt zeit einplanen für dokumentation und am ende
gibt es halt trotzdem keine du lernst bestehende anwendung auf verschiedene anwalt anforderungen
zu testen so geht das das ist alles sehr allgemein ihr profil das bringst du mit du
hast mindestens einen guten hauptschulabschluss ich bin begeistert wie anspruchslos die mittlerweile
geworden sind bei mir wollten sie damals eher noch als wenn man sich beworben hat für irgendwelche
physik sachen ausbildungen und und teilweise bevor es physik gab gab es ja noch it system
elektroniker und sowas die wollten damals abitur beziehungsweise sehr guten realschulabschluss ja
was ich aber damals schon unglaublich bescheuert fand weil du musst in keiner der ausbildung
irgendwie mathe pfeifert sein oder sonst irgendwas groß wissen was man in der schule gelernt hat also
damals konnten sie sich halt auch noch raussuchen du hast mindestens einen guten hauptschulabschluss
du bist handwerklich geschickt so ja also das kannst du ja auf jeden fall im vorstellungsgespräch
hervorheben dass du offensichtlich handwerklich geschickt bist du machst das ja schon jahrelang
technisches verständnis auch du arbeitest gewissenhaft und gerne im team das kannst
du auch hervorheben dass du das machst und auch ja quasi schon unter beweis gestellt hast immer das da
ist ja unspezifisch ja wir bieten das bieten wir dir du absolvierst deine ausbildung einer
innovativsten arbeit geht gut da will ich nicht darauf geben dass so gelaber haben sie alle so
nach dem motto wir sind führer im bereich hier marktführend im bereich bla bla bla bla der
marktführer und die nummer eins und bla und hier und da ja das ist das ist normal du sicherst dir
mit der fundierten qualifizierung zur fachinformatik beziehungsweise hervorragende das stimmt wohl du
ganz ehrlich macht das einfach es ist egal was sie hier schreiben das ist sehr generic
das könnte auch jet gpt ausgehauen haben dieser diese stellenanzeige das sagt
wenig das mal sagt wenig darüber aus was sie wirklich machen das heißt ich würde mir schon
mal bei denen auf der webseite angucken sowas wo bin ich hier überhaupt gelandet und was machen
die das ist auf jeden fall vor jeder bewerbung sinnvoll sich den laden mal auf der webseite
anzugucken und sich vielleicht auch so ein bisschen die schwerpunkte raus rauszu suchen was die machen
sehr unspezifisch also daran kann man jetzt weder sagen gut noch schlecht ich
würde sagen guck dir das einfach an macht das einfach und im endeffekt wenn
du die ausbildung durch hast du kannst ja vielleicht sogar verkürzen mit
erfahrung vorher und wenn du wenn du weiter durch blickst dann bist du in
zweieinhalb jahren drei jahren durch und hast du für sie ausbildung und dann
kannst du immer noch dir genau das suchen dort wo du hin willst weil wie
sie es werden händeringen gesucht auch nach der ausbildung aber ich würde es
einfach machen ich kann jetzt ich kann hierzu jetzt
nicht viel sagen das ist sehr 08 15 könnte fast aus chat gpt sein die bauen
funktür und stellen die überall hin das ist schon mal gut dass du das weißt
kann man ja kann man ja anmerken dass du das sich schon ein bisschen schlau
gemacht dass dem vorfeld das kommt immer gut an
erklär mal jemand was re base ist der keine ahnung davon hat okay ich erkläre
re base immer so dann geht re base ist ein reset mit dem
anschluss
automatischen cherry pick ich hoffe jetzt hat man es verstanden oder weil
nichts anderes ist ein re base also also ein re base in get ist also ein re base
in get ist du machst ein reset auf den comet dass du an gibst und dann werden
also du reset ist ein branche auf land auf den anderen stand und dann werden
die sachen die du mehr in deinem branche hattest obendrauf automatisch in der
schleife drauf cherry pick
so ist das das macht geht's re base du erklärst es immer so dass es alle
komisch sind und die in zeitliche abfolge noch einmal ein abspiel ja aber das
wichtige bei einem re base ist ja dass er vorher also alle comments wegnimmt
dann auf den anderen stand das setzt und dann die comments obendrauf macht also
das ist schwierig ja und wie gesagt geht es halt nicht so richtig selbst
erklären dann muss ich ein bisschen damit beschäftigen aber ansonsten
Ansonsten lohnt es sich einfach, sich mit Git zu beschäftigen.
Sei es auch nur durch GitLab, GitHub, wo man sich zwangsläufig mit beschäftigen muss,
früher oder später, wenn man sich mal andere Software angucken will
oder vielleicht auch selbst mal ein Open-Source-Projekt machen will.
Man kommt eigentlich als Softwareentwickler und auch, ich gehe sogar so weit,
nicht nur als Softwareentwickler, man kommt als jemand, der was mit IT zu tun hat,
egal ob das jetzt ein FISI ist, also Anwendungsentwicklung oder Systemintegration,
ein Netzwerktechniker, was auch immer.
Ich finde, man kommt heute um Git-Basics eigentlich gar nicht mehr rum.
Denn nicht nur Programmquellcode, also so richtig für Software,
wo am Ende irgendeine Anwendung rausfällt, ist heute in einem Git-Repo drin.
Auch Infrastrukturkomponenten werden heute mal ganz gerne in einem Git-Repo verwaltet.
Nennt sich dann heute Hochtraben Infrastructure as Code,
beispielsweise wenn man Terraform verwendet oder sowas.
Aber das ist auch normal, dass Infrastruktursachen getrackt werden,
über den Git-Repo und sicherlich noch vieles, vieles andere heutzutage auch.
Das heißt, wenn man ein bisschen was mit IT-Systemen am Hut hat,
man kommt eigentlich, ob auf kurz oder lang, nicht darum, sich ein bisschen mit Git zu beschäftigen.
Man muss nicht die super komplizierten Sachen wissen.
Also man muss nicht wissen, wann er einen Fast-Forward-Merge macht und solche Geschichten.
Und das ist vielleicht nicht verkehrt.
Aber so die Basics sollte man tatsächlich...
...können.
Microsoft nutzt ab sofort ein Git zur Windows-Entwicklung, okay, nice, doch offiziell, meinst du, meinst du Shit?
Das ist tatsächlich ganz gut.
Die Admins beschweren sich aber, dass sowas wie Updates super viel Zeit fressen.
Gut, die Kombination kenne ich auch, dass es Leute gibt, die sagen, sagen, wir wollen, wir wollen keine Automatisierung haben,
aber Updates dauern immer zwei Monate, bis alle Systeme durch sind. Das kenne ich, war mir beim alten Arbeitgeber ähnlich.
Letztendlich gibt es dafür zwei Lösungsmöglichkeiten.
Die erste Lösungsmöglichkeit ist, die Admins machen alles wie bisher,
übergeben das Ausrollen der Updates, aber mit Anleitung an irgendjemand anderes,
der beispielsweise auch nachts da ist und 24-7 das in der Woche durchprügeln kann.
So haben wir das früher beim alten Arbeitgeber gemacht,
oftmals, weil da war man Automatisierung über... also das ist jetzt schon eine ganze Weile her, mittlerweile sind die auch besser, aber die waren Automatisierung
sehr kritisch eingestellt, eine ganze Zeit lang.
Und da lief das so, wenn es Betriebssystem-Updates gab, dann haben wir das getestet auf
Entwicklungskisten und auf Integrationskisten und haben uns zusammengeschaut, dass das funktioniert.
Dann haben wir eine Anleitung erstellt mit Dingern, wo man bei diesem Update drauf achten muss und dann haben wir das an unseren Support gegeben und er hat dann
über 1-2 Wochen in der Nachtschicht die Produktivsysteme und Testingsysteme ausgerollt.
Ist eigentlich ziemlich bescheuert, weil es sehr hoher manueller Aufwand ist,
Stunden und Geld ohne Ende verbrät,
aber das wollten die so haben.
Ja, die waren damals Automatisierung recht kritisch gegenüber eingestellt, so das ist die erste Variante, was man machen kann.
So und die zweite, also wenn man sich das leisten kann, ja, wie gesagt, ich habe vorher bei einer Bank gearbeitet, die haben eh zu viel Geld gehabt und da ging das.
Und die zweite Sache, die man machen kann, ist, dass die Admins sich mal nicht so anstellen sollen und moderne Tools benutzen, die halt da sind.
Und wir sind nicht mal 1984, 85, 86, 1995.
Sondern es ist nicht schlimm, wenn man ein Tool nimmt, um beispielsweise
Updates auf allen Systemen auszurollen.
Gut, kommt natürlich immer darauf an, in welchem Umfang man das automatisieren will. Es gibt, dazu gibt es ein Beispiel, auch noch mal von meinem alten Arbeitgeber.
Gut, vom neuen bin ich erst zwei Monate, da kann ich nicht so viele Beispiele bringen.
Dort haben wir einen Anbieter gehabt, der E-Mails kontrolliert auf Spam.
Das habe ich glaube ich schon mal erzählt, ja, der E-Mail der Anbieter, der Spam kontrolliert. Problem war nur,
dass manchmal auch Sachen, also bei bestimmten Adressen,
Sachen in der Spam-Filterung hängen geblieben sind, die eigentlich gar nicht gefiltert werden sollten.
So und die Lösung dafür war, man soll dreimal am Tag in die
Spam-Filter reingucken und alles, was diese vier Domains betrifft,
grundsätzlich freigeben. Egal ob Spam, Virus oder nicht, ist egal. Alles, was diese vier Domains betrifft, soll grundsätzlich freigegeben werden.
Okay, und das war halt richtiger Abfuck. Die Leute
vom Support mussten sich dreimal täglich einloggen,
irgendwie zig Seiten durchklicken, Sachen freigeben und so richtig bescheuert. Das ging dann ein paar Monate lang und insgesamt, obwohl das auch jahrelang dann
ist es bestehen geblieben, dass das gemacht werden muss. Und irgendwann bin ich auf die Idee gekommen, hab gesagt, können wir das nicht irgendwie automatisch machen?
Der Anbieter selbst hat selbstverständlich für seinen Spam-Filter keinerlei API.
Wir haben beim Anbieter sogar angefragt, so nach dem Motto, warum gibt es eigentlich keinen API-Zugang dafür?
Ich meine,
es ist ein Online-Service, ohne API-Zugang ist es doch eigentlich total useless. Und da sagte der Anbieter,
Ah, API-Zugang oder oder irgendeine Rest-API.
Ja, das haben wir aktuell nicht. Wir haben dazu aber schon einen internen Feature-Request offen und haben damit unser Ticket geschlossen.
Ich meine ernsthaft, was interessiert mich, ob die intern einen Feature-Request offen haben? Das ist doch für mich sowas, aber komplett unerheblich. Das geht mir am Arsch vorbei.
Es beruhigt mich auch nicht, weil man kann auch drei Jahre
intern einen Feature-Request offen haben.
Macht für mich keinen Unterschied, das funktioniert ja einfach nicht.
Es ist eine geile Taktik, Tickets zuzumachen.
Wir haben dort einen internen Feature-Request offen. Bam, Ticket geschlossen. Ja, aber das, was ich haben will, geht immer noch nicht.
Zumindest, was ich dann gemacht habe, um das zu automatisieren, ist, kennt ihr Puppeteer?
Chatge?
Ne, nicht Ansible, das ist ein Webservice, mit Browser gehst du da drauf.
Puppeteer? Puppeteer ist eine Library zum Fernsteuern von Chrome.
Damit kann man, damit kann man den Chrome fernsteuern.
Auch Headless, also ohne GUI.
So, und dann habe ich ein, dann habe ich ein .NET Programm erstellt.
Kann er auf Firefox? Okay, Chrome ist auf jeden Fall standardmäßig.
Zumindest, dann habe ich ein .NET Programm erstellt, mit Puppeteer.net
und habe quasi
das Klicken, was unser Support macht,
im Browser nachgebaut.
Das habe ich auch im Stream gemacht, ja. Ich habe quasi das, was unser Support manuell von Hand klickt,
nachgebaut mit diesem Browser-Automatisierungstool.
Das war sehr eklig, weil du musst immer warten, so bis Diffs auf der Seite erscheinen und weiterklicken und so.
Und das ging dann aber irgendwann. Problem ist halt nur, das Tool ist immer kaputt gegangen, sobald die ihre Webseite geändert haben. Kam glücklicherweise nicht so oft vor.
Ich glaube, die haben zweimal in ganz, in all den Jahren die Webseite geändert.
Aber es gab noch ein zweites großes Problem.
Der Anbieter hat.
Irgendwann zwei Faktorauthentrifizierung eingeführt.
Das heißt, ich konnte nicht einfach nur mehr mich einloggen im Browser und Browserklick simulieren.
Also wie gesagt ich habe Browserklicks.
Ich habe dem gesagt, klicke jetzt auf dieses Diff.
Klicke auf der nächsten Seite auf dieses Diff.
Dann gehe ich eine Seite zurück.
Ich klicke auf dieses Diff.
zurückklicken auf dieses tiff also das ist im prinzip was mit puppeteer
automatisiert habe und irgendwann haben die zwei faktor authentifizierung
eingeführt und ihr könnt euch vorstellen zwei faktor authentifizierung ist
schwierig wenn man mit einem bot sich einloggen will oder kann man
nachvollziehen oder leute weil ihr habt nun bot der automatisch auf eine seite
geht und dort dinge einklickt so wenn der bot sich jetzt einloggen soll mit
zwei faktor authentifizierung ist schwierig weil der bot kann ja eure sms
auf dem handy nicht lesen ist logisch soweit oder das problem problem
versteht man weil ich will nur wichtig für sich erstellen dass das problem
versteht bevor ich euch die lösung dazu sagen und zwar unsere lösung war finde
ich enormst fett und das ist eine lösung die könnt ihr euch auch merken wenn ihr
ähnliche probleme habt also die die browser automatisierung hat nicht mehr
funktioniert weil man eben jetzt sich nicht einfach nur mit username passwort
einloggen konnte sondern zusätzlich noch eine bestätigungs
es ist oder eben eine zwei faktor code von der app eingeben sollte so was haben
wir gemacht wir haben die zwei faktor authentifizierung nachgebaut und zwar
ich ich hole mal ein bisschen aus und ich hoffe man alle ich hoffe man versteht
das zwei faktor authentifizierung mit app funktioniert folgendermaßen man
schaltet die zwei faktor authentifizierung ein und dann passiert
folgendes ist habt ihr bestimmt auch schon auch schon gemacht ja wenn er die
zwei faktor authentifizierung einschaltet dann wird er auf den app sitz erhält und dann schaltet er es.
dann bekommt ihr so einen Code und diesen Code scannt ihr, so einen QR-Code,
und diesen Code scannt ihr mit zum Beispiel einer Zwei-Faktor-Authentifizierungs-App auf dem Handy.
Habt ihr wahrscheinlich alle schon gemacht, oder?
So, und dann taucht das im Handy auf und dann kannst du quasi beim Einloggen den Code vom Handy abtippen
und du gibst dein Passwort ein und danach gibst du den Code vom Handy ein in der Zwei-Faktor-App und dann ist gut.
So, was man jetzt wissen muss ist, dass Zwei-Faktor-Authentifizierung mit App auf dem Handy eigentlich enorm simpel ist.
Das ist genau das, was das Wort sagt, das ist ein zweiter Faktor neben deinem Passwort.
Da ist keine Magic großartig dahinter, dass das nur Apps auf dem Handy machen könnten.
Was in so einem QR-Code drin steht, ist folgendes.
Da steht drin, das Verfahren.
Was benutzt werden soll, um das Token zu generieren.
Und es steht ein gemeinsames Secret drin.
Das Secret wissen nur die App von euch und der Server, gegen den ihr euch authentifizieren müsst.
So, und auf Grundlage des Token-Generierungsverfahrens und des gemeinsamen Secrets
können sowohl Server als auch Authentifizierungs-App unabhängig voneinander
für die aktuelle Uhrzeit das gleiche Token erzeugen.
Das heißt, der Server erzeugt auf Servers-Seite das Token jetzt für 10.16 Uhr.
Eure App erzeugt mit den gleichen Informationen das Token für 10.16 Uhr.
Und dann wird einfach nur überprüft, ob das übereinstimmt.
Das ist alles, was Zwei-Faktor-Authentifizierung macht.
Es gibt bestimmt auch irgendeinen... Kennt ihr irgendeinen guten Reader für QR-Codes?
QR-Code Reader?
Ja.
QR-Code Reader.
Wo man Bilder hochladen kann oder sowas?
Online?
Ne.
Web-QR.
Nein, ne Kamera.
Keckel.
Ne, ne.
Ganz bestimmt nicht.
Kann man hier nicht Bilder hochladen oder so?
Sonst würde ich...
Dann würde ich euch das nämlich mal zeigen.
Okay.
What's inside 2F...
2F-A...
QR-Code.
QR-Reader online.
Okay.
Was ist drin?
Was ist drin?
Was ist drin?
Was ist drin?
Was ist drin?
Was ist das?
Was ist das?
Was ist das?
Was ist das?
Was ist das?
Was ist das?
Was ist das?
Was ist da drin?
Hey, das ist...
Okay, Datei auswählen.
QR-Code.
Eh, QR-Code, 2F-A.
Ich, ich muss...
Ich habe jetzt keinen.
Wir müssen uns jetzt mal hier, hier irgendwie testweise einen raussuchen.
Okay.
Den nehmen wir jetzt einfach mal.
Bild speichern unter.
Ja.
Und jetzt laden wir den hoch.
Datei auswählen.
Desktop.
Und jetzt?
Wo steht jetzt, was in dem Bild steht?
Mein Gott, was ist das alles wieder für Kack-Services?
Oder das...
Das...
Ja.
Der...
services qr code gerne online gibt es da gibt es doch irgendwas online geben man nein scan
vom pfeil perfekt ach das steht da drin fuck alles will ich nicht du fqr code ich brauche
einen echten ja wunderbar den hier speichern unter datei auswählen ich will ich will euch
das nochmal wo habe ich das gespeichert desktop ufa hier die geben alle keine richtigen code ja
genau so war sowas hier in der so was hier der rechteim base genau das sind die sachen die in
dem qr code drin stehen du musst eingeben du musst eingeben welches token verfahren du benutzen
willst dann ein gemeinsames secret das ist random generiert beim ersten mal sondern in den labels
und genau da kommt dann so einen code raus das steht dann halt in dem code
trainer war unsinnig dass das jetzt so kompliziert war aber okay zumindest wir
haben uns den qr code generieren lassen für den anbieter und dann haben wir mit einem qr
code reader eben das secret und den token generierungs algorithmus ausgelesen aus dem
qr code und haben dann eine scarp otp fa live haben dann haben wir so was hier in der richtung verwendet
eine Library für .NET, die eben diese Tokens generieren kann. Das heißt, wir haben quasi,
also besser gesagt, was heißt wir? Eigentlich habe mehr oder weniger ich das gebaut. Der
einzige andere, der ein bisschen was mitgemacht hat, war unser Mail-Experte,
der mir gesagt hat, was für Domains wir brauchen. Also ich habe dann so eine Library hier verwendet,
die quasi das nachgebaut hat, was die Zwei-Faktor-Authentifizierungs-App machen
würde. So, und dann konnte man sich einloggen per Zwei-Faktor-Authentifizierung, auch wieder
per Browser-Automatisierung und dann wurde das ganze Spam-Freigeben automatisiert,
trotz Zwei-Faktor-Authentifizierung. Ich hoffe, man konnte der ganzen Sache jetzt
halbwegs folgen. Also man muss für Zwei-Faktor-Authentifizierung keine
Zwei-Faktor-Authentifizierungs-App benutzen. Man kann es auch nachmachen.
Okay.
Das ist recht simpel. Ja, das ist total easy. Man muss nur drauf kommen, das so zu machen und
es muss einem klar sein, dass das geht, weil die ganzen Apps auf dem Handy auch keine,
die können ja nicht zaubern. Die machen genau das gleiche. Die müssen wissen,
welchen Token-Algorithmus und das gemeinsame Secret. Und dann ist das easy. So, dann haben
wir quasi uns den Zwei-Faktor-Authentifizierung-Code selbst generiert und haben uns eingeloggt mit
Passwort und selbst generiertem Zwei-Faktor-Authentifizierung-Code. Wenn das aber zum
Beispiel Microsoft Multi-Faktor-Authentifizierung
ist, geht das nicht. Doch, das geht bei allen, bei allen Authentifizierungs-Varianten,
die eben die klassische Sache mit dem QR-Code machen, ohne dass du irgendwelche weiteren
Online-Abfragen brauchst oder sowas. Ja, also wenn das jetzt irgendwelche Online-Sachen sind,
wie du brauchst die Microsoft-Authentifizierungs-App und die kriegt über eine Zusatz-Microsoft-AP eine
Push-Notification geschickt, dass sie dir jetzt was anzeigen sollen und du drückst dann auf Approve
auf und dann geht das über den Web-Service zurück und dann wirst du eingeloggt, dann
geht das natürlich nicht. Aber, sobald, sobald das, also solange das die klassische Variante
ist mit gemeinsamen Secret und anhand der Uhrzeit das Token erzeugen, geht das. Wenn
es was Spezielles ist, dann geht das natürlich nicht. Wenn es was, was ist, was nicht bekannt
ist, wie es richtig funktioniert und wie man das oder wenn es Mobilfunk-Verbindung braucht
oder sowas.
geht das natürlich nicht ja das ist das gibt es das gibt es bei uns aber auch ja
das geht das geht mir persönlich echt immer auf den sack wenn sie alles besser
wissen aber dann die an die einfachsten dinger nicht gedacht haben
ich glaube es gibt leute die sind die sind 38 bin jetzt 38 sind so alt wie ich
und die ist es genauso die finden technik kacke und machen haben noch
nicht mal tablet um was zu lesen die kaufen sich noch zeitung und sowas muss
man sich mal vorstellen kauft sich lieber eine zeitung anstatt morgens mal
ein tablet aufzumachen was würdest du anschauen wenn du einen
halben tag in frankfurt wärs der polo mir ist genauso eklig für
kubernetes ressourcen wie terraform crossplane ist das beste dafür gerade
weil man das auch kombinieren kann mit externen ressourcen
was würde ich mir anschauen wenn ich einen halben tag in frankfurt wäre das
ist eine gute frage ich bin oft einen halben tag in frankfurt
weil ich da arbeiten geben aber was fühlte ich mir anschauen ja falls du
noch nie auf dem hochhaus warst kannst du mal auf den main tower oben drauf oder
so was das tatsächlich für nicht bin ich ganz ganz nett wenn man schon mal
wenn man schon mal in dem hochhaus war na ja viele städte sind von oben eben
nicht aus Frankfort von besonders cool ist also ich würde mal auf dem eintor
oder auf irgendeines der hochhäuser drauf wo man drauf kann kostet
wahrscheinlich fünf euro oder so weiß ich was aktuell eintritt kostet
Also ich würde auf jeden Fall auf irgendein Hochhaus rauf und runter gucken.
Weil sowas haben wir in Deutschland nicht an vielen Stellen.
So Frankfurter Skyline und Hochhäuser.
Also wenn du mal irgendwo im 50. 60. Stock gewesen bist, das sieht schon cool aus.
Das kann man sich durchaus einmal angucken.
Ansonsten weiß ich keine Ahnung, was man sich in Frankfurt groß angucken sollte.
Kann man einfach auf die Hochhäuser rauf.
Ne, deswegen musst du ja zu irgendeinem Gebäude, wo das angeboten wird.
Und in Main Tower bieten sie es an, das weiß ich.
Komm, mal gucken, was kostet hier.
Was kostet Eintrittsaussicht?
Was kostet das?
Ticket kaufen, 9 Euro, Eintrittspreise.
Den DCX kann man sich als Normalsterblicher leider nicht angucken.
Das hier, genau, das ist wirklich cool.
Sich das mal anzugucken.
Den DCX kann man sich leider nicht angucken.
Bisschen schade, ich komme da auch nicht mehr rein.
Seit ich nicht mehr beim Provider arbeite.
Ich würde gerne mal wieder rein und mir das angucken.
Ich war dort, war ich auch noch nie, auf Main Tower obendrauf.
Aber ich war schon in Hochhäusern im 50. und 60. Stock.
Und das ist ähnlich.
Ich muss jetzt, wir sind doch ganz schön am Schwätzen.
Ja gut, kann ich verstehen.
Die wusste wahrscheinlich sich auch um alles kümmern.
Ich habe das damals auch nicht nachvollziehen können, warum die mich alle so nerven mit Arbeiten gehen.
Ähm, ja, wollten sie.
An das Trinken erinnern, sehr gute Idee.
Ah, exzellent.
Ich würde ja auch nicht wegen den Benefits rein zu einem Laden gehen.
Aber, das stimmt schon.
Da wird oftmals viel Wind um nichts gemacht.
Aber so Sachen wie Jobticket und sowas, das ist nicht, also das ist ja wirklich handfester, handfester Vorteil, ja.
Aktuell besparst du halt deine 50, 49 Euro im Monat.
Macht mein neuer Arbeitgeber glücklicherweise auch.
Also die bezahlen die ganzen Tickets.
Ja, richtig.
Ist bei deinem neuen Arbeitgeber das Homeoffice im Arbeitsvertrag geregelt, gibt es eine, es gibt eine zusätzliche Vereinbarung, gibt es bei uns.
An die sich erstaunlich, erstaunlich auch gehalten wird.
Nicht so wie bei dem letzten Laden, wo ich gewesen bin.
Wir machen ne Vereinbarung und dann halten wir uns nicht mehr dran.
Nein, die halten sich dran.
Und, also bei mir im Team ist es aktuell so geregelt, es ist tatsächlich so, dass es die Teams unterschiedlich handhaben können.
Aber bei mir ist es im Team so geregelt, dass wir im Durchschnitt einmal die Woche da sein sollen.
Und, es ist auch egal, ob das jetzt so ist, dass man vielleicht mal, wenn ein bisschen mehr ist, zwei Tage da war, dann zwei Wochen nicht.
So, also, es hat mich auch bisher noch keiner genervt und wisst ihr, was ich witzig finde?
Du warst in der, ich war in der Versicherungsbranche jetzt, ähm, ne Schwachsinn, umgedreht.
Ich war bei einer Bank und jetzt bin ich in der Versicherungsbranche.
Ja, richtig.
Äh, ist bei deinem neuen Arbeitgeber, also, ähm, ja.
Und ich hab gehört.
Ja.
Ich hab gehört von anderen Teams, so nach dem Motto, wir hätten schon eine restriktive Regelung, was Homeoffice angeht.
Wie gesagt, die restriktive Regelung bei uns ist im Durchschnitt einmal die Woche da zu sein.
Also, wenn das schon die restriktive Regel ist, dann kann ich mich nicht beschweren.
Das ist schon mal dreimal besser als bei meinem alten Arbeitgeber.
Also, da kann ich auch mit der restriktiven Regelung leben.
Das, das, ich wollte gerade sagen, das klingt so nach einem typischen, ähm, so nach einer typischen, äh, Three-Heads-Handwerker-Frage.
Ja.
Genau so, genau so stelle ich mir das vor.
Ich hab mal ein Praktikum gemacht in der Autowerkstatt.
Da war ich noch sehr jung.
Das war so in der achten Klasse oder so.
Nein, in der sechsten Klasse, glaube ich.
Wo man immer ein Praktikum macht.
In der Autowerkstatt.
Leute, das war überhaupt nicht meine Welt.
Die haben den ganzen Tag solche komischen Sprüche geklopft die ganze Zeit.
Da bin ich mich dann irgendwann dran gewöhnt hab, dass es halt, dass es halt Handwerker-Speak ist im Endeffekt, ja.
Aber das fand ich damals alles sehr weirdchamp.
Was? Kein Mathe für den Informatik?
Das kann doch nicht sein.
Wenn du, wenn du, wenn du, ähm, wenn du, also, es muss ja nicht mal ein Master sein.
Aber wenn du, wenn du überhaupt, wenn du Informatik, wie soll das ohne Mathe gehen?
Also, du lernst ja die Hintergründe in einem Informatikstudium.
Du lernst da zum Beispiel, wie kann ich Algorithmus, äh, Laufzeiten, Algorithmen-Laufzeiten beweisen und sowas.
Wie soll das ohne Mathe funktionieren?
Ach so.
Ach so.
Okay.
Ich hab das falsch gelesen.
Ich dachte, es ist, generell gibt's das nicht mehr.
Okay, das ergibt natürlich schon ein bisschen Sinn.
Wobei ich eigentlich gedacht hätte, auch für Hintergründe braucht man da noch ein bisschen mehr im Masterstudium, aber okay.
Aber ja gut, das, dann ergibt's ja Sinn.
Wenn es, wenn du meinst, also, wenn es wirklich nur um den Masterstudiengang, ich dachte so, allgemein gibt's in Mathe keine, äh, in Informatik keine Mathe mehr.
Dann hab ich gesagt, hä?
Ich hab Selenium nie verwendet.
Es gibt aktuell drei Sachen, wenn du Browser automatisieren willst.
Selenium, Puppeteer und Playride.
Ja, Frankfurt Hauptbahnhof, ganz toll.
Ja.
Wenn man will, dass nach Pisse riecht überall, kann man ja mal ne Runde um den Hauptbahnhof drehen.
Wie stehst du zu physische Videospiele zu sammeln?
Pff, gar nicht.
Ich hab meine ganzen Xbox-CDs und so noch hier, aber.
Ich mein, es ist sicherlich ganz cool, wenn es ne Generation ist und ne Plattform ist, mit der man viel verbindet.
Wenn man beispielsweise sich seine A Link to the Past, Secret of Mana oder solche Dinger auf den Schrank stellt und sich irgendwie so schöne, schönen Hintergrund für Streaming macht.
Und sowas.
Dann sicherlich ist das cool, aber ansonsten.
Also auf dem Mindtower würde ich tatsächlich mal rauf, mir die Aussicht angucken.
Essen würde ich da nix, wahrscheinlich weil es abartig teuer ist.
Hat die Versicherungsbranche allgemein nen besseren Ruf bei RTlern oder im Vergleich?
Ähm, ich würde sogar eher sagen umgedreht.
Also beide, ja.
Aber ich würde sagen, wahrscheinlich Banken sogar noch eher nen Tick besser.
Wobei Banken auch teilweise sehr oldschool sind, was da so läuft.
Also, es gab noch letztens...
Also es gab noch letztens mal irgendwo so ne Tabelle.
So die bestbezahlten IT-Branchen.
Ich glaube das erste war Bank, das zweite war Versicherung und das dritte war Pharmaindustrie.
Wenn ich das jetzt noch richtig aus dem Kopf hinbekomme.
Und da würde mich nicht jucken, ob die nen guten oder nen schlechten Ruf haben, solange die ordentlich Kohle rüberwachsen lassen.
Ist mir der Ruf doch egal. Hauptsache die bezahlen pünktlich.
Wenn du Pech hast, kriegst du für sowas sogar ne Abmahnung.
Je nachdem wie der Laden drauf ist.
Sich an nem ungesperrten PC Adminrechte zu besorgen ist, je nachdem was das für ein Laden ist, schwierig.
Wolltest da eh weg, ja dann.
Also ich bin nicht der Übermatte-Checker, aber mit Programmieren klappt das eigentlich auch so ganz gut.
Hast du noch ein bisschen Kontakt zu Commander Krieger?
Eigentlich nicht, nee.
Das ist schon ne Weile her.
Okay, nice, wir haben's geschafft.
Heute bisschen längere Schwätz-Einlage wie sonst Sonntag morgens, aber muss auch mal sein.
Lass mal gucken, was können wir uns denn noch für Videos angucken.
Was haben wir denn hier schönes?
Wie man Passwörter knackt.
Okay.
Das ist ganz einfach. Man muss Best-Practice-Passwörter nehmen.
Sowas wie 123456.
Weil wie kann das schlecht sein, wenn das Passwort so verbreitet ist.
Wie man Passwörter knackt.
Ah, er wieder.
14 Minuten, okay.
Hacking-Tutorial.
Okay, jetzt kommt's, Leute.
Jetzt bin ich mal gespannt.
Guck mal, was haben wir sonst noch zu bieten.
How I swapped gaming with coding.
Das hat der Max gestern gepostet, dass wir uns das mal angucken sollen.
2 Minuten 38. Okay, das geht.
Das geht.
Schade, dass Commander...
Gut über den Content von anderen Leuten will ich jetzt nichts sagen.
Das einzige, was ich beim Krieger mitgekriegt hab, ist, dass der seit Jahren jetzt quasi irgendwie so...
Tauchzeug versucht zu machen.
Was mich persönlich nicht interessiert.
Und ansonsten...
Ja, sollen sie alle machen, was sie wollen.
Das Video ist nicht schlecht. Okay, dann gucken wir uns das jetzt an.
Da können wir auch gleich bei der Gelegenheit die Lautstärke einstellen, die natürlich unter Windows bestimmt ja nicht stimmt.
I love video games.
I've spent a good part of my life playing them.
Auf geht's.
I love video games.
Ich auch.
I've spent a good part of my life playing them.
But it was when I was in Uni clocking 10 hours a day on Steam.
I needed to make a change.
So I asked myself, why do I even play video games?
Gaming always gave me a sense of community.
I was never really good at sports.
I wasn't popular and I wasn't...
Außer weil man Singleplayer spielt.
...smart either.
So for me, my sense of community came through playing video games and talking about them.
But then it hit me.
How is that so different to coding communities?
I discovered a bunch of awesome coding communities on Discord and Reddit and as a complete noob just started talking about them.
Naja, der Unterschied ist, dass da nicht irgendwie einer sagt, irgendwie get cancer and die ich ficke deine Mutter, weil du irgendwie aus seiner Sicht den falschen Held gepickt hast oder sowas.
Das passiert eigentlich in Programmier-Communities relativ selten.
...talking to people and asking a bunch of questions.
And with that came getting good...
Okay, Off-Stack-Overflow ist ja teilweise auch schon ein bisschen.
Aber gut, so richtig krasse Sachen siehst du auf Stack-Overflow auch nicht.
Ich habe jetzt übrigens nicht zugehört.
...started talking to people and asking a bunch of questions.
And with that came getting good and the grind.
There is no better feeling than getting good at something.
Ja, gut.
And with diving into coding communities, I realized I didn't want to be the one,
asking all the questions.
I wanted to be the one answering them.
Siehste, deswegen streame ich jetzt.
Und wenn ich nicht weiter weiß, dann frage ich den Chat.
Und nicht mehr Stack-Overflow.
Ich habe das System outplayed.
So I'd spend more time...
Okay, du hast recht.
Da habe ich jetzt nicht dran gedacht.
Ja, es gibt tatsächlich Programmier-Community-Foren, die abartig sind.
Zum Beispiel das Microcontroller-Forum.
Das ist abartig.
Lass mal gucken, ob wir gleich auf den ersten Blick irgendwelche toxic Sachen finden.
Okay, da gehen wir jetzt rein.
Okay.
Das ist ja gar nicht toxic.
Das ist ja ganz normal alles.
Vielen Dank für die positiven Kommentare und Tipps.
Okay, Leute, ich glaube, einen schlechteren Thread hätte ich nicht aufmachen können,
um euch zu zeigen,
wie kacke es in dem Forum früher zumindest immer zuging.
Vielleicht haben sie sich ja ein bisschen aufgerafft.
Keine Ahnung.
Na gut.
Konnte ich euch jetzt nicht zeigen.
Aber ja, im Microcontroller-Forum ist die Umgangsform doch auch recht toxic gewesen.
Früher zumindest.
Da stand gerade schon was von X kann ich lesen.
Ja, das ist ja Standard.
Es wurden die drei ersten Antworten gelöscht.
Ach, das habe ich gar nicht gelesen.
Cool.
Geht ja schon gut los.
Ja, komm.
Natürlich sind die Leute ein bisschen älter.
Guckt euch mal die Optik von dem Forum an.
Ist garantiert, ja.
Okay.
Lass mal, lass mal weiter gucken.
Wo sind wir stehen geblieben?
Diving in the coding communities, I realized I didn't want to be the one asking all the questions.
I wanted to be the one answering them.
So I'd spend more time building things that I like, looking back, studying how I can optimize them.
All in the name of wanting to get better.
Just like gaming, programming has its own meta.
Its own skill gap, lore, tribes, arguments, its own grind.
So I just changed what I was grinding.
And fundamentally, I love grinding out video games or coding because gaming was my form of escapism.
I could plug away for hours completely free of all my problems.
And if you were a kid that grew up with a lot of instability, this escapism...
Gut, das kann man natürlich beim Programmieren auch.
Man kann ohne Probleme fünf, sechs Stunden am Tag damit verbringen und sich auf nichts anderes konzentrieren.
Man kann ohne Probleme fünf, sechs Stunden am Tag damit verbringen und sich auf nichts anderes konzentrieren.
Ja.
Also wenn man Bock drauf hat.
Might mean a lot to you.
When I found an area of programming I love, I realized I could code for hours without noticing the outside world.
Kenn ich, ja.
And that form of escapism was so much more fun than gaming, because I never felt guilty at the end of a session.
Das ist tatsächlich...
Das ist jetzt auch schon hier Programmerhumor, oder?
Because I never felt guilty at the end of a session.
Now I don't hate gaming, and I don't blame the industry.
I think the way I approached gaming was wrong.
And now I have a super healthy relationship with it.
Instead of playing, I watch my favorite streamers while I'm coding.
I keep up to date with games so I can talk.
Also Leute, ich muss sagen, bei mir ist es genau umgedreht gewesen.
Ich versuch mich in letzter Zeit tatsächlich dazu zu bringen, wieder mehr zu spielen, anstatt mich den ganzen Tag mit Technik und Proggers und Gebastelkram zu beschäftigen, so zu unternehmen.
Ich versuch mich in letzter Zeit tatsächlich dazu zu bringen, wieder mehr zu spielen, anstatt mich den ganzen Tag mit Technik und Proggers und Gebastelkram zu beschäftigen, so zu unternehmen.
Ich versuch mich in letzter Zeit tatsächlich dazu zu bringen, wieder mehr zu spielen, anstatt mich den ganzen Tag mit Technik und Proggers und Gebastelkram zu beschäftigen, so zu unternehmen.
Es gab Zeiten, da habe ich kaum irgendwas gespielt,
weil es dann einfach keine Games gab, auf die ich Bock hatte,
beziehungsweise ich einfach nicht richtig gesucht habe.
Ich habe den ganzen Tag irgendwas gebastelt.
Ich versuche es in letzter Zeit genau umgedreht, wie er hier im Video.
Ich versuche, mal ein bisschen mehr zu spielen,
einfach weil es unterm Strich mehr Hirn aus und Entspannung ist.
sorgt dafür, man kann beides
so, nennen wir es mal, zum Zeitvertreib,
zur Unterhaltung benutzen.
Wenn man was bastelt, ist es
eher so, oder wenn man was programmiert,
wenn man Technik-Sachen sich anguckt, was ausprobiert, was bastelt,
ist es eher so, dass das
Gehirn beschäftigt ist, weil es eben
Interesse an der Sache hat und im Lernmodus
ist und eben halt
ja, so
immer, weil
du deinem Gehirn quasi permanent immer so ein bisschen
Feuer gibst, so ein bisschen
Holzstücke reinwirfst
und dann brennt es weiter und so.
Und beim Gaming ist es umgedreht. Game ist eher
mehr, dein Hirn ist auch
beschäftigt, allerdings eher so
Richtung
Entspannung kann man nicht
sagen, so eher Richtung
Zerstreuung, Entspannung und
sowas. Deswegen, ich habe das schon
gemerkt, dass auch
wenn das beides richtig
Spaß macht,
ich am besten
den Sonntag mit Gaming
oder irgendwelchen Unterhaltungssachen
verbringe, anstatt mich
mit, was weiß ich,
Kubernetes
programmieren, Technik, sonst was
zu beschäftigen, einfach, weil
mal ein Tag die Woche
nicht an irgendwelche
Technik-Sachen denken,
sich Gedanken machen, ist
auch nicht verkehrt.
Und ich meine, ich arbeite
acht Stunden am Tag, vier Tage die Woche
mit Technik-Kram,
ich sitze hier vorm Stream, wir machen sehr viel
Technik-Sachen, ich beschäftige mich in meiner Freizeit
damit und
ich muss jetzt wirklich mal absichtlich
sagen, ey, ein Tag die Woche
mach einfach mal weniger, gar nichts
schaffe ich nicht, weil gerade wenn es
Themen sind, die mich sehr
interessieren und Sachen, die neu sind, da bin ich,
ich kann unglaublich schlecht
so locker lassen bei irgendeinem Thema, wenn es nicht
funktioniert. Erinnert ihr euch noch daran, wo
wir FFmpeg und C++ mit WebAssembly
im Browser gemacht haben? Das war
ein Thema, da habe ich mich nonstop zwei Wochen
mit beschäftigt, also nonstop ist übertrieben,
so jede Zeit, die ich
hatte zwischendrin,
habe ich mich zwei Wochen nonstop damit
beschäftigt, weil ich das einfach so ein
interessantes, spannendes Thema
fand und mich genervt hat,
dass es nicht richtig funktioniert hat.
Wir hatten am Ende, nur mal so
zu erklären, wir hatten am Ende
einen
Videoplayer gebaut im Browser,
der Videoformate abspielen
konnte, die der Browser
normalerweise nicht unterstützt.
Und der war besser als alle Beispiele,
die man im Internet gefunden hat,
weil der konnte streamen
und nicht nur
lade ein Video hoch und spiele es dann
im Browser ab, nein, du konntest Videos
streamen aus dem, also
im Browser von irgendeiner
URL und abspielen in
Formaten, die der Browser nicht
unterstützt. Also
du konntest beispielsweise eine URL
eingeben, wo irgendjemand
eine alte
Fernsehaufnahme,
beispielsweise hat, hier MPEG-2,
TS, die hast du angegeben
in den Player und er hat sich das
angefangen runterzuladen und während er
runtergeladen hat, hat er es schon nach FFMPEG
gepackt und FFMPEG hat es decoded
und
abgespielt.
Also, nee, Schwachsinn, FFMPEG hat es
decoded, ich hab mir die Frames rausgeholt
und die Frames hab ich dann gerendert
in ein Canvas-Element, glaube ich.
Ich glaub, das
gibt's nicht auf GitHub. Das gibt's
nur bei mir lokal in meiner, in meinem
GitLab irgendwo. Ja.
Ich hab das auch noch irgendwo.
Das haben wir im Stream gemacht und
ich hab mich auch off-Stream damit
viel beschäftigt. Ich hab da zwei Wochen dran rumgebastelt,
bis es irgendwie funktioniert hat
und mittlerweile sag ich, ja, das ist
gut, weil man lernt ja da auch viel.
Viel ist jetzt vielleicht nicht, was man direkt
im Job braucht, aber
ohne Mist, Leute, ich hab so viele Sachen schon, wo
ich mich privat damit beschäftigt hab und
sei es nur über Ecken bei mir auf der
Arbeit anwenden können und sei es nur, dass man Bescheid
wusste über irgendwas, dass
es lohnt sich immer. Es ist nie verkehrt,
technikmäßig was zu lernen, auch wenn das
nicht das ist, womit man sich primär
auf der Arbeit beschäftigt.
Aber ich hab gemerkt, es ist
einfach sinnvoll, mal eins,
zwei Tage die Woche wirklich
zu sagen, nee, auch wenn ich
Bock habe, heute weiterzubasteln
oder war das WebGL,
genau, ich hab's mit WebGL gerendert,
auch wenn ich heute richtig Bock drauf habe,
weiterzubasteln und ich schon Ideen hab, wie man
weiterbauen könnte, weiterprogrammieren, was man
noch einbauen könnte, einfach zu sagen,
nee, heute ist der Tag,
heute mach ich mal kein Technikkram von
morgens bis abends, sondern ich setz mich mal
hin und spiel mir dann eine Runde Half-Life durch.
Oder sowas in der Richtung.
Also wie gesagt, bei mir ist es genau umgedreht,
wie bei ihm im Video.
Ja, das stimmt schon,
wobei die Art, wie man sein Hirn benutzt,
halt irgendwie ein bisschen anders ist.
Wenn man programmiert, ist das Hirn halt
permanent im Denk- und Lernmodus,
was auch Spaß macht, weil man
sieht, weil das halt ultra motivierend ist,
wenn man sieht, dass das funktioniert, was man sich gedacht hat
und gerade wenn es Dinger sind, die
nicht so 0815 sind, wo du in jedem Tutorial
im Internet dir angucken kannst,
aber es ist eine andere Art von
Hirnbeschäftigung wie Gaming.
Ich finde, das kann man nicht so sehr
übereinhalten. Okay,
wenn man jetzt ein Game neu anfängt, was übelst
komplex ist, sagen wir, irgendjemand möchte
jetzt neu mit Path of Exile anfangen
und sich da voll einarbeiten. Ja doch,
das ist ähnlich schwierig.
Das gebe ich zu.
Da ist auch das Hirn
im Anstrengungsmodus.
Aber wenn man jetzt beispielsweise mal
irgendwie sagt, ey, ich spiel jetzt
irgendwie mal Half-Life wieder durch oder
irgendwie irgendeinen neuen Shooter oder irgendein Game,
was jetzt nicht ist, wo ich sagen muss, ey, ich muss
jetzt hunderte, also ich muss jetzt nicht Factorio
lernen oder sowas, ist das eine andere Art
von Hirnbeschäftigung, als wenn
man was Kompliziertes lernt
und programmiert.
Ja gut,
natürlich, die Projekte,
die man privat macht, sollte man for fun,
machen, weil ich glaube
nicht, dass ich jemals auf der Arbeit
mit C++ den WebAssembly-Video
Player programmieren muss, aber
ey, allein schon, dass man ein bisschen drüber Bescheid
weiß, was mit der Technologie alles
möglich ist, bringt einem das Wissen
eventuell schon mal was auf der Arbeit.
All the experiences that come
with loving programming.
Thank you for your time, I'm BigBox.
Alles klar, alles.
Ähm,
als Noob scheitert man halt schon oft beim Aufsetzen der Technologien.
Aber das geht jedem so.
Es ist jeder Noob, wenn er mit was Neuem
anfängt. Es ist nicht so, dass
nur, weil du Noob bist, das nicht aufsetzt.
Niemand kann das aufsetzen, wenn das was Neues
ist für ihn.
Also, du kannst
20 Jahre, sagen wir, Java-Erfahrung haben und
einer sagt zu dir, mach mal
ein Svelte-Frontend-Projekt.
Keine Ahnung davon.
Das ist normal. Du bist immer Noob, wenn du anfängst.
Wichtig ist halt, wenn du was machst,
in einem Themenbereich, der dich interessiert,
dann findest du es sogar geil, wenn du
dir jetzt angucken kannst, wie man das
Neue benutzt. Wenn du jetzt was machst,
weil du es machen musst, vielleicht weil es dein
Chef gesagt hat oder du denkst, ah,
das muss ich mir jetzt angucken, hab da aber eigentlich gar keinen Bock
drauf, ja dann stört es das. Aber ansonsten
ist es ganz normal, dass du keine Ahnung
davon hast, wenn das Neue ist.
Geht mir ja auch so. Leute, wenn ich irgendwelche
neuen Sachen, guck mal, ich mein,
wenn man irgendwie
ein TypeScript-Projekt aufsetzt,
hätte ich jetzt auch keinen Plan, wie ich das gescheit mache.
Müsste ich ja nachgucken.
Mach ich aber nicht, weil mich persönlich
TypeScript jetzt nicht so sehr interessiert.
Und bei
JavaScript ist es halt richtig, ja, abfuck, allgemein.
JavaScript-Projekte
bestehen ja immer, wenn du die
anlegst oder gerade
wenn du irgendwelche Templates benutzt,
die ja angeblich dazu führen sollen, dass du schneller
starten kannst.
Du hast dann ein leeres Projekt mit
quasi Hello World drin stehen, hast
aber 15 JavaScript-Dateien.
Du hast eine Linter-Config,
du hast eine TypeScript-Config,
du hast irgendwelche Hooks für das
Projekt, was du brauchst, du hast
irgendwelche NPM-Dinger, du hast
Package-JSON-Log,
du hast
15 Dateien, wo du denkst, warum sind die
eigentlich jetzt da? Das ist ein leeres
Projekt mit Hello World. Warum habe ich
15 Dateien da, dass sie überhaupt, dass es
überhaupt funktioniert?
Es ist halt richtig keck JavaScript.
So ist das halt in der
JavaScript-Welt. Wir müssen
wieder mal ein bisschen Frontend-Zeug basteln.
Irgendwann muss der
Label-Champ ja noch fertig werden.
Oh, das ist eine gute Idee. Der Meta-Champ
wäre das dann.
Der Meta-Champ.
Der kann dann alles
per Plugins integriert.
Okay, was schauen wir uns als nächstes an?
Lass mal kurz gucken, was haben wir hier?
Wie man Passwörter knackt. Okay.
Gucken wir mal.
Über das Thema
habe ich mich ja auch schon öfters ausgelassen, was
wichtig ist für Passwörter. Und das
Länge, das Länge
in der Regel wichtiger ist, als
die Komplexität.
Die Komplexität von
dem einzelnen Zeichen
oder der Zeichenvorrat.
Natürlich in den Extremen
mag das unterschiedlich sein.
Also wenn ich jetzt sage, hey, du kannst
jetzt bloß zwei Zeichen pro Stelle benutzen
und du machst dann halt nicht
irgendwie gleich 32 Zeichen
lang. Aber in der Regel ist
Länge bei Passwörtern das Entscheidende.
Oder man benutzt einfach
1, 2, 3, 4, 5, 6. Das ist eh das beste
Passwort. Okay, zeig mal her,
wie man Passwörter knackt.
In dem heutigen Video zeige ich dir, wie Hacker
Passwörter knacken und wie du dich davor schützen
kannst. Wir schauen... Ja, lange
Passwörter benutzen.
... uns dafür eine Web-App an, die jede Menge
typische Anfängerfehler hat.
Oh nee, please. Nicht wieder die
Geschichte mit, wir gucken in die Browser, debug
Tools und lesen Zeug aus.
Ich hoffe, es ist ein bisschen advanceder diesmal.
Die Webseite ist direkt
unter diesem Video hier verlinkt. Du kannst also
alles, was ich dir zeige, direkt nachmachen.
Vorher allerdings noch eine kleine Warnung.
Alles, was du in diesem Video lernst,
solltest du nur für das Gute verwenden.
Wenn du das nicht versprechen kannst, dann schalte
dieses Video jetzt ab und schau dir stattdessen lieber
ein anderes Video an. Ich kann dir jetzt...
Sehr guter Cheatbait. Das ist
eine sehr gute Einleitung.
Es geht nicht so sehr darum, was er sagt.
Es geht eher darum, was...
Ich frage mich, ob das...
ob er das absichtlich gemacht hat. Wenn er das absichtlich
gemacht hat, ist das eine sehr clevere Einleitung.
Es geht darum,
zu zeigen, so nach dem Motto,
hier passieren quasi super
Secret-Dinger, mit denen man
ihre Sachen anschalten kann. Niemand wird jetzt
abschalten und jeder wird gucken wollen,
was kommt denn da jetzt?
Das ist richtig... Das ist ein sehr cleveres Intro gewesen.
Ich kann dir jetzt schon versprechen,
nach diesem Video wirst du mehr über das Hacken
von Passwörtern verstehen, als 95%
der Menschen da draußen. Ja gut, 95%
der Menschen, die wissen noch nicht mal, wie sie ihren Toaster richtig
einschalten. Und dementsprechend kannst du dich natürlich
dann auch optimal davor schützen. Wenn du
Softwareentwickler werden möchtest, dann gehört das Wissen
aus diesem Video hier zu deiner Grundausbildung.
Denn du musst ja deine Software auch
vor so typischen Sicherheitslücken schützen.
Genau deswegen bringe ich als Programmierlehrer
das übrigens auch in unserer Weiterbildung
bei. Es ist ganz einfach, man darf
einfach nie Fehler programmieren. Dann braucht man
so ganze, ganzen Guides nicht.
Und das Beste ist, man braucht auch
keine Tests mehr und man braucht
keine Dokumentation mehr, weil es
funktioniert halt einfach.
Also, ich würde sagen, wir legen los und
dafür müssen wir uns natürlich erstmal anschauen,
wie so ein Authentifizierungsverfahren
überhaupt aussieht. Vorher. Wenn wir uns
in unsere App einloggen wollen, dann benötigen
wir, so wie bei den meisten Apps, eine Kombination
aus E-Mail und Passwort.
Und bei den meisten Applikationen...
Moin Patrick, 47 Monate, das ist ja
extremst...
Nice!
Ja,
übrigens, jetzt wo du gerade da bist, schön, dass du
so lange am Start bist, auch dass du Discord
Modgis machst und alles mögliche.
Beziehungsweise nicht Modgis,
du machst ja nicht Discord Modgis, du machst
Discord Channel Lösch
Modgis. Dass du mit dem
Sibaro damals den Discord aufgesetzt hast und
alles. Also, schön, dass du an Bord bist.
So, mal sagen jetzt, nee, ich will jetzt nicht jeden
Monat rumschleimen oder so, aber
muss ja auch mal gesagt sein.
Irgendwo gespeichert in einer Art
Tabellenform. Ganz vereinfacht gesagt
sind die... Und wenn wir gerade
dabei sind, weil ich den Max gesehen habe,
weil ich gerade den Max gesehen habe,
ich kann nicht mehr reden, Alter, weil ich gerade den Max
gesehen habe im Chat, auch sehr nice,
dass du sowas wie das Archiv erstellt hast.
Also, wir haben richtige Five-Hat-Modgis, alle Modgis
massive Five-Hat und wir wissen ja, dass jeder
Prime-Sub und auch jeder Follower
und jeder Zuschauer allgemein für höheren
IQ des Durchschnitts-Chat-Users
sorgt bei mir.
Aber das Archiv ist auch schon
so eine richtige Five-Hat-Geschichte.
Wisst ihr eigentlich,
wisst ihr eigentlich, dass das
Archiv,
ich glaube, oft genug kann man das nämlich nicht zeigen,
wisst ihr eigentlich, dass das Archiv
ein automatisches
Transkript erstellt
für jeden, für jeden
Stream, wobei ich mir gar nicht
sicher bin, wo man das sehen kann. Metadaten?
Max, wo sieht man das?
Oder benutzt er das nur für die Suche?
Einfach unter... Ah,
Untertitel, hier, Transkript.
Leute,
guck mal, guck mal, seht ihr das?
Also sprich,
das Archiv
extrahiert, was ich in den Videos,
in den Worts sage und noch viel
besser,
guck mal, man kann sogar
das dann durchsuchen.
Ne, ne, das sieht nur genauso aus.
Man kann das sogar durchsuchen.
Also guck, hier,
sage ich im Video,
bei 18 Minuten 24, sage ich
Fifehead. Überprüfen wir mal, ob das
stimmt. Ist wie bei
Chat-GPT. Fifehead.
Wisst ihr?
Fifehead.
Exakt an der Stelle
sage ich Fifehead.
Und das ist natürlich sehr nice, wenn man
ein Archiv hat, was
das gesamte Gesagte
indiziert,
weil ich sage viel, wenn der Tag
lang ist und anhand der Videotitel,
finde ich es nicht mehr unbedingt, ja.
Zum Beispiel, wenn ich wissen will, wo habe ich das letzte Mal
was über den ESP32 erzählt?
Transcript?
Blub.
Finden wir alles, wo ich was mit ESP32 gesagt habe.
Anscheinend habe ich hier gesagt,
der ESP32-Task-Scale
wird dazwischen hin und her schalten,
auch wenn einer in Endlosschleife, blablabla.
Ich weiß nicht, mit was der Max
das gemacht hat. Zumindest weiß ich,
dass die initiale Version, glaube ich,
irgendwie 14 Tage mit
zwei GPUs in der Cloud
gerechnet hat. Also sehr
Six-Head-Time schon.
So, weiter geht's. Wie man Passwörter
eignet. Also, auf geht's.
... auch irgendwo gespeichert, in einer
Art Tabellenform. Ganz vereinfacht
gesagt, sehen diese Tabellen dann so
aus. Wir haben hier jede Menge Kombinationen
aus E-Mail und... Naja, also
wenn man es schlecht macht, dann ja.
Wenn man es halbwegs gescheit macht, wird das Passwort
natürlich serverseitig nicht im Plaintext
gespeichert. Ich denke mal, das wird er auch gleich
schon noch erzählen. Aber sowas,
sollte auf Serverseite nie im Leben
gespeichert sein. Nie.
... sehen diese Tabellen dann so aus.
Wir haben hier jede Menge Kombinationen
aus E-Mail und Passwort.
Natürlich stehen da noch jede Menge andere Daten,
wie zum Beispiel Vorname, Nachname, Adresse
und was halt sonst noch so gespeichert werden
muss. Und hier gibt's jetzt schon das erste Problem.
Guck mal. Unsere App...
... und was halt sonst noch so gespeichert werden muss.
Und hier gibt's jetzt schon das erste Problem.
Unsere App besteht normalerweise immer aus
einem Frontend und einem Backend.
Das Frontend ist der Teil, der auf
einem Gerät gespeichert ist, während das
Backend der Server im Hintergrund ist.
Den Code in unserem Frontend,
den können wir meistens lesen.
Das heißt, wenn ich die Applikation
jetzt in meinem Webbrowser gespeichert habe,
dann kann ich diese einfach öffnen,
kann hier einen Rechtsklick machen, kann auf
Seitenquelltext anzeigen gehen und sehe
jetzt hier den Quelltext. Und hier sehe ich
auch unser JavaScript und alles,
womit die App geschrieben ist. Das heißt,
wenn unsere Tabelle aus Nutzernamen,
E-Mail, Passwörtern und so weiter hier gespeichert ist,
dann... Naja gut,
also...
Ich meine...
Wer speichert
alle seine User im Frontend?
Also das...
Ich meine, da wäre ich jetzt gar nicht auf die Idee
gekommen, überhaupt, dass das eine Möglichkeit
ist. Aber ja, ich meine, theoretisch
gibt es bestimmt Leute,
die in ihren JavaScript Quelltext
reinschreiben, if Passwort
gleich gleich 123456
und so. Ja, gibt es
bestimmt.
Haben wir natürlich ein Problem,
denn das kann einfach jeder
einsehen. Was hingegen nicht jeder einsehen
kann, sind die Daten, die in unserem Backend
liegen. Genau deswegen machen wir es auch so,
dass wir unsere Nutzerdaten auf
unserem Server speichern und
nicht in unserer Frontend-Applikation.
Wir haben also eigentlich zwei
Programme. Ein Programm, was in unserem Web... Und danach
Möglichkeit, die Passwörter auch nicht im Klartext...
... oder auf unserem Handy läuft und ein
Programm, was hinten auf unserem Server
läuft. Mit unserem Server
kommunizieren wir über eine sogenannte
Schnittstelle. Das ist meistens einfach...
Okay, ich glaube... Okay, ich muss mal ein bisschen
vorspulen.
... dass da noch irgendwas kommt.
Wo geht denn jetzt das Gehecke los?
... einem Rechtsklick, dann gehen hier an der Seite so
Entwicklertools auf. Ich empfehle dafür
immer den Chrome-Browse. Dann siehst du ganz
einfach mal, dass hier im Hintergrund
etwas gesendet wird. Das hier ist
unsere Anfrage an den Server.
Und hier sehen wir auch, wenn wir draufdrücken direkt,
was wir gesendet haben, wenn wir auf Payload
drücken. Immerhin ist die
Webseite schon mal über TLS.
Ja gut, das ist so.
Wenn man so Sachen im Plaintext schickt,
dann stehen die halt auch im Post-Request
oder vermute mal, dass es
ein Post ist. Stehen die natürlich
auch im Plaintext drin.
Was schon einmal
blöd ist, aber
nachdem das Ganze über TLS geht,
also über SSL
geht, HTTPS geht,
gar nicht so wild ist, wie es vielleicht
jetzt aussieht.
Es ist zwar doof, aber
zumindest kannst du es unterwegs
nicht richtig abgreifen.
... und das Passwort
Hallo123.
Und wenn wir auf Preview drücken,
was für eine Antwort wir von
Ja, okay.
... die wird hier ja, wir können Frieden
... das Ganze machen wir jetzt nicht nochmal.
Hier im Darknet sehen wir ein, aber hier
... was, was?
... Sache, wenn ich jetzt max.muster.de
eingebe, dann kommen wir immer noch nicht rein,
aber hier hat sich die Fehlermeldung auf einmal
geändert. Hier steht, der Login ist fehlgeschlagen.
Das spricht wiederum dafür, dass die Logik
sich von unserem Server verändert hat.
Okay, das, da muss ich ihm recht geben,
das stimmt. Das ist immer ein bisschen
fragwürdig, ob man anhand der Login-Meldung
erkennen können sollte, ob es den Account
schon gibt oder nicht.
Also ich würde sagen, bevorzugt
sollte man das so machen, dass es nicht ersichtlich ist.
Dass die Fehlermeldung zwischen
Account existiert nicht und Account gibt's
und Passwort ist falsch immer die gleiche ist.
Ja, also man könnte
durchaus einfach zurückliefern,
Username, Passwort falsch.
Und das immer, egal ob es das Passwort
gibt, ob es den User gibt,
oder ob es das nicht gibt.
Das machen ja auch
viele Seiten, die eine
Passwort-Recovery-Funktion haben.
Okay, dann gibst du ein
deine E-Mail-Adresse und dann
sagen die, sollte diese E-Mail-Adresse
existieren, haben wir ihnen jetzt irgendwie
einen Recovery-Link geschickt. Also sprich,
die sagen noch nicht mal, auch bei der Recovery,
ob es die E-Mail gibt oder nicht. Es gibt Seiten,
die machen es nicht so, die sagen, deine E-Mail nicht gefunden.
Aber die beste Variante ist tatsächlich
immer das gleiche zurückgeben.
Also egal, ob du jetzt den User
kennst oder nicht. Ja, da muss ich ihm recht
geben. Wobei, er hat es ja noch gar nicht
gesagt, aber ich denke mal, er wird es gleich sagen.
Das heißt, hier muss irgendetwas jetzt anders
sein. Ich gehe davon aus, dass die E-Mail-Adresse
existiert in der Datenbank
und dass nur noch das Passwort falsch ist.
Das heißt, jetzt müssen wir nur noch verschiedene
Passwörter ausführen. Hier kann man
wiederum ein kleines Programm schreiben, was einfach mal
die häufigsten Passwörter ausprobiert.
Das Ganze kann man mit Googeln sehr schnell herausfinden.
Da gibt es riesige deutsche Passwort-Listen
und wenn man die alle austestet,
dann bin ich sicher, dass man hier reinkommt.
Deswegen machen wir das Ganze jetzt nicht nochmal. Ich habe dir
das Video aber hier verlinkt. Wenn du jetzt
einfach mal googelst, dann findest du hier jede Menge
Listen mit verschiedenen Passwörtern.
Es gibt auch 30 Milliarden Passwort-Tools, die das für
einen dann machen. Das ist kein Ding.
Die du einfach downloaden kannst. Hier ist zum Beispiel
so ein kurzer Ausschnitt
und die kannst du dann einfach...
Deswegen ist es teilweise auch gar keine blöde Idee,
solche Logins mit Captchas abzusichern,
dass man das nicht so einfach automatisch hier durchprobieren
kann.
...mit einem kleinen Skript
durchrattern lassen. Ich habe das Passwort
jetzt schon gefunden. Ich hake hier oben mal
Preserve. Also du musst halt einfach gucken, wie viele Anfragen
kamen jetzt von diesem und diesem Absender
und dann sagst du, hey, du darfst
nicht, es sei denn, du löst das Captcha.
Das sorgt auch gleich dafür,
dass wenn die Leute das über Curl abschicken wollen,
dass das nicht richtig funktioniert.
Ja. Es ist sicherlich auch
nicht verkehrt, irgendwelche Cookies zu setzen, wo mit
Kommandozeilen-Tools nicht richtig klarkommen,
wo du dann einen richtigen Browser verwenden musst. Also es ist
alles sinnvoll, was es für den Angreifer
möglichst teuer macht,
das durchzuprobieren.
Drücke jetzt auf Login.
Jetzt sehen wir hier, dass jede Menge neue Sachen
passieren und unter anderem
sehen wir auch hier mein Passwort.
Damit kannst du dich auch einloggen, nämlich
max-at-muster.de und mein Passwort ist
test123. Was wir jetzt
allerdings sehen, ist noch viel, viel
interessanter, denn uns geht
Nee, habe ich nicht.
Ich kenne das Ding, habe ich es noch nicht angeguckt.
Es ist nicht darum, einfach in irgendeinen
Account reinzukommen. Wir könnten uns ja auch einfach
auf den meisten Seiten einen erstellen,
sondern wir wollen natürlich
Sachen machen, die man sonst
nicht machen kann. Und wenn wir
hier jetzt mal gucken, dann sehen wir, dass noch viele
weitere Dateien von unserem
Server geladen wurden. Beispielsweise
eine HTML-Datei, dann
noch ein Bild. Ja, das ist wahrscheinlich das Bild,
wenn ich hier raufdrücke, von diesem User, der hier
rechts oben angezeigt wird. Ein JavaScript,
ein bisschen CSS und ein Hintergrundbild.
Okay. Und da unten,
wenn wir hier nach ganz unten gehen,
das ist das Interessante.
Hier sehen wir jetzt, dass
unser Nutzer von
unserem Server geladen wurde.
Hier steht jetzt Login Challenge
developerakademie.net slash users
slash 1.
Das ist sehr interessant und ich könnte das Ganze
auch jetzt oben in meinem Webbrowser
eingeben und dann bekomme ich
Okay, wenn das jetzt funktioniert mit User
2, dann haben die auf
Serverseite schon mal nicht richtig aufgepasst.
Alle Daten hier in solch einer
Struktur, die hier angezeigt
werden. Das ist aber mal gar nicht so
abwegig. Da gab es tatsächlich in der
Vergangenheit schon viele Probleme. Ich erinnere mich
zum Beispiel daran, dass sogar, glaube
die Telekom war das, mal
Probleme hatte, in
dieser Art und Weise, dass du in
wenn du in deinem Profil eingeloggt
warst bei der Telekom, Sachen von anderen
Leuten sehen konntest und
teilweise sogar freischalten konntest von anderen
Leuten. Ist schon ein paar Jahre
her, aber ich bilde mir an, es war sogar
in den Telekom, auf der Telekom
Seite in den Profilen.
Also
haben schon auch größere Seiten was
verkackt in der Richtung. Auf unserer Seite.
Das heißt, wir fragen von
unserem Server die Daten von
Userinformationen geliefert auf, mit der
wir mit jeweiligen können.
Mit Rufen.
Dass diese häufigen URLs, die ein
Server sehr wahrscheinlich hat, einfach mal alle
ausprobiert werden. Und man guckt einfach mal, ob
sie existieren und ob man da etwas findet.
Ja, okay, das ist auch relativ normal.
Sobald du irgendeinen Port
aufhast im Internet, hast du schon die ersten
Russen, China, Chinesen, Indischen und sonst
was Bots drauf. Und sei es nur SSH,
die sich versuchen einzuloggen.
Also das ist ja ganz normal.
Und wenn du gar
so mutig sein solltest, in WordPress zu
verwenden, dann wirst du in deinen Logs sehen,
dass permanent Bots alte Sicherheitslücken
durchprobieren.
Patrick, erinnert mich ein bisschen daran.
Ist natürlich das, was ich jetzt erzähle,
ist mir hat nicht die gleiche Tragweite,
aber wobei nicht wirklich.
Ich habe mir meine Kamera gekauft.
Und das war eine Kamera von einem deutschen
Hersteller, so WLAN, WLAN Kamera.
Und da ist mir aufgefallen, dass man das
Root Passwort rausbekommen kann mit einem
einfachen Curl Aufruf.
So, weil also wie ich drauf gekommen bin,
ist folgendes.
Normalerweise musst du dich im Web Interface
einloggen bei der Kamera und Passwort
eingeben, Admin Passwort eingeben, dass du
was einstellen kannst.
Dann habe ich, bin ich aber mal mit einem
Viewer an die Kamera, also mit so einem
Video Video on 5th Viewer, das ist so ein
spezielles Kameraprotokoll und ich
musste nur die IP eintragen von der
Kamera. Und der hat auf einmal ein Video.
Doch, doch, doch kann sein, dass ich das sogar im
Stream gezeigt habe.
Hat man mal, ich bin mir aber nicht mal
wie ich, ich, ich bin mir nicht mal sicher,
wie das Abkennen genau hier von denen.
Das ist eine deutsche Firma, von denen hatte
ich mir eine Kamera geholt, weil die, weil
die günstig war, so wie so eine so eine
drehbare Autor Kamera ist schon ein paar
Jahre her.
Muss mal gucken, vielleicht.
Wir können mal klar das Archiv dazu bringen.
Vielleicht habe ich das tatsächlich schon
mal gesagt.
Absenkling.
Nee, keine Ahnung, ob ich das, ob das zumindest
von denen hat.
Ich bin eine Kamera gekauft.
Und zumindest ich habe die dann in den in
so einen On5 Viewer gepackt und auf einmal
ging der Stream von der Kamera an, der
normalerweise nur mit Username Passwort
abrufbar sein soll.
Dachte hä, wie, warum kann das Ding von der
Kamera streamen, ohne dass ich ein Passwort
eingeben muss?
Das ergibt doch keinen Sinn.
Und habe ich mich mit einem TCP Dump Quatsch
mit einem Wireshark da mal drangehängt und
geguckt, was passiert.
Und dann ist mir aufgefallen.
Aha, nee, ich glaube, mit Wireshark ging das nicht,
weil es über HTTPS ging.
Ich glaube, ich musste, ich musste den ich musste
den On5 Viewer, das war eine .NET Anwendung, die
musste ich glaube ich selbst kompilieren und ein paar
Print, Print, Printlines reinschreiben oder zumindest
lange Rede, kurzer Sinn.
Die Kamera hat, damit das automatische Viewen von
dem Stream geht, über, das hat quasi nicht nur den
Stream zurückgemeldet, sondern den Stream inklusive
Benutzernamen und Passwort.
Also du hast die Kamera gefragt, Kamera, sag mir mal alle
Streams, die es bei dir gibt und da hat die Kamera nicht nur
geantwortet, ich habe Stream eins und Streams zwei, nein, die
Kamera hat geantwortet mit, ich habe Stream eins unter dieser
URL und Stream zwei unter dieser URL und in diesem, in dieser
URL stand Basic Auth, Username, Passwort.
So.
Was, und gleichermaßen nicht einfach nur ein Viewer Passwort, sondern
das Root Passwort.
So.
Das Root Passwort für die Kamera, weil das alles durfte und das
heißt, du konntest mit einem einfachen Curl Aufruf, konntest du
das Root Passwort auslesen aus der Kamera.
So, und das habe ich denen dann geschickt.
Ich habe auf GitHub ein Gist hochgeladen mit einem, mit so einem
Proof of Concept, dass das halt easy ist, Curl an die Kamera
schicken und du hast das Root Passwort, habe ich an den
Hersteller geschickt und der Hersteller hat geantwortet wie,
ähm, probieren Sie doch bitte mal ein Firmware Upgrade,
und, ähm, die haben es nicht gecheckt.
Ja, genau, so war es in der Richtung.
Genau exakt, exakt so was in der Richtung.
Ja, kam da, kam da zurück.
Genau so, so sah das ungefähr aus und die haben es erst mal nicht
kapiert, die haben gesagt, ja, machen Sie mal bitte einen Firmware
Upgrade und bla, da hab ich gesagt, hey, nee, ich habe die
aktuellste Firma und ich glaube, ihr habt nicht verstanden, was ich
euch gerade gesagt habe.
Du machst einen Curl unauthentifiziert und kriegst das
Root Passwort von der Kamera und dann kam das Ganze wohl irgendwie
auch raus, ähm, bei irgendeinem.
Ich hatte ein bisschen Ahnung davon hatte und dann kam die
Antwort, die Antwort war auch geil, oh, jetzt können Sie das
Ganze nachvollziehen, ob ich nicht bitte, das war das Erste,
was Sie geschrieben haben, ob ich nicht bitte den Gist
entfernen kann von GitHub.
Das war das größte Problem, was Sie hatten, dass ich den Gist
gepostet habe auf GitHub.
Ich habe den nicht entfernt, der ist heute noch da, aber der ist
unlisted, also den findet man gar nicht public übers übers
Internet. Der ist heute noch da und man sieht da auch alles
Mögliche noch drin.
Weil ich dachte mir, so ein bisschen Druck dahinter muss sein
und die haben mir dann hoch und heilig versprochen, beim nächsten
Firmware Update wird das behoben und ich habe die Kamera nie
benutzt, ja, die lag bei mir jetzt jahrelang rum und die liegt
hier auch immer noch irgendwo rum und irgendwann, ich hatte es
schon wieder vergessen, ich hatte es, ich hatte es schon wieder
komplett verdrängt, irgendwie, keine Ahnung, so ein Dreivierteljahr
oder ein Jahr später oder so.
Nee, nee, nee, nee, es ist angeblich gefickt, irgendwie ein
Dreivierteljahr oder ein Jahr später habe ich eine E-Mail noch
bekommen.
Ja, mit dem neuen Firmware Update wäre das jetzt behoben.
Ich habe weder Firmware Update gemacht bis jetzt, noch habe ich
das ausprobiert, ob man das nicht anderweitig irgendwie umgehen
kann.
Aber das war schon echt wieder sehr, sehr fragwürdig.
Also ja, das ist das, was ich meine.
Die sind auch sauer geworden, dass ich ein Gist gepostet habe,
quasi.
Nicht so sehr, dass ihr System kacke ist, sondern dass ich das
quasi erwähnt habe.
Inwieweit wurden sie denn bei dir wütend am Telefon, so nach dem
Motto, wir verklagen sie, wenn sie das öffnen.
Oder wie?
Okay, gucken wir mal weiter.
Also so richtig, richtig krasses Gehecke war bis jetzt ja noch nicht
dabei.
Haben da natürlich verschiedene Tools, aber selbst wenn du einfach
mal auf einer Seite hier Slash Admin oder irgendwas eingibst,
wirst du erstaunt sein, wie häufig du hier etwas findest.
Und ich möchte nochmal darauf hinweisen, dass du das Ganze nur
bei deinen eigenen Systemen durchführen solltest.
Die meinten, dass wenn ich ja war klar, dass sie mit so einem
Scheiß um die Ecke kommen.
Das ist doch nicht illegal, Alter.
Du kannst doch so viele.
Ach Gott.
Die Schwätzer, Mann, anstatt sich mal mit ihrem eigenen System zu
beschäftigen und zu sagen, ey Jungs, ihr aus unserer
Entwicklungsabteilung, uns hat einer gemeldet, du kannst von
anderen Leuten da so Zeug manipulieren.
Das führt im Endeffekt nur dazu, dass die Sicherheitslücken einfach
jahrelang da bleiben und irgendwann werden die möglichst heimlich
missbraucht.
Und wenn es dann rauskommt, ist die Kacke wieder am Dampfen und
nach dem Motto, oh nee, da konnten wir gar nichts von wissen.
Wir werden das jetzt schnellstmöglich beheben und es ist auch gar nichts
passiert.
Blablabla.
Oder wenn du da die ganz ausdrückliche Erlaubnis für hast.
Slash Profile finden wir hier auch.
Ja, easy light, da kann ich mich dran erinnern.
Da war was.
Ja, ja, ja.
Users Slash eins eingibst, dann findest du hier.
Okay, und jetzt gibt der User Slash zwei ein und da.
Das sollte natürlich nicht gehen, aber das ist, würde ich sagen,
tatsächlich noch halbwegs realistisch.
Es gibt, gab in der Vergangenheit genug Seiten, die hatten das Problem,
dass die eben vergessen haben, über ihre in ihren API Routes
zu checken, ist authenticated oder irgendwie sowas.
Es gibt ja mittlerweile bei den meisten Web Frameworks sinnvolle
Möglichkeiten, User zu kontrollieren und sowas.
Das musst du ja gar nicht mehr von Hand machen.
Die Zeiten sind vorbei, wo du in PHP selbst checken musstest,
ist in diesem Parameter das drinne und der User und hier heute,
also bei in .NET, in ASP.NET Core ist das zum Beispiel relativ easy.
Du schreibst einfach über deinen API Endpunkt ein Attribut oben drüber.
Da gibt es dann sowas wie sowas wie ist authorized, is same user,
is locked in und solche Geschichten.
Da markierst du einfach die Methoden, die mit den nötigen Rechten,
die der User braucht, und dann handelt das Framework für dich das unter
der Haube und wahrscheinlich handelt das Framework das besser für dich,
als wenn du das selbst machen würdest.
Aber das stimmt schon.
Es gab genug Seiten, die ähnliche Probleme hatten.
Und wie gesagt, ich bilde mir ein, dass sogar die Telekom-Seite vor ein paar
Jahren so Probleme hatte.
Hat der Heise was zugeschrieben?
Ja, sowas hier zum Beispiel.
Ja, sowas hier zum Beispiel.
Daten-Lag in der Telekom Cloud ermöglicht Zugriff auch auf fremde
Adressbücher.
Genau solche, solche Geschichten.
Ja, lol man, danke für den Zap.
Also da sieht man das, was er da zeigt.
An der Stelle ist gar nicht mal so weit hergeholt.
Da sollte nicht passieren, wenn es ordentlich gemacht ist.
Passiert aber wahrscheinlich heute immer noch.
Finden wir was?
Das ist jetzt wirklich ein ganzes drinstehen.
Komisch ist hier sieht das Ganze jetzt allerdings so aus und das ist ein
zusätzlicher Sicherheitsmechanismus, den die meisten Backend-Systeme
standardmäßig haben.
Wenn es nämlich wirklich jemand schafft, in die Datenbank reinzugucken, dann
niemand sollte die Passwörter im Klartext speichern.
In der Datenbank, da sind wir uns, glaube ich, drüber einig.
Auf der anderen Seite gibt es sicherlich noch genug Backends, die genau das machen.
Wahrscheinlich.
Unter anderem deshalb, dass man sagen kann Haha, guck mal hier Passwort Recovery und
man kriegt sein Passwort wieder zugeschickt.
Leute, wenn eine Seite Passwort Recovery anbietet und das nicht das Setzen eines neuen
Passwortes ist, sondern das Restoren des alten Passwortes.
Dann ist die Seite scheiße so und sollte es gar Seiten sein, die sagen Wir haben die
Daten, wir bewahren Daten verschlüsselt auf und die haben so was wie eine
Passwort Recovery.
Dann könnt ihr davon ausgehen, dass die auch für den Arsch ist, weil bist du auf Instagram?
Nee, Jasper, danke schön für den Sub, weil bei Verschlüsselung muss es bei Design so sein.
Wenn du das Passwort vergisst, dann sind die Daten weg.
Das ist kein Feature in dem Sinn mit Passwort Recovery.
Es darf keine Passwort Recovery geben, also Passwort weg, Daten weg.
Alles andere ist nicht gescheit verschlüsselt.
Die Möglichkeit, ein weiteres Passwort hinzuzufügen.
Das ist was anderes, wenn du noch authentifiziert bist, weil meistens werden die Daten, zumindest
wenn man jetzt mal von Disk Verschlüsselung spricht, meistens werden die Daten ja nicht
verschlüsselt mit dem Passwort.
Okay, das muss ich euch jetzt mal kurz erklären.
Also stellt euch mal vor, ihr benutzt was, um eure Festplatte zu verschlüsseln.
So, dann funktioniert das in der Regel meistens folgendermaßen.
Ihr habt irgendwie den Plaintext.
Ihr habt eine Textplatte.
Hier, plupp, plupp, txt und da steht 1, 2, 3, 4, 5, 6 drin.
So, und dieser Block auf der Festplatte soll jetzt quasi verschlüsselt werden.
Dann ist halt die Frage, also keine Ahnung, das wird dann mit IS-256 verschlüsselt.
Dann ist halt die Frage, mit welchem, nennen wir es mal Passwort, verschlüsseln wir das Ganze.
Und man denkt vielleicht, es wäre das Passwort, was man zum Entschlüsseln eingibt.
Ja, weil keine Ahnung, ABC123.
Also 1, 2, 3 ist mein Passwort.
Also man denkt jetzt vielleicht, mit diesem Passwort wird diese Datei verschlüsselt.
Das ist aber nicht so.
Das Erste ist, ich glaube, damit IS-Performant funktioniert, ist es am besten, wenn die, wie nennt man das, die Block, die Secrets, mit denen das verschlüsselt wird, glaube ich, größeres, mehrfaches von 2 sind.
Also irgendwie an beiden Grenzen aligned sind oder sowas, glaube ich, ist das, dass das ordentlich performant funktioniert.
Und damit das sicher ist, sollte das natürlich auch möglichst lang sein.
Das heißt, die Datei wird nicht mit eurem Passwort verschlüsselt, sondern die Datei wird mit einem random generierten Schlüssel verschlüsselt.
Also zum Beispiel mit sowas hier.
Also die Datei wird damit verschlüsselt und das hier wird dann mit eurem Passwort verschlüsselt.
Also es ist so, es wird ein random Secret generiert, mit dem wird die Datei verschlüsselt und dieses Secret wird irgendwo abgelegt.
Und das Secret wird nicht...
Es wird nicht mit dem Klartext abgelegt, sondern wird verschlüsselt mit eurem Passwort abgelegt.
So, das ist so die ganz grobe Geschichte.
Das heißt, wenn ihr euren Rechner startet und ihr müsst ein Passwort eingeben, dann ist das nicht das Passwort, was dazu dient, eure Dateien zu entschlüsseln, sondern es ist das Passwort, was dazu dient, quasi das eigentliche Secret zu entschlüsseln, mit dem dann eure Dateien ver- und entschlüsselt werden.
So, warum habe ich das jetzt nochmal erzählt?
Genau, so und jetzt ist es ja folgendermaßen.
Wenn man jetzt dieses Passwort hier verliert...
Ist ja das hier nicht mehr entschlüsselbar und deswegen kann man da auch nicht drauf zugreifen.
So, es gibt jetzt Möglichkeiten, zum Beispiel...
Bin mir gar nicht sicher, ob TrueCrypt das sogar kann, äh, VeraCrypt das sogar kann, aber es gibt Möglichkeiten, dass man mehrere Keys ablegt oder eben mehrere, sag mal so, gut merkbare, super Passwort, 1, 2, 3, so hinterlegen kann, dass man das Passwort nicht mehr entschlüsselt.
Also, wenn man das Passwort nicht mehr entschlüsselt, dann ist das Passwort nicht mehr entschlüsselt.
Oder, dass man diese Master Keys irgendwie mit mehreren Passwörtern entschlüsseln kann.
Frag mich nicht genau, wie das funktioniert, da bin ich kryptotechnisch zu nubig für.
Also, das hier ist ja das eigentliche, was benutzt wird für die Dateien zu und entschlüsseln.
Aber das heißt, wenn man schon authentifiziert ist und ein weiteres Passwort hinzufügt, das ist okay.
Was nicht sein darf, ist, ich habe mein Passwort verloren und ich kann es irgendwie wieder recoveren.
Also, sobald ich die Möglichkeit habe, an diesen Key dranzukommen...
Ohne, dass ich das Passwort habe, mit dem ich verschlüsselt habe, ist es voll für den Arsch.
Und jeder Verschlüsselungsservice und jeder Dienst, der das ermöglicht, ist unsicher bei Design.
Das darf nicht sein.
Also, wenn ihr feststellt, dass irgendein Anbieter gar euer Passwort recoveren kann,
indem ihr sagt, ich habe mein Passwort vergessen und ihr bekommt das Passwort, was ihr gesetzt habt, wieder zugeschickt,
das ist höchst fragwürdig, weil das heißt, die haben euren Kram in irgendeiner Art und Weise im Playtext gespeichert
und das sollte eigentlich nicht der Fall sein.
Wird da nicht eine Hash-Funktion verwendet? Dürfte doch Performante als AES sein?
Ne, um die Dateien zu ver- und entschlüsseln, wird das nicht benutzt, weil Hash ist eine One-Way-Funktion.
Also, du kannst eine Datei nicht per Hash verschlüsseln.
Okay, verschlüsseln schon, du kannst die Hash, aber du kriegst sie halt nicht mehr rückgängig gemacht.
Deswegen brauchst du sowas wie AES, weil das Synchron ist.
Also, ne, stimmt nicht.
Blödsinn, das Synchron hat mit Hash nichts zu tun.
Da geht es um AES versus sowas wie RSA.
Also, Synchron.
Synchron, ähm, nicht Synchron, äh, symmetrisch versus asymmetrisch.
Also, sprich, müssen beide Seiten das gleiche Passwort kennen oder nicht.
Ähm, bei Hash-Funktion kannst du das vergessen, ja.
Also, bei Hash-Funktion kriegst du nichts mehr entschlüsselt.
Hash-Funktion ist wie der Fleischwolf.
Du schmeißt was rein, es kommt im Endeffekt irgendwas raus, was auf dem basiert, was du reingeschmissen hast,
aber du kriegst das nie wieder raus, wenn es eine gescheite Hash-Funktion ist,
was du reingeschmissen hast.
Bei AES ist das umgedreht.
Bei AES verschlüsselst du was mit einem Passwort, es sieht aus wie durch den Fleischwolf,
aber du kannst es mit dem gleichen Passwort auch wieder entschlüsseln.
Man kann die Passwörter, man kann die Passwörter noch gehasht speichern und dann abgleichen,
oder geht es gerade nicht darum, wie die Passwörter...
Ach so, ja, bei Web-Services, ja, bei Web-Services ist es schon so, da hast du recht,
aber es ging gerade um das Verschlüsseln von Dateien auf der Festplatte.
Ja, das kannst du machen, wenn du die Dateien abspeichern willst,
die werden in der Regel auch als Hash gespeichert.
Das heißt, wenn du eine ordentliche Authentifizierung machst bei einem Web-Service,
dann wird das Passwort auf Client-Seite gehasht und der Hash übertragen
und es wird im Endeffekt geguckt, ob der Hash übereinstimmt.
Ja, ähm, das kannst du machen.
Wobei halt auch der Hash nicht ohne Salt gespeichert werden sollte.
Ja, genau.
Ja, sonst hast du das Problem,
dass du im Zweifelsfall vorgenerierte Tabellen benutzen kannst,
um das wieder zu entschlüsseln, ist das falsche Wort,
dass du von dem Hash-Wert schließen kannst auf einen möglichen Plaintext.
Ja, das stimmt.
Oh, gucken wir uns mal das Video an.
Ups, ich will nicht Mario Playlists angucken. Falsch.
...würde die Person natürlich nicht gleich noch alle Passwörter haben
und genau aus diesem Grund speichern wir Passwörter normalerweise als Programmierer,
niemals so in einem Klartext in unserer Datenbank ab,
sondern das Ganze wird gehasht.
Das heißt, das Ganze sieht in der Realität eher so aus.
Und dieser Hash wird einfach erstellt mit einer Mathe-Map.
Und meistens sollte noch ein Salt drinnen stehen.
Der Sinn ist, das habt ihr vielleicht schon gesehen, ähm,
das habt ihr vielleicht schon gesehen, ähm, wie sieht denn das bei Linux aus?
Äh, Linux, Shadow, also, guck mal.
Ja, genau. Hash.
Hier sieht man das.
Äh, ich glaub, ich kl...
Ist da überhaupt ein Hash drinnen?
Hash, Dollar, Hash?
Wo ist ein Hash? An welcher Stelle?
Passwort, hier, das ist der Hash. FNFFFC, das ist der Hash.
Also, äh, unter Linux sieht das folgendermaßen aus,
wie Username und Passwörter gespeichert werden.
Interessant ist das hier.
Das hier ist der Salt und das hier ist das gehashte Passwort.
Also, ein Salt ist quasi das, was ich...
Im Prinzip das, was ich vorhin erklärt hab.
Also, du nimmst irgendwas, schmeißt es in Fleischwolf
und das, was am Ende rauskommt, ist der Hash.
Und, äh, vom Hash kannst du eigentlich keine Rückschlüsse mehr draufziehen
auf das, was du ursprünglich in den Fleischwolf geworfen hast.
Nur mit dem Unterschied, es wird jetzt nicht einfach nur
dein Plaintext in den Fleischwolf geworfen,
sondern es wird zusätzlich noch Salz dabei gestreut
und dann durch den Fleischwolf gedreht.
Warum macht man das so?
Hat irgendjemand eine Erklärung dafür, warum man das so macht?
Weil man könnte sich jetzt...
Ach ja, by the way, kurz für alle, die es nicht...
Der Hash ist im Plaintext.
Also, der Hash ist genau der gleiche.
Also, der Hash ist nicht hier irgendwie verschlüsselt drinne.
Also, der Hash, den ich zum Hashen des Passworts benutzt hab,
ist der gleiche Hash, wie der, der hier im Plaintext drinne steht.
Schutz gegen vorgenerierte... Richtig, ja.
Genau.
Genau.
Weil, wenn man zum Beispiel sowas wie MD5 benutzt oder...
Ist im Prinzip auch egal.
Wenn man sowas...
Es ist egal, welches Hashverfahren man benutzt.
Bei allen Hashverfahren ist gleich,
dass der gleiche Input immer zum gleichen Hash führt.
So, was man jetzt machen kann, ist,
man kann ganz viele Sachen im Vorfeld berechnen.
Da gibt es dann Tabellen, da steht drinne, okay,
für diesen Hash ein möglicher Plaintext,
der zu diesem Hash führt, ist das.
Ja, also zum Beispiel, echo 123456, gepiped nach MD5, ergibt das.
Und ihr seht, das gibt immer, das gibt immer das hier.
So, jetzt könnte ich natürlich hergehen und sagen,
ich berechne mir ganz viele Sachen im Voraus.
Ja, also machen wir mal, machen wir mal zum Beispiel for i in,
das ist jetzt nur ein Beispiel, das ist nicht praktikabel,
so wie ich das hier zeige.
So, jetzt berechnen wir uns quasi mal im Voraus den Hash für 0 bis 100.
So, und jetzt habe ich ganz viele Hashes schon vorgeneriert.
Das ist natürlich viel zu wenig und praktisch bringt es das Ganze überhaupt nicht.
Aber man sieht, man kann mit dem nötigen Aufwand
und dem nötigen Speicherplatz, das braucht natürlich abfuck viel Speicherplatz,
kann man eine sehr große Anzahl an möglichen Inputs für Hashes finden.
Und es gibt Tabellen für MD5, die sind riesig groß.
Ihr könnt euch überlegen, es gibt petabyte große Tabellen,
wo Leute quasi das gemacht haben, was ich hier jetzt gemacht habe,
nämlich Input generiert und geguckt, was für einen Hash rauskommt.
Und wenn man dann so einen Hash hier sieht, kann man in so eine Tabelle reingucken
und überlegen, okay, aha, ich habe in dieser Tabelle diesen Hash gefunden.
Das bedeutet, dieser Input führt zu diesem Hash.
Und das heißt, ich kann diesen Input auch als Passwort verwenden.
Es ist egal, ob das das ursprüngliche Passwort war.
Wichtig ist, dass der gleiche Hash rauskommt.
Also zum Beispiel, der Hash bei 123456, MD5 Sum,
wenn ich danach suche, wette ich, mit euch werde ich finden,
ja guck, MD5 Reverse 4 bla bla bla into String 123456.
Also es gibt im Internet schon jede Menge vorberechnete Tabellen,
die genau sowas enthalten im Endeffekt.
Und um der Sache vorzubeugen und nur um dieser Sache vorzubeugen,
es ist egal, ob man MD5 verwendet oder nicht,
also das Problem hast du bei Schad256, bei einfachen kleinen Sachen ja auch.
Um diesem Problem vorzubeugen, wirft man nicht einfach nur das,
was man hashen will in die Hash-Funktion, sondern man gibt noch einen Salt davor an.
Also zum Beispiel sowas hier, das ist mein Salt A.
Und ihr seht, okay, jetzt kommt was anderes raus.
Das heißt, ich könnte dafür suchen, das gibt es wahrscheinlich auch im Internet,
A12356, aber an der Stelle sieht man jetzt, es ist nicht mehr das Ursprüngliche.
Und ich würde jetzt nicht weiterkommen mit, hätte ich eine wahnsinnig lang generierte Tabelle für Passwörter.
In dem Fall ist es natürlich ein bescheuertes Beispiel.
Der Salt ist natürlich ein bisschen länger und ein bisschen mehr random.
So und jetzt komme ich schon mal nicht weiter.
Jetzt bin ich mir gar nicht sicher, ob man das schon in Google findet.
Ne, das findet man zum Beispiel nicht mehr.
Also jetzt seht ihr, das hier ist mein Salt und das hier ist mein Passwort.
Das heißt, das Passwort ist eigentlich easy as fuck.
Aber ich komme mit vorberechneten Tabellen nicht mehr weiter, weil ich den Salt verwende.
Der Salt macht das Passwort nicht sicherer.
Der Salt sorgt dafür, dass ich mit vorberechneten Tabellen nichts mehr anfangen kann.
Ich kann nach wie vor das Passwort durchprobieren, weil den Salt habe ich ja im Klartext.
Also ich kann ohne Probleme jetzt anfangen mit, äh ja, funktioniert das denn?
Funktioniert das denn?
Funktioniert das denn?
Und so.
Das kann ich ausprobieren.
Das ist kein Ding.
Aber ich muss es selbst probieren.
Und das ist der eigentliche Punkt, was bei Salts angeht.
Ich kann keine vorberechneten Tabellen mehr benutzen oder vorgenerierte Tabellen mehr benutzen.
Ich muss die Leistung quasi des Durchprobierens selber erbringen.
Und das ist natürlich je nach Passwortkomplexität unrealistisch aufwendig oder unrentabel für die meisten Angriffe.
Und deswegen.
Ist das sinnig, den Salt zu benutzen.
Das heißt, man speichert sogar nicht nur den Salt, sondern man speichert auch noch den, äh, man speichert nicht nur den Hash, man speichert auch den Salt.
Man muss den Salt nicht zwangsläufig hier speichern, man muss den Salt natürlich speichern, passend zu dem Passwort, weil der Salt sollte natürlich, ähm, im besten Fall auch für jeden Passwort unterschiedlich sein.
Max sollte ein Tutorial-Channel machen.
Ich fand auch, für aus dem Ärmel geschüttelt war die Erklärung gar nicht so schlecht, oder?
Ja.
Ja.
So.
So viel zu dieser ganzen Geschichte.
Aber ich glaube, man hat es ganz gut verstanden.
Ja, genau sowas kennst du wahrscheinlich noch aus dem Schulunterricht.
Wir können das x hier durch eine Zahl ersetzen.
Das heißt, wenn du eine 2 reinpackst, dann kommt da 4 raus.
Wenn du eine 4 reinpackst, kommt in diesem Fall 16 raus und so weiter.
Genau solch eine Funktion wird auch für das Hashen von unserem Passwort genutzt.
Das heißt, wir geben in unsere Funktion das Wort test123 rein und raus kommt solch eine Buchstabensuppe.
Ja.
Hier gibt es jetzt ganz viele verschiedene Funktionen, zum Beispiel char256 oder md5.
Und da gibt es jetzt eine Sache, die ist wirklich interessant.
Und zwar sind das Funktionen, die nicht zurückgerechnet werden können.
Das heißt, wir haben mathematisch gesehen keine Möglichkeit, aus diesem Hash wieder das Passwort zu konstruieren.
Ja, das ist richtig.
Das sollte ich vielleicht noch ergänzen zu meiner Erklärung hier.
Weil das hat nämlich der Chat auch indirekt gerade angesprochen.
Man sollte es vielleicht an dieser Stelle nochmal sagen.
Wie fange ich denn jetzt da am besten an?
Also, solche vorberechnenden Tabellen.
Ich habe es ja schon versucht, möglichst korrekt auszudrücken.
Solche vorberechnenden Tabellen, also wir haben da unter anderem Rainbow Tables genannt.
Deswegen ist das eben im Chat ein paar mal gefallen.
Solche vorberechnenden Tabellen enthalten ja immer nur den Hash zu einem möglichen Passwort.
Einem möglichen Plain Text Input.
So.
Was man hier sieht ist, der Hash, der rauskommt, ist immer gleich lang.
Ich mache das jetzt mit md5.
Auch wenn man md5 tatsächlich nicht mehr benutzen sollte.
Aber das andere ist einfach ein bisschen länger.
Was euch vielleicht hier auffällt.
Der Hash ist immer gleich lang.
Egal wie lang mein Input ist, kommt immer ein Hash raus mit dieser Länge.
Das heißt.
Theoretisch gibt es unendlich viele Inputs, die zum gleichen Output führen.
Ist logisch, oder?
Ich meine, ihr könnt hier unendlich viele Kombinationen reinstecken.
Aber ihr habt nur eine endliche Anzahl an Möglichkeiten, die dargestellt werden können.
In dem Output.
Das heißt, es muss, rein theoretisch zumindest.
Es muss unendlich viele Kollisionen geben.
Theoretisch.
Man muss praktisch eine finden.
Das ist nicht so einfach.
Bei md5 ist es mittlerweile relativ einfach.
Aber von der Idee her ist logisch.
Ihr könnt beliebig einen Input reinstecken, der gemappt werden muss auf einen beschränkten Output.
Dementsprechend findest du unendlich viele Inputs zum gleichen Output.
Also für diesen Output hier.
Für diesen Hash.
Gibt es unendlich Möglichkeiten, den zu erzeugen.
Ich meine, wichtig ist natürlich, dass der gleiche Text immer den gleichen Output erzeugt.
Aber es gibt potenziell unendlich viele Inputs, die den gleichen Output erzeugen.
Die zu finden ist allerdings nicht so einfach.
Man müsste mal gucken, ob es eine Tabelle gibt mit known md5 collisions.
Kennt jemand irgendwie einer, die nicht ewig lange ist?
Die übersichtlich ist?
Weil ich meine, es bringt mir nichts, wenn ich jetzt hier irgendwie 3 Zeilen Bildschirm brauche, um den gleichen Hash zu erfolgen.
Gibt es da irgendwas, was kurz ist, was man mal als Beispiel zeigen kann?
Ah, hier!
Okay, seht ihr?
Das hier und das hier erzeugt die gleiche md5 Summe.
Also man sieht, es braucht schon ein bisschen längeren Input.
So, das sind Kollisionen.
Und Kollisionen möchte man eigentlich nicht haben.
Weil Kollision bedeutet ja auch, du kannst theoretisch, wenn du das Passwort nicht weißt, aber den Hash, dann kannst du irgendwas eingeben, was den gleichen Hash erzeugt, ohne dass du das Ursprungspasswort kennen musst.
Also stellt euch mal vor, das hier hat jemand als Passwort verwendet.
Und ich kenne den Hash, der da rauskommt.
Ich kenne aber das Passwort nicht.
Aber ich finde was, was den gleichen Hash ergibt.
Da kann ich auch das hier als Passwort verwenden.
Das ist egal, weil es wird ja nicht das Passwort überprüft, sondern das Passwort wird gehashed und es wird der Hash überprüft.
Das heißt, Kollisionen will man nicht haben.
Wenn man es schafft, Kollisionen zu finden, ist immer ziemlich mies.
Das ist auch einer der Gründe, warum man weggekommen ist davon.
Wenn man weggekommen ist davon, MD5 zu benutzen, sondern eher SHA-256.
Das ist länger, man hat mehr Möglichkeiten.
Ich glaube nicht, dass es eine bekannte gibt.
Ist der Collision?
Okay, es gibt glaube ich keine bekannte Kollision für SHA-256 aktuell.
Gibt es anscheinend nicht.
Ja.
Gibt es noch nicht.
Die Sache ist halt die, die Kollisionen sind.
Und das ist jetzt halt so was, wo wahrscheinlich Mathematiker richtig drauf abgehen.
Bei solchen Fällen.
Und zwar, die Sache ist halt die, es ist sehr, sehr unwahrscheinlich, Kollisionen zu finden.
Ich meine, man hat hier 256 Byte.
Da kann man sich ausrechnen, das ist mehr Kombinationsmöglichkeiten, wie wahrscheinlich Teilchen im Universum existieren.
An Möglichkeiten, was hier rauskommen kann.
Das ist eine unglaublich hohe Anzahl.
Aber, nicht desto trotz.
Also, ich habe keine Ahnung, ob das stimmt, was ich sage.
Aber, selbst wenn man sich, also ich habe das nie ausgerechnet.
Also, selbst wenn man davon ausgeht, dass die Chance hier, eine Kollision zu finden, quasi sich im Bereich bewegt, wie alle Teilchen des Universums zusammen sind nicht wahrscheinlich genug, dass man eine findet.
Trotzdem, trotzdem gibt es unendlich viele Kollisionen.
Das muss man sich erstmal überlegen, ja.
Es ist so unwahrscheinlich.
Dass es überhaupt, dass man überhaupt eine Kollision findet.
Aber trotzdem gibt es theoretisch unendlich viele Kollisionen.
Warum?
Naja, es ist das gleiche wie bei MD5.
Du hast unendlich viele Inputs, die du liefern kannst, die gemappt werden müssen auf einem beschränkten Zeichenvorrat.
Also, auf beschränkte Länge.
Also, der Output hat ja nur eine begrenzte Möglichkeit, was dargestellt werden kann.
Der Input kann alles sein.
So, das heißt, du hast unendlich viel Input versus einen beschränkten Output.
Das heißt, es muss unendlich viele Kollisionen geben.
Aber, eine Kollision zu finden ist extrem unwahrscheinlich.
Und wir reden hier von Teilchen im Universum unwahrscheinlich, ja.
Also, sehr, sehr unwahrscheinlich.
Aber trotzdem, es gibt theoretisch unendlich viele Kollisionen.
Ja.
Natürlich ist es nicht so einfach, wie ich das jetzt hier gesagt habe.
Es kommt natürlich auch immer auf das Verfahren an, wie das Ganze generiert wird.
Also, du kannst auch schlechte, weil es gerade im Chat einer gesagt hat,
du kannst auch schlechte Hashverfahren haben, die lange Outputs generieren und trotzdem zu Kollisionen neigen.
Weil es muss ja irgendwie der Input transferiert werden zu diesem Output.
Und das ist ja...
Nach einem speziellen Algorithmus.
Das heißt, da ist irgendein System dahinter.
Das ist nicht random.
Weil wenn es random wäre, könntest du nicht aus dem gleichen Input, wenn du es zweimal ausführst, den gleichen Output erzeugen.
Das heißt, es sollte möglichst random sein.
Aber es kann halt nie perfekt, perfekt verteilt sein alles.
Das heißt, du hast früher oder später mal irgendwie Kollisionen da drinnen.
Und die wahrscheinlicher sind als die Anzahl der Möglichkeiten.
Das ist ja nicht perfekt verteilt.
Aber trotzdem, potenziell hast du unendlich viele Kollisionen.
Auch wenn es sehr, sehr unwahrscheinlich ist, eine zu finden.
Der Chat ist gerade, Ritter Ross, Dankeschön für den Sub.
Ich glaube, bei Hashes ist das tatsächlich gar nicht so das Ding.
Aber da darfst du mich nicht fragen.
So sehr bin ich da auch nicht drin.
Ich hatte in der Berufsschule eine Lehrerin.
Sie hatte Physik studiert und wollte uns klar machen, es könnte niemals im Leben, egal welchem Hashverfahren, zweimal das Gleiche rauskommen.
Hä? Das ist Blödsinn.
Dann hat die ziemlich...
Das ist eher so, trust me, Bro, ich habe Physik studiert.
Das ist natürlich Schwachsinn.
Es ist sogar das Umgedrehte der Fall.
Es ist einfach logisch.
Nicht, dass ich es mathematisch beweisen könnte.
Aber es ist auch so schon irgendwie logisch, dass bei jedem Hashverfahren es unendlich viele Inputs gibt, die das gleiche Ergebnis geben können.
Einfach, weil du unendlich viel Input hast versus endlich Output.
Das muss unendlich viele kommen.
Es muss unendlich viele Kollisionen geben.
Ja, also das ist natürlich blödsinnig.
Aber Berufsschullehrer, da wundert mich im Endeffekt nichts mehr.
Nun gut.
Ich sehe, hier sind die richtig high-IQ-Diskussionen am Start im Chat schon.
Gibt es nur hier auf Twitch.
So, jetzt habe ich gerade 50 Zuschauer auf einmal vertrieben.
Sind gerade 50 Leute einfach instant abgehauen, als ich von dem Thema angefangen habe.
Das war zu viel des Guten.
Aber es muss ja auch mal ein bisschen ausführlich sein.
Du hast den Alias zweimal in deiner ZSH...
Was habe ich?
Wie jetzt?
Wo?
Was?
Ach, den hier.
EI?
Ja, gut.
Na, ist halt so.
Es verschreckt die Leute immer.
Ja, aber ich glaube, es war trotzdem mal ganz interessant.
Und was man auch daran sieht schon, ist, dass für Passwörter die Länge nicht ganz unerheblich ist.
Dass die Länge bei Passwörtern eigentlich so nahezu das Wichtigste ist.
Nicht so sehr, wie komplex die einzelnen Zeichen sind.
Oder wie viele Zeichen du pro Stelle hast.
Sondern wie lang die Passwörter sind.
Also ein Passwort...
Also sagen wir mal sowas.
Sagen wir mal, du hast die Auswahl zwischen nur kleinen Buchstaben vs. kleinen und großen Buchstaben.
Also mal angenommen, du hast so ein Passwort hier.
A, B, C, D, E, F, G.
Das ist natürlich äußerst sicher, wie wir alle wissen.
Versus A, B, C...
Versus Groß- und Kleinschreibung.
Die zwei Sachen hast du zur Auswahl.
Ein Passwort, was nur Kleinschreibung kann, aber so lang ist, ist viel, viel sicherer als ein Passwort, was, sagen wir mal, nur so ist.
Also die Stellen machen sehr viel aus.
Also die Länge macht enorm viel aus.
Weil, wenn man das hinschreibt, es ist ja quasi 26 hoch.
Anzahl der...
Der Stellen.
Und es ist halt einfach ein Unterschied, ob man 26...
Sagen wir mal, keine Ahnung.
26 hoch 20 hat.
Oder ob man 52 hoch 12 hat, zum Beispiel.
Gucken wir mal.
Gucken wir mal, ob das in der Region...
So, das ist die, das ist das.
So, und das hier ist...
Also wenn wir uns mal hier...
28.
So, und das ist...
Halt nur 20.
Da sieht man...
Okay.
Es ist schon ein riesen Unterschied.
Also auch Passwörter...
Nur mit Kleinschreibung, aber 8 Stellen länger, sind um ein viel, viel, vielfaches sicherer,
als Groß- und Kleinschreibung mit nur 12 Stellen.
Deswegen ist die Länge bei Passwörtern sehr wichtig.
So, erstmal fertig, gucken wir das Video.
Mathematische Umkehrfunktion gibt es dennoch eine Möglichkeit, bei so simplen Hashes,
wie SHA-256 oder MD5, das Passwort häufig wieder herauszufinden.
Naja, also...
Simpel...
Wenn das Passwort ist halt...
Wenn das Passwort kacke ist, rettet dich keine, keine großartige Hash-Funktion.
Ich kann die...
Ich kann die abgedrehte Hash-Funktion der Welt...
Keine Ahnung, nehmen wir SHA-512, ja?
Wenn mein Passwort scheiße ist, habe ich das relativ easy durchprobiert.
Da kann ich...
Da ändert die Hash-Funktion ja nichts dran.
Und zwar gibt es sogenannte Rainbow Tables.
Das heißt, das sind riesige Tabellen...
Gut, das hatten wir ja gerade schon von...
Und da stehen alle möglichen Hashes drin und auch alle möglichen Passwörter zu diesem
Hash.
Das heißt, man kann einfach in dieser Tabelle nachgucken und dann viele...
Ich finde, das habe ich tatsächlich korrekter ausgedrückt.
Es sind mögliche Inputs passend zu den Hashes.
Es ist nicht zwangsläufig das Passwort, was verwendet wurde.
Das darf man auch nicht vergessen an der Stelle.
Die Chance, dass es das Passwort ist, ist relativ hoch.
Aber das muss nicht so sein.
Also, das heißt nicht, dass zwangsläufig das Passwort...
Den Hash, wenn ihr das in der Rainbow Table findet, dass es zwangsläufig das Passwort
ist, was ihr auch beim E-Mail findet.
Was ihr auch beim E-Mail-Account für den gleichen Typ verwenden könnt.
Die Wahrscheinlichkeit ist relativ hoch, dass das eins zu eins passt.
Aber wie gesagt, es gibt unendlich viele Inputs, die möglich wären.
... Passwörter wieder herausfinden.
Genau aus diesem Grund sollte man niemals diese Standard-Hash-Funktion verwenden.
Häufig wird deswegen noch ein sogenannter Salt verwendet.
Also ein Salz, was letztendlich...
Warum sollte man nicht die Standard-Hash-Funktion verwenden?
Wenn die Standard-Hash-Funktion Schad 256 ist, ist doch vollkommen in Ordnung.
Besser als selbst irgendwelches Krypto-Gedöns sich basteln.
... Funktion verwenden.
Häufig wird deswegen noch ein sogenannter Salt verwendet.
Ach so!
Also ein Salz, was letztendlich...
Ah, jetzt habe ich es verstanden.
Er meint, man sollte nicht nur, man sollte auch noch...
Okay, da hat er natürlich recht.
... kommt, wodurch das Ganze verändert wird und nicht mehr zurückzuführen ist.
Diesen Hash hier, den können wir jetzt einfach mal in so Standard-MD5 oder SHA-2 Rainbow
Tables reinwerfen und gucken, ob wir etwas finden.
Das heißt, wir geben ein MD5...
Haben wir auch gerade schon gemacht.
... Decrypt.
Schauen da rein.
Ich drücke einfach mal rein und finde leider nichts.
Dann schauen wir mal SHA-256 Decrypt.
Gehen hier auch wieder mal auf den ersten.
Ja, Decrypt ist halt bei der Domain ein bisschen Fail.
Da wird dann nicht wirklich etwas decrypted.
Aber gut, ich get it.
Die Leute finden das dann einfacher über Google.
... oder zweiten.
Der macht sogar beides.
Und wir sehen hier, aha, gefunden.
Das Passwort ist Test123.
Das kannten wir aber schon für Max Mustermann.
Jetzt können wir uns aber auch so die anderen Nutzer hier anschauen.
Das heißt, wir können hier oben einfach mal 2 eingeben.
Können diesen Hash nutzen.
Können den hier eingeben.
Können wieder auf Decrypt drücken.
Genau.
Und das ist im Prinzip das, was ich eben auch gezeigt habe mit einem Sol drinne.
Dann bringt dir eben das Vorberechnete nichts.
... drücken.
Und wir sehen das mal auf Logout drücken.
E-Mail-Adresse ein.
Nämlich Petra Mustermann.
Dann bin ich jetzt drin.
Hier steht Clara.
Ja, du bist da wieder.
... bestellt, aber auf der Seite diesen.
Das Passwort ist Freddy9.
... drin.
Niemals.
Immer noch.
Wenn man...
Ich zeig das mit Sols noch.
Okay.
Also im Prinzip...
Ja, das, was ich auch gerade erzählt habe.
Alles klar.
Gut, war jetzt nicht so wirklich viel Spannendes dabei.
Aber ich meine, es muss ja auch YouTube-kompatibel sein.
Allein schon, dass mir 50 Leute instant abgehauen hier sind, sehe ich, das ist nicht YouTube-kompatibel,
mein Geschwätz dazu.
Ich weiß.
Du hast schon öfters erzählt.
Ich habe ehrlich gesagt von ihm noch gar nicht so viel geguckt.
Die, die ich geguckt habe, waren eigentlich alle ganz okay.
Wenn auch.
Für Leute, die ein bisschen Ahnung haben, vielleicht ein bisschen naheliegend alles,
okay.
Aber ich meine, es muss YouTube-kompatibel sein.
Ja, kann man so machen.
Also ich muss sagen, ich verwende seit Jahren KeePass.
Ja.
Aber ich habe...
Mein Passwort-Account, Vault natürlich, nicht Account.
Mein Passwort-Vault, auch nicht überall rumliegen, ja, zugänglich.
Ja, genau.
Siehste?
Sehe ich auch so.
Ich wollte oben noch irgendwas beantworten, gerade aus dem Chat, aber das habe ich geskippt.
Ähm...
Da steht eine Verbindung zum Beispiel mit User und Passwort.
Habe vorhin ja auch...
Nee.
Ähm...
Erst mal nicht.
Erst mal nicht.
Also das, was wir da gehasht haben, also hat mit dem Passwort, äh, mit dem Username
erst mal nichts zu tun.
Das ist nur wichtig, damit du dann im...
Also in deinem Backend eben den User findest, wo du das Passwort nachgucken sollst.
Also du musst einen Username haben, dass du dann in deiner Datenbank nachgucken kannst,
welcher Passwort-Hash das denn jetzt ist.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Also direkt miteinander hat das nichts zu tun, aber im Endeffekt brauchst du doch beides.
Okay, das ist vielleicht nicht ganz so clever.
Aber ich würde immer noch sagen, besser als gar kein Sold.
Aber sonderlich pfeifert ist es tatsächlich nicht.
Zumal...
Zumal der Sold im Klartxt gespeichert wird, das he...
Das heißt, man sieht auch, was das Sold ist und kann sich das relativ schnell ableiten.
Wie das heißt.
Nee.
das, was da wie gemacht wird.
Aber es bringt dir ja auch nicht so viel. Wichtig ist, dass du es
im Vorfeld nicht berechnen kannst.
Also, das ist gar nicht mal so,
würde ich jetzt zumindest sagen, gar nicht
so die schlechteste Idee, den
Username als Soll zu verwenden.
Wenn man sonst keine Ahnung hat, was man machen soll.
Ja, genau.
Weil du musst es immer noch selbst berechnen.
Also, es ist vielleicht nicht
die allerschlauste Variante, aber
auf jeden Fall besser als gar kein
Soll. Keine Ahnung.
Ich habe FileZilla noch nie verwendet.
Das ist ein
FTP, oder?
Gibt es noch jemanden, der FTP verwendet?
FTP-Client, ja.
Wie sonst zum Beispiel verschlüsseln und beim Starten
ein Masterpasswort.
Es gibt so Verfahren,
dass
da bin ich, da weiß
vielleicht der General
Soll was dazu. Der hat es ja eben so ein bisschen
geoutet als Krypto-Fivehead.
Oder was der Gust, ich bin mir nicht sicher.
Es gibt Verfahren,
da speicherst du nicht nur den Soll,
und den Hash,
sondern du musst auch noch wissen,
wie viele Iterationen der Hash-Funktion
du brauchst.
Da bin ich mir aber nicht ganz sicher, wie das läuft.
da brauchst du nicht nur
das Passwort und den Soll,
du musst auch noch wissen, wie oft du das
hashen musst. Also du kannst ja quasi
es hashen, ne? Also du kannst es hashen
und dann kannst du den Hash nehmen als Input
und wieder hashen und den Hash wieder hashen
wieder, wieder, wieder, wieder, wieder.
Und dann musst du quasi noch zusätzlich wissen,
okay, ich brauche jetzt das Ergebnis von der
50. Iteration.
Das ist das Eigentliche, was ich brauche.
Das macht man hauptsächlich
dafür, nicht um
die Passwörter und Sachen
noch sicherer zu machen, sondern um den
Rechenaufwand zu erhöhen.
Dass irgendein Angreifer das beim Durchprobieren
noch schwieriger hat.
Spolgi, danke schön für den Sub.
Ja, da bin ich aber jetzt
nicht so weit genug
drinne.
Also,
du kannst, ich weiß zum Beispiel, auf Veracrypt
kannst du sagen, dass der mehrere Iterationen
machen soll und sowas.
Ja, kann sein.
Da kenne ich mich aber nicht gut genau aus.
Wieso macht YouTube nichts gegen Adblocker?
Haben sie doch vor. Es gab doch letztens diesen Versuch,
den Content wie Twitch auch von den gleichen
Servern auszuliefern, äh,
die Werbung, den Content von gleichen Servern auszuliefern,
dass du nichts dagegen machen kannst.
Was ich sehr pepega finde.
Mich aber nicht stört,
weil ich eh YouTube Premium hab, Lul.
Aber mich insofern doch stört, weil ich Kacke finde.
An's Trinken erinnern.
Ja, sehr gute Idee.
Ah, yes.
Excellent.
T-Stells.
Wollt, ich bin schon drei Stunden, oh, was ist denn heut los?
Bin ja, ich bin ja richtig gut drauf, was Streaming eigentlich gestern fast sechs Stunden, heute schon drei Stunden, weil was da los ist.
Was haben wir ansonsten noch zu bieten?
How NASA writes space proof code.
Ist das ein, ist das ein,
okay, ich bin mir nicht sicher, ist das ein Meme-Video?
Oder ist das wirklich was Ernstes?
Machen wir mal kurz, wir gucken mal kurz den Anfang an.
End-, das erkennt man ja gleich, ob das irgendein Meme-Video ist oder ob das ernst gemeint ist.
Developer is to have your code crash in production.
But what if your.
Meme-Video?
Your production environment is in space.
At null point.
Meme-Video?
Do you reference or use after.
Einfach Rust verwenden, blazingly fast.
It sends your satellite hurtling into the ether with no way to control it.
To avoid this.
NASA has a set of rules centered around making their code easy to.
Okay, bei der ersten Rule wissen wir, ob das ein Meme-Video ist oder ob er das ernst meint.
Analyze the rules.
I'm going to talk about.
All right, ich tippe aktuell noch ein bisschen auf Meme-Video bei dem ganzen Zeug arrived from a set of ten rules that NASA has referred to as the power of ten Gerard Holzmann,
a developer for NASA at their Jet Propulsion Laboratory for a lot.
Okay, doch kein Meme-Video.
I will software acknowledges that some of these rules are a little strict.
But in scenarios that require extreme safety, he says the trade-off is worth it.
NASA restricts their code.
Okay, das ist doch kein Meme-Video.
Habe ich nicht vertan.
Simple control flow constructs.
This means that they do not use go-to statements or set jump or.
Ja gut, also wer noch ganz bei Sinnen ist, der sollte sich den NASA Regeln da anschließen.
Go-to.
Gut, es gibt Leute, ich muss mich outen.
Ich habe auch schon go-to verwendet.
Wisst ihr, für was ich go-to verwendet habe und auch go-to immer noch verwenden würde?
Ja, zum Beispiel sowas kann ich mir durchaus vorstellen, go-to.
Ja, richtig, genau das, Abbruch.
Wenn man nested schleifen, nested schleifen, im besten Fall hast du das Problem nicht und so, ja, nested schleifen.
Wenn du, keine Ahnung, du hast drei nested schleifen und in der innersten Schleife möchtest du quasi,
aufhören, dann ist es tatsächlich ganz sinnvoll zu benutzen.
Da brauchst du nicht noch Ausdruck, if, bla, break, sowieso.
Man kann es natürlich meistens dadurch abfackeln, indem man das Ganze in eine Funktion auslagert und dann einfach einen return macht an der Stelle.
Aber wenn das nicht geht, ist ein go-to manchmal gar nicht so verkehrt.
Aber NASA sagt, oder NASA, wie das die Amis immer sagen, die NASA sagt, das ist nix.
Kann ich aber auch irgendwo verstehen.
Recursion verwenden sie auch nicht.
Kann ich auch irgendwie nachvollziehen, weil ganz ehrlich, sobald du irgendwie, ich ruf mich selber auf, hast, ist oftmals ziemlich schwierig durchzuplicken, was denn eigentlich genau noch passiert und ob die, ob die, die Stopp-Bedingung irgendwie erfüllt ist und sowas.
Äh, set jump, long jump, das klingt mir nach inline assembly, ehrlich gesagt.
Or long jump.
They also do not use recursion.
Recursion or a function.
A function that calls into itself creates very hard to follow cyclic code control flow graphs.
Recursive code can lead to runaway code, which can crash a fixed limit or loops.
Okay, we're bound.
Now, this may sound obvious, but it's actually a little more nuance in this rule.
For example, when traversing a linked list, the end case of the linked list may just be hit a forward pointer whose value equals zero.
Yeah.
But to prevent an edge case that leads to runaway code.
NASA will always put a top.
Moment of view.
Da würde ich mir Gedanken machen, dass das nicht mehr Fehler verursacht, als es bringt.
Auf der anderen Seite, wenn die NASA das macht, da muss schon was dran sein.
Gut, die NASA weiß wahrscheinlich oftmals relativ gut, in welchem Bereich ihre Inputs so liegen und können, denke ich, realistische, realistische Obergrenzen setzen.
Weil normalerweise weißt du das ja nicht.
Ja, also wenn du jetzt, sagen wir mal, irgendwie einen String.
Den Text hast, den der User eingibt, da weißt du ja nicht, wie lang der ist.
Auf der anderen Seite, realistische Bounds könnte man oftmals trotzdem setzen.
Wenn du sagst, ey, mehr als 5000 Zeichen gibt bestimmt niemand ein und sowas.
Auf Embedded System macht man es auch, so wenn man es richtig macht.
Klingt auch sinnvoll in dem Kontext, ja.
Weil du weißt ja ungefähr, was da kommt.
Du kannst dir schon so überlegen, okay, da kommen jetzt Inputs von, ja, irgendwas von 2 Byte bis 265.
50 Beine, mehr wird es wahrscheinlich nicht sein.
Okay, macht, macht, macht im NASA-Kontext sicherlich Sinn.
Drittens.
Don't use the heap.
Okay, wir machen nur, wir machen, wir machen keine, ähm, wie heißt denn C?
Keine Memory Allocations.
Oder wie?
Einfach nur Inline-Variablen verwenden.
Geht das überhaupt?
Kann man damit überhaupt programmieren?
Komplett?
Ohne?
Du willst ja doch durchaus auch mal Sachen haben, die, äh, deinen Funktionsaufruf überleben.
Was ist, wenn du eine Liste hast?
Wenn du eine, wenn du eine Liste hast, wo du Sachen anhängen willst, die Liste ist außerhalb, ja, doch, theoretisch schon.
Da musst du die Liste als Parameter übergeben, dann wird da drinnen dann angehängt oder du, du übergibst es als 3D-Pop.
Äh, eie.
NASA recommend that you do not use the heap at all.
You exclusively use stack memory.
The reason for this is a notable amount of memory bugs do come from the heap, so that you don't use the heap at all, you exclusively use stack memory.
The reason for this is a notable amount of memory bugs do come from the heap.
You only use the heap and garbage collectors.
Ich kann mir nicht vorstellen, dass man damit komplett auskommt, aber gut, ey, ich mein, wenn's die NASA macht,
die haben da vielleicht auch ein bisschen andere Anwendungszwecke.
These systems cannot be proven of much memory.
Use after a lot of sense.
Limit function size.
Okay, das ist sinnvoll.
Ich mein, man braucht keine 3000 Zeilen lange Funktion, falls die das meinen mit size in dem Fall überhaupt.
When you think about the implication, a function should do one thing.
Aber was ist mit dem Compiler von Brainfuck?
Ja, mit dem willst du auch nicht ins Weltall fliegen.
Hoffe ich zumindest mal.
Okay, gebe ich ihm recht.
Gebe ich ihm recht.
Wobei ich persönlich das nicht ganz so, ich bin aber auch nicht die NASA, ja.
Ich sehe das nicht ganz so eng.
Also, meine persönliche Meinung dazu ist,
mal angenommen, man hat hier sowas wie, nehmen wir mal Pass oder,
ja, nehmen wir mal Pass Client, nehmen wir mal die Funktion als Beispiel.
Gehen wir mal davon aus, die Funktion selbst ist 40 Zeilen lang.
Oder, ja, 40 Zeilen.
Und du benutzt sie wirklich nur hier an dieser Stelle in Handle Client.
Dann kann man sich sicherlich drüber streiten,
macht es wirklich Sinn, Pass Client auszulagern an eine andere Stelle,
wenn es doch nur hier an der Stelle benutzt wird.
Also, je nachdem, wie umfangreich das ist und wo das verwendet wird,
würde ich sagen, nicht unbedingt pauschal.
Man kann das auch inline hier reinschreiben.
Wenn das Ganze natürlich so lang wird,
dass das hier 40 Zeilen ist, das hier 40 Zeilen ist, das hier 40 Zeilen ist,
okay, dann kann man sich das überlegen, splittet man es auf.
Aber oftmals ist es ja noch nicht mal 40 Zeilen lang.
Mal angenommen, Pass Client.
Pass Client ist 5 Zeilen lang.
Dann bin ich der Meinung, man kann durchaus inline schreiben,
hier diese 5 Zeilen für Pass Client und muss das nicht auslagern in der Extra-Funktion.
Zumal Aufrufe auch nicht kostenlos sind.
Ja, da kommen jetzt irgendwelche C-Compiler-Tricks mit inline und so wieder dazu.
Ich finde es aber auch für die Lesbarkeit sinniger,
die 5 Zeilen hier dazu zu schreiben, anstatt es an eine andere Stelle,
wo man dann hinspringen muss und dann wieder zurück.
Auszulagern.
Ich denke, das muss jeder so ein bisschen Hand haben,
nach seinem persönlichen Bauchgefühl, ab wann es zu viel wird.
Piece of Paper.
Drucken die bei der NASA noch aus?
Ja.
Okay, macht Sinn.
Macht Sinn.
Okay, nächstes, nächstes.
Was macht die NASA?
Was?
Äh.
So nach dem Motto, ich muss nichts returnen, was ich außerhalb nicht brauche, oder wie?
Oder?
Ja.
Weil ansonsten kannst du ja gar nichts großartiges...
Nicht leaken, weil man darf ja nichts allokieren.
Also, hä?
Again, all these rules are centered in writing safe code and code that is statically testable.
By declaring variables at the lowest scope required, you not only reduce...
Okay, chat, five-head message.
Stack-only heißt ja nicht, dass du nicht statisch initialisierst Memory-Blocker hast.
Das heißt, du hast so kein...
Ja, das wollte ich damit eigentlich umschreiben.
Wenn du zum Beispiel einen USB-Treiber schreibst, ist dein Input-Message-Buffer nicht eine Liste von Messages,
sondern ein Array mit fixer Größe.
Und Error-Handling, weil man wäre ein paar...
Du hast trotzdem große Buffer, die du mit Pointer übergeben kannst.
Ja, einfach zu...
Okay.
Macht schon Sinn.
Also im Endeffekt, das musst du dann halt in dem eigentlichen Programmfluss quasi drin haben.
Du hast dann irgendwie dein Main, was auch immer.
Bevor du dann quasi die Handle-Input-Funktion aufrufst, initialisierst du vorher ein 2056-Byte-großes Array,
übergibst das dann quasi als Referenz an die nächste Funktion.
Und so.
Du darfst halt nie aus dem Scope rauskommen.
Genau.
Du darfst halt nie aus dem Scope rauskommen.
Der darf...
Also, Scope, ich darf ja auch mal Scope nennen.
Du darfst halt nie aus diesem Fluss rauskommen, dass es aufgeräumt wird.
Ja, okay.
Macht...
Macht ja durchaus Sinn.
Wobei ich mir das echt schwer vorstelle.
Also, ich überlege mir zum Beispiel...
Zum Beispiel, als wir ESP32-Dinger programmiert haben.
Dann gab es dann irgendwelche Callbacks, wenn ein Knopf gedrückt wurde.
So.
Und sagen wir mal, wenn der Knopf gedrückt wurde, will ich...
Keine Ahnung.
In irgendeinem größeren Buffer ein Byte setzen.
Da das ja ein Callback ist, ist Input in diesem Callback ja nicht das Array.
Das müsste dann global irgendwo definiert sein.
Für die...
Für das gesamte Programm.
Weil ansonsten wird es ja nicht...
Genau, genau.
Ja, genau.
Das müsste man machen.
Ja.
Aber warum ist es besser, das global zu...
Okay.
Naja, gut.
Das ist ja auch nicht so mein Gebiet jetzt.
Okay, also das machen wir nicht.
Das weiß ich gar nicht, wo ich gerade stehen geblieben bin.
Check return values.
Oh, da freuen sich alle Go-Programmierer jetzt.
If, if error.
Da stehen sie in Go richtig drauf.
Wisst ihr eigentlich, wie eklig das Pattern ist, in Go zu checken, ob ein Key in einem Dictionary vorhanden ist?
Ja.
Go check key included in map.
Okay, man könnte sagen, ist doch eigentlich ganz logisch.
Aber ich finde die Syntax richtig eklig von Go dafür.
Ich find's sehr eklig.
If value, okay.
Also, was das hier macht, ist ja folgendes.
Das ist einfach nur eine Kurzschreibweise für eklige Sachen in Go.
So.
If value.
So.
Eigentlich ist das If an der Stelle egal.
Das hier ist das Interessante.
Das hier ist eine Zuweisung.
Und zwar, das hier ist ein Go-Error-Objekt.
Und das hier ist das Value, wenn es keinen Error gibt.
Das heißt, im Endeffekt guckst du...
Weißt du das hier zu und danach schließt du diese Instruktion, also, nee, wie nennt man das?
Den Befehl quasi schließt du ab und das If checkt im Endeffekt, ob der hier gesetzte Error-Code denn ein Error ist oder nicht.
Also, du könntest quasi hier auch schreiben, If okay ungleich Error und sowas.
Um es noch länger zu schreiben.
Und dann kannst du hier drinnen auf den Value zugreifen.
Ich find das eklig.
Wie das in Go gehandelt ist.
Aber, gut, Go-Programmierer bestimmt nicht.
Aber Go-Programmierer stehen auch auf sowas.
Check all of your return values for non-void functions.
All of them.
It's very easy to read the man page for a function and figure out what it does.
Erinnert mich noch daran, wo wir mal hier letztens ein bisschen was in Go gebastelt haben.
Und das erste war, was ich immer gemacht habe.
Return ignore.
Du kannst dir einfach ein Underscore davor schreiben.
Dann interessiert das Go nicht mehr.
But to ignore the return values.
It's just a return value section for a function that should always behave properly.
For example, the function printf, which just prints to the screen, should never fail.
Moment, printf hat ernsthaft ein Return Value?
Okay, und was, und was returnt das?
Unsuccessed.
Ah, total number of characters written is returned.
Okay, das ist gar nicht mal so blöd.
Ich stelle immer wieder fest, die Leute haben sich da,
in C was bei, also nicht in C++ wohlgemerkt, in C,
haben die sich da doch tatsächlich was bei gedacht.
Das kommt bestimmt noch aus Zeiten, wo du auf irgendwelche seriellen Interfaces rausgeschrieben hast.
Und da hat es dich sicherlich manchmal durchaus interessiert,
ob du alles schreiben konntest oder nicht.
Ja.
Und außerdem ist es einheitlich zu den ganzen anderen Printfunktionen.
Macht ja durchaus Sinn.
To make sure that the person auditing the code understands that the developer meant to ignore the return value,
the power of 10 says that we should explicitly cast all return values that are ignored to a void type.
If a non-void function's return value is not void,
this means that the developer forgot to check the return value and should be brought up in a code review.
NASA limits the use of the C preprocessor to file inclusions and very simple additional macros.
Ja, das klingt logisch.
The reason for this is the power of 10 calls out the C preprocessor as a hidden code obfuscator that can destroy code clear.
Leute, der C preprocessor kann schon abartige Sachen machen.
Das ist allerdings nichts gegen C++ Template Magic.
C++ Template Magic müsste echt verboten gehören.
Das ist nur für masochistisch veranlagte Leute.
Gleichermaßen allerdings eines der besten Features, die C++ hat.
Das ist so...
Das ist so...
Ja, so ganz großer Müll eigentlich, ja.
Irgendwie lädt es dazu ein, die Sachen ultrakryptisch und nicht mehr verständlich zu machen.
Auf der anderen Seite kannst du damit Sachen machen in C++, die du in keiner anderen Sprache machen kannst.
Also mir fällt zum Beispiel keine andere Sprache ein, wo du zur Compile-Zeit checken kannst,
dass der Input von der Funktion...
Keine Ahnung.
Also mal angenommen, du hast...
Du hast eine Funktion, die einen String-Input braucht von...
Sag mal, du hast eine Funktion, wo du sicherstellen möchtest,
dass der String-Input nicht größer als 15 Zeichen lang ist.
Nicht länger als 15 Zeichen ist.
C++ ist die einzige Sprache, die mir einfällt,
wo man das dank Templates und Compile-Time-Checks und sowas zur Compile-Zeit testen kann,
ob irgendjemand die Funktion aufruft mit mehr als 15 Zeichen.
Und das geht nur auch aus einer Kombination aus Compile-Zeit-Expression-Checks und Templates.
Jede andere Sprache, die ich kenne, kann das nur zur Runtime.
Dass du dann gucken musst, ja, if String größer als so.
Ich meine gut, man kann sich eigene Typen irgendwie dafür anlegen,
die halt maximal 15 Byte Speicher haben oder so.
Das geht, aber ist halt doof, wenn man nicht Standard-Character verwenden kann.
Und dafür extra Typen bauen muss.
Also da fällt mir nur C++ ein, wo du so abgedrehtes Zeug machen kannst.
Auf der anderen Seite weiß ich nicht, ob es das wert ist.
Weil allein schon, dass C++ diese Sachen hat, es ist so unglaublich unlesbar.
Und also den meisten Source Code, auch in Programmiersprachen,
wo ich mich nicht gut auskenne, sei es jetzt Swift oder sowas,
das kannst du eigentlich immer ganz gut lesen.
Nicht so C++. C++ kannst du oftmals einfach nicht richtig lesen.
Weil das aus Templates, C-Pre-Prozessor-Sachen und so besteht.
Du siehst das und denkst dir, das kann doch eigentlich gar keine gültige Syntax sein.
Und kommst dann dahinter, ah, es ist auch nur gültig,
weil es Pre-Prozessor und Templates und Makros und alles sind.
Und du kannst C++ dir oftmals einfach keinen Reim drauf machen,
was denn wirklich passiert.
Und du findest es auch nur ganz schlecht raus,
weil du über 20 Files rüberspringen musst
und dir dann irgendwie im Kopf zusammenbauen musst,
wie könnte sich dieser Aufruf jetzt verhalten.
Ich weiß nicht, ob es das wert ist.
Also es ist auf der einen Seite sowohl eines der besten Features von C++,
aber gleichzeitig auch eines der beschissensten.
Ich finde, C++ würde sehr davon profitieren,
sowas wie C Sharp zu bekommen, was Extension Methods angeht.
Extension Methods wären eine super Erweiterung für C++.
Das ist aber schon seit Jahren, wird das diskutiert
und sie kriegen es in ihrem C++-Gremium einfach nicht gebacken.
Das ist eine super Erweiterung für C++.
Das ist aber schon seit Jahren, wird das diskutiert.
Es würde C++ so viel cleaner machen,
aber sie machen tausend Sachen und auch nicht einheitlich.
Egal, es soll jetzt nicht zum C++-Flame-Stream werden,
weil ihr wisst, das kann ich stundenlang machen.
Naja, weiter, weiter.
Also die C-Präprozessor darf nicht benutzt werden.
Ja, Chat, und die Fehlermeldungen von Templates sind auch unleserlich as fuck.
For example, if you have 10 different flags that can be changed at compile time,
you essentially create 2 to the power of 10 compilation targets that need to be tested.
Und das kann man in C++ noch ekliger machen.
Weil du hast in C++ ja Compile-Time-Expressions.
Das heißt, das nennt sich ja ConstExpr oder sowas, heißt das glaube ich in C++.
Das ist quasi ein bisschen wie so C-Präprozessor.
Compile-Time-Flags, nur noch abartiger.
Da kannst du die, also da hört es komplett auf, was du machen kannst mit C++ Compile-Time-Expressions.
Da wird es extrem weirdchampig.
Du kannst das ja auch in ifs benutzen.
Also du kannst if constexpr bla bla bla und dann, ne.
What the, hä?
Wo ist jemand hier gelandet?
Das ist ein ganz anderes Video.
Ah, hier wollten wir hin.
A compile time.
For example.
If you have 10 different flags that can be changed at compile time, you essentially create 2 to the power of 10 compilation targets that need to be tested.
Also die NASA sollte sich bei uns mal eindeutig Consulting-Support holen.
Keine Fehler, keine Tests.
Und gerade der NASA sollte das wichtig sein.
Exponentially increasing the testing requirement of your code.
This makes the code hard to scale and hard to test.
Another interesting rule by NASA.
Es gibt inzwischen auch const in und const eval.
WTF, blubb, du hast recht.
Deswegen, was ich mit dem if meinte, ist sogar const eval und nicht constexpr.
Dass es const init gibt, kenne ich nicht.
Das scheint mir neu zu sein.
Aber das ist ja normal in C++.
Restrict pointer usage.
Gut, das kann ich verstehen.
Wenn du eh keine, kein Memory allocaten darfst,
dann ist so quasi dein Bedürfnis, mit Pointern rumzuhalten,
dann ist so quasi dein Bedürfnis, mit Pointern rumzuhalten,
zu hantieren, auch gesunken.
Du kannst ja auch quasi alles als Referenzen übergeben.
Okay, um Referenzen zu dereferenzieren, brauchst du trotzdem Pointer-Syntax.
Aber es ergibt Sinn, dass sie das weniger benutzen dann.
Das ist die Restriktion des Pointern-Einsatzes.
Die Power of 10 erhält Pointern und sagt,
dass sie nicht mehr als eine Läufe an der Zeit dereferenziert werden müssen.
Die Grund dafür ist, dass Pointern ein Tool sind,
das mächtig ist, aber nicht so einfach zu verwenden.
Das stimmt.
Wenn du deine Pointern an einer Läufe an der Zeit dereferenziert hast,
dann ist das nicht so einfach.
Es fordert dich dazu, Strukturen zu erzeugen, die richtig funktionieren.
Zum Thema Pointer muss ich noch mal eine Sache sagen.
Da sind ja die Rust-Leute schon übertrieben feindlich gegenüber Pointern.
Das ging sogar so weit, dass der Entwickler der damals größten,
tja, was war denn das?
Network IO Library in Rust.
Den haben die Leute so lange abgefuckt,
dass er auch nicht mehr so gut ist.
Der unsafe Rust-Code verwendet hat mit Pointern,
dass er irgendwann das Projekt eingestellt hat oder abgegeben hat oder sowas.
Hat noch irgendjemand im Hinterkopf, was das für ein Projekt war?
Das ist schon ein paar Jahre her.
Also irgendjemand hat eine Rust-Netzwerk-Library bereitgestellt auf GitHub.
Die war auch relativ beliebt.
Und dem gingen immer wieder so die ganzen Hardcore-Rust-Fans auf den Sack
und haben gesagt, oh, unsafe Pointer, oh, kack Rust, nicht, nichts.
Rust-Standard entsprechen.
Und die haben den so sehr genervt, dass der irgendwann gesagt hat,
ich führe mein Projekt nicht fort.
Also die Rust-Leute sind da teilweise schon echt übertrieben drauf.
Unsafe in Rust, das ist ja quasi Gotteslästerung.
Active Web, das kann sein, ja, dass das das gewesen ist.
Track your Pointers.
Also, NASA says to limit the use of function Pointers at all.
Function Pointers obfuscate the code control flow graph of your program.
Gut.
Gut.
Wenn du alles global allokierst und so und keine Callbacks und so verwendest
und alles mögliche, wobei, wie kommen die ohne Callbacks aus?
Also es ist doch sicherlich auch bei NASA-Systemen so,
dass sie nicht nur gepollt werden, sondern auch mal ein Callback,
wenn irgendein Ergebnis auftritt, machen, oder?
Wie willst du das ohne Function Pointer machen?
Also zum Beispiel bei der NASA wird es doch auch so sein,
dass irgendein System,
irgendwas misst und dann ein Callback aufruft.
So nach dem Motto, okay, der Wert hier jetzt ist über 60,
ich ruf mal ein Callback auf, so, Achtung, System.
Ich mein, oder pollen die wirklich alles in irgendeiner Mainloop drinne.
Aber wenn du alles pollst in der Mainloop,
dann verpasst du ja vielleicht auch mal was.
Dass die ganz ohne Function Pointer auskommen,
ich weiß nicht, wie die das machen, das ist schon,
das stelle ich mir gar nicht möglich vor.
Klingt nach Linux Newsletter, wo Linus,
nee, nee, nee, nee, das meine ich nicht.
Dass Linus öfters mal flamed ist klar.
Die rufen einfach Funktionen mit Namen auf und nicht über Function Pointer.
Das ist dann kein Function Pointer.
Okay, das heißt, okay, verstehe, verstehe,
ja, ja, doch, doch, leuchtet ein, leuchtet ein, doch, es leuchtet ein.
Die haben dann quasi, die kriegen dann nicht als Parameter irgendwie einen Struct,
wo dann irgendwie eine Verify Funktion drinne ist, die irgendwo gesetzt wurde,
sondern die wissen genau, sie rufen jetzt halt an der Stelle Funktion XY auf
und übergeben das als Parameter.
Ja, okay.
Ja gut, wenn man alles immer genau weiß, was wie wo passiert, ergibt das Sinn, ja.
Ich meine, wir rufen tagtäglich massig Funktionen auf ohne Function Pointer.
Der normale Function Call ist ja ohne Function Pointer, also ja.
Okay, ja, macht Sinn, ja.
Neuer Emote-Vorschlag.
Callback.
Falls irgendjemand eine gute Emote-Idee hat, bin ich offen gegen Callback.
Finde ich gut.
Okay.
Okay, jetzt wissen wir Bescheid, wie die NASA programmiert.
Easy, Leute.
Ich glaube, ich glaube, jetzt haben wir, jetzt sind wir viel besser, was das angeht.
Falls wir mal wieder Low-Level-C programmieren müssen, erinnern wir uns an die NASA.
Das kann durchaus sein bei denen.
Und Konzept, Dinger und alles.
Für jede Zeile Code 30 Wiki sein.
Ja, ich verstehe es auch nicht, was mit den Rust-Leuten los ist.
Aber die Rust-Leute denken wahrscheinlich, wenn Unsafe eine Ebene unten drunter gerappt ist, dann müssen sie selbst kein Unsafe mehr verwenden und dann ist es ja okay.
Ich meine, die gesamte Betriebssystem-Interop-Sache ist Unsafe.
Okay, vielleicht nicht mehr, wenn man Rust unter Linux mit dem, mit dem, ähm, Rust-Linux-Blub-Interface, habe ich noch nie mir angeguckt, verwendet.
Ich sehe ehrlich gesagt auch wenig Probleme.
Ich weiß nicht, wie man da drin, ähm, mit Unsafe-Memory.
Nicht alles ist super krass sicherheitsrelevant.
Dafür macht Rust ja durchaus Sinn.
Man muss sich ja überlegen, wo Rust herkommt.
Rust wurde von Mozilla entwickelt, unter anderem für ihren Browser.
Und in einem Browser macht es natürlich sehr viel Sinn, dass du zwei Anforderungen hast.
Unmanaged Memory.
Und, also, quasi, nee, muss ich alles sagen.
Nicht Unmanaged Memory.
Dass du Performance hast.
Und Memory Safety.
Weit möglich.
So.
Das ergibt Sinn.
Weil ein Browser muss schnell als Fuck sein und so sicher wie geht.
Das, da, in solchen Anwendungsszenarien, finde ich, macht Rust durchaus Sinn.
Ansonsten bei vielen anderen Sachen, okay, wenn, wenn, wenn da mal irgendwie was überläuft und die Anwendung crasht, weil du irgendwie drauf zugreifst, was es nicht gibt.
So what?
Das ist meistens nicht sonderlich schlimm.
Dann crasht das Game halt.
Ja, schön.
Und weiter.
Ist jetzt nicht schlimm.
Da, da, da löscht sich dann Windows nicht von.
Wenn dein Game mal crasht.
Also, wenn, wenn dagegen steh...
Ja, ich rede jetzt nicht von dauerhaft crashen.
Also, wenn du jetzt die Auswahl hast zu, ja, okay, in ganz speziellen Fällen, wenn mal irgendwie was passiert, crasht mein Game.
Versus, ich brauche zweimal, doppelt bis dreimal so lange, das zu entwickeln, mit Rusts, und es crasht dann an der Stelle halt nicht, dann würde ich mich dafür entscheiden, dass mein Game halt rauskommt und ich Geld verdiene.
Es ist jetzt ein sehr übertriebenes Beispiel, aber, wie gesagt, ich finde...
Rust ist gar nicht mal so unbedingt notwendig, oder der Einsatz von Rust ist in vielen Bereichen gar nicht mal so sinnvoll, ja.
Weil Rust halt schon vom Entwicklungsaufwand her, zumindest meiner Ansicht nach, eine ganze Ecke anstrengender ist, als viele andere Sprachen.
Und länger dauert.
Und halt auch an Stellen, wo du quasi, ähm, die, die Memory-Safety-Sachen gar nicht so sehr brauchen würdest.
Ich weiß, ich weiß.
Rusts, Rust-Devs.
Gerade auf Stack-Overflows.
Äh, nicht...
Stack-Overflow auf Hacker-News sind die Rust-Entwickler auch immer an Start.
Ja gut, mit C++ vergleichen ist ja auch für den Arsch.
C++ ist alles Schrott.
Sogar die Sprache selbst.
Die Penne, Header rumgefuddelt, Alter.
In C++ ist so ziemlich alles Kacke.
Das Einzige, was in C++ tatsächlich gut ist, ist die Performance.
Und, dass es den Mist für jede nur erdenkliche Sprache halt, und C, ja, gut, bei C noch mehr, aber dass es gerade C++ auch für so nahezu jede erdenkliche Plattform gibt.
Ansonsten ist es so ziemlich...
Alles Kacke in C++.
Also mir wäre C auch lieber als Rust für die meisten Sachen.
Ihr weißt, das darf man den Rust-Entwickler aber nicht sagen, ja.
Und ansonsten, ganz im Ernst...
Es darf durchaus ein bisschen was High-Leveligeres sein, weil die Performance ist jetzt ja auch nicht wirklich schlecht, wenn man sich mal so...
Okay, ich weiß, Java wird nachgesagt, äh, Memory und Geschiss und sonst was, aber die Java, die Performance von Java ist nicht so, ist nicht schlecht.
Die Java von .NET ist auch nicht schlecht.
Natürlich kannst du die Sachen, wenn du super optimiertes C oder Rust von dir gibst, deutlich schneller machen.
Aber es ist jetzt nicht so, dass wir davon reden würden, dass das irgendwie hundertmal langsamer ist oder sowas.
Also ich denke mal, ein ordentlich programmiertes .NET-Programm versus ein ordentlich programmiertes C-Programm,
dann ist das .NET-Programm vielleicht in den Sachen, wo C seine Stärke ausspielt und wo C-Sharp halt auch mit...
und so ein bisschen Probleme hat, was weiß ich, ist es vielleicht dreimal langsamer oder so, aber in den meisten Fällen dürfte es sich gar nicht so extrem viel nehmen.
Natürlich ist es ein bisschen langsamer, aber es ist nicht so, dass wir von Verhältnis reden von Ruby oder Python versus C, was irgendwie 800 mal langsamer ist oder 10.000 mal langsamer ist oder sonst was in manchen Fällen.
Aber in welcher Sprache würdest du einen Browser entwickeln, wenn nicht einer...
Okay, bei einem Browser, da ist es...
Das ist natürlich sinnvoll, bei einem Browser ist Rust tatsächlich eines der Anwendungsfälle, wo ich auch gesagt habe eben, da macht das durchaus Sinn.
Für einen Browser brauchst du maximal mögliche Performance und so Memory-Safe wie geht, ohne dass du irgendein Managed Environment verwendest, wo du zu viele Runtime-Checks hast.
Also bei einem Browser ist das was, wo ich sagen würde, eindeutig da macht Rust Sinn.
Bei einem Spiel zum Beispiel.
Würde ich sagen, macht es weniger Sinn.
Spiel, gerade vieles ist in Unreal und dementsprechend halt C++, wobei man auch bei vielem gar nicht mal C++ programmieren muss, aber irgendwie, wenn du was unter der Haube anpassen willst in Unreal, kommt es wahrscheinlich um C++ nicht drum herum.
Das ist ein bisschen so, wie ich, wenn ich UI-Sachen machen will mit Qt, dann kann ich das vieles ja auch mit ihrem JavaScript-Interpreter machen, aber wenn du was erweitern willst, muss es C++ sein.
Also insofern, ein Game würde ich eindeutig eher in C++ entwickeln, wenn es Unreal ist, als da mich irgendwie mit Rust rumzuschlagen.
Allein schon, weil es viel bessere Tools und alles gibt.
Oder lassen wir mal die Tools außen vor.
Sagen wir mal, es gäbe Unreal für Rust und es gäbe Unreal für C++.
Dann würde ich wahrscheinlich trotzdem das Ganze in C++ entwickeln, weil es bei Games nicht wirklich so wichtig ist, dass du die ganzen Safety, Compile-Zeit garantierst.
Weil es ist dir meistens egal, ob es theoretisch einen Pending Threat oder was auch immer geben kann, den du dann vielleicht erst zwei Minuten später, erst zwei Minuten später gesteuert, es juckt dich nicht.
In Rust musst du dann dir ganz viele Gedanken drum machen, ah, hier geht das out of scope und hier brauche ich es eigentlich nicht mehr, juckt dich nicht.
Ja, und in C++ hast du vielleicht mal irgendwie einen Crash drin, den du mit Rust nicht hättest, aber bist dann doppelt so schnell fertig.
Also wenn ich ein Game programmieren würde, eindeutig C++ und nicht Rust.
Und ich würde es gar nicht in C++ programmieren, weil ich keine Ahnung von Game-Entwicklung habe und dementsprechend wahrscheinlich, wenn ich was in Games machen würde, dann in Unity machen würde, dass ich sie schon abverwenden kann.
Wobei Unity in den Innereien ja auch C++ ist, soweit ich weiß.
Die benutzen ja, glaube ich, immer noch eine uralte Mono-Runtime.
Oder sind die mittlerweile auf .NET Core oder auf .NET in Unity?
Das letzte Mal, wo ich die geguckt habe, hatten die noch eine uralte Mono-Runtime.
Willst du Unity auch auf die To-Do-Liste schreiben?
Nee, weil mich Game-Entwicklung überhaupt nicht interessiert.
Ja, das ist Cute-Style C++ tatsächlich auch viel angenehmer als Standard-C++.
Also einfach, weil halt schon sehr vieles sinnvoller eingebaut ist und gleich funktioniert.
Nicht so wie in der C++-Standard-Library, wo alles unterschiedlich funktioniert.
Ich meine, das Abartigste von C++, das ist halt typischer C++-Chat.
Ich meine, how to get duration as Millisekunden und dann will er es konvertieren.
Er will quasi Millisekunden konvertieren in Sekunden.
So.
Ich meine, the fuck, Alter.
What the fuck?
C++?
Was ist das hier?
Ah, eklig.
Er ist das neue Video geguckt.
Exzellent.
Genau, genau, richtige Reihenfolge.
Okay.
YouTube-Strongs, jetzt Twitch-Strongs.
Schau dir mal Standard-Enables, kenne ich.
Ja.
Das ist eines dieser Sachen, die ich vorhin meinte mit, du kannst in C++ mittlerweile zur Compile-Zeit noch deutlich abartigere Dinger machen als mit C-Makros.
Wrong.
Obviously, Leute.
Hier habt ihr es zuerst gesehen.
Wrong.
Right.
Ich erkenne zwar auf den ersten Blick absolut nicht, was der Unterschied ist, aber obviously wrong, obviously right.
Diese Sprache ist so rotz, Alter.
Okay, es ist, okay, okay, also.
Das hier, das hier ist falsch, so zu schreiben.
Man muss schreiben, Template-Type-Name Floating-Standard-Enable-If-T.
Standard ist Floating-Point.
Floating-Doppelpunkt-Doppelpunkt-Value-Bool gleich true.
Natürlich muss man das schreiben.
Logisch.
Also, da hätte man jetzt auch gleich drauf kommen können, ne?
Also, da hätte man drauf kommen können, dass das...
...das hier falsch ist und das hier richtig.
Ich erkenne auch nicht mal den Unterschied.
Was ist jetzt eigentlich genau der Unterschied?
Leute, ich erkenne den Unterschied nicht.
Was ist der Unterschied hier überhaupt?
Seriously, ich erkenne den Unterschied nicht.
Ah, das Bool fehlt.
Hier.
Das Bool, das Bool fehlt hier.
Alter, diese Sprache, Mann.
Guckt euch das mal an.
Ich glaube, das...
Ich glaube echt, die Hauptaufgabe des C++-Gremium ist es,
ähm, das...
Ähm, wie können wir das Ganze noch unverständlicher machen?
What the hell?
Alter!
Wie viele Sonderzeichen?
Wie viele Sonderzeichen möchtest du bitte schön in eine Zeile packen?
Ja!
Das wäre so das YouTube-Comment davor.
Is trivial.
Is trivially destructible.
Was zum...
Geil, bauen die da immer?
Guckt euch diese Zeile schon mal an.
Guckt euch das mal an.
Void-Pointer, okay, soweit noch klar.
Const-Volatile-Void-
Soweit auch noch, okay.
No-Ace-Return-Const-Cast-Void.
Naja, das geht ja noch.
Aber dann diese Dinger hier.
Alter.
What the fuck?
C++.
C++.
Es ist die schlimmste Sprache auf der Welt, Alter.
Guckt euch das an.
Das kannst du nicht lesen.
Also, ich meine, seriously, das ist die Hilfe-Seite.
Die haben das so...
Ihr müsst euch das mal...
Ihr müsst euch das mal vorstellen.
Die Leute, die diese Hilfe-Seite geschrieben haben,
die haben zwei Sachen im Kopf gehabt.
Erstens, wir haben...
Wir brauchen gute Beispiele dafür.
Und das Zweite, wir müssen die Sache so formatieren,
dass man es gut lesen kann.
Das, was ihr hier seht, ist das beste Beispiel
und die beste Formatierung, die ihnen eingefallen ist dafür,
um das zu demonstrieren.
Das sagt schon alles, oder?
Und selbstverständlich, Standard ist Trivially Destructible.
Alles klar.
Oh.
Das ist wirklich...
Es gibt keine...
Das ist wirklich die schlechteste Sprache.
Also, C++ ist die schlechteste Sprache,
die nicht schlecht sein will.
Es gibt noch schlechtere Sprachen,
aber die sind absichtlich so gemacht,
so Brainfuck oder so, ja?
Es gibt Sprachen, die sind schlecht gemacht,
um schlecht oder um eklig...
Also, C++ ist die ekligste Sprache,
die halt nicht eklig sein will.
Brainfuck möchte ähnlich sein.
Whitespace möchte eklig sein.
C++ möchte eigentlich eine...
eine gute, angenehme Sprache sein,
aber sie failen einfach so miserabel schon seit Jahren.
Das ist der Wahnsinn.
Ja, das kommt auch noch,
dass du 30.000 Legacy-Sachen hast, die da drin sind.
Wobei, da hat C Sharp mittlerweile auch Probleme.
Wir haben schon viel C++ im Stream gebaut.
So ist es ja nicht.
Aber ich hab mich jedes Mal auch drüber aufgeregt.
Klar.
Kann potenziell jeder.
Ist aber nicht so wirklich sinnvoll.
Nur wenn man was erstellen will.
Ich weiß nicht, ob ich jetzt noch extra Programmier-Sprache...
Potenziell?
Prinzipiell?
Kann das jeder, wenn du das Hintergrundwissen dafür hast.
Nee.
Ich bezweifle auch, dass Whitespace einen Webserver hat.
Leute, ich geh jetzt was essen.
Ich bin jetzt vier Stunden nachts.
Doppelt so lang, wie sonstige Sonntags-Sonntag-Streams laufen.
Ich hab Hunger.
Übrigens, ratet mal, was es heute gibt.
Wer es errät, bekommt einen Sub gegiftet.
Nudel mit Reis?
Nein.
Hühnchen mit Reis?
Lachs plus Nudel?
Geil, Lachs plus Nudel.
Richtig.
Okay, nicht ganz richtig, aber ich lass es gelten.
Nicht ganz richtig.
Es ist nicht Spaghetti-Bolognese.
Es ist Nudel-Bolognese.
Also es ist nicht Spaghetti.
Es sind Sachen, die sind relativ ähnlich zu Spaghetti, aber es sind nicht direkt Spaghetti.
Also das lass ich aber gelten.
Okay, Moment.
Ja.
3,99.
Ich hab jetzt einfach 2 Euro an Bezos überwiesen damit.
Okay.
Komm, 2 Euro wieder.
Und...
2 verliere ich.
Ich hab quasi an Amazon 2 Euro überwiesen gerade.
Twitch nahm Leak.
Oh, fuck, Alter.
Wo bloß wurde geleakt?
Ja, und von den 2 Euro, die ich wieder bekomme, muss ich noch Steuern bezahlen.
Das ist ja doppelt beschissen, Alter.
Ich bin quasi 3 Euro los.
Also selbst...
Selbst...
Selbst...
Subs giften ist, glaube ich, das 3-Headigste-Move, den man machen kann.
Nee, mach ich nicht.
Musst du deine Subs selber bezahlen in Twitch?
Klar, wenn du selbst Subs giftest, musst du die selbst bezahlen.
Ich hab grad 3,99 Euro bezahlt für einen Sub an mich selber.
Und 3 Euro sind davon wahrscheinlich weg.
Ist es.
Das ist eine sehr schlechte...
Financial Decision, sich selbst Subs zu giften.
Wenn das nicht so wäre...
Wenn das nicht so wäre, dass du die selbst bezahlen müsstest,
dann könnte man sich ja reich...
reich giften mit Subs.
Ja, aber da hab ich keinen Bock drauf.
Allein schon daran zu denken, wenn ich die Steuererklärung mache,
Giftsub da reinzuschreiben.
Unlimited Money Glitch.
Oder wie würde da ein Typ auf YouTube sagen?
Ähm...
Weiß ich nicht, wie der Channel heißt.
Ähm...
Twitch Subs are perfectly balanced.
Oder wie geht das?
Are perfectly fine and balanced.
Die Videos, wo ich immer keinen Bock hab,
mir die anzugucken, weil da...
Genau.
Weil da so viel geladen...
Gelaber ist, um das eigentliche Ding.
Der könnte Videos machen, die 2-3 Minuten gehen.
Gut, ich mein, ich muss dann in die eigene Nase greifen.
Meine Videos sind auch oftmals länger.
Aber der dreht sich so sehr im Kreis.
Der macht ein Viertelstunden-Video über ein Ding, was in 3 Minuten abgehakt ist.
Ich guck mir die Videos immer nicht...
Ich kann den mir nicht angucken.
Diablo 4 haben wir noch nicht am Start.
Bin ich mir auch nicht sicher,
ob ich damit anfange.
Diablo 3 hat mich sehr enttäuscht.
Und ich hab immer noch kein Vertrauen in Blizzard.
Dass da was gescheit ist.
Rauskommen.
Nach allen aktuellen Reviews sieht das ja so aus,
als hätte Blizzard seit Jahren mal wieder ein gescheites Game auf die Reihe gekriegt.
Aber mal abwarten.
Du kannst nur chatten mit Subs.
Sowas würde ich nicht machen.
Leute, die auf Twitch das machen, sind auch echt pepega.
Ich bin überzeugt davon.
Beweist mir...
Change my mind, ja?
Ich bin überzeugt davon,
dass du mehr Geld verdienst mit
offenem Chat
und subscriben können versus
subben für Chat.
Weil sobald du gezwungen wirst,
haben viele Leute einfach keinen Bock.
Und hauen ab und kommen nie wieder auf deinem Channel vorbei.
Und im anderen Fall
chillen sie eine Weile hier rum
und überlegen sich irgendwann mal,
ach, könnte man doch auch subben.
Außer ich werde HotTubeCamGirl
Streamer, ja.
Gut, woher wollt ihr eigentlich wissen,
dass ich kein Girl-Streamer bin?
In der heutigen Zeit
ist das kein Ding.
Ich könnte mir das von heute auf morgen überlegen. Instant. Bam.
Ja, Chat.
So einfach wie...
Zack.
Bei der wundert mich
aber auch nix mehr.
Bei der verwundert mich echt nix mehr.
Okay.
Gebe ich dir recht.
Aber das betrifft nur ganz wenige.
Bei XQC zum Beispiel kann man den Chat sich nicht mehr angucken.
Und XQC
habe ich früher ganz gerne geguckt.
Aber seitdem der diese Riesenanzahl...
Also ich habe den geguckt im Bereich, da hatte der so
1.000 zu 500 bis 2.000
Viewer. Mittlerweile
hat er ja viel, viel mehr.
Damals war der Chat schon auch krasses Gespammer,
aber er war eigentlich ganz witzig und es
ging noch. Mittlerweile ist es ja nur noch
eine komplette Wand an Text, die einfach
durchrauscht.
Ja, Kronk...
Bei Kronk ist das aber auch anders.
Mein
XQC ist halt...
lädt halt zum Spammen ein schon richtig,
dass da gespammt wird.
Diese Chats,
das ist Teil davon, dass
da gespammt wird als Fakt.
Bei Kronk ist ja so, dass sinnvolle
Sachen auch noch im Chat geschrieben werden.
Weil du nicht auf BoobaTV bist.
Leute,
ich traue mich nicht auf BoobaTV zu drücken.
Kann man da draufklicken, ohne
dass was passiert?
BoobaTV is a curated list
of entertaining stream...
Ich...
Okay.
Ich traue mich. Ich traue mich BoobaTV.
Okay.
Die haben tatsächlich alle was an. Alles gut.
Es sind nur...
Es sind nur verlinkte Twitch-Dinger.
Okay.
BoobaTV.
Dass es dafür eine Uhr gibt, Mann.
Ich sollte mir
booba.zip registrieren.
Ist das noch frei?
Moment, ist das noch frei?
Oh, die muss ich kaufen.
Ach, man kann.
Booba.zip. Nein, ich kaufe die nicht.
Was will ich mit der Domain?
Vor allem kostet die mich irgendwie 20 Euro im Jahr
oder so.
.zip ist das secure namespace.
Ach so, Google. Ist das so.
Also microsoft-office.zip ist
also neuerdings secure.
secure-namespace.zip
Ah gut.
Leute, ich wollte essen gehen.
Mach ich jetzt auch.
Hast du nicht mehrere Domains, die du einfach nur wegen dem...
Ja, habe ich. Ich habe bestimmt 6, 7 Domains insgesamt,
die ich eigentlich für nichts benutze, aber die gute Namen sind.
Ja.
Das ist auch so ein Ding, dass das...
Wobei, es funktioniert ja nicht.
Das funktioniert ja nicht ganz.
github.com repo
Dings.
Das funktioniert ja nicht ganz.
Weil du nicht
https
mit
unicode slashes da vorgeschrieben hast.
Aber wenn,
dann würde es tatsächlich funktionieren.
Okay, Leute. Mal gucken.
Eventuell spielen wir nachher noch ne Runde.
Mal schauen.
Den Warhammer
Boomer-Shooter.
Mal gucken, was wir danach essen nachher.
Bis dann. Ich geh jetzt was essen. Ich habe übertrieben Hunger.
Wir sehen uns. Bis dann. Macht's gut.
