Keck wie es ist service du schmelzt debate nein nein nein das machen wir wirklich noch mal ja
Ich habe gestreamt bis 14 uhr oder so und ich habe jetzt was gefuttert
Und ich wusste jetzt nicht mal was ich sonst noch machen soll großartig lohnt sich ja nichts mehr großartig anzufangen ist der tage
Aber ich mir gedacht kommt machst einfach noch mal streamen und außerdem muss man mit dem sellout machen wieder
Huge huge money sellout ich habe vier jahre jetzt jetzt
exposed mich donner so
bald schon wieder bett ja
dreieinhalb stunden das bett
Massive ein beid
gechirrt
acht spiel jahren euro
heute endlich mal wieder cute vm
das
könnten wir
eigentlich können wir nicht
Da bin ich nicht eingeloggt
Ich bin in meiner anderen vm eingeloggt
also web service mäßig und habe ich immer meine ganzen meine ganzen es ist hart kies nicht drauf auf der cute vm
Wir können die cute vor allem nicht verwenden ich habe können die cute vor allem verwenden und uns auf mal per ssh auf eine normale vor
einem connecten dann ist es aber nur noch halb so gut
aber aber wir hätten ja
web hintergründe
kommen weil ihr seid ich mache jetzt mal
Ich war jetzt mal wie es die cute vm an für die heutige
web ladung
nur für euch leute
nur für euch
eine runde hacker man vm
Das gucken wir uns jetzt zwei minuten an und dann ist das mieter wieder aufgeladen und wir können es wieder ausschalten
ich habe einen server bei mir zu hause aber ein monitor und was das war es war zu schnell es war zu schnell und
also
Bei verteilen ich habe ein server bei mir zu hause aber ein monitor muss ich immer extra anschließen kann ich irgendwie
Ja das gibt's
Ach so moment was kann ich irgendwie den theoretischen monitor irgendwie streamen
Und willst du den output jetzt streamen oder willst du den output nicht haben was was
ganze wenn du streamen willst hast du mehrere varianten entweder
du schließt die capture card
Oder du holst dir in den remote kvm remote kvm gibt es auf auf ebay relativ günstig da kannst du das ist ein gerät
aber ich zeig dir mal kurz auf ebay
Ich möchte zum beispiel da brauchst du remote kvm wenn du ins bios willst guck mal gibt es gibt es auf ebay relativ günstig gebraucht
remote kvm
Ich meine wenn der server dir um die ecke steht und du eine capture karte frei hast kannst du auch kannst du auch
anstöpseln und
Tastatur anstöpseln und monitor bei capture karten machen wenn du eine hast aber
Ich habe mir bei ebay auch eingekauft vor
drei jahren oder so für 120 euro
ip
Ja mal gucken
Ne ne ne ne so was kleines war das nur für einen rechner
Was landt rohnix könnte sogar sein dass von denen was hat
Ne ne ne
doch sagt dass da ja sowas habe ich genau so was so was brauchst du so was brauchst du dafür
ein bisschen sogar teurer geworden
vga ich meine vga in
2021, aber Servergeschichten haben ja immer noch
ein VGA. Es hat eigentlich fast alles, wenn es nicht
gerade teurere Desktop-Boards sind,
ein VGA. Ich glaube sogar mein Board
hat noch ein VGA. Es hat fast alles noch ein VGA.
So.
Es ist kein Schnäppchen, aber was meinst du,
was der Scheiß neu kostet?
Also.
Sowas könntest
du verwenden, das schließt du hier an.
Man kann das auch selbst vornehmen,
Raspberry Pi, aber ob das so schön ist, keine Ahnung.
Habe ich noch nicht ausprobiert. Schließt VGA an,
schließt USB an, schließt Netzwerkkabel
an und dann
gehst du mit dem Browser
auf die IP,
wo das
sich
was auch immer gezogen hat per DHCP
und dann kriegst du im Browser
ein Bild und kannst
Tastatureingaben steuern.
Sowas in der Richtung brauchst du
dann, ja.
Sag mal so, erwarte jetzt nicht
super krasse Performance oder so.
Das ist
die
man merkt, dass das
schon ein paar Jahre auf dem Buckel hat, die Technik
hier drin in sowas, ja. Also erwarte
jetzt nicht die Grafik und die Performance.
Nee, nee, RDP ist viel, viel,
viel, viel schneller, was
oder Bandbreiten sparender, je nachdem.
Wie gesagt, das hat ein paar
Jahre auf dem Buckel und das
Bild sieht jetzt auch nicht gestochen scharf aus oder so.
Aber du kannst halt Remote bedienen
und du bist halt nicht darauf angewiesen, dass das Betriebssystem
drauf läuft.
Sonst könntest du ja Teamviewer
oder sowas nehmen. Also hiermit kannst du ins BIOS,
das ist wie wenn du da
vorsitzt.
Ja, du darfst aber nicht die Qualität erwarten von
einer Capture Card, die angeschlossen ist.
Kannst du auch machen, wenn du eine Capture Card hast. Gibt's ja
verschiedene Varianten. Ja, und für alle, die
das Problem haben, was ich ursprünglich
dachte, was er hat.
Das wird jetzt hier echt
so eine Standard-Copy-Paste-Geschichte.
Das ursprüngliche Problem, was ich dachte, was du hast,
ist, wenn du Monitor nicht anschließt,
dann hat Windows Probleme beim Starten.
Dafür gibt es so kleine
HDMI-Dongle,
die im Endeffekt nur so tun, als wären
sie... Was? Wireless?
Die einfach nur so tun,
als wären sie ein Monitor, sind sie aber
gar nicht. Was bin ich sehend
hier überhaupt?
Okay, was es nicht alles gibt.
Das ist der Recht, der denkt, es wäre ein Monitor angeschlossen,
obwohl kein Monitor dran ist.
Wenn der Monitor sich mit dem BIOS nicht versteht,
da kann man nichts machen. Da ist sowas
hier wahrscheinlich sogar echt ganz nützlich,
weil das ist VGA und der kommt gut klar
raus. Ich glaube, es wird 40x480.
So, jetzt noch ein bisschen Weeb-Meter aufladen,
bevor wir anfangen.
Wo ist der Sibaro, wenn man ihn braucht?
Jemand den Sibaro gesehen in letzter Zeit mal?
Ich habe weder gesagt,
dass ich streame, oder dass ich nicht streame.
Ja, also, wo wir heute dabei
sind, Leute. Ich muss jetzt
mal eine Runde
Exquisite Sellout machen.
Also, wer auf
der Suche ist am günstigen Server-Hoster,
kann bei meinem Partner Hetzner Cloud
dabei gucken. Da kriegt ihr relativ
günstig komplette Linux-VMs.
Benutze ich selber schon seit
Jahren. PriceChamp
läuft drauf und
auch andere Dinger, die wir hier im Stream gemacht haben,
laufen fast immer
bei Hetzner in der Cloud. Geht los
ab 2,96€.
Und wenn ihr nicht jetzt da registriert mit meinem
Code,
Codra,
Ausrufezeichen Hetzner im Chat.
Wenn ihr euch da jetzt registriert mit meinem Code,
kriegt ihr 20€ Startguthaben für
Neukunden. Das Ganze könnt ihr einlösen
bis 31.12.2021.
Und
wenn man sich überlegt, für 20€ kann man schon
hier 1-2 kleine Server
für ein paar Monate laufen lassen.
DigitalOcean ist teurer.
Aber
kann jeder benutzen, was er will.
Bei mir kriegst du 20€ Startguthaben.
Die haben jetzt auch ein paar neue Features.
Können wir uns gleich angucken.
Und nachher mal zur Info
an der Stelle. Es wird demnächst
mit IPv4 etwas
teurer. Das Hetzner
Kommando geht bloß einmal in der Minute.
Wenn das jetzt nicht geht, einfach 1 hochscrollen.
Da steht es ja da. Der Link ist ja für alle gleich.
Du hast deswegen DigitalOcean
zu Hetzner migriert.
Exquisite.
Das Screenshotte ich jetzt und
schickst den Leuten bei Hetzner.
Da freuen die sich.
Exquisite Screenshot Action.
Bam.
So.
Zack.
Massive Painskills.
Ich weiß, ich könnte das Sniptool verwenden.
Aber das Sniptool ist zu neu.
So neue Sachen
verwende ich nicht.
Ja, es ist bescheuert. Ich hätte es auch ohne Probleme snippen können.
Das stimmt schon.
Das muss ich dir mal schicken.
Die freuen sich nämlich immer, wenn man
Twitter-Messages oder Chat-Messages
zeigt, wo man sieht, dass es bei den Leuten ankommt.
Ist ja auch verständlich.
Was ist Snipping-Tool?
Windows-Taste S?
Ne, keine Ahnung.
Ja, aber wie gesagt, ihr könnt mit den 20 Euro
Startguthaben schon einige Server laufen lassen.
Und wenn ihr mal ein bisschen ausprobieren
wollt, ist das finde ich auch somit die beste Variante.
Rechenzentrum gibt es zwei Stück
in Deutschland, eins in Finnland.
Das in Finnland ist komplett
äh äh äh
wie heißt das?
Zumindest nur mit erneuerbaren Energien versorgt.
In Deutschland noch nicht alles,
aber sind sie gerade dabei.
Und wenn euch die Kisten nicht reichen, ihr könnt euch
auch zusätzlich Storage mieten.
Das geht dann hoch bis zu 10 Terabyte SSD-Storage.
Das kostet aber auch dementsprechend.
Also ich würde euch empfehlen, vielleicht bleibt mal ein bisschen was
bei ein bisschen kleineren Geschichten.
Und 100G reicht so ziemlich für alles,
was man braucht, locker aus.
Generell reicht auch das, was mitgeliefert wird,
locker aus, aber vielleicht habt ihr ja ein bisschen größere
Anforderungen, dann könnt ihr
relativ günstig noch Speicher dabei kaufen.
Genau, und was wir heute machen ist folgendes.
Ich versuch das mal kurz hier
zu erklären.
Boah, was ist das?
Ah.
Also ich hab mir gedacht, wir machen so
kleine, dreiteilige Serie.
So ganz grob.
Ich hab mir noch nicht
die ganzen Details überlegt,
aber wir machen quasi erster
Stream
machen wir heute
Web-Anwendung.
Das wird was ganz kleines, einfaches.
So.
Also das wird wirklich easy.
Ich hab mir schon ungefähr überlegt, was wir machen.
Wir laden uns ein KW-Bild runter,
rotieren das 360°
und speichern von jedem
Grad
Rotation ein
extra Bild und das randomizen wir
und liefern das dann aus, wenn du mit dem Browser drauf gehst.
Die
Web-Anwendung ist nur zum Beispiel, die soll nichts
Großartiges machen. So, also wir machen mal
Web-Anwendung, dann mal mal Server einrichten
mit
Ansible, jetzt machen wir nämlich Big Brain Time diesmal,
dass man auch mal ein bisschen was lernt.
Und dann bin ich mir noch nicht sicher,
ob wir die App da heute schon drauf
schieben. Wahrscheinlich schon.
So, zweiter Stream wird dann sein
GitHub,
Actions
und Deployment
und CI, also sprich
dass wir das auch automatisch
bei einem Push bilden
und auf den Server schieben und die Anwendung neu starten.
Loadbalancer,
weil das ganze kann man wunderbar
das ganze kann man wunderbar
Clustern, oder was heißt das?
Clustern. Wunderbar auf mehrere
Service. Wir haben dann quasi
5 Server, 5 Node Cluster
Cagway as a Service
und Zertifikate
machen wir im zweiten
Stream. Und im dritten
Stream machen wir
daraus Containerstells.
Das wird so ungefähr
der Fahrplan.
Cagway as a Service.
Das wird so ungefähr der Fahrplan. Heute machen wir das,
ich hoffe wir kriegen das alles gebacken,
kann einer einen Screenshot machen?
Oh, das ist eine super Idee.
Das wäre nice, wenn ihr einen Screenshot machen könnt
und dann können wir dem
können wir das heute in das
Ausrufezeichen Server packen.
Screenshot und
dem Stripes schicken.
So, also
das machen wir heute
im ersten Stream.
Wir fangen mit der Web-Anwendung an, die wird aber
äußerst billig, das kann ich euch gleich schon sagen.
Wie?
Vm hat sich einfach ausgeschaltet.
Bildschirmschoner an. Was ist hier los?
Okay, ich glaube wir haben jetzt
Cuteness-Ladungen
genug abgeholt. Wir machen
jetzt mal die richtige Vm an.
Oh, was haben wir denn da auf?
Das bin ich
sehend.
Der Chat hat es verlangt. Der Chat
ist wie immer schuld.
Battle Plays.
WTF, was wir nicht alles für Kommandos haben.
Das gibt es wahrscheinlich schon gar
nicht mehr.
Moment, warum ist das erst
wenn ich kekw suche
ein Chip-Artikel?
Das bedeutet kekw als Emote in Twitch-Chats.
Ja, bescheuert.
So, die letzte Geschichte
verschieben wir mal auf einen anderen Bildschirm.
Internet-Slang.
Alles klar, gut.
Also
fangen wir, wir fangen heute mal an
mit der
Web-Anwendung. Und wie gesagt, es wird echt
billig.
Aber bevor wir das machen,
müssen wir uns noch ein schönes
kekw
Bild raussuchen.
Ich trau mich nicht, ich trau mich nicht auf Bilder
zu klicken, Leute.
Okay, das ist gut.
Das nehmen wir.
Das nehmen wir.
Das muss reichen. Ich hab immer Angst, die Google
Bildersuche aufzumachen, Leute.
Wenn ich hier schon die Cursed kekw
Version sehe.
Oder nehmen wir das?
Nee, das hier.
Gibt's das ohne Wasserzeichen
auch noch?
Ohne Wasserzeichen.
Ohne Wasserzeichen.
So, perfekt.
Download.
Save Image.
WebP.
Was ist das schon wieder? Ach, das ist
WebM in Video-Format, ne?
Okay, Download.
Das müssen wir mal umbenennen.
Irgendwas in kekw.
So, also von der Idee her.
Was soll kekw as a Service machen?
Das wird
heutzutage wird man cool
sagen, wir müssen mit der Zeit gehen.
Das wird ein Microservice,
der kekw
rotiert. Fertig.
Das heißt, damit ich das Ganze
machen kann, muss ich jetzt erstmal
dieses Bild
ähm
muss ich erstmal dieses
Was öffnet der denn?
Okay.
Muss ich dieses Bild erstmal
360 Grad rotieren.
Immer in ein Grad schritten.
Hatte immer eine glorreiche Idee, wie wir das
Masker noch bestimmt mit FFmpeg machen.
Ne, wobei, ne mit Image Magic
geht das garantiert.
mkdir kekw.
So, äh
Convert ist Image Magic, ne?
Convert
Boah, das weiß ich doch nicht.
Image Magic Convert
Rotate
Degree.
Mit CSS wäre das auch einfach, aber
ich will ja jedes speichern.
Minus Rotate Angle. Okay, also
Convert
kekw. Hallo?
kekw?
Hä? Warum hat er das eben nicht?
Verstehe nicht.
Okay.
Exquisite Soundtrack hier.
Passt ja, heroisch. Heroisches
Bild rotieren. Minus
Rotate
Rotate
Und dann kann er einen Outpunkt
PNG oder sowas.
Okay. Gucken, ob das jetzt funktioniert hat.
Jawoll, er hat rotiert. Excellent.
So sieht kekw
rotiert um One Degree
aus. Okay.
So, das heißt, das müssen wir jetzt mehrfach machen. Also
for in
0 bis 360
By the way, das ist Bash Syntax.
Wer das nicht kennt, ich zeig das an der Stelle mal.
Also wer sich schon immer gefragt hat,
wie man elegante Vorschleifen in Bash macht,
dann so. Es gibt
in Bash zwar auch diese komische
komische Syntax hier wie in C,
aber die verwendet keiner.
Also was man machen kann in Bash, wenn man eine Schleife
360 mal laufen lassen will,
dann sagt man einfach for i in
und hier sagt man jetzt
von wo bis wo man zählen will.
do echo i
So, und jetzt gibt der aus
0 bis 360
Ey, das ist doch schon
relativ elegant. Ich mein, guckt, überlegt
euch mal, was war denn früher? Wie hättest du
es davor machen müssen? Früher hättest du so
machen müssen. Sequence.
Da finde ich das aber
besser. Du willst aber nur
359. Das stimmt.
Ich will nur 359.
Ich will inclusive 0
und exclusive 360.
Also ich will 359, das ist richtig.
So. Ja, mit
X-Args kann man das auch machen. Aber für eine Schleife ist
eigentlich so eine wunderbare Geschichte.
So eine Art for each.
Ja.
Gut, in Bash ist das alles nicht so klar
zu trennen. Ich will 0
bis 365, das ist gut.
So, also, wie war das jetzt?
Convert
Gag W Web
Rotate
Decree
Äh
Ah ne, out
Dollar
Jetzt wird's Advanced Bash
Gedöns i
.jpg
Also wenn ich mich jetzt nicht vertippt hab,
wir gucken jetzt mal, ob das so funktioniert, was ich da mache.
Wenn ich mich jetzt nicht vertippt hab, sollte
der 0 bis 359
durchzählen und jedes Mal dieses
Convert Kommando aufrufen mit
einem Degree mehr Rotation und dann
das Bild benennen nach dem aktuellen
Schleifendurchlauf.
Jetzt ist Five Hat Time angesagt.
Die geschweiften Klammern, doch, die geschweiften Klammern
gehören dahin. Das ist, dass man besser
Variablen erkennt in der Bash.
Es gibt, es gibt Fälle,
da interpretiert er das hier als
Text und nicht als Variable. Da muss man das so
machen. Und gerade, wenn's im Wort
ist, finde ich, kann man das, kann man das
besser lesen so. Okay, also
Bam. Gucken, ob das jetzt funktioniert.
Oh, guck,
scheint zu gehen. Es ist Bash und
es ist Image, Magic, es ist beides, alles andere
als schnell. Wäre
Transparenz, ach was.
Keck WS Service braucht das nicht, hat Transparenz
nicht nötig. Wenn irgendwie
einer eine Ahnung hat, wie ich da jetzt auch noch mit Transparenz
mache.
Okay, wollen wir mal gucken, wie man das mit, okay.
Convert Image
What the fuck?
Convert
Image Magic
Transparency
Transparent Background
Okay.
Minus Transparent White
What the? Obvious
Leute, obvious. Natürlich,
natürlich. Was sonst?
Das ist, finde ich, jetzt
sehr einleuchtend, sehr einleuchtend.
Total intuitiv, also
ich mein, Errode Square
One. Ja, wer, also wer das jetzt
nicht versteht, dann weiß ich auch nicht.
Ich probier das mit Transparenz
Transparent White. Mal gucken, ob das
irgendwas bringt. Aber wir haben jetzt
hier unsere, unsere
300 irgendwas
Keck Weight, out 300
Ja, guck, das funktioniert. Ich versuch's mal
oder ich, ja, guck, das funktioniert.
Ich versuch's mal, oder ich löscht
den Kram nochmal. Ich versuch's mal mit
mit Transparenz, ich löscht den Kram nochmal.
Ich versuch's mit Transparency, mal gucken. Aber, aber
erstmal, erst, erst, Moment, erst
erst einmal, erst einmal.
Hat jetzt mal mit Keck Weight as a Service nicht direkt was
zu tun, aber wir probieren's mal aus.
Äh, kann JPG Transparenz? Nee,
da brauch ich PNG, ne?
Moment, vielleicht macht er das, vielleicht macht er das halt
PNG automatisch. Nee,
nee. Kann JPG
Transparenz? Ja.
So, Transparenz,
Transparenz White.
Sieht nicht so sonderlich transparent aus, wenn ich ehrlich
bin. Meint ihr, das ist
transparent? WebP kann
keine Transparenz. Das muss es ja auch nicht.
In WebP brauchen wir keine Transparenz. Ähm, ich,
das Weiße soll da transparent machen.
Reload, ist doch schon.
Sieht nicht so aus, als kann er Transparenz.
Okay, dann
hab ich keinen, what
the hell, was treibt
der Dude hier? Okay.
Image
Magic, PNG, PNG.
Image Magic.
Für mich jetzt aber eigentlich nicht mit,
mit, äh, mit so viel
Extent Canvas mit.
Das will ich haben.
Okay. Background None.
Ah, yes.
Jetzt wird's
advanced hier.
War der Vergleich? Das wird eins.
Wo ist es?
So, das ist das ohne jetzt.
Kein Unterschied.
Absolut kein Unterschied.
Leute, ich hab keine Ahnung, ich lass das
jetzt einfach. Gibt keine Transparenz.
Pech gehabt.
Weiß ich nicht, wie das funktioniert. Ist aber überhaupt nicht Ziel
des Streams, dass wir da irgendwelche
Transparenz-Geschichte machen.
Das liegt am Browser?
Meinst du?
Okay, okay.
Oh. Oh je.
Kill all
Convert. Hängt das jetzt?
Easy, easy.
Woop S. Meinst du, das liegt am Browser?
Wirklich?
Ich teste das noch einmal, ob es am Browser liegt.
Background None.
Out.jpg.
Oh, wie heißt dieser
Bildbetrachter?
Image Viewer.
Ich hab einen installiert. Ich kann mir...
Ja, okay. Fee könnten wir auch mal gucken.
Nee, ich hab...
Out.
Nee, da ist nichts transparent.
Der kriegt das nicht hin.
Transparent White. Können wir auch noch machen.
Wir probieren das jetzt mal aus.
Ah. Oh.
Guck dir mal da an.
Es ist transparent.
Massive
Transparenz.
Sehr schlecht anti-elased, aber okay.
Alles klar, alles klar. Kann ich mitleben.
Was machen wir heute? Mach mal Ausrufezeichen
heute.
Okay, das muss ich mal hier kopieren.
So, okay.
Jetzt aber. Jetzt lassen wir die ganzen Kram raus.
Rotate.
Background None. Transparence White.
Äh...
PNG.
Bumm. So.
Alter, das ist lahm.
Okay, PNG ist richtig. Alter, ist das...
Das ist ja mega, mega, mega fett.
Sind das irgendwie erst mal 500 MB
oder sowas am Ende?
Das kann ich doch im Leben nicht auf den Server uploaden.
Das ist doch viel zu groß.
Das braucht ja 5 Stunden,
bis das hochgeladen ist.
Äh...
Smaller PNG Convert.
Jetzt sehste mal.
Compress PNG Image Magic.
Okay.
Wie geht das jetzt?
Was? Format Prozent K?
Warum ist das...
Warum ist das so krass kryptisch immer?
Auf dem Server rotieren.
PNG hat... äh...
JPG hat keine...
How to reduce PNG?
JPG hat keine Transparenz.
Der Chat will das unbedingt
unbedingt transparent haben.
Warum eigentlich?
Wie groß ist denn das Bild?
Wartet mal.
Ist das einfach viel zu groß?
Kann das sein?
Ja, guck mal, das ist super fett.
Das muss ich noch resizen.
Guck mal, das ist total fett.
Damit kannst du den Desktop-Hintergrund keck wählen.
Deswegen ist das auch so groß.
Okay.
Ähm...
Resize.
Convert Image Magic.
Meine Güte.
Und jetzt ist noch die Frage,
resize ich und behalte es.
Aspect... Aspect Ratio.
Wisst ihr mal, mit was für
Dinger wir uns wieder aufhalten?
Was? Ich bin...
Hardcore verwirrt.
Wie geht das?
Resize Image. Ach so, okay.
Okay.
Okay, dann brechen wir ab.
Das ist zu groß.
Das ist zu fett.
Alter, jetzt muss ich nochmal
eine extra Schleife machen für
abbrechen von meiner ersten Schleife.
Das ist natürlich äußerst, äußerst
five head time.
Okay. Nochmal den ganzen
Scheiß löschen. Okay.
Rotate 1, background on white.
Und jetzt wollen wir das ganze
resizen zu 500x500.
Okay. FF Probe
out.
Es ist 500x... Ah!
Der resizete schon
Aspect Ratio. Okay, alles gut.
Sag mal, kann es sein, dass
es jetzt nicht mehr transparent ist? Ne, doch.
Transparent. Okay, perfekt.
Wir haben es geschafft. Nach fünf Stunden
wissen wir jetzt, wie wir das Bild resizen.
Oh. Äh...
White.
Resize 500x500
ist okay. Ehrlich gesagt, 300x300
reicht doch auch aus, oder?
Das Hetzen da oben rechts muss
weniger transparent werden. Okay.
Ja, das ist, weil das über die Leiste so drüber
geht, ne? Ähm...
So ist besser, ha?
Ja, so, so, so, so erkennt man das
deutlich, deutlich besser.
Okay, Resize 300x300, ping.
Äh, Moment.
Bam. So, jetzt aber.
Kann man endlich anfangen
mit kek WS Service. Guck mal, jetzt sind die Bilder
auch viel kleiner.
Out. Wine?
What the fuck?
Warum will der Wine öffnen für ein scheiß Bild?
Manchmal
macht es mich, manchmal macht es mich echt fertig.
Okay. Wir haben transparent
rotatetes kek äh
quadruple U.
Wunderbar.
Sehr gut.
Watched ist für Noobs.
Okay, wunderbar.
Jetzt, jetzt können wir ja, jetzt können wir
anfangen. Also, wir machen jetzt erstmal
einen neuen Ordner. Wir machen das jetzt mal ganz korrekt,
weil, wie ihr vielleicht schon gesehen habt,
bei mir, auf Git
gibt es ein neues Repo. Das machen wir jetzt
für diesen dreiteilige, dreiteiligen
Stream. Repositories.
Da gibt es jetzt ein...
Erstmal Dark Mode
anschalten. Da gibt es
ein kek WS-Service Repo.
Und das klonen wir uns
jetzt mal.
Warum
gibt es hier nicht mehr,
warum gibt es hier nicht mehr die Option klonen mit
SSH? Vielleicht weil ich hier
eingeloggt bin. Dabei müsste ich,
müsste ich eigentlich klonen können mit SSH.
Das ist natürlich jetzt doof.
Ich hab mein Login
hier nicht, aber ich hab mein SSH-Key hinterlegt.
Also ich kann
das klonen mit, mit äh
Was ist denn da die richtige Url dafür
bei Github, um das zu gründen?
Git, also mkdir
kek W
File already exists.
Ja, was? Sagt mal, ernsthaft?
Was hab ich denn hier für geile Ordner wieder?
Wieso nicht HTTPS?
Weil das nicht über Key geht.
Weil du dann immer Passwort und so eingeben musst.
Repos haben wir doch hier, okay.
Git, Clone.
So, wie geht das? SSH?
Git? Ne, ähm...
Ist das ein privates Repo?
Oh ne, das würde ich ja nicht sehen, wenn ich eingeloggt bin.
Wie ist denn da, Github,
SSH, Url?
Git add
Git add
add shithub
repo.git
Okay.
Oder auch nicht.
Ne, ich muss doch schon SSH davor schreiben, oder?
Was, Doppelpunkt?
Was ist das? Doppelpunkt?
Wirklich?
Ne.
Das ist normalerweise der Port, der da hinkommt.
What the fuck?
Doppelpunkt?
Wie geht denn das?
Ich wüsste, ich wüsste gar nicht...
Ich wüsste ja gar nicht, wie ich das einstellen soll.
Okay.
Wie auch immer, ich hab mein Repo geklont.
Keg W as a Service, alles klar.
Da ich das nachher pushen kann.
Mal gucken, mal gucken, ob das jetzt funktioniert.
Äh...
Ja, Keg W as a Service 2 ist das.
Äh...
Git commit a-m
0w
push
Okay, wunderbar.
Wunderbar.
Funktioniert.
Gut, ich bin eingeloggt.
Alles klar.
So, jetzt können wir in unserer 6-Head-Web-Anwendung anfangen.
Also.
Erstmal kurz schauen, was für ein .NET ich konfiguriert hab.
Äh...
Settings.
.NET 5. Gut, passt.
Also, neue Solution.
Web-Anwendung ist Mittel zum Zweck.
Die wird nicht sonderlich Big Brain.
Das kann ich euch jetzt gleich sagen.
Also, machen wir eine neue Web-Anwendung, die heißt
Keg W as a Service.
Ähm...
Im Verzeichnis
Repos
Keg W
Ne.
Keg W as a Service, alles klar.
Hauptsache es heißt doppelt und dreifach.
Äh...
Put solution in same directory.
Web-API machen wir.
Ja, passt.
Alles klar, sieht gut aus.
Create.
Ich hoffe, ich hab nichts vergessen.
Okay, ähm...
Ja, schön.
Gut, also, auf geht's.
Wir bauen die Web-Anwendung.
Das wird wirklich die simpelste Web-Anwendung aller Zeiten.
Wir löschen erstmal das ganze Standard-Zeug.
Ich mache ein neues Terminal auf.
Wir gehen nach Repos
Keg W as a Service
und dann sagen wir
.NET watch run
Das ist Massive Big Brain Kommando.
Was das macht, ist
es guckt, ob sich was ändert im Projekt
und
dann reloadet es die im Hintergrund.
Immer, wenn sich was geändert hat.
Das heißt, wir müssen das nicht selbst machen.
So.
Das Ding heißt nicht Wetter-Wetter-Vorhersage-Controller
sondern das Ding wird heißen
Keg W Controller
und die Route geht direkt
auf, äh...
Wie nennt man das?
Auf die Hauptseite.
So, der Keg W Controller
der ganze Krempel kommt weg.
Wollt einfach nochmal gucken,
ob es jetzt kompiliert.
Wir wissen ja, wenn es kompiliert, dann geht es auch.
Er startet das
standardmäßig. Ih, was macht der da?
Hier ist der Fott.
Use HTTP Redirection kommt raus.
Machen wir über eine Reverse-Proxy später.
Das kommt weg.
Swagger, API-Dokumentation, wer braucht denn sowas?
Weg damit.
Äh, und hier auch weg damit.
Alles klar.
So.
Wenn ich das jetzt aufmache, Localhost
Port 5000, dann
sehe ich die leere Seite. Das ist schon mal gut.
Scheint zu funktionieren.
Gut, ähm...
Wie gesagt, das wird der
schlechteste Microservice
aller Zeiten.
So, rename, das ganze heißt
Keg W Controller.
Wunderbar, reload.
So, okay. Und was soll der
Keg W Controller jetzt machen?
Also, ähm...
Der soll quasi
random
eins der vorher rotierten
Bilder anzeigen.
Das ist alles.
Also, das heißt...
Wir machen das jetzt ganz einfach.
Wir kopieren den Kram jetzt da rein.
Also legen wir noch einen Ordner an für die Bilder.
wwwroot
Zack.
Zum testen, zum testen lege ich da mal
eine Index HTML rein, die wir nicht brauchen.
Aber ich will mal wissen, ob meine
Web-Anwendung überhaupt funktioniert.
Ähm...
So, da müssen wir ihm noch sagen, dass er statische Files
ausliefern soll.
Statische Files, wunderbar.
So, und jetzt sollte ich von der Idee Keg W
kriegen. Alles klar. Funktioniert.
So, und jetzt schieben wir unsere ganzen
vorher rotierten Bilder
ähm...
in...
hier in den Ordner.
So, ähm...
Chat, ihr habt bestimmt aufgepasst. Wo habe ich denn
Downloads Keg W? Also Move
Downloads
Keg W
Alles
Bam!
Die Expansion kann man sich übrigens sparen. Man kann einfach
die Sternchen da stehen lassen.
Ähm... hier rein.
So.
Da haben wir die Bilder. Okay.
Statische Files surfen machen wir wieder
aus, weil wir wollen ja, dass unser Controller
auf Root erreichbar ist.
Ähm... und jetzt
machen wir... Okay, der soll random
ein Bild zurückliefern. Also...
Return File. Erst mal
testen, ob das prinzipiell funktioniert.
Äh... Return File.
Kann man da direkt eine
Datei
angeben oder braucht man einen Stream?
Braucht
einen Stream, wie es aussieht.
Okay, also. Da müssen wir
die Datei erst mal öffnen. Var
File. Ähm...
File.
Open. Ach nee, das ist jetzt doppelt
benannt.
System. I.O.
File. Wo steckt das?
Was? File Stream Result?
Sagt mir jetzt gar nichts.
Ach so! Da kann ich dann direkt
ein Anlegen. So was hier. File.
So. Open.
Äh... Open Text.
Open. Ist Open
Read das gleiche, wie
Open File Mode Read?
Wahrscheinlich Open Read.
Würde ich sagen. So. Okay.
Welches Bild machen wir denn jetzt?
wwwroot
slash out1.png
oder out12.png
So. Hier haben wir das File eingelesen
und da kriegen wir jetzt den File Stream.
So. Was will der jetzt noch von uns?
Content Type.
Ähm...
Was ist denn der Content Type?
PNG? Oh.
Habe ich irgendwie jetzt... Mist.
File Stream? Ist doch richtig.
Jetzt passt's.
Application KQ.
So. Und jetzt sollte ich von der Idee... Bäm!
Da ist er!
Der rotatete KQ.
Beste Web Anwendung aller
Zeiten. Okay. Und jetzt noch die dynamische
Komponente da rein.
Random. Gleich. New. Wobei
wäre es nicht cooler, wenn man das static macht?
Private. Ist das
Thread Safe? Also jetzt
vielleicht mal... Ich programmier das jetzt,
aber unter dem Vorbehalt, dass es falsch ist,
was ich mache. Wir müssen gleich mal
gucken.
Private static
random
gleich new random.
Ich bin mir nicht sicher, ob das Thread Safe ist.
Random class
.net
Thread Safe.
Also die Sache ist die.
Das ist ein Zufallszahlen-Generator.
Ja, aber nicht, wenn ich
static mache. Wenn ich static mache,
bleibt es immer gleich. So. Und
ich bin mir jetzt nicht sicher, ob
ich dort
aus mehreren, also wenn jetzt 50 Leute
gleichzeitig diesen äußerst
beliebten Webservice KQSService
aufrufen,
ähm,
dann ist die Frage, ob
das kaputt geht, wenn ich, wenn
man die hier aus mehreren Threads aufruft.
Das weiß ich nicht. Ist C Sharp
random number generator Thread
Safe? Mal gucken, was Stack Overflow so sagt.
Lass mich raten, wahrscheinlich nicht.
Ne.
John Skeet. Natürlich.
Natürlich. Wer sonst? Wer sonst?
Natürlich
John Skeet.
Ich glaube,
das ist, ich glaube, das ist, der hat immer noch
mit Abstand die meisten Stack Overflow Punkte
aller Zeiten.
Bad code do not use.
Ja, das stimmt. Das will ich ja auch gerade,
gerade vermeiden.
Bad random isn't Thread Safe.
Is use misc util static random.
Was zum?
Was ist misc
Ah, ah, der John Skeet
Library, alles klar, okay.
Der Typ hat
es durchgespielt. Ne, ne,
komm, scheiß drauf. Äh, wir brauchen
kein Thread Safe random, alles,
alles gut.
Dann machen wir es so, dann wird's
jedes Mal neu angelegt, aber wir können's,
wir können's einfach so machen.
War random gleich new, das ist
dann halt bei jeder Anfrage eine neue Instanz.
Ist ja nicht wirklich schlimm.
So, random, keine Ahnung, number,
number, äh,
random, next,
so, von 0 bis
360. In C-Sharp ist
es nämlich exclusive, das heißt,
das ist jetzt ne random Nummer von
0 inklusive 0
bis exclusive, mal gucken, ob das
stimmt, ich glaube aber schon,
exclusive 360, also es ist,
es ist 0,
0 taucht auf
bis 300, bis
inklusive 359.
So,
okay.
Und das hauen wir jetzt hier rein.
Und dann sollte unser
Cag W as a Service schon soweit fertig
sein, dass der, dass der Cag weht.
I. Hallo?
I! Äh, nicht I,
N. Gut.
Okay, schauen wir mal.
Ha!
Leute,
es ist Cag W as a Service!
Es funktioniert!
So.
Okay, nochmal, nochmal kurz der
Cap, was wir jetzt gemacht haben.
Ist es nicht geil?
Das hat die Welt gebraucht! Das hat
die Welt gebraucht! Die Transparenz
wird im Browser nicht richtig angezeigt.
Hey, ich bin ein Risiko-Investor!
Natürlich! Ähm,
war mir schon klar, du warst, bist ja schon ne Weile
am Start, ich hab's schon öfters gesehen, aber,
äh, ich dachte schon immer, schon immer
bei deinen Messages, das ist bestimmt ein Risiko-Investor.
Und würde gerne absurde
Summen in ihr Startup investieren.
Wir glauben, ihr Service hat das Potential, das nächste
Google FB überzuwerden.
Bitte kontaktieren sich.
Ey, Fang, Fang is out,
wenn erst mal Cag W as a Service kommt.
Da sagen
die Leute nicht mehr, sie wollen einen Fang-Job,
die sagen, sie wollen Cag W, ein
Cag W, ein, nein, das sind ja die Amis,
die sagen dann, ich bin ein Cag W, ein
Cag W-Job. Oh, na na, Tongenbrecher.
Kannst du ein Auto-Refresh machen?
Ja, aber wozu?
So. Kannst, willst du noch ne
API machen? Da ist doch, du machst die Seite auf,
du bekommst ein Bild zurück.
Okay, wunderbar. Unsere extrem,
advancede Cag W as a Service
Anwendung ist fertig.
Übrigens, noch mal eine Runde Sellout.
Wenn ihr auch nen
virtuellen Linux-Server in der Cloud
haben wollt, dann schaut jetzt mal
bei meinem Partner Hetzner Cloud vorbei.
Geht schon los bei
3 Euro im Monat. Und wenn ihr jetzt
nen Server mietet, beziehungsweise euch
einen neuen Account macht und den ganzen
wo hab ich's?
Fuck, ich find's nicht. Lull.
Ah, hier, sehr gut, sehr gut,
Chat. Und das ganze
registriert mit meinem Account.
Alter, ich kann nicht reden. Leute,
Sellout gescheitert. Sellout gescheitert.
Vorbei. Vorbei.
Jetzt ist genug, jetzt kann ich nicht mehr sellouten.
Kündigung
ist raus. Jetzt vorbei.
IP-Adresse merken
beim nächsten Reload das Bild
senden. Nein.
Ja, zumindest, wenn ihr euch registriert
mit meinem Code, kriegt ihr einen 20 Euro
Startguthaben.
Startguthaben.
Allerdings nur für Neukunden.
Fake-Accounts, weiß ich nicht, ob sie was haben.
Der Sellout
ist richtig sad gewesen, ja.
Es war der schlechteste Sellout aller Zeiten.
Ist der Frasier on?
Guck mal so. Frasier on? Nein.
Ah, der war wieder ewig nicht on.
Okay, KekW ist der Service. Okay.
Machen wir weiter, machen wir weiter. Also unser
Webservice ist jetzt fertig.
Das Ziel ist jetzt,
dass wir folgendes machen.
Webanwendung
erstellen, Server einrichten,
reproduzierbar mit Ansible,
und dann schieben wir das Ganze
auf den Server.
Nur mal kurzer Recap.
Vielleicht hat noch nicht jeder
so eine ASP.NET Web-Anwendung
gesehen, deswegen zeige ich das nochmal ganz kurz,
was es macht. Es ist aber wirklich, ihr habt ja gesehen,
es ist äußerst wenig.
Also die einzigen zwei Dateien,
die ich angepasst habe, waren einmal
die Startup-Datei. Da habe ich alles
rausgeschmissen, wo hier irgendwas von HTTPS
oder irgendwelche API-Generierung
drinsteht. Alles weg.
Der Rest ist aber komplett Default.
Und ich habe den Standard-Controller
umbenannt in kekw-Controller
und habe ihm gesagt, dass er direkt auf dem
Root der Seite
aktiv sein soll. Und sobald man
die Seite aufmacht, wird diese Methode
hier aufgerufen mit get.
Also wenn du ein get-Request draufmachst,
wird diese Methode aufgerufen
und er macht nichts anderes, wie aus diesem Ordner
ein random Bild
zu lesen und zurückzugeben.
Er macht das nicht.
Das war's. Also mehr Anpassungen gibt's da dran nicht.
So, und das reicht schon für kekw-Controller.
kekw as a Service. Und jetzt werden wir
kekw as a Service mal
in der Cloud laufen lassen.
Dass ihr auch alle
eine Runde kekwen könnt
as a Service. Und da ist für jeden
Winkel ein Bild drinne. Genau.
Wir machen das nicht dynamisch
oder sowas. Wir haben im Vorfeld
360 Grad kekw
erstellt. Und dafür haben wir
immer random eins rausgenommen.
Ist natürlich auch gut.
Entlastet den Server. Da müssen wir nix
flyrotaten.
Könnte man vielleicht irgendwann demnächst...
Das ist ne coole Sache, dass wir ein bisschen
Programmier-Content für den zweiten Teil
oder dritten Teil noch haben.
Server-Side-Build-Rotieren.
Dynamisch.
Ja.
Da könnte man auch ne API machen.
Rotate.
Und dann
irgendwie sowas wie
Decrees angeben oder sowas.
Big Braintime.
Können wir das nächste Mal dann bauen.
Gut. Also.
Was haben wir hier?
Wir haben unser Master-Shit-Repo am Start.
Git Status.
Und jetzt machen wir ein Ansible-Repo.
Weil...
Ansible.
Weil wir wollen ja...
Ist erstmal egal mit welchem Tool.
Aber ich kann euch das prinzipiell nur empfehlen.
Wenn ihr Server aufbaut für Services,
die jetzt nicht einfach nur
angelegt werden
und dann wieder wegschmeißen,
weil man mal was ausprobieren wollte.
Irgendwas seriöseres
hosten wollt.
Irgendwas was vielleicht auch mal ein bisschen länger als 2 Tage
abbleibt.
Dann kann ich euch nur empfehlen
in irgendeiner Art und Weise
mindestens mal aufzuschreiben
wie ihr den Server eingerichtet habt.
Was da für Packages drauf sind und sonst was.
Oder aber noch besser
das Ganze in irgendeinem Skript oder mit irgendeinem
Automatisierungstool zu machen.
Dass ihr den gleichen Server
immer wieder reproduzierbar aufbauen könnt.
Oder eventuell auch noch
5 weitere dieser Server reproduzierbar aufbauen könnt.
Das ist ja gerade
einer der Punkte, warum dieses ganze
Container Zeug so beliebt geworden ist.
Du kannst Container
relativ easy immer gleich wieder aufbauen
und dementsprechend auch
mit irgendeinem Orchestrator einfach
skalieren lassen.
Brauchst du heute für 50 User was, brauchst du nur 2.
Hast du morgen 5000 User, brauchst du 20.
Ist für euch ein Dockerfile
Ansible gleich Dokumentation?
Wenn es ordentlicher Sourcecode ist, ja.
Wenn man es lesen kann.
Ich mein, niemand
braucht doch da Files, wo dann
drinnen steht, keine Ahnung, so
sagen wir mal hier, if
n größer 5.
Es braucht
doch niemand Kommentare, wo dann drinnen
steht, checks
if n is
greater than 5.
Das ist bescheuert, das sieht man ja.
Und dementsprechend, wenn das
alles selbsterklärend ist, bräuchte ich da auch kein
extra Doku Zeug für.
Für zusätzliche
Erklärung ist es natürlich sinnvoll, ne.
Was du in Ansible ja nicht reinschreiben kannst
ist, warum nimmst du diese
Packages? Und man, kannst du schon reinschreiben,
aber ich befürchte mal, das wird
da aber keiner drin aktualisieren, außerdem musst du dann
ein neues Commit machen, um die Comments zu
aktualisieren. Also sprich, wenn du
bei Ansible zum Beispiel sagst, wir installieren diese 5
Packages
und du willst irgendwie für die Nachwelt
vorhalten,
für die Nachwelt festhalten, warum man diese Packages
genommen hat,
dann würde ich das auf ein extra
Wiki oder so schreiben. Genau, also
es gibt da verschiedene
Tools für Server Automatisierung. Das
bekannteste dürfte wohl Puppet sein.
Das ist aber
ein bisschen
Caneschampig, finde ich.
Sieht so aus.
Ja, du sagst ja auch,
ich will nen User anlegen
mit dieser ID und dieser
Shell und diesem Home Directory und so was.
Dann gibt es noch Chef und es gibt Ansible.
Und Ansible finde ich eigentlich am nicest.
Ihr wisst, ich habe noch nicht sonderlich viel
Ahnung, beziehungsweise noch nicht lange
Ahnung von Ansible. Das haben wir vor einem Jahr
oder so mal zusammen uns im Stream angeguckt.
Ich muss sagen, mittlerweile finde ich das
wirklich sehr nice.
Ohne GitHub Co-Pilot, ja.
Ich sehe den Sinn davon nicht.
Genau, deswegen
machen wir jetzt ein
Repo, wo alles reinkommt, wo wir diesen
Service aufbauen können.
Puppet ist glaube ich schon bekannter, weil es das
deutlich länger gibt.
VirusBLL, Dankeschön für den Sub.
Aber Ansible ist auf jeden Fall
beliebter in letzter Zeit.
Lass mal gucken, es gibt doch dieses
Google vs.
Ranking Geschichte.
Oh, wo war das nochmal?
War es Google Trends?
Jawoll.
Taylor Swift und Kim Kardashian, genau.
Das ist Fußball vs.
American Football. Das müsste man sich mal
für die Welt angucken.
Außer
Freedomland ist da wahrscheinlich nicht so
viel. Aber es ist ja auch American Football.
Okay, Puppet.
Puppet findest du halt immer noch viel mehr. Da müssen wir noch
was dazu suchen. Egal.
Wir suchen einfach mal Puppet.
Und dann suchen wir hier Vergleich.
Puppet ist halt...
Guck mal. Sogar so ist es
beliebter.
Letzten 5 Jahre.
2004
bis heute.
Guck, hier ist das aufgekommen.
Und dann hat es das überholt.
Aber insgesamt würde ich tatsächlich sagen,
dass Puppet noch ein bisschen bekannter ist.
Eben weil es einfach mal 10 Jahre älter
oder so ist.
Ne, das stimmt nicht. So alt ist es nicht.
Egal. Keck vs. Services am Start.
Gut. Also.
Weiter im Text.
Nachdem wir alles in dieses Depot machen wollen,
legen wir einen extra Ordner für unsere
Ansible-File an. Ansible ist ein Tool, um Server
automatisiert aufzubauen.
Und das heißt, wir brauchen jetzt
erstmal einen Server, den wir
automatisiert konfigurieren können.
Das heißt, ich lege jetzt mal einen Server an.
Mal gucken, ob ich das
so mit dem
Kommandozeilen-Tool hinkriege.
Hier Server, Create, Image.
Das ist übrigens das gleiche, wie wenn ich bei Hetzner im Webinterface
klicke. Also wenn ich hier
Add Server mache und durchklicke,
ist es genau das gleiche, wie wenn ich es hier
über die Kommandozeile mache.
Nur, dass ich es einfacher finde, wenn man
jetzt öfters ein paar Server anlegen muss,
um eine Kommandozeile zu machen.
Okay, CX11, Name
Cagway2
CagWSE
Service
SSH-Key
Okay, wir nehmen Triple Core.
Wir nehmen eine Triple Core-Kiste.
Die heißen
CPX21
CPX21
Hoffentlich stimmt das.
Und wenn ich Glück habe, kriege ich jetzt auch nicht das Root-Passwort
angezeigt. Gibt es nicht auch eine Ansible-Rolle
für die Hetzner-API? Doch, gibt es.
Oh, ich darf keine Underscores
verwenden. Was sind das?
Keine Underscores.
Kommen wir denn da hin?
So? Okay.
Das funktioniert. Warum nicht
CagChamp? Weil es CagWSE
Service ist.
So, also.
IP von meinem Server. Das sind wir.
Was ich jetzt machen werde, ist,
ich werde mich nicht auf dem Server einloggen.
Wir legen jetzt erstmal einen Ansible
Ansible
Playbook an, heißt das Ganze.
So, wir legen
einen Ansible Playbook an.
Ich habe immer keine Ahnung. Wie nenne ich das denn mal?
Setup.
So, und jetzt muss ich
nachgucken, weil ich bin in Ansible
noch nicht so fit,
dass ich das aus dem Kopf gut hinbekomme.
Was ist denn das?
Manage? Oh, always.
Trusten.
Immer, immer trusten.
Okay, es ist
YAML. YAML fängt ja mit so tollen Minusen an.
Ähm, so.
Wobei,
ich nenne es nicht Setup, ich nenne es einfach
Server.YAML.
Oh.
Eisch. Ähm, so.
Jetzt hört es bei mir, jetzt hört es aber
bei mir auf. Ansible.
Ich brauche wieder Ansible.
Ähm, Mist.
Ich muss nachgucken,
wie das heißt. Also, ich,
Leute, ich logge mich mal kurz. Ich muss euch ausmachen.
Ich habe nämlich keinen Bock wieder auf irgendwelchen
Windows-Stells.
He doesn't know. He lacks critical information.
Okay.
Wieder an. Also,
ähm, ich muss mal gucken.
Ich muss mal gucken,
wie das funktioniert. Also,
normalerweise ist das Problem, wenn man sich bei Ubuntu
einloggt, dass immer beim Login die IP
angezeigt wird. Und das will ich ausschalten.
Ich weiß, dass es dazu, also
es gibt zwei Möglichkeiten, wo das herkommen kann.
Einmal Message of the Day oder
ssh-config. Ne, ich mache kein VPN.
Leben am Limit, Leute.
Ähm,
ich glaube aber, bei Ubuntu kommt es aus der ssh-config.
sshd-config.
Das habe ich nämlich schon, schon mal nachgeguckt.
Was? IP-Leak unten?
Da ist kein IP-Leak.
Ähm, ja, der Server,
die Server-IP juckt mich nicht.
Server-IP ist mir egal.
Es gibt eine Option, dass
das ssh nicht macht.
Hier. Print last log
no. Okay,
so heißt das. Das heißt,
das muss ich jetzt Ansible konfigurieren,
dass er das macht.
Also, Ansible
sshd-config. Wie macht man
das? Das, das mache ich,
das habe ich keine Ahnung von, muss ich nachgucken.
How to cleanly edit sshd-config.
Ne, Print Message of the Day ist
aus, warum auch immer, weil Ubuntu
keinen Bock da drauf hat, kein Schimmer. Aber das
ist das hier. Print last log,
dann zeigt es dir an, zuletzt
eingeloggt von und noch ein paar
andere Infos.
Äh, das ist Ubuntu 20.04.
Übrigens, wenn ihr irgendwelche Fragen habt, einfach
AdWoblos in Chat. Ich gehe auch gleich mal wieder
zwischendurch den Chat, Chat durch.
So, also, wie machen wir das jetzt am
richtigsten? Bäh. Was?
Test Replace.
Okay.
Also.
Ich bin unfähig, was Ansible-Dinger aus
dem Kopf, Kopf zu machen.
So.
Name. So, das Ding heißt Setup.
Setup-Job.
Äh, Hosts. Alle.
Die wir angeben.
Asks. Okay.
Äh, Task ist
Disable
Show IP
on Login.
Kannst du doch einfach Touch-Hash-Login.
Wirklich? Cool.
Wusste ich nicht. How to turn off
Login-Banner in Linux. Ist das
auch für die Geschichte, die
SSH ausgibt?
Ich deaktiviere das im SSH-Server und fertig.
Okay. Disable Show IP on Login.
Also, was wollen wir Disable?
Print Last Log.
Das ist Mist. Wir wollen keine Schleife hier machen.
Fart. Fart ist ETC
SSH, SSHD,
Config. Zack.
So. Regex.
Print. Print Last
Log. Aber
ohne,
ohne die Raute.
Und jetzt sollen wir Print
Last Log No. Soll dann da rein.
Also, soweit wie ich das
jetzt verstehe, macht er folgendes.
Der Unterschied zwischen Ansible und Docker, das sind zwei
komplett unterschiedliche Programme.
Ansible ist quasi
eine
Scripting-Umgebung, wo du Server
bzw. alles was du willst
automatisieren kannst über SSH.
Und Docker ist
ein Frontend für Container.
Linux-Container.
Zwei komplett unterschiedliche Paar Schuhe.
Du kannst mit Ansible aber zum Beispiel auch
Container anlegen und Docker verwalten.
Das geht.
Ansible benutzt du zum Beispiel für
so Sachen wie, geh auf den Server,
schalte die
Ausgabe von
der
IP beim Login
aus. Oder geh auf den Server,
leg einen User an mit dem Name
xy, Home-Verzeichnis sowieso
und der User-ID sowieso. Danach
leg einen Unit-File hin und
stell in der Firewall ein, dass nur
Port 22 erlaubt ist.
So in der Firewall ein, dass nur
Port 22 erlaubt ist.
Sowas in der Richtung. Hetzen hat eine CLI, ja.
Hetzen hat eine CLI.
Wow.
Was ich da gerade gemacht habe.
Ich mach das trotzdem mal weg. Auch wenn es egal ist,
dass ich das geleakt habe. Aber man weiß ja nie.
So.
Wait, könnte ich nicht mein Laptop mit Ansible
bootstrappen? Doch, könntest du machen.
Du musst aber erstmal ein Betriebssystem drauf kriegen
und Ansible drauf installieren. Nee, musst du nicht.
SSH muss laufen. Du brauchst Python
drauf, nicht Ansible. Kannst du machen, ja.
So und von der Idee, wir haben jetzt
über die Hetzener CLI einen Server angelegt
und mit Ansible lassen wir den jetzt konfigurieren. Also erstmal
SSH Login ausschalten.
Das ist schonmal das erste, was wir machen. Dann
brauchen wir noch ein paar Packages auf unserem Server.
Was jetzt vielleicht
nicht ganz klar ist an der Stelle. Was ist der
Vorteil, das so zu machen,
anstatt einfach sich
auf dem Server einzuloggen und
sagen, abt install. Naja, der Vorteil
ist, wenn ich mehrfach solche
Services aufbaue,
dann muss ich das jedes
Mal machen und immer in der gleichen Reihenfolge
und ich darf nichts vergessen.
Es ist einmal quasi so eine Art Dokumentation
da, wie der Server aufgebaut ist
und ich kann das jedes Mal wieder machen.
Gute Frage, ob das so funktioniert.
Werde ich gleich sehen.
Werde ich gleich sehen.
Wieso macht man das nicht in einem Bash Script?
Kann man auch machen. Hat man früher
gemacht, als es diese Tools noch nicht gab.
Ist für kleine Sachen auch vollkommen
legitim, aber Ansible hat keine
Ahnung, 200 Module für alle möglichen
Sachen drinne. Von Unit Files
verwalten, bis
Messings machen, bis Mount Points
verwalten und sonst was. Das ist halt
im Bash Script alles von Hand nachzubauen.
Die Logik, sehr Pains Champ.
Okay, also
bla bla bla.
So, und jetzt brauchen wir noch was.
Ich will meine, ich will standardmäßig Packages
installieren. Install
Packages.
Abt. Das weiß
ich aus dem Kopf, wie es geht.
Abt Packages installieren. Name.
So, Array. Was wollen
wir installieren? Telnet.
JIT. Vim.
Htop.
Enload.
Keymarks. DSTAT.
Was braucht man sonst noch so?
Äh.
Telnet.
Ne, haben wir schon.
Nettools.
Ne, wie schreibt man das?
Nettools, glaube ich.
So was wie ifconfig.
Boomer wie ich verwenden ifconfig, nicht
ip add.
So, und jetzt sagen wir noch
Status Latest,
glaube ich. Status
Latest.
Da muss ich jetzt einfach mal nachgucken.
Ansible. Abt. Install.
Zeig mal her, wie sieht denn das richtig aus?
Examples.
Äh. State.
Update
Cache brauchen wir auch noch.
Genau. Update Cache brauchen wir
auch noch, dass der vorher ein Update macht.
Update Cache. Yes.
Äh. State war es, ne. Nicht
Status State.
Date
Latest.
Genau. So, und wenn ich das
jetzt ausführe, sollte von der Idee
von der Idee her folgendes passieren.
Der loggt sich auf dem Server ein,
installiert mir die
Packages und danach
disabelt er das, dass es meine IP anzeigt beim Login.
Typo by Packages.
Das ist eh nur Text.
Auch noch ein
Update Upgrade mit rein.
Das ist eine gute Idee, das machen wir.
Update hab ich ja schon.
Update Cache. Äh.
Upgrade. Wie macht man das?
Upgrade.
If yes or save.
Vielleicht gibt es auch ein Example für.
Abt.
Ah, das muss man wahrscheinlich.
Ich versuch das mal, ob man das alles in einem machen
kann.
Ich glaube ja nicht.
Upgrade dist full.
Ähm.
Mal gucken, ob man das alles so auf einmal machen kann.
So, dann führen wir das ganze mal aus.
Also, wir haben hier die Datei liegen.
Äh.
Nicht download.
CD. Repos.
Keg W as a Service. Ansible.
So. Äh. Ansible.
Playbook.
Playbook.
Minus I.
Oh, wie konnte man die Server IP
überschreiben?
Normalerweise braucht man
ein Inventory mit den Hosts drin.
Das ist jetzt zum testen erstmal. Egal.
Top minus I.
Was ist jetzt?
Upgrade yes? Nee.
Die sagen selbst, dass es upgrade dist ist.
Ach so. Yes.
Okay. Update yes.
Und klar. Wollen wir auch yes?
Warum kann man da yes machen?
Okay. Und was ist yes?
Ist yes
full oder dist?
Okay. Das ist ein bisschen.
Ach nee. Save and it's
alias yes. Okay.
Yes ist yep.
Yepcock.
So. Ähm.
Jetzt
müsste es funktionieren. Ähm. Moment.
Wie ging es auf dem Server auszuführen?
Erstmal gucken. Was hatte ich denn hier für eine IP nochmal?
SSH. Den da. Minus I.
Wie ging das nochmal? Ansible.
Direct IP.
How to run Ansible without
specifying.
Hier. Minus I. Der Name
und dann das Playbook. Ja. Man muss
ein Komma machen. Das war total hängen geblieben.
Server. So. Also. Von der Idee
her sollte der sich jetzt auf dem Server einloggen.
Die Packages installieren.
Beziehungsweise. Nee. Er sollte erstmal ein Update machen.
Ein Upgrade machen und dann die Packages installieren.
Ich bin mir nicht sicher ob man das alles auf einmal
machen kann. Danach sollte er aus der
sshd-Config
ähm. Das ganze rausschmeißen.
Und danach brauchen wir noch ssh
reload.
Danach brauchen wir noch restart ssh.
Sonst funktioniert es ja nicht.
Name. Restart sshd.
Äh. Wie ging das?
Service.
Service. Name.
SSH. Das weiß ich nicht.
Ansible. Service.
Wo ich gucke.
Da muss ich gucken.
State restarted.
Okay.
State restarted.
Okay. Testen wir mal
ob es funktioniert. Bam. Warum?
Ah. Mein User
ist falsch. Äh.
Remote user.
Natürlich root. Was sonst?
Nur root tut gut.
So. Zeigen wir mal. Ah. Fuck.
Discover inter... Was?
Okay. Das geht nicht in einem
glaube ich. Ich glaube das funktioniert nicht in einem.
Package upgrade.
Das geht nicht in einem.
Dann müssen wir
äh. Da müssen wir das
splitten.
Kq-Service. Ja guck. So sieht der aus.
Ist das nicht geiler Service?
Den deployen wir jetzt auf die Kiste.
So. Ähm.
Darf man
sowas hier dann zusammen machen?
Update.
Upgrade.
Domain gibt es noch keine.
Domain müssen wir auch noch machen.
Ah. Ah. Guck mal. Jetzt. Jetzt funktioniert es.
Äh. Domain müssen wir auch noch machen.
Das äh.
Machen wir hier mit. Wenn wir Zertifikate machen.
Domain.
Es gibt sich... Ja. Es gibt sicherlich
eine Ansible Extension.
Macht er das mit den Adminrechten automatisch?
Äh. Du musst sagen welchen Remote User du
verwenden willst.
Nachdem wir root sind kann ich alles machen.
Macht der jetzt was?
Der scheint zu updaten. Ok.
Also.
Ah. Ich kack noob.
Das hätte ich noch rausschmeißen müssen.
Nochmal.
Siehste. Das Gute ist.
Wir machen das jetzt einmal richtig und können
jeden Server wieder so aufbauen.
Woher zieht der sich die Logindaten?
Äh. Das ist mein SSH Key. Den habe ich standardmäßig
beim Aufbauen mit drauf.
Ich wähle. Guck. Wenn ich hier.
H Cloud.
Sage ich hier SSH Key Test at Test.
Das ist halt der Titel von meinem SSH Key.
Ok. Hat funktioniert.
Hat funktioniert. Das heißt.
Jetzt habe ich hier unter anderem JIT drauf.
Genau. Nload drauf.
Ja. Perfekt.
Nice. Hat funktioniert.
So. Und ist jetzt SSH.
ETC SS.
SSHD.
Config. Hat er das jetzt.
ETC SSH.
SSHD Config.
Hat er das jetzt richtig gemacht?
Print.
Ja. Guck.
Print Last Log. No.
Hat funktioniert.
Und er hat auch den SSH Demon neu gestartet.
So. Gucken wir mal.
Ob der auch wirklich alles geupdatet hat.
Tatsächlich. Update.
Ja. Hat alles funktioniert.
Server ist jetzt in Top Zustand.
Nachdem er das Skript ausgeführt hat.
Super.
Jetzt ist natürlich die Frage ob meine IP nicht wieder kommt.
Wenn ich mich einen auslogge. Das testen wir jetzt mal.
Nope.
IP ist weg.
Kommt nicht.
Hat funktioniert. Sehr nice.
Alles klar.
Ähm.
Dann können wir ja weiter machen.
Also. Jetzt haben wir erstmal so die Basics
eingerichtet auf dem Server.
Und jetzt mal vielleicht so als Beispiel.
Warum das cool ist.
Und warum das sinnvoll ist.
Wir haben hier den ersten Server oben.
Ich lege jetzt nochmal einen Server an.
Der heißt jetzt KekW SService 2.
Server anlegen kostet nix.
Hetzner Cloud rechnet übrigens stündlich ab.
Das heißt.
Ähm.
Ich bezahle für den ganzen Kram hier.
So gut wie nix.
Eigentlich könnten sie die Server die ich im Stream zeige
wenigstens bezahlen eigentlich.
Oder?
Nicht Default Stream.
KekW SService.
KekW SService 2.
Und kosten tut das ganze
1 Cent aktuell.
Ich glaube 1 Cent ist das minimalste was geht.
Nginx oder Apache was ist besser?
Bei
Meilenweit ist mir Nginx
lieber. Viel lieber.
Ok. Guck wir haben noch einen neuen
Wir haben jetzt noch einen zweiten Server aufgebaut.
Und jetzt muss ich nur noch folgendes
machen. Äh.
Muss ich nur noch sagen. Ansible Playbook Server
aufbauen. Die IP austauschen. Normalerweise
hat man Inventory das man das
per Name machen kann. Ja.
Zack. Jetzt führ ich das aus.
Und er geht auf den zweiten Server drauf und richtet
den exakt so ein wie den ersten Server. Dafür ist das
praktisch. Ich könnte jetzt noch 20 Server
hinstellen die exakt so konfiguriert werden
wie ich das will. Also das ist
gerade bei sowas ist das enorm praktisch.
Ja warum er Nginx
Nginx ausspricht verstehe ich auch nicht.
Die Schreibweise verwirrt mich immer. Ich kann den auch nie richtig
schreiben.
Echt. Richtig Three Head.
Kannst du das nicht als Docker Container
machen? Doch. Das
machen wir in Stream
Nummer drei. Wir machen drei Streams
dazu. Heute machen wir die
Web-Anwendung richten den Server mal Oldschool mit
Ansible. Aber was heißt Oldschool?
Ansible ist ja nicht Oldschool. Weil Oldschool Server
ohne Container ein. Deployen die App
im nächsten Stream. Gucken wir
dass wir das Bild Serverseitig rotieren und so eine kleine
API noch einbauen. Dann machen wir GitHub
Actions, Deployment und Continuous
Integration. Weil wir sind Agile
äh Fifat
Hackermans. Dann verwenden wir mal den
Headster Loadbalancer mit Zertifikaten und extra
ein. Und im dritten Stream machen
wir dann Containerstells draus.
Auf YouTube gibt es die Streams nicht.
Ne. Aber wir haben ein Archiv.
Da ist das alles. So guckt.
Zweiter Server angelegt und ist direkt
konfiguriert so wie man haben wollen.
Also wunderbar.
Wann ist der zweite Stream? Zweischnitt.
Vielleicht nächstes Wochenende oder nächste
Woche. Es dauert auf jeden Fall nicht lang.
So. Und
daran sieht man jetzt den Vorteil schon. Ich könnte
jetzt 20 solcher Server
anlegen und total easy
konfigurieren lassen. Natürlich ist unsere
Config noch nicht fertig. Da muss noch ein bisschen
was dabei.
So. Ich lösche mal
CagVSService wieder.
Gut. Also lasst
mal überlegen. Was brauchen wir denn noch?
Wichtig. Wir nehmen eine Hetzner
Firewall davor.
Da müssen wir uns dann nicht selbst drum kümmern.
Also. Das ist übrigens neues Feature
bei dem. Das gibt es noch nicht so
lang. Ähm.
Seit 2 Monaten oder so.
Bisher musste
man sich komplett selbst drum kümmern.
Also man musste dann die beispielsweise
UFW unter Ubuntu einschalten.
Jetzt hat Hetzner. Ich glaube sogar
Ob sogar kostenlos?
Ich bin mir gar nicht sicher was der Kram kostet.
Guck mal. Der ganze Kram ist
noch da. Weiß gar nicht was
das kostet.
Ähm. Kann man jetzt Firewalls
anlegen. Das heißt wir können da auch wirklich nur Sachen
freigeben die man braucht.
So. Wir brauchen Port 22.
Wir brauchen
Ping. Ping ist ok. Können wir bei
behalten. Wir brauchen Port 80.
Und wir brauchen später noch
Port 443.
Und das ganze soll auf den Server gehen.
Keck W
as a Service. Apply to one server.
Firewall. Keck W.
Firewall.
Create. Und jetzt etwas safe.
SSH.
Ich hoffe es funktioniert noch. Kunst.
Sehr gut.
Was natürlich sehr praktisch ist. Da muss man sich selbst
nicht mehr drum kümmern.
Es ist nur
Ping erlaubt. Port 22 für H80.
Für HTTP und 443 für HTTPS.
Max hast du einen
Tipp für rollierende Updates vor Linux Servern.
Sprich Linux im Cluster nacheinander patchen usw.
Äh. Ja das kommt auf die Anwendung an.
Oh.
Sind wir dann hier gelandet.
Das kommt auf die Anwendung an.
Also das ist. Damit stehen nur Fälle.
Linux Server an sich. Ja da gibt es
nicht so viele Tricks. Du musst den Server halt
rebooten. Vor allem wenn es ein Kernel Update ist.
Ich weiß es gibt schon die mehr oder weniger
trickreiche Geschichten, dass du
manche Updates machen kannst. Rolling
auch Kernel technisch. Aber
in der Regel kann man sagen Kernel Update
gleich Reboot.
Also du musst gucken
wie das deine Anwendung verkraftet. Was hast du denn
dahinter stehen?
Also wenn du da mehr oder weniger
stateless Webgeschichten dahinter
stehen hast. Dann ist es ganz einfach.
Dann machst du einen Loadbalancer davor.
Die FW bei Hetzner
ist aber eine stateless Firewall soweit.
Ich weiß nicht. Wurde das geändert?
Gibt es wirklich noch stateless
Firewalls? Kann ich mir gar nicht
vorstellen. Das kann keine stateless
Firewall sein. Dann würde Ping überhaupt nicht
funktionieren. Weil das Antwortpaket
nicht weiß wozu es gehört.
Das muss statefull
sein. Würde mich sehr wundern.
Musst du mal gucken.
Ich kann es dir so nicht sagen.
So aber
Wo sind wir hier? Genau. Mr. Mr.
Ja
haben wir.
Also machen wir mal
ganz schnell einen Überblick.
Wie patcht man am besten einen
Linux Cluster. Wobei
Cluster ist in dem Fall das falsche
Wort. Geclustert ist es
ja nur wenn du verschiedene Nodes hast
die irgendwie miteinander reden.
Hier geht es ja darum du willst
ausfallmöglich
ausfallzeiten optimiert
deine Systeme neu starten.
Und das
einfachste ist du stellst einen Loadbalancer davor.
Oder einen Loadbalancer.
Ein Cluster davor.
Also mal angenommen du hast 10 Webserver.
Was alles relativ stateless
ohne Sticky Sessions oder sonst was.
Ähm.
Ein Loadbalancer davor.
Und da kannst du die Server neu starten
wie du lustig bist. Das ist egal.
Da hast du nur minimale
Sachen die ins Leere gehen.
Das funktioniert.
Bei Sticky Sessions und
irgendwelchen statefull Sachen
wird es ein bisschen komplizierter.
Du kannst quasi erstmal auf
Server Ebene auf Logik Ebene
gucken das dieser Server
keine neuen Verbindungen mehr annimmt.
Und das
die Clients sich zu den neuen Servern
verbinden. Und erst wenn alles auf den neuen Servern ist
kannst du es dann ausschalten.
Kommt aber ganz hart
auf die
Anwendung an.
Ja gut. Das beste ist
5 Minuten warten. 5 Minuten ist glaube ich Standard
Timeout.
Wie man dann einen Loadbalancer patcht? Gar nicht.
Es sei denn du hast ein Loadbalancer Cluster.
Dann musst du es genau machen
wie ich gesagt habe.
Du schwenkst den Loadbalancer.
Wartest bis alle Sessions drüben sind.
Es gibt ja mittlerweile
Loadbalancer die können sogar
TCP Sessions quasi sharen.
Du wartest
bis alle Sessions drüber sind. Oder du hast
halt irgendwie im Big Brain Loadbalancer die
TCP, gesharete TCP Sessions irgendwie haben.
PFSense kann das zum Beispiel.
Und
dann schwenkst du das. Oder
startest den inaktiven.
Schwenkst und startest. Kannst auch
Netscaler nehmen. Was auch immer.
Es gibt noch viel mehr. Wie gesagt
Aproxy kannst du nehmen.
Da gibt es total
viele Sachen. Das kann man so pauschal nicht sagen.
Aproxy ist aber tatsächlich ganz
nice. Aproxy hat auch ein
eingebautes Web Interface wo du gucken kannst
wie viele Verbindungen noch drauf sind.
Ja. Und wenn du
super modern bist. Der Container Way.
Da gibt es noch ganz andere Sachen.
So.
Aber machen wir mal weiter. Wir haben unsere Firewall
angelegt. Passt.
Das kann nicht komplett stateless sein Leute.
Das geht nicht. Das muss statefull sein.
Ich kann euch auch sagen warum.
Guck mal. Ich kann nen Ping machen.
Und nen
Ping. Also entweder bin ich jetzt
richtig oi und ich erzähl euch scheiße.
Oder die Dinger sind statefull.
Damit nen Ping funktioniert
muss es doch eigentlich ne statefull Firewall
sein. Weil. Weil.
Die Antwort
von dem Server.
Muss die Firewall wissen.
Wo
der. Wo die Anfrage herkam.
Und das geht noch mit ner statefull Firewall.
Wenn du ausgehend
Verkehr nicht blockst.
Das stimmt.
Da hast du recht.
Da hast du recht.
Ne stimmt. Muss nicht.
Muss nicht. Du erlaubst ja eh.
Du erlaubst ja eh outgoing
zu überall hin.
Dann ist egal.
Ne dann kann es.
Dann muss es das nicht sein.
Normalerweise muss die Firewall wissen woher der Ping kommt.
Wenn du nicht von überall her erlaubst.
Also stell dir mal vor.
Du erlaubst das dein Server
nirgends wo hin zugreifen kann.
Und also dein Server darf ausgehen
nirgends wo hin Pakete verschicken.
Und
du möchtest dem jetzt sagen.
Wenn nen Ping rein geht. Das ist erlaubt.
Die Antwort auch erlauben.
Und das geht nur statefull.
In dem Fall ist aber egal. Wenn du.
Nichts geblockt hast als Absender.
Ja dann müsste es auch so gehen.
Müsste ich mir nochmal ein bisschen Gedanken drüber machen.
Also ich wüsste nicht.
Wie das stateless funktionieren sollte.
Das ist ja gerade der Witz von statefull.
Dass sowas funktioniert.
Also irgendwo.
Muss ja markiert werden. Hey.
Das ist die Antwort auf das eingehende Paket.
Doch doch doch.
Aber es war. Also.
Der Fall ist ja in dem Fall so.
Du hast in der Firewall geblockt.
Dass dein Server nach außen überhaupt kommunizieren darf.
Theoretischer Fall.
Aber du willst das er pingbar ist.
Das heißt dann stellst du ein.
Und das geht halt nur statefull.
Dann stellst du ein.
Eingehend ICMP erlaubt.
Ausgehend nur.
Related Verbindungen.
Die quasi zu einer vorher schon aufgebauten.
Oder zu einer vorher schon eingehenden gehören.
Das ist ja der Sinn von statefull Firewalls.
Und.
Ich wüsste nicht.
Ob das funktioniert.
Funktionieren sollte stateless.
Keine Ahnung.
Ich muss euch ehrlich sagen.
Ich hab mir da jetzt nicht genug Gedanken drüber gemacht.
Ob das jetzt gehen sollte oder nicht.
Aber ist auf jeden Fall spannende Sache.
Okay weiter im Text.
Wir sind voll hinten dran.
Weiter gehts.
Also wir haben jetzt unseren Server automatisch aufgebaut.
Als nächstes müssen wir irgendwie gucken wie wir da unsere Web Anwendung drauf kommen.
Das related ist dabei ausschlaggebend.
Genau.
Zumindest bei iptables heißt das so. Fragt mich nicht.
Okay.
Also wir haben den Server eingerichtet mit ansible.
Jetzt müssen wir mal gucken was brauchen wir sonst noch.
Ufw können wir uns schenken.
Pakete haben wir installiert.
SSH haben wir neu gestartet.
Ja.
Jetzt müssen wir irgendwie gucken wie wir das.
Jetzt müssen wir gucken wie wir unsere Anwendung drauf deployen.
Das heißt ich würde mal sagen.
Wir legen noch einen neuen User an.
Wir legen einen User für die Anwendung an.
Also.
Wie legt man ansible User an.
Ansible User.
Äh Create.
Übrigens.
Wenn ihr euch auch mal in der Cloud mit einer
Linux VM austoben wollt.
Dann könnt ihr jetzt bei meinem Partner
Hetzner Cloud vorbeigucken.
Und euch 20 Euro Startguthaben
mit meinem Gutschein sichern.
Ausrufezeichen Hetzner im Chat.
Der Sellout war jetzt okay oder?
Vorher hab ich ja ein bisschen
verkackt. Aber der war jetzt okay.
Find ich.
Ne aber ernsthaft ich verwende das selbst schon.
Ob jetzt die letzten 3 Jahre oder so.
Ist für mich.
Gerade weil es ein deutscher Hosting Anbieter ist.
Ist naheliegend.
Du hast zig andere.
Klar.
Aber preis leistungsmäßig.
Und das du 2 Rechenzentren in Deutschland hast.
Macht für mich Hetzner echt sympathisch.
Und brauchbar.
Auch die Speicherpreise sind nicht ultra hoch.
Weil man ein bisschen mehr braucht.
Und wie gesagt 20 Euro Startguthaben.
Mit meinem Code.
Für Neukunden.
Und ich kann jetzt ein paar Monate hier so einen kleinen Server betreiben.
Und euch da ein bisschen austoben.
Hetzner ist echt nice.
Also da kann man sich nicht beschweren.
Ich hätte diese ganze Sponsoring Geschichte gar nicht angenommen.
Wenn ich den Kram nicht selbst verwenden würde.
Ja das wäre so wie wenn ich
Raid Shadow Legends mache.
Mache ich auch nicht.
Also ich kann es euch nur empfehlen mal anzugucken.
Okay jetzt einmal weiter im Text.
Wie kriegen wir unseren Service
Auf den.
Wie kriegen wir kek WSService
Auf den Server kek WSService.
Gut.
Wir machen das jetzt mal ganz einfach.
Ich kopiere es von Hand dahin.
Und danach gucken wir wie wir das ganze mit Unit File und
Ansible noch deployed kriegen.
Ne einen User wollten wir noch anlegen.
Einen User wollten wir vorher noch anlegen.
Alter VMWare du nervst mich hier gerade.
Habe ich das.
Achtung ich habe das Sticky eingestellt.
Ich wollte gerade sagen warum ist das immer wieder da.
Ansible create User.
Manage User Accounts.
Ich brauche einen neuen User.
Hier den App.
Bester Name da weiß man sofort was Sache ist.
User das da.
Perfekt.
Die einfachste User Variante.
Ohne Passwort ohne Login ohne alles.
Okay.
Hier.
Create App User.
Name Pushk15.
Comrade Style hier.
Ne der heißt einfach nur App.
Da weiß man sofort was Sache ist.
App.
Passwort expired nie.
Gibt kein Passwort.
Okay dann führen wir das mal aus.
Wenn man das jetzt übrigens
ordentlich macht.
Müsste man hier noch einstellen so nach dem Motto.
Okay das machen wir nur wenn wir es noch nicht gemacht haben.
Das machen wir auch nur wenn es nicht da ist.
Das kann man abhängig voneinander machen.
Aber who cares.
Ansible.
Das sollte jetzt eh alles ein bisschen schneller gehen.
Oh das ist der falsche
Server. Null.
Das ist der richtige.
Das ist der richtige Server. Stimmt ja gar nicht.
He doesn't know.
He lacks critical information.
Okay.
Restart SSH.
Create User.
Gut.
Wir haben einen User angelegt.
Home App haben wir jetzt.
Sehr schön.
Kann ich auch Sudo App machen?
Was ist denn das?
Old School Shell.
Okay.
Wir haben einen extra User für die App.
Könnt ihr auch alle eine Runde
kekws the service aufrufen gleich.
Postet euch dann die IP
in den Chat wenn es soweit ist.
So ich ersynke das jetzt einfach mal drauf.
Und ich SCP das drauf.
Ist jetzt erstmal egal.
Danach machen wir das mit Ansible. Schön.
Also kekws the service.
Also .net
Publish.
Ach du Scheiße.
Das weiß ich doch aus dem Kopf nicht.
Publish. Haben wir das nicht irgendwo in der History?
Publish.
Ja.
.net. Publish.
Release. Linux.
Ja doch. Selfcontained.
Ist ja nicht verkehrt.
History ist die beste Dokumentation
aller Zeiten.
Äh.
Aviator. Doch. Wir hatten hier schon
ein paar mal DDoS Action.
Da konnte Hetzner aber nur am Rande was dafür.
Da haben sich die Leute irgendwelche polnischen
Botnetze gemietet.
Und fanden das
lustig, dass ich dann 10 Minuten im Stream
was machen konnte. Aber wenn ihnen das Geld wert ist.
Meinetwegen. Sollen sie machen.
Das ist kein Witz. Hatten wir wirklich.
Sachen gibt's.
Ja. Okay.
SCP.
SCP.
Ähm. Die Richtige.
SCP.
Äh. Komm. Bam.
Als Root.
Wir starten das jetzt als Root. Easy.
Einfach nur um zu gucken ob es funktioniert.
Na mit den 300 Viewern kommt Hetzner klar.
Das ist kein Problem.
Aber mit den 50 Milliarden Botnet Anfragen aus
Polen kam es nicht klar.
By the way. Das ist übrigens so wie man es
nicht macht. Per SCP eine Anwendung
rüber kopieren.
Aber zum Testen ist es vollkommen in Ordnung.
Später würde ich es, wenn überhaupt, per R-Sync machen.
Und
der Richtige Weg, den
machen wir dann im zweiten Stream.
Über Github Actions deployen lassen.
Und gleich noch ein paar Tests und gucken ob das
alles funktioniert.
So. Auf.
Gib alles.
Oh ne. Die ganzen Bilder.
Drei Stunden später.
Aber zum Glück sind die Bilder nur
haben wir die Resized und die sind nicht so groß.
Okay.
Gleich haben wir es.
SCP dann später
in der Pipeline.
Ich werde es, wahrscheinlich machen wir es über R-Sync.
Okay.
Beides. Beides.
Beides.
Es haben auch schon Leute den Hetzner Server
gedurst.
Okay. Also. Jetzt haben wir es rüber kopiert.
CagW. Wo ist es?
Ne. Publish.
Publish. Jetzt könnt ihr es gleich mal aufrufen.
Hier. IP.
Vom Server.
CagW as a Service.
Bam. Läuft. Ah ne.
Moment. Local Host. Ich mach doch da jetzt
kein Reverse Proxy vor.
Urls gleich.
http://
Port 5000.
So Leute.
Gappt alles.
Moment. Ich muss mal kurz gucken, ob ich meine
IP leake, wenn ich auf den Server draufgehe.
Ah.
Port 5000.
Von Port 5000 ist in der Firewall ja gar nicht freigegeben.
Okay. Machen wir Port 80.
Machen wir Port 80. Scheiß drauf.
Dann kriegen es auch die ganzen China-Chinesen gleich mit,
dass wir online sind.
Okay.
Die IPs wird nicht geleakt. Okay. Wunderbar.
Also.
Ich mach mal wieder an.
Ja. Wir starten das jetzt.
Wir starten das da ausführen.
Ja.
Da könnt ihr jetzt hin und ihr kriegt alle eine Runde CagW as a Service.
Gebt alles hier.
Wer wollte nicht schon immer
CagW in as a Service?
Gucken, ob ihr irgendwie ein bisschen
nennenswert Last verursachen könnt.
Boah.
Boah.
Geht.
Aber so wirklich viel bei nload. Mal schauen.
Ist ja nix.
Outgoing. Ah. Busy was ist da.
Busy was ist da.
Guck mal ist das jetzt von deinem Dayjob Arbeitszeit.
Ne. Schön wärs.
Schön wärs wenn ich das doppelt bezahlt kriegen würde.
Das wär doch mal geil.
Leute. Wäre es nicht cool.
Ich könnte mich bei der Arbeit streamen.
Dann würde ich Geld von der Arbeit verdienen.
Stream Money von den Subs.
Plus das wär doch mal Massive Brained,
alter.
Wenn das gehen würde.
Eleven Head.
Aber das geht nicht.
Und Massive League. Das stimmt.
funktioniert bei euch wenn ihr wenn ihr da hingeht kriegt kriegt ihr alle schön keck ws service ja
besser microservice überhaupt oder ich würde sagen startup startup verdächtig absolut startup
verdächtig weil dann der börse genau okay sagt okay wir haben jetzt getestet dass es prinzipiell
funktioniert jetzt war das ordentlich gehen wir mal raus hier mal ein simple rein wir wollen das
ganze der reihe nach machen ok leute das habe ich noch nie gemacht ich habe noch nie mit ende
was ordentlich die pläne lady pina ich habe noch nie mit ende ordentlich was die pläne ich würde
sagen wir brauchen einen neuen job für bild bild wir machen so was wir machen ein bild shop wir
machen ein bild shop und wir machen danach dann noch einen die pläne job wir machen setup hat man
wir machen setup
das sollte man unterschiedliche dateien machen wahrscheinlich bei ansie will kann man das glaube
ich auch irgendwie taggen nicht mehr erreichbar ja ich habe ausgeschaltet was sie beten die bilder
sind nicht transparent doch doch die müssten transparent sein der browser zeigt dass du nicht
richtig an aber die müssten transparent sein ok bild und dann brauchen wir noch einen weiteren
job nehmen die pläne in disco des transparent ja perfekt zumindest der nächste tag ich weiß es nicht
genau aber ich trieb ja zwischendurch auf jeden fall noch ein paar mal und dann kann man das
ausprobieren kann ich euch das kann ich euch das zeigen wenn ich das mache muss man muss ich mir
ausdenken also so bild wie machen wir das bild lass mal überlegen wie mache ich denn das bild von hand
ich mache dort net publish ab licht selbst content also so jetzt war also wie sieht mein bild shop aus
wie kann man ansie will lokal command machen
das zeigt man ja
lokal action habe ich nicht verstanden wie geht das jetzt lokal action lokal action bild da kann
man doch bestimmt auch schnell nehmen ok also bild wir kommen hier diesen ganzen schmodder
maus weil das haben wir jetzt schon gemacht später brauchen wir das wenn man neuen server
installieren aber okay bild
da muss jetzt bestimmt auch wieder diesen ganzen mist hier dabei kopieren da merke ich immer wieder
ich mit ansie bis zu wenig macht aber er soll es ja lokal ausführen ok lokal action bild bild app
das ist nicht command shell schon mal nach rohr kommen sie aber so bis zur funktionieren und jetzt
sage ich einfach cd 1 drauf in den ordner keck wse service weil das heißt ja hier so guckt hier
11 hoch weg wse service und da mache ich jetzt mein dotnet bild drin also hab ich guck ob das
funktioniert da bin ja mal gespannt so und von der idee her müsste das mein bild command sein
das machen wir dann wie gesagt den nächsten stream bei github actions aber ich habe das noch nie über
ansatz gemacht mal gucken wie das funktioniert ich führe das mal aus bild remote user bei lokalen
actions macht das sinn ehrlich gesagt nicht hast du recht ich weiß nicht ob vielleicht braucht man
das ja aber nämlich man braucht das braucht man nicht okay dann kann man das alles weglassen
jetzt kann ich auch haus zweck lassen vielleicht okay okay jetzt haben ein bild ein bild angestoßen
lokal kann man ausbringen ob das funktioniert aber neustadt auf wo sind wir hier wir sind in repos
keck wse service m- bin wir löschen war den den den output bei output folder und lasst nochmal
ein bild laufen und gucken ob das jetzt funktioniert
Bin, jawohl
Funktioniert
Okay, lokales Bild, funktioniert
Jetzt ist unsere Anwendung gebaut
Mehr brauchen wir da wahrscheinlich
An der Stelle gar nicht
Jetzt können wir es deployen
Deploy host
All
Wie gesagt, ich weiß, dass es nicht die schöne Ansible Art ist
Das so alles in einer Datei zu machen
So, Tasks
Wie kriegen wir den Kram jetzt rüber
Auf den Server
Nicht per SCP auf jeden Fall
Das wäre zu 3-Head
Das mit SCP rüber zu kopieren
Am besten wäre so eine Art
Am besten wäre so eine Art
R-Sync oder sowas
It-Klon
Kann ich nicht machen, weil ich es nicht
Achso, doch, ich hab es ja im Repo
Aber ich
Hab es ja nicht im Repo mit
Ne, ne, das bringt nichts
Ich bilde das ja lokal
Ich hab ja die Binaries nicht drin
Ich müsste ja dann quasi .NET auf dem Server noch installieren
Und dort den Build machen
Was kontraproduktiv ist, weil
In Zukunft mach ich das nächste Mal ja über GitHub Actions
Wo das gebaut wird
Also ich brauch das ja
Ich brauch lokal kein .NET auf dem Server
Weil ich quasi eine Self-Contained-Application bauen lasse
Die auch ohne .NET läuft
Also
Tasks
Deploy
Gut, wie macht man ein R-Sync mit Ansible
Ansible R-Sync
Bam
POSIX Synchronize
Das klingt schon mal
24-Head, Alter
Hat auch 25.000 Optionen
Äh
Was
Source, Dest, Recursive, No
Okay, wir copy-pasten das jetzt mal
Also
Tasks
Äh
Copy
App
Besserer Name
Es soll von
Von
Diesem Verzeichnis
Äh
Soll er kopieren
Oh Gott, wo hab ich
Wo liegt denn das
Äh
Moment
Hör mal hier
Äh
Wo liegt denn das
Äh
Bin
Mach ich mal nochmal ein Publish
Zeig dir mir doch an
Wo das
Wo die Anwendung drin liegt
Hier, das da
Das will ich kopieren
Publish
Kek W
As a Service
So
Hoffentlich ist das jetzt der richtige Pfad
Eins hoch
Kek W
As a Service
Bin
Release
Dotnet 5
Linux Publish
Das will ich kopieren
So
Und zwar
Destination auf dem Server
Soll das jetzt
Wir haben extra
Guck mal
Wir haben extra
Einen eigenen User dafür angelegt
Home App
Normalerweise würde ich das kopieren
Irgendwie unter
www
www
äh
war www
oder sowas
Okay
Ähm
Es gibt auch einen Rapper
Das hab ich doch hier schon
Ähm
Hab ich schon
Entdeckt
Matt
Wie
So
Destination
Das ganze nach Home
App
Äh
Kek W
As a Service
Recursive
Yes
Das ist ja ein Ordner
Vermute ich mal
Recursive
Was macht Archive
Äh
Simling
Brauchen wir nicht
Delete
Delete
Remote
Wenn es was nicht gibt
Ja das ist tatsächlich nicht verkehrt
Delete
Yes
Erst und gelöscht
Standardmäßig erstmal immer nur Remote
Also da muss man keine Angst haben
Dass lokal was wegfliegt
Ich würde fast sagen
Dass
Die Chance besteht
Dass das so
Funktioniert
Schauen wir mal
Mal gucken ob der jetzt deployed
Task Build
Task Deploy Copy App
Okay
App
Da sind wir schon mal
Kek WS Service
Okay der kopiert noch
Der kopiert noch
Steht das so im Backlog
Klar ich hab extra ein Kanban Board angelegt davor
Guck mal hat funktioniert
Hat die App deployed
Und sogar
Guckt mal
Oh das ist nice
Guckt mal der hat die Gleichstimmigkeit
Und auch das ist super
Das ist super
Das ist super
Das ist super
Das ist super
Das ist super
Das ist super
Das ist super
Das ist super
Das ist total
Und bestimmt
Nicht
Return Nil
Warum
Dann
Wieso
Warum
Warum
Warum
Warum
Warum
Warum
Warum
Warum
Warum
Warum
Warum
Warum
Warum
Warum
Warum
warum
Warum
Warum
为什么
Warum
Warum
So, das war es jetzt. Das ist wirklich einfach. Guck mal, wenn ich jetzt deployen will, lasse ich einfach eine neue Version bauen und lasse es auf den Server schieben. Und das Kopieren geht auch schnell, weil es rsync ist. rsync macht ja nur den Diff.
Mal kurz gucken, ob das mit dem Delete auch funktioniert. Er sollte jetzt eigentlich 1, 2, 3, 4 die Datei löschen, weil ich sage ja hier, synct die Quelle mit dem Ziel und lösche beim Ziel alle Dateien, die nicht in der Quelle vorhanden sind. Mal schauen.
Ja, funktioniert. Pock. Easy.
Wie Anwendung durchgehend laufen lassen. Ja, jetzt kommt der Pfeiffer-Teil.
Aktuell.
Dann müssten wir die Anwendung ja noch von Hand immer starten.
Also ich müsste jetzt immer sowas machen. Wir machen jetzt einen System D-Service draus.
Da muss ich aber nachgucken.
ASP.NET Core System D.
Guck mal, hatten wir sogar schon mal offen. Ich brauche hier ein Beispiel-Unit-File.
Sowas hier. Ja, genau.
Okay.
Und das kopieren wir da natürlich auch per Ansible drauf.
Also ihr seht schon, der Vorteil davon ist, wenn ich jetzt neue Services oder neue App-Server brauche,
dazu.
Stellt euch mal vor, Keck WS Service wird das nächste Multi-Millionen-Startup.
Und ich habe von 5 Usern heute zu 5000 Usern morgen, 50.000 User in einer Woche und 500.000 User in einem Monat.
Da muss ich ja skalieren.
Horizontal, vertikal, diagonal. Da muss skaliert werden.
Vorher gehe ich mit KLS noch auf den Mount Everest, dass ich Bescheid weiß, wie man ordentlich skaliert.
So, und dafür ist das natürlich wunderbar.
Da kann ich easy, jetzt ohne Container-Stells oder sonst wie, da kommen wir im dritten Stream zu,
einfach ganz viele Server hochziehen und einen Load-Balancer da vorstellen.
Das ist eigentlich eine richtig coole Sache.
Okay, wir müssen ein Unit-File machen.
Jetzt wird's kompliziert.
Moment, was habe ich denn da gemacht?
Jetzt, jetzt, jetzt wird's Sixhead.
Name.
Name.
Wie kann man das jetzt mit Unit-File?
Name.
Create.
Tag WS Service.
Unit-File.
Boah, das weiß ich nicht.
Ansible.
Inline-Content-File.
Line-File, Block-File.
Is it possible to include file content in the playbook?
Genau.
Copy.
Ja, genau.
Genau sowas will ich machen.
Also.
Das heißt, ich sag jetzt, copy, ne, richtig, copy, content, wir machen erstmal die Destination.
Dest, äh, wo müssen denn Unit-Files hin?
ETC, System D, glaube.
Äh, äh, where put custom Unit-Files?
Ich sag euch Leute, wie im letzten, googeln ist der wichtigste Skill überhaupt.
Ihr müsst wissen, wie ihr danach sucht.
I have a custom, äh, äh, Unit-File.
User lib, System D, was, nein, es ist, es muss ETC sein.
Hier, best place to put system Unit-Files, ETC, System D, System.
Alles klar.
Also, ETC, System D, System.
Bam, da sind sie alle.
Wobei, da wird das eigentlich nur verlinkt.
Aber, scheiß drauf.
Ich mach das hin.
Was wird das nächste Video sein?
Wahrscheinlich Battlefield.
ETC, System D, System.
Und jetzt muss ich das Ding irgendwie, irgendwie benennen.
Äh, irgendwie Punkt Service oder so, ne.
Okay, Punkt Service.
Also, das heißt, das Ding heißt jetzt,
Hack W, S, äh, Service, Punkt Service.
Und jetzt Content.
So, Multiline Content.
Ah, ich hab vergessen, was es war.
Tilde?
Nee.
Pipe.
Content, Pipe und jetzt einfach so?
Ob das funktioniert, da hab ich da so meine Zweifel.
Das funktioniert doch im Leben nicht.
Das kommt doch im Leben so nicht auf dem Server an.
Garantiert nicht.
Okay, schauen wir mal.
Also, Description, Description ist natürlich was sonst.
Hack W, S, Service.
Working Directory ist Home.
Äh.
Äh, App.
Hack W, S, Service.
X, X, Start ist Home.
Hack, die, die Namen will's.
Ist Home.
Hack W, S, Service.
Hack W, S, Service.
Minus, Minus, Urls.
Äh, HTTP.
Doppel Punkt 80.
Ne, der soll ja, der soll ja am Interface lauschen, dass alle drauf zugreifen können.
Restart Always ist okay.
Restart Zach ist auch okay.
Kill Signal Int.
Ach, was weiß ich.
Syslog, wie das im, wie das im Log auftauchen soll.
Hack W, S, Service natürlich.
Äh, User ist App.
Environment.
Production, das lasse ich einfach mal so stehen.
Okay.
Mal gucken, ob das funktioniert.
Mal gucken.
Ich, ich führe es mal aus.
Äh, wir brauchen noch ein Reload.
Wir brauchen noch ein Reload von Unit, von Unit Files.
Egal.
Ich, ich, ich führe es erstmal aus und gucke, ob es funktioniert.
Oh.
Nein, Syntaxfehler.
But why?
Muss ich das eins weiter einrücken?
Ah, yes.
Outplayed.
Okay, das hat jetzt, okay.
Meint ihr das?
Okay, ETC, System D, System.
Und jetzt haben wir ein Hack W, S, Service, Service.
Hack W, S, Service, Punkt Service, Service File haben wir jetzt.
Alles klar.
Exquisite.
So, das ist natürlich die Frage.
Mal gucken, ob das funktioniert.
System, CTL, Status, Hack W, S, Service.
Oh, oh, oh, oh, der erkennt es.
Pass mal auf, pass mal auf.
Start.
Was?
Root?
Ach so.
Ja, natürlich, das muss man als Root machen.
Ist ja logisch.
Na klar.
Ähm.
Moment, sag bloß, das funktioniert nicht.
Das kann nicht funktionieren.
Start.
Ne.
Code.
Oh.
Wait a minute.
Wait a minute.
Ich bin verwirrt.
Start.
Okay, ich hab's.
Killed?
Was hab ich falsch gemacht?
Warum mag er nicht?
Disable, okay.
Läuft er vielleicht noch?
Ne.
Okay, Journal, CTL, minus XE.
Hack W, S, Service, failed.
With result, Signal.
Alles klar.
Jetzt weiß ich ja sofort Bescheid.
Äh, warum?
Warum?
Warum?
Warum?
Warum?
Warum failt das?
Zeig mal her.
Ordner stimmt doch.
Hack W, S, Service.
Home, App, Hack W, S, Service.
Das ist ein Erlehnungsvermögen.
Das ist ein Server bei Hetzner in der Cloud.
So, und jetzt mach ich folgendes.
Hack W, S, Service, Pools.
Ah.
Ich mach irgendwas falsch.
Mission, deny.
Ach, das geht auf Port 80 ja nicht.
Ich bin ja kein Root.
Äh.
Gibt's die Möglichkeit, sich zu verändern?
Sich zu Binden und dann die Privilege zu droppen, irgendwie?
Nee, wahrscheinlich nicht.
Okay, da muss ich mir jetzt was anderes ausdenken.
Wir machen jetzt Port 5000 und gucken, ob's dann funktioniert.
Status.
Start.
Ah.
Start.
Oh.
Ich muss reloaden, sagt er.
Äh.
Ja, ja.
Start.
Ah.
Jetzt läuft's.
Jetzt läuft's.
Netstat.
5000.
Ja, jetzt funktioniert's.
Da muss ich in die Firewall.
Da muss ich in die Firewall und mal Port 5000 freigeben.
Firewall, TCP, Port 5000.
Und jetzt können wir auch ausprobieren, ob's funktioniert.
Hack W, S, Service.
Bam.
5000.
Zack.
Das ist sogar, ist mir ehrlich gesagt so lieber.
Ich will's später auf Localhost laufen lassen.
Mit einem Reverse-Proxy für Zertifikate davor und sowas.
Okay, funktioniert.
Nice.
Äh.
Ambient Capabilities.
Cap Netbin Service.
Oh, hier kommt der, der Big Brain.
Das ist, äh, System D.
Ja, nice.
Nice.
Das wird's wahrscheinlich sein.
Weil, dann macht er das als Root mit dem Binden und danach droppt er Privileges.
Mal schauen, mal schauen, ob das so funktioniert jetzt.
Reload.
Reload.
Achso.
Ah, dann muss ich das nochmal deployen.
Reload.
Gucken, ob das jetzt, ob das jetzt funktioniert.
Wenn man jetzt anfängt, Deployment zu nehmen, einfach Docker anschauen.
Kommt drauf an, was du machen willst.
Da gibt's, es gibt erst mal nix prinzipiell, wo man sagen muss, ähm, es ist immer überlegen,
aber Docker zu kennen ist ganz gut heutzutage, ja.
Erstens hilft's dir beim Entwickeln und zweitens, wenn du später im Serverbereich bisschen
Container-Gekrams, äh, Gedöns machen willst.
Dann kannst du, dann kannst du, dann kannst du, dann kannst du, dann kannst du, dann kannst
du, dann kannst du, dann kannst du, dann kannst du, dann kannst du, dann kannst du, dann kannst
du, dann kannst du, dann kannst du, dann kannst du, dann kannst du, dann kannst du, dann
kannst du, dann kannst du, dann kannst du, dann kannst du, dann kannst du, dann kannst
du, dann kannst du, dann kannst du, dann kannst du, dann kannst du, dann kannst du, dann
kannst du, dann kannst du, dann kannst du, dann kannst du, dann kannst du, dann kannst
du, dann kannst du, dann kannst du, dann kannst du, dann kannst du, dann kannst du, dann
kannst du, dann kannst du, dann kannst du, dann kannst du, dann kannst du, dann kannst
du, dann kannst du, dann kannst du, dann kannst du, dann kannst du, dann kannst du, dann
kannst du, dann kannst du, dann kannst du, dann kannst du, dann kannst du, dann kannst
du, dann kannst du, dann kannst du, dann kannst du, dann kannst du, dann kannst du, dann kannst
Erstens hilft es dir beim Entwickeln und zweitens, wenn du später im Serverbereich ein bisschen Container-Gedöns machen willst,
dann sind so die Docker Basics nicht schlecht.
Es muss einem halt klar sein, unter der Haube ist das alles das Gleiche.
Egal ob, also ich rede jetzt vom reinen Container-Anteil, egal ob es Potman, Kubernetes, Docker, was auch immer ist,
die verwenden alle die gleichen Sachen für Container im Kernel.
Das User-Interface ist anders und natürlich das gesamte Ökosystem und das Skalieren und die Orchestration-Geschichten,
das ist natürlich komplett anders.
Aber die eigentliche Sache, die Kernel-Funktionen, das ist alles das Gleiche, egal was man verwendet.
Das heißt, man muss immer sehen, sei es Docker, Potman, Kubernetes oder ein selbstgebasteltes Programm,
verwenden alle den gleichen Kram unter der Haube.
Okay, jetzt machen wir mal System-Status-Restart.
Status, Status, ob das jetzt funktioniert mit dem Port?
Ne, 5000, stopp.
Reload.
Ach, ich habe ja da immer noch 5000 drinstehen, ich kack nur.
Guck mal hier, meine Güte.
Nix kann man machen lassen, hä?
So, reload und jetzt start.
Restart meinetwegen.
Status, status.
Bam, nice.
Jetzt geht es auch auf Port 80.
Siehst du, wieder was gelernt.
Der System-D-Boss war am Start.
Können wir wieder Port 5000 aus der Firewall rausschmeißen.
Nice.
Siehst du, wieder mal was gelernt.
Man kann reinschreiben, Ambient Capabilities, Capnet Bind Service.
Alles klar.
Excellent, excellent.
System-D ist ja schon noch so ein bisschen holprig.
Kann man den Port als Variable in der Ansible-Config angeben?
Könntest du machen, ja.
Könntest du machen.
Letztendlich will ich das später eh nicht so haben, sondern es soll Localhost lauschen mit einem Reverse-Proxy davor.
Aber für jetzt ist das erstmal okay.
Okay, jetzt fehlen uns noch ein paar Kleinigkeiten, dass das gut funktioniert.
Als erstes würde ich sagen, wir müssen noch in unserem, ja das können wir so lassen, in unserem Deploy-Job sollten wir noch einbauen, Service stoppen und starten.
Service.
Service.
Ja.
Also CAC WS Service stoppen und starten.
Heißt von der Idee her, wir deployen eine neue Version und danach sagen wir, ähm, Stop.
CAC WS Service.
CAC WS Service Stop.
Ähm.
Oder nicht, nicht Stopped muss es sein.
Stopped.
Äh, dann sagen wir noch Enabled.
Yes.
Yes, dass es beim Start automatisch hochfährt.
Enabled.
Yes.
Und Reload, wie auch immer das geht.
Ansible Service.
Weil es könnte ja sein, dass wir ein neues Unit-File deployt haben.
Reload.
Reload?
Wie Demon?
Demon Reload?
Ne.
Demon Reload.
Ne, ne, nicht Reload.
Ich will die Unit-Files selber reloaden.
Reload.
Reload.
Ah, hier.
Ah, okay, jetzt kann ich es nicht mit Service, mit dem Service-Wrapper machen.
Ich muss jetzt direkt...
...sagen System-D.
Okay, verstehe.
Also.
Stop CAC WS Service.
Name CAC WS Service.
State.
Äh, Stopped.
Stopped.
Und jetzt muss ich sagen Reload.
Demon Reload.
Reload, yes.
Dass der auch die neuen Unit-Files einliest.
So, und danach das Ganze starten.
Start.
Start.
Start CAC WS Service.
Warte mal.
Enable and Start.
Weil wir machen hier Enable gleich Yes, falls das geht, dass das automatisch neu startet beim, beim Reboot.
Gut.
So.
State.
Started.
Gut, von der Idee her, da sollte jetzt eine neue Version deployen, stoppen und starten.
Das ergibt Sinn.
Mal gucken, ob das auch funktioniert.
Deploy.
Bam.
Ich mach erst mal einen Stop.
Jetzt hier einen Status.
Ah, es ist aus.
Enable CAC WS Service.
Und jetzt, Leute, das funktioniert.
Das ist ja geil.
Guck mal, da, also viel einfacher kann es jetzt ja nicht mehr gehen.
Jetzt kann ich mal den ganzen Krempel hier wieder, wieder einkommentieren.
Den wir zwar nur einmalig brauchen, aber sei's drum.
Jetzt habe ich mit einem Kommando den kompletten Server auf den aktuellen Stand gebracht.
So.
Was ist denn jetzt los?
Ne, ich könnte nicht reloaden, weil ich will ja explizit hier.
Oder ich weiß nicht, ob das geht.
Checkt der das mit Demon Reload, auch wenn ich hier restartet oder so mach?
Muss ich mal ausprobieren.
Ah, sehr nice.
Sehr nice.
Okay.
Au.
Billt.
Jetzt baut er lokal die App.
Er stoppt den Service.
Okay, restart.
Rest voice.
Restart.
Und mal Restart.
Das heißt, wenn ich jetzt Status mache.
Da, jetzt geht das'm.
So.
dann ist der Kram auch ab seit 7 Sekunden.
Das funktioniert.
Nice.
So, also 60, 5.
KQS Service ist wieder da, Leute.
Euer Lieblings-Startup ist wieder verfügbar.
Ja, wunderbar.
Da haben wir doch richtig, richtig was gemacht jetzt schon, Cooles.
So, und das richtig Nice daran ist jetzt,
ich könnte einfach einen zweiten Server machen
und sagen, baue mir den Server so auf
und er funktioniert einfach.
Richtig nice, oder?
Ja, ich gehe einfach von außen.
Das Unit-File wird sich reloaden.
Das ist äußerst nice.
Okay, lass mal kurz überlegen.
Müssen wir noch irgendwas machen?
Server erstellen haben wir gemacht.
Ansible-Kram haben wir auch.
Ja gut, wir müssen mal testen,
ob es überhaupt noch funktioniert.
Wir müssen mal testen,
ob es überhaupt noch funktioniert.
Ich mache jetzt mal eine Änderung.
Ja, ja, ich truste alles hier.
Bam, alles wird getrusted.
So, wir machen jetzt mal eine Änderung und deployen die.
Das schauen wir mal, ob das, wie gut das funktioniert.
Äh, wie kann ich denn jetzt eine Änderung machen,
die möglichst offensichtlich ist?
Okay, ich returne nicht File.
Ich returne, okay, also anstatt einem Bild
bekommt ihr jetzt einen Text, wo KeckW drinne steht.
Soweit von der Idee her.
So, und ich muss nichts anderes machen,
außer den Source-Code ändern,
lokal ausprobieren, habe ich schon gemacht.
Gehen wir einfach mal von außen, dass es geht.
Und jetzt, jetzt führe ich meine Einzelbild-Geschichte an.
So, jetzt sieht meine Einzelbild-Geschichte aus.
Und er sollte komplett bilden, deployen,
hinschieben, restarten.
Gucken wir mal.
Noch ist es das alte.
Install Packages, ja, ja, bla, bla, bla.
Das könnte man ja auch rausnehmen.
Oh, create service file, okay, build.
Jetzt baut er die neue App.
Copy App.
Copy App geht schnell, weil er synced.
Commit, ja, Commit mache ich gleich.
So, und jetzt?
Easy, Leute.
Also, einfaches Update,
Build und Deploy kannst du nur wirklich nicht machen.
Zack, und jetzt ist das Ganze wieder rückgängig.
Rückgängig.
Mist, falsche Version.
Neu deployen.
Gut, diesen Mist könnte man echt noch rausmachen,
dass man einfach nur sagt,
one time, wenn der Server neu ist,
oder sowas.
Kann man?
Kennt sich jemand mit Ansible aus?
Könnte ich sagen,
nur,
nur,
nur einmalig oder sowas?
one time oder weil diesen mist kann er sich ersparen im endeffekt der anderen seite viel
lange dauert das ja auch nicht so und jetzt hat er neu gestartet schon jetzt haben wir
wieder bilder ist das nicht nice also also also einfacher geht das mit bild deploy wirklich jetzt
nicht außer vielleicht man hat schon einen fertigen irgendwie container cluster wo man
einfach direkt geht push machen kann das ist cool okay jetzt mal noch mal kommt dass ihr euch das
alle angucken könnt im schiff habe ich will kein kein hetzer geduld hier einbauen weil ich will
ja nicht bei jedem ausführenden neuen server anlegen widerspricht dem grundgedanken von
ansatz warum hast du dieses team die und nicht als einzelner teil kopieren wird dann hat dass
ich alles in einer datei stehen habe macht das updaten doch mit korn naja will ich nicht weil
ich will ja wenn ich den server neu aufbauen
jetzt instant erst mal updaten ach so meint michi dank für den sap du meinst dass man was
das bild widerspricht dem dem gedanken weiß nicht dass so also erst mal ein schritt schritt kommt
da brauchen wir jetzt erst mal noch ein kit ignore file geht ignore geht ignore und da soll rein meine
ganzen bayerisch weil die will ich gar nicht
nicht nicht auf auf schitter packen so objekt bin auch irgendwas
habe ich jetzt richtig gemacht
geht ignore ist am start so passt mehr brauchen wir nicht geht status geht minus
und jetzt sind wir mal nett wir
schmeißen dieses komische commit hier weg geht kommt geht kommt mit minus a minus am end und sagen
nicht lul weh sondern ansatz ist rock ich habe auch die ganzen bilder eingecheckt lol ja gut
warum nicht die braucht man ja dafür also server jamme habe ich irgendwelche habe ich irgendwelche
geheimen secrets committed lasst mich mal kurz checken ich glaube nicht ich wüsste nicht wo es da
was gibt
was gibt es hier in schweizerland
so die ganzen bilder index das könnte ich nur löschen ab settings startup很好
nur setze ich selbst passt passt passt passt okay geht status alles klar geht push push
bush bam so hat wird geupdatet
Also jeder, der schon immer mal sein eigenes
Keck-WSS-Service laufen lassen wollte,
kann das jetzt machen.
Der einzige Source-Code, der nennenswert
was drin steht, ist ja die Datei.
Alles andere ist ja Default.
Das ist ja wirklich die einfachste Web-Anwendung
aller Zeiten, die es hier irgendwie gibt.
Ja, das ist nice.
So, und wisst ihr, was wirklich
richtig cool da dran ist?
Ich zeige das jetzt nochmal in Action.
Weil ich glaube, man hat es immer noch nicht so genau verstanden,
was der Vorteil davon jetzt ist,
das von der Hand zu machen.
Stellt euch mal vor, ich mache noch einen zweiten Server.
Ich lege jetzt noch einen zweiten
Server an hier.
Keck-WSS-Service-NG.
Ich lege einen zweiten Server an.
Weil
Keck-WSS-Service ist einfach so krass
beliebt, dass
mit einem Server komme ich nicht hinterher.
Der ist zu ausgelassen.
Ich brauche noch einen zweiten Server.
So, zweiten Server angelegt.
Ansible ausführen.
Ansible ausführen auf dem zweiten Server.
Warten, bis es durchläuft.
Und danach
einfach auf dem zweiten Server
Keck-WSS-Service aufrufen.
Was es noch nicht gibt, weil es noch nicht fertig ist.
Run once.
Oh, das ist cool.
Manche Sachen will ich wirklich nur einmal machen.
Ach ne, das geht, wenn es verschiedene Hosts sind.
Das ist was anderes.
Ist bei der Serveranlage Python direkt drauf?
Ja. Firewall nicht vergessen.
Brauche ich nicht, weil standardmäßig ist ja keine
Firewall davor.
Muss ich nichts anpassen.
So, neuer Server. Der geht jetzt da drauf.
Macht
Package-Updates
und danach bildet er und
deployt er die App.
Mal gucken. Jetzt sehen wir auch, ob es auf dem
neuen Server reibungslos funktioniert.
Auf was für einem Server deployst du das?
Mach mal Ausrufezeichen Hetzner im Chat.
Ich deploy das
bei Hetzner in die Cloud.
Wo es relativ
günstig schon
virtuelle Linux-Kisten gibt.
Ganze geht los bei 3 Euro.
Ihr könnt euch übrigens
jetzt auch 20 Euro Startguthaben sichern,
wenn ihr den Link hier im Chat verwendet.
Mit meinem Code.
Kann man bis Ende des Jahres, glaube ich,
einlösen. Und da könnt ihr euch selbst
ein bisschen austoben.
So, ok. Copy App macht er jetzt.
Ja, die kleinen Server werden
mit IPv4 bald einen Ticken teurer,
weil es immer knapper wird.
So, Copy App.
Das dauert jetzt ein bisschen länger, weil er irgendwie
100 MB erstmal hochkopieren muss.
So, Restarting Keck WSService.
Ok, jetzt kommt der Moment
der Wahrheit.
Bäm! Leute, zweiter Server
up and running. Wir mussten nix
machen. Wir mussten nix machen. Guck,
schon haben wir zwei Keck WSServices
am Start. Ist das nicht
nice? Das kann nur noch
getoppt werden von irgendeinem
containerisierten Deployment mit Loadbalancer
davor. Guck mal, jetzt haben wir doppelt
Keck WSService. Das ist
dann quasi Keck Quadruple
USService. Ne, Nginx
und Loadbalancer davor machen wir
das nächste Mal. Das machen wir heute nicht mehr.
Ich find das richtig nice.
Ich find das richtig nice, ey.
Ha, guck hier.
Neuen Server erstellen. Zack.
Hier die IP reinhauen.
Bald ist ein neuer Service da.
Also viel schneller, besser kann das
gar nicht mehr funktionieren. Guck hier,
neuer Server erstellt. Bäm, IP reinkopieren.
Playbook ausführen. Ok,
ich war zu schnell, der Server ist noch nicht oben.
Ähm, also viel
einfacher und besser geht das jetzt nicht mehr.
Genau, das machen wir, also
in, in, äh,
Stream Nummer 3 machen wir ein bisschen Containerstells.
Ich bin mir nicht sicher, ob wir da
wirklich irgendwelchen Kubernetes-Kram machen. Da bin
ich jetzt nämlich auch nicht der absolute Pro drinne.
Ich mein, ich kann Sachen da deployen,
stoppen, starten und was auch immer.
Aber so der Wahnsinnskenner bin
ich da jetzt auch nicht.
Ist auch so ne Wissenschaft für sich. So.
Install Packages.
Ne, Swarm ist
depicated. Auch wenn der Hersteller
sagt, es ist nicht depicated.
So, gleich ist es durch. Ich mein,
guck mal, wir haben jetzt innerhalb von 2 Minuten
2 Server hingestellt.
Mit lauf, lauffähiger
Anwendung drauf.
Also so kann man das schon ordentlich skalieren, auch
ohne Containerkram. So, guckt. Bäm.
Port 80, zack.
Schon haben wir 3 Server, CAC WSS
Service. Und das tolle an
CAC WSS Service,
deswegen solltet ihr euch jetzt schon mal,
äh, schon mal paar Aktienpakete
sichern, ist, dass es komplett
stateless, voneinander, horizontal,
vertikal und diagonal
skaliert.
Oh, habt ihr gesehen, wir haben den CAC WSS getroffen,
der, der richtig, richtig
rotiert war.
Ist es nicht nice.
Doch, das, das gefällt mir richtig gut.
So, bei der Gelegenheit,
jetzt nochmal kurz Server löschen.
Das ist übrigens auch das coole, ich kann die Server
jetzt löschen, dann kosten sie mich
nix mehr und wenn ich sie wieder brauch,
innerhalb von 2 Minuten neu aufbauen.
Moment, Leute, eins, ich probier, ich
probier jetzt mal was aus. Ich will das
nochmal ganz, ich will das nochmal schnell verskripten.
Das dauert nur 2, 3 Minuten, glaubt das natürlich.
Ich lösch, ich lösch den ganzen Krempel jetzt mal wieder.
CAC WSS
Service. Ich mach jetzt, ich mach jetzt,
äh, äh,
die, Copanetes Light,
ne, stimmt ja nicht. Das hat ja mit, mit
Container nix zu tun. Aber ich könnte
doch, guckt mal, ich leg den neuen
Server an, dann krieg ich
am Ende da raus, IPv4.
So,
Moment, Moment, Moment, Moment, Moment, jetzt.
Fifat Mode, richtiger
Fifat Mode, das, das müssen wir uns jetzt ausbrennen.
Ähm,
wir nehmen einfach die letzte Zeile.
Wie, wie ging letzte Zeile?
Tail minus n, 1?
Moment, das muss ich jetzt mal ausprobieren.
Echo minus e,
1, 2.
Tail
minus n, 1.
Jawoll.
Tail minus n, 1.
Äh, Cut.
An, an Doppel, an, an Punkt.
Pell 2?
Okay, das muss ich jetzt mal
ausprobieren, ob das funktioniert.
Jetzt, jetzt kommt Massive,
Massive Fifat. Mal gucken, ob das funktioniert.
Okay, okay. Wobei,
ich mach's, glaub ich, besser am Leerzeichen.
Achso.
Ah, ja, ja. Ja, ja, ich lösch,
ist ja gut. Ich lösch, ich lösch's
ja schon wieder. Ich lösch's, ich lösch's.
So. Das muss ich jetzt, das muss ich jetzt
ausprobieren. Dann scalen wir das
jetzt auf 10 Stück hoch. Einfach, einfach,
weil's geht.
Okay, wunderbar.
So, und jetzt muss ich auch den Namen ändern.
Wieder löschen, zack.
Okay, ähm.
Also.
Vor, i, in.
Äh, keine Ahnung, 0 bis 10.
Ich glaub, so viel darf ich gar nicht anlegen.
Ich bin mir gar nicht sicher, wie viel ich in einem
Projekt anlegen darf. Machen wir mal,
machen wir mal 4. Machen wir mal 4.
Nee, ich bekomm keine Mails,
weil ich Keys verwende.
So, kek, w, s ist Service.
Hier.
Cut.
Done.
So, jetzt leg ich Server an und jetzt will
ich danach das bei
Ansible, über Ansible ausführen.
Also, sagen wir
jetzt.
Äh, do hab ich vergessen.
Ansible. Hier, Ansible
Playbook.
Ansible Playbook.
Warte mal, warte mal.
Ansible Playbook. Hier, hier kommt die IP rein.
Also,
das, das da.
Das da.
Hier.
Rein.
So, Six Head Time, Leute.
Gucken, ob das jetzt funktioniert.
So, wenn
das jetzt stimmt, was ich da gemacht hab,
nen Sleep.
Ja, nen Sleep sollten wir machen, weil der Server sonst
nicht hochgefahren ist.
Das stimmt.
Wo mach ich denn jetzt den Sleep rein?
Ah, for Ian. Ah, nee, das
mit dem Sleep funktioniert jetzt nicht richtig.
Okay, Moment, Moment. Kommando
zurück. Wir machen das anders. Wir schreiben das in ne Variable
rein. Äh,
IP gleich.
So machen wir das. IP gleich.
Sleep eins
oder Sleep fünf.
IP ausgeben.
Und jetzt kommt der Ansible-Stelz.
Ob das jetzt funktioniert, Leute, was ich da zusammen gewurstet
hab.
Das hab ich, das hab ich früher täglich gemacht.
So, so Bash-Geschichten hier.
Dollar
IP.
So.
Ja.
Ergibt das Sinn, was ich da programmiert hab?
Also, null bis drei.
So, IP Hetzner Cloud anlegen.
Äh, Service
benennen mit dem aktuellen Schleifen
Durchlauf. Du hast das
i vergessen. Ah, for
Ian. Äh,
Tail Cut Echo IP Sleep
fünf und dann das Playbook laufen lassen.
Okay, von der Idee her sollten wir
jetzt gleich vier
Service am Start haben. Oh.
Äh. Ah.
Du. Schauen wir mal.
Das könnte man übrigens parallel
machen lassen. Der Desktop
ist i3, ja? Also halt ohne, ohne
Desktop. Oh ne.
Ich glaub, ich glaube mein Sleep
reicht noch nicht. Mein Sleep ist zu kurz.
Mein, mein Sleep ist zu kurz.
Mist.
Abbruch, Abbruch. Kommando
zurück. Die Kisten sind noch nicht aufgebaut.
Sleep ist zu kurz. Wir machen das
parallel. Pass mal auf, wir können das noch.
Wir können das aus Six Head, können wir, können wir
Seven Head Skript machen.
Alter, ist gut. Ich will löschen.
Wir machen das jetzt parallel.
Okay. Ähm.
Sleep, Sleep
zehn. Ich glaub, das reicht jetzt.
Machen wir mal 15. Ähm.
Wie krieg ich das jetzt in Hintergrund?
Wie? Oh,
Fuck, das war ich. Kann ich einfach an der
Stelle ein und dran machen? Bringt das was?
Ne, das ist Ansible an der Stelle.
Äh. Wie krieg ich ein
das jetzt? Irgendwie
mit, mit, mit, mit Klammern, hä?
Das muss ich jetzt mal testen.
Vor, i, in. Testweise
null bis drei, drei.
Drei.
Ne, das. Ne, einfach ein und
geht nicht. Echo eins, dann.
Okay. Ich will
Sleep.
Ne, ich will sagen
Sleep zwei. Echo
eins. So, eins,
zwei. Bam.
So, und jetzt. Mal gucken, ob ich
das Ganze irgendwie hinkriege, dass das,
dass das im Hintergrund.
Ah.
Klammern muss man's. Klammern
muss man's. Dann
funktioniert's. Genau. Klammern muss man's.
Wobei das,
ich glaube, das kommt sich in die Quere, weil ich
IP doppelt belege und sowas.
Keine Ahnung. Wir probieren das einfach mal aus.
Und jetzt. Und.
Keine Ahnung.
Ey, guck mal. Guck mal. Parallele Server
Zeug da schon mal, ja?
Das, das funktioniert schon mal.
Es geht. Ah. Nein.
Nein. Fast.
Fast. Es hat
fast funktioniert.
SSH connect to host.
Unreachable.
Ist, ist das Sleep, ist das Sleep
immer noch zu langsam?
By the way, ich weiß nicht, wie man über die Kommandozeile
deletet. Deswegen muss ich's immer so machen.
Bau ein wait for connection ein.
Äh. Das ist ne gute Idee.
Irgendein Netcat oder so. Jemand ne gute,
jemand ne gute Idee.
15. 15. Ich hab's, ich hab's
noch auf.
Oh, Terraform. Das ist ne gute Idee.
Das machen wir in Stream Nummer 3.
Das passt nämlich richtig
zu Containerstells Deployment.
Nächsten Stream bauen wir ne kleine API noch ein.
Machen GitHub Actions,
Continuous Integration, Pipeline Geschiss,
bisschen Loadbalancer Zertifikat.
Und im dritten Stream dazu machen wir dann Containerstells
und Terraform. Das ist ne gute Idee.
Max Ansible wait for connection.
Ah. Wo, wohin?
Äh, äh. Ansible
wait for connection.
Wie funzt das hier? Examples?
Wait
for connection.
Ich teste das jetzt erst mal mit dem Sleep drinne.
Und Sleep 20,
ob das funktioniert.
Wann werden die Streams immer sein? Sonntags? Wahrscheinlich schon.
Bam. Okay.
3, 4,
5, 6,
7, 8, 9,
10, 11,
12, 13,
14, 15.
Das könnte fertig sein.
17, 18, 19,
20.
Okay. Zählen kann ich nicht, aber
fast.
Okay. Mal gucken, ob's jetzt funktioniert.
Das sieht gut aus.
Das sieht gut aus. Das hängt schon viel länger.
Guck mal. Massive, massive Skalierung
hier angesagt.
Wo ich mir nicht ganz sicher bin, das
backt doch rum, oder?
Ich mein, ich mach hier IP.
Wobei, das hier könnte Shell Local sein,
und nicht global.
Und deswegen ist es
kein Problem, wenn ich das parallel mache.
Bash ist aber da zu
6.000 Head für, als dass man
da noch durchblickt.
Netcat, ja. Aber die Idee hier,
einfach das einzubauen beim Ansible ist
wahrscheinlich das Beste.
Funktioniert, Leute. Es funktioniert.
Es funktioniert.
Er deployt mir 4 Server
parallel. So, und danach sollte
Keck WS Service funktionieren.
Hcloud List.
Äh.
Server?
List.
Oder auch nicht. So.
Mal gucken, wenn er
fertig ist, wenn er fertig ist, sollte
er auf allen Keck WS
Service laufen.
Moment, Helsinki? Warum sind
die in Finnland, die Server?
Okay. Bam.
Oh. Was?
Oh nein.
Oh, das geht nicht.
Gibt es doch irgendwelche Race Conditions?
Ah, Moment, der ist noch gar nicht fertig.
Der ist noch gar nicht fertig.
Wait a minute.
Der war noch gar nicht durch.
Ja, dass da harte TPS steht, ist
eine Firefox-Geschichte.
Ah, jetzt ist Keck WS
Service da. Also, Leute,
ernsthaft, einfacher.
Übrigens, ihr seht, dass es transparent ist,
wegen dem Hintergrund. Ich weiß nicht, warum das da so
ein Shit macht bei Chrome.
Wir haben jetzt
Quadruple US
Service. Keck Quadruple US
Service.
Ich bin echt begeistert, wie cool das ist.
Mit diesem, hier in dem Fall,
mit dem Ansible Playbook.
Da haben wir noch irgendwelche Shit-Commits,
die wir noch nicht gemacht haben. Also, wer sich das alles
ein bisschen näher angucken will, was ich hier heute
fabriziert habe, ihr findet das bei mir
alles auf Github.
Hetze hat seinen eigenen Loadbalancer,
den probieren wir im nächsten Stream aus.
Ja.
Wer sich das nochmal angucken will, kann sich das hier
anschauen. Wir machen nochmal was
in die Readme.
Streamprojekt
Wobblords
Twitch
Ein bisschen Werbung machen.
Dürftest du das Shell-Skript nochmal sehen? Welches?
Welches Shell-Skript?
Meinst du das Ansible-Ding?
Ah, ich habe hier meine Aliasse
nicht. Git commit
minus A minus M
Lul W größer
Keck W Readme
Beste Aussage, kräftigen Comments
aller Zeiten.
Ist alles im Repo drin.
So. Jetzt machen wir auch ein bisschen Werbung.
Streamprojekt
Zack, zack.
Keck W as a Service
Ja. Also ist alles
drinne. Kannst Ansible, kannst dir
das Ansible-Skript hier angucken.
Es ist, und wisst ihr was das coole
ist? Es ist
doch echt überschaubar.
Ne? Es ist jetzt nicht, als wäre das
wahnsinnig viel Sourcecode.
Ich mein, die Web-Anwendung ist lächerlich
Es ist jetzt nicht, als wäre das wahnsinnig
viel Sourcecode. Ich mein,
die Web-Anwendung ist lächerlich wenig
Sourcecode. Im Prinzip
ist das alles, was da irgendwie die
Logik macht.
Und das Ansible-Ding
ist
und das Ansible-Ding
ist, jetzt sagt mal, jetzt mal ernsthaft
stellen. Es ist gut lesbar
und es ist auch nicht viel.
Es sind 78 Zeilen.
Da kannst du dich ja echt nicht beschweren.
So, der richtet
den Server ein.
Mit Unit-File allem schon fertig.
Macht ein Bild
lokal von der Anwendung und deployt das Ganze.
Also ich kann euch schon sagen, auch wenn
wir das die nächsten
nächsten Streams etwas
modernisieren werden, so ein bisschen
eher so das in der Richtung, wie das heute gerade
angesagt ist. Einfacher
wird's dadurch garantiert nicht.
Allein schon, wenn wir das
Bild über GitHub
Action machen und sowas.
Man muss man sich jetzt ernsthaft fragen.
Ich mein, für den Stream machen wir das.
Einfach weil's, weil man dann
was lernen kann. Aber wenn ich diesen Kram
jetzt so betreiben würde, dann würde ich
mich allen Ernstes fragen,
macht das Sinn bei sowas kleinem?
Macht das Sinn? Reicht
es nicht aus, wenn ich das auf
einem Server hab, dass ich einfach ein Ansible-Skript
ausführe, nachdem ich ein Commit gemacht hab?
Brauch ich irgendwelche
Containerstells-Geschichten und
sonst was? Man muss es ja nicht
man muss ja mit Agilität nicht übertreiben,
wenn es das dreimal komplizierter
macht. Auch wenn man dann vielleicht nicht
Cloud Native
Big Brain
Blockchain AI
ist. Also ich bin begeistert.
Sehr gut, sehr gut. Excellent.
Tja.
Leute, nochmal eine Runde
Sellout. Diese Streams werden möglich
gemacht durch meinen Partner Hetzner Cloud.
Wenn ihr euch das Ganze
auch mal angucken wollt oder vielleicht auch hier mal
mit den
Beispielprojekt aus dem Stream rum
experimentieren wollt, dann könnt ihr
euch jetzt 20 Euro Startguthaben
sichern.
Ausrufezeichen Hetzner in Chat.
Und wenn ihr euch mit meinem Code
anmeldet, kriegt ihr 20 Euro
Startguthaben. Und ihr seht, für 20 Euro
kann man schon ganz ordentlich was machen.
Ihr könnt euch entweder eine fette Kiste holen
oder, also fett, in Anführungsstrichen
3 CPUs, 4 GB RAM,
das 2-3 Monate laufen lassen
oder was kleineres.
Das Gute ist, dass das Ganze stündlich abgerechnet
wird. Das heißt selbst, wenn ihr, das habe ich
selbst schon verwendet, nur als Neukunde.
Nur als Neukunde. Ja.
Ich weiß nicht, ob sie was gegen Fake-Accounts haben, deswegen
sage ich da jetzt nichts zu.
Was ich auch schon mal
benutzt habe, ist
ähm
diese Geschichte hier.
Haben wir, glaube ich, sogar im Stream gemacht.
Diese Geschichte hier.
Also wenn man mal was braucht,
mit Re... Nein, Hetz...
Nein, Hetzner. Ich will... Lass mich
mal reise in gucken. Wenn ihr mal
Anwendungszwecke habt, dass ihr was richtig
fettes braucht, dann könnt ihr
euch auch das hier mieten. Ich habe beispielsweise
mal OpenStreetMaps
pre-processed.
Das braucht extrem... Für
Routinginformationen, das braucht extrem viel RAM.
Ob die GPU Instanzen haben, habe ich noch nicht gesehen.
Ich glaube nicht.
Und da habe ich mir so eine Kiste hier gemietet,
das hat 4 Stunden processed
und der Vorteil war,
ich habe dann am Ende 2-3 Euro bezahlt.
Im Monat kostet es zwar
321, aber ich habe
das ja nur 4 Stunden gebraucht.
Und ich habe diese Leistung einfach nicht
lokal
ansatzweise gehabt, um es damit machen zu können.
So.
So sieht es aus. Dankeschön für die ganzen
Subs, Leute.
Wenn ihr in Zukunft auch immer live mit dabei sein
wollt, könnt ihr auch bei mir auf YouTube
und Twitch und Twitter und
wo auch immer vorbei gucken.
Ähm, wir hatten hier alles
unsubscribed. Jena am Start.
4 Monate. Huge Fifat-Projekt.
Ja, aber richtig. Der Michi ist auch am Start.
Monrador
hat auch subscribed für 3 Monate.
Ribbonsch
vor einer Stunde. Und der Virus.
Der Schnabulator auch.
Danke für die Subs, Leute.
Ja, wenn es euch gefällt, freue ich mich
immer über jeden Sub.
Zumal ich jetzt ja auch noch weniger bekomme,
weil Twitch der Meinung ist, die Sub-Reise
umgestellt zu haben.
Das heißt, ich brauche jetzt mehr Subs
für weniger Geld.
Was aber nicht schlimm ist.
Also, ich habe nicht angefangen
zu streamen wegen Big Stonks
Money. Das wisst ihr ja.
Und ich muss sagen, ich bin mal wieder begeistert über den Chat.
Es gibt keinen anderen
Channel, der so non-toxic
ist. War Chainlaw außen vor genommen. Außen vor.
Der so
non-toxic ist und so big brain
wie der Chat bei mir.
LOL. Why nicht NoGS?
Warum nicht Kobol?
Noch besser.
Ja, sind halt
Boomer bei dir auf der, also noch boomerische
Boomer als bei mir auf der Arbeit.
So, ich gehe jetzt noch mal schnell durch den Chat
durch.
Mal schauen, ob ich irgendwelche Sachen
überlesen habe. Wie gesagt,
denkt dran AdWoblos schreiben, sonst
übersehe ich die ganzen Comments.
So.
Haben wir nix. Wie gesagt, weiß ich
nicht.
Glaube nicht. Da sieht man doch
eindeutig Toxic hier.
Willst du die Domain-Cagway-Service
dafür haben? Ja.
Das wäre richtig gut.
Cagway.Services, die nehme ich.
Die müssen wir auch nicht transferieren. Ich kann dir für
DNS einfach die IP geben.
Transferieren ist immer, das sind
die Low-End-Provider
zu Threehead für.
Ubuntu dein liebstes Server-Linux?
Ja. Das stimmt.
Genau das ist es.
Es ist natürlich cool,
wenn du dir dann irgendwie was erzählen kannst von
hyperskaliertem
Kubernetes
Jetzt könnte man daraus
jetzt machen.
Hyperskaliertes
Cloud Native
Hyperskalierendes
Cloud Native
Kubernetes
Continuous
Deployment
oder sowas.
Ja natürlich, das ist cool, aber manchmal muss
es einfach nicht sein. Und in dem Fall
würde ich echt sagen, das ist so simpel,
das Projekt. Und gerade mit ein paar Servern.
Warum da irgendwie eine große Sache noch
drum herum bauen? Schon spät.
Ne, spät ist es erst ab 22 Uhr.
Nicht Octayu.
Stimmt, das ist vierfach W.
Ist Octayu. CagOctayu.
Was wäre siebenfach?
CoxSeptayu?
Und was ist 9?
Was ist 9 auf Lateinisch?
Weiß ich nicht.
Was ist 9? Nona.
Das habe ich noch nie gehört.
Okay, schauen wir mal.
Ne, ich habe ja nicht viel hier.
Also, wenn ihr noch was wissen wollt,
schreibt die Frage ruhig in den Chat.
Ich bin jetzt noch eine halbe Stunde da.
Wenn man den Namen weglässt. Ja, ich will die ja nicht random haben.
Ich will ja sehen, wozu sie gehören.
Achso, habe ich die Server jetzt eigentlich alle gelöscht?
Oder ist CagWSService immer noch da?
Oh, CagWSService läuft ja noch.
Vielleicht sollte ich die Kisten mal wieder löschen.
Sonst wird es teuer heute Nacht.
Zack. Ne, ich habe glaube ich
nichts übersehen.
Wenn ich hier so durchscrolle.
Hatten wir ja. Ne, Holprig habe ich
doch irgendwas anderes mit gemeint.
Na gut.
Ich muss dir ehrlich sagen,
ich als Boomer Linux Admin,
die Standard Bash Skripte
für das alte Init
hatten auch schon seine Vorteile.
Zum Beispiel hätte ich da irgendwie den Health Check
reinhacken können.
Was bei SystemD nicht gescheit funktioniert.
Also ein Health Check zum Beispiel, der
irgendwie einen Weget macht
alle 5 Sekunden oder so. Aber wie gesagt,
wirklich nur irgendwie
reinbasteln. Der hatte eigentlich nichts zu suchen.
Ja hier, wieder was gelernt.
Richtig Six Head.
Muss ich nicht, dass man das machen kann.
Er wusste es auch.
Aber im Unit File ist es natürlich schöner.
Funktioniert
über Hetzner auch sowas wie
Proxmox zu hosten? Ja, natürlich.
Achso, du meinst in der Cloud.
Ah, da wäre ich mir nicht so sicher.
Das wäre ja
quasi nested Virtualisierung.
Da würde ich mir wahrscheinlich bei der
Server Aktion lieber einkaufen.
Also ich weiß nicht genau
wie die Linux virtualisieren. Ich vermute mal,
das ist KVM. Und nested Virtualisierung
ist eines der Anwendungszwecke,
wo ich mir es, wo ich wirklich genau
drauf gucken würde, ob es ordentlich funktioniert.
Also du bist auf Windows,
Vmware in Linux, der auf einem
Hetzner Server ist. Ja, korrekt.
Ich bin auf Windows,
habe da meine VM
und dort war ich eingeloggt auf
einem Linux Server. Genau.
So sieht es aus.
Habe ich eigentlich die Sub Alerts aus?
Kann das sein?
Ah, tatsächlich. Soll ich die
auslassen oder anlassen?
Sagt mal. Man hört es aber.
Anstört mich. Dann lassen wir es an.
Micky Van B, danke schon für den
Sub. Ok, ich glaube, ich habe nichts
übersehen. So, schauen wir nochmal runter.
Passt.
Ja, Proxmox auf den richtigen Hardware-Servern?
Ja, wundert mich nicht.
Sag mal, Blue Media. Ich weiß nicht.
Irgendjemand aus dem Chat
arbeitet bei Hetzner
und
hat
meinen Stream an die Marketing-Abteilung
weitergeleitet. Warst du das?
Jetzt sagt jeder ich.
Ja, jetzt sagt jeder ich.
Nee. Machst du eigentlich
noch irgendwann ein Ausbildungs-Story-Video?
Ja, klar. Als nächstes mache ich
die Geschichte über den Azubi,
der illegale Sachen bei uns im Rechenzentrum
gehostet hat. Da muss ich aber echt aufpassen,
dass ich alles anonymisiere,
dass ich nicht mal den Vornamen den richtigen nenne.
Ja, wir hatten mal einen Azubi,
der hat bei uns auf den Servern unten.
Der hat mich die ganze Zeit immer gefragt,
was macht der mit
VMware? Wir hatten einen Azubi
VMware Cluster.
Und der hat die ganze Zeit rumgenervt,
ob er den nicht mal neu machen kann,
den Azubi VMware Cluster.
Dann hab ich gesagt, ja, ich setz
den auf neue Hardware, ich mach das neu, das ist doch viel besser,
da können wir üben und alles.
Und bis...
Also, nicht bei mir. Ich hatte damit
nichts zu tun.
Also, der Azubi
war auch bei mir, aber mit der eigentlichen Sache.
Da hatte ich nichts zu tun.
Bis dann dann irgendwann einer gesagt hat, na gut, dann mach halt den Azubi
ESX Cluster neu.
Und...
Bis dann irgendwann mal jemand dahintergekommen ist,
was der macht.
Es ging überhaupt nicht darum,
dass er den Azubi ESX Cluster neu aufbaut.
Sondern er wollte den, also
nicht aus reiner Nächstenliebe,
der wollte den Azubi ESX Cluster
neu aufbauen, weil er dann auf illegales Streaming...
Also, was heißt illegales Streaming?
Der hat einen Streaming-Server, also
einen Streaming-Dienst gehostet.
Mit Film drauf. Der hat sogar ein Werbevideo
auf YouTube gemacht, für den Streaming-Dienst.
Der hatte natürlich keinerlei Rechte oder sonst was
in der Richtung.
Der hat sogar ein Werbevideo, richtig schlechtes,
aber der hat sogar ein Werbevideo auf YouTube
gemacht. Und das alles lief bei uns im
Rechtszentrum. Wie lange hat das
gedauert, das weiß ich tatsächlich nicht.
Weil ich hab, wie gesagt, ich war nicht daran
beteiligt an
der Aufdeckung.
Ich hatte mal so 2-3 Wochen. Also es lief schon
ein bisschen. Das ist auch der erste
und ich glaube auch bis jetzt
einzige Azubi, der nicht
übernommen wurde.
Und auch nicht die Alibi 30...
Nicht die Alibi halbes Jahr
hinten dran.
Herr Endpunkt wurde auch übernommen in ein halbes Jahr.
Aber das ist der erste Azubi, der komplett
gekickt wurde
danach. Den hätten sie ja eigentlich
schon während der Ausbildung kicken können. Aber wahrscheinlich
wollte das keiner an die große Glocke hängen.
Ist der Preis-Champ schon profitabel?
Der Preis-Champ hat nur einen
Amazon-Refling und der kommt so selten dran,
dass glaube ich erst einer bisher
je was über Amazon gekauft hat.
Lohnt sich überhaupt gar nicht.
Preis-Champ bezahle ich jeden Monat irgendwie
50€ für nix.
Bald auch Status KekW-Service.
Das finde ich ist eine gute Idee.
Was läuft eigentlich auf KekW.Service
gerade?
Nix. Aber die Domain,
die machen wir dafür. Das ist richtig gut.
Weil Linux-Distro
Manjaro mit E3-WM.
So. Der Auer wird auch
gesponsert. Ja, habe ich gesehen.
Äh, Materius, ich bin gleich off.
20 Minuten noch.
Wir sind mit dem Projekt für heute auch schon
durch. Der Typ, der
Typ hat echt gedacht, er ist Massive Big
Brain. Dabei ist es eigentlich eines
der lowsten Aktionen, die du machen kannst.
Hat er wenigstens die VMs?
Ich weiß es nicht. Keine Ahnung. Ich habe den Cluster
nie in Action gesehen.
Aber nachdem es der Azubi-VM-Cluster
war, hat da eh keiner drauf geguckt.
Ja.
Man wollte es wahrscheinlich hin an die große Glocke.
Ja, ich würde mit
Herr Endpunkt gerne ein Video aufnehmen.
Aber der hat gerade wohl ein bisschen
ein bisschen, weiß ich, Probleme
jobmäßig, ich weiß nicht genau.
Lange nichts mehr gehört. Aber er hat gesagt,
er will auf jeden Fall was aufnehmen.
Nee, ich mache da keine
Ads drauf. Ich sehe ja
nicht, was du bestellt hast. Ich sehe nur,
was bestellt wurde, nicht wer da was bestellt
hat. Leute,
was da über meine Rafflings teilweise bestellt
wird. Ich gucke da aber mittlerweile,
ich habe da früher immer mal reingeguckt, weil ich es interessant fand.
Mittlerweile gucke ich da dann mal rein.
Wie alt bist du eigentlich? Oder ist das geheim?
Ich meine, das weiß ja eh schon jeder.
Ich bin 36. Stimmt nicht.
Stimmt nicht. Ich bin 37.
Ich bin 37 geworden. Vor nicht allzu langer
Zeit. 37.
Na, das war nur ein Vorwand,
gehe ich mal von aus, dass er neue
Hardware bekommt. Der wollte neue
Hardware haben für einen neuen Azubi-ESX-Cluster.
Und wie ist das am Ende aufgeflogen?
Das ist eine gute Frage.
Wie gesagt, ich war da
nicht so involviert.
Ich frage mal nächste Woche bei einem, der das mitgekriegt
hat.
Ich kenne
das YouTube-Werbevideo von ihm.
Aber ansonsten habe ich
da nicht viel mitgekriegt.
Bin triggert, immer rechtsklick copy. Nee.
Musste ich nicht triggern. Das ist...
Muss man so machen.
Ist das Werbevideo noch online? Weiß ich nicht.
Ich weiß gar nicht, wie
hat er... Das ist echt eine gute
Frage, wie der das gemacht hat.
Irgendwie hat er sich...
Weiß nicht. Muss mal gucken.
Ich meine, der war nicht blöd.
Er hat es halt
übertrieben. Was ist denn ein Reverse-Proxy?
Naja, so ein bisschen das
Gegenteil von einem normalen Proxy.
Normaler Proxy greifst du mit Clients drauf
zu, der dann stellvertretend für dich
ins Internet geht, die Seite abruft und dir
zurückschickt. Reverse-Proxy ist umgedreht.
Das steht zwischen Server und dem
Internet. Du greifst aus dem Internet drauf
zu, wirst weitergeleitet an Server
und die Antwort kommt dann zurück zu dir.
Das machst du zum Beispiel,
wenn du irgendeine
Web-Anwendung hast, der du nicht so ganz traust
und da irgendwas Robustes davor haben willst,
was das Internet
facet. Oder wenn du
vielleicht Basic Auth davor machen willst, weil es
deine Anwendung nicht kann. Oder wenn du
Zertifikatsmanagement handeln lassen willst
von irgendwas, was das ordentlich macht
und nicht irgendwie Seps einbauen willst und sowas.
Also ich würde auch
BSService nie ins Internet hängen direkt.
Das war heute zum Testen. Da kommt immer
ein Reverse-Proxy davor.
Es geht nicht um entweder oder.
Du kannst einen Docker-Container
laufen lassen und
mit einem Reverse-Proxy den ansprechen.
Du kannst auch einen Reverse-Proxy im Docker-Container
laufen lassen, aber ein Reverse-Proxy
ersetzt keinen Docker-Container und ein Docker-Container
keinen Reverse-Proxy, weil beides zwei
komplett unterschiedliche Arten
an Dingern sind.
Also hat noch nichts mal miteinander was
zu tun. Ja.
Die Server gibt es nicht mehr.
Ja, wenn du eine Webseite hast,
also wenn du selbst einen Web-Server laufen
hast, also eine
Web-Anwendung laufen hast, dann ist es
sinnvoll, davon Reverse-Proxy zu machen
und darüber Zertifikatshandling und solche
Sachen abzufackeln.
Ja, aber das kannst du dir auch downloaden.
Also das ist jetzt nicht so das Problem.
Ja, der Typ,
der Typ, der sieht wahrscheinlich,
der Typ, also Mr. Snoddy
hat uns jetzt erst mal erzählt,
dass Reverse-Proxy-Benutzer
grüne Wähler sind.
Oder irgendwie sowas
in der Richtung. Hast du bezüglich
Serverhandling auch ein Stream beziehungsweise
Video? Ich habe vor ein paar Wochen so ein bisschen
Linux-Einsteiger-Server-mäßig gemacht, aber das
war ein bisschen unstrukturiert.
Da mache ich vielleicht nochmal was zu.
Im Prinzip das Beste, was du machen kannst,
um was zu härten, keine Ports aufmachen.
Was nicht
läuft, kann nicht angegriffen werden.
Fertig.
Ansonsten sind, wenn du bei
Hetzner, sagen wir mal Hetzner
Ubuntu einen Server aufsetzt, sind die schon
ziemlich sicher vorkonfiguriert. Da musst du nicht
viel machen. Für Komfort würde
ich das über SSH-Keys machen.
Einfach, dass man kein Passwort eintippen muss.
Passwort, was nicht eingetippt werden muss, kann auch
nirgendswo abgegriffen werden.
Oder dir auch keiner über die Schultern
gucken. Ja.
So. Habe ich
jetzt meine ganzen Services gelöscht hier?
Ja. Nice.
Sehr gut.
Excellent. Keck WSService
hat
richtig, richtig
Startup-mäßig eingeschlagen.
Das ist hundertprozentig
jemand aus dem Chat.
Meinst du? Was ist das denn?
Junge, Junge.
Ist das bei mir unter dem Video?
Das ist bestimmt MrSnotty's
2. Con. Unter welchem
Video ist das? Wo ist das
drunter? Hast du nicht
demnächst Geburtstag? Ich hatte Geburtstag.
Jetzt bin ich M96 FPS.
Unter welchem
Video ist das?
Junge, Junge. Noch nie
so viel Falschaussagen in einem Video gesehen wie
heute. Schön ohne Plan, mit Gameplay
im Hintergrund, was in die Welt posieren, aber nicht mit
Fakten hinterlegen. Danke, jetzt weiß ich...
Das ist doch MrSnotty's 2.
Con. Das ist doch...
Das kann mir
doch keiner erzählen.
Okay, ich suche jetzt unter welchem Video das bei mir
angeblich ist.
Will uns das ja nicht mitteilen.
Wahrscheinlich ist das gar nicht bei mir unter dem Video.
Wahrscheinlich hat er das Photoshop
gefaked oder sowas.
Ne, das ist überhaupt nicht bei mir unter dem Video.
Das ist der Chain-Loy ist schon wieder richtig hart am
Cheebaiten. Das hat er...
Das hat er...
Das hat er wahrscheinlich photoshoppt.
Hast du nicht photoshoppt?
Also ich hab... Ich hab in meinen...
Ernsthaft?
Ich glaub immer noch du Cheebaitest
mich. Das gucken wir jetzt mal.
Das ist so ein Video von der Telekom.
Ich hab gerade in meinen Mails
gesucht, da war nix.
Gibt's nicht. Das Kommentar.
Das ist Cheebaited.
Ich sag doch, der Chain-Loy ist ein richtig krasser Cheebaiter.
Das hätte mich nämlich gewundert.
Das hätte ich nämlich schon gesehen.
Ja, muss...
Muss so sein. Oh, das ist
Big Brain. Na gut.
Leute.
Ich geh jetzt auf Badge.
Badgetime. Ich hoffe euch hat der Stream
gefallen. Wir sehen uns.
Die Tage.
Macht's gut.
Bis denn.
Cu. Badge.
