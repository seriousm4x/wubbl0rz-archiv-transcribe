Moin.
Chat, geh auch am Start.
Kennt jemand einen guten Web-P zu PNG-Converter?
FFM-Pack macht's nicht richtig.
Oder kann man dem hier einfach sagen PNG?
Moment, ist es jetzt ein PNG oder ist es nur Fake?
Ne, das ist okay, das ist wirklich ein PNG, wenn man jetzt einfach PNG hinten dran hängt.
Ganz soft.
Probieren wir mal aus, ob du es mit PNG besser findest.
Easy.
Schon haben wir es als Emote drin.
Weil mein Emote-Anzeigeding kann keine Web-P-Images gescheit.
Einfach Eats PNG dran hängen.
Das ist aber das passende Emote.
Ja, ja.
Legacy. Das ist sowas von Legacy.
Das ist, passt mal auf, Meme.
Weiß nicht, ob man das überhaupt sieht.
Von wann das ist.
Das ist noch...
Und selbst das ist, glaube ich, noch nicht alt genug.
Und selbst das ist, glaube ich, vom alten Rechner kopiert.
Von 2018.
Das ist alles sechs Jahre alt.
Ich meine, man sieht es allein schon daran,
dass die Program-CS, machen wir mal Notepad auf,
bester Editor natürlich für sich, Sharp-Dateien,
dass es noch dieses Oldschool-Use-Startup und sowas trennt.
Ich glaube sogar,
ich glaube sogar, dass das ein .NET-Framework,
Projekt ist.
Ja, ja, das ist ein...
Das ist ein .NET-Framework-Projekt.
Das ist noch gar kein .NET-Core-Projekt, so alt ist das.
Ja.
Also, ich rede von der Software, die hier die Bilder anzeigt.
Das hier. Das habe ich bei irgendwann selbst gestrickt.
Guckt, da kann ich hier vom anderen Rechner, kann ich aufmachen.
Web-Application 11. Ja, warum sollte ich meine Dinger gescheit benennen?
Guckt, das habe ich auf dem zweiten Bildschirm offen.
Da kann ich hier halt draufdrücken.
Und dann zeigt sie halt als Overlay irgendwelche Emotes an.
Und das kann dann auch nur PNGs.
Mit manchen PNGs hat es tatsächlich Probleme.
Zum Beispiel mit diesem...
Wo ist das? Clap-Emote?
Hier. Das Clap-Emote ist irgendwie ein bisschen zu schnell.
Hyper-Clap.
Aber es funzt einfach.
Ich meine, es kann Sounds.
Es kann statische PNGs mit Transparenz.
Es kann GIFs.
Es kann Gachi-Roll.
Es kann Bilder und Sound gleichzeitig.
Es hat meine Katz, meine alte Katz als Emote drin.
Also.
Und natürlich die ganzen Krustentiere, weil Blazingly Fast Written in Rust.
Ja, die Suche ist übrigens kaputt, wenn ich da hier suche.
Ja, dann...
Geht nur manchmal der erste Buch.
Der erste Buchstabe.
Manchmal auch gar nicht.
Schlechtes WLAN eingeschüttet.
Excellent.
Ist es noch WiFi 4 oder was ist es?
Oder ist es schon IEEE 802.11?
Was ist das Neue?
Was ist das ganz Neue?
AX ist es nicht.
Lass mal kurz gucken. WLAN-Standards.
Was ist denn das ganz Neue?
Hier.
Ne, AC ist ja uralt. Schon.
AX ist es halbwegs neu.
AD?
Aha.
Was? Ne, das verwendet niemand.
Ist das WiFi 7?
Oder WiFi 8?
Ok, ne. BE.
802.11 BE.
Das ist WiFi 7.
Ok, ich kann...
Ich konnte mir außer AX noch nichts Neues merken.
Aha, BE.
Und BF wird WiFi 8.
Und A...
Y wird...
Ok, was auch immer
WLAN-Leute da treiben.
Keine Ahnung.
Aber das ist anscheinend das Aktuelle.
Der Rewrite in Rust.
Du meinst von dem...
Von diesem Meme-Overlay-Board?
Ja, da müsste man den Rust in Windows-UI machen.
Ich glaube, das will man sich nicht zumuten.
Mach mal kurz meine VM an.
Arch, by the way.
Was brauchen wir heute?
Und nicht um den Duschkopf zu bestellen.
Schlecht, weil Vodafone...
Ne, du kannst ja mit Vodafone auch ordentliche
WLAN-Access-Points verwenden.
Also ich verwende beispielsweise auch nicht
das eingebaute WLAN aus dieser komischen
Vodafone-Box.
Ja, ich will eine ältere.
Keine Ahnung, was mit Sammy ist.
Wie es dem geht.
Der will bestimmt raus.
Ich guck mal.
In nächster Zeit, wenn es mir danach ist.
Mit Tauri.
Ich weiß nicht, ob das so nice ist.
Ob ich eine Elektron...
Ist das nicht Elektron?
Also ganz ehrlich.
Ich stelle es mir schwierig vor.
Mit einem Browser
sowas hier zu machen, zum Beispiel.
Transparente GIFs.
Die sich quasi
overlayen über alle anderen Windows-Sachen.
Und sich dann
resizen lassen und sowas.
Das stelle ich mir mit Browser-Zeug
tatsächlich gerade so diese
Alpha-Transparenz hier.
Und ich finde, dass man auch durchklicken kann.
Ich kann ja durch die...
Hier kann ich nicht durchklicken.
Ich kann nicht durch alles durchklicken.
Man kann nur durch manches durchklicken.
Wobei, doch, ich kann durch alles durchklicken.
Ich habe nichts gesagt.
Das ist wahrscheinlich sehr pain.
Sammy ist eine Katze, für die wir mal
Spenden gesammelt haben im Stream.
Sammy, Spendenaktion für Sammy.
Ja, das ist Sammy.
Sammy hatte gebrochenes Bein
und wurde im Tierheim abgegeben.
Und jetzt mittlerweile ist Sammy operiert
und Sammy geht es besser.
Deswegen kennt das Stream Sammy.
So.
Update.
Ne, nicht Reboot.
Erstmal updaten.
Schätzmoi.
Wird geupdatet.
Das ist bestimmt französisch als
Chemois oder so wahrscheinlich.
Weil französische Sachen
prinzipiell so ausgesprochen werden,
wie man es nicht erwarten würde.
Zack.
Komm mal hier, Rider.
Gibt es auch ein Update.
What's new?
Ein neuer Shortcut.
Update.
Oh fuck, der Tee ist mega heiß.
Den kannst du schon ertrinken.
Übrigens, Leute.
Soll ich euch mal was sagen?
Soll ich euch mal was sagen?
Passives Einkommen
wird gerade wieder generiert, Leute.
Muss gerade mal kurz in die E-Mails gucken,
ob da irgendwas gewesen ist.
Wobei, wenn ich in die E-Mails gucke...
Ist es noch passiv,
wenn ich in die E-Mails von der Arbeit gucke?
Dann ist es eigentlich nicht mehr passiv, oder?
Nee, ich gucke jetzt nicht in die E-Mails.
Nee, ich gucke jetzt nicht in die E-Mails.
Die sollen mich anrufen.
Ich habe nur Rufbereitschaft.
Ich checke E-Mails. Passives Einkommen, Leute.
Dann ist aktiv.
Nee, das geht nicht.
Ich kann jetzt von 18 Uhr bis morgen
7.30 Uhr angerufen werden,
wenn was kaputt ist.
Allerdings nur an super wichtigen
Services, wofür das erlaubt ist.
Und da sind nicht so viele.
Und die gehen in der Regel auch nicht kaputt.
Deswegen nenne ich das immer passives Einkommen.
Weil Rufbereitschaft wird ziemlich gut bezahlt.
Da wo ich bin.
Gerade am Wochenende oder an Feiertagen.
Und du musst so gut wie nie was machen.
Übrigens, heute hatte ich die beste Monitoring-Fehlermeldung
aller Zeiten, Leute.
Heute habe ich eine Monitoring-Fehlermeldung gekriegt,
dass
auf einem Server
die Zeit falsch geht.
NTP-Fehler.
Die Frage geht jetzt nur an Leute,
die sie nicht auf Twitter schon gelesen haben.
Was meint ihr, wie viel ging die Zeit falsch?
Ratet mal.
Nicht verraten, wenn ihr es schon wisst.
Was meint ihr?
Was rechtfertigt eine Monitoring-Fehlermeldung?
Was rechtfertigt eine Monitoring-Fehlermeldung,
dass die Zeit falsch geht?
Zwei Stunden?
Ja, das hätte ich jetzt auch so gedacht.
Auch gesagt,
das ist was, wo man mal alarmieren könnte.
Eine Sekunde.
Nee, Leute.
Viel besser.
Ich zeige es euch.
Moment.
Ähm.
Profil.
Viel besser.
26 Mikrosekunden.
Mikrosekunden.
Wir reden hier nicht von irgendwie
Mikrosekunden.
Da habe ich mir auch gedacht,
es ist vielleicht ein wenig übertrieben,
dafür eine Monitoring-Meldung rauszuhauen.
Der Fehler ist bekannt,
das ist seit Jahren schon bekannt,
dass es da immer mal wieder,
gerade beim Start,
dass es dann zu Zeitproblemen kommt.
Deswegen solltest du immer beim Start quasi so einen NTP-Sync einbauen.
Habt ihr noch mal gemietet
für die besten Lösungsansätze,
bevor ihr NTP-Sync gemacht habt?
Nee, aber wir haben natürlich danach
zwei Stunden Retrospektive gemacht, klar.
Lessons learned.
Ich weiß nicht, was es ist,
aber ich kann mir den Kerl nicht angucken.
Ich habe schon ein paar Mal Anläufe genommen,
Videos von ihm anzugucken.
Ich kann mir, ich weiß nicht, das ist mir zu,
irgendwie ist mir das
zu IT, zu
weiß ich nicht, zu
Let's Player mäßig, keine Ahnung.
Ich weiß nicht, ich kann mir das,
es gibt ein paar super beliebte IT-Channels,
die ich mir nicht angucken kann.
Linus Tech Tips kann ich mir beispielsweise auch in letzter Zeit,
also schon eine ganze Weile nicht mehr angucken.
Und was ich
auch echt nur mit sehr,
sehr viel Pausieren
aushalte, ist
The Primogen.
Der ist mir einfach zu hyperaktiv.
Ja, geht mir auch so.
Geht mir auch so. Ich muss da immer,
das ist ein riesen Stream auf Twitch,
ich kannte den ganz lange nicht.
Ich muss ehrlich gestehen, habe ich auch noch nie geguckt.
Also wenig,
wo ich ab und zu mal ein bisschen
keck JavaScript-Zeug, weil FireShip gucke ich,
FireShip guckt, glaube ich, gefühlt jeder.
Aber wer auch, wer auch ganz,
genau,
den gucke ich gerne.
GeekFreaks, wie gesagt,
der eine erinnert mich ein bisschen an
meinen Zahnarzt.
Von der Aussprache,
nicht von der Optik her.
Man, der hat halt das richtige
Karriere-Crimeset-Mindset.
Ich mach mal kurz ein
Reboot und dann installieren wir Deno.
Zu Datum und Uhrzeit sehenswert.
Das ist in der Tat, den Talk kenne ich.
Das ist ein guter Talk.
Das ist ein sehr nicer Talk.
Den habe ich geguckt.
Aber,
ich finde,
es gab einen besseren Talk
zu dem Thema.
Und zwar von John Skeed.
Wer, Chatge,
wer von euch,
die meisten Stack-Overflow-User müssen ihn eigentlich kennen.
Wer von euch kennt John Skeed?
Das ist der mit den
meisten
Stack-Overflow-Punkten aller Zeiten.
So,
und der hatte mal,
der hatte einen Talk über Date-Time
gehalten.
Working with time is easy.
Das könnte,
es könnte dieser Talk hier gewesen sein.
Und das, der ist wirklich
gut, weil der da so
Dinger erzählt wie,
dass zum Beispiel Schweden mal einen 30. Februar
hatte und solche Dinger, wo man sich
denkt, scheiße man, wir denken an sowas. Und warum
und weshalb. Also den Talk fand ich,
ich glaube, das ist der Talk, den fand ich echt gut.
Da ist mir zuerst mal
klar geworden, also ich wusste eigentlich schon immer, dass
Zeitzonen und
solche Sachen voll für den Arsch sind.
Aber nach dem Talk wusste ich erst mal, wie
für einen Arsch die sind. Aber wenn man ein bisschen
neueren Talk und auf Deutsch gucken will, der ist
auch nicht schlecht. Den habe ich auch geguckt.
Der ist auch nicht schlecht.
Ich bin ein KI-Fan.
Ich bin der größte KI-Fan überhaupt.
Sodass ich die KI-Projekte auf Github immer skippe.
Wie sieht es eigentlich,
das frage ich mich auch
gerade. Ja, sollte die nicht eigentlich so lange
aber sicher mal da sein.
Gucken wir mal. Lass uns mal kurz
gucken, ob die neue Javascript
Date-Time-Geschichte ist.
Also ich verwende in
Keck-Javascript
verwende ich als Date-Time
eigentlich immer
Time-FN oder wie das heißt.
Date-FNS.
Das verwende ich, wenn ich irgendwelche
advanced Date-Time-Geschichten
in Javascript machen muss.
Aber wie sieht es eigentlich
aus?
Can I use
Temporal API?
Gucken wir mal.
Okay, sieht nicht gut aus.
Neue Date-Time-APIs
in Javascripts
werden von 0%
der Browser unterstützt.
Tja.
Ist die originale
Date-API doch nicht
Painschamp genug.
Ja, ich muss ehrlich sagen, ich bin mit .NET
Es gibt Sachen, die ich in .NET gut und schlecht finde, was Date-Time angeht.
Was ich gut finde, also was ich wirklich auch besser finde, als in den meisten anderen Sprachen, die ich kenne, ist,
dass die .NET Standard Library umfassend alles dabei hat, was man braucht für Date-Time.
Du kannst mit Dates arbeiten, mit Times arbeiten, mit Date-Times arbeiten, mit Offsets arbeiten, mit Timestamps arbeiten, Unix-Timestamps.
Es ist für alles was dabei und auch die Lokalisierung, also sprich, dass das zwischen, keine Ahnung, NA, West-Time und EU-Time und so umrechtlich heißt,
ist in .NET eigentlich alles ganz gut.
Es ist in .NET mittlerweile leider ein bisschen viel.
Du hast Date-Time, du hast Date-Time-Offset, Date-Time-Offset mit noch echt und du hast irgendwie 5, 6 verschiedene Time-Sachen.
Es ist ein bisschen wie Timer, ein bisschen wie Timer in .NET.
Timer gibt es auch in .NET, irgendwie 6.
Man sich fragt, warum eigentlich?
Hättet ihr nicht bei einem bleiben können und den erweitern?
Aber ich weiß das immer zu schätzen, gerade dass .NET Timestamps und sowas unterstützt.
Da kriege ich regelmäßig so in anderen Sprachen echt Ausschläge, wenn ich das machen muss.
Sei es in Python oder auch in Go.
Das ist alles so rudimentär im Vergleich zu .NET, was Date-Time-Handling angeht.
So, also hier.
Neue Date-Time-APIs in Browsern gibt es.
Gibt es nicht.
Aber es gibt immerhin schon mal ne...
Okay.
Es gibt ein Chromium-Implementation-Bug.
Aber Chrome hat das noch gar nicht implementet.
Also kein Browser kann das aktuell.
Es hat nen Bug in Chrome, quasi bevor es...
Ne, jetzt verstehe ich, was die meinen.
Das ist einfach ne Feature, das ist so ne Art Feature-Request.
Das ist ein Implementation-Bug.
Das ist natürlich bescheuert genannt.
Ich glaube, die wollen damit sagen, die haben einfach in ihrem Bug-Tracker ein Ticket aufgemacht,
wo drinne steht, wir müssen das demnächst mal implementieren, weil es gibt ne JavaScript-Spec dazu.
Limited Availability ist gut.
Limited Availability ist gut.
Bei 0% aller Browser.
Ne, das unterstützt es noch nicht mal Experimental.
Gar nichts unterstützt das.
Übrigens, Firefox hatte heute...
Hatte heute irgendeinen Critical Bug, habe ich gelesen.
Point of Reddit.
In irgendeiner CSS-Animation oder sowas.
Hier.
Animation hier.
In Animation-Timelines.
Ich vermute mal, dass das ne CSS-Feature ist.
Also ich vermute mal, dass die CSS-Animation meinen, oder?
Ansonsten wüsste ich nicht, was sonst.
Aber keine Ahnung, was das...
Genau.
Gab's ein Critical Bug in Firefox.
Wo quasi Webseiten Code ausführen konnten in der Sendbox.
Ja, immerhin.
Schmerzer Tag für alle Rust-Enjoyer.
Also das mit CSS sag ich jetzt, by the way.
Ich hab mir das nicht genau durchgelesen.
Es ist das einzige Animation-Timeline.
Es ist das einzige, wo mir was einfällt, dass es eben CSS-Animation...
Wo es Animation-Timeline gibt.
Wie kann CSS-Critical sein?
Naja, wenn da irgendwas nicht richtig escaped wird.
Und du so quasi ausbrechen kannst aus diesem normalen CSS-Kontext.
Aber immerhin konntest du nicht aus der Sendbox ausbrechen.
Ja.
An attacker was able to achieve code execution in the content process.
Also sprich, noch in der Sendbox.
So verstehe ich das zumindest.
Use after free in animation timelines.
Ja, da musstest du wahrscheinlich eine super komplexe Animation-Timeline hinterlegen.
Und das hat dann dazu geführt, dass du irgendeinen Bug in Firefox ausnutzen konntest.
Und Custom-Code im Browser ausführen.
Aber noch in der Sendbox.
Das heißt, du konntest beispielsweise nicht das restliche Betriebssystem infizieren.
So verstehe ich das.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Ja.
Gut.
Also, dann installieren wir erstmal alles zu hier.
Flup.
Alles wegmachen.
Habe ich schon rebooted?
Ja, ich glaube schon.
So, Deno 2.0.
Wir lesen uns jetzt als erstes mal, bevor wir uns das Ganze durchschalten, lesen wir uns den Announcement-Blog-Post durch.
Warum man das verwenden sollte? Weil ich bin da selbst noch ein bisschen skeptisch.
Ich bin ja gar kein großartiger Frontend-Enjoyer, wobei ich sagen muss, JavaScript ist eine wirklich ganz brauchbare Sprache geworden mittlerweile.
Ich quäle mich regelmäßig rum, auch im Stream öfters, mit Frontend-Sachen.
Und gerade was nicht unbedingt JavaScript angeht, sondern die Design-Komponente mit HTML und CSS, das ist für mich immer ein bisschen schwierig.
JavaScript an sich ist eine ganz brauchbare Sprache mittlerweile, aber ich bin da recht klassisch unterwegs.
Ich habe Node installiert und ich mache damit direkt eigentlich nicht viel.
Ich installiere vielleicht mal ein NPM-Package oder sonst was.
Und ansonsten verwende ich Visual Studio Code.
Und mit dem, ähm, naja, na gut, das war jetzt ein anderes Projekt.
Ja, verwende ich das Welt-Kit mit dem Plugin und das war's.
Also, mal gucken, wie das mit Deno so ist.
So, und jetzt lesen wir uns aber mal durch, warum wir überhaupt Deno verwenden sollten.
Also, ich sage euch jetzt mal in meinen Worten, was Deno ist und dann gucken wir mal, was Deno selbst dazu sagt.
Deno ist Konkurrenz zu Node.js, beziehungsweise zu BAN.
Es gibt ja mittlerweile drei.
Sagen wir mal halbwegs große Server-JavaScript-Runtimes, Server-Side-Runtimes.
Also jetzt nicht im Browser, dass jeder Browser eine JavaScript-Runtime hat, ist klar.
Aber Server-Side-Runtimes, du hast BAN, du hast Deno und du hast Node.js.
Node.js ist eindeutig, dass du mit Abstand, mit riesigem Abstand verbreitetst du und eigentlich das Ding, wo alle irgendwie drauf aufsetzen.
Deno gibt es schon seit ein paar Jahren.
Deno ist vom ursprünglich, witzigerweise.
Von hier, von ihm hier.
Das ist auch der Node.js-Erfinder.
Der Node.js-Erfinder hat sich irgendwann mal gedacht, Node.js sagt, wir machen jetzt was Neues.
Und hat einfach die Buchstaben von Node.js ein bisschen rumgedreht und dann kam Deno raus.
Und Deno sollte das quasi mal alles irgendwie revolutionieren und diesen ganzen Mist mit NPM-Packages aufräumen und hast du nicht gesehen?
Das war bei Deno 1 wohl nicht so wirklich der Fall.
Deswegen gibt es jetzt Deno 2.
Und Deno 2 hat jede Menge neues Zeug dabei.
Und das wollte ich mir mal angucken.
Und es soll halbwegs kompatibel zu Node sein.
Also, sodass man beispielsweise NPM-Packages installieren kann und auch ja alles eigentlich wohl ausführen können soll wie mit Node plus mehr.
Man hat beispielsweise auch eingebauten TypeScript-Support.
Mal gucken, mal gucken.
Wie gesagt, ich kenne das neue falsche Video.
So, und ich bin jetzt nicht der große JavaScript-Checker.
Aber mich interessieren da zwei Sachen dran, die ich im Vorfeld schon gesehen habe.
Wir gucken uns gleich den.
Announcement-Trailer an.
Moment, ne, das ist kein Announcement-Trailer.
Das sind 59 Minuten Talk.
Denkst du, Deno wird sich verbreiten gegen Node.js?
Also, meine persönliche Meinung ist, ich glaube, nichts wird in nächster Zeit Node.js irgendwie verdrängen.
Es gab einen kurzen Trailer.
Deno 2.0 Trailer, okay.
Das ist es auf jeden Fall schon mal nett.
Das, ne.
Was denn?
Was?
Was?
Was?
Was?
Was?
Was?
Was?
Was?
Was?
Was?
Was?
Was?
Was?
Was?
Was?
Was?
Was?
Was?
Was?
Nee.
Der Trailer ist ganz am Anfang vom 50-Minuten-Video.
Ach so.
Ja, okay.
Okay, Moment, wir machen mal kurz die Musik aus.
Moment, ich habe hier keine Musik in der VM.
Warum sollte ich auch?
Windows hat gerade rum.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Okay.
Das stimmt wohl.
Das JavaScript-Ökosystem ist nicht simpel.
Das JavaScript-Ökosystem ist nicht simpel.
Und das ist Steve, der das 20.
Test-Framework umgedreht hat, was er letztens gelernt hat.
Bitte seien vere pratisch.
Okay.
Ich bin gut.
etwas grinsch ist das ja schon
ja gut das stimmt wohl
das werden wir ausprobieren heute ich habe meine zweifel dass das wirklich funzt
der trailer tut schon ein bisschen weh aber das ist glaube ich geplant
und den mittlerweile auch neues logo okay jetzt haben wir den trailer gesehen
chat hat euch der den trailer jetzt irgendwie dazu verleitet den oma
auszuprobieren sagt jetzt nachdem er das video gesehen habt ja wohl endlich
jetzt habe ich mir das mal drauf ja wenigstens einer gut also da kommt man
mal über den krempel installiert bekommen
als erstes mache ich war von meiner vm und snapshot das schadet nichts selbst
schaut immer gut bevor man da irgend random sachen aus dem internet gibt es
denn schon ein 146 ist das letzte stable man kriegt hier vielleicht irgendwie die
haben doch bestimmt irgendwie so eine peipe peipe dieses installer skript nach
bash und auf geht's einfach mal random sachen aus dem internet nach sudo
peipen ist doch immer ist immer die beste idee
den o2.0 ist
finally
hier jetzt habe ja schon also native typescript support das probiere
wir gleich mal aus batteries included bild informaten linter type checker also
also gerade das hier finde ich natürlich ganz nice da müssen wir mal gleich
checken inwieweit das in michel studio überhaupt dann auch auf der box
funktioniert wobei out of the box wish studio hat ja wischt studio kauter in
bild in der brauch sondern nicht mal noten oder prütter oder sowas die hat ein
ein built-in formatter für javascript also ist das wahrscheinlich gar nicht so was genau macht
den und zwar jetzt besser als die nur ein sehr das gucken wir uns jetzt an sie haben neues package
management also das ist quasi so was wie npm sie unterstützen mehr mehr node.js sachen im vergleich
zu früher eine neue standard library das ist natürlich cool das ist das was not etwas leckt
und generell javascript gerne auch im browser eine etwas umfangreichere standard library haben
könnte vor allem nicht so eine zusammengestückelde workspaces und mono repo support gut das juckt
mich jetzt nicht so long term releases das ist jetzt vielleicht für uns nicht so spannend aber
für irgendwelche oldschool boomer entwickler finanz dinger in frankfurt oder so die software
entwickeln und dann auch die software entwickeln und dann auch die software entwickeln und dann
für 30 jahre verwenden ist es vielleicht gar nicht schlecht wenn die ersten sechs jahre von 30
noch supported werden hoffentlich ist even in der standard library ja ja ja wichtigstes package
überhaupt und dann gibt es eine modern registry for sharing javascript libraries across runtimes
okay es gibt auch gleichzeitig noch eine npm konkurrenz mit den 2.0 dann gibt es der deno
formatter formatter kann jetzt html css und yaml lindt kann besser linden testen
kann besser testen task kann besser tasten doch sie ist immer die müssen öfters mal ein stream
gucken dokumentation das ist einfach overrated outdated das muss einfach first try fehlerfrei
funktionieren dann braucht man keine docs weil wozu ja wenn es einfach funktioniert dann muss
keiner was fixen da muss keiner nachgucken er braucht keine dokumentation ist ganz einfach es
muss einfach gehen
das probiere ich heute auf jeden fall aus da bin ich mal gespannt ich glaube dass das nicht so
dolle ist da kannst du aus einer javascript anwendung single binary bauen aber ich wette
mit euch die sind not even close zu einem go binary von der ja von der von der unabhängigkeit
her kann man damit du spielen relativ sicher gibt es die implementierung für javascript
so die frage ob wo du es rennt das im endeffekt dann den output ja es gibt bespricht das gibt's
wahrscheinlich für als us die art konsolen und bestimmt auch für den browser das garantiert
gibt es das den us server um web-server trinne et alles braun das brauchen wir nicht wirklich jetzt
benchmark reports hat der mann okay das ersetzt also im prinzip werde ich das richtig so ersetzt
den ohr sehr viele tools die man zu die man in mit notf quasi zusätzlich ist jetzt wenn das so ist
tage an den und das er setzt also im prinzip wenn ich das richtig so ersetzt dennoh sehr viele tools
die man mit Node quasi zusätzlich installieren muss.
Das kann auch eine gute und schlechte Sache sein.
Bei JavaScript im Node-Umfeld gibt es halt viel Auswahl.
Wenn man sagt, ey, mir gefällt, was weiß ich, der Standard-Linter nicht,
nehme ich irgendwas anderes, mir gefällt das verbreiteste Test-Framework nicht,
kann ich was anderes nehmen.
Auf der anderen Seite ist sowas aus meiner Sicht besser,
weil wenn es eine Standardsache gibt, da schießen sich die Leute meistens drauf ein.
Man sieht, dass das funktioniert in Go.
Go hat wirklich vieles von dem schon ganz lange.
Also Go hat einen Formatter dabei, hat Go auch einen Linter dabei, egal, wer braucht Linter.
Aber Tests und solche Geschichten, bei Rust ist es ja ähnlich,
die haben sehr viel schon standardmäßig in der Sprache dabei.
Zum Beispiel Go gibt es genau eine Art, wie man Ifs schreibt.
Also die Go-Variante, ein If zu schreiben, ist halt so.
So, das ist halt die Go-Variante.
Und es darf nicht anders aussehen.
Sobald es anders aussieht, sagt der Go-Compiler, nö, ich kompiliere einfach nicht.
Was den Vorteil hat, dass es einen Standard gibt, wie Go aussieht.
Ich finde das übrigens, by the way, nicht schön, die Standard-Go-Formatierung.
Mir gefällt das nicht, aber ich erkenne den Vorteil von,
es gibt genau eine Standard-Formatierung für alle.
Und wenn du dich nicht dran hältst, dann kompiliert deine Sache nicht.
Also das finde ich eigentlich gar nicht schlecht, wie sie das in Go gemacht haben.
Deswegen finde ich es auch nicht verkehrt, dass in Deno sowas standardmäßig am Start ist.
So, dann haben wir die Rückwärtskompatibilität zu Node.
Deno ist now a packet, also NPM ist included.
Neue JavaScript-Registry.
Standard-Library, das werden wir heute ausprobieren.
Da bin ich gespannt.
Da bin ich mal gespannt, was da alles dabei ist.
Da bin ich echt mal gespannt.
Private NPM-Registries, Workspace, Monorepos, LTS.
Wie lang ist denn LTS in der JavaScript-Welt?
Okay.
Ein halbes Jahr ist LTS.
Ein halbes Jahr, okay.
Na gut, wir sind, Leute, wir sind im JavaScript-Ökosystem.
Alles, was da länger, alles, was da älter als drei Wochen,
ist, ist Legacy.
Das sind sechs Monate schon lang.
Okay, Deno ist super schnell.
Ah, Blazingly-File.
Ist Deno written in Rust, Leute?
Also, wird's nicht sein, weil, nee, ist es nicht.
Deno ist wahrscheinlich die Chrome-JavaScript-Runtime nur wieder neu verpackt.
Oder?
Was für eine JavaScript-Runtime hat Deno denn unten drunter?
Bestimmt die gleiche wie Node.
Die Sachen drumherum sind vielleicht in Rust.
Shit, guck mal, die Sachen drumherum sind wirklich in Rust.
19. Oktober, Release, Welt 5, ja, da müssen wir das, müssen wir gleich mal streamen, so, an.
Basiert, Chat, weiß das jemand?
Deno wird doch garantiert auch auf der Chrome-JavaScript-Runtime basieren, oder?
Weil, was, was, was denn sonst?
Also, ja, hier, V8-Engine.
Weil, weil, was sonst?
Die haben bestimmt keine JavaScript-Engine von neu gebaut.
Okay.
So.
Äh, wie installiert man das denn jetzt eigentlich?
Da gibt's doch bestimmt irgendwie so ein Pipe-Installer-Skript nach Bash.
Wir, wir pipen einfach mal das Internet jetzt nach Bash.
Das ist doch schon mal gut hier.
Get started.
Linux.
Deno install.
Bam.
Ist das dann schon 2.0?
War das jetzt einfach.
Gib ihm.
Edit shell configs to add Deno to your path.
Yes, ich hoffe, der versaut meine ZSH-Eats.
Wo ist hier das Deno-Zeug?
Add-Deno-Completions.
Das machen wir irgendwo hier unten hin.
Und das funzt an der Stelle schon mal gar nicht.
Okay, das machen wir hier hin.
Und das muss da hin, weil das da unten in Prompt startet.
Und deswegen schon mal nicht funzt.
Okay, so müsste es jetzt eigentlich gehen.
Deno.
Ja, haben wir.
Deno-Version.
Minus-Minus-Version.
2.0.
2.0.
Okay.
Okay, da sind wir.
Das war easy.
Ich habe jetzt zwar das halbe Internet installiert und man weiß nicht, was mit dem Skript alles mitgekommen ist.
Leute, ich hätte es gleich so machen sollen.
Wenn schon YOLO, dann richtig.
Wenn schon nach Sudo-Shell-Pipen.
Wenn schon, dann richtig.
Okay, dann machen wir mal hier.
Deno.
Deno.
MKDia.
Hello.
War das mal richtig oldschool.
Okay.
Ich tue mal so, als bin ich der übelste Kack-Knub.
Äh, Deno angeht.
Nicht, dass ihr denkt, ich hätte keine Ahnung oder so davon.
Aber, in Wirklichkeit bin ich natürlich der Deno-Expert schlechthin.
Wie könnte das jetzt funktionieren?
Wir machen jetzt mal einfach sowas wie app.ts.
Weil angeblich hat es ja TypeScript-Support mit eingebaut.
Konsole.
Natürlich WIM, was sonst?
Weil, Hackermans.
Cute Chat.
Okay, Deno Run.
Äh, ich muss mal.
Deno Run.
So schon mal nett.
Punkt.
So auch nett.
App.ts.
Aha.
So funzt das schon mal.
Okay.
Interesting.
Gibt es denn für Visual Studio Code ein Deno-Plugin?
Weil das muss ja wissen, Standard-Library und sonst was in der Richtung, ne?
Deno.
A language server client for Deno.
Deno Standard-Library.
Okay.
You need to have Deno-CLI installed.
This extension requires to execute by default.
Will use the environment path.
You can exploit it.
Ja, haben wir ja.
Okay, install.
Mal gespannt, was das jetzt irgendwas bringt, ne?
Weil ich will ja beispielsweise auch die Standard-Library-Geschichten, ne?
Das ist doch safe, nicht up-to-date.
Es ist die offizielle Deno-Extension, ne?
Wurde geupdatet?
Doch.
Vor drei Tagen.
Was auch immer das für ein Datumsformat ist.
Es könnte auch vor drei Monaten gewesen sein.
Ne.
Die sind da aktiv am Basteln dran.
Guck mal mal hier die Tags.
Ne, vor drei Tagen.
Vor drei Tagen.
Das passt schon.
Was?
Enabling Deno.
Das...
Das...
You can enable Deno in a workspace by creating Deno JSON or Deno in the root or by writing.
Deno-Enable-Command.
Okay.
Machen wir mal Deno.
Deno-Enable.
Okay.
Das ist gut gemacht.
Und jetzt weiß er das.
Guck mal hier.
Der checkt das auch.
Deno 2.0.
Das ist doch schon mal gut.
Das muss man ihm ja mal lassen.
Ihr Tooling-Zeug ist schon mal am Start.
Direkt zu Release.
Das finde ich gut.
Gucken wir mal, ob es funktioniert.
Benutzen wir mal was?
Benutzen wir mal was aus der Standard-Library.
Okay.
Was haben wir denn hier für Standard?
Was gibt es da alles?
Async, Bytes, Cache, Collections.
Wir gucken uns mal Collections an.
Inspired by Kotlin Collections and Lodash.
Okay.
Gibt es für die Deno-Standard-Library vielleicht Docs?
Sehr unübersichtlich irgendwie, oder?
Gibt es doch bestimmt...
Gibt es doch bestimmt bessere Docs bei denen auf der Seite.
Oder auch...
Gibt es doch nicht.
Naja, anscheinend nicht.
Also die Docs finde ich ein bisschen unbrauchbar, ehrlich gesagt.
Okay.
Probieren wir doch mal was aus.
Gucken wir uns doch mal an, was es hier bei Collections gibt.
Gibt es da irgendeinen GitHub-Link vielleicht dazu?
Ich glaube, die haben ein paar Guides.
Joa.
Hier, da.
Collections.
Aber hier steht sonst nichts großartig da.
Das ist alles, was es da dazu gibt.
Das ist eine Playlist mit unterschiedlichem hier.
Da hast du es.
Keine Ahnung aus welchem Game und was auch immer.
Die haben eine ganze Docs-Subdomain.
Ja, aber anscheinend nicht für Standard.
Guck, die sagen nämlich...
STD.
Dazu gibt es nichts.
Ne, das ist alles, was es zu der Standard-Library gibt hier.
Das ist natürlich ein bisschen...
Sehr...
Knapp.
Aber wir gucken uns mal das Beispiel an.
Also hier haben wir einen Array mit Dingern.
Und da kann man dann zum Beispiel sowas machen wie...
Da oben ist ein GitHub-Link.
Ich weiß, das hatte ich aber eben offen.
Da gibt es auch nicht mehr.
Was haben wir...
Okay.
Was ist denn beispielsweise bei Collections?
Chunk.
Split the given array into chunks of the given size and return them.
Okay.
Das probieren wir jetzt einfach mal aus.
Okay.
Wir machen ein Array.
A gleich...
Oder...
Let...
Nee.
Const sagen die coolen Leute.
Const.
Irgendwie keine...
Eins, zwei, drei, vier, fünf, sechs.
So.
Warum ist das...
Never used.
Okay.
So, jetzt sagen wir A.Chunk.
Siehste?
Moment.
Ich habe das nicht...
Ich habe das nicht importiert.
Deswegen geht das nicht.
Gucken, wie man hier ordentlich importiert.
Import.
Prom.
STD.
Okay.
Das funzt schon mal nicht.
Nice.
Der sagt schon mal, das ist broken.
Okay.
So.
So.
So.
So.
So.
So.
So.
So.
So.
So.
So.
So.
Wow.
Das ist gut.
System.
Nein.
Ja.
Sehr gut.
Muss ich das erst...
Ach, das muss ich erst installieren, oder wie?
Was ist denn das für eine Standard Library, wenn man die erst nachinstallieren muss?
Okay, das ist gut zu wissen.
Ja.
Das ist ein gutes Beispiel.
Aber Standard Library ist vielleicht ein bisschen zu viel des Guten, das zu nennen, oder?
Wenn man...
Wenn es nicht da ist.
Muss ich das erst installieren?
Okay.
Ja.
Der Sinn dahinter ist...
der Sinn dahin, dass die Native Binary
size, dann sollen sie einfach gucken, was man verwendet
und das Rest nicht wieder einkompilieren.
Okay, aber immerhin jetzt checkt das das.
Okay, da wollen wir jetzt einfach von
chunk
das checkt's, okay.
Chunk, ne wie geht das?
Chunk und dann
das Array und dann die
Size. So, das sollte
mir jetzt mehrere Arrays ausspucken
mit der Größe 2. Ja, mach das.
Okay, Funst.
Ich die ja Chunker.
Okay, das ist
eigentlich ganz gut. Guck mal, was der
sonst noch erstellt hat.
Nix, der
hat nur eine Deno
Deno Jason
und ein Deno
Log. Sonst nix. Das ist
tatsächlich relativ minimalistisch.
Die Frage ist jetzt natürlich, wie der das
macht. Wahrscheinlich hat der
ein systemweites Verzeichnis.
Ein bisschen sowas wie PNPM oder sowas,
die einfach nur noch verlinken.
So, ganz
tolles Demo Programm. Das muss uns
jetzt reichen, um mal
noch was anderes auszuprobieren.
Also, das Array Chunk
Zeug und so, das Funst, finde ich eigentlich ganz gut.
Gibt es dann sowas wie Summe, zum Beispiel?
Wollen wir mal so ein bisschen Richtung
Link gucken. Gibt es sowas wie
Sum?
Ah ja.
Sum of. Okay, probieren wir das mal so.
Sum of.
Ich hätte eigentlich gedacht, man übergibt da das Array
und dann ist gut.
Aber wie Funst es?
Ah, man muss...
Das ist ja... Okay, das finde ich sogar gut,
dass das so ist.
Das finde ich sogar eigentlich ganz gut, dass man dann
sogar noch auswählen kann, was man
haben möchte. Ich meine, in meinem Fall ist das jetzt
ein bisschen over...
overengineert, weil ich habe ja die Zahlen direkt
im Array drin.
Also, ich muss dann quasi das hier machen.
Aber an sich finde ich es gut.
Es wäre halt cool,
wenn es eine Default-Funktion gäbe,
die nur ein Array mit Ints...
Ich bin mir gar nicht sicher, wie das mit
Function... mit Function-Overloads und so aussieht
in JavaScript.
Kann JavaScript Function-Overloads?
Habe ich mir noch nie Gedanken drüber gemacht.
Also kann ich beispielsweise in JavaScript sagen,
Keckel
oder in TypeScript in dem Fall,
Keckel und
I... Wie sagt man das in TypeScript?
Int?
Nee, Number. Number ist das, gell?
Nee, das geht nicht.
Da blickt...
Wobei, oder geht das? Geht das oder geht das nicht?
Okay, nee, das geht nicht.
Nee, nee, nee, nee.
Man kann nicht sagen, hier...
Einmal das, einmal das.
Ich kann jetzt auch nicht hier sagen,
String has already been declared.
Nee, das funktioniert nicht.
Okay, Function-Overloads.
Habe ich mir noch nie Gedanken in JavaScript gemacht,
aber JavaScript kann das nicht.
Dann ergibt es auch Sinn, dass das so gemacht ist, wie es gemacht ist,
weil du kannst nicht einfach
eine Funktion anbieten, die eben
standardmäßig ein Int-Array bekommt.
Mit Classy ja irgendwie rumtricksen kann man.
Okay.
So, 21.
Ja, okay.
Hat das vielleicht auch irgendwie so ein Generator für...
Finde ich aber gut, dass sowas dabei ist.
Das gefällt mir.
So, das ist jetzt mal unser Demo-Programm.
Sum of.
Okay, und jetzt probieren wir nämlich mal was aus.
Man kann ja nämlich angeblich sagen,
Deno 2.0 Block.
Man kann ja Compile sagen.
Und da bin ich jetzt mal gespannt,
wie gut das ist,
Deno Compile.
Da bin ich mal gespannt, wie gut das ist.
Ich persönlich denke, das ist sehr rudimentär.
Das packt unter der Haube,
also meine Vermutung, ja,
meine Vermutung ist, das packt unter der Haube
einfach die Deno-Runtime
in irgendein selbst extrahierendes Zip-Archiv
und packt das irgendwo temporär aus
und startet das dann.
Und ich habe die Vermutung,
es ist wahrscheinlich abhängig zu Libraries
auf meinem lokalen Rechner.
Also beispielsweise,
wenn ich hier einen super neuen Rechner habe,
den ich als Arch verwende,
mit einer ganz aktuellen GLIP-C-Version,
dass es dann beispielsweise
auf ein bisschen älteren Systemen
mit einer bisschen älteren GLIP-C-Version
nicht funktionieren wird.
Schauen wir mal.
Deno Compile.
Nee, App-TS.
Okay, ausruhen, App.
Kunst, schauen wir mal.
Was ist dagegen?
G-Link-Wort?
LIP-C?
LIP-GCC?
Okay.
Jetzt bin ich mal gespannt.
Ich würde denken,
der Hauptsinn, dass das Ganze statisch,
du kannst,
wirklich richtig statisch linken,
ist gar nicht so einfach.
Zumal die GLIP-C-Leute tatsächlich sagen,
man soll gegen GLIP-C nicht statisch linken.
Und ein Problem gibt es auch,
sobald du statisch linkst,
kannst du keinen DL-Open mehr machen.
Du kannst nichts mehr dynamisch nachladen.
Also sprich, du musst dann immer alles statisch linken.
Das ist, das,
leider ist diese ganze Linking-Geschichte
halt so ein bisschen,
C-Legacy,
wo man sich oftmals durchkämpfen muss.
Bei Go haben sie das ganz einfach gelöst.
Die haben das einfach weggelassen
und alles selbst gemacht.
Deswegen läuft Go komplett statisch
gegen jedes Linux
seit Kernel-Version 2.6.38.
Hat aber dafür Probleme mit C-Interop.
Also man kann nicht alles haben.
Ja, die Datei ist 88 MB groß,
weil da die Deno-Runtime mit drin ist.
Was sonst?
Da ist die Deno-Runtime mit reingepackt.
Das hat man doch hier oben auch gesehen.
Der hat doch den Kram irgendwie runtergeladen.
So, jetzt testen wir das aber mal.
Also in Go ist alles statisch per Default.
Ja, aber nicht, wie man das so von C kennt.
Bei Go ist wirklich alles,
was in Go ist,
auch komplett unabhängig
von irgendwelchen externen Dependencies.
Wenn du C-Go ausschaltest,
was du machen solltest
bei einem normalen Go-Programm,
weil du kein C-Go hast,
dann ist das nicht so.
Das ist ein bisschen,
weil du kein C-Go hast,
weil du kein C-Go hast,
weil du kein C-Interop brauchst normalerweise in Go,
dann ist das komplett,
dann kriegst du ein relativ,
relativ kleines,
so ein Go-Binary ist auch nicht richtig klein,
aber dann kriegst du ein relativ kleines Binary,
was keinerlei externen Dependencies hat
und einfach nur einen Linux-Körnel braucht
mit Mindestversion 2638.
Es gibt keine Sprache,
die das so gut löst,
die ich kenne,
die das so gut löst wie Go.
Bei allen anderen hast du immer noch
ein bisschen C-Abhängigkeiten,
und dementsprechend
hast du diese
Rückwärtskompatibilitätsprobleme.
Wenn ich einen Strip drauf mache,
gehe ich mal stark von aus,
wird das nicht mehr laufen.
Strip entfernt,
was macht minus SW,
das weiß ich,
Strip entfernt Debug-Symbols
in den Wildcard.
SW.
Strip all.
Ich glaube,
danach wird die App nicht mehr laufen.
Ist aber auch nicht kleiner.
Da lässt sich nichts an Debug-Symbols strippen.
Aber die App ist jetzt kaputt,
nachdem ich gestrippt habe.
Was der Song ist,
ist es hier.
Kirby and the Forgotten Land,
Northeast Frost Street.
Ich habe die App kaputt gemacht
durch das Strippen von Debug-Symbols.
Nice.
Jetzt geht sie wieder.
Und das, obwohl...
Ja, war gut.
Ich kann mir vorstellen,
warum das Strippen von Debug-Symbols
die App kaputt gemacht hat.
Wahrscheinlich,
weil das so ein Kleines,
ein Native-Rapper drumherum hat,
um es zu starten
und die Deno-Runtime zu booten quasi.
Und die wird nicht mehr funktionieren,
wenn Debug-Symbols gestrippt sind.
Du bist ein...
Ich bin ein relativ...
Was?
Ich bin ein relativer Linux-Sessor
und habe mir neulich Arch entsteht.
Natürlich.
Was sonst?
By the way.
Wie viel Glück habe ich darauf,
in einem Programmlauf zu sein,
dass es nicht...
Kommt drauf an,
wie das distributed wird.
Wie wäre es mit Nix?
Hast du mal den Nix-Package-Manager probiert?
Nix hat nochmal jede Menge Extra-Packages.
Ach so, Moment.
Es ist ein Closed-Source-Debian-Package.
Ach so, ja gut.
Dann gibt es das auch als NixOS-Package.
Also, du musst das Debian-Package auspacken
und dir das Binary da rausholen
und dann hoffen, dass es funktioniert.
Die Chancen stehen aber nicht schlecht.
Ansonsten, wisst ihr,
solltest du einfach das in einem Docker-Container ausführen
und dir keine Gedanken machen.
Und dann kannst du das in einem Docker-Container ausführen.
Und dir keine Gedanken machen.
Führ es in einem Debian-Docker-Container aus,
dann hast du überhaupt keine Probleme mehr.
Oder führ es in, wie heißt das andere?
OS-Box oder sowas?
OS-Box?
Nee.
Das meine ich nicht.
Wie heißt denn dieses Ding,
wo man sich eine quasi...
Was? Dev-Box?
Distro-Box?
Nee.
Ich meinte natürlich den VM-Champ.
Was sonst?
Mit dem würde es auch funktionieren.
Was? Distro-Box?
Ja, das meine ich. Distro-Box meine ich.
Distro-Box.
Aber ich würde es einfach in einem Docker-Container starten.
Und gut ist.
Das machen wir jetzt übrigens auch mal.
Also, wir testen jetzt mal,
wie statisch und wirklich self-contained
das Deno-Binary ist.
Also, dass unsere Deno-App,
unsere 84MB-Deno-App,
die wir als Single-Binary kompiliert haben,
auf meinem System läuft,
auf dem ich es kompiliert habe,
ist eigentlich nicht so.
Das ist eigentlich relativ klar.
Wenn ich mir das hier allerdings so angucke,
habe ich so meine Zweifel,
ob das sonderlich gut rückwärtskompatibel ist.
Jaja, wenn das viele Dependencies hat,
lasst es in einem Debian unter Docker laufen.
Dann ist es am einfachsten.
Lad das mal hoch.
Kann ich machen, aber viel einfacher ist es,
wenn ich sage, wenn wir hier einfach Docker run.
Wir führen es mal auf was halbwegs Modernem aus.
Okay?
Wir führen es mal auf einem Ubuntu 2404 aus.
Und dann gucken wir mal, ob das funzt.
Chat, Predictions, meint ihr, meint ihr, es funzt auf einem halbwegs neuen Ubuntu?
Also, ich kopiere das Binary auf ein neues Ubuntu auf dem 2404 drauf
und gucke, ob es funktioniert.
Also, ich glaube auch, dass die Chancen auf dem 2404 tatsächlich relativ hoch sind.
Dürfen wir aber nicht vergessen, Archie-Lungs ist ziemlich aktuell.
Wie ging das jetzt noch einmal?
Minus V, gell?
Minus V.
Dollar, PWD, Mountain nach, ja, was weiß ich, Plup oder so.
Können wir Channel-Punkte gambeln?
Okay, okay, Chat, weil ihr es seid.
Machen wir mal.
Prediction.
Moment, der Max hat schon eine gemacht.
Genau.
Ja, ja.
Ihr könnt, ihr könnt Channel-Punkte, Channel-Punkte gambeln, wenn ihr wollt.
Ihr müsst ja irgendwie eure 1000 Milliarden Channel-Points loswerden, ne?
Mit denen man eigentlich nichts Sinnvolles machen kann.
Außer mich ans Trinken erinnern.
Was aber auch immer sehr hilfreich ist.
Okay, die meisten Leute sagen, so wie es aussieht, dass es läuft.
Jetzt bin ich mal gespannt.
Bam.
Schauen wir mal.
Okay, Plup.
Da liegt die App.
Punkt, Slash, App.
Kunst.
Okay.
Ubuntu 2404 funktioniert.
Das ist aber auch, sagen wir mal, das Mindeste, was man, glaube ich, erwarten kann.
Das sind beides halbwegs aktuelle Sachen.
So, sind wir mal, sind wir mal ein bisschen optimistischer.
Machen wir mal, wir machen mal alle Ubuntu LTS durch, okay?
Wir machen mal alle LTS.
Wir gambeln jetzt aber nicht für jedes, für jedes.
Wir gambeln das nächste Mal für, wenn das jetzt funktioniert, das nächste Mal Channel-Punkte gambeln machen wir für, äh, 1804.
Für 1804.
Aber erstmal hier das probieren.
Was ist diese Schmalspur-Docker-Linux?
Alpine, ja, aber ich mag Alpine nicht so.
Die coolen Leute verwenden, verwenden Distroless heutzutage.
Was besonders gut mit Go-Binaries geht, weil sie keine Abhängigkeiten haben.
Und ansonsten ist ein Minimal-Debian auch vollkommen in Ordnung, finde ich.
Ich mag Alpine nicht.
So, Chat.
Wir prädikten jetzt nicht mit Channel-Points, sondern ich, ähm, schrummele mal etwas User-Interaktion im Chat, damit mich Twitch direkt auf die Startseite befördert.
Wer meint...
Wer meint, dass es funktioniert, unter Ubuntu 20.04, äh, 22.04, plus in Chat oder Daumen hoch oder was auch immer.
Wer meint, dass es nicht funktioniert unter 22.04, Minus oder Daumen runter oder denkt euch irgendwas aus.
Twitch ist nicht YouTube.
Ja, zum Glück ist Twitch nicht YouTube.
YouTube fuckt mich nämlich ab.
Als, als Viewer, wohlgemerkt.
Okay.
CentOS 7 machen wir alles.
App geht noch.
Okay.
Kunst noch.
Das nächste machen wir einfach mal.
Schnell, probieren wir mal 20.04 aus.
CD, plopp.
Kunst auch.
Finde ich sehr gut.
Finde ich sehr gut.
Okay.
18.04.
Dafür können wir jetzt eine Prediction machen.
Da können wir eine Prediction für machen, ob es 18.04 geht.
Na, auf dem Arm wird...
Auf der Armkiste wird das nicht laufen.
Das ist ja eindeutig ein x86-Binary.
Oder ist es das?
Oder mache ich das eigentlich im Container?
Ja, das ist einseitig ein 64-Bit x86.
Ja, das ist ein...
Ja, das ist ein...
Ja, das ist ein...
Ja, das ist ein...
Ja, das ist ein...
Ja, das ist ein...
Ja, das ist ein...
Ich kann mir das komplett knicken.
Denu Compile kann Cross-Compilation für Arm...
Wirklich?
...supported targets.
Cool.
Nice.
Auf dem Elbphil wird es wahrscheinlich nicht funktionieren.
Okay, Prediction.
Prediction ist noch nicht durch, da muss ich kurz abwarten.
Die grausamste Folter in Japan.
Ja, ja, ist ja gut.
Keine...
Wie wollen, dass ich das Video gucke?
Gucken wir jetzt nicht.
Okay.
So, Prediction.
Ist durch.
Die meisten sagen, es funzt auf 1804.
Ich sag euch ehrlich, ich bin da nicht so zuversichtlich, ob es auf 1804 funktioniert.
1804 ist schon ziemlich alt.
Das ist gut, das hätte ich nicht gedacht.
Wo hast du definiert, von wo sich Docker die Images pullt?
Docker pullt sich standardmäßig von Docker.io.
Das finde ich gut.
Okay, jetzt sind wir mal ganz mutig, Leute.
CentOS 7.
Da machen wir aber keine Prediction.
Für CentOS 7.
Was meint ihr?
Das kann ich mir ja nicht vorstellen, dass es unter CentOS 7 funzt.
Da würde ich auch Minus sagen.
Ne.
Okay.
G-Lib 10, G-Lib C218.
Das ist schon mal gut zu wissen.
Wann kam denn G-Lib 2 C218 raus?
2013.
Oh, das ist, das ist aber gut.
Das ist, das ist...
Leute, das ist...
Leute, das ist viel besser, als ich gedacht habe.
Das ist gut.
Guckt mal, die sind rückwärts kompatibel zu allen Linuxen der letzten 11 Jahre.
Das ist ja quasi...
Das ist ja fast so gut wie Go.
Go ist auch zu 2.6.38 kompatibel.
Wobei man sagen muss, bei Go ist die Abhängigkeit wirklich nur auf den Kernel und nicht auf die G-Lib.
Das ist, das ist gut.
Das ist gut.
Da kann man echt nichts sagen.
Da kann man sich nicht beschweren.
Das, das ist, das ist echt usable, muss ich sagen.
Das ist echt gut.
Das finde ich gut.
Das ist ein großer Pluspunkt für mich.
Ja, weil beispielsweise irgendwelche CLI-Tools oder sowas, wo es gute JavaScript-Libraries gibt, aber vielleicht nicht so gute Go-Libraries und nicht so gute .NET-Libraries.
Da kann man sich zumindest sicher sein.
Deno, Compile.
Ich meine, das Binary ist halt abfackgroß.
Aber ist klar, da ist halt die Deno-Runtime mit drin.
Aber 2.18 ist, ist schon nicht schlecht.
Ja, gehen wir mal auf einen Ubuntu.
Ubuntu 14.04, das sollte ja eigentlich funzen, ne?
Funzt.
Das finde ich gut.
Da muss ich sagen, Hut ab.
Hut ab.
Deno Leute, habt ihr, das habt ihr, habt ihr euch für gute, äh, quasi Basis-Rückwärtskompatibilität entschieden?
Die einzige Sache, wo ich mir ein bisschen Gedanken mache, ist die Binary-Size.
Weil das sind 84 MB, ohne dass meine App was macht.
Ich meine, meine App ist aktuell das hier.
Ich weiß nicht, wie groß das Ganze wird, wenn man da ein bisschen, ein bisschen Zeug nachinstalliert.
Aber 84 MB ist, ist schon mal eine Hausnummer.
Aber es ist auch okay.
Es ist verständlich.
Ich meine, es ist die komplette Deno-Library drin.
Kann man das Ganze denn beispielsweise noch komprimieren?
Kompress oder so?
Ne.
Aber Cross-Compilen kann man...
Kompress kann man angeblich.
Guck mal, man kann, man kann angeblich sagen,
Deno-Compile,
Minus, Minus-Target,
und dann kann man hier sagen,
für, bei,
für ARM64 zum Beispiel.
Kompilieren.
Nilux ARM64.
Ja, Funster auch.
Lässt sich jetzt natürlich nicht mehr ausführen,
weil ich auch x, äh, x86 bin.
Ist sogar ein bisschen, die ARM-Version ist sogar ein bisschen kleiner.
Gehen überhaupt auch alternative Libc-Implementierungen?
Ich glaube, das geht noch nicht.
Also ich glaube, unter Alpine wird man das Ganze dann nicht zum Laufen bekommen.
Aber dass man das so schön Cross-Compilen kann, finde ich nice.
Wir können ja mal kurz gucken, also es gibt...
Wir probieren es mal aus, wir probieren es mal aus.
Ob das funzt, es wird aber nicht, das wird aber nicht auf Alpine laufen.
Aber vielleicht können wir Deno selbst kompilieren auf Alpine und dann geht es.
Ja, das könnte natürlich sein.
Docker run.
Machen wir hier Alpine, Alpine, Latest.
Da bin ich zu planlos, wie macht man das mit Alpine?
Okay, gibt keine Bash.
Dieses so minimalistische Bash gibt es nicht.
Blub.
Ne, okay, läuft nicht.
Aber können wir Deno install Alpine?
Wie heißt das? APK Search?
APK Update oder wie war das nochmal?
APK Install Bash.
Ja, angeblich ist ja TypeScript sogar native supported.
Ich habe ja eine App.ts, ohne dass ich zusätzlich was machen muss.
Okay.
APK Search Deno.
Okay, es gibt noch kein...
Dann machen wir doch mal hier das Curl in dem Alpine Docker Container.
Ach so, ja, okay.
Wir sind ja so minimalistisch, da gibt es das natürlich nicht.
Alter, ich bin sowas von...
Okay, hier, root bin Deno.
Äh, nee.
Nee, nee, das funktioniert nicht.
Das funzt nicht.
Deno läuft anscheinend nicht unter...
Alter, das ist so minimalistisch.
Da ist nichts dabei.
Lip Magic.
Wow.
Es sieht nicht so aus, als würde Deno unter Alpine gescheit laufen, hä?
Warum?
Weil ich Bash nachinstalliert habe.
Also, D...
Deno Alpine Install.
Das funzt anscheinend nicht so einfach.
Da gibt es den Deno 2.0 Alpine...
...Container, okay.
Sehe ich jetzt hier aber...
Doch, hier!
Tatsächlich!
Hier, oder?
Ähm...
Ja, dann probieren wir das doch mal aus.
Schmeiß ich meinen Krempel wieder weg.
Läuft da eigentlich U-Block auf Chrome noch?
Ja, aber die warnen schon, dass es bald aninstallt wird.
Deno.
Okay.
Chat.
Sicher, dass das ein Alpine ist?
Die App sollte nicht laufen unter Alpine.
Und die lief eben auch nicht.
Okay.
Auch nicht.
Ja, die ganzen glibc Sachen werden nicht gefunden.
Vielleicht...
Ja, vielleicht haben die das.
Also...
Ich traue der Sache ehrlich gesagt nicht so ganz.
APK List.
Ich sehe da jetzt nichts.
Ich sehe da jetzt nichts extra.
Ah, hier.
Äh, wie...
Alpine List Installed.
Wie macht man das?
How do I list installed packages?
Info.
Okay, das sind die installierten Packages.
Ne?
Manuell glibc rein?
Vielleicht.
Ja, vielleicht.
Was machen die denn hier?
Alpine Dockerfile.
Die...
Das ist irgendein init-cram?
Das ist eigentlich ziemlich egal.
Also, ich sehe jetzt hier ehrlich gesagt gar nichts, was die da großartig drinnen machen.
Ja, aber...
Aber eigentlich habe ich glibc dependency, dachte ich.
Deswegen wundert es mich nicht.
Deswegen wundert es mich, dass das funzt.
Denocompile.
Machen wir nochmal appts.
Ja.
Und jetzt gucken wir uns mal an, was das sagt.
Immer noch.
Also...
Ich bin...
Ich bin skeptisch, ob das wirklich jetzt läuft unter Alpine.
Wir können das ja mal ausprobieren.
Ich...
Ich starte nochmal den normalen Alpine Container.
Ja, der heißt jetzt kekw2 meinetwegen.
So.
Da läuft das Ganze nämlich nicht.
So.
Und jetzt gucken wir mal info, was da installiert ist und installieren das einfach mal nach.
Und dann gucken wir mal, ob das...
Ob das funzt.
apk add...
Hier machen wir mal diesen ganzen...
Zlib könnte sowas sein zum Beispiel, wo ich mir so denke...
Ja...
Und libssl und solche Dinger.
Da kann ich mir durchaus vorstellen, dass das eben dependency ist.
Busybox wird es nicht sein.
Ne.
Also...
Also...
Die haben da irgendwelche Spezialsachen auf jeden Fall noch mit drinne.
Was nehmen die denn als Base-Image?
Okay.
Dann check ich nicht, wie die das gemacht haben.
Aber...
So normal funzt das schon mal net.
Kann den anderen Krempel auch nochmal installieren, den ich jetzt nicht installiert hab.
Aber das...
Das...
Das wird's...
Das wird's im Endeffekt auch nicht...
Nicht sein, ja.
Die kopieren den libfolder.
Zeig mal.
Ach!
Ach!
Hier!
Ja!
Ja, dann ist es kein Wunder.
Ja, dann ist es kein Wunder.
Die kopieren diesen ganzen Krempel mit drüber.
Ja gut, dann ist klar, dass es funzt.
Weil, das ist ja...
Das ist ja standardmäßig unter Alpine eben nicht da.
Ja, okay.
Aber...
Naja.
Okay, also es gibt anscheinend keine...
Möglichkeit, dass die Deno-Binaries unter einer...
Einer nicht gelib...
C...
C-Linux-Distro laufen aktuell.
Da muss ich euch aber ehrlich sagen.
Find ich persönlich jetzt gar nicht so schlimm.
Wen juckt Alpine?
Ich mag Alpine eh nicht.
Kann mir Werner einen guten Router empfehlen, auch länger als einer Security...
Willst du einen Router?
Zum Routen?
Oder willst du ein Multifunktionsgerät?
Willst du eher...
Suchst du quasi so eine Art Fritzbox?
Oder suchst du wirklich einen Router, der wirklich...
Hauptsächlich zum Routen da ist?
Ich vermute mal, du suchst einen Fritzbox.
Du suchst den Fritzbox-Ersatz, oder?
Weil Router...
Ist eigentlich ganz was anderes.
Ja.
Also...
Fritzbox ist ein Multifunktionsgerät, die unter anderem auch ein bisschen routen kann.
Ehrlich gesagt finde ich die Fritzbox ganz gut.
Und ich habe meine Fritzbox seit 5 Jahren oder so.
Und die kriegt immer noch Updates.
Ich weiß nicht, was man...
Was hast du denn für eine Fritzbox gekauft, dass die wirklich nur ein Jahr Updates bekommt?
Meine bekommt schon ewig Updates.
Und das ist so eine ganz billige.
Die hat sogar nur 100 Mbit-Ports.
Ich gehe damit auch nicht ins Internet.
Die macht nur DECT.
Und VOIP und so Zeug.
Das habe ich gesehen.
Da gibt es ein Issue.
Aber das geht anscheinend noch nicht.
Okay.
Aber ganz ehrlich.
Wen juckt Alpine?
Ich finde es sehr gut, dass die Sachen auf dem Ubuntu 14.04 laufen.
Also das hat mich überzeugt.
Muss ich sagen.
Deno.
Das finde ich nice.
Rückwärtskompatibel bis 2013 ist glaube ich wirklich mehr als genug, oder?
Was sagt ihr?
Das reicht.
So.
Dann widmen wir uns mal weiter ein paar Deno-Features.
Also das hat mich überzeugt.
Was mich in der Tat nicht so überzeugt ist...
Was mich in der Tat nicht so überzeugt sind 87 MB Binary-Size.
Aber letztendlich ist Binary-Size auch fast egal.
Du hast ja heutzutage keine Speicherplatzprobleme oder so.
Es ist natürlich schon nice einen Go-Binary zu haben, was irgendwie vielleicht nur 8 MB ist.
Aber wir dürfen nicht vergessen, da ist eine volle JavaScript-Runtime dabei.
Also es ist schon okay.
Und im Endeffekt, im Endeffekt juckt es ja auch nicht.
Es wäre schön, hätten die noch die Möglichkeit das Binary zu komprimieren.
Gibt es vielleicht die Möglichkeit Deno Compile, Compress oder so?
Was ist UPCS?
Was ist UPCS?
Ultimate Packer for Executables.
Habe ich noch nie gehört.
Das klingt, das klingt mir auch ein bisschen nach keck wie Windows, oder?
Ja.
Programm Excel.
Oh mein Gott.
Okay.
Das überzeugt, moin Patrick.
Das überzeugt mich.
Ich finde das gut, was die bei Deno gemacht haben.
Also rückwärtskompatibel 11 Jahre.
Ich glaube da kann sich keiner beschweren.
Das ist, das ist, das ist fast so gut wie Go.
Natürlich ist es in Go noch ein bisschen statischer, noch ein bisschen unabhängiger.
Und auch wirklich nur als Dependency Mindestkernel Version 2.6.38.
Das ist hier ein bisschen mehr.
Aber im Großen und Ganzen finde ich das gut.
So.
Das gefällt mir.
So, was haben wir bei Deno noch schönes mit am Start?
Wie sieht das denn aus mit NPM Packages?
Wir müssen das, Leute, wir installieren mal das mit Abstand wichtigste NPM Packages.
IsEven.
Oder was installieren wir?
Installieren wir IsOdd oder IsEven?
IsOdd installieren wir.
Das, das wichtigste NPM Package ever.
Was nur, haltet euch mal fest.
Was nur 300.000 Weekly Downloads hat.
Warum es auch immer ein Package dafür gibt.
Okay, wie macht, wie macht man das?
Deno Blog.
Deno 2 Blog.
Da stand doch irgendwie sowas drin.
Deno Add.
Ja.
Add.
Wie ging das?
Package Manager.
Package Manager.
Deno Install.
Deno Add.
Okay, was, was ist denn?
Macht man da einfach NPM jetzt?
Ups.
Deno Add.
Macht man jetzt einfach NPM?
NPM davor?
IsOdd.
Tatsächlich.
Funst.
Was ist denn der Unterschied von?
Äh, nicht ManPaged.
Was ist denn auch nicht Deno Add zu Deno Install?
Add dependencies to your config file.
Und Install?
Okay, Install ist quasi Add.
Das ist der, Deno Install ist quasi ein Add oder ein globales Installieren.
Wenn das nicht im Projekt ist.
Sehe ich das richtig?
Deno.
JSON.
IsOdd.
Okay, da probieren wir jetzt mal aus, ob das, ob das funst.
Wichtigste, wichtigste Library überhaupt.
Moment, das ist doch mit Require.
Das kann ich überhaupt nicht verwenden, glaube ich.
Okay, dann probieren wir mal was aus.
Deno Remove.
Okay, nice.
Hat jemand mal ein halbwegs modernes NPM Package im Kopf, was wir mal gerade mit Deno ausprobieren können?
Irgendwas, was auch im Browser funsten würde mit normalem Import.
Irgendwas.
Irgendwas Kleines.
Irgendein kleines NPM Package.
Irgendein halbwegs modernes kleines NPM Package.
Fällt einem irgendwie was gerade ein?
Aus dem Kopf.
QR Code.
Das ist eine gute Idee.
Heißt das so?
2,4.
Nice.
Okay.
Okay.
Nee, nee, nicht express.
Hör mal bloß auf.
NPM.
Add.
QR Code.
So, der wird jetzt erst mal das halbe Internet runterladen, wie man hier schön sieht.
Haben wir auch schön Dependencies dabei.
Alter.
Hört ja gar nicht mehr auf.
So, und jetzt können wir das tatsächlich mal ausprobieren.
Require Code.
Require QR Code?
Was?
Ich will den Kram importieren.
Import.
Hier Import.
QR Code from QR Code.
Genau.
So.
QR Code.
Und dann?
QR Code Generate.
Ähm.
Ich bin mir nicht ganz sicher, was das hier eigentlich macht.
Gerade, wenn ich ehrlich bin.
Mobiliert das überhaupt?
Run.
Deno.
Run.
Funst.
Run.
Run.
Run.
Run.
Run.
Run.
Run.
Run.
Run.
Run.
Run.
Run.
Run.
Run.
Run.
Run.
Run.
Run.
Run.
Run.
Run.
Run.
Run.
Run.
Run.
Run.
Run.
Run.
Run.
Run.
Run.
Run.
Run.
Run.
Run.
Run.
Run.
Run.
Run.
Run.
wir hätten wir könnten das auch unter moment wo kommt das jetzt her das ist doch wieder was
anderes oder hier das ist das ist wieder was anderes da hat irgendjemand da hat irgendjemand
seinen eigenen krempel gepacket okay weil wenn man das wenn man das über die deno package registry
installiert hätten dann hätten wir wahrscheinlich schon typescript signatures mitbekommen wenn ich
das richtig sehe den install types types das kann man so davor schreiben oder wie ok und das
soll jetzt funsten oder doch doch das funst leute das ist zwar magic aber das funst man
kann ja einfach die quelle für die typen von für die type infos angeben guck mal jetzt haben
wir type infos
das ist zwar ein bisschen durch die brust ins auge aber das finde ich sehr nice dass das so
native supported ist von den denoran ok dann kompilen wir das jetzt noch mal gucken wie
groß das jetzt ist ich weiß nicht was das ist steht in den denodocs so drinne ok es ist ein
bisschen größer geworden aber hält sich in grenzen aber es funst noch alles da kann man sich doch
nicht beschweren oder hat qr code so was wie to to to to eh nicht to string ich habe
gedacht vielleicht kann das so was wie als ascii art das malen kann qr code so was hier terminal doch
das geht ja guck mal an to string und jetzt options options type terminal übrigens ist das auch dass
das form form formaten funktioniert nicht richtig ach guck mal deno kann das ist ja gut
ah
ah
ah
ah
ah
ah
ah
ah
ah
ah
ah
ah
ah
ah
ah
ah
ah
ah ah
ah ah
ah
ah
ah
ah
ah
ah
ah
ah
k
k
das finde ich cool
ein qr code in dem omega keckel drin steht
das ganze jetzt kompilen
schon haben wir eine app die omega keckel als qr code ausgibt rückwärts kompatibel für alle linux
distributoren
distributionen denn auch der art für alle geliebte basierten linux distributionen der letzten elf jahre
dennoch das gefällt mir das hat was
der funst sogar
ja ja der funst der funst
wir können ich habe hier im qr code reader kann man machen hier qr code
mal gucken was was mein qr code scanner dazu sagt damit apple aber wahrscheinlich sagen was willst du von uns
ne funst
der sagt das enthält text omega keckel
ja
geht bei mir auch direkt wenn ich das handy drauf halte
sehr nice
Um nicht zu sagen äußerst
Oder was sagt ihr
ich finde das äußerst
omega keckel pock ich bin 40 bei the way
mal an der stelle mal einwerfen ja
so das finde ich sehr schön das gefällt mir
richtig typischer typischer
boomer satz ja wer kennt ihn nicht
kriegs wie 27 ja ich komme ja auch wie 27 vor aber ich bin 40
also körperlich merke ich dass ich nicht 27 bin aber wenn ich so war spontan daran denke würde ich sagen nicht viel älter als 27
aber in meiner generation ist das eh so
dass also also dessen boomer oder nicht boomer zieht sich komplett durch meine geld durch meine generation durch du hast die leute
sag ich mal wie ich die so mit technik sachen aufgewachsen sind und sich auch früh dafür interessiert haben weil in
meiner generation wurde es ja so richtig mainstream meine kindheit
war
fast ohne technik
aber als ein jugendlicher war ging es los ja und da gibt es einmal leute wie ich die sich damals für computer kram und sachen internet später
interessiert haben
die reden heute mit 40 in twitch emotes max seiche für den sub
Und
dann hast du welche die schon angefangen haben quasi
zum stammtisch zu gehen und darüber sich
auszukotzen dass sie alles besser wissen die sind dann schon boomer mit 40 in meiner generation
Mr. SNA live habe ich gar nicht gesehen danke für den sub ich mache jetzt kein subscription sellout oder so
jeder der den prime sub hat und bock hat mir den zu geben freue ich mich drüber aber ansonsten ich finde es einfach nice dass
ihr alle am start seid
übrigens normaler follow wenn ihr mehr solchen content sehen wollt ist auch nice
muss ja nicht hier gleich subscribed werden aber einfach follow ist auch ist auch schön zu sehen grüne pfeile wisst ihr grüne pfeile nach oben
zeigen sind immer super motivierend habe ich heute auch wieder gesehen ich hatte plus vier performance condition in meiner
Running app
da habe ich mir gedacht jawohl plus und grüne und pfeile da oben zeigen optimal es geht es geht wieder aufwärts
so das ist jetzt unsere demo app dies zunächst nutze aber die printen qr code das schon mal ein nice und wisst ihr was das coole ist
guck mal
das coole ist sogar
auf ubuntu
14 04
Printet es ein qr code krasser schild oder
kann man eigentlich mehrere prime subs mit mehreren prime subscriptions geben
Ja aber du brauchst glaube ich mehrere accounts dafür
warum spams du eigentlich immer eins in jedes textfeld ja fragt der chat hat schon gepostet warum
ubuntu 14 04 ja sogar in also in centos 7 hat es nicht
funktioniert
aber in centos 8 wird es funktionieren
bei dem er wenn er so hat noch irgendwelche allgemeinen fragen habt und so eine haut auch immer immer in chat
ran ich bin nur mal kurz zum
verifizieren send us 8 gibt es ja gar nicht mehr es gibt ja es gibt red hat acht gibt es das eigentlich auch als docker container
schon nie ausprobiert
Hätte mich hätte mich jetzt auch
Gewundert ja was gibt es denn?
für schöne rocky linux oder rocky 8 vielleicht was ist denn so der schönste der der beste red hat nachbau den man aktuell so verwendet
alma
versus rocky oder so
was ist eine angesagt zurzeit centos war es früher da muss man sich gar keine gedanken machen
ne
Docker rocky linux das heißt rocky linux
rocky linux 8
was ist denn alma
versus rocky linux
geht das auf windows auch was ist das
wenn du sagst was das ist
jawohl von snyder centos 8 safe
saved ok was gibt es denn sonst noch schönes neues bei
dino
formatter linter ok ich linte ich linte mal mein high iq javascript code den lind
wie
will er mir sagen das ist perfekt der javascript code
Teste war ich las mal eine semikolon weg moment der machte semikolon einfach wieder hin save without
without formatting
Oracle linux stimmt das gibt's auch noch aber oracle verwendet aus prinzip nicht
Jetzt meckerte, aber nicht
also den dino lind
interessiert sich auf jeden fall schon mal nicht für mein semikolon
Was kann, man denn für ganz grausame javascript verbrechen
begehen die auf jeden fall einen
Linta anmeckern muss.
Habt ihr eine Idee? Unsinnige Leerzeichen.
Hier, so.
Also wenn das in Linta nicht anmeckert, dann weiß ich
auch nicht. Juckt ihr nicht.
Mach ich irgendwas falsch?
Ich mach mal einen Syntaxfehler rein,
okay?
Hä? Deno Lint.
Muss man dem vielleicht sagen,
was er machen soll?
Lint, Javascript
und Typescript.
Okay, was muss denn in
Javascript? Linte mal
eine ganz andere Datei.
Deno Jason.
Ne, mag er nicht. Also das funzt schon
mit FTS.
Okay, das ist schon mal kein Linting-Fehler.
Was könnte denn
ein Linting-Fehler sein?
Keine Ahnung.
If
ähm
Ähm
If 1
gleich gleich 1 oder sowas.
Guck mal, da mängert er sogar hier.
Ja.
Okay.
Okay.
Da mängert er.
Use of constant expression as conditional
allowed. Empty block statement.
Okay. Wenigstens haben wir dazu gekriegt.
Okay, das erfunst prinzipiell
der Deno Linta.
So, Deno FMT.
Ich find's übrigens sehr nice, dass
Visual Studio mit dem Deno-Plugin
das standardmäßig anbietet.
In Deno-enableden Projekten
standardmäßig den Deno-Format.
Ich find das... Soll ich euch mal was sagen?
Ich find das richtig gut bis jetzt.
Das gefällt mir echt.
Viel weniger rumgefuddel.
Ich geh mal davon aus,
spätestens wenn man versucht, ein Svelte-Kit-Projekt
zu machen oder sowas,
da wird man sicherlich
seine Probleme bekommen.
Gerade mit dem Visual Studio
Code-Plugin. Aber da hab ich heute
gar Zeit mehr für, das auszuprobieren.
Gucken wir uns die mal noch ein paar andere Sachen...
Aber das find ich sehr nice.
Also das hat echt was.
Ihr könnt mir auch vorstellen, das in Zukunft
tatsächlich zu verwenden.
Für Command-Line-Tools oder sowas.
Mal angenommen, man will ein Command-Line-Tool bauen
und es gibt eine richtig gute JavaScript-Library
für genau dieses Problem,
was man damit lösen will.
Sagen wir mal, für Go oder .NET
gibt es keine.
Dann würde ich das mit Deno und
Deno-Compile tatsächlich in Erwägung
ziehen, das so zu machen.
Doctests sagt mir nix.
Ich hab das dann
alles durchschaut.
Die hatten doch hier so
einen Vergleich.
Deno-Doc. Ne, wir brauchen
keine Docs.
App-TS.
Der generiert einfach keine Docs für mich.
Brauchen wir nicht.
Das Welt-Kit wird von Deno supportet. Wurde sogar in der Präsentation erwähnt.
Das ist nice.
Ich glaube aber, dass die Visual Studio Code-Plugins
da Probleme mit haben werden.
Weil gerade der Format da ist
noch ein bisschen
äußerst experimental in dem Plugin.
Und funzt mit
das Welt-Kit 5 oder das Welt-5 noch nicht richtig.
Weiß nicht, ob das Deno das Ganze
nicht vielleicht noch schlimmer macht.
Also Docs generieren geht schon mal
gar nicht, aber ich hab ja auch keine Docs.
Deno-Server.
Deno-Init.
Okay, da kann man ein neues Projekt anlegen.
Das gucken wir uns mal ganz schnell noch an.
Ich wollte eigentlich Plump schreiben, aber meinetwegen auch BL.
Deno-Init.
Oh ja. Tests.
Die rechnen schon damit,
die Sachen falsch,
dass man was kaputt macht.
Okay, beste Demo überhaupt.
Deno-Test.
Ein Test passed, zero failed.
Siehst du?
Und wenn man immer perfekt programmiert ohne Fehler,
ist das eh immer die gleiche Ausgabe.
Also braucht man auch keine Tests.
Okay.
Ich muss sagen, die haben echt
ihre Hausaufgaben gemacht.
Das ist simpel und es funzt out of the box
auch alles.
Das finde ich echt gut.
Das hat echt was.
Lass uns doch mal ein bisschen in die Standard-Library gucken.
Zum Beispiel Standard-Library
für Command-Line-Action.
Oder für Command-Line-Parsing.
Das ist doch schon mal ganz interessant.
Guck mal, man kann das direkt
importieren,
ohne dass man es adden muss zum Projekt.
Habt ihr das gesehen?
Das macht er dann erst zu Compile-Time oder sowas.
Deno
was Coverage.
Gibt's ja.
Also hier gibt's
einen Command-Line-Parser.
Jetzt hab ich jetzt ja eigentlich importiert Mod.
Das will ich nicht.
Ich will
Import ParseArgs
from.
Das will ich haben.
Das probieren wir mal aus.
Parse.
Wie funzt denn das?
Docs.
Das ist sehr übersichtlich.
ParseArgs.
Äh, was?
Das ist mir zu high IQ.
Deno CLI Args.
Da kommt mein EnvArgs-Array rein.
DenoArgs.
Deno.Args.
Moment, hier gibt's Examples.
Ist das was anderes, was ich aufhab?
Was ist das?
Wie komm ich da hin?
Auf diese Seite?
Wie komm ich von hier auf diese Seite,
die ich hier über Google gefunden hab?
Hier.
Ah.
Was macht ConsoleDir?
Okay, gibt's keine...
Wacht, was?
Probieren wir mal aus.
ParseArgs.
Run.
Nix. Es gibt keine Args.
Ja gut. Cackle als Arc.
Jawoll.
Cackle ist true.
Cackle gleich plupp.
Okay, Command Line Parse erfunzt.
So, und wie benutzt man das jetzt gescheit?
ParseArgs.
Und was kommt dann da?
Da kommt dann irgendein Args...
Objekt oder so raus.
Oder was kommt da raus?
Deno
CLIArgs.
Da muss man kurz die Achtung...
Meine Augen, Alter.
Kann man noch Options übergeben?
Was auch immer das jetzt
so bringt.
Kann man da sagen "-help"?
Also die Docs checke ich noch nicht ganz.
Okay, man kann sagen quasi,
es sind Options für
eventuell vorhandene Sachen.
Okay, Version immer als Strings.
Default is color true.
Okay, verstehe ich, verstehe ich.
Leuchtet ein.
Aber wie greife ich denn jetzt
drauf zu auf die Argumente?
Ist das jetzt quasi so ein...
Kann ich jetzt quasi sagen Args?
Äh, ja.
Cackle oder was?
Undefined minus minus Cackle.
True. Ach so ist das.
Ja, was gibt's
hier groß zu lesen? Zwei Zeilen.
Okay, so funzt das.
Ich meine, das ist minimalistisch,
aber
durchaus zweckmäßig.
Also können wir das quasi
sagen, deno args
oder so sinngemäß hier irgendwie
was weiß ich, if
if
if
das
Nur dann geben wir den QR, oder machen wir mal anders.
Deno if QR
So, nur dann gibt er den QR-Code
aus, ansonsten gibt er halt
standardmäßig das blödsinniges
Beispielprogramm, aber okay.
Also jetzt gibt er nur die Zahl aus, wenn ich sage
minus minus QR, gibt er den QR-Code
noch aus. Okay.
Macht das das jetzt viel
größer? Nö.
Eigentlich gar nicht.
Und wisst ihr, das finde ich interessant,
guck mal, man kann hier angeben,
dass er hier sich das Package
herholen soll, und
in dem, in dem
deno, in dem deno-File
steht nichts davon
drinne. Doch.
Hier.
In dem deno, in dem deno-json
steht's nicht drinne, aber in deno-log steht's drinne.
Okay, was
was auch immer.
Aber das finde ich cool. Das ist nice.
Leicht,
wenn man dem Editor das hinzufügt.
So, was haben wir denn standard-Library-mäßig
sonst noch?
Async. Okay.
Bytes.
Okay, das ist ganz nice, wenn man mit Binary-Zeugs
rumhantieren muss.
Ceboar. Keine Ahnung, was das ist.
Aber dass ein CLI-Parser standardmäßig
mit dabei ist, der macht einen relativ rudimentären
Eindruck.
Aber das reicht ja in der Regel schon.
Du brauchst ja meistens hier keine
super-advancen Sachen.
Muss ich ja nicht übertreiben.
Dann haben wir noch
Collections, das haben wir uns schon angeguckt.
Crypto-Stells, CSV.
Data Structures, was gibt's denn
da alles?
Binary Tree Inverten, Leute.
Können wir uns direkt bei Google bewerben danach.
Binary Heap,
Binary Search Tree, Red-Black-Tree,
Binary Heap.
Ich kann mich nicht daran erinnern, wo ich das letzte Mal gebraucht habe.
Aber gut, dass es das gibt.
Date-Time.
Das finde ich schon mal...
Moment, das ist die Standard...
Das ist die Standard-JavaScript-Date-Time.
Ah, nicht ganz.
N-Files,
Encoding...
Okay, das finde ich schon mal nice, dass standardmäßig
Base64-Encoding, Decoding
dabei ist. Wobei das im Browser doch auch
standardmäßig dabei ist, ne?
Im Browser kannst du doch auch...
Ist im Browser nicht standardmäßig
auch Base64 mit dabei?
Kann durchaus sein, dass das nicht so ist.
Okay, laut Mozilla ist das
nicht standardmäßig mit dabei.
Zumindest Deno hat was
in der Richtung dabei, das ist sehr praktisch.
Effects, FMT...
Extract FrontMatter
vom String. So, ich habe keine... Was ist FrontMatter?
What is FrontMatter?
Ja. Metadata
in Markdown-Files. Okay.
File-System-Helper.
JSON-Stells ist
standardmäßig mit dabei.
Okay. Gut.
Wenn kein JSON-Handling in der Standard-Library
heute dabei ist, sollte die sich nicht Standard-Library
nennen.
Es gibt...
File-System-Klempe.
Wie sieht
denn hier File-Read aus?
Gar nicht.
Weil ich kann mich noch... Ich habe einmal mit
Cloud-Dateien eingelesen. Das war
super weird, Champ.
Da gibt es aber
ein I-O-Modul, oder?
Aber FS hätte ich jetzt eigentlich schon erwartet,
dass man
eine Datei öffnen kann.
Aber anscheinend nicht. Es gibt
kein Open, oder?
Es gibt quasi nur so Directories
anlegen, verschieben
und sowas, aber öffnen nicht.
Das Öffnen ist wahrscheinlich in I-O.
I...
Ja, JSON gibt es anscheinend standardmäßig in Deno.
Warum soll
I-O verschwinden?
Logging-Framework.
Okay, das ist auch nice, dass sowas dabei ist.
Da kriegt man ordentlichen
Log-Output.
Gibt es was für Multi-Threading?
Das ist eine gute Frage.
Streams. Text.
Mich würde erst einmal interessieren, wenn man beispielsweise...
Jammer? Haben wir UID?
Okay, es hält sich noch sehr in Grenzen, aber
sie...
Multi-Threading sieht...
Ne. Sieht nicht so aus.
Es ist aber auch mit...
Generell mit JavaScript
immer schwierig. Im Web...
Also, im Browser geht das ja gar nicht. Da brauchst du quasi
extra Webworker dafür.
Und musst dann über irgendwelche komischen
Message-Queues mit denen reden.
Also,
anscheinend auch nicht, ja.
Ja, V8 kann das
sehr rudimentär, so wie man es mit Webworkern
macht. Das ist dann quasi so ein eigener
JavaScript-Prozess, glaube ich.
Das ist sehr
rudimentär generell, so...
Multi-Threading in JavaScript.
Wie... Aber Deno... Deno
Read File. Wie macht man das?
Reading Files. Deno by
Example.
Deno Open. Das ist ja genauso
abartig wie in Node.
Gibt es kein Deno
Read All...
Irgendwie...
Read All Texts from Files
oder so? Ah, ne, doch hier.
Read Text File. Ne, da ist es doch. Okay, ich habe nichts gesagt.
Deno
Read Text File.
Contents over
files.
Genau sowas...
sowas meine ich.
Ja, das ist gut, dass es das gibt.
Gucken wir mal, ob das funzt,
die Basic Sachen. Wir öffnen jetzt einfach mal hier
im gleichen Verzeichnis.
öffnen wir jetzt, lesen wir jetzt mal ein.
Run.
Was?
Wow.
Chat GPT schon sinnvolle Antworten. Das ist mir
vollkommen egal.
verstehe ich auch nicht, warum es nicht in FS oder
I.O. ist.
Deno requests read access.
Moment. Moment.
Und wenn ich das jetzt kompiliere,
dann kann er diese Rückfragen gar nicht kommen.
Moment, die Rückfrage kommt
auch. Ja gut, klar.
Die Rückfrage kommt,
weil das
ein Deno-Runtime ist.
Aber man kann wohl die Permissions mit
einkompilieren schon gleich.
Eigentlich gar nicht mal so blöd, ja.
Okay,
Funst. Also wie geht
das jetzt? Await.
Geht Top-Level Await?
Sehen wir, werden wir jetzt auch gleich sehen.
Ja.
Ups.
Allow read machen wir.
Ja, Funst.
Er liest die Datei ein.
Run. Compile.
Ja, cool.
Nicht schlecht. Ich meine,
ein bisschen weird champ, ein bisschen
gewöhnungsbedürftig, dass es in Punkt
Deno ist. Und sagen wir mal
nicht,
IO-Read-File oder FS-Read-File.
Das ist schon ein bisschen
merkwürdig.
Aber ich find's cool. Ich find's wirklich
nice, dass bei Deno so viel standardmäßig
dabei ist. Wobei man ja gar nicht sagen kann, dass er
standardmäßig dabei ist. Das ist ja nach wie vor ein Package.
Aber ich find gut, dass es
sagen wir mal Standard-Libraries
gibt, die man zwar
importieren muss
und runterladen muss, aber
die maintained werden von den
Deno-Leuten. Wo man sich dann halt auch
darauf verlassen kann, okay, wenn ich das
verwende in Deno, dann ist das auch
morgen noch da.
Da hast du ja bei JavaScript öfters mal Probleme.
Was Library-Support
langfristig angeht.
Das find ich gut.
Also ich muss echt sagen,
im Großen und Ganzen
gefällt mir das wirklich, wirklich
echt gut. Ja.
Wie gut das mit einer größeren App funzt.
Wenn man damit eine Svelte-Kit-App
bauen will und wie gut dann
das Svelte-Kit-Visual-Studio-Plugin
mit Deno harmoniert und solche Geschichten.
Das probier ich mal andermal aus, das krieg ich
heute in einer Viertelstunde nicht mehr auf die Reihe.
Aber so mein erster Eindruck, ich habe noch
nichts mit Deno bisher gemacht, ja.
Ich hab mir jetzt Deno erst bei Version 2
angeguckt. Und das, was
ich hier insgesamt sehe, find ich echt
gut. Vor allem, dass das
so simpel ist.
In Kombination mit dem Visual Studio Code
Plugin, was out of the box
formatiert,
on-save, lintet
und die Autocompletion
ordentlich funktioniert.
Da könnten sich andere Projekte was von
abschneiden. Chat, was sagt ihr
so Ersteindruck? Deno 2.0?
Also ich glaube nach wie vor nicht, dass
das Node ablösen wird.
Aber rein, sagen wir mal, zum
entwickeln von irgendwas. Laufen lassen
kann man es ja dann im Endeffekt immer noch mit Node.
Ne, kann man nicht, wenn man Deno-Sachen verwendet.
Aber insgesamt finde ich es eigentlich
ganz gut. Ich mein, dass
LTS 6 Monate geht, ist halt
keck W JavaScript.
Da sind 6 Monate ja schon Welten.
Ah, ich find's gut. Doch, mir gefällt das.
Wird sich eh nicht durchsetzen.
Also ich glaube nicht, dass es Node ablösen wird.
Ganz ehrlich.
Node ist einfach so krass
verbreitet und
auch irgendwo beliebt.
Ja.
Disappearance of an Internet Domain.
Boah, das ist ja ein riesen Artikel.
Also ich weiß, dass .io von irgendeinem
kleinen Inselstaat oder sowas ist.
Warum, warum, das interessiert mich jetzt.
Warum verschwindet die
.io Domain vielleicht?
Ich glaube nicht, dass die .io Outphase
da ist.
Es gibt so viele I.O.
Guck mal hier, wo wir gerade dabei sind.
Es gibt so viele I.O Domains.
Ich glaube, da gibt's ne Ausnahme für.
Ich glaub, da wird's ne Ausnahme für geben.
Es sieht so aus.
Nee, aber .io
gehört irgend so einer
Insel am Ende
der Welt.
Irgend so einem Inselstaat
am Ende der Welt.
Max, hast du das mit Uber mitbekommen?
Nein, ich hab nicht das mit Uber mitbekommen.
Was ist denn?
Was ist was
das mit Uber?
Ein Docker I.O und alle möglichen Sachen.
Also ich glaube nicht, dass .io
irgendwie ausgefaced wird.
Nintendo Alamo.
Nintendo, das ist ne Uhr.
Wozu? Warum?
But why?
Aber immerhin probiert Nintendo mal
ein bissl, bissl
was anderes drumherum.
Schon äußerst unsinnig.
Hast du dir schon mal ein Notebook-LM
angeguckt?
Klingt nach Language Model und hört sich irgendwie nach
AI an.
Easy with AI.
Nee, geh mal bloß fort.
Ich will nicht, dass irgendwelche Cloud-AI-Geschichten
meine Notebooks scannen.
Eigentlich keine
schlechte Idee.
Viele Leute haben enge Verbindungen
seit der Kindheit zu Nintendo Games.
Ich ja auch.
Gar keine schlechte Idee.
Bin gerade dabei, meinen Lebenslauf zu
aktualisieren.
Ab wann kann man Sachen in die Skill-Liste packen?
Ganz ehrlich, es gibt Leute, die packen
fortgeschrittene VMware-Kenntnisse
rein, weil sie mal Ubuntu
in VMware Workstation installiert haben.
Also macht dir mal nicht zu viele Gedanken.
Habe während meiner Ausbildung einige
Sachen mitbekommen, bin logisch kein
Experte drin, aber ganz unbekannt.
Naja, du musst ja in die Skill-Liste
nicht zwangsläufig reinschreiben, dass du
bei allem Experte bist.
Du musst auch dahinter schreiben,
ich suche gerade meine.
Hatten wir das nicht irgendwo hier?
Skills-PDF, da ist es doch.
Okay, ich habe auch nur die Sachen
reingeschrieben, wo ich ein bisschen mehr
Ahnung von habe.
Aber du kannst ja durchaus auch reinschreiben
irgendwie
Skill und dann
plus, plus, plus
oder plus, plus, plus oder irgendwie sowas
in der Richtung. Aber ganz ehrlich, scheiß drauf.
Wenn du denkst, du hast damit schon ein bisschen
Plan, schreib es ruhig rein.
Ich würde es reinschreiben.
Ja, kann man
auch so machen.
Das erinnert mich wie bei Disney, wo
einer so einen Disney Park
verklagen wollte, weil
die seiner Frau
Nüsse serviert haben und die ist gegen Nüsse
allergisch. Und da hat Disney gesagt,
nee, du darfst uns nicht verklagen, weil du hattest
ja mal oder irgendwie ein Bekannter von
dir oder deine Kinder oder wer auch immer hat mal ein
Disney Plus Abo abgeschlossen und da hast
du in den allgemeinen Geschäftsbedingungen akzeptiert,
dass du uns nie verklagen wirst.
Weiß nicht, was da rausgekommen ist.
Ah, ich sehe noch ein
Secret of Mana Enjoyer.
Ich bin müde langsam, ey.
Schreib das ruhig rein.
Also,
wenn du denkst,
jemand kann dich was fragen dazu
und erwischt dich nicht auf einem komplett
kalten Fuß. Ja, wir reden jetzt nicht von
irgendwelchen Expertenfragen.
Schreib es rein.
Schreib es rein.
Ich habe auch nicht nur Sachen reingeschrieben, wo ich Experte bin.
Ich meine, guck mal. Okay.
Ich sage das, was ich verschickt habe, aber so ungefähr.
Ne, kenne ich mich gut mit aus, kenne ich mich
mit allem. Arch, by the way.
Musste übrigens reingeschrieben werden.
Kontinuierisierung,
Hochverfügbarkeit, Let's Encrypt, Reverse Proxies,
Load Balance Virtualisieren,
ZFS,
RAID, was ich da für einen Scheiß reingeschrieben habe.
Git, GitHub,
GitOps, was auch immer.
Kubernetes-Stells,
Docker-Podman, Docker-Compose,
Docker-Hub,
was auch immer ich mir dabei gedacht habe.
Lifecycle-Management-Release,
Patch-Management, CI, CD, GitHub,
Actions, Virtualisierung. Habe ich jetzt nicht doppelt drinstehen?
Ja, habe ich doppelt. Egal.
Jenkins, Bitbucket.
Siehst du, ich habe Bitbucket reingeschrieben.
So ein krasser Bitbucket-Checker bin ich
jetzt auch nicht.
Ich habe sogar Pulumi reingeschrieben.
Pulumi kann ich basic Sachen und
damit was aufbauen, aber
noch nie.
Ich kriege das relativ schnell, könnte ich
das lernen. Aber es ist jetzt nicht so, als
ich da der super Über-Checker wäre.
Ne, auch
Netlify ist jetzt nicht, dass ich da so wahnsinnig
viel mitgemacht hätte bisher.
Ja, alle möglichen Krempe reingeschrieben.
Was?
Nein!
Wie zum Teufel
kommt der drauf, dass ich YouTube anpinnen
will? Ich habe Java
reingeschrieben. Ah ja. Wir haben im Stream
eine Java-App gebaut.
Und ein bisschen Kotlin-App
reingebastelt.
Das muss reichen.
Ich kann das meiste.
Ich kann 90% von dem, was hier drinsteht.
Du kannst mich zu 90% von dem, was hier
drinsteht, was fragen und ich werde es dir wahrscheinlich...
Also, wenn wir jetzt nicht von super-advancen Themen reden.
Doch doch, ich habe da keinen
Scheiß reingeschrieben.
90% kenne ich mich aus.
Ja, manche Sachen,
wie das beispielsweise, ist jetzt nicht so,
dass ich da super-Experte drin bin, aber
90% von dem, was hier drinsteht, kannst du
mich machen lassen. Kobol!
Ah ja? Wer erinnert sich
nicht an den Kobol-Stream?
Ich auch!
Natürlich steht da C++ drin.
Wir haben so viel C++ im Stream gemacht,
dass ich wahrscheinlich besser C++
kann, als der Durchschnitts-C++-Enjoyer.
Aber ich bin kein C++-Enjoyer.
Ich hasse eigentlich
C++. Wie, das siehst du mich
nicht? Wie viele C++ und
Microcontroller-Streams wir schon gemacht haben.
Du kannst nicht sagen, dass ich davon keinen Plan habe.
Ich mache
das nicht gerne. Und ich würde
nicht darin arbeiten wollen.
Aber es heißt nicht, dass ich gar
keine Ahnung davon habe.
Ne, will ich nicht, dass die meinen Twitch und Youtube wissen.
Ich habe sogar Videoproof.
Zur Not kann ich so... Wenn irgendjemand sagt,
Max, ich glaube dir nicht, dass
du Ahnung von Kobol hast,
dann gebe ich hier ein Kobol-Stream-Titel.
Kobol. Bam.
Kobol.
Mit der besten Schriftart
überhaupt.
Guck hier, zack, Kobol.
Volle Kobol-Ladung.
Oder sagt mal einer,
ich habe keine Ahnung von Kobol.
Beste Font, ne?
C++ is getting a Borrow-Checker.
Das wäre ja lustig.
Ich weiß gar nicht,
wie die das
in C++ überhaupt einbauen wollen.
C++ ist so komplex, dass niemand weiß,
was C++ eigentlich macht.
Kokona-Content.
Es ist übrigens...
Kokona. Muss doch schon korrekt
sein.
US man jailed for cloning giant sheep for
tro...
Okay, das ist wirklich...
Das ist wirklich...
Das ist wirklich...
Freedom-Content ist das.
Hell yeah,
Freedom-Content.
Ja, Java, ich habe gesagt, von 90%
von Java habe ich nicht viel Ahnung, das stimmt.
Das traue ich mich nicht aufzumachen.
Okay, doch, das kann man
aufmachen.
Beispiele, Examples.
Wo sind hier Examples?
Ah hier,
C++-Code.
Warum ist C++ einfach so eine abfuck-hässliche
Programmiersprache, man?
Das ist ja... Das hat ja nichts mit dem Borrow-Checker
zu tun. Das gab es ja vorher auch schon.
Return on T...
Alter, fucking
shit, man.
Standard Move gab es vorher auch schon.
Trivial. Das ist
trivial alles, man.
Selbsterklären.
Vor allem das hier.
Was auch immer.
Was auch immer das hier sein soll.
Also T ist der Generic
Type. Pointer auf
sich... Ach ey, kein
Plastenschimmer. Das weiß ich nicht,
was du damit machst, ob du das alles kennen musst.
Vieles in C++ ist
einfach nur super obskur und
so gemacht,
dass es
außer demjenigen, der es sich ausgedacht hat,
glaube ich, keiner versteht.
Für die Stellenanzeigen...
Okay, eine Sache gucken wir uns noch an.
Bei uns gibt es...
Was ist das? Für was?
Sachsen.de
Was suchen die da?
Ich erkenne das nicht. Was?
Systemadministrator Windows Server.
Die sächsischen
Straßen und Verkehrs...
Okay, sie
suchen einen Windows Admin.
Windows Server. Ein Server...
Systemadministrator Windows Server.
IT-Betrieb unserer Fach...
Verfahrenslandschaft.
Was für ein Ding?
Was ist das? Stream ist RIP?
Nee.
Chat erzählt Mist.
Ähm...
Fachverfahrenslandschaft.
Durchführung von Installationen, Überprüfung der
Kompatibilität zum Fahrten...
Viel weiter gefasst.
Administration der Serverbetriebssysteme.
Sichere Kenntnisse. Windows Server.
Ja, du hörst ja bei mir schon auf, oder?
Einrichtung, Configuration...
Applikationen...
Windows WTS IIS.
Weiß jemand, was WTS ist?
WTF könnte ich mir noch vorstellen.
Was ist WTS?
Windows...
Irgendwas Server.
IIS kennen wir.
Und ich frag mich ernsthaft, wer
heutzutage Anwendungen auf IIS Basis
überhaupt noch...
Wie man das rechtfertigt, sowas zu betreiben.
Windows Shit Service.
Okay.
Terminal... Terminal Server.
Okay.
Automatisierung, Erstellen von Skripten.
Sichere Kenntnisse. Power Schelle.
CMD Batch.
Grundlegende Kenntnisse.
Perl.
Python Linux Shell.
Checkmk.
Okay, da stehen die irgendwie drauf.
Bei uns auf der Arbeit auch Checkmk angesagt.
Analyse und Beseitigung
von Störungen und Planen durch Verwaltungsarbeiten.
Wartungsaufgaben.
Patchen der Systeme.
Anlassbezogene Unterstützung bei
Fehlersuche für Hersteller der Fachverfahren.
Wie Behördendeutsch möchte
man eigentlich reden?
Einstellung von Logfiles.
Das ist nix, was ich in eine Stellenanzeige
schreiben würde.
Das ist ein absolut basic
Admin-Task,
der nicht erwähnenswert ist.
Du bist Checkmk-Consultant.
Da freust du dich sicherlich darüber, dass das
Webinterface so kacke ist, dass es keiner versteht.
Weil dann kann man dich
consulten dazu.
Erstellung von Fehlerbeschreibungen.
Begleitung von Remote-Sitzungen
mit Herstellern. Okay.
Berufsabschluss im Bereich
IT-Systemtechnik.
Oder was sagst
du als...
Ja, das ist sehr viel besser.
Das stimmt, da gebe ich dir recht.
Ich habe auch gehört, dass Checkmk
seit einem Jahr oder so
einen User-Interface-Designer
jetzt hat. Kein Witz.
Die hatten zehn Jahre lang keinen.
So sieht das Webinterface auch aus.
Seit einem Jahr haben die jetzt einen User-Interface-Designer.
Das merkt man auch.
Fragt man sich halt, wie die seit, keine Ahnung,
15 Jahren oder so eine Monitoring-Software
spielen können mit einem Webinterface ohne einen
Webdesigner. Aber das funktioniert.
Aber seit einem Jahr haben sie
einen. Besser
spielen als nie.
Chat.
Hier war ich.
Fundierte, sofort einsetzbare Kenntnisse
und langjährige Erfahrung in den Bereichen
Windows-Server, Active Directory,
CMD, Windows,
PowerShell, Web-Server,
IIS und Apache.
Ja.
Klingt ganz ehrlich, klingt halt
nach einem Windows-Admin-Job.
Das wäre mir deutlich zu viel
Behörden-Speak
in der Stellenanzeige
für meinen Geschmack.
Und vor allem ist es Windows, da wäre ich
eh schon raus.
Klingt jetzt
ziemlich
0815.
Da steht wenigstens drin, was sie wollen.
Ja, also ich habe schon deutlich schlechtere Stellenanzeigen
gesteht. Da steht wenigstens drin, was sie wollen
und die Forderungen
sind jetzt nicht irgendwie super
überzogen, sondern klingen realistisch
zu dem, was sie haben wollen.
Insofern ist es schon ganz okay.
Mich persönlich würde
es jetzt nicht so in Verzückung versetzen,
weil ich halt
von Windows keine Ahnung habe und definitiv
auch nie Windows machen möchte
und mir das zu behördenmäßig
klingt. Aber ansonsten,
wenn man aus der Ecke kommt
und Windows-Ahnung hat und auf sowas steht,
warum nicht?
Das ist wahrscheinlich auch so.
Das ist wahrscheinlich auch so.
Da ist wahrscheinlich der letzte Windows-Admin
ist gerade in Rente gegangen und jetzt haben sie festgestellt
Fuck, wir brauchen einen neuen.
Das habe ich noch nie gehört.
Chatke, wisst ihr, was jetzt ist?
Morgen muss ich nach Frankfurt.
Muss ich kurz vor 7
aufstehen. Aber
meine Office-Tage sind
ja glücklicherweise...
Will Chatke MK nicht mal einen Stream sponsern?
Ich weiß nicht, ob die das wollen.
Wenn die das wollen, können die das gerne machen.
Dann wäre ich auch sofort dabei.
Ich bin allerdings nicht der größte
Chatke MK-Fan.
Die müssten mir das irgendwie schmackhaft machen
und wir müssten da auch irgendwie ein schönes
Thema finden, was man
schön in Chatke MK machen kann.
Also beispielsweise irgendwie
zeigen, dass man
sowohl serverseitig
ein paar Sachen abfragen kann, als auch
externe Services überwachen kann.
Es müsste ein schönes Gesamtpaket sein.
Aber ich bin nicht der größte Chatke MK-Fan
und das liegt zum größten Teil daran,
dass das Webinterface einfach so schrottig ist.
So richtig zum kotzen
ist das Webinterface.
Aber es ist besser geworden, das stimmt.
Ja, das ist auch...
Ja, das kenne ich.
Das ist auch komplett
obskures
wirres Zeug in Chatke MK.
Das ist so schön nichtssagend
und unlogisch.
Das muss man einfach wissen, sonst hast du gelitten.
Ja, Kubernetes Monitoring
von Chatke MK gefällt mir persönlich
gar nicht.
Ich hab das eingeschaltet, weil irgendjemand bei uns,
bei mir auf der Arbeit, der Meinung ist,
das ist Vorgabe für alle Cluster, dass das aktiviert wird.
Die Fehlermeldungen sind oftmals echt
grausam.
Du erkennst nicht, was er hat.
Und manchmal hat der Cluster auch gar nichts
und es gibt trotzdem Fehlermeldungen.
Aus irgendwelchen Gründen.
Also für Cloud Monitoring
hat sich das für mich bisher nicht
irgendwie als
gutes Tool dargestellt.
Das mag sein.
Das ist richtig.
Also dokumäßig, wenn ich was gesucht habe, war echt ganz gut.
Aber ganz ehrlich,
es ist ja schön und gut, wenn man Dokus schreibt für was.
Aber so gewisse Logik sollte
das eigentlich in sich schon haben.
Hat es aber nicht.
Ich meine, es sei denn, man ist wie du da voll in der
Chatke MK Denkweise drin,
dann mag das alles logisch sein.
Nee. Chatke MK...
Ganz ehrlich, wenn du die Grafen
von Grafana, beziehungsweise
die Visualisierungsmöglichkeiten dir von Grafana
anguckst,
versus die Grafen und Visualisierungsmöglichkeiten
von Chatke MK, da fängst du an zu heulen.
Chatke MK
ist nix für irgendwelche schöne
Visualisierungen.
Das höchste der Gefühle ist, dass du
eine Monitoring-Meldung kriegst in Chatke MK
und der sagt dann,
keine Ahnung, HTTP Service
Critical, weil das Ding irgendwie mal
ein paar 400er,
500er, was auch immer in den Logs gefunden hat.
Und dann kannst du bei den
Grafen, das höchste der Gefühle bei Chatke MK ist,
dass du dann drauf guckst, okay,
letzter Monat, und so eine grobe Ansicht
hast, die...
Und sagst, ah, das kam schon mal vor, so
vor einem Monat. Das ist aber echt das höchste
der Gefühle. Die Grafen von Chatke MK
sind von den Visualisierungsmöglichkeiten
oder Usability zum weinen
im Vergleich zu Grafana.
Das ist übrigens bei anderen Monitoring-Tools nicht sonderlich
viel besser. Bei Zappix
sind die Grafen auch nur minimal besser.
Ja. Die sind nicht ganz so
schrottig wie bei Chatke MK,
aber die sind auch nicht wirklich gut.
Chatke MK war mal
ein Nagios. Chatke MK war ursprünglich mal
ein Nagios Fork. Ja,
PRTG, du musst dir ehrlich sagen,
was ich bisher von PRTG gesehen habe,
sah gar nicht so schlecht aus, aber PRTG
ist bei mir eh komplett raus, weil
Windows-Only.
Also ich rede jetzt vom Server, nicht von den
Clients, ja. Und ich werde, ich benutze
kein Monitoring-System, was Windows-Only ist.
Nagios,
muss ich sagen, Nagios,
ich habe ein weiches Herz für Nagios.
Das liegt aber nicht daran, dass ich jetzt
unbedingt Bock hätte, eine neue Nagios-Installation
aufzubauen und zu betreiben,
zumal ich von dem neuen Nagios gar keine Ahnung
mehr habe.
Also das klassische
Oldschool-Nagios, da habe ich ein weiches
Herz für, weil das war, als ich
Azubi war, mein allerallererstes
Projekt, wo ich
alleine im größeren Stil
was gemacht habe, das war Nagios.
Nagios-Überwachung von
Ordnungsservern. Auch richtig viele,
richtig viele
als Azubi,
das waren damals
wahrscheinlich, keine Ahnung,
5-600 Server oder so.
Zwischenzeitlich waren es
über 4000, aber da war es schon kein Nagios mehr.
Ja, das hat mir auch nicht gefallen.
Ich muss euch sagen, es gibt kein
Monitoring-Tool,
wo ich wirklich uneingeschränkt
sagen würde, oh ja, das ist geil,
da habe ich Bock drauf, das verwende ich gerne.
Es gibt ein paar Tools, die
sind gut in ihren Bereichen, aber
so ein Universal-Ding, wo ich
sagen kann, jawoll, für das
Prometheus
plus Grafana ist halt sehr viel
Selbstgestricke und auch nicht für alles
geeignet. Das ist
halt hauptsächlich Metric Collection
und Visualisierung und
nicht so klassisches Service ist da,
Port ist offen und sowas. Wenn man es
auch machen kann, dann muss ich halt sehr viel selbst
bauen mit Prometheus.
Und dann hast du so Sachen wie Checkmk und
Zabbix, die das wiederum ganz
gut können.
Wobei Zabbix, das Web Interface in Zabbix ist halt
auch so ein Ding. Das Web Interface in
Zabbix ist zwar nicht so hässlich und
nicht so unlogisch wie
Checkmk, aber
es hat
eine eigene Logik, an die du dich erstmal gewöhnen
musst. Das kenne ich nicht.
Pass mal auf.
Also,
Monitoring-Systeme, von denen
ich noch nie was gehört habe
und die nicht weit
verbreitet sind, fallen bei mir eh schon mal unten durch.
Aber ich gucke mir das trotzdem mal.
Alter, das sieht ja aus wie...
Moment.
Braucht man dafür etwa...
Geht das etwa nicht im Browser?
Braucht man dafür Desktop-Clients?
Also alles, was nicht im Browser läuft, ist eh
schon mal komplett aus, aus
und vorbei für mich, ja?
Hat auch ein Browser...
Na gut.
Also ich muss sagen, so als Komplettlösung
finde ich Zabbix immer noch am besten.
Wobei ich mit
Zabbix halt auch nicht so wirklich zufrieden bin, gerade
was die Visualisierungsmöglichkeiten
und Metrik...
Immerhin kann Zabbix mittlerweile
Prometheus
Metriken collecten.
Aber Zabbix ist halt so
eklig, auch von der
Config her.
Diese ganzen...
Zabbix muss ja komplett über das Webinterface
konfigurieren
und
es ist halt auch total
unlogisch, wie man da einzelne Sachen
anlegt.
Allerdings ist das Webinterface halbwegs
konsistent, nicht so wie bei Checkmk.
Also es gibt kein ultimatives Monitoring-Tool,
wo ich sagen würde, ey, das ist geil,
das würde ich einfach defaultmäßig für alles nehmen.
So als Universallösung finde ich
ist Zabbix immer noch am besten.
Aber Zabbix hat auch Richtprobleme, ja?
Also mit
Metrik Collection
im großen Stil,
Visualisierung und gerade was Performance angeht,
wenn viel reinkommt,
ist das auch nicht so dolle.
Jetzt aber.
BadGitTime.
Schön, dass ihr am Start wart.
Ich würde mich über einen Follow
freuen, wenn euch der Content gefallen hat.
Und ihr das nächste Mal informiert werden möchtet,
wenn ich online gehe.
De facto standard nicht Prometheus-Stack.
Würde ich so nicht sagen. Kommt drauf an, für was.
Also Prometheus ist schon ziemlich
verbreitet, ja. Das auf jeden Fall.
Wie gesagt,
eine Runde Follow, wenn es euch gefallen hat
und dann hören wir uns nächsten Stream.
TLDR zu Deno.
Also wenn ich mich zwischen geil und shit entscheiden müsste,
würde ich sagen, finde ich es eher geil.
Wobei es so ein bisschen dazwischen ist.
Aber ich würde sagen, von 1 bis 10,
wenn 1 super schrottig ist
und 10 das beste ever,
würde ich sagen...
6,5
aufgerundet zu 7.
Ich fand das nicht schlecht.
Ich muss demnächst noch ein bisschen weiter probieren,
wie es beispielsweise aussieht, damit
SvelteKit-Anwendungen zu erstellen und sowas.
Ja,
Uptime-Kuma ist eher was für den Heimbereich
und selbst da hat es mir zu wenig
Features, ja.
Beispielsweise eines der Sachen, die ich
haben möchte, bei meinem Monitoring-Tool
ist Disk-Space-Überwachung.
Ich will beispielsweise bei meinem
Linux DVB-C
Receiver drüben wissen,
wie voll die SSD mit Aufnahme
ist. Und das geht mit Uptime-Kuma nicht.
Uptime-Kuma ist super, wenn du so
reines Port-is-offen-down
Monitoring haben willst, mit einer
HD-Oberfläche und dann aber auch
bitte nicht zu viele Services drinnen,
weil super performant ist Uptime-Kuma nicht.
Also Uptime-Kuma kannst du nicht mit 10.000
Checks betreiben. Mit 50
vielleicht, ja. Oder mit 100
oder 150, da hört es aber auch schon auf.
Ja, das erste, was ich davon gesehen habe,
hat mich aber nicht überzeugt, ehrlich gesagt.
So. Chat.
Was ist das für ein Titel?
JavaScript ist immer egal, ob Deno oder nicht.
Wie jetzt?
Also ich meine, dass Deno nicht
eine eigene
Kamilsprache ist.
Hä? Was auch immer.
Egal, ich geh jetzt ins Bett.
Bis nächsten Stream, Leute.
Macht's gut. See you.
