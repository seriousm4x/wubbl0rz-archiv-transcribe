Untertitelung des ZDF, 2020
Untertitelung des ZDF, 2020
Untertitelung des ZDF, 2020
Untertitelung des ZDF, 2020
Untertitelung des ZDF, 2020
Untertitelung des ZDF, 2020
Untertitelung des ZDF, 2020
Untertitelung des ZDF, 2020
Untertitelung des ZDF, 2020
Untertitelung des ZDF, 2020
Untertitelung des ZDF, 2020
Untertitelung des ZDF, 2020
Untertitelung des ZDF, 2020
Untertitelung des ZDF, 2020
Untertitelung des ZDF, 2020
Untertitelung des ZDF, 2020
Untertitelung des ZDF, 2020
Untertitelung des ZDF, 2020
Untertitelung des ZDF, 2020
Untertitelung des ZDF, 2020
Untertitelung des ZDF, 2020
Untertitelung des ZDF, 2020
Untertitelung des ZDF, 2020
Untertitelung des ZDF, 2020
Untertitelung des ZDF, 2020
Untertitelung des ZDF, 2020
Untertitelung des ZDF, 2020
Untertitelung des ZDF, 2020
Untertitelung des ZDF, 2020
Untertitelung des ZDF, 2020
Untertitelung des ZDF, 2020
Untertitelung des ZDF, 2020
Untertitelung des ZDF, 2020
Untertitelung des ZDF, 2020
Untertitelung des ZDF, 2020
Untertitelung des ZDF, 2020
Untertitelung des ZDF, 2020
Untertitelung des ZDF, 2020
Untertitelung des ZDF, 2020
Untertitelung des ZDF, 2020
Untertitelung des ZDF, 2020
Untertitelung des ZDF, 2020
Untertitelung des ZDF, 2020
Untertitelung des ZDF, 2020
Untertitelung des ZDF, 2020
Untertitelung des ZDF, 2020
Untertitelung des ZDF, 2020
Untertitelung des ZDF, 2020
Untertitelung des ZDF, 2020
Untertitelung des ZDF, 2020
Untertitelung des ZDF, 2020
Untertitelung des ZDF, 2020
Untertitelung des ZDF, 2020
Untertitelung des ZDF, 2020
Untertitelung des ZDF, 2020
Untertitelung des ZDF, 2020
Untertitelung des ZDF, 2020
Untertitelung des ZDF, 2020
Untertitelung des ZDF, 2020
Untertitelung des ZDF, 2020
Untertitelung des ZDF, 2020
Untertitelung des ZDF, 2020
Untertitelung des ZDF, 2020
Untertitelung des ZDF, 2020
Untertitelung des ZDF, 2020
Untertitelung des ZDF, 2020
Was ist hier los?
Dropped Frames?
MonkaS?
MonkaW!
Es kann nicht alles okay sein
Das ist jetzt nur okay, weil Standbild ist
Mein Gott, Vodafone
Kriegt mal euren Scheiß auf die Reihe, Alter
Das kann doch nicht sein
Was ist hier?
25, 28% Framedrops
Wir müssen kurz warten, Leute
Wir müssen kurz warten, bis das vorbei ist
Sonst kann ich das, sonst kann ich das, sonst kann ich das gar nicht
Ja, dann müssen wir das Ganze kurz überbrücken
Bis es wieder funktioniert
Gibt es irgendwelche anderen spannenden Themen, die wir noch schnell besprechen können
Bis der Kempel wieder funktioniert?
MonkaW!
Okay, also, Chat sagt, das Schlimmste, was man am Anfang mit einem Elektroauto
Was?
Das Schlimmste, was man am Anfang hat
Das Schlimmste, was man am Anfang hat mit einem Elektroauto ist die Reichweitenangst
Aber die geht... Nö, hab ich nicht
Hab ich nicht, ich weiß, dass ich nicht weit fahr
Ich bin mir da ziemlich sicher, dass ich überall ankomme, wo ich hin will
Wenn ich mal 100 Kilometer fahr, das kommt 1-2 Mal im Jahr vielleicht vor
Alter, Vodafone, come on
Was ist denn hier los?
Guckt's euch an
Beste Programmiersprache für Microservices, das ist tatsächlich eine gute Frage
Der Sache können wir uns kurz widmen
Bis Vodafone...
Ich hoffe, ihr hört mich noch leckfrei, ja?
Ich seh's schon, Mann!
Mauszeiger ist nicht ganz leckfrei
Aber ich hoffe, ihr hört mich noch leckfrei, wenn's ein bisschen buffert
Und bis die Frames alle wieder in Ordnung sind
Ah, ah, ah, aha, aha
Okay, ich sag noch was zu
Also, beste Programmiersprache für Microservices
Natürlich ist das, wie in vielen Fällen, das die einzig beste Sprache
Gibt's natürlich nicht
Logisch
Das hängt davon ab, was du machen willst
Und was du kannst
Also, wenn du jetzt, sagen wir mal
Na, guck mal
Okay, was du kannst, vielleicht nicht
Weil, kannst du nur Kobol, ist Kobol vielleicht keine so gute Idee
Aber es ist eine Kombination aus
Was kannst du gut, beziehungsweise
Wenn du's mit mehreren Leuten machst
Was kann das Team gut
Und was wollt ihr machen
Das, was wollt ihr machen, kann tatsächlich
Ja, schon ein bisschen Ausschlag geben
Ja, wenn ihr irgendwelche
Machine Learning Dinger machen wollt
Und feststellt, die besten Frameworks
Gibt's für Python
Oder die besten Frameworks gibt's da und dafür
Oder ihr wollt irgendwelche
Java-Libraries verwenden
Keine Ahnung, dann ist es vielleicht sinnvoll
Das in Java zu machen
Was sind, was sind, also
Also, wenn's jetzt, wenn's jetzt egal ist, ja
Also, ich kann dir sagen, was ich machen würde
Ganz ehrlich, ich würde meine Microservices
Genauso in .NET programmieren, wie das meiste andere auch
Wenn ich Sachen nicht in .NET
Programmiere, dann zum größten Teil nur, weil's wirklich
Triftige Gründe gibt
So, war ich jetzt gemutet
Oder musst du, musst du dir hören, wie ich
Lesen musste
Weiß nicht, ob man's gehört hat
Manchmal ist mein Muten ja nicht so hundertprozentig gemutet
Also
Ähm, ich würde wahrscheinlich
Die meisten Microservices in .NET machen
Wenn ich was nicht in .NET mache, dann ist es halt
Weil sich was anderes besser eignet
Zum Beispiel
Wenn's halt irgendwas Frontend-mäßiges ist, dann JavaScript
Ich bin kein großer Fan
Von Blazor, du könntest da theoretisch
Auch Blazor
Sachen mit C-Sharp und .NET
Für's Frontend machen
Aber im Endeffekt muss ich ehrlich sagen, ich bin kein
Großer Blazor-Fan
Gerade wenn die Leute dann anfangen, sowas noch mit
.NET zu kombinieren oder so
Da ist bei mir komplett vorbei
Ich find Maui-Kacke und ich find Blazor
Auch nicht so geil
Also da würd ich immer
Frontend, immer JavaScript
Oder dann ansonsten, je nachdem, was man machen will
Letztens hab ich beispielsweise mal geguckt
Nach ner kleinen, ähm
Search-Engine
Für Volltext-Suche
Da hab ich was in Rust gefunden
Da würd's sich vielleicht anbieten
Zumindest so eine kleine Schnittstelle zu machen
Mit äh
Mit irgendeiner C-API in Rust
Oder wo wir mal was mit Webmask machen können
Oder wo wir mal was mit Webmask machen können
Oder wo wir mal was mit Web-RTC gemacht haben
Da haben wir beispielsweise
Diesen Web-RTC-Teil in Go gemacht
Also manchmal macht's schon Sinn
Sich halt anzugucken
Was ist denn so der Kern von dem, was man braucht
Und wo gibt's die besten Libraries
Und den besten Support
Aber normalerweise, standardmäßig
Ich würde mein Zeug immer in .NET machen
Und gerade wenn du Azure verwendest
Ist .NET natürlich nochmal doppelt gut
Weil wenn du Functions oder halt ähm
Cloud Native, wie man so schön nennt, äh sagen würde
Cloud Native, wie man so schön nennt, äh sagen würde
Cloud Native, wie man so schön nennt, äh sagen würde
Sag mal Vodafone, meine Güte
Also wenn du halt Sachen verwendest
Nicht so die klassische Sache mit
Ich mach ne VM
Und da installier ich mir Linux drin
Und lass mein Zeug drauflaufen
Sondern du willst dann vielleicht
Tatsächlich Azure Functions oder so verwenden
Da ist .NET auch nochmal cool
Weil .NET äh sehr gut unterstützt wird in Azure
.NET ist tatsächlich
.NET Unterstützung ist tatsächlich
Bei anderen Cloud-Plattformen nicht so verbreitet
Ich muss sagen, ich hab noch nie AWS Lambda
Und ich hab auch noch nicht äh
Äh GCP Functions
Ich weiß gar nicht, wie der Krempel heißt
Wie heißt denn der Kram bei Google?
Wie heißt das Gegenstück von Lambda
Von ähm
Von Azure Functions und Amazon Lambda
Functions Zeug, wie heißt denn das bei Google?
Cloud Functions
Ich weiß gar nicht, wer davon .NET unterstützt
Aber wahrscheinlich die wenigsten
So
Das ist meine Antwort dazu
Mehr kann ich dir nicht sagen, weil ich nicht weiß, was du machen willst
C++ ist für das meiste nicht richtig gut
Auch ich weiß, das ist T-Bait
Ähm
Es gibt Sachen, da glänzt C++
Aber
Hauptsächlich, weil es keine sinnige Alternative zu gibt
Alter Mensch, wo davon, das kann doch jetzt nicht sein
Kriegt euch doch mal ein
Naja, es gibt schon ein schlechter oder besser
Es hängt halt entscheidend davon ab, was man kann und was man nicht kann
Gemutet, ich bin nicht gemutet
Hm, achso, du meinst hier, wo ich niesen musste, achso
Ja, das ist das Problem, wenn man so weit mit dem Chat hintendran ist
Kannst du nicht Leitung switchen? Ich hab nur noch eine Internetverbindung
Ich hab die zweite Internetverbindung abbestellt, schon vor drei, vier Jahren oder so
Ist schon, ja, vielleicht zwei, drei Jahren
Schon eine Weile her, weil es einfach sinnlos war, viel zu teuer
An sich hätte ich Lust, nächstes Jahr eine Ausbildung zum Physi zu machen
Jedoch klingen viele Stellenanzeigen in meiner Gegend nur nach First-Level-Support
Was gibt's da so für Jobaussichten?
First-Level-Support will man nicht machen, First-Level-Support ist einfach Rotz
Meiner Einsicht nach
Für mich, ja, ich sag nicht allgemein
Also ich würde kein First-Level-Support machen
Und für First-Level-Support brauchst du beim besten Willen auch keine Physis
Für First-Level-Support kannst du einfach irgendwelche
Das war beispielsweise, wo ich damals noch beim Provider gearbeitet hab
Unser First-Level war ein Team aus drei Mädels
Die alle super, wie nennt man das so, Social Telekommunikations-Skills hatten
Aber halt von Technik, keine Ahnung
Und die waren halt immer super beliebt, auch bei den Leuten, die angerufen haben
Weil es waren Mädels und die konnten gut telefonieren, aber
Ähm
Die haben nur die netten Sachen gemacht
Und wenn's dann nicht ging
Haben sie die Leute durchgestellt oder weitergeleitet und irgendwas weitergeschickt
Und dann haben die den Anschluss gekriegt
Alter, so kann ich doch nicht streamen, Vodafone
Was ist denn los mit euch?
Ich mach mal kurz nen Speedtest vom zweiten
Speedtest
Ich mach mal kurz nen Speedtest vom zweiten Browser aus
Schauen wir mal
Ja, los
Auf Speedtest, gib Gas!
Auf Speedtest, gib Gas!
Gib Gas!
Hm
400 MBit Download Speedtest
Super, mal Upload checken
Upload ist ja das eigentliche Problem
406 MBit Upload sollte eigentlich reichen, oder?
Äh, 406 MBit Download
Sollte eigentlich reichen für das bisschen
So, Upload, 40 MBit, auch gut
Also, es scheint ein Problem zu sein auf der Route
Zu den Twitch-Servern
Also was ich probieren könnte Chat, also wisst ihr was wir machen?
Ich starte jetzt mal das Battlefield-Video und wir gucken, ob es laggt
Ich starte jetzt mal das Battlefield-Video und wir gucken, ob es laggt
Wenn es laggt, mache ich den Stream kurz aus und wechsel den Twitch-Server
Dann gehe ich auf den Twitch-Server in Barcelona oder so
Dann gehe ich auf den Twitch-Server in Barcelona oder so
und hoffe dann, also Amsterdam oder wo auch immer
und hoffe, dass es funktioniert, ok?
aber Leute, es wird ruckeln
30% Dropped Frames
Hat das erst angefangen zu laggen, als ich hier was ein...
Leute, wir testen mal kurz was
Jetzt habe ich keine Frametrops, aber jetzt sieht man ja auch nichts.
Doch, ich habe immer noch Frametrops.
Keckel.
Leute, ich habe immer noch Frametrops mit einem komplett schwarzen Bildschirm.
Also daran kann es jetzt ja schon mal nicht liegen.
Ja, man merkt es bei den Mausbewegungen, gell?
Sage ich, ja, ja, ja.
Mensch, Vodafone, was ein Crap, Alter, wieder.
Was ist das hier?
Nee, das stimmt nicht.
Das stimmt nicht.
Nur weil Docker in Go programmiert ist, hat es doch absolut keinen Einfluss drauf,
auf das, was du in deinem Container laufen lässt.
Nee, nee.
Sven, lass dir da nichts erzählen.
Du kannst in Containern laufen lassen, was du willst.
.NET-Anwendungen laufen auch wunderbar in Containern.
Alles läuft wunderbar in Containern.
Solange es keine Kerneldreiber braucht.
Wo ich tatsächlich immer ein bisschen Angst habe, ist,
wie Docker...
...Docker die Leistung regelt.
Warum?
Docker frisst keine Performance.
Du machst das beruflich?
Ich auch.
Und jetzt?
Und nun?
Also, da musst du dir keine Gedanken machen.
Docker frisst keine Performance.
Ich weiß, jetzt kommen die Leute und sagen, ja, theoretisch gesehen schon.
Nein.
Docker ist...
Also, rechnerisch, vielleicht, wenn du dann irgendwie super krasse Benchmarks machst für fünf Stunden
und das vergleicht, vielleicht, ja, vielleicht siehst du dann was.
Keine Ahnung.
Aber Docker macht in der Regel keine Performance-Probleme,
weil ein Docker-Container, beziehungsweise die Anwendung, die du in einem Container laufen lässt,
ein ganz normaler...
50% Packet-Loss, Alter.
Weil dein Docker-Container...
Die Leute stellen sich das immer so ein bisschen als VM vor.
Das ist es nicht.
Ein Prozess, den du startest in einem Docker-Container, ist ein ganz normaler Prozess.
Also, wenn du jetzt deine Anwendung auf dem Linux-System startest,
oder die Anwendung in einem Docker-Container startest,
das macht quasi keinen Unterschied.
Das ist ein ganz normaler Prozess.
Wie jeder andere Prozess auch.
Der einzige Unterschied ist, dass noch ein paar zusätzliche Kernelfunktionen benutzt werden,
nämlich sowas wie...
Keygroups und Namespaces,
dass du beispielsweise der Anwendung, die im Container läuft,
andere IPs vorgaukeln kannst,
oder andere Hostnamen vorgaukeln kannst,
ein anderes Filesystem vorgaukeln kannst,
und solche Geschichten.
Aber die Performance...
Also, wir reden hier von CPU und sowas, ja?
Nicht zwangsläufig von Netzwerk und I.O.
Macht keinen Unterschied in Docker.
Und auch in der VM,
weil die Leute ja da immer ein bisschen Bedenken vorhaben,
ah,
Vm-Docker, also eine VM hat, was CPU-Leistung angeht,
nahezu keinen Overhead.
Ihr könnt einen Benchmark laufen lassen,
lasst einen Prime95-Benchmark laufen in einer VM,
versus auf eurem Host.
Ihr werdet feststellen, die Werte sind nahezu identisch.
Was bei der VM das Problem ist,
beziehungsweise warum man sagt,
VMs brauchen mehr Ressourcen,
ist, VMs brauchen deutlich mehr RAM.
Warum?
Naja, weil ein komplett eigenes System gestartet wird im Hintergrund.
Also, VMs brauchen mehr RAM und mehr Disk, im Endeffekt.
Weil Disk, glaube ich, zu vernachlässigen ist, aber RAM.
VMs brauchen einfach mehr RAM,
weil ein komplett eigenes System mit eigenem Kernel,
mit eigenen Live-Suits, alles hochgefahren werden.
Du kannst natürlich ein Minimalsystem nehmen,
dann kommst du vielleicht, äh, tja,
mit minimalstem Overhead aus,
aber eine VM hat immer, was RAM angeht,
einen gewissen Overhead.
Um den du nicht drumherum kommst.
Den hat ein Container nicht.
CPU-technisch, Performance,
CPU-Performance-technisch ist es überhaupt kein Unterschied.
Also, das stimmt, er hat schon recht.
Docker hat im Prinzip deutlich weniger Overhead als eine VM,
allerdings nicht bei der CPU.
Also, nicht unbedingt zwangsläufig bei dem,
wo man an Performance denkt.
Also, die CPU-Performance zwischen einer VM,
zwischen einem Host
und zwischen dem gleichen Ding im Docker-Container,
ist nahezu identisch.
Also, die CPU-Leistung ist mehr oder weniger das Gleiche überall.
RAM-Auslastung ist ein bisschen das Problem.
Und wenn's dann um, ähm, I.O. geht und Netzwerk,
da sieht das noch mal anders aus.
Da muss man eh gucken,
gerade wie man die Sachen in einer VM anbindet.
Ja, gerade I.O.-Performance ist in einer VM nicht ohne.
Ähm, das kann schon eine ganze Ecke langsamer sein,
je nachdem, was man da als Virtualisierung nimmt
und was man für Anforderungen hat.
Ja.
Aber, also, bei Docker-Container musst du dir eigentlich keine Gedanken machen.
Also, wenn du einen Prozess in einem Docker-Container startest,
der hat die gleiche Performance wie auf dem Host,
es ist ja auch ein ganz normaler Prozess auf deinem normalen Host.
Deswegen kannst du ja in Docker-Container beispielsweise
auch keine Kernel-Module nachladen
oder Kernel-Module verwenden, die dein Host nicht verwendet oder so was.
Es ist der gleiche Kernel wie dein Host.
Das ist keine VM in dem Sinn.
Also, da hast du performancetechnisch keine Unterschiede.
Es ist sogar besser, du kannst deine Docker-Container deutlich einfacher,
wenn du es denn bräuchtest, ähm, wir nennen das mal, ähm, nicht rate-limiten,
na, resource groups, äh, wie heißt denn das?
Also, Ressourcen besser managen.
Du kannst zum Beispiel relativ einfach sagen,
deinem Container benutzt maximal zwei CPU-Kerne oder so was.
Okay, ich glaube, Leute, ich glaube, ich muss wirklich den Twitch-Server wechseln.
Das klappt hier nicht. Wo, da vorn?
Äh, wie war die Probefahrt?
Also, ich war heute Probefahrt und ich bin begeistert.
Ich finde das Auto wirklich nice.
Ich muss jetzt bloß gucken, ob das dieses Jahr noch klappt.
Möglich ist es.
Ich habe heute auch mal gefragt, wie es mit Vorführ-Autos aussieht.
Und wie gesagt, wenn es irgendwie hinhaut,
dass ich es unter 30.000 Euro bekomme noch dieses Jahr,
dann kaufe ich es, ansonsten nicht.
Was es außer First-Level-Support gibt als Feezy,
alles andere außer First-Level-Support.
Alles. Du kannst alles machen als Feezy.
Wenn du dich damit auskennst, wohlgemerkt.
Alles. Wirklich, ich kann dir nicht sagen, was alles ist,
weil alles ist alles und alles ist sehr viel.
Du kannst alles Mögliche machen.
Du musst dich halt in den Bereichen ein bisschen auskennen.
Es bringt dir nichts, wenn du eine Feezy-Ausbildung gemacht hast
und am Ende dich bewirbst als Cloud-Architekt und keine Ahnung davon hast.
Mario, danke für den Sub.
Okay, wenn wir von Windows-Containern reden,
ist das noch mal was anderes.
Windows-Container sind ja auch keine Container,
sondern Hyper-V4Ms.
Zumindest ist das mein letzter Stand, korrigiert mich, wenn ich falsch liege,
aber ich glaube, Windows-Container sind Hyper-V4Ms.
Windows-Container ist also quasi eigentlich kompletter ...
G-Bait, der wahrscheinlich einfach nur da ist,
dass Leute Docker unter Windows ausfüllen können.
You've got G-Baited.
Also Docker unter Windows ist so eins der bescheuerten Sachen,
die man machen kann.
Ja, da bin ich ja mal gespannt, ja.
Nein, muss nicht. Muss gar nicht.
Es muss im Prozess nichts übersetzen.
Wenn du einen Prozess startest im Container oder nicht im Container,
ist exakt das Gleiche.
Es macht keinen Unterschied, ob du ...
Also, wenn du auf die Konsole gehst unter Linux, ja,
und du sagst hier ausführen, cackle.bin,
dann ist es egal, ob du cackle.bin so startest
oder ob du sagst docker run cackle container.
Das macht erst einmal keinen Unterschied.
Es ist ein bisschen ...
Die Möglichkeit vorhanden, das ein bisschen besser zu sandboxen.
Aber es ist nicht so, als wäre da irgendwie großartig was drumherum.
Das ist ein ganz normaler Prozess, so wie jeder andere auch.
Ich will es jetzt nicht ausschließen, dass es nicht doch irgendwie,
wenn man es drauf anlegt, messbar ist.
Ich meine, theoretisch hast du natürlich so die Möglichkeit,
mit C-Groups und so was, Ressourcenlimitierung vorzunehmen.
Heißt, da gibt es irgendwelche API-Funktionen, um das machen zu können.
Das heißt, wenn man das machen kann, hat es vielleicht,
auch wenn man das nicht macht, irgendwie rein theoretische Performance einbußen.
Aber ganz im Ernst, mich würde es wirklich wundern,
wenn einer das benchmarkt, und wir reden, der müsste es wirklich benchmarken,
da müsste irgendjemand, keine Ahnung, Prime95 auf 24 Kerne laufen lassen,
in Docker und ohne Docker, mal für 24 Stunden,
und dann am Ende gucken, was kommt raus, oder was man heutzutage nimmt.
Ich weiß nicht, ob Prime95 schon angesagt hat.
Und ja, vielleicht ist es in irgendeiner Art und Weise dann messbar,
aber nicht, dass es irgendeine Relevanz hätte.
Ja, gut, du hast ein Overhead, was Libraries und Images angeht.
Ja, das ist okay, das ist was anderes.
Aber nicht performancetechnisch, und ihm ging es ja hier hauptsächlich,
dass er Bedenken hat wegen Performance im Container.
Und mir geht es ja hier rein um Leistung, und das ist wurscht.
Und ja, und ganz ehrlich, ja, das ganze Container-Zeug,
und gerade auch, was Kubernetes angeht,
und Docker angeht, und viele Cloud-Sachen sind in Go programmiert,
aber das heißt bei weitem nicht,
dass man Software in Containern am besten in Go programmiert.
Überhaupt nicht, genau das Gegenteil.
Mach dir überhaupt keine Gedanken darüber, dass das im Container läuft,
sondern programmier das mit dem, was du am besten kannst,
was dein Team am besten kann,
und dann packst du es am Ende in den Container rein.
Ich meine, gut, wenn man weiß, dass man das in der Cloud laufen lassen will,
wenn man weiß, dass man das vielleicht mit irgendeinem Orchestrator
oder was auch immer laufen will, oder als Microservices, ne,
im Hinblick auf dessen sollte man das schon entwickeln,
aber nicht die Programmiersprachenauswahl davon abhängig machen.
Du kannst containerisierte Microservices in jeder Programmiersprache entwickeln.
Wahrscheinlich sogar COBOL.
So, hat sich das jetzt mal beruhigt? Alter, 65% Packageloss, Mann.
Ja, das stimmt.
Habe ich große Einbußen, wenn ich einen Webserver nativ im Container laufen lasse?
Tja, das kommt drauf an.
Also, wenn du rein die Performance meinst, du, was das Ding, äh, was weiß ich,
U-Performance, sonst was, nein, hast du nicht.
Du hast quasi keine Einbußen.
Netzwerktechnisch musst du dir aber Gedanken machen.
Also, wenn du wirklich, wenn du einen Webserver im Container laufen lässt,
wo es wirklich richtig brummt, also, wir reden hier von, keine Ahnung, Gigabit-weise,
also, wenn es da richtig abgeht,
dann würde ich mir überlegen, wie ich das Netzwerk mache.
Und zwar, kurz ein bisschen leiser machen.
Und zwar würde ich dann mal überlegen, ob ich das wirklich
mit diesem Standard-Docker-Proxy mache.
Also, Docker-Proxy proxyt das ja standardmäßig.
Es gibt aber verschiedene Möglichkeiten, wie man ein Docker-Netzwerk machen kann.
Ja, du kannst auch direkt eine Netzwerkkarte verwenden
oder direkt das Bridgen und Host.
Das würde ich mir dann überlegen.
Also, wenn du eine Netzwerkanwendung hast, die wirklich mega krass Traffic hat,
dann würde ich es vielleicht nicht über das Standard-Docker-Networking
mit dem Proxy machen.
Aber ansonsten, was Performance angeht, hast du da keine.
Du hast nicht nur keine großen Einbußen, du hast im Prinzip keine Einbußen.
So, was sieht es denn jetzt aus?
Okay, Leute, ich wechsle jetzt den Twitch-Server,
dass wir uns heute noch das Battlefield-Video angucken können.
Und dann hoffen wir, dass es funktioniert, weil ich kann auch nichts machen.
Wenn Vodafone mir das sagt, sagt Vodafone halt.
Ja, und das ist natürlich auch ein großer Vorteil.
Da hat er schon recht.
Da hat Zarex in dem Fall schon recht.
Wenn du die Sachen so baust, dass sie unabhängig voneinander sind
und unabhängig voneinander,
wenn du sie gut containerisieren kannst,
spricht das meistens dafür, dass sie nicht so, wie sagt man,
nicht so tightly coupled, wie sagt man das?
Also, dass sie nicht so eng miteinander verbunden sind,
dass das eine quasi zwangsläufig darauf laufen muss,
wo das andere läuft und so.
Also, wenn du deine Anwendung ein bisschen entcoupled konstruiert hast
und die sie gut containerisieren kannst,
dann ist das hier natürlich ein wahnsinns Vorteil.
Weil wenn du wirklich mal in die blöde Situation kommst,
dass du jetzt anstatt,
wie man früher gesagt hat, früher gemacht hat, so,
ich habe drei Applikationsserver VMs
und wenn wir mehr Last brauchen,
muss ich erst noch mal ein paar neue aufbauen.
Richtig, genau.
Und das ist halt wirklich ein Vorteil.
Da kannst du einfach sagen,
wie auf dem Loadbalancer ist die Last über 80 Prozent.
Meistens machst du das ja schon vorher.
Oder Loadbalancer ist die Last über 50 Prozent
oder die Connections über so diesem Limit.
Wir machen einfach drei neue Container und lassen die verteilen
auf die Cluster.
Das ist natürlich wahnsinnig geil, wenn das funktioniert.
Auf jeden Fall.
So, okay, Moin.
Leute, ich bin in zwei Minuten wieder da.
Also, ihr könnt gleich nach einer Minute F5 drücken.
Ich werde jetzt den Stream ausmachen.
Ich mache den Stream wieder an, suche meinen anderen Twitch-Server aus
und wir hoffen, es funktioniert.
Wenn es nicht funktioniert, haben wir wahrscheinlich gelitten
und wir müssen mit lag leben noch für eine Stunde.
Aber gucken wir mal, ich bin gleich wieder da.
